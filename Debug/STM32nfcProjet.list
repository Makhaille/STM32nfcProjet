
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bcc8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0801be04  0801be04  0002be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d818  0801d818  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  0801d818  0801d818  0002d818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d820  0801d820  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d820  0801d820  0002d820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d824  0801d824  0002d824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0801d828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c5c  20000198  0801d9c0  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003df4  0801d9c0  00033df4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030138  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007114  00000000  00000000  000602f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  00067410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d18  00000000  00000000  000693e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022960  00000000  00000000  0006b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033900  00000000  00000000  0008da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a93ff  00000000  00000000  000c1360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a75f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008534  00000000  00000000  0016a7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000198 	.word	0x20000198
 8000158:	00000000 	.word	0x00000000
 800015c:	0801bdec 	.word	0x0801bdec

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000019c 	.word	0x2000019c
 8000178:	0801bdec 	.word	0x0801bdec

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x40 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f023 030f 	bic.w	r3, r3, #15
 80004a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	f043 030c 	orr.w	r3, r3, #12
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004c0:	7bbb      	ldrb	r3, [r7, #14]
 80004c2:	f043 030c 	orr.w	r3, r3, #12
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d4:	f107 0208 	add.w	r2, r7, #8
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2304      	movs	r3, #4
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_cmd+0x5c>)
 80004e2:	f004 fe1f 	bl	8005124 <HAL_I2C_Master_Transmit>
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200003bc 	.word	0x200003bc

080004f4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f023 030f 	bic.w	r3, r3, #15
 8000504:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	f043 030d 	orr.w	r3, r3, #13
 8000512:	b2db      	uxtb	r3, r3
 8000514:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f043 0309 	orr.w	r3, r3, #9
 800051c:	b2db      	uxtb	r3, r3
 800051e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	f043 030d 	orr.w	r3, r3, #13
 8000526:	b2db      	uxtb	r3, r3
 8000528:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f043 0309 	orr.w	r3, r3, #9
 8000530:	b2db      	uxtb	r3, r3
 8000532:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000534:	f107 0208 	add.w	r2, r7, #8
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2304      	movs	r3, #4
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <lcd_send_data+0x5c>)
 8000542:	f004 fdef 	bl	8005124 <HAL_I2C_Master_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200003bc 	.word	0x200003bc

08000554 <lcd_clear>:

void lcd_clear (void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800055a:	2080      	movs	r0, #128	; 0x80
 800055c:	f7ff ff9a 	bl	8000494 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e005      	b.n	8000572 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000566:	2020      	movs	r0, #32
 8000568:	f7ff ffc4 	bl	80004f4 <lcd_send_data>
	for (int i=0; i<70; i++)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b45      	cmp	r3, #69	; 0x45
 8000576:	ddf6      	ble.n	8000566 <lcd_clear+0x12>
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
    switch (row)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <lcd_put_cur+0x18>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d005      	beq.n	80005a4 <lcd_put_cur+0x22>
 8000598:	e009      	b.n	80005ae <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	603b      	str	r3, [r7, #0]
            break;
 80005a2:	e004      	b.n	80005ae <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005aa:	603b      	str	r3, [r7, #0]
            break;
 80005ac:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff6e 	bl	8000494 <lcd_send_cmd>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <lcd_init>:


void lcd_init (void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f004 f8f1 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ca:	2030      	movs	r0, #48	; 0x30
 80005cc:	f7ff ff62 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005d0:	2005      	movs	r0, #5
 80005d2:	f004 f8eb 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d6:	2030      	movs	r0, #48	; 0x30
 80005d8:	f7ff ff5c 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005dc:	2001      	movs	r0, #1
 80005de:	f004 f8e5 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e2:	2030      	movs	r0, #48	; 0x30
 80005e4:	f7ff ff56 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f004 f8df 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005ee:	2020      	movs	r0, #32
 80005f0:	f7ff ff50 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f004 f8d9 	bl	80047ac <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005fa:	2028      	movs	r0, #40	; 0x28
 80005fc:	f7ff ff4a 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f004 f8d3 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000606:	2008      	movs	r0, #8
 8000608:	f7ff ff44 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f004 f8cd 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff3e 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f004 f8c7 	bl	80047ac <HAL_Delay>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f004 f8c4 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000624:	2006      	movs	r0, #6
 8000626:	f7ff ff35 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f004 f8be 	bl	80047ac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000630:	200c      	movs	r0, #12
 8000632:	f7ff ff2f 	bl	8000494 <lcd_send_cmd>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000642:	e006      	b.n	8000652 <lcd_send_string+0x18>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff51 	bl	80004f4 <lcd_send_data>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f4      	bne.n	8000644 <lcd_send_string+0xa>
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <logUsartInit+0x18>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200003b8 	.word	0x200003b8

08000680 <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <logUsartTx+0x34>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 8000694:	2326      	movs	r3, #38	; 0x26
 8000696:	e008      	b.n	80006aa <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <logUsartTx+0x34>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	887a      	ldrh	r2, [r7, #2]
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f007 fe3f 	bl	8008326 <HAL_UART_Transmit>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200003b8 	.word	0x200003b8

080006b8 <logUsart>:

int logUsart(const char* format, ...)
{
 80006b8:	b40f      	push	{r0, r1, r2, r3}
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b0c2      	sub	sp, #264	; 0x108
 80006be:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 80006c0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80006c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80006c8:	4638      	mov	r0, r7
 80006ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80006ce:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80006d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d6:	f01a ff49 	bl	801b56c <vsniprintf>
 80006da:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd4b 	bl	800017c <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffc6 	bl	8000680 <logUsartTx>
    return cnt;
 80006f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006fe:	46bd      	mov	sp, r7
 8000700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr

08000708 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <hex2Str+0xe8>)
 8000718:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <hex2Str+0xec>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	01db      	lsls	r3, r3, #7
 8000720:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <hex2Str+0xf0>)
 8000722:	4413      	add	r3, r2
 8000724:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <hex2Str+0xec>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d103      	bne.n	800073e <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e042      	b.n	80007c4 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b40      	cmp	r3, #64	; 0x40
 8000742:	bf28      	it	cs
 8000744:	2340      	movcs	r3, #64	; 0x40
 8000746:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8000748:	e01c      	b.n	8000784 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	441a      	add	r2, r3
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	1c59      	adds	r1, r3, #1
 800075e:	61b9      	str	r1, [r7, #24]
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	61fa      	str	r2, [r7, #28]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f003 030f 	and.w	r3, r3, #15
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	441a      	add	r2, r3
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	1c59      	adds	r1, r3, #1
 8000778:	61b9      	str	r1, [r7, #24]
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	3301      	adds	r3, #1
 8000782:	75fb      	strb	r3, [r7, #23]
 8000784:	7dfa      	ldrb	r2, [r7, #23]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	429a      	cmp	r2, r3
 800078c:	d3dd      	bcc.n	800074a <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	441a      	add	r2, r3
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	1c59      	adds	r1, r3, #1
 80007a2:	61b9      	str	r1, [r7, #24]
 80007a4:	7812      	ldrb	r2, [r2, #0]
 80007a6:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f003 030f 	and.w	r3, r3, #15
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	441a      	add	r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	1c59      	adds	r1, r3, #1
 80007b8:	61b9      	str	r1, [r7, #24]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <hex2Str+0xec>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <hex2Str+0xec>)
 80007ce:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <hex2Str+0xec>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <hex2Str+0xec>)
 80007dc:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	01db      	lsls	r3, r3, #7
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <hex2Str+0xf0>)
 80007e4:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	0801be04 	.word	0x0801be04
 80007f4:	200003b4 	.word	0x200003b4
 80007f8:	200001b4 	.word	0x200001b4

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f003 ff65 	bl	80046d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f8a7 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f9ab 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f97f 	bl	8000b10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000812:	f000 f91d 	bl	8000a50 <MX_SPI1_Init>
  MX_UART4_Init();
 8000816:	f000 f951 	bl	8000abc <MX_UART4_Init>
  MX_I2C1_Init();
 800081a:	f000 f8eb 	bl	80009f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize driver*/
  spiInit(&hspi1);
 800081e:	4845      	ldr	r0, [pc, #276]	; (8000934 <main+0x138>)
 8000820:	f002 fbe6 	bl	8002ff0 <spiInit>

  /* Initialize LCD*/
  lcd_init ();
 8000824:	f7ff fecc 	bl	80005c0 <lcd_init>
  lcd_put_cur(0, 0);
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fea9 	bl	8000582 <lcd_put_cur>
  lcd_send_string(strLcdLine1);
 8000830:	4841      	ldr	r0, [pc, #260]	; (8000938 <main+0x13c>)
 8000832:	f7ff ff02 	bl	800063a <lcd_send_string>
  lcd_put_cur(1, 0);
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fea2 	bl	8000582 <lcd_put_cur>
  lcd_send_string(strLcdLine2);
 800083e:	483f      	ldr	r0, [pc, #252]	; (800093c <main+0x140>)
 8000840:	f7ff fefb 	bl	800063a <lcd_send_string>

  /* Initialize log module */
  logUsartInit(&huart2);
 8000844:	483e      	ldr	r0, [pc, #248]	; (8000940 <main+0x144>)
 8000846:	f7ff ff0d 	bl	8000664 <logUsartInit>

  platformLog("Welcome to the NFC enabler application\r\n");
 800084a:	483e      	ldr	r0, [pc, #248]	; (8000944 <main+0x148>)
 800084c:	f7ff ff34 	bl	80006b8 <logUsart>


  if( !demoIni() )
 8000850:	f000 faba 	bl	8000dc8 <demoIni>
 8000854:	4603      	mov	r3, r0
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d01f      	beq.n	80008a0 <main+0xa4>
    {
      /*
      * in case the rfal initalization failed signal it by flashing all LED
      * and stoping all operations
      */
      platformLog("Initialization failed..\r\n");
 8000860:	4839      	ldr	r0, [pc, #228]	; (8000948 <main+0x14c>)
 8000862:	f7ff ff29 	bl	80006b8 <logUsart>
      while(1)
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <main+0x150>)
 800086c:	f004 fadb 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000870:	2101      	movs	r1, #1
 8000872:	4837      	ldr	r0, [pc, #220]	; (8000950 <main+0x154>)
 8000874:	f004 fad7 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000878:	2110      	movs	r1, #16
 800087a:	4834      	ldr	r0, [pc, #208]	; (800094c <main+0x150>)
 800087c:	f004 fad3 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000880:	2102      	movs	r1, #2
 8000882:	4832      	ldr	r0, [pc, #200]	; (800094c <main+0x150>)
 8000884:	f004 facf 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000888:	2110      	movs	r1, #16
 800088a:	4831      	ldr	r0, [pc, #196]	; (8000950 <main+0x154>)
 800088c:	f004 facb 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000890:	2120      	movs	r1, #32
 8000892:	482f      	ldr	r0, [pc, #188]	; (8000950 <main+0x154>)
 8000894:	f004 fac7 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformDelay(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f003 ff87 	bl	80047ac <HAL_Delay>
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800089e:	e7e2      	b.n	8000866 <main+0x6a>
      }
    }
    else
    {
      platformLog("Initialization succeeded..\r\n");
 80008a0:	482c      	ldr	r0, [pc, #176]	; (8000954 <main+0x158>)
 80008a2:	f7ff ff09 	bl	80006b8 <logUsart>
      for (int i = 0; i < 6; i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	e01e      	b.n	80008ea <main+0xee>
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4826      	ldr	r0, [pc, #152]	; (800094c <main+0x150>)
 80008b2:	f004 fab8 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80008b6:	2101      	movs	r1, #1
 80008b8:	4825      	ldr	r0, [pc, #148]	; (8000950 <main+0x154>)
 80008ba:	f004 fab4 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80008be:	2110      	movs	r1, #16
 80008c0:	4822      	ldr	r0, [pc, #136]	; (800094c <main+0x150>)
 80008c2:	f004 fab0 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80008c6:	2102      	movs	r1, #2
 80008c8:	4820      	ldr	r0, [pc, #128]	; (800094c <main+0x150>)
 80008ca:	f004 faac 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80008ce:	2110      	movs	r1, #16
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <main+0x154>)
 80008d2:	f004 faa8 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80008d6:	2120      	movs	r1, #32
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <main+0x154>)
 80008da:	f004 faa4 	bl	8004e26 <HAL_GPIO_TogglePin>
        platformDelay(200);
 80008de:	20c8      	movs	r0, #200	; 0xc8
 80008e0:	f003 ff64 	bl	80047ac <HAL_Delay>
      for (int i = 0; i < 6; i++)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	dddd      	ble.n	80008ac <main+0xb0>
      }

      platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <main+0x154>)
 80008f6:	f004 fa7e 	bl	8004df6 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <main+0x150>)
 8000900:	f004 fa79 	bl	8004df6 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000904:	2200      	movs	r2, #0
 8000906:	2102      	movs	r1, #2
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <main+0x150>)
 800090a:	f004 fa74 	bl	8004df6 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <main+0x154>)
 8000914:	f004 fa6f 	bl	8004df6 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <main+0x154>)
 800091e:	f004 fa6a 	bl	8004df6 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <main+0x150>)
 800092a:	f004 fa64 	bl	8004df6 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 /* Run Demo Application */
	 demoCycle();
 800092e:	f000 faa5 	bl	8000e7c <demoCycle>
 8000932:	e7fc      	b.n	800092e <main+0x132>
 8000934:	20000410 	.word	0x20000410
 8000938:	20000000 	.word	0x20000000
 800093c:	20000008 	.word	0x20000008
 8000940:	200004ac 	.word	0x200004ac
 8000944:	0801be18 	.word	0x0801be18
 8000948:	0801be44 	.word	0x0801be44
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400
 8000954:	0801be60 	.word	0x0801be60

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b092      	sub	sp, #72	; 0x48
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f01a fdcc 	bl	801b504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <SystemClock_Config+0x98>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <SystemClock_Config+0x98>)
 8000984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000988:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098a:	2302      	movs	r3, #2
 800098c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000992:	2310      	movs	r3, #16
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099a:	2300      	movs	r3, #0
 800099c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800099e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80009a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4618      	mov	r0, r3
 80009b0:	f006 fb80 	bl	80070b4 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009ba:	f000 f99f 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2303      	movs	r3, #3
 80009c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f006 fe9c 	bl	8007714 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009e2:	f000 f98b 	bl	8000cfc <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3748      	adds	r7, #72	; 0x48
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f004 fa33 	bl	8004e9c <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 f95e 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200003bc 	.word	0x200003bc
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_SPI1_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a84:	2218      	movs	r2, #24
 8000a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000aa2:	f007 f8fd 	bl	8007ca0 <HAL_SPI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 f926 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000410 	.word	0x20000410
 8000ab8:	40013000 	.word	0x40013000

08000abc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_UART4_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000acc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_UART4_Init+0x4c>)
 8000af4:	f007 fbca 	bl	800828c <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f8fd 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000468 	.word	0x20000468
 8000b0c:	40004c00 	.word	0x40004c00

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f007 fba0 	bl	800828c <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f8d3 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200004ac 	.word	0x200004ac
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a3e      	ldr	r2, [pc, #248]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a38      	ldr	r2, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000be0:	4826      	ldr	r0, [pc, #152]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000be2:	f004 f908 	bl	8004df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2171      	movs	r1, #113	; 0x71
 8000bea:	4825      	ldr	r0, [pc, #148]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000bec:	f004 f903 	bl	8004df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	481f      	ldr	r0, [pc, #124]	; (8000c84 <MX_GPIO_Init+0x120>)
 8000c08:	f003 ff4e 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_3911_Pin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4816      	ldr	r0, [pc, #88]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c22:	f003 ff41 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_F_Pin LED_B_Pin LED_FIELD_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8000c26:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c40:	f003 ff32 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_V_Pin LED_AP2P_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8000c44:	2371      	movs	r3, #113	; 0x71
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000c5c:	f003 ff24 	bl	8004aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2006      	movs	r0, #6
 8000c66:	f003 fe9a 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f003 feb3 	bl	80049d6 <HAL_NVIC_EnableIRQ>

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020800 	.word	0x40020800

08000c88 <ringbell>:
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}

void ringbell(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t Track2 = 0x11;
 8000c8e:	2311      	movs	r3, #17
 8000c90:	73fb      	strb	r3, [r7, #15]
	uint8_t volume = 0x1E;
 8000c92:	231e      	movs	r3, #30
 8000c94:	73bb      	strb	r3, [r7, #14]
	uint8_t play2[6] = {0xAA,0x07,0x02,0x00,Track2,Track2+0xB3};
 8000c96:	23aa      	movs	r3, #170	; 0xaa
 8000c98:	723b      	strb	r3, [r7, #8]
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	727b      	strb	r3, [r7, #9]
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	72bb      	strb	r3, [r7, #10]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72fb      	strb	r3, [r7, #11]
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	733b      	strb	r3, [r7, #12]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	3b4d      	subs	r3, #77	; 0x4d
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	737b      	strb	r3, [r7, #13]
	uint8_t soundlvl[5] = {0xAA,0x13,0x01,volume,volume+0xBE};
 8000cb2:	23aa      	movs	r3, #170	; 0xaa
 8000cb4:	703b      	strb	r3, [r7, #0]
 8000cb6:	2313      	movs	r3, #19
 8000cb8:	707b      	strb	r3, [r7, #1]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	70bb      	strb	r3, [r7, #2]
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	70fb      	strb	r3, [r7, #3]
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	3b42      	subs	r3, #66	; 0x42
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart4, play2, 6, 500);
 8000cca:	f107 0108 	add.w	r1, r7, #8
 8000cce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <ringbell+0x70>)
 8000cd6:	f007 fb26 	bl	8008326 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, soundlvl, 5, 500);
 8000cda:	4639      	mov	r1, r7
 8000cdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <ringbell+0x70>)
 8000ce4:	f007 fb1f 	bl	8008326 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cec:	f003 fd5e 	bl	80047ac <HAL_Delay>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000468 	.word	0x20000468

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	481f      	ldr	r0, [pc, #124]	; (8000d90 <checkUserButton+0x88>)
 8000d12:	f004 f859 	bl	8004dc8 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d036      	beq.n	8000d8a <checkUserButton+0x82>
    {
        ndefDemoFeature++;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <checkUserButton+0x8c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <checkUserButton+0x8c>)
 8000d26:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <checkUserButton+0x8c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <checkUserButton+0x8c>)
 8000d34:	701a      	strb	r2, [r3, #0]

        ledsOff();
 8000d36:	f001 fb33 	bl	80023a0 <ledsOff>
        ndefDemoPrevFeature = ndefDemoFeature;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <checkUserButton+0x8c>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <checkUserButton+0x90>)
 8000d40:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <checkUserButton+0x8c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <checkUserButton+0x94>)
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <checkUserButton+0x98>)
 8000d52:	f7ff fcb1 	bl	80006b8 <logUsart>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8000d56:	bf00      	nop
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <checkUserButton+0x88>)
 8000d5e:	f004 f833 	bl	8004dc8 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d1f7      	bne.n	8000d58 <checkUserButton+0x50>
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <checkUserButton+0x8c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <checkUserButton+0x82>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8000d70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d74:	f003 fc88 	bl	8004688 <timerCalculateTimer>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <checkUserButton+0x9c>)
 8000d7c:	6013      	str	r3, [r2, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000d7e:	20fa      	movs	r0, #250	; 0xfa
 8000d80:	f003 fc82 	bl	8004688 <timerCalculateTimer>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <checkUserButton+0xa0>)
 8000d88:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020800 	.word	0x40020800
 8000d94:	20001054 	.word	0x20001054
 8000d98:	200000a3 	.word	0x200000a3
 8000d9c:	20000060 	.word	0x20000060
 8000da0:	0801bed0 	.word	0x0801bed0
 8000da4:	20003058 	.word	0x20003058
 8000da8:	2000305c 	.word	0x2000305c

08000dac <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    //uint32_t i;
    
    //platformLog("Use the User button to cycle among the different modes:\r\n");

    platformLog("%s\r\n", ndefDemoFeatureDescription[0]);
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <ndefShowDemoUsage+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ndefShowDemoUsage+0x18>)
 8000db8:	f7ff fc7e 	bl	80006b8 <logUsart>
//    {
//        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
//    }
    //platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
#endif /* NDEF_FEATURE_ALL */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000060 	.word	0x20000060
 8000dc4:	0801bed0 	.word	0x0801bed0

08000dc8 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
//        verbose = true;
//    }
//#endif
    ndefShowDemoUsage();
 8000dce:	f7ff ffed 	bl	8000dac <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8000dd2:	f010 fd73 	bl	80118bc <rfalNfcInitialize>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d140      	bne.n	8000e62 <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <demoIni+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <demoIni+0xa4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <demoIni+0xa4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <demoIni+0xa4>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <demoIni+0xa4>)
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <demoIni+0xa8>)
 8000dfe:	3308      	adds	r3, #8
 8000e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e02:	c303      	stmia	r3!, {r0, r1}
 8000e04:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <demoIni+0xa4>)
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <demoIni+0xac>)
 8000e0a:	f103 0512 	add.w	r5, r3, #18
 8000e0e:	4614      	mov	r4, r2
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	6028      	str	r0, [r5, #0]
 8000e14:	6069      	str	r1, [r5, #4]
 8000e16:	60aa      	str	r2, [r5, #8]
 8000e18:	60eb      	str	r3, [r5, #12]
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <demoIni+0xa4>)
 8000e20:	2214      	movs	r2, #20
 8000e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <demoIni+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <demoIni+0xa4>)
 8000e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e32:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <demoIni+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <demoIni+0xa4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <demoIni+0xa4>)
 8000e46:	222f      	movs	r2, #47	; 0x2f
 8000e48:	805a      	strh	r2, [r3, #2]
#if defined(ST25R3911) || defined(ST25R3916)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <demoIni+0xa4>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <demoIni+0xa4>)
 8000e56:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <demoIni+0xb0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
        return true;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <demoIni+0x9c>
    }
    return false;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6c:	200005f8 	.word	0x200005f8
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000018 	.word	0x20000018
 8000e78:	2000067c 	.word	0x2000067c

08000e7c <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09a      	sub	sp, #104	; 0x68
 8000e80:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000e8c:	f010 fe10 	bl	8011ab0 <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8000e90:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <demoCycle+0x2b8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00d      	beq.n	8000eb4 <demoCycle+0x38>
 8000e98:	4ba7      	ldr	r3, [pc, #668]	; (8001138 <demoCycle+0x2bc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fc01 	bl	80046a4 <timerIsExpired>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8000ea8:	48a4      	ldr	r0, [pc, #656]	; (800113c <demoCycle+0x2c0>)
 8000eaa:	f7ff fc05 	bl	80006b8 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8000eae:	4ba1      	ldr	r3, [pc, #644]	; (8001134 <demoCycle+0x2b8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8000eb4:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <demoCycle+0x2b8>)
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	4ba1      	ldr	r3, [pc, #644]	; (8001140 <demoCycle+0x2c4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d00d      	beq.n	8000edc <demoCycle+0x60>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8000ec0:	4b9c      	ldr	r3, [pc, #624]	; (8001134 <demoCycle+0x2b8>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	4b9e      	ldr	r3, [pc, #632]	; (8001140 <demoCycle+0x2c4>)
 8000ec6:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000ec8:	4b9a      	ldr	r3, [pc, #616]	; (8001134 <demoCycle+0x2b8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b9d      	ldr	r3, [pc, #628]	; (8001144 <demoCycle+0x2c8>)
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	489c      	ldr	r0, [pc, #624]	; (8001148 <demoCycle+0x2cc>)
 8000ed8:	f7ff fbee 	bl	80006b8 <logUsart>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8000edc:	4b95      	ldr	r3, [pc, #596]	; (8001134 <demoCycle+0x2b8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d025      	beq.n	8000f30 <demoCycle+0xb4>
    {
        if( platformTimerIsExpired(timerLed) )
 8000ee4:	4b99      	ldr	r3, [pc, #612]	; (800114c <demoCycle+0x2d0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fbdb 	bl	80046a4 <timerIsExpired>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d014      	beq.n	8000f1e <demoCycle+0xa2>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000ef4:	20fa      	movs	r0, #250	; 0xfa
 8000ef6:	f003 fbc7 	bl	8004688 <timerCalculateTimer>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a93      	ldr	r2, [pc, #588]	; (800114c <demoCycle+0x2d0>)
 8000efe:	6013      	str	r3, [r2, #0]
            ledOn = !ledOn;
 8000f00:	4b93      	ldr	r3, [pc, #588]	; (8001150 <demoCycle+0x2d4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf14      	ite	ne
 8000f08:	2301      	movne	r3, #1
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b8d      	ldr	r3, [pc, #564]	; (8001150 <demoCycle+0x2d4>)
 8000f1c:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <demoCycle+0x2d4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <demoCycle+0xb0>
        {
            ledsOn();
 8000f26:	f001 fa13 	bl	8002350 <ledsOn>
 8000f2a:	e001      	b.n	8000f30 <demoCycle+0xb4>
        }
        else
        {
            ledsOff();
 8000f2c:	f001 fa38 	bl	80023a0 <ledsOff>
        }
    }
    
    checkUserButton();
 8000f30:	f7ff feea 	bl	8000d08 <checkUserButton>
    
    switch( state )
 8000f34:	4b87      	ldr	r3, [pc, #540]	; (8001154 <demoCycle+0x2d8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <demoCycle+0xc6>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00c      	beq.n	8000f5a <demoCycle+0xde>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8000f40:	e23d      	b.n	80013be <demoCycle+0x542>
            ledsOff();
 8000f42:	f001 fa2d 	bl	80023a0 <ledsOff>
            rfalNfcDeactivate( false );
 8000f46:	2000      	movs	r0, #0
 8000f48:	f010 fd60 	bl	8011a0c <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 8000f4c:	4882      	ldr	r0, [pc, #520]	; (8001158 <demoCycle+0x2dc>)
 8000f4e:	f010 fcd1 	bl	80118f4 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <demoCycle+0x2d8>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
            break;
 8000f58:	e231      	b.n	80013be <demoCycle+0x542>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8000f5a:	f010 fd79 	bl	8011a50 <rfalNfcGetState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b1d      	cmp	r3, #29
 8000f62:	f240 822b 	bls.w	80013bc <demoCycle+0x540>
 8000f66:	f010 fd73 	bl	8011a50 <rfalNfcGetState>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b21      	cmp	r3, #33	; 0x21
 8000f6e:	f200 8225 	bhi.w	80013bc <demoCycle+0x540>
                rfalNfcGetActiveDevice( &nfcDevice );
 8000f72:	487a      	ldr	r0, [pc, #488]	; (800115c <demoCycle+0x2e0>)
 8000f74:	f010 fd76 	bl	8011a64 <rfalNfcGetActiveDevice>
                ledsOff();
 8000f78:	f001 fa12 	bl	80023a0 <ledsOff>
                platformDelay(50);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f003 fc15 	bl	80047ac <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8000f82:	4b6f      	ldr	r3, [pc, #444]	; (8001140 <demoCycle+0x2c4>)
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8000f88:	4b74      	ldr	r3, [pc, #464]	; (800115c <demoCycle+0x2e0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	f200 8207 	bhi.w	80013a2 <demoCycle+0x526>
 8000f94:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <demoCycle+0x120>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fb5 	.word	0x08000fb5
 8000fa0:	080010ed 	.word	0x080010ed
 8000fa4:	080011e1 	.word	0x080011e1
 8000fa8:	080012af 	.word	0x080012af
 8000fac:	0800134b 	.word	0x0800134b
 8000fb0:	08001375 	.word	0x08001375
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4869      	ldr	r0, [pc, #420]	; (8001160 <demoCycle+0x2e4>)
 8000fba:	f003 ff1c 	bl	8004df6 <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <demoCycle+0x2e0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	2b60      	cmp	r3, #96	; 0x60
 8000fc6:	d033      	beq.n	8001030 <demoCycle+0x1b4>
 8000fc8:	2b60      	cmp	r3, #96	; 0x60
 8000fca:	dc43      	bgt.n	8001054 <demoCycle+0x1d8>
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d02f      	beq.n	8001030 <demoCycle+0x1b4>
 8000fd0:	2b40      	cmp	r3, #64	; 0x40
 8000fd2:	dc3f      	bgt.n	8001054 <demoCycle+0x1d8>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <demoCycle+0x162>
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d012      	beq.n	8001002 <demoCycle+0x186>
 8000fdc:	e03a      	b.n	8001054 <demoCycle+0x1d8>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <demoCycle+0x2e0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	4b5d      	ldr	r3, [pc, #372]	; (800115c <demoCycle+0x2e0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	7f1b      	ldrb	r3, [r3, #28]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f7ff fb8b 	bl	8000708 <hex2Str>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	485b      	ldr	r0, [pc, #364]	; (8001164 <demoCycle+0x2e8>)
 8000ff8:	f7ff fb5e 	bl	80006b8 <logUsart>
                                rfalNfcaPollerSleep();
 8000ffc:	f014 ffba 	bl	8015f74 <rfalNfcaPollerSleep>
                                break;
 8001000:	e03f      	b.n	8001082 <demoCycle+0x206>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <demoCycle+0x2e0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	4b54      	ldr	r3, [pc, #336]	; (800115c <demoCycle+0x2e0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	7f1b      	ldrb	r3, [r3, #28]
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f7ff fb79 	bl	8000708 <hex2Str>
 8001016:	4603      	mov	r3, r0
 8001018:	4619      	mov	r1, r3
 800101a:	4853      	ldr	r0, [pc, #332]	; (8001168 <demoCycle+0x2ec>)
 800101c:	f7ff fb4c 	bl	80006b8 <logUsart>
                                demoNdef(nfcDevice);
 8001020:	4b4e      	ldr	r3, [pc, #312]	; (800115c <demoCycle+0x2e0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 faf3 	bl	8001610 <demoNdef>
                                rfalIsoDepDeselect(); 
 800102a:	f00f fd11 	bl	8010a50 <rfalIsoDepDeselect>
                                break;
 800102e:	e028      	b.n	8001082 <demoCycle+0x206>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001030:	4b4a      	ldr	r3, [pc, #296]	; (800115c <demoCycle+0x2e0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	699a      	ldr	r2, [r3, #24]
 8001036:	4b49      	ldr	r3, [pc, #292]	; (800115c <demoCycle+0x2e0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	7f1b      	ldrb	r3, [r3, #28]
 800103c:	4619      	mov	r1, r3
 800103e:	4610      	mov	r0, r2
 8001040:	f7ff fb62 	bl	8000708 <hex2Str>
 8001044:	4603      	mov	r3, r0
 8001046:	4619      	mov	r1, r3
 8001048:	4848      	ldr	r0, [pc, #288]	; (800116c <demoCycle+0x2f0>)
 800104a:	f7ff fb35 	bl	80006b8 <logUsart>
                                demoP2P();
 800104e:	f000 f9cf 	bl	80013f0 <demoP2P>
                                break;
 8001052:	e016      	b.n	8001082 <demoCycle+0x206>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <demoCycle+0x2e0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	4b40      	ldr	r3, [pc, #256]	; (800115c <demoCycle+0x2e0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	7f1b      	ldrb	r3, [r3, #28]
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f7ff fb50 	bl	8000708 <hex2Str>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	4840      	ldr	r0, [pc, #256]	; (8001170 <demoCycle+0x2f4>)
 800106e:	f7ff fb23 	bl	80006b8 <logUsart>
                                demoNdef(nfcDevice);
 8001072:	4b3a      	ldr	r3, [pc, #232]	; (800115c <demoCycle+0x2e0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 faca 	bl	8001610 <demoNdef>
                                rfalNfcaPollerSleep();
 800107c:	f014 ff7a 	bl	8015f74 <rfalNfcaPollerSleep>
                                break;
 8001080:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001082:	483c      	ldr	r0, [pc, #240]	; (8001174 <demoCycle+0x2f8>)
 8001084:	f7ff fb18 	bl	80006b8 <logUsart>
                        rfalNfcaPollerInitialize();
 8001088:	f014 fbac 	bl	80157e4 <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 800108c:	e024      	b.n	80010d8 <demoCycle+0x25c>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <demoCycle+0x2e0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <demoCycle+0x22a>
 8001098:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	f040 8180 	bne.w	80013a6 <demoCycle+0x52a>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <demoCycle+0x2e0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d00e      	beq.n	80010ce <demoCycle+0x252>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <demoCycle+0x2e0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1d98      	adds	r0, r3, #6
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <demoCycle+0x2e0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010c0:	4619      	mov	r1, r3
 80010c2:	f014 fee5 	bl	8015e90 <rfalNfcaPollerSelect>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f040 816c 	bne.w	80013a6 <demoCycle+0x52a>
                            rfalNfcaPollerSleep();
 80010ce:	f014 ff51 	bl	8015f74 <rfalNfcaPollerSleep>
                            platformDelay(130);
 80010d2:	2082      	movs	r0, #130	; 0x82
 80010d4:	f003 fb6a 	bl	80047ac <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 80010d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010dc:	4619      	mov	r1, r3
 80010de:	2052      	movs	r0, #82	; 0x52
 80010e0:	f014 fba4 	bl	801582c <rfalNfcaPollerCheckPresence>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0d1      	beq.n	800108e <demoCycle+0x212>
                        break;
 80010ea:	e15c      	b.n	80013a6 <demoCycle+0x52a>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <demoCycle+0x2e0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <demoCycle+0x2e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7f1b      	ldrb	r3, [r3, #28]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fb04 	bl	8000708 <hex2Str>
 8001100:	4603      	mov	r3, r0
 8001102:	4619      	mov	r1, r3
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <demoCycle+0x2fc>)
 8001106:	f7ff fad7 	bl	80006b8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	481b      	ldr	r0, [pc, #108]	; (800117c <demoCycle+0x300>)
 8001110:	f003 fe71 	bl	8004df6 <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <demoCycle+0x2e0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	7b1b      	ldrb	r3, [r3, #12]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d02e      	beq.n	8001180 <demoCycle+0x304>
                            demoNdef(nfcDevice);
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <demoCycle+0x2e0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fa72 	bl	8001610 <demoNdef>
                            rfalIsoDepDeselect();
 800112c:	f00f fc90 	bl	8010a50 <rfalIsoDepDeselect>
 8001130:	e02c      	b.n	800118c <demoCycle+0x310>
 8001132:	bf00      	nop
 8001134:	20001054 	.word	0x20001054
 8001138:	20003058 	.word	0x20003058
 800113c:	0801bed8 	.word	0x0801bed8
 8001140:	200000a3 	.word	0x200000a3
 8001144:	20000060 	.word	0x20000060
 8001148:	0801bed0 	.word	0x0801bed0
 800114c:	2000305c 	.word	0x2000305c
 8001150:	20003060 	.word	0x20003060
 8001154:	2000067c 	.word	0x2000067c
 8001158:	200005f8 	.word	0x200005f8
 800115c:	20003064 	.word	0x20003064
 8001160:	40020400 	.word	0x40020400
 8001164:	0801bf00 	.word	0x0801bf00
 8001168:	0801bf34 	.word	0x0801bf34
 800116c:	0801bf64 	.word	0x0801bf64
 8001170:	0801bf90 	.word	0x0801bf90
 8001174:	0801bfb8 	.word	0x0801bfb8
 8001178:	0801bff4 	.word	0x0801bff4
 800117c:	40020000 	.word	0x40020000
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8001180:	4b91      	ldr	r3, [pc, #580]	; (80013c8 <demoCycle+0x54c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3303      	adds	r3, #3
 8001186:	4618      	mov	r0, r3
 8001188:	f014 ffda 	bl	8016140 <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 800118c:	488f      	ldr	r0, [pc, #572]	; (80013cc <demoCycle+0x550>)
 800118e:	f7ff fa93 	bl	80006b8 <logUsart>
                        rfalNfcbPollerInitialize();
 8001192:	f014 ff43 	bl	801601c <rfalNfcbPollerInitialize>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8001196:	e015      	b.n	80011c4 <demoCycle+0x348>
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8001198:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <demoCycle+0x54c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	1cd9      	adds	r1, r3, #3
 800119e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a2:	3301      	adds	r3, #1
 80011a4:	2204      	movs	r2, #4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f01a f974 	bl	801b494 <memcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d114      	bne.n	80011dc <demoCycle+0x360>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <demoCycle+0x54c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3303      	adds	r3, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f014 ffc1 	bl	8016140 <rfalNfcbPollerSleep>
                            platformDelay(130);
 80011be:	2082      	movs	r0, #130	; 0x82
 80011c0:	f003 faf4 	bl	80047ac <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 80011c4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80011c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011cc:	2100      	movs	r1, #0
 80011ce:	2008      	movs	r0, #8
 80011d0:	f014 ff50 	bl	8016074 <rfalNfcbPollerCheckPresence>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0de      	beq.n	8001198 <demoCycle+0x31c>
                        break;
 80011da:	e0e5      	b.n	80013a8 <demoCycle+0x52c>
                                break;
 80011dc:	bf00      	nop
                        break;
 80011de:	e0e3      	b.n	80013a8 <demoCycle+0x52c>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 80011e0:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <demoCycle+0x54c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d116      	bne.n	8001218 <demoCycle+0x39c>
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <demoCycle+0x54c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	2bfe      	cmp	r3, #254	; 0xfe
 80011f2:	d111      	bne.n	8001218 <demoCycle+0x39c>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80011f4:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <demoCycle+0x54c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <demoCycle+0x54c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7f1b      	ldrb	r3, [r3, #28]
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f7ff fa80 	bl	8000708 <hex2Str>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	4870      	ldr	r0, [pc, #448]	; (80013d0 <demoCycle+0x554>)
 800120e:	f7ff fa53 	bl	80006b8 <logUsart>
                            demoP2P();
 8001212:	f000 f8ed 	bl	80013f0 <demoP2P>
 8001216:	e013      	b.n	8001240 <demoCycle+0x3c4>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <demoCycle+0x54c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <demoCycle+0x54c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	7f1b      	ldrb	r3, [r3, #28]
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f7ff fa6e 	bl	8000708 <hex2Str>
 800122c:	4603      	mov	r3, r0
 800122e:	4619      	mov	r1, r3
 8001230:	4868      	ldr	r0, [pc, #416]	; (80013d4 <demoCycle+0x558>)
 8001232:	f7ff fa41 	bl	80006b8 <logUsart>
                            demoNdef(nfcDevice);
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <demoCycle+0x54c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f9e8 	bl	8001610 <demoNdef>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8001240:	2201      	movs	r2, #1
 8001242:	2102      	movs	r1, #2
 8001244:	4864      	ldr	r0, [pc, #400]	; (80013d8 <demoCycle+0x55c>)
 8001246:	f003 fdd6 	bl	8004df6 <HAL_GPIO_WritePin>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 800124a:	4860      	ldr	r0, [pc, #384]	; (80013cc <demoCycle+0x550>)
 800124c:	f7ff fa34 	bl	80006b8 <logUsart>
                        devCnt = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        rfalNfcfPollerInitialize( RFAL_BR_212 );
 8001256:	2001      	movs	r0, #1
 8001258:	f015 fab4 	bl	80167c4 <rfalNfcfPollerInitialize>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 800125c:	e012      	b.n	8001284 <demoCycle+0x408>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	3301      	adds	r3, #1
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 8001266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001268:	1c58      	adds	r0, r3, #1
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <demoCycle+0x54c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3303      	adds	r3, #3
 8001270:	2208      	movs	r2, #8
 8001272:	4619      	mov	r1, r3
 8001274:	f01a f90e 	bl	801b494 <memcmp>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <demoCycle+0x42e>
                            platformDelay(130);
 800127e:	2082      	movs	r0, #130	; 0x82
 8001280:	f003 fa94 	bl	80047ac <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001284:	f107 0220 	add.w	r2, r7, #32
 8001288:	f107 031f 	add.w	r3, r7, #31
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800129c:	2000      	movs	r0, #0
 800129e:	f015 fac1 	bl	8016824 <rfalNfcfPollerPoll>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0da      	beq.n	800125e <demoCycle+0x3e2>
                        break;
 80012a8:	e07e      	b.n	80013a8 <demoCycle+0x52c>
                                break;
 80012aa:	bf00      	nop
                        break;
 80012ac:	e07c      	b.n	80013a8 <demoCycle+0x52c>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <demoCycle+0x54c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6999      	ldr	r1, [r3, #24]
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <demoCycle+0x54c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	7f1b      	ldrb	r3, [r3, #28]
 80012ba:	461a      	mov	r2, r3
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f01a f8f8 	bl	801b4b4 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	3307      	adds	r3, #7
 80012cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80012ce:	e00f      	b.n	80012f0 <demoCycle+0x474>
 80012d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80012d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80012de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80012ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3eb      	bcc.n	80012d0 <demoCycle+0x454>
                            platformLog(" test ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2108      	movs	r1, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fa03 	bl	8000708 <hex2Str>
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	4835      	ldr	r0, [pc, #212]	; (80013dc <demoCycle+0x560>)
 8001308:	f7ff f9d6 	bl	80006b8 <logUsart>
                            demoNdef(nfcDevice);
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <demoCycle+0x54c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f97d 	bl	8001610 <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001316:	482d      	ldr	r0, [pc, #180]	; (80013cc <demoCycle+0x550>)
 8001318:	f7ff f9ce 	bl	80006b8 <logUsart>
                            rfalNfcvPollerInitialize();
 800131c:	f015 fdcc 	bl	8016eb8 <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001320:	e002      	b.n	8001328 <demoCycle+0x4ac>
                                platformDelay(130);
 8001322:	2082      	movs	r0, #130	; 0x82
 8001324:	f003 fa42 	bl	80047ac <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <demoCycle+0x54c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1cda      	adds	r2, r3, #3
 800132e:	f107 0110 	add.w	r1, r7, #16
 8001332:	f107 030e 	add.w	r3, r7, #14
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	460b      	mov	r3, r1
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	2020      	movs	r0, #32
 800133e:	f015 fe00 	bl	8016f42 <rfalNfcvPollerInventory>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0ec      	beq.n	8001322 <demoCycle+0x4a6>
                        break;
 8001348:	e02e      	b.n	80013a8 <demoCycle+0x52c>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <demoCycle+0x54c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <demoCycle+0x54c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	7f1b      	ldrb	r3, [r3, #28]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff f9d5 	bl	8000708 <hex2Str>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	481f      	ldr	r0, [pc, #124]	; (80013e0 <demoCycle+0x564>)
 8001364:	f7ff f9a8 	bl	80006b8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001368:	2201      	movs	r2, #1
 800136a:	2110      	movs	r1, #16
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <demoCycle+0x55c>)
 800136e:	f003 fd42 	bl	8004df6 <HAL_GPIO_WritePin>
                        break;
 8001372:	e019      	b.n	80013a8 <demoCycle+0x52c>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <demoCycle+0x54c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <demoCycle+0x54c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	7f1b      	ldrb	r3, [r3, #28]
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f7ff f9c0 	bl	8000708 <hex2Str>
 8001388:	4603      	mov	r3, r0
 800138a:	4619      	mov	r1, r3
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <demoCycle+0x568>)
 800138e:	f7ff f993 	bl	80006b8 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8001392:	2201      	movs	r2, #1
 8001394:	2120      	movs	r1, #32
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <demoCycle+0x56c>)
 8001398:	f003 fd2d 	bl	8004df6 <HAL_GPIO_WritePin>
                        demoP2P();
 800139c:	f000 f828 	bl	80013f0 <demoP2P>
                        break;
 80013a0:	e002      	b.n	80013a8 <demoCycle+0x52c>
                        break;
 80013a2:	bf00      	nop
 80013a4:	e000      	b.n	80013a8 <demoCycle+0x52c>
                        break;
 80013a6:	bf00      	nop
                rfalNfcDeactivate( false );
 80013a8:	2000      	movs	r0, #0
 80013aa:	f010 fb2f 	bl	8011a0c <rfalNfcDeactivate>
                platformDelay( 500 );
 80013ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b2:	f003 f9fb 	bl	80047ac <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <demoCycle+0x570>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
            break;
 80013bc:	bf00      	nop
    }
}
 80013be:	bf00      	nop
 80013c0:	3760      	adds	r7, #96	; 0x60
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20003064 	.word	0x20003064
 80013cc:	0801bfb8 	.word	0x0801bfb8
 80013d0:	0801c01c 	.word	0x0801c01c
 80013d4:	0801c048 	.word	0x0801c048
 80013d8:	40020000 	.word	0x40020000
 80013dc:	0801c06c 	.word	0x0801c06c
 80013e0:	0801c098 	.word	0x0801c098
 80013e4:	0801c0b8 	.word	0x0801c0b8
 80013e8:	40020400 	.word	0x40020400
 80013ec:	2000067c 	.word	0x2000067c

080013f0 <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b0d5      	sub	sp, #340	; 0x154
 80013f4:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 80013f6:	4865      	ldr	r0, [pc, #404]	; (800158c <demoP2P+0x19c>)
 80013f8:	f7ff f95e 	bl	80006b8 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 80013fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001400:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	9100      	str	r1, [sp, #0]
 800140a:	211a      	movs	r1, #26
 800140c:	4860      	ldr	r0, [pc, #384]	; (8001590 <demoP2P+0x1a0>)
 800140e:	f000 f8db 	bl	80015c8 <demoTransceiveBlocking>
 8001412:	4603      	mov	r3, r0
 8001414:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 8001418:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <demoP2P+0x38>
    {
        platformLog("failed.");
 8001420:	485c      	ldr	r0, [pc, #368]	; (8001594 <demoP2P+0x1a4>)
 8001422:	f7ff f949 	bl	80006b8 <logUsart>
        return;
 8001426:	e0ac      	b.n	8001582 <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 8001428:	485b      	ldr	r0, [pc, #364]	; (8001598 <demoP2P+0x1a8>)
 800142a:	f7ff f945 	bl	80006b8 <logUsart>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 800142e:	463b      	mov	r3, r7
 8001430:	4a5a      	ldr	r2, [pc, #360]	; (800159c <demoP2P+0x1ac>)
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f009 fcc5 	bl	800adc4 <ndefRtdUri>
 800143a:	4603      	mov	r3, r0
 800143c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 8001440:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001444:	463b      	mov	r3, r7
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f009 fda9 	bl	800afa0 <ndefRtdUriToRecord>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001456:	4313      	orrs	r3, r2
 8001458:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 800145c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001460:	4618      	mov	r0, r3
 8001462:	f007 f93f 	bl	80086e4 <ndefMessageInit>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800146e:	4313      	orrs	r3, r2
 8001470:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8001474:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001478:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f007 f97e 	bl	8008780 <ndefMessageAppend>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800148c:	4313      	orrs	r3, r2
 800148e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <demoP2P+0x1b0>)
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <demoP2P+0x1b4>)
 8001496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149a:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 800149e:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <demoP2P+0x1b8>)
 80014a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 80014a4:	23f7      	movs	r3, #247	; 0xf7
 80014a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 80014aa:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80014ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f007 fa11 	bl	80088dc <ndefMessageEncode>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 80014c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <demoP2P+0x1b0>)
 80014d0:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <demoP2P+0x1b0>)
 80014d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 80014d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014dc:	3309      	adds	r3, #9
 80014de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 80014e2:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <demoP2P+0x108>
    {
        platformLog("NDEF message creation failed\r\n", err);
 80014ea:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014ee:	4619      	mov	r1, r3
 80014f0:	482e      	ldr	r0, [pc, #184]	; (80015ac <demoP2P+0x1bc>)
 80014f2:	f7ff f8e1 	bl	80006b8 <logUsart>
        return;
 80014f6:	e044      	b.n	8001582 <demoP2P+0x192>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 80014f8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <demoP2P+0x1c0>)
 8001502:	f001 fc57 	bl	8002db4 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.ST.com .. ");
 8001506:	482b      	ldr	r0, [pc, #172]	; (80015b4 <demoP2P+0x1c4>)
 8001508:	f7ff f8d6 	bl	80006b8 <logUsart>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 800150c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001510:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001514:	b299      	uxth	r1, r3
 8001516:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800151a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800151e:	f04f 34ff 	mov.w	r4, #4294967295
 8001522:	9400      	str	r4, [sp, #0]
 8001524:	f000 f850 	bl	80015c8 <demoTransceiveBlocking>
 8001528:	4603      	mov	r3, r0
 800152a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 800152e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <demoP2P+0x14e>
    {
        platformLog("failed.");
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <demoP2P+0x1a4>)
 8001538:	f7ff f8be 	bl	80006b8 <logUsart>
        return;
 800153c:	e021      	b.n	8001582 <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 800153e:	4816      	ldr	r0, [pc, #88]	; (8001598 <demoP2P+0x1a8>)
 8001540:	f7ff f8ba 	bl	80006b8 <logUsart>


    platformLog(" Device present, maintaining connection ");
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <demoP2P+0x1c8>)
 8001546:	f7ff f8b7 	bl	80006b8 <logUsart>
    while(err == ERR_NONE) 
 800154a:	e013      	b.n	8001574 <demoP2P+0x184>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 800154c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001550:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	9100      	str	r1, [sp, #0]
 800155a:	2102      	movs	r1, #2
 800155c:	4817      	ldr	r0, [pc, #92]	; (80015bc <demoP2P+0x1cc>)
 800155e:	f000 f833 	bl	80015c8 <demoTransceiveBlocking>
 8001562:	4603      	mov	r3, r0
 8001564:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 8001568:	4815      	ldr	r0, [pc, #84]	; (80015c0 <demoP2P+0x1d0>)
 800156a:	f7ff f8a5 	bl	80006b8 <logUsart>
        platformDelay(50);
 800156e:	2032      	movs	r0, #50	; 0x32
 8001570:	f003 f91c 	bl	80047ac <HAL_Delay>
    while(err == ERR_NONE) 
 8001574:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0e7      	beq.n	800154c <demoP2P+0x15c>
    }
    platformLog("\r\n Device removed.\r\n");
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <demoP2P+0x1d4>)
 800157e:	f7ff f89b 	bl	80006b8 <logUsart>
}
 8001582:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	0801c0e4 	.word	0x0801c0e4
 8001590:	2000002c 	.word	0x2000002c
 8001594:	0801c0fc 	.word	0x0801c0fc
 8001598:	0801c104 	.word	0x0801c104
 800159c:	20000048 	.word	0x20000048
 80015a0:	200004f8 	.word	0x200004f8
 80015a4:	0801d0d8 	.word	0x0801d0d8
 80015a8:	20000501 	.word	0x20000501
 80015ac:	0801c114 	.word	0x0801c114
 80015b0:	0801c134 	.word	0x0801c134
 80015b4:	0801c150 	.word	0x0801c150
 80015b8:	0801c170 	.word	0x0801c170
 80015bc:	200004f4 	.word	0x200004f4
 80015c0:	0801c19c 	.word	0x0801c19c
 80015c4:	0801c1a0 	.word	0x0801c1a0

080015c8 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	460b      	mov	r3, r1
 80015d6:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f010 fc48 	bl	8011e78 <rfalNfcDataExchangeStart>
 80015e8:	4603      	mov	r3, r0
 80015ea:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d108      	bne.n	8001604 <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 80015f2:	f010 fa5d 	bl	8011ab0 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80015f6:	f010 fd59 	bl	80120ac <rfalNfcDataExchangeGetStatus>
 80015fa:	4603      	mov	r3, r0
 80015fc:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d0f6      	beq.n	80015f2 <demoTransceiveBlocking+0x2a>
    }
    return err;
 8001604:	8afb      	ldrh	r3, [r7, #22]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8001616:	af00      	add	r7, sp, #0
 8001618:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800161c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001620:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 8001622:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001626:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	48b4      	ldr	r0, [pc, #720]	; (8001900 <demoNdef+0x2f0>)
 800162e:	f009 fd87 	bl	800b140 <ndefPollerContextInitialization>
 8001632:	4603      	mov	r3, r0
 8001634:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001638:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <demoNdef+0x3e>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 8001640:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001644:	4619      	mov	r1, r3
 8001646:	48af      	ldr	r0, [pc, #700]	; (8001904 <demoNdef+0x2f4>)
 8001648:	f7ff f836 	bl	80006b8 <logUsart>
        return;
 800164c:	e27a      	b.n	8001b44 <demoNdef+0x534>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 800164e:	4bae      	ldr	r3, [pc, #696]	; (8001908 <demoNdef+0x2f8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001658:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b03      	cmp	r3, #3
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <demoNdef+0x66>
    {
        ndefDumpSysInfo(&ndefCtx);
 8001670:	48a3      	ldr	r0, [pc, #652]	; (8001900 <demoNdef+0x2f0>)
 8001672:	f000 fc25 	bl	8001ec0 <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8001676:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800167a:	4619      	mov	r1, r3
 800167c:	48a0      	ldr	r0, [pc, #640]	; (8001900 <demoNdef+0x2f0>)
 800167e:	f009 fd8d 	bl	800b19c <ndefPollerNdefDetect>
 8001682:	4603      	mov	r3, r0
 8001684:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001688:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <demoNdef+0x96>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 8001690:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001694:	4619      	mov	r1, r3
 8001696:	489d      	ldr	r0, [pc, #628]	; (800190c <demoNdef+0x2fc>)
 8001698:	f7ff f80e 	bl	80006b8 <logUsart>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 800169c:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <demoNdef+0x300>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d01b      	beq.n	80016dc <demoNdef+0xcc>
        {
            return;
 80016a4:	e24e      	b.n	8001b44 <demoNdef+0x534>
        }
    }
    else
    {
        platformLog("%s NDEF is detected.\r\n", ndefStates[info.state]);
 80016a6:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b99      	ldr	r3, [pc, #612]	; (8001914 <demoNdef+0x304>)
 80016ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4898      	ldr	r0, [pc, #608]	; (8001918 <demoNdef+0x308>)
 80016b6:	f7fe ffff 	bl	80006b8 <logUsart>
        ndefCCDump(&ndefCtx);
 80016ba:	4891      	ldr	r0, [pc, #580]	; (8001900 <demoNdef+0x2f0>)
 80016bc:	f000 fbae 	bl	8001e1c <ndefCCDump>

        if( verbose )
 80016c0:	4b91      	ldr	r3, [pc, #580]	; (8001908 <demoNdef+0x2f8>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <demoNdef+0xcc>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 80016c8:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <demoNdef+0x2f0>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	4a8c      	ldr	r2, [pc, #560]	; (8001900 <demoNdef+0x2f0>)
 80016d0:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80016d4:	4619      	mov	r1, r3
 80016d6:	4891      	ldr	r0, [pc, #580]	; (800191c <demoNdef+0x30c>)
 80016d8:	f7fe ffee 	bl	80006b8 <logUsart>
        }
    }

    switch( ndefDemoFeature )
 80016dc:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <demoNdef+0x300>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	f200 8228 	bhi.w	8001b36 <demoNdef+0x526>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <demoNdef+0xdc>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	080017c1 	.word	0x080017c1
 80016f4:	0800194d 	.word	0x0800194d
 80016f8:	08001adf 	.word	0x08001adf
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 80016fc:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8001700:	2b01      	cmp	r3, #1
 8001702:	f000 821e 	beq.w	8001b42 <demoNdef+0x532>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 8001706:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	4984      	ldr	r1, [pc, #528]	; (8001920 <demoNdef+0x310>)
 8001710:	487b      	ldr	r0, [pc, #492]	; (8001900 <demoNdef+0x2f0>)
 8001712:	f009 fd60 	bl	800b1d6 <ndefPollerReadRawMessage>
 8001716:	4603      	mov	r3, r0
 8001718:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800171c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <demoNdef+0x122>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 8001724:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001728:	4619      	mov	r1, r3
 800172a:	487e      	ldr	r0, [pc, #504]	; (8001924 <demoNdef+0x314>)
 800172c:	f7fe ffc4 	bl	80006b8 <logUsart>
                return;
 8001730:	e208      	b.n	8001b44 <demoNdef+0x534>
            }
            if( verbose )
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <demoNdef+0x2f8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00e      	beq.n	8001758 <demoNdef+0x148>
            {
                bufRawMessage.buffer = rawMessageBuf;
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <demoNdef+0x310>)
 800173c:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 8001740:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001744:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001748:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <demoNdef+0x2f8>)
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001750:	4619      	mov	r1, r3
 8001752:	4875      	ldr	r0, [pc, #468]	; (8001928 <demoNdef+0x318>)
 8001754:	f001 fb2e 	bl	8002db4 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 8001758:	4b71      	ldr	r3, [pc, #452]	; (8001920 <demoNdef+0x310>)
 800175a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 800175e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001762:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 8001766:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800176a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f007 f85a 	bl	800882a <ndefMessageDecode>
 8001776:	4603      	mov	r3, r0
 8001778:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800177c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <demoNdef+0x182>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8001784:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001788:	4619      	mov	r1, r3
 800178a:	4868      	ldr	r0, [pc, #416]	; (800192c <demoNdef+0x31c>)
 800178c:	f7fe ff94 	bl	80006b8 <logUsart>
                return;
 8001790:	e1d8      	b.n	8001b44 <demoNdef+0x534>
            }
            err = ndefMessageDump(&message, verbose);
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <demoNdef+0x2f8>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 ff35 	bl	800260c <ndefMessageDump>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80017a8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 81c6 	beq.w	8001b3e <demoNdef+0x52e>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 80017b2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017b6:	4619      	mov	r1, r3
 80017b8:	485d      	ldr	r0, [pc, #372]	; (8001930 <demoNdef+0x320>)
 80017ba:	f7fe ff7d 	bl	80006b8 <logUsart>
                return;
 80017be:	e1c1      	b.n	8001b44 <demoNdef+0x534>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <demoNdef+0x300>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 80017c6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 ff8a 	bl	80086e4 <ndefMessageInit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 80017d6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017da:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80017de:	4a55      	ldr	r2, [pc, #340]	; (8001934 <demoNdef+0x324>)
 80017e0:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 80017e2:	4854      	ldr	r0, [pc, #336]	; (8001934 <demoNdef+0x324>)
 80017e4:	f7fe fcca 	bl	800017c <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017f0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80017f4:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 80017f6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017fa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80017fe:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <demoNdef+0x328>)
 8001800:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 8001802:	484d      	ldr	r0, [pc, #308]	; (8001938 <demoNdef+0x328>)
 8001804:	f7fe fcba 	bl	800017c <strlen>
 8001808:	4602      	mov	r2, r0
 800180a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800180e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001812:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800181c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8001820:	2100      	movs	r1, #0
 8001822:	f009 f8d1 	bl	800a9c8 <ndefRtdText>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800182e:	4313      	orrs	r3, r2
 8001830:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 8001834:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001838:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f009 f9e6 	bl	800ac10 <ndefRtdTextToRecord>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800184c:	4313      	orrs	r3, r2
 800184e:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 8001852:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001856:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f006 ff8f 	bl	8008780 <ndefMessageAppend>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800186a:	4313      	orrs	r3, r2
 800186c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001870:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <demoNdef+0x276>
            {
                platformLog("Message creation failed\r\n", err);
 8001878:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800187c:	4619      	mov	r1, r3
 800187e:	482f      	ldr	r0, [pc, #188]	; (800193c <demoNdef+0x32c>)
 8001880:	f7fe ff1a 	bl	80006b8 <logUsart>
                return;
 8001884:	e15e      	b.n	8001b44 <demoNdef+0x534>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8001886:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800188a:	4619      	mov	r1, r3
 800188c:	481c      	ldr	r0, [pc, #112]	; (8001900 <demoNdef+0x2f0>)
 800188e:	f009 fd79 	bl	800b384 <ndefPollerWriteMessage>
 8001892:	4603      	mov	r3, r0
 8001894:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001898:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <demoNdef+0x29e>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 80018a0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80018a4:	4619      	mov	r1, r3
 80018a6:	4826      	ldr	r0, [pc, #152]	; (8001940 <demoNdef+0x330>)
 80018a8:	f7fe ff06 	bl	80006b8 <logUsart>
                return;
 80018ac:	e14a      	b.n	8001b44 <demoNdef+0x534>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 80018ae:	4825      	ldr	r0, [pc, #148]	; (8001944 <demoNdef+0x334>)
 80018b0:	f7fe ff02 	bl	80006b8 <logUsart>
            if( verbose )
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <demoNdef+0x2f8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01d      	beq.n	80018f8 <demoNdef+0x2e8>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <demoNdef+0x310>)
 80018be:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 80018ca:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80018ce:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 f801 	bl	80088dc <ndefMessageEncode>
 80018da:	4603      	mov	r3, r0
 80018dc:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 80018e0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <demoNdef+0x2e8>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <demoNdef+0x2f8>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80018f0:	4619      	mov	r1, r3
 80018f2:	4815      	ldr	r0, [pc, #84]	; (8001948 <demoNdef+0x338>)
 80018f4:	f001 fa5e 	bl	8002db4 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 80018f8:	f000 fd0e 	bl	8002318 <LedNotificationWriteDone>
            break;
 80018fc:	e120      	b.n	8001b40 <demoNdef+0x530>
 80018fe:	bf00      	nop
 8001900:	20000680 	.word	0x20000680
 8001904:	0801c1b8 	.word	0x0801c1b8
 8001908:	20001055 	.word	0x20001055
 800190c:	0801c1fc 	.word	0x0801c1fc
 8001910:	20001054 	.word	0x20001054
 8001914:	20000050 	.word	0x20000050
 8001918:	0801c234 	.word	0x0801c234
 800191c:	0801c24c 	.word	0x0801c24c
 8001920:	20001058 	.word	0x20001058
 8001924:	0801c268 	.word	0x0801c268
 8001928:	0801c2ac 	.word	0x0801c2ac
 800192c:	0801c2bc 	.word	0x0801c2bc
 8001930:	0801c300 	.word	0x0801c300
 8001934:	20000090 	.word	0x20000090
 8001938:	20000078 	.word	0x20000078
 800193c:	0801c340 	.word	0x0801c340
 8001940:	0801c35c 	.word	0x0801c35c
 8001944:	0801c39c 	.word	0x0801c39c
 8001948:	0801c3b8 	.word	0x0801c3b8

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <demoNdef+0x53c>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 8001952:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001956:	4618      	mov	r0, r3
 8001958:	f006 fec4 	bl	80086e4 <ndefMessageInit>
 800195c:	4603      	mov	r3, r0
 800195e:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 8001962:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001966:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800196a:	4a79      	ldr	r2, [pc, #484]	; (8001b50 <demoNdef+0x540>)
 800196c:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 800196e:	4878      	ldr	r0, [pc, #480]	; (8001b50 <demoNdef+0x540>)
 8001970:	f7fe fc04 	bl	800017c <strlen>
 8001974:	4602      	mov	r2, r0
 8001976:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800197a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800197e:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 8001980:	f107 0214 	add.w	r2, r7, #20
 8001984:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f009 fa1a 	bl	800adc4 <ndefRtdUri>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001998:	4313      	orrs	r3, r2
 800199a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 800199e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80019a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f009 faf9 	bl	800afa0 <ndefRtdUriToRecord>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 80019bc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80019c0:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80019c4:	4a63      	ldr	r2, [pc, #396]	; (8001b54 <demoNdef+0x544>)
 80019c6:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 80019c8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80019cc:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80019d0:	220e      	movs	r2, #14
 80019d2:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 80019d4:	f107 020c 	add.w	r2, r7, #12
 80019d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f009 fb02 	bl	800afe8 <ndefRtdAar>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 80019f2:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 fb75 	bl	800b0ec <ndefRtdAarToRecord>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 8001a10:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001a14:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 feb0 	bl	8008780 <ndefMessageAppend>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 8001a2e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8001a32:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f006 fea1 	bl	8008780 <ndefMessageAppend>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <demoNdef+0x548>)
 8001a4e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 8001a5a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8001a5e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f006 ff39 	bl	80088dc <ndefMessageEncode>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001a78:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <demoNdef+0x47e>
            {
                platformLog("Raw message creation failed\r\n", err);
 8001a80:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a84:	4619      	mov	r1, r3
 8001a86:	4835      	ldr	r0, [pc, #212]	; (8001b5c <demoNdef+0x54c>)
 8001a88:	f7fe fe16 	bl	80006b8 <logUsart>
                return;
 8001a8c:	e05a      	b.n	8001b44 <demoNdef+0x534>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 8001a8e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001a92:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001a96:	4619      	mov	r1, r3
 8001a98:	4831      	ldr	r0, [pc, #196]	; (8001b60 <demoNdef+0x550>)
 8001a9a:	f009 fbbd 	bl	800b218 <ndefPollerWriteRawMessage>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001aa4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <demoNdef+0x4aa>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 8001aac:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	482c      	ldr	r0, [pc, #176]	; (8001b64 <demoNdef+0x554>)
 8001ab4:	f7fe fe00 	bl	80006b8 <logUsart>
                return;
 8001ab8:	e044      	b.n	8001b44 <demoNdef+0x534>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 8001aba:	482b      	ldr	r0, [pc, #172]	; (8001b68 <demoNdef+0x558>)
 8001abc:	f7fe fdfc 	bl	80006b8 <logUsart>
            if( verbose )
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <demoNdef+0x55c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <demoNdef+0x4c8>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <demoNdef+0x55c>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4827      	ldr	r0, [pc, #156]	; (8001b70 <demoNdef+0x560>)
 8001ad4:	f001 f96e 	bl	8002db4 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 8001ad8:	f000 fc1e 	bl	8002318 <LedNotificationWriteDone>
            break;
 8001adc:	e030      	b.n	8001b40 <demoNdef+0x530>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <demoNdef+0x53c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 8001ae4:	481e      	ldr	r0, [pc, #120]	; (8001b60 <demoNdef+0x550>)
 8001ae6:	f000 fbdf 	bl	80022a8 <ndefIsSTTag>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <demoNdef+0x4ee>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 8001af6:	481f      	ldr	r0, [pc, #124]	; (8001b74 <demoNdef+0x564>)
 8001af8:	f7fe fdde 	bl	80006b8 <logUsart>
                return;
 8001afc:	e022      	b.n	8001b44 <demoNdef+0x534>
            }
            platformLog("Formatting Tag...\r\n");
 8001afe:	481e      	ldr	r0, [pc, #120]	; (8001b78 <demoNdef+0x568>)
 8001b00:	f7fe fdda 	bl	80006b8 <logUsart>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	4815      	ldr	r0, [pc, #84]	; (8001b60 <demoNdef+0x550>)
 8001b0a:	f009 fba4 	bl	800b256 <ndefPollerTagFormat>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001b14:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <demoNdef+0x51a>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 8001b1c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001b20:	4619      	mov	r1, r3
 8001b22:	4816      	ldr	r0, [pc, #88]	; (8001b7c <demoNdef+0x56c>)
 8001b24:	f7fe fdc8 	bl	80006b8 <logUsart>
                return;
 8001b28:	e00c      	b.n	8001b44 <demoNdef+0x534>
            }
            platformLog("Tag formatted\r\n");
 8001b2a:	4815      	ldr	r0, [pc, #84]	; (8001b80 <demoNdef+0x570>)
 8001b2c:	f7fe fdc4 	bl	80006b8 <logUsart>
            LedNotificationWriteDone();
 8001b30:	f000 fbf2 	bl	8002318 <LedNotificationWriteDone>
            break;
 8001b34:	e004      	b.n	8001b40 <demoNdef+0x530>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <demoNdef+0x53c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
            break;     
 8001b3c:	e000      	b.n	8001b40 <demoNdef+0x530>
            break;
 8001b3e:	bf00      	nop
    }
    return;
 8001b40:	e000      	b.n	8001b44 <demoNdef+0x534>
                return;
 8001b42:	bf00      	nop
}
 8001b44:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20001054 	.word	0x20001054
 8001b50:	20000070 	.word	0x20000070
 8001b54:	20000094 	.word	0x20000094
 8001b58:	20001058 	.word	0x20001058
 8001b5c:	0801c3c4 	.word	0x0801c3c4
 8001b60:	20000680 	.word	0x20000680
 8001b64:	0801c3e4 	.word	0x0801c3e4
 8001b68:	0801c428 	.word	0x0801c428
 8001b6c:	20001055 	.word	0x20001055
 8001b70:	0801c3b8 	.word	0x0801c3b8
 8001b74:	0801c448 	.word	0x0801c448
 8001b78:	0801c488 	.word	0x0801c488
 8001b7c:	0801c49c 	.word	0x0801c49c
 8001b80:	0801c4d8 	.word	0x0801c4d8

08001b84 <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af04      	add	r7, sp, #16
 8001b8a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b92:	461c      	mov	r4, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ba2:	461e      	mov	r6, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001baa:	4619      	mov	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001bba:	4610      	mov	r0, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001bc2:	9203      	str	r2, [sp, #12]
 8001bc4:	9002      	str	r0, [sp, #8]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	9100      	str	r1, [sp, #0]
 8001bca:	4633      	mov	r3, r6
 8001bcc:	462a      	mov	r2, r5
 8001bce:	4621      	mov	r1, r4
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <ndefT2TCCDump+0x74>)
 8001bd2:	f7fe fd71 	bl	80006b8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	339c      	adds	r3, #156	; 0x9c
 8001bda:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <ndefT2TCCDump+0x78>)
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <ndefT2TCCDump+0x7c>)
 8001bec:	f001 f8e2 	bl	8002db4 <ndefBufferDump>
  
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf8:	0801c4e8 	.word	0x0801c4e8
 8001bfc:	20001055 	.word	0x20001055
 8001c00:	0801c54c 	.word	0x0801c54c

08001c04 <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b08b      	sub	sp, #44	; 0x2c
 8001c08:	af06      	add	r7, sp, #24
 8001c0a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001c12:	461d      	mov	r5, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001c1a:	461e      	mov	r6, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001c22:	469c      	mov	ip, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8001c32:	4611      	mov	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 8001c42:	4614      	mov	r4, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 8001c4a:	9204      	str	r2, [sp, #16]
 8001c4c:	9403      	str	r4, [sp, #12]
 8001c4e:	9002      	str	r0, [sp, #8]
 8001c50:	9101      	str	r1, [sp, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4663      	mov	r3, ip
 8001c56:	4632      	mov	r2, r6
 8001c58:	4629      	mov	r1, r5
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <ndefT3TAIBDump+0x80>)
 8001c5c:	f7fe fd2c 	bl	80006b8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	339c      	adds	r3, #156	; 0x9c
 8001c64:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 8001c66:	2310      	movs	r3, #16
 8001c68:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <ndefT3TAIBDump+0x84>)
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <ndefT3TAIBDump+0x88>)
 8001c76:	f001 f89d 	bl	8002db4 <ndefBufferDump>
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	0801c55c 	.word	0x0801c55c
 8001c88:	20001055 	.word	0x20001055
 8001c8c:	0801c54c 	.word	0x0801c54c

08001c90 <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b08b      	sub	sp, #44	; 0x2c
 8001c94:	af06      	add	r7, sp, #24
 8001c96:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001c9e:	461e      	mov	r6, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ca6:	469c      	mov	ip, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001cae:	469e      	mov	lr, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001cc6:	461c      	mov	r4, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 8001cdc:	9205      	str	r2, [sp, #20]
 8001cde:	9504      	str	r5, [sp, #16]
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	9402      	str	r4, [sp, #8]
 8001ce4:	9001      	str	r0, [sp, #4]
 8001ce6:	9100      	str	r1, [sp, #0]
 8001ce8:	4673      	mov	r3, lr
 8001cea:	4662      	mov	r2, ip
 8001cec:	4631      	mov	r1, r6
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <ndefT4TCCDump+0x8c>)
 8001cf0:	f7fe fce2 	bl	80006b8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	339c      	adds	r3, #156	; 0x9c
 8001cf8:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001d00:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <ndefT4TCCDump+0x90>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <ndefT4TCCDump+0x94>)
 8001d0e:	f001 f851 	bl	8002db4 <ndefBufferDump>
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0801c5bc 	.word	0x0801c5bc
 8001d20:	20001055 	.word	0x20001055
 8001d24:	0801c634 	.word	0x0801c634

08001d28 <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af06      	add	r7, sp, #24
 8001d2e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d36:	4619      	mov	r1, r3
 8001d38:	4831      	ldr	r0, [pc, #196]	; (8001e00 <ndefT5TCCDump+0xd8>)
 8001d3a:	f7fe fcbd 	bl	80006b8 <logUsart>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001d44:	461d      	mov	r5, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001d4c:	461e      	mov	r6, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d54:	469c      	mov	ip, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d64:	4618      	mov	r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001d74:	4614      	mov	r4, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001d7c:	9204      	str	r2, [sp, #16]
 8001d7e:	9403      	str	r4, [sp, #12]
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	9001      	str	r0, [sp, #4]
 8001d84:	9100      	str	r1, [sp, #0]
 8001d86:	4663      	mov	r3, ip
 8001d88:	4632      	mov	r2, r6
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	481d      	ldr	r0, [pc, #116]	; (8001e04 <ndefT5TCCDump+0xdc>)
 8001d8e:	f7fe fc93 	bl	80006b8 <logUsart>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <ndefT5TCCDump+0x78>
 8001d9c:	2358      	movs	r3, #88	; 0x58
 8001d9e:	e000      	b.n	8001da2 <ndefT5TCCDump+0x7a>
 8001da0:	2320      	movs	r3, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	4818      	ldr	r0, [pc, #96]	; (8001e08 <ndefT5TCCDump+0xe0>)
 8001da6:	f7fe fc87 	bl	80006b8 <logUsart>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <ndefT5TCCDump+0x90>
 8001db4:	2358      	movs	r3, #88	; 0x58
 8001db6:	e000      	b.n	8001dba <ndefT5TCCDump+0x92>
 8001db8:	2320      	movs	r3, #32
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4813      	ldr	r0, [pc, #76]	; (8001e0c <ndefT5TCCDump+0xe4>)
 8001dbe:	f7fe fc7b 	bl	80006b8 <logUsart>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <ndefT5TCCDump+0xa8>
 8001dcc:	2358      	movs	r3, #88	; 0x58
 8001dce:	e000      	b.n	8001dd2 <ndefT5TCCDump+0xaa>
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480e      	ldr	r0, [pc, #56]	; (8001e10 <ndefT5TCCDump+0xe8>)
 8001dd6:	f7fe fc6f 	bl	80006b8 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	339c      	adds	r3, #156	; 0x9c
 8001dde:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001de6:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <ndefT5TCCDump+0xec>)
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <ndefT5TCCDump+0xf0>)
 8001df4:	f000 ffde 	bl	8002db4 <ndefBufferDump>
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e00:	0801c648 	.word	0x0801c648
 8001e04:	0801c660 	.word	0x0801c660
 8001e08:	0801c6d4 	.word	0x0801c6d4
 8001e0c:	0801c6ec 	.word	0x0801c6ec
 8001e10:	0801c70c 	.word	0x0801c70c
 8001e14:	20001055 	.word	0x20001055
 8001e18:	0801c54c 	.word	0x0801c54c

08001e1c <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <ndefCCDump+0x88>
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <ndefCCDump+0x94>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d135      	bne.n	8001ea4 <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d101      	bne.n	8001e44 <ndefCCDump+0x28>
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <ndefCCDump+0x98>)
 8001e42:	e000      	b.n	8001e46 <ndefCCDump+0x2a>
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <ndefCCDump+0x9c>)
 8001e46:	4619      	mov	r1, r3
 8001e48:	481c      	ldr	r0, [pc, #112]	; (8001ebc <ndefCCDump+0xa0>)
 8001e4a:	f7fe fc35 	bl	80006b8 <logUsart>
    switch( ctx->device.type )
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d828      	bhi.n	8001ea8 <ndefCCDump+0x8c>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <ndefCCDump+0x40>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08001e95 	.word	0x08001e95
 8001e68:	08001e9d 	.word	0x08001e9d
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <ndefCCDump+0x5e>
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d004      	beq.n	8001e82 <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 8001e78:	e007      	b.n	8001e8a <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fe82 	bl	8001b84 <ndefT2TCCDump>
                    break;
 8001e80:	e003      	b.n	8001e8a <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff04 	bl	8001c90 <ndefT4TCCDump>
                    break;
 8001e88:	bf00      	nop
            }
            break;
 8001e8a:	e00e      	b.n	8001eaa <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff feff 	bl	8001c90 <ndefT4TCCDump>
            break;
 8001e92:	e00a      	b.n	8001eaa <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff feb5 	bl	8001c04 <ndefT3TAIBDump>
            break;
 8001e9a:	e006      	b.n	8001eaa <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff43 	bl	8001d28 <ndefT5TCCDump>
            break;
 8001ea2:	e002      	b.n	8001eaa <ndefCCDump+0x8e>
        return;
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <ndefCCDump+0x8e>
        default:
            break;
 8001ea8:	bf00      	nop
    }
}
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20001055 	.word	0x20001055
 8001eb4:	0801c724 	.word	0x0801c724
 8001eb8:	0801c748 	.word	0x0801c748
 8001ebc:	0801c764 	.word	0x0801c764

08001ec0 <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81d6 	beq.w	800227c <ndefDumpSysInfo+0x3bc>
 8001ed0:	4ba4      	ldr	r3, [pc, #656]	; (8002164 <ndefDumpSysInfo+0x2a4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f083 0301 	eor.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 81ce 	bne.w	800227c <ndefDumpSysInfo+0x3bc>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 81c7 	bne.w	8002280 <ndefDumpSysInfo+0x3c0>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	33be      	adds	r3, #190	; 0xbe
 8001ef6:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8001ef8:	489b      	ldr	r0, [pc, #620]	; (8002168 <ndefDumpSysInfo+0x2a8>)
 8001efa:	f7fe fbdd 	bl	80006b8 <logUsart>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	7b9b      	ldrb	r3, [r3, #14]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4897      	ldr	r0, [pc, #604]	; (800216c <ndefDumpSysInfo+0x2ac>)
 8001f10:	f7fe fbd2 	bl	80006b8 <logUsart>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	7b9b      	ldrb	r3, [r3, #14]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	7bdb      	ldrb	r3, [r3, #15]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4892      	ldr	r0, [pc, #584]	; (8002170 <ndefDumpSysInfo+0x2b0>)
 8001f28:	f7fe fbc6 	bl	80006b8 <logUsart>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	7b9b      	ldrb	r3, [r3, #14]
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
 8001f40:	4619      	mov	r1, r3
 8001f42:	488c      	ldr	r0, [pc, #560]	; (8002174 <ndefDumpSysInfo+0x2b4>)
 8001f44:	f7fe fbb8 	bl	80006b8 <logUsart>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	7b9b      	ldrb	r3, [r3, #14]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	7c5b      	ldrb	r3, [r3, #17]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4884      	ldr	r0, [pc, #528]	; (8002178 <ndefDumpSysInfo+0x2b8>)
 8001f66:	f7fe fba7 	bl	80006b8 <logUsart>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	7b9b      	ldrb	r3, [r3, #14]
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	7c9b      	ldrb	r3, [r3, #18]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	487e      	ldr	r0, [pc, #504]	; (800217c <ndefDumpSysInfo+0x2bc>)
 8001f82:	f7fe fb99 	bl	80006b8 <logUsart>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7b9b      	ldrb	r3, [r3, #14]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8176 	beq.w	8002284 <ndefDumpSysInfo+0x3c4>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	7a9b      	ldrb	r3, [r3, #10]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <ndefDumpSysInfo+0xe8>
 8001fa4:	2358      	movs	r3, #88	; 0x58
 8001fa6:	e000      	b.n	8001faa <ndefDumpSysInfo+0xea>
 8001fa8:	2320      	movs	r3, #32
 8001faa:	4619      	mov	r1, r3
 8001fac:	4874      	ldr	r0, [pc, #464]	; (8002180 <ndefDumpSysInfo+0x2c0>)
 8001fae:	f7fe fb83 	bl	80006b8 <logUsart>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7a9b      	ldrb	r3, [r3, #10]
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <ndefDumpSysInfo+0x106>
 8001fc2:	2358      	movs	r3, #88	; 0x58
 8001fc4:	e000      	b.n	8001fc8 <ndefDumpSysInfo+0x108>
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	4619      	mov	r1, r3
 8001fca:	486e      	ldr	r0, [pc, #440]	; (8002184 <ndefDumpSysInfo+0x2c4>)
 8001fcc:	f7fe fb74 	bl	80006b8 <logUsart>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	7a9b      	ldrb	r3, [r3, #10]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <ndefDumpSysInfo+0x124>
 8001fe0:	2358      	movs	r3, #88	; 0x58
 8001fe2:	e000      	b.n	8001fe6 <ndefDumpSysInfo+0x126>
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4867      	ldr	r0, [pc, #412]	; (8002188 <ndefDumpSysInfo+0x2c8>)
 8001fea:	f7fe fb65 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	7a9b      	ldrb	r3, [r3, #10]
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <ndefDumpSysInfo+0x142>
 8001ffe:	2358      	movs	r3, #88	; 0x58
 8002000:	e000      	b.n	8002004 <ndefDumpSysInfo+0x144>
 8002002:	2320      	movs	r3, #32
 8002004:	4619      	mov	r1, r3
 8002006:	4861      	ldr	r0, [pc, #388]	; (800218c <ndefDumpSysInfo+0x2cc>)
 8002008:	f7fe fb56 	bl	80006b8 <logUsart>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	7a9b      	ldrb	r3, [r3, #10]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <ndefDumpSysInfo+0x160>
 800201c:	2358      	movs	r3, #88	; 0x58
 800201e:	e000      	b.n	8002022 <ndefDumpSysInfo+0x162>
 8002020:	2320      	movs	r3, #32
 8002022:	4619      	mov	r1, r3
 8002024:	485a      	ldr	r0, [pc, #360]	; (8002190 <ndefDumpSysInfo+0x2d0>)
 8002026:	f7fe fb47 	bl	80006b8 <logUsart>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7a9b      	ldrb	r3, [r3, #10]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <ndefDumpSysInfo+0x17e>
 800203a:	2358      	movs	r3, #88	; 0x58
 800203c:	e000      	b.n	8002040 <ndefDumpSysInfo+0x180>
 800203e:	2320      	movs	r3, #32
 8002040:	4619      	mov	r1, r3
 8002042:	4854      	ldr	r0, [pc, #336]	; (8002194 <ndefDumpSysInfo+0x2d4>)
 8002044:	f7fe fb38 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7a9b      	ldrb	r3, [r3, #10]
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <ndefDumpSysInfo+0x19c>
 8002058:	2358      	movs	r3, #88	; 0x58
 800205a:	e000      	b.n	800205e <ndefDumpSysInfo+0x19e>
 800205c:	2320      	movs	r3, #32
 800205e:	4619      	mov	r1, r3
 8002060:	484d      	ldr	r0, [pc, #308]	; (8002198 <ndefDumpSysInfo+0x2d8>)
 8002062:	f7fe fb29 	bl	80006b8 <logUsart>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	7a9b      	ldrb	r3, [r3, #10]
 800206a:	09db      	lsrs	r3, r3, #7
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <ndefDumpSysInfo+0x1ba>
 8002076:	2358      	movs	r3, #88	; 0x58
 8002078:	e000      	b.n	800207c <ndefDumpSysInfo+0x1bc>
 800207a:	2320      	movs	r3, #32
 800207c:	4619      	mov	r1, r3
 800207e:	4847      	ldr	r0, [pc, #284]	; (800219c <ndefDumpSysInfo+0x2dc>)
 8002080:	f7fe fb1a 	bl	80006b8 <logUsart>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	7adb      	ldrb	r3, [r3, #11]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <ndefDumpSysInfo+0x1d4>
 8002090:	2358      	movs	r3, #88	; 0x58
 8002092:	e000      	b.n	8002096 <ndefDumpSysInfo+0x1d6>
 8002094:	2320      	movs	r3, #32
 8002096:	4619      	mov	r1, r3
 8002098:	4841      	ldr	r0, [pc, #260]	; (80021a0 <ndefDumpSysInfo+0x2e0>)
 800209a:	f7fe fb0d 	bl	80006b8 <logUsart>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	7adb      	ldrb	r3, [r3, #11]
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <ndefDumpSysInfo+0x1f2>
 80020ae:	2358      	movs	r3, #88	; 0x58
 80020b0:	e000      	b.n	80020b4 <ndefDumpSysInfo+0x1f4>
 80020b2:	2320      	movs	r3, #32
 80020b4:	4619      	mov	r1, r3
 80020b6:	483b      	ldr	r0, [pc, #236]	; (80021a4 <ndefDumpSysInfo+0x2e4>)
 80020b8:	f7fe fafe 	bl	80006b8 <logUsart>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	7adb      	ldrb	r3, [r3, #11]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <ndefDumpSysInfo+0x210>
 80020cc:	2358      	movs	r3, #88	; 0x58
 80020ce:	e000      	b.n	80020d2 <ndefDumpSysInfo+0x212>
 80020d0:	2320      	movs	r3, #32
 80020d2:	4619      	mov	r1, r3
 80020d4:	4834      	ldr	r0, [pc, #208]	; (80021a8 <ndefDumpSysInfo+0x2e8>)
 80020d6:	f7fe faef 	bl	80006b8 <logUsart>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	7adb      	ldrb	r3, [r3, #11]
 80020de:	08db      	lsrs	r3, r3, #3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <ndefDumpSysInfo+0x22e>
 80020ea:	2358      	movs	r3, #88	; 0x58
 80020ec:	e000      	b.n	80020f0 <ndefDumpSysInfo+0x230>
 80020ee:	2320      	movs	r3, #32
 80020f0:	4619      	mov	r1, r3
 80020f2:	482e      	ldr	r0, [pc, #184]	; (80021ac <ndefDumpSysInfo+0x2ec>)
 80020f4:	f7fe fae0 	bl	80006b8 <logUsart>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	7adb      	ldrb	r3, [r3, #11]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <ndefDumpSysInfo+0x24c>
 8002108:	2358      	movs	r3, #88	; 0x58
 800210a:	e000      	b.n	800210e <ndefDumpSysInfo+0x24e>
 800210c:	2320      	movs	r3, #32
 800210e:	4619      	mov	r1, r3
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <ndefDumpSysInfo+0x2f0>)
 8002112:	f7fe fad1 	bl	80006b8 <logUsart>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	7adb      	ldrb	r3, [r3, #11]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <ndefDumpSysInfo+0x26a>
 8002126:	2358      	movs	r3, #88	; 0x58
 8002128:	e000      	b.n	800212c <ndefDumpSysInfo+0x26c>
 800212a:	2320      	movs	r3, #32
 800212c:	4619      	mov	r1, r3
 800212e:	4821      	ldr	r0, [pc, #132]	; (80021b4 <ndefDumpSysInfo+0x2f4>)
 8002130:	f7fe fac2 	bl	80006b8 <logUsart>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	7adb      	ldrb	r3, [r3, #11]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <ndefDumpSysInfo+0x288>
 8002144:	2358      	movs	r3, #88	; 0x58
 8002146:	e000      	b.n	800214a <ndefDumpSysInfo+0x28a>
 8002148:	2320      	movs	r3, #32
 800214a:	4619      	mov	r1, r3
 800214c:	481a      	ldr	r0, [pc, #104]	; (80021b8 <ndefDumpSysInfo+0x2f8>)
 800214e:	f7fe fab3 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02e      	beq.n	80021bc <ndefDumpSysInfo+0x2fc>
 800215e:	2358      	movs	r3, #88	; 0x58
 8002160:	e02d      	b.n	80021be <ndefDumpSysInfo+0x2fe>
 8002162:	bf00      	nop
 8002164:	20001055 	.word	0x20001055
 8002168:	0801c768 	.word	0x0801c768
 800216c:	0801c780 	.word	0x0801c780
 8002170:	0801c7a4 	.word	0x0801c7a4
 8002174:	0801c7b8 	.word	0x0801c7b8
 8002178:	0801c7c8 	.word	0x0801c7c8
 800217c:	0801c7ec 	.word	0x0801c7ec
 8002180:	0801c800 	.word	0x0801c800
 8002184:	0801c82c 	.word	0x0801c82c
 8002188:	0801c858 	.word	0x0801c858
 800218c:	0801c884 	.word	0x0801c884
 8002190:	0801c8b0 	.word	0x0801c8b0
 8002194:	0801c8dc 	.word	0x0801c8dc
 8002198:	0801c908 	.word	0x0801c908
 800219c:	0801c934 	.word	0x0801c934
 80021a0:	0801c960 	.word	0x0801c960
 80021a4:	0801c98c 	.word	0x0801c98c
 80021a8:	0801c9b8 	.word	0x0801c9b8
 80021ac:	0801c9e4 	.word	0x0801c9e4
 80021b0:	0801ca10 	.word	0x0801ca10
 80021b4:	0801ca3c 	.word	0x0801ca3c
 80021b8:	0801ca68 	.word	0x0801ca68
 80021bc:	2320      	movs	r3, #32
 80021be:	4619      	mov	r1, r3
 80021c0:	4832      	ldr	r0, [pc, #200]	; (800228c <ndefDumpSysInfo+0x3cc>)
 80021c2:	f7fe fa79 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <ndefDumpSysInfo+0x31a>
 80021d6:	2358      	movs	r3, #88	; 0x58
 80021d8:	e000      	b.n	80021dc <ndefDumpSysInfo+0x31c>
 80021da:	2320      	movs	r3, #32
 80021dc:	4619      	mov	r1, r3
 80021de:	482c      	ldr	r0, [pc, #176]	; (8002290 <ndefDumpSysInfo+0x3d0>)
 80021e0:	f7fe fa6a 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7b1b      	ldrb	r3, [r3, #12]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <ndefDumpSysInfo+0x338>
 80021f4:	2358      	movs	r3, #88	; 0x58
 80021f6:	e000      	b.n	80021fa <ndefDumpSysInfo+0x33a>
 80021f8:	2320      	movs	r3, #32
 80021fa:	4619      	mov	r1, r3
 80021fc:	4825      	ldr	r0, [pc, #148]	; (8002294 <ndefDumpSysInfo+0x3d4>)
 80021fe:	f7fe fa5b 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	7b1b      	ldrb	r3, [r3, #12]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <ndefDumpSysInfo+0x356>
 8002212:	2358      	movs	r3, #88	; 0x58
 8002214:	e000      	b.n	8002218 <ndefDumpSysInfo+0x358>
 8002216:	2320      	movs	r3, #32
 8002218:	4619      	mov	r1, r3
 800221a:	481f      	ldr	r0, [pc, #124]	; (8002298 <ndefDumpSysInfo+0x3d8>)
 800221c:	f7fe fa4c 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <ndefDumpSysInfo+0x374>
 8002230:	2358      	movs	r3, #88	; 0x58
 8002232:	e000      	b.n	8002236 <ndefDumpSysInfo+0x376>
 8002234:	2320      	movs	r3, #32
 8002236:	4619      	mov	r1, r3
 8002238:	4818      	ldr	r0, [pc, #96]	; (800229c <ndefDumpSysInfo+0x3dc>)
 800223a:	f7fe fa3d 	bl	80006b8 <logUsart>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	7b1b      	ldrb	r3, [r3, #12]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <ndefDumpSysInfo+0x392>
 800224e:	2358      	movs	r3, #88	; 0x58
 8002250:	e000      	b.n	8002254 <ndefDumpSysInfo+0x394>
 8002252:	2320      	movs	r3, #32
 8002254:	4619      	mov	r1, r3
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <ndefDumpSysInfo+0x3e0>)
 8002258:	f7fe fa2e 	bl	80006b8 <logUsart>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <ndefDumpSysInfo+0x3b0>
 800226c:	2358      	movs	r3, #88	; 0x58
 800226e:	e000      	b.n	8002272 <ndefDumpSysInfo+0x3b2>
 8002270:	2320      	movs	r3, #32
 8002272:	4619      	mov	r1, r3
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <ndefDumpSysInfo+0x3e4>)
 8002276:	f7fe fa1f 	bl	80006b8 <logUsart>
    }
    return;
 800227a:	e003      	b.n	8002284 <ndefDumpSysInfo+0x3c4>
        return;
 800227c:	bf00      	nop
 800227e:	e002      	b.n	8002286 <ndefDumpSysInfo+0x3c6>
        return;
 8002280:	bf00      	nop
 8002282:	e000      	b.n	8002286 <ndefDumpSysInfo+0x3c6>
    return;
 8002284:	bf00      	nop
}
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0801ca94 	.word	0x0801ca94
 8002290:	0801cac0 	.word	0x0801cac0
 8002294:	0801caec 	.word	0x0801caec
 8002298:	0801cb18 	.word	0x0801cb18
 800229c:	0801cb44 	.word	0x0801cb44
 80022a0:	0801cb70 	.word	0x0801cb70
 80022a4:	0801cb9c 	.word	0x0801cb9c

080022a8 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    bool ret = false;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <ndefIsSTTag+0x16>
    {   
        return ret;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	e026      	b.n	800230c <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d81c      	bhi.n	8002300 <ndefIsSTTag+0x58>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <ndefIsSTTag+0x24>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	08002301 	.word	0x08002301
 80022d4:	08002301 	.word	0x08002301
 80022d8:	080022f3 	.word	0x080022f3
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	795b      	ldrb	r3, [r3, #5]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d00f      	beq.n	8002304 <ndefIsSTTag+0x5c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	799b      	ldrb	r3, [r3, #6]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d10b      	bne.n	8002304 <ndefIsSTTag+0x5c>
            {  
                ret = true;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80022f0:	e008      	b.n	8002304 <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7a5b      	ldrb	r3, [r3, #9]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d106      	bne.n	8002308 <ndefIsSTTag+0x60>
            {  
                ret = true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80022fe:	e003      	b.n	8002308 <ndefIsSTTag+0x60>
        default:
            break;
 8002300:	bf00      	nop
 8002302:	e002      	b.n	800230a <ndefIsSTTag+0x62>
            break;
 8002304:	bf00      	nop
 8002306:	e000      	b.n	800230a <ndefIsSTTag+0x62>
            break;
 8002308:	bf00      	nop
    }
    return (ret);
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	e00c      	b.n	800233e <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 8002324:	f000 f814 	bl	8002350 <ledsOn>
        platformDelay(100);
 8002328:	2064      	movs	r0, #100	; 0x64
 800232a:	f002 fa3f 	bl	80047ac <HAL_Delay>

        ledsOff();
 800232e:	f000 f837 	bl	80023a0 <ledsOff>
        platformDelay(100);
 8002332:	2064      	movs	r0, #100	; 0x64
 8002334:	f002 fa3a 	bl	80047ac <HAL_Delay>
    for (i = 0; i < 3; i++)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d9ef      	bls.n	8002324 <LedNotificationWriteDone+0xc>
    }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <ledsOn>:

static void ledsOn(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002354:	2201      	movs	r2, #1
 8002356:	2101      	movs	r1, #1
 8002358:	480f      	ldr	r0, [pc, #60]	; (8002398 <ledsOn+0x48>)
 800235a:	f002 fd4c 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800235e:	2201      	movs	r2, #1
 8002360:	2110      	movs	r1, #16
 8002362:	480e      	ldr	r0, [pc, #56]	; (800239c <ledsOn+0x4c>)
 8002364:	f002 fd47 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8002368:	2201      	movs	r2, #1
 800236a:	2102      	movs	r1, #2
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <ledsOn+0x4c>)
 800236e:	f002 fd42 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002372:	2201      	movs	r2, #1
 8002374:	2110      	movs	r1, #16
 8002376:	4808      	ldr	r0, [pc, #32]	; (8002398 <ledsOn+0x48>)
 8002378:	f002 fd3d 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800237c:	2201      	movs	r2, #1
 800237e:	2120      	movs	r1, #32
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <ledsOn+0x48>)
 8002382:	f002 fd38 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <ledsOn+0x4c>)
 800238e:	f002 fd32 	bl	8004df6 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40020400 	.word	0x40020400
 800239c:	40020000 	.word	0x40020000

080023a0 <ledsOff>:

static void ledsOff(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2101      	movs	r1, #1
 80023a8:	480f      	ldr	r0, [pc, #60]	; (80023e8 <ledsOff+0x48>)
 80023aa:	f002 fd24 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2110      	movs	r1, #16
 80023b2:	480e      	ldr	r0, [pc, #56]	; (80023ec <ledsOff+0x4c>)
 80023b4:	f002 fd1f 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2102      	movs	r1, #2
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <ledsOff+0x4c>)
 80023be:	f002 fd1a 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2110      	movs	r1, #16
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <ledsOff+0x48>)
 80023c8:	f002 fd15 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2120      	movs	r1, #32
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <ledsOff+0x48>)
 80023d2:	f002 fd10 	bl	8004df6 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80023d6:	2200      	movs	r2, #0
 80023d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <ledsOff+0x4c>)
 80023de:	f002 fd0a 	bl	8004df6 <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020000 	.word	0x40020000

080023f0 <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <isPrintableASCII+0x16>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <isPrintableASCII+0x1a>
    {
        return false;
 8002406:	2300      	movs	r3, #0
 8002408:	e018      	b.n	800243c <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e010      	b.n	8002432 <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b1f      	cmp	r3, #31
 800241a:	d905      	bls.n	8002428 <isPrintableASCII+0x38>
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b7e      	cmp	r3, #126	; 0x7e
 8002426:	d901      	bls.n	800242c <isPrintableASCII+0x3c>
        {
            return false;
 8002428:	2300      	movs	r3, #0
 800242a:	e007      	b.n	800243c <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3ea      	bcc.n	8002410 <isPrintableASCII+0x20>
        }
    }

    return true;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b098      	sub	sp, #96	; 0x60
 800244c:	af04      	add	r7, sp, #16
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <ndefRecordDump+0x188>)
 8002456:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800245a:	461d      	mov	r5, r3
 800245c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 8002468:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <ndefRecordDump+0x18c>)
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d104      	bne.n	800247c <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 8002472:	4859      	ldr	r0, [pc, #356]	; (80025d8 <ndefRecordDump+0x190>)
 8002474:	f7fe f920 	bl	80006b8 <logUsart>
        return ERR_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	e0a4      	b.n	80025c6 <ndefRecordDump+0x17e>
    }

    if (ndefHeaderIsSetMB(record))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	09db      	lsrs	r3, r3, #7
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d103      	bne.n	8002490 <ndefRecordDump+0x48>
    {
        index = 1U;
 8002488:	4b54      	ldr	r3, [pc, #336]	; (80025dc <ndefRecordDump+0x194>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e004      	b.n	800249a <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <ndefRecordDump+0x194>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a51      	ldr	r2, [pc, #324]	; (80025dc <ndefRecordDump+0x194>)
 8002498:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <ndefRecordDump+0x68>
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <ndefRecordDump+0x198>)
 80024ae:	e000      	b.n	80024b2 <ndefRecordDump+0x6a>
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <ndefRecordDump+0x19c>)
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 80024b4:	4b49      	ldr	r3, [pc, #292]	; (80025dc <ndefRecordDump+0x194>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ba:	4619      	mov	r1, r3
 80024bc:	484a      	ldr	r0, [pc, #296]	; (80025e8 <ndefRecordDump+0x1a0>)
 80024be:	f7fe f8fb 	bl	80006b8 <logUsart>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fba6 	bl	8002c14 <ndefRecordDumpType>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d028      	beq.n	8002526 <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 80024d4:	4845      	ldr	r0, [pc, #276]	; (80025ec <ndefRecordDump+0x1a4>)
 80024d6:	f7fe f8ef 	bl	80006b8 <logUsart>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461d      	mov	r5, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	f003 0001 	and.w	r0, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	f003 0401 	and.w	r4, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	08d2      	lsrs	r2, r2, #3
 8002508:	f002 0201 	and.w	r2, r2, #1
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	7809      	ldrb	r1, [r1, #0]
 8002510:	f001 0107 	and.w	r1, r1, #7
 8002514:	9102      	str	r1, [sp, #8]
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4623      	mov	r3, r4
 800251c:	4602      	mov	r2, r0
 800251e:	4629      	mov	r1, r5
 8002520:	4833      	ldr	r0, [pc, #204]	; (80025f0 <ndefRecordDump+0x1a8>)
 8002522:	f7fe f8c9 	bl	80006b8 <logUsart>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 8002526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <ndefRecordDump+0xec>
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d047      	beq.n	80025c4 <ndefRecordDump+0x17c>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3350      	adds	r3, #80	; 0x50
 8002540:	443b      	add	r3, r7
 8002542:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002546:	4619      	mov	r1, r3
 8002548:	482a      	ldr	r0, [pc, #168]	; (80025f4 <ndefRecordDump+0x1ac>)
 800254a:	f7fe f8b5 	bl	80006b8 <logUsart>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 800254e:	f107 021c 	add.w	r2, r7, #28
 8002552:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f006 fad5 	bl	8008b08 <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 800255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <ndefRecordDump+0x12e>
 8002566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <ndefRecordDump+0x12e>
        {
            platformLog(" Empty NDEF record\r\n");
 800256e:	4822      	ldr	r0, [pc, #136]	; (80025f8 <ndefRecordDump+0x1b0>)
 8002570:	f7fe f8a2 	bl	80006b8 <logUsart>
 8002574:	e006      	b.n	8002584 <ndefRecordDump+0x13c>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4a20      	ldr	r2, [pc, #128]	; (80025fc <ndefRecordDump+0x1b4>)
 800257c:	4619      	mov	r1, r3
 800257e:	4820      	ldr	r0, [pc, #128]	; (8002600 <ndefRecordDump+0x1b8>)
 8002580:	f000 fd18 	bl	8002fb4 <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <ndefRecordDump+0x162>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f006 fb41 	bl	8008c1e <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <ndefRecordDump+0x1b4>)
 80025a2:	4619      	mov	r1, r3
 80025a4:	4817      	ldr	r0, [pc, #92]	; (8002604 <ndefRecordDump+0x1bc>)
 80025a6:	f000 fd05 	bl	8002fb4 <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 fb86 	bl	8008cc2 <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4812      	ldr	r0, [pc, #72]	; (8002608 <ndefRecordDump+0x1c0>)
 80025c0:	f000 fbf8 	bl	8002db4 <ndefBufferDump>
    }

    return ERR_NONE;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3750      	adds	r7, #80	; 0x50
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0801cdfc 	.word	0x0801cdfc
 80025d4:	0801cd30 	.word	0x0801cd30
 80025d8:	0801cd34 	.word	0x0801cd34
 80025dc:	20003068 	.word	0x20003068
 80025e0:	0801cd40 	.word	0x0801cd40
 80025e4:	0801cd50 	.word	0x0801cd50
 80025e8:	0801cd64 	.word	0x0801cd64
 80025ec:	0801cd74 	.word	0x0801cd74
 80025f0:	0801cd8c 	.word	0x0801cd8c
 80025f4:	0801cda8 	.word	0x0801cda8
 80025f8:	0801cdc0 	.word	0x0801cdc0
 80025fc:	0801cdd8 	.word	0x0801cdd8
 8002600:	0801cddc 	.word	0x0801cddc
 8002604:	0801cde8 	.word	0x0801cde8
 8002608:	0801cdf0 	.word	0x0801cdf0

0800260c <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 800261e:	4816      	ldr	r0, [pc, #88]	; (8002678 <ndefMessageDump+0x6c>)
 8002620:	f7fe f84a 	bl	80006b8 <logUsart>
        return ERR_NONE;
 8002624:	2300      	movs	r3, #0
 8002626:	e023      	b.n	8002670 <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 8002628:	4814      	ldr	r0, [pc, #80]	; (800267c <ndefMessageDump+0x70>)
 800262a:	f7fe f845 	bl	80006b8 <logUsart>
    }

    record = ndefMessageGetFirstRecord(message);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <ndefMessageDump+0x2e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	e000      	b.n	800263c <ndefMessageDump+0x30>
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 800263e:	e013      	b.n	8002668 <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	4619      	mov	r1, r3
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff feff 	bl	8002448 <ndefRecordDump>
 800264a:	4603      	mov	r3, r0
 800264c:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <ndefMessageDump+0x4c>
        {
            return err;
 8002654:	897b      	ldrh	r3, [r7, #10]
 8002656:	e00b      	b.n	8002670 <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <ndefMessageDump+0x58>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	e000      	b.n	8002666 <ndefMessageDump+0x5a>
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e8      	bne.n	8002640 <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	0801ce1c 	.word	0x0801ce1c
 800267c:	0801ce34 	.word	0x0801ce34

08002680 <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 800268e:	2307      	movs	r3, #7
 8002690:	e009      	b.n	80026a6 <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 800269a:	2307      	movs	r3, #7
 800269c:	e003      	b.n	80026a6 <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <ndefEmptyTypeDump+0x30>)
 80026a0:	f7fe f80a 	bl	80006b8 <logUsart>

    return ERR_NONE;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0801ce4c 	.word	0x0801ce4c

080026b4 <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b094      	sub	sp, #80	; 0x50
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 80026bc:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <ndefRtdDeviceInfoDump+0x10c>)
 80026be:	f107 040c 	add.w	r4, r7, #12
 80026c2:	461d      	mov	r5, r3
 80026c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 80026d2:	2307      	movs	r3, #7
 80026d4:	e070      	b.n	80027b8 <ndefRtdDeviceInfoDump+0x104>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 80026de:	2307      	movs	r3, #7
 80026e0:	e06a      	b.n	80027b8 <ndefRtdDeviceInfoDump+0x104>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f007 ff9f 	bl	800a62c <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 80026ee:	4835      	ldr	r0, [pc, #212]	; (80027c4 <ndefRtdDeviceInfoDump+0x110>)
 80026f0:	f7fd ffe2 	bl	80006b8 <logUsart>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f8:	e05a      	b.n	80027b0 <ndefRtdDeviceInfoDump+0xfc>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 80026fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3350      	adds	r3, #80	; 0x50
 8002700:	443b      	add	r3, r7
 8002702:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04f      	beq.n	80027aa <ndefRtdDeviceInfoDump+0xf6>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	3350      	adds	r3, #80	; 0x50
 8002710:	443b      	add	r3, r7
 8002712:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	3350      	adds	r3, #80	; 0x50
 800271a:	443b      	add	r3, r7
 800271c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002720:	4619      	mov	r1, r3
 8002722:	4829      	ldr	r0, [pc, #164]	; (80027c8 <ndefRtdDeviceInfoDump+0x114>)
 8002724:	f7fd ffc8 	bl	80006b8 <logUsart>

            if (type != NDEF_DEVICE_INFO_UUID)
 8002728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272a:	2b03      	cmp	r3, #3
 800272c:	d01d      	beq.n	800276a <ndefRtdDeviceInfoDump+0xb6>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
 8002732:	e00f      	b.n	8002754 <ndefRtdDeviceInfoDump+0xa0>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	3350      	adds	r3, #80	; 0x50
 800273a:	443b      	add	r3, r7
 800273c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4820      	ldr	r0, [pc, #128]	; (80027cc <ndefRtdDeviceInfoDump+0x118>)
 800274a:	f7fd ffb5 	bl	80006b8 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002750:	3301      	adds	r3, #1
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
 8002754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3350      	adds	r3, #80	; 0x50
 800275a:	443b      	add	r3, r7
 800275c:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8002760:	461a      	mov	r2, r3
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002764:	4293      	cmp	r3, r2
 8002766:	d3e5      	bcc.n	8002734 <ndefRtdDeviceInfoDump+0x80>
 8002768:	e01c      	b.n	80027a4 <ndefRtdDeviceInfoDump+0xf0>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800276a:	2300      	movs	r3, #0
 800276c:	64bb      	str	r3, [r7, #72]	; 0x48
 800276e:	e00f      	b.n	8002790 <ndefRtdDeviceInfoDump+0xdc>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	3350      	adds	r3, #80	; 0x50
 8002776:	443b      	add	r3, r7
 8002778:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800277c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4812      	ldr	r0, [pc, #72]	; (80027d0 <ndefRtdDeviceInfoDump+0x11c>)
 8002786:	f7fd ff97 	bl	80006b8 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	3301      	adds	r3, #1
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	3350      	adds	r3, #80	; 0x50
 8002796:	443b      	add	r3, r7
 8002798:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 800279c:	461a      	mov	r2, r3
 800279e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d3e5      	bcc.n	8002770 <ndefRtdDeviceInfoDump+0xbc>
                }
            }
            platformLog("\r\n");
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <ndefRtdDeviceInfoDump+0x120>)
 80027a6:	f7fd ff87 	bl	80006b8 <logUsart>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	3301      	adds	r3, #1
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d9a1      	bls.n	80026fa <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3750      	adds	r7, #80	; 0x50
 80027bc:	46bd      	mov	sp, r7
 80027be:	bdb0      	pop	{r4, r5, r7, pc}
 80027c0:	0801ce8c 	.word	0x0801ce8c
 80027c4:	0801ce5c 	.word	0x0801ce5c
 80027c8:	0801ce74 	.word	0x0801ce74
 80027cc:	0801ce7c 	.word	0x0801ce7c
 80027d0:	0801ce80 	.word	0x0801ce80
 80027d4:	0801ce88 	.word	0x0801ce88

080027d8 <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 80027e6:	2307      	movs	r3, #7
 80027e8:	e027      	b.n	800283a <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d001      	beq.n	80027f6 <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 80027f2:	2307      	movs	r3, #7
 80027f4:	e021      	b.n	800283a <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	f107 0214 	add.w	r2, r7, #20
 80027fe:	f107 011f 	add.w	r1, r7, #31
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f008 f944 	bl	800aa90 <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <ndefRtdTextDump+0x6c>)
 800280e:	4619      	mov	r1, r3
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <ndefRtdTextDump+0x70>)
 8002812:	f000 fb33 	bl	8002e7c <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 8002816:	7ffb      	ldrb	r3, [r7, #31]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <ndefRtdTextDump+0x48>
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <ndefRtdTextDump+0x74>)
 800281e:	e000      	b.n	8002822 <ndefRtdTextDump+0x4a>
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <ndefRtdTextDump+0x78>)
 8002822:	4619      	mov	r1, r3
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <ndefRtdTextDump+0x7c>)
 8002826:	f7fd ff47 	bl	80006b8 <logUsart>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <ndefRtdTextDump+0x80>)
 8002830:	4619      	mov	r1, r3
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <ndefRtdTextDump+0x84>)
 8002834:	f000 fbbe 	bl	8002fb4 <ndefBuffer8Print>

    return ERR_NONE;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	0801cd30 	.word	0x0801cd30
 8002848:	0801cea0 	.word	0x0801cea0
 800284c:	0801ceac 	.word	0x0801ceac
 8002850:	0801ceb4 	.word	0x0801ceb4
 8002854:	0801cebc 	.word	0x0801cebc
 8002858:	0801cec4 	.word	0x0801cec4
 800285c:	0801cecc 	.word	0x0801cecc

08002860 <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 800286e:	2307      	movs	r3, #7
 8002870:	e01c      	b.n	80028ac <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d001      	beq.n	800287e <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 800287a:	2307      	movs	r3, #7
 800287c:	e016      	b.n	80028ac <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 800287e:	f107 0208 	add.w	r2, r7, #8
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f008 fae7 	bl	800ae5c <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <ndefRtdUriDump+0x54>)
 8002894:	4619      	mov	r1, r3
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <ndefRtdUriDump+0x58>)
 8002898:	f000 faf0 	bl	8002e7c <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <ndefRtdUriDump+0x5c>)
 80028a2:	4619      	mov	r1, r3
 80028a4:	4806      	ldr	r0, [pc, #24]	; (80028c0 <ndefRtdUriDump+0x60>)
 80028a6:	f000 fae9 	bl	8002e7c <ndefBufferPrint>

    return ERR_NONE;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	0801cee0 	.word	0x0801cee0
 80028b8:	0801cee4 	.word	0x0801cee4
 80028bc:	0801ce88 	.word	0x0801ce88
 80028c0:	0801cd30 	.word	0x0801cd30

080028c4 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 80028d2:	2307      	movs	r3, #7
 80028d4:	e013      	b.n	80028fe <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d001      	beq.n	80028e2 <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 80028de:	2307      	movs	r3, #7
 80028e0:	e00d      	b.n	80028fe <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f008 fbb5 	bl	800b058 <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <ndefRtdAarDump+0x44>)
 80028f4:	4619      	mov	r1, r3
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <ndefRtdAarDump+0x48>)
 80028f8:	f000 fac0 	bl	8002e7c <ndefBufferPrint>

    return ERR_NONE;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	0801ce88 	.word	0x0801ce88
 800290c:	0801ceec 	.word	0x0801ceec

08002910 <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b096      	sub	sp, #88	; 0x58
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 800291a:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <ndefMediaVCardTranslate+0xb8>)
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4611      	mov	r1, r2
 8002922:	2248      	movs	r2, #72	; 0x48
 8002924:	4618      	mov	r0, r3
 8002926:	f018 fdc5 	bl	801b4b4 <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <ndefMediaVCardTranslate+0x26>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 8002936:	230b      	movs	r3, #11
 8002938:	e041      	b.n	80029be <ndefMediaVCardTranslate+0xae>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 800293a:	2300      	movs	r3, #0
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
 800293e:	e032      	b.n	80029a6 <ndefMediaVCardTranslate+0x96>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681c      	ldr	r4, [r3, #0]
 8002944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3358      	adds	r3, #88	; 0x58
 800294a:	443b      	add	r3, r7
 800294c:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3358      	adds	r3, #88	; 0x58
 8002956:	443b      	add	r3, r7
 8002958:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fc0d 	bl	800017c <strlen>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4629      	mov	r1, r5
 8002968:	4620      	mov	r0, r4
 800296a:	f018 fd93 	bl	801b494 <memcmp>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d115      	bne.n	80029a0 <ndefMediaVCardTranslate+0x90>
        {
            bufTranslation->buffer = translate[i].english;
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3358      	adds	r3, #88	; 0x58
 800297a:	443b      	add	r3, r7
 800297c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 8002984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3358      	adds	r3, #88	; 0x58
 800298a:	443b      	add	r3, r7
 800298c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fbf3 	bl	800017c <strlen>
 8002996:	4602      	mov	r2, r0
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 800299c:	2300      	movs	r3, #0
 800299e:	e00e      	b.n	80029be <ndefMediaVCardTranslate+0xae>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 80029a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a2:	3301      	adds	r3, #1
 80029a4:	657b      	str	r3, [r7, #84]	; 0x54
 80029a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d9c9      	bls.n	8002940 <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3758      	adds	r7, #88	; 0x58
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	0801cf18 	.word	0x0801cf18

080029cc <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0a6      	sub	sp, #152	; 0x98
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 80029d4:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <ndefMediaVCardDump+0x184>)
 80029d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80029da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029de:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <ndefMediaVCardDump+0x188>)
 80029e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ec:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 80029f0:	4a59      	ldr	r2, [pc, #356]	; (8002b58 <ndefMediaVCardDump+0x18c>)
 80029f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029fa:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 80029fe:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <ndefMediaVCardDump+0x190>)
 8002a00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a08:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 8002a0c:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <ndefMediaVCardDump+0x194>)
 8002a0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a16:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 8002a1a:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <ndefMediaVCardDump+0x198>)
 8002a1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a24:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <ndefMediaVCardDump+0x19c>)
 8002a2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a32:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 8002a36:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <ndefMediaVCardDump+0x1a0>)
 8002a38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a40:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 8002a44:	4a4a      	ldr	r2, [pc, #296]	; (8002b70 <ndefMediaVCardDump+0x1a4>)
 8002a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a4e:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 8002a52:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a80:	643b      	str	r3, [r7, #64]	; 0x40
 8002a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a86:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e059      	b.n	8002b46 <ndefMediaVCardDump+0x17a>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d001      	beq.n	8002a9e <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e053      	b.n	8002b46 <ndefMediaVCardDump+0x17a>
    }

    platformLog(" vCard decoded: \r\n");
 8002a9e:	4835      	ldr	r0, [pc, #212]	; (8002b74 <ndefMediaVCardDump+0x1a8>)
 8002aa0:	f7fd fe0a 	bl	80006b8 <logUsart>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aaa:	e047      	b.n	8002b3c <ndefMediaVCardDump+0x170>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8002aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	3398      	adds	r3, #152	; 0x98
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	f107 021c 	add.w	r2, r7, #28
 8002ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f007 f99a 	bl	8009e04 <ndefGetVCard>

        if (bufValue.buffer != NULL)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02d      	beq.n	8002b32 <ndefMediaVCardDump+0x166>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002ae0:	f7ff ff16 	bl	8002910 <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <ndefMediaVCardDump+0x1ac>)
 8002aea:	4619      	mov	r1, r3
 8002aec:	4823      	ldr	r0, [pc, #140]	; (8002b7c <ndefMediaVCardDump+0x1b0>)
 8002aee:	f000 f9c5 	bl	8002e7c <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <ndefMediaVCardDump+0x13a>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <ndefMediaVCardDump+0x1b4>)
 8002afe:	4619      	mov	r1, r3
 8002b00:	4820      	ldr	r0, [pc, #128]	; (8002b84 <ndefMediaVCardDump+0x1b8>)
 8002b02:	f000 f9bb 	bl	8002e7c <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 8002b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b10:	4618      	mov	r0, r3
 8002b12:	f018 fcbf 	bl	801b494 <memcmp>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <ndefMediaVCardDump+0x160>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <ndefMediaVCardDump+0x1bc>)
 8002b22:	4619      	mov	r1, r3
 8002b24:	4819      	ldr	r0, [pc, #100]	; (8002b8c <ndefMediaVCardDump+0x1c0>)
 8002b26:	f000 f9a9 	bl	8002e7c <ndefBufferPrint>
 8002b2a:	e002      	b.n	8002b32 <ndefMediaVCardDump+0x166>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 8002b2c:	4818      	ldr	r0, [pc, #96]	; (8002b90 <ndefMediaVCardDump+0x1c4>)
 8002b2e:	f7fd fdc3 	bl	80006b8 <logUsart>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b36:	3301      	adds	r3, #1
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d9b3      	bls.n	8002aac <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3798      	adds	r7, #152	; 0x98
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	0801cf9c 	.word	0x0801cf9c
 8002b54:	0801cfa4 	.word	0x0801cfa4
 8002b58:	0801cfac 	.word	0x0801cfac
 8002b5c:	0801cfb4 	.word	0x0801cfb4
 8002b60:	0801cfbc 	.word	0x0801cfbc
 8002b64:	0801cfc4 	.word	0x0801cfc4
 8002b68:	0801cfcc 	.word	0x0801cfcc
 8002b6c:	0801cfd4 	.word	0x0801cfd4
 8002b70:	0801cfdc 	.word	0x0801cfdc
 8002b74:	0801cf60 	.word	0x0801cf60
 8002b78:	0801cd30 	.word	0x0801cd30
 8002b7c:	0801cf74 	.word	0x0801cf74
 8002b80:	0801cee0 	.word	0x0801cee0
 8002b84:	0801cf78 	.word	0x0801cf78
 8002b88:	0801ce88 	.word	0x0801ce88
 8002b8c:	0801cf7c 	.word	0x0801cf7c
 8002b90:	0801cf80 	.word	0x0801cf80

08002b94 <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e028      	b.n	8002bf8 <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	d001      	beq.n	8002bb2 <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e022      	b.n	8002bf8 <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f006 fc77 	bl	80094ac <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 8002bbe:	4810      	ldr	r0, [pc, #64]	; (8002c00 <ndefMediaWifiDump+0x6c>)
 8002bc0:	f7fd fd7a 	bl	80006b8 <logUsart>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <ndefMediaWifiDump+0x70>)
 8002bce:	f000 f8f1 	bl	8002db4 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480a      	ldr	r0, [pc, #40]	; (8002c08 <ndefMediaWifiDump+0x74>)
 8002bde:	f000 f8e9 	bl	8002db4 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 8002be2:	7f3b      	ldrb	r3, [r7, #28]
 8002be4:	4619      	mov	r1, r3
 8002be6:	4809      	ldr	r0, [pc, #36]	; (8002c0c <ndefMediaWifiDump+0x78>)
 8002be8:	f7fd fd66 	bl	80006b8 <logUsart>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 8002bec:	7f7b      	ldrb	r3, [r7, #29]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <ndefMediaWifiDump+0x7c>)
 8002bf2:	f7fd fd61 	bl	80006b8 <logUsart>

    return ERR_NONE;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	0801cfe4 	.word	0x0801cfe4
 8002c04:	0801cff8 	.word	0x0801cff8
 8002c08:	0801d008 	.word	0x0801d008
 8002c0c:	0801d018 	.word	0x0801d018
 8002c10:	0801d030 	.word	0x0801d030

08002c14 <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0c8      	sub	sp, #288	; 0x120
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c22:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 8002c24:	f107 020c 	add.w	r2, r7, #12
 8002c28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c30:	4611      	mov	r1, r2
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f006 fe0c 	bl	8009850 <ndefRecordToType>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 8002c3e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <ndefRecordDumpType+0x38>
    {
        return err;
 8002c46:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002c4a:	e02d      	b.n	8002ca8 <ndefRecordDumpType+0x94>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c52:	e024      	b.n	8002c9e <ndefRecordDumpType+0x8a>
    {
        if (type.id == typeDumpTable[i].typeId)
 8002c54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	4915      	ldr	r1, [pc, #84]	; (8002cb4 <ndefRecordDumpType+0xa0>)
 8002c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c64:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d113      	bne.n	8002c94 <ndefRecordDumpType+0x80>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 8002c6c:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <ndefRecordDumpType+0xa0>)
 8002c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <ndefRecordDumpType+0x80>
            {
                return typeDumpTable[i].dump(&type);
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <ndefRecordDumpType+0xa0>)
 8002c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f107 020c 	add.w	r2, r7, #12
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4798      	blx	r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	e009      	b.n	8002ca8 <ndefRecordDumpType+0x94>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d9d6      	bls.n	8002c54 <ndefRecordDumpType+0x40>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8002ca6:	230f      	movs	r3, #15
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	0801d0e8 	.word	0x0801d0e8

08002cb8 <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	e05e      	b.n	8002d8e <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4831      	ldr	r0, [pc, #196]	; (8002d98 <ndefBufferDumpLine+0xe0>)
 8002cd4:	f7fd fcf0 	bl	80006b8 <logUsart>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00c      	b.n	8002cf8 <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	482b      	ldr	r0, [pc, #172]	; (8002d9c <ndefBufferDumpLine+0xe4>)
 8002cee:	f7fd fce3 	bl	80006b8 <logUsart>
    for (j = 0; j < remaining; j++)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3ee      	bcc.n	8002cde <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e005      	b.n	8002d12 <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 8002d06:	4826      	ldr	r0, [pc, #152]	; (8002da0 <ndefBufferDumpLine+0xe8>)
 8002d08:	f7fd fcd6 	bl	80006b8 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d3f3      	bcc.n	8002d06 <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 8002d1e:	4821      	ldr	r0, [pc, #132]	; (8002da4 <ndefBufferDumpLine+0xec>)
 8002d20:	f7fd fcca 	bl	80006b8 <logUsart>
    for (j = 0; j < remaining; j++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e01a      	b.n	8002d60 <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4413      	add	r3, r2
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fb5a 	bl	80023f0 <isPrintableASCII>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <ndefBufferDumpLine+0x98>
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4413      	add	r3, r2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	e000      	b.n	8002d52 <ndefBufferDumpLine+0x9a>
 8002d50:	232e      	movs	r3, #46	; 0x2e
 8002d52:	4619      	mov	r1, r3
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <ndefBufferDumpLine+0xf0>)
 8002d56:	f7fd fcaf 	bl	80006b8 <logUsart>
    for (j = 0; j < remaining; j++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3e0      	bcc.n	8002d2a <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e005      	b.n	8002d7a <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 8002d6e:	480f      	ldr	r0, [pc, #60]	; (8002dac <ndefBufferDumpLine+0xf4>)
 8002d70:	f7fd fca2 	bl	80006b8 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3f3      	bcc.n	8002d6e <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 8002d86:	480a      	ldr	r0, [pc, #40]	; (8002db0 <ndefBufferDumpLine+0xf8>)
 8002d88:	f7fd fc96 	bl	80006b8 <logUsart>

    return ERR_NONE;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0801d044 	.word	0x0801d044
 8002d9c:	0801d050 	.word	0x0801d050
 8002da0:	0801d058 	.word	0x0801d058
 8002da4:	0801d05c 	.word	0x0801d05c
 8002da8:	0801d060 	.word	0x0801d060
 8002dac:	0801d064 	.word	0x0801d064
 8002db0:	0801d068 	.word	0x0801d068

08002db4 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <ndefBufferDump+0x22>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 8002dd6:	2307      	movs	r3, #7
 8002dd8:	e045      	b.n	8002e66 <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68f9      	ldr	r1, [r7, #12]
 8002dee:	4820      	ldr	r0, [pc, #128]	; (8002e70 <ndefBufferDump+0xbc>)
 8002df0:	f7fd fc62 	bl	80006b8 <logUsart>
    if (bufPayload->buffer == NULL)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8002dfc:	481d      	ldr	r0, [pc, #116]	; (8002e74 <ndefBufferDump+0xc0>)
 8002dfe:	f7fd fc5b 	bl	80006b8 <logUsart>
        return ERR_NONE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e02f      	b.n	8002e66 <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8002e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d201      	bcs.n	8002e20 <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e012      	b.n	8002e4c <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	bf28      	it	cs
 8002e32:	4613      	movcs	r3, r2
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f7ff ff3e 	bl	8002cb8 <ndefBufferDumpLine>
        remaining -= lineLength;
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4413      	add	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3e8      	bcc.n	8002e26 <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d202      	bcs.n	8002e64 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 8002e5e:	4806      	ldr	r0, [pc, #24]	; (8002e78 <ndefBufferDump+0xc4>)
 8002e60:	f7fd fc2a 	bl	80006b8 <logUsart>
    }

    return ERR_NONE;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	0801d070 	.word	0x0801d070
 8002e74:	0801d084 	.word	0x0801d084
 8002e78:	0801d0a4 	.word	0x0801d0a4

08002e7c <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint8_t test = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74fb      	strb	r3, [r7, #19]

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <ndefBufferPrint+0x2a>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <ndefBufferPrint+0x2a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <ndefBufferPrint+0x2a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <ndefBufferPrint+0x2e>
    {
        return ERR_PARAM;
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e072      	b.n	8002f90 <ndefBufferPrint+0x114>
    }

    platformLog("%s", prefix);
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	483a      	ldr	r0, [pc, #232]	; (8002f98 <ndefBufferPrint+0x11c>)
 8002eae:	f7fd fc03 	bl	80006b8 <logUsart>
    for (i = 0; i < bufString->length; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e00e      	b.n	8002ed6 <ndefBufferPrint+0x5a>
    {
        platformLog("%c", bufString->buffer[i]);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4835      	ldr	r0, [pc, #212]	; (8002f9c <ndefBufferPrint+0x120>)
 8002ec6:	f7fd fbf7 	bl	80006b8 <logUsart>
        test++;
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < bufString->length; i++)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d3eb      	bcc.n	8002eb8 <ndefBufferPrint+0x3c>
    }
    platformLog("%s", suffix);
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	482d      	ldr	r0, [pc, #180]	; (8002f98 <ndefBufferPrint+0x11c>)
 8002ee4:	f7fd fbe8 	bl	80006b8 <logUsart>

    switch(test)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d034      	beq.n	8002f58 <ndefBufferPrint+0xdc>
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	dc49      	bgt.n	8002f86 <ndefBufferPrint+0x10a>
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d002      	beq.n	8002efc <ndefBufferPrint+0x80>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d017      	beq.n	8002f2a <ndefBufferPrint+0xae>
 8002efa:	e044      	b.n	8002f86 <ndefBufferPrint+0x10a>
            {
                case 2:
                	platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002efc:	2201      	movs	r2, #1
 8002efe:	2110      	movs	r1, #16
 8002f00:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <ndefBufferPrint+0x124>)
 8002f02:	f001 ff78 	bl	8004df6 <HAL_GPIO_WritePin>
                	ringbell();
 8002f06:	f7fd febf 	bl	8000c88 <ringbell>
                	lcd_clear();
 8002f0a:	f7fd fb23 	bl	8000554 <lcd_clear>
                	lcd_put_cur(1, 0);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7fd fb36 	bl	8000582 <lcd_put_cur>
                	lcd_clear();
 8002f16:	f7fd fb1d 	bl	8000554 <lcd_clear>
                	lcd_put_cur(0, 0);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd fb30 	bl	8000582 <lcd_put_cur>
                	lcd_send_string(line1);
 8002f22:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <ndefBufferPrint+0x128>)
 8002f24:	f7fd fb89 	bl	800063a <lcd_send_string>
                    break;
 8002f28:	e031      	b.n	8002f8e <ndefBufferPrint+0x112>
                case 4:
                    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2110      	movs	r1, #16
 8002f2e:	481c      	ldr	r0, [pc, #112]	; (8002fa0 <ndefBufferPrint+0x124>)
 8002f30:	f001 ff61 	bl	8004df6 <HAL_GPIO_WritePin>
                    ringbell();
 8002f34:	f7fd fea8 	bl	8000c88 <ringbell>
                    lcd_clear();
 8002f38:	f7fd fb0c 	bl	8000554 <lcd_clear>
                    lcd_put_cur(1, 0);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7fd fb1f 	bl	8000582 <lcd_put_cur>
                    lcd_clear();
 8002f44:	f7fd fb06 	bl	8000554 <lcd_clear>
                    lcd_put_cur(0, 0);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fd fb19 	bl	8000582 <lcd_put_cur>
                    lcd_send_string(line2);
 8002f50:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <ndefBufferPrint+0x12c>)
 8002f52:	f7fd fb72 	bl	800063a <lcd_send_string>
                    break;
 8002f56:	e01a      	b.n	8002f8e <ndefBufferPrint+0x112>
                case 5:
                    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	4810      	ldr	r0, [pc, #64]	; (8002fa0 <ndefBufferPrint+0x124>)
 8002f5e:	f001 ff4a 	bl	8004df6 <HAL_GPIO_WritePin>
                    ringbell();
 8002f62:	f7fd fe91 	bl	8000c88 <ringbell>
                    lcd_clear();
 8002f66:	f7fd faf5 	bl	8000554 <lcd_clear>
                    lcd_put_cur(1, 0);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f7fd fb08 	bl	8000582 <lcd_put_cur>
                    lcd_clear();
 8002f72:	f7fd faef 	bl	8000554 <lcd_clear>
                    lcd_put_cur(0, 0);
 8002f76:	2100      	movs	r1, #0
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd fb02 	bl	8000582 <lcd_put_cur>
                    lcd_send_string(line3);
 8002f7e:	480b      	ldr	r0, [pc, #44]	; (8002fac <ndefBufferPrint+0x130>)
 8002f80:	f7fd fb5b 	bl	800063a <lcd_send_string>
                    break;
 8002f84:	e003      	b.n	8002f8e <ndefBufferPrint+0x112>

                default:
                	platformLog("Selection exit\r\n");
 8002f86:	480a      	ldr	r0, [pc, #40]	; (8002fb0 <ndefBufferPrint+0x134>)
 8002f88:	f7fd fb96 	bl	80006b8 <logUsart>
                    break;
 8002f8c:	bf00      	nop
            }

    //platformLog("%d\n\r", test);

    return ERR_NONE;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0801d0b8 	.word	0x0801d0b8
 8002f9c:	0801ce7c 	.word	0x0801ce7c
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	200000a4 	.word	0x200000a4
 8002fa8:	200000ac 	.word	0x200000ac
 8002fac:	200000b4 	.word	0x200000b4
 8002fb0:	0801d0bc 	.word	0x0801d0bc

08002fb4 <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	e00d      	b.n	8002fe6 <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff ff4c 	bl	8002e7c <ndefBufferPrint>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8002ff8:	4a07      	ldr	r2, [pc, #28]	; (8003018 <spiInit+0x28>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300c:	601a      	str	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20003134 	.word	0x20003134

0800301c <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <spiTxRx+0x6c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <spiTxRx+0x1a>
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e024      	b.n	8003080 <spiTxRx+0x64>
  
  if(length > SPI_BUF_LEN)
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b61      	cmp	r3, #97	; 0x61
 800303a:	d901      	bls.n	8003040 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e01f      	b.n	8003080 <spiTxRx+0x64>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	461a      	mov	r2, r3
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	480f      	ldr	r0, [pc, #60]	; (800308c <spiTxRx+0x70>)
 800304e:	f018 fa31 	bl	801b4b4 <memcpy>
 8003052:	e005      	b.n	8003060 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	461a      	mov	r2, r3
 8003058:	2100      	movs	r1, #0
 800305a:	480c      	ldr	r0, [pc, #48]	; (800308c <spiTxRx+0x70>)
 800305c:	f018 fa52 	bl	801b504 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <spiTxRx+0x6c>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <spiTxRx+0x52>
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	e000      	b.n	8003070 <spiTxRx+0x54>
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <spiTxRx+0x74>)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003076:	9100      	str	r1, [sp, #0]
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <spiTxRx+0x70>)
 800307a:	f004 fe9a 	bl	8007db2 <HAL_SPI_TransmitReceive>
 800307e:	4603      	mov	r3, r0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20003134 	.word	0x20003134
 800308c:	2000306c 	.word	0x2000306c
 8003090:	200030d0 	.word	0x200030d0

08003094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_MspInit+0x5c>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_MspInit+0x5c>)
 80030a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a4:	6253      	str	r3, [r2, #36]	; 0x24
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_MspInit+0x5c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_MspInit+0x5c>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <HAL_MspInit+0x5c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_MspInit+0x5c>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_MspInit+0x5c>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <HAL_MspInit+0x5c>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6253      	str	r3, [r2, #36]	; 0x24
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_MspInit+0x5c>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030e2:	2007      	movs	r0, #7
 80030e4:	f001 fc50 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_I2C_MspInit+0x9c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d138      	bne.n	8003188 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800312e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003134:	2312      	movs	r3, #18
 8003136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003138:	2301      	movs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003140:	2304      	movs	r3, #4
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	4813      	ldr	r0, [pc, #76]	; (8003198 <HAL_I2C_MspInit+0xa4>)
 800314c:	f001 fcac 	bl	8004aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 8003156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800315a:	6253      	str	r3, [r2, #36]	; 0x24
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_I2C_MspInit+0xa0>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	201f      	movs	r0, #31
 800316e:	f001 fc16 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003172:	201f      	movs	r0, #31
 8003174:	f001 fc2f 	bl	80049d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2100      	movs	r1, #0
 800317c:	2020      	movs	r0, #32
 800317e:	f001 fc0e 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003182:	2020      	movs	r0, #32
 8003184:	f001 fc27 	bl	80049d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40005400 	.word	0x40005400
 8003194:	40023800 	.word	0x40023800
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_SPI_MspInit+0x7c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d127      	bne.n	800320e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031c8:	6213      	str	r3, [r2, #32]
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	61d3      	str	r3, [r2, #28]
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_SPI_MspInit+0x80>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031ee:	23e0      	movs	r3, #224	; 0xe0
 80031f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031fe:	2305      	movs	r3, #5
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <HAL_SPI_MspInit+0x84>)
 800320a:	f001 fc4d 	bl	8004aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40013000 	.word	0x40013000
 800321c:	40023800 	.word	0x40023800
 8003220:	40020000 	.word	0x40020000

08003224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <HAL_UART_MspInit+0xd8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d129      	bne.n	800329a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_UART_MspInit+0xdc>)
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <HAL_UART_MspInit+0xdc>)
 800324c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003250:	6253      	str	r3, [r2, #36]	; 0x24
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_UART_MspInit+0xdc>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_UART_MspInit+0xdc>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_UART_MspInit+0xdc>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	61d3      	str	r3, [r2, #28]
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_UART_MspInit+0xdc>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003276:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003288:	2308      	movs	r3, #8
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	481c      	ldr	r0, [pc, #112]	; (8003304 <HAL_UART_MspInit+0xe0>)
 8003294:	f001 fc08 	bl	8004aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003298:	e02c      	b.n	80032f4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_UART_MspInit+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d127      	bne.n	80032f4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	6253      	str	r3, [r2, #36]	; 0x24
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	61d3      	str	r3, [r2, #28]
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_UART_MspInit+0xdc>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032d4:	230c      	movs	r3, #12
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e0:	2303      	movs	r3, #3
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e4:	2307      	movs	r3, #7
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	4619      	mov	r1, r3
 80032ee:	4807      	ldr	r0, [pc, #28]	; (800330c <HAL_UART_MspInit+0xe8>)
 80032f0:	f001 fbda 	bl	8004aa8 <HAL_GPIO_Init>
}
 80032f4:	bf00      	nop
 80032f6:	3730      	adds	r7, #48	; 0x30
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40004c00 	.word	0x40004c00
 8003300:	40023800 	.word	0x40023800
 8003304:	40020800 	.word	0x40020800
 8003308:	40004400 	.word	0x40004400
 800330c:	40020000 	.word	0x40020000

08003310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <NMI_Handler+0x4>

08003316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800331a:	e7fe      	b.n	800331a <HardFault_Handler+0x4>

0800331c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003320:	e7fe      	b.n	8003320 <MemManage_Handler+0x4>

08003322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003326:	e7fe      	b.n	8003326 <BusFault_Handler+0x4>

08003328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <UsageFault_Handler+0x4>

0800332e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003356:	f001 fa0d 	bl	8004774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}

0800335e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003362:	2001      	movs	r0, #1
 8003364:	f001 fd78 	bl	8004e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 8003368:	f000 fffc 	bl	8004364 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <I2C1_EV_IRQHandler+0x10>)
 8003376:	f001 ffd3 	bl	8005320 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200003bc 	.word	0x200003bc

08003384 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <I2C1_ER_IRQHandler+0x10>)
 800338a:	f002 f93a 	bl	8005602 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200003bc 	.word	0x200003bc

08003398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <_sbrk+0x5c>)
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <_sbrk+0x60>)
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <_sbrk+0x64>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <_sbrk+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c8:	f018 f83a 	bl	801b440 <__errno>
 80033cc:	4603      	mov	r3, r0
 80033ce:	220c      	movs	r2, #12
 80033d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e009      	b.n	80033ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <_sbrk+0x64>)
 80033e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20014000 	.word	0x20014000
 80033f8:	00000400 	.word	0x00000400
 80033fc:	20003138 	.word	0x20003138
 8003400:	20003df8 	.word	0x20003df8

08003404 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003412:	490d      	ldr	r1, [pc, #52]	; (8003448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003418:	e002      	b.n	8003420 <LoopCopyDataInit>

0800341a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800341c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341e:	3304      	adds	r3, #4

08003420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003424:	d3f9      	bcc.n	800341a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003428:	4c0a      	ldr	r4, [pc, #40]	; (8003454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800342c:	e001      	b.n	8003432 <LoopFillZerobss>

0800342e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003430:	3204      	adds	r2, #4

08003432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003434:	d3fb      	bcc.n	800342e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003436:	f7ff ffe5 	bl	8003404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800343a:	f018 f807 	bl	801b44c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800343e:	f7fd f9dd 	bl	80007fc <main>
  bx lr
 8003442:	4770      	bx	lr
  ldr r0, =_sdata
 8003444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003448:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800344c:	0801d828 	.word	0x0801d828
  ldr r2, =_sbss
 8003450:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8003454:	20003df4 	.word	0x20003df4

08003458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003458:	e7fe      	b.n	8003458 <ADC1_IRQHandler>

0800345a <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800345e:	2148      	movs	r1, #72	; 0x48
 8003460:	2002      	movs	r0, #2
 8003462:	f000 fd74 	bl	8003f4e <st25r3911SetRegisterBits>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}

0800346a <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 800346a:	b580      	push	{r7, lr}
 800346c:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800346e:	2148      	movs	r1, #72	; 0x48
 8003470:	2002      	movs	r0, #2
 8003472:	f000 fd49 	bl	8003f08 <st25r3911ClrRegisterBits>
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}

0800347a <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	2002      	movs	r0, #2
 8003484:	f000 f9ba 	bl	80037fc <st25r3911CheckReg>
 8003488:	4603      	mov	r3, r0
 800348a:	f083 0301 	eor.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d011      	beq.n	80034b8 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8003494:	2080      	movs	r0, #128	; 0x80
 8003496:	f001 f86f 	bl	8004578 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 800349a:	2080      	movs	r0, #128	; 0x80
 800349c:	f001 f8a8 	bl	80045f0 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	2100      	movs	r1, #0
 80034a4:	2002      	movs	r0, #2
 80034a6:	f000 fd86 	bl	8003fb6 <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 80034aa:	210a      	movs	r1, #10
 80034ac:	2080      	movs	r0, #128	; 0x80
 80034ae:	f001 f80f 	bl	80044d0 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80034b2:	2080      	movs	r0, #128	; 0x80
 80034b4:	f001 f8a8 	bl	8004608 <st25r3911DisableInterrupts>
    }
    
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}

080034bc <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 80034c2:	20c1      	movs	r0, #193	; 0xc1
 80034c4:	f000 fe62 	bl	800418c <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 80034c8:	2100      	movs	r1, #0
 80034ca:	2002      	movs	r0, #2
 80034cc:	f000 fcd0 	bl	8003e70 <st25r3911WriteRegister>

    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0,
 80034d0:	2218      	movs	r2, #24
 80034d2:	2100      	movs	r1, #0
 80034d4:	2001      	movs	r0, #1
 80034d6:	f000 fd6e 	bl	8003fb6 <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 80034da:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80034de:	f001 f893 	bl	8004608 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 80034e2:	f001 f89d 	bl	8004620 <st25r3911ClearInterrupts>

    st25r3911OscOn();
 80034e6:	f7ff ffc8 	bl	800347a <st25r3911OscOn>

    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f000 f928 	bl	8003740 <st25r3911MeasureVoltage>
 80034f0:	4603      	mov	r3, r0
 80034f2:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80034fa:	d201      	bcs.n	8003500 <st25r3911Initialize+0x44>
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	e000      	b.n	8003502 <st25r3911Initialize+0x46>
 8003500:	2300      	movs	r3, #0
 8003502:	461a      	mov	r2, r3
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	2001      	movs	r0, #1
 8003508:	f000 fd55 	bl	8003fb6 <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 800350c:	f7ff ffad 	bl	800346a <st25r3911TxRxOff>
    
    return;
 8003510:	bf00      	nop
}
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	202a      	movs	r0, #42	; 0x2a
 8003528:	f000 fd11 	bl	8003f4e <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	202a      	movs	r0, #42	; 0x2a
 8003530:	f000 fcea 	bl	8003f08 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 8003534:	f107 030d 	add.w	r3, r7, #13
 8003538:	2205      	movs	r2, #5
 800353a:	212b      	movs	r1, #43	; 0x2b
 800353c:	20d6      	movs	r0, #214	; 0xd6
 800353e:	f000 fad5 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	4619      	mov	r1, r3
 8003548:	2001      	movs	r0, #1
 800354a:	f000 fb5b 	bl	8003c04 <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 800354e:	7b7b      	ldrb	r3, [r7, #13]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	b2db      	uxtb	r3, r3
 8003554:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 8003556:	7b7b      	ldrb	r3, [r7, #13]
 8003558:	3b05      	subs	r3, #5
 800355a:	b2db      	uxtb	r3, r3
 800355c:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02b      	beq.n	80035bc <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 8003564:	7b3b      	ldrb	r3, [r7, #12]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	da16      	bge.n	800359a <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003572:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	7b7b      	ldrb	r3, [r7, #13]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	0089      	lsls	r1, r1, #2
 8003580:	440b      	add	r3, r1
 8003582:	4619      	mov	r1, r3
 8003584:	0088      	lsls	r0, r1, #2
 8003586:	4619      	mov	r1, r3
 8003588:	4603      	mov	r3, r0
 800358a:	440b      	add	r3, r1
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	b29b      	uxth	r3, r3
 8003590:	4413      	add	r3, r2
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	e010      	b.n	80035bc <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f640 723c 	movw	r2, #3900	; 0xf3c
 80035a0:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	7b7b      	ldrb	r3, [r7, #13]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	4619      	mov	r1, r3
 80035ac:	0109      	lsls	r1, r1, #4
 80035ae:	1acb      	subs	r3, r1, r3
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 80035bc:	89fb      	ldrh	r3, [r7, #14]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	220a      	movs	r2, #10
 80035d2:	2120      	movs	r1, #32
 80035d4:	20d3      	movs	r0, #211	; 0xd3
 80035d6:	f000 fa89 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	220a      	movs	r2, #10
 80035ee:	2120      	movs	r1, #32
 80035f0:	20d9      	movs	r0, #217	; 0xd9
 80035f2:	f000 fa7b 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	220a      	movs	r2, #10
 800360a:	2120      	movs	r1, #32
 800360c:	20de      	movs	r0, #222	; 0xde
 800360e:	f000 fa6d 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	220a      	movs	r2, #10
 8003626:	2123      	movs	r1, #35	; 0x23
 8003628:	20d8      	movs	r0, #216	; 0xd8
 800362a:	f000 fa5f 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 800363e:	21f8      	movs	r1, #248	; 0xf8
 8003640:	202e      	movs	r0, #46	; 0x2e
 8003642:	f000 fc61 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8003646:	f107 030d 	add.w	r3, r7, #13
 800364a:	2204      	movs	r2, #4
 800364c:	212f      	movs	r1, #47	; 0x2f
 800364e:	20dd      	movs	r0, #221	; 0xdd
 8003650:	f000 fa4c 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>
 8003654:	4603      	mov	r3, r0
 8003656:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003658:	7b7b      	ldrb	r3, [r7, #13]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8003662:	7b7b      	ldrb	r3, [r7, #13]
 8003664:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 8003672:	2303      	movs	r3, #3
 8003674:	e008      	b.n	8003688 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 800367c:	7b7b      	ldrb	r3, [r7, #13]
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	b2da      	uxtb	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	460a      	mov	r2, r1
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	4613      	mov	r3, r2
 800369e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80036a0:	f107 030f 	add.w	r3, r7, #15
 80036a4:	4619      	mov	r1, r3
 80036a6:	2004      	movs	r0, #4
 80036a8:	f000 faac 	bl	8003c04 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80036ac:	79bb      	ldrb	r3, [r7, #6]
 80036ae:	2bff      	cmp	r3, #255	; 0xff
 80036b0:	d00e      	beq.n	80036d0 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 80036b2:	79bb      	ldrb	r3, [r7, #6]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d901      	bls.n	80036bc <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80036b8:	2307      	movs	r3, #7
 80036ba:	e025      	b.n	8003708 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	f023 030f 	bic.w	r3, r3, #15
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	79bb      	ldrb	r3, [r7, #6]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d012      	beq.n	80036fc <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d901      	bls.n	80036e0 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 80036dc:	2307      	movs	r3, #7
 80036de:	e013      	b.n	8003708 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	b25a      	sxtb	r2, r3
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	4313      	orrs	r3, r2
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	4619      	mov	r1, r3
 8003700:	2004      	movs	r0, #4
 8003702:	f000 fbb5 	bl	8003e70 <st25r3911WriteRegister>
    
    return ERR_NONE;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	461a      	mov	r2, r3
 800371e:	2106      	movs	r1, #6
 8003720:	202a      	movs	r0, #42	; 0x2a
 8003722:	f000 fc32 	bl	8003f8a <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 8003726:	f107 030f 	add.w	r3, r7, #15
 800372a:	220a      	movs	r2, #10
 800372c:	2120      	movs	r1, #32
 800372e:	20df      	movs	r0, #223	; 0xdf
 8003730:	f000 f9dc 	bl	8003aec <st25r3911ExecuteCommandAndGetResult>

    return result;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ffdf 	bl	8003710 <st25r3911MeasurePowerSupply>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	0052      	lsls	r2, r2, #1
 800375e:	441a      	add	r2, r3
 8003760:	00d2      	lsls	r2, r2, #3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <st25r3911MeasureVoltage+0x50>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	b29a      	uxth	r2, r3
 800377e:	89bb      	ldrh	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	81bb      	strh	r3, [r7, #12]

    return mV;
 8003784:	89bb      	ldrh	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	460a      	mov	r2, r1
 800379e:	80fb      	strh	r3, [r7, #6]
 80037a0:	4613      	mov	r3, r2
 80037a2:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f811 	bl	80037ce <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	461a      	mov	r2, r3
 80037b0:	21e0      	movs	r1, #224	; 0xe0
 80037b2:	2011      	movs	r0, #17
 80037b4:	f000 fbff 	bl	8003fb6 <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 80037b8:	797b      	ldrb	r3, [r7, #5]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 80037be:	20e0      	movs	r0, #224	; 0xe0
 80037c0:	f000 fce4 	bl	800418c <st25r3911ExecuteCommand>
    }

    return;
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
}
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	b29b      	uxth	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	2012      	movs	r0, #18
 80037e4:	f000 fb44 	bl	8003e70 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	2013      	movs	r0, #19
 80037f0:	f000 fb3e 	bl	8003e70 <st25r3911WriteRegister>

    return;
 80037f4:	bf00      	nop
}
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	460b      	mov	r3, r1
 8003808:	71bb      	strb	r3, [r7, #6]
 800380a:	4613      	mov	r3, r2
 800380c:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 8003812:	f107 020f 	add.w	r2, r7, #15
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f9f2 	bl	8003c04 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	79bb      	ldrb	r3, [r7, #6]
 8003824:	4013      	ands	r3, r2
 8003826:	b2db      	uxtb	r3, r3
 8003828:	797a      	ldrb	r2, [r7, #5]
 800382a:	429a      	cmp	r2, r3
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8003848:	f107 030f 	add.w	r3, r7, #15
 800384c:	4619      	mov	r1, r3
 800384e:	203f      	movs	r0, #63	; 0x3f
 8003850:	f000 f9d8 	bl	8003c04 <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d001      	beq.n	8003862 <st25r3911CheckChipID+0x26>
    {
        return false;
 800385e:	2300      	movs	r3, #0
 8003860:	e009      	b.n	8003876 <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b2da      	uxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 8003888:	2300      	movs	r3, #0
 800388a:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <st25r3911SetNoResponseTime_64fcs+0x78>)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d312      	bcc.n	80038c8 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 80038a2:	2301      	movs	r3, #1
 80038a4:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	333f      	adds	r3, #63	; 0x3f
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b4:	d304      	bcc.n	80038c0 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 80038b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ba:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 80038bc:	2307      	movs	r3, #7
 80038be:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	019b      	lsls	r3, r3, #6
 80038c4:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80038c6:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 80038c8:	7b7b      	ldrb	r3, [r7, #13]
 80038ca:	461a      	mov	r2, r3
 80038cc:	2101      	movs	r1, #1
 80038ce:	2011      	movs	r0, #17
 80038d0:	f000 fb71 	bl	8003fb6 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4619      	mov	r1, r3
 80038dc:	200f      	movs	r0, #15
 80038de:	f000 fac7 	bl	8003e70 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	2010      	movs	r0, #16
 80038ea:	f000 fac1 	bl	8003e70 <st25r3911WriteRegister>

    return err;
 80038ee:	89fb      	ldrh	r3, [r7, #14]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000313c 	.word	0x2000313c

080038fc <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4623      	mov	r3, r4
 800390c:	71fb      	strb	r3, [r7, #7]
 800390e:	4603      	mov	r3, r0
 8003910:	71bb      	strb	r3, [r7, #6]
 8003912:	460b      	mov	r3, r1
 8003914:	717b      	strb	r3, [r7, #5]
 8003916:	4613      	mov	r3, r2
 8003918:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2bc8      	cmp	r3, #200	; 0xc8
 800391e:	d007      	beq.n	8003930 <st25r3911PerformCollisionAvoidance+0x34>
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	2bca      	cmp	r3, #202	; 0xca
 8003924:	d004      	beq.n	8003930 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	2bc9      	cmp	r3, #201	; 0xc9
 800392a:	d001      	beq.n	8003930 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 800392c:	2307      	movs	r3, #7
 800392e:	e056      	b.n	80039de <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8003930:	79bb      	ldrb	r3, [r7, #6]
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d102      	bne.n	800393c <st25r3911PerformCollisionAvoidance+0x40>
 8003936:	797b      	ldrb	r3, [r7, #5]
 8003938:	2bff      	cmp	r3, #255	; 0xff
 800393a:	d01e      	beq.n	800397a <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8003940:	79bb      	ldrb	r3, [r7, #6]
 8003942:	2bff      	cmp	r3, #255	; 0xff
 8003944:	d003      	beq.n	800394e <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800394c:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 800394e:	797b      	ldrb	r3, [r7, #5]
 8003950:	2bff      	cmp	r3, #255	; 0xff
 8003952:	d003      	beq.n	800395c <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	f043 030f 	orr.w	r3, r3, #15
 800395a:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003962:	b2da      	uxtb	r2, r3
 8003964:	797b      	ldrb	r3, [r7, #5]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b2da      	uxtb	r2, r3
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4619      	mov	r1, r3
 8003974:	2029      	movs	r0, #41	; 0x29
 8003976:	f000 fb08 	bl	8003f8a <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 800397a:	793b      	ldrb	r3, [r7, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	2103      	movs	r1, #3
 8003986:	2009      	movs	r0, #9
 8003988:	f000 fb15 	bl	8003fb6 <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 800398c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003990:	f000 fe2e 	bl	80045f0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8003994:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003998:	f000 fdee 	bl	8004578 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fbf4 	bl	800418c <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 80039a4:	210a      	movs	r1, #10
 80039a6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80039aa:	f000 fd91 	bl	80044d0 <st25r3911WaitForInterruptsTimed>
 80039ae:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 80039b0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80039b4:	f000 fde0 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 80039b8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80039bc:	f000 fe24 	bl	8004608 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 80039ca:	231d      	movs	r3, #29
 80039cc:	e007      	b.n	80039de <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 80039dc:	230c      	movs	r3, #12
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	201e      	movs	r0, #30
 80039f6:	f000 fa3b 	bl	8003e70 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	201d      	movs	r0, #29
 8003a04:	f000 fa34 	bl	8003e70 <st25r3911WriteRegister>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8003a24:	2378      	movs	r3, #120	; 0x78
 8003a26:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d903      	bls.n	8003a38 <st25r3911StreamConfigure+0x28>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d901      	bls.n	8003a3c <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	e053      	b.n	8003ae4 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	f1c3 0304 	rsb	r3, r3, #4
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	015b      	lsls	r3, r3, #5
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e01b      	b.n	8003a8a <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8003a52:	2370      	movs	r3, #112	; 0x70
 8003a54:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d903      	bls.n	8003a66 <st25r3911StreamConfigure+0x56>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d901      	bls.n	8003a6a <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8003a66:	2307      	movs	r3, #7
 8003a68:	e03c      	b.n	8003ae4 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	f1c3 0306 	rsb	r3, r3, #6
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8003a86:	2307      	movs	r3, #7
 8003a88:	e02c      	b.n	8003ae4 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	789b      	ldrb	r3, [r3, #2]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <st25r3911StreamConfigure+0x8a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	789b      	ldrb	r3, [r3, #2]
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	d901      	bls.n	8003a9e <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e022      	b.n	8003ae4 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	789b      	ldrb	r3, [r3, #2]
 8003aa2:	f1c3 0307 	rsb	r3, r3, #7
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	78db      	ldrb	r3, [r3, #3]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d901      	bls.n	8003aba <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8003ab6:	2307      	movs	r3, #7
 8003ab8:	e014      	b.n	8003ae4 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	78db      	ldrb	r3, [r3, #3]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	2008      	movs	r0, #8
 8003ad2:	f000 f9cd 	bl	8003e70 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2178      	movs	r1, #120	; 0x78
 8003adc:	2003      	movs	r0, #3
 8003ade:	f000 fa54 	bl	8003f8a <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	460b      	mov	r3, r1
 8003afa:	71bb      	strb	r3, [r7, #6]
 8003afc:	4613      	mov	r3, r2
 8003afe:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003b00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b04:	f000 fd74 	bl	80045f0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8003b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b0c:	f000 fd34 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb3a 	bl	800418c <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8003b18:	797b      	ldrb	r3, [r7, #5]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b22:	f000 fcd5 	bl	80044d0 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003b26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b2a:	f000 fd6d 	bl	8004608 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f863 	bl	8003c04 <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db0b      	blt.n	8003b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	4906      	ldr	r1, [pc, #24]	; (8003b7c <__NVIC_EnableIRQ+0x34>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2001      	movs	r0, #1
 8003b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db12      	blt.n	8003bb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <__NVIC_DisableIRQ+0x44>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bac:	f3bf 8f4f 	dsb	sy
}
 8003bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bb2:	f3bf 8f6f 	isb	sy
}
 8003bb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003bde:	2201      	movs	r2, #1
 8003be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be4:	4806      	ldr	r0, [pc, #24]	; (8003c00 <st25r3911CheckFieldSetLED+0x38>)
 8003be6:	f001 f906 	bl	8004df6 <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8003bea:	e005      	b.n	8003bf8 <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf2:	4803      	ldr	r0, [pc, #12]	; (8003c00 <st25r3911CheckFieldSetLED+0x38>)
 8003bf4:	f001 f8ff 	bl	8004df6 <HAL_GPIO_WritePin>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40020000 	.word	0x40020000

08003c04 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <st25r3911ReadRegister+0x94>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <st25r3911ReadRegister+0x94>)
 8003c1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c1c:	f3bf 8f4f 	dsb	sy
}
 8003c20:	bf00      	nop
 8003c22:	2006      	movs	r0, #6
 8003c24:	f7ff ffac 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c28:	f3bf 8f4f 	dsb	sy
}
 8003c2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c2e:	f3bf 8f6f 	isb	sy
}
 8003c32:	bf00      	nop
    platformSpiSelect();
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	; 0x40
 8003c38:	4818      	ldr	r0, [pc, #96]	; (8003c9c <st25r3911ReadRegister+0x98>)
 8003c3a:	f001 f8dc 	bl	8004df6 <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8003c4c:	f107 010c 	add.w	r1, r7, #12
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	2202      	movs	r2, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f9e0 	bl	800301c <spiTxRx>
  
    if(value != NULL)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <st25r3911ReadRegister+0x64>
    {
      *value = buf[1];
 8003c62:	7b7a      	ldrb	r2, [r7, #13]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	480b      	ldr	r0, [pc, #44]	; (8003c9c <st25r3911ReadRegister+0x98>)
 8003c6e:	f001 f8c2 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <st25r3911ReadRegister+0x94>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <st25r3911ReadRegister+0x94>)
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <st25r3911ReadRegister+0x94>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <st25r3911ReadRegister+0x8a>
 8003c86:	2006      	movs	r0, #6
 8003c88:	f7ff ff5e 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
}
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200004f0 	.word	0x200004f0
 8003c9c:	40020400 	.word	0x40020400

08003ca0 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d037      	beq.n	8003d30 <st25r3911ReadMultipleRegisters+0x90>
    {
        platformProtectST25R391xComm();
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <st25r3911ReadMultipleRegisters+0x98>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <st25r3911ReadMultipleRegisters+0x98>)
 8003cca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ccc:	f3bf 8f4f 	dsb	sy
}
 8003cd0:	bf00      	nop
 8003cd2:	2006      	movs	r0, #6
 8003cd4:	f7ff ff54 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd8:	f3bf 8f4f 	dsb	sy
}
 8003cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cde:	f3bf 8f6f 	isb	sy
}
 8003ce2:	bf00      	nop
        platformSpiSelect();
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	4814      	ldr	r0, [pc, #80]	; (8003d3c <st25r3911ReadMultipleRegisters+0x9c>)
 8003cea:	f001 f884 	bl	8004df6 <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8003cee:	f107 030f 	add.w	r3, r7, #15
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f990 	bl	800301c <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8003cfc:	79bb      	ldrb	r3, [r7, #6]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7ff f989 	bl	800301c <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	480b      	ldr	r0, [pc, #44]	; (8003d3c <st25r3911ReadMultipleRegisters+0x9c>)
 8003d10:	f001 f871 	bl	8004df6 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <st25r3911ReadMultipleRegisters+0x98>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <st25r3911ReadMultipleRegisters+0x98>)
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <st25r3911ReadMultipleRegisters+0x98>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <st25r3911ReadMultipleRegisters+0x90>
 8003d28:	2006      	movs	r0, #6
 8003d2a:	f7ff ff0d 	bl	8003b48 <__NVIC_EnableIRQ>
    }
    
    return;
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
}
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200004f0 	.word	0x200004f0
 8003d3c:	40020400 	.word	0x40020400

08003d40 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <st25r3911ReadTestRegister+0x98>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <st25r3911ReadTestRegister+0x98>)
 8003d56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d58:	f3bf 8f4f 	dsb	sy
}
 8003d5c:	bf00      	nop
 8003d5e:	2006      	movs	r0, #6
 8003d60:	f7ff ff0e 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d64:	f3bf 8f4f 	dsb	sy
}
 8003d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d6a:	f3bf 8f6f 	isb	sy
}
 8003d6e:	bf00      	nop
    platformSpiSelect();
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	4819      	ldr	r0, [pc, #100]	; (8003ddc <st25r3911ReadTestRegister+0x9c>)
 8003d76:	f001 f83e 	bl	8004df6 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003d7a:	23fc      	movs	r3, #252	; 0xfc
 8003d7c:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8003d8c:	f107 010c 	add.w	r1, r7, #12
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	2203      	movs	r2, #3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f940 	bl	800301c <spiTxRx>
    
    if(value != NULL)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <st25r3911ReadTestRegister+0x68>
    {
      *value = buf[2];
 8003da2:	7bba      	ldrb	r2, [r7, #14]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8003da8:	2201      	movs	r2, #1
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	480b      	ldr	r0, [pc, #44]	; (8003ddc <st25r3911ReadTestRegister+0x9c>)
 8003dae:	f001 f822 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <st25r3911ReadTestRegister+0x98>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <st25r3911ReadTestRegister+0x98>)
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <st25r3911ReadTestRegister+0x98>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <st25r3911ReadTestRegister+0x8e>
 8003dc6:	2006      	movs	r0, #6
 8003dc8:	f7ff febe 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
}
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200004f0 	.word	0x200004f0
 8003ddc:	40020400 	.word	0x40020400

08003de0 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	460a      	mov	r2, r1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <st25r3911WriteTestRegister+0x88>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <st25r3911WriteTestRegister+0x88>)
 8003dfa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dfc:	f3bf 8f4f 	dsb	sy
}
 8003e00:	bf00      	nop
 8003e02:	2006      	movs	r0, #6
 8003e04:	f7ff febc 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e08:	f3bf 8f4f 	dsb	sy
}
 8003e0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e0e:	f3bf 8f6f 	isb	sy
}
 8003e12:	bf00      	nop
    platformSpiSelect();
 8003e14:	2200      	movs	r2, #0
 8003e16:	2140      	movs	r1, #64	; 0x40
 8003e18:	4814      	ldr	r0, [pc, #80]	; (8003e6c <st25r3911WriteTestRegister+0x8c>)
 8003e1a:	f000 ffec 	bl	8004df6 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003e1e:	23fc      	movs	r3, #252	; 0xfc
 8003e20:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8003e26:	79bb      	ldrb	r3, [r7, #6]
 8003e28:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	2203      	movs	r2, #3
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f8f2 	bl	800301c <spiTxRx>
  
    platformSpiDeselect();
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2140      	movs	r1, #64	; 0x40
 8003e3c:	480b      	ldr	r0, [pc, #44]	; (8003e6c <st25r3911WriteTestRegister+0x8c>)
 8003e3e:	f000 ffda 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <st25r3911WriteTestRegister+0x88>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <st25r3911WriteTestRegister+0x88>)
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <st25r3911WriteTestRegister+0x88>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <st25r3911WriteTestRegister+0x7e>
 8003e56:	2006      	movs	r0, #6
 8003e58:	f7ff fe76 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
}
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200004f0 	.word	0x200004f0
 8003e6c:	40020400 	.word	0x40020400

08003e70 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	460a      	mov	r2, r1
 8003e7a:	71fb      	strb	r3, [r7, #7]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d103      	bne.n	8003e8e <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8003e86:	79bb      	ldrb	r3, [r7, #6]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fe9d 	bl	8003bc8 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <st25r3911WriteRegister+0x90>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <st25r3911WriteRegister+0x90>)
 8003e98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9a:	f3bf 8f4f 	dsb	sy
}
 8003e9e:	bf00      	nop
 8003ea0:	2006      	movs	r0, #6
 8003ea2:	f7ff fe6d 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea6:	f3bf 8f4f 	dsb	sy
}
 8003eaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eac:	f3bf 8f6f 	isb	sy
}
 8003eb0:	bf00      	nop
    platformSpiSelect();
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2140      	movs	r1, #64	; 0x40
 8003eb6:	4813      	ldr	r0, [pc, #76]	; (8003f04 <st25r3911WriteRegister+0x94>)
 8003eb8:	f000 ff9d 	bl	8004df6 <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8003ec0:	79bb      	ldrb	r3, [r7, #6]
 8003ec2:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2202      	movs	r2, #2
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff f8a5 	bl	800301c <spiTxRx>
    
    platformSpiDeselect();
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	480b      	ldr	r0, [pc, #44]	; (8003f04 <st25r3911WriteRegister+0x94>)
 8003ed8:	f000 ff8d 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <st25r3911WriteRegister+0x90>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <st25r3911WriteRegister+0x90>)
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <st25r3911WriteRegister+0x90>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <st25r3911WriteRegister+0x88>
 8003ef0:	2006      	movs	r0, #6
 8003ef2:	f7ff fe29 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
}
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200004f0 	.word	0x200004f0
 8003f04:	40020400 	.word	0x40020400

08003f08 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	460a      	mov	r2, r1
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003f18:	f107 020f 	add.w	r2, r7, #15
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fe6f 	bl	8003c04 <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8003f26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	b25a      	sxtb	r2, r3
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	4013      	ands	r3, r2
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff95 	bl	8003e70 <st25r3911WriteRegister>
    
    return;
 8003f46:	bf00      	nop
}
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	460a      	mov	r2, r1
 8003f58:	71fb      	strb	r3, [r7, #7]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003f5e:	f107 020f 	add.w	r2, r7, #15
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fe4c 	bl	8003c04 <st25r3911ReadRegister>
    tmp |= set_mask;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	79bb      	ldrb	r3, [r7, #6]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff77 	bl	8003e70 <st25r3911WriteRegister>
    
    return;
 8003f82:	bf00      	nop
}
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
 8003f94:	460b      	mov	r3, r1
 8003f96:	71bb      	strb	r3, [r7, #6]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8003f9c:	79ba      	ldrb	r2, [r7, #6]
 8003f9e:	797b      	ldrb	r3, [r7, #5]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	79b9      	ldrb	r1, [r7, #6]
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f804 	bl	8003fb6 <st25r3911ModifyRegister>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	71fb      	strb	r3, [r7, #7]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	71bb      	strb	r3, [r7, #6]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003fc8:	f107 020f 	add.w	r2, r7, #15
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fe17 	bl	8003c04 <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8003fd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	b25a      	sxtb	r2, r3
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	797b      	ldrb	r3, [r7, #5]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff38 	bl	8003e70 <st25r3911WriteRegister>

    return;
 8004000:	bf00      	nop
}
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
 8004012:	460b      	mov	r3, r1
 8004014:	71bb      	strb	r3, [r7, #6]
 8004016:	4613      	mov	r3, r2
 8004018:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 800401a:	f107 020e 	add.w	r2, r7, #14
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fe8c 	bl	8003d40 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8004028:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800402c:	43db      	mvns	r3, r3
 800402e:	b25a      	sxtb	r2, r3
 8004030:	7bbb      	ldrb	r3, [r7, #14]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	4013      	ands	r3, r2
 8004036:	b25b      	sxtb	r3, r3
 8004038:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 800403a:	797a      	ldrb	r2, [r7, #5]
 800403c:	79bb      	ldrb	r3, [r7, #6]
 800403e:	4013      	ands	r3, r2
 8004040:	b2da      	uxtb	r2, r3
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	4313      	orrs	r3, r2
 8004046:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fec6 	bl	8003de0 <st25r3911WriteTestRegister>
    
    return;
 8004054:	bf00      	nop
}
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d037      	beq.n	80040e2 <st25r3911WriteFifo+0x86>
    {  
        platformProtectST25R391xComm();
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <st25r3911WriteFifo+0x90>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <st25r3911WriteFifo+0x90>)
 800407c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800407e:	f3bf 8f4f 	dsb	sy
}
 8004082:	bf00      	nop
 8004084:	2006      	movs	r0, #6
 8004086:	f7ff fd7b 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800408a:	f3bf 8f4f 	dsb	sy
}
 800408e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004090:	f3bf 8f6f 	isb	sy
}
 8004094:	bf00      	nop
        platformSpiSelect();
 8004096:	2200      	movs	r2, #0
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	4815      	ldr	r0, [pc, #84]	; (80040f0 <st25r3911WriteFifo+0x94>)
 800409c:	f000 feab 	bl	8004df6 <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 80040a0:	f107 030f 	add.w	r3, r7, #15
 80040a4:	2201      	movs	r2, #1
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe ffb7 	bl	800301c <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	2100      	movs	r1, #0
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fe ffb0 	bl	800301c <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 80040bc:	2201      	movs	r2, #1
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	480b      	ldr	r0, [pc, #44]	; (80040f0 <st25r3911WriteFifo+0x94>)
 80040c2:	f000 fe98 	bl	8004df6 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <st25r3911WriteFifo+0x90>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <st25r3911WriteFifo+0x90>)
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <st25r3911WriteFifo+0x90>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <st25r3911WriteFifo+0x86>
 80040da:	2006      	movs	r0, #6
 80040dc:	f7ff fd34 	bl	8003b48 <__NVIC_EnableIRQ>
    }

    return;
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
}
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200004f0 	.word	0x200004f0
 80040f0:	40020400 	.word	0x40020400

080040f4 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8004100:	23bf      	movs	r3, #191	; 0xbf
 8004102:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d037      	beq.n	800417a <st25r3911ReadFifo+0x86>
    {
        platformProtectST25R391xComm();
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <st25r3911ReadFifo+0x90>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <st25r3911ReadFifo+0x90>)
 8004114:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004116:	f3bf 8f4f 	dsb	sy
}
 800411a:	bf00      	nop
 800411c:	2006      	movs	r0, #6
 800411e:	f7ff fd2f 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004122:	f3bf 8f4f 	dsb	sy
}
 8004126:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004128:	f3bf 8f6f 	isb	sy
}
 800412c:	bf00      	nop
        platformSpiSelect();
 800412e:	2200      	movs	r2, #0
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	4815      	ldr	r0, [pc, #84]	; (8004188 <st25r3911ReadFifo+0x94>)
 8004134:	f000 fe5f 	bl	8004df6 <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8004138:	f107 030f 	add.w	r3, r7, #15
 800413c:	2201      	movs	r2, #1
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe ff6b 	bl	800301c <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	b29b      	uxth	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	2000      	movs	r0, #0
 8004150:	f7fe ff64 	bl	800301c <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 8004154:	2201      	movs	r2, #1
 8004156:	2140      	movs	r1, #64	; 0x40
 8004158:	480b      	ldr	r0, [pc, #44]	; (8004188 <st25r3911ReadFifo+0x94>)
 800415a:	f000 fe4c 	bl	8004df6 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <st25r3911ReadFifo+0x90>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <st25r3911ReadFifo+0x90>)
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <st25r3911ReadFifo+0x90>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <st25r3911ReadFifo+0x86>
 8004172:	2006      	movs	r0, #6
 8004174:	f7ff fce8 	bl	8003b48 <__NVIC_EnableIRQ>
    }

    return;
 8004178:	bf00      	nop
 800417a:	bf00      	nop
}
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200004f0 	.word	0x200004f0
 8004188:	40020400 	.word	0x40020400

0800418c <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2bc3      	cmp	r3, #195	; 0xc3
 800419a:	d908      	bls.n	80041ae <st25r3911ExecuteCommand+0x22>
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2bca      	cmp	r3, #202	; 0xca
 80041a0:	d805      	bhi.n	80041ae <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80041a2:	2200      	movs	r2, #0
 80041a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041a8:	481e      	ldr	r0, [pc, #120]	; (8004224 <st25r3911ExecuteCommand+0x98>)
 80041aa:	f000 fe24 	bl	8004df6 <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <st25r3911ExecuteCommand+0x9c>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <st25r3911ExecuteCommand+0x9c>)
 80041c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80041c4:	f3bf 8f4f 	dsb	sy
}
 80041c8:	bf00      	nop
 80041ca:	2006      	movs	r0, #6
 80041cc:	f7ff fcd8 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80041d0:	f3bf 8f4f 	dsb	sy
}
 80041d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041d6:	f3bf 8f6f 	isb	sy
}
 80041da:	bf00      	nop
    platformSpiSelect();
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	4812      	ldr	r0, [pc, #72]	; (800422c <st25r3911ExecuteCommand+0xa0>)
 80041e2:	f000 fe08 	bl	8004df6 <HAL_GPIO_WritePin>

    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 80041e6:	f107 030f 	add.w	r3, r7, #15
 80041ea:	2201      	movs	r2, #1
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe ff14 	bl	800301c <spiTxRx>

    platformSpiDeselect();
 80041f4:	2201      	movs	r2, #1
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	480c      	ldr	r0, [pc, #48]	; (800422c <st25r3911ExecuteCommand+0xa0>)
 80041fa:	f000 fdfc 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <st25r3911ExecuteCommand+0x9c>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <st25r3911ExecuteCommand+0x9c>)
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <st25r3911ExecuteCommand+0x9c>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <st25r3911ExecuteCommand+0x8e>
 8004212:	2006      	movs	r0, #6
 8004214:	f7ff fc98 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 8004218:	bf00      	nop
 800421a:	bf00      	nop
}
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40020000 	.word	0x40020000
 8004228:	200004f0 	.word	0x200004f0
 800422c:	40020400 	.word	0x40020400

08004230 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <st25r3911ExecuteCommands+0x78>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <st25r3911ExecuteCommands+0x78>)
 8004246:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004248:	f3bf 8f4f 	dsb	sy
}
 800424c:	bf00      	nop
 800424e:	2006      	movs	r0, #6
 8004250:	f7ff fc96 	bl	8003b80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004254:	f3bf 8f4f 	dsb	sy
}
 8004258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800425a:	f3bf 8f6f 	isb	sy
}
 800425e:	bf00      	nop
    platformSpiSelect();
 8004260:	2200      	movs	r2, #0
 8004262:	2140      	movs	r1, #64	; 0x40
 8004264:	4811      	ldr	r0, [pc, #68]	; (80042ac <st25r3911ExecuteCommands+0x7c>)
 8004266:	f000 fdc6 	bl	8004df6 <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	2100      	movs	r1, #0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe fed2 	bl	800301c <spiTxRx>
    
    platformSpiDeselect();
 8004278:	2201      	movs	r2, #1
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <st25r3911ExecuteCommands+0x7c>)
 800427e:	f000 fdba 	bl	8004df6 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <st25r3911ExecuteCommands+0x78>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	3b01      	subs	r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <st25r3911ExecuteCommands+0x78>)
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <st25r3911ExecuteCommands+0x78>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <st25r3911ExecuteCommands+0x6e>
 8004296:	2006      	movs	r0, #6
 8004298:	f7ff fc56 	bl	8003b48 <__NVIC_EnableIRQ>

    return;
 800429c:	bf00      	nop
 800429e:	bf00      	nop
}
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200004f0 	.word	0x200004f0
 80042ac:	40020400 	.word	0x40020400

080042b0 <__NVIC_EnableIRQ>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db0b      	blt.n	80042da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <__NVIC_EnableIRQ+0x34>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_DisableIRQ>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db12      	blt.n	8004320 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	490a      	ldr	r1, [pc, #40]	; (800432c <__NVIC_DisableIRQ+0x44>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2001      	movs	r0, #1
 800430a:	fa00 f202 	lsl.w	r2, r0, r2
 800430e:	3320      	adds	r3, #32
 8004310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004314:	f3bf 8f4f 	dsb	sy
}
 8004318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800431a:	f3bf 8f6f 	isb	sy
}
 800431e:	bf00      	nop
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e100 	.word	0xe000e100

08004330 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <st25r3911InitInterrupts+0x2c>)
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <st25r3911InitInterrupts+0x2c>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <st25r3911InitInterrupts+0x2c>)
 8004342:	2200      	movs	r2, #0
 8004344:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <st25r3911InitInterrupts+0x2c>)
 8004348:	2200      	movs	r2, #0
 800434a:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004352:	4803      	ldr	r0, [pc, #12]	; (8004360 <st25r3911InitInterrupts+0x30>)
 8004354:	f000 fd4f 	bl	8004df6 <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20003140 	.word	0x20003140
 8004360:	40020000 	.word	0x40020000

08004364 <st25r3911Isr>:

void st25r3911Isr( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 8004368:	f000 f80c 	bl	8004384 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <st25r3911Isr+0x1c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <st25r3911Isr+0x1c>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4798      	blx	r3
    }
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20003140 	.word	0x20003140

08004384 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 800438e:	463b      	mov	r3, r7
 8004390:	2203      	movs	r2, #3
 8004392:	21ff      	movs	r1, #255	; 0xff
 8004394:	4618      	mov	r0, r3
 8004396:	f017 f8b5 	bl	801b504 <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 800439a:	e01f      	b.n	80043dc <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 800439c:	463b      	mov	r3, r7
 800439e:	2203      	movs	r2, #3
 80043a0:	4619      	mov	r1, r3
 80043a2:	2017      	movs	r0, #23
 80043a4:	f7ff fc7c 	bl	8003ca0 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 80043a8:	783b      	ldrb	r3, [r7, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80043b2:	2201      	movs	r2, #1
 80043b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043b8:	4820      	ldr	r0, [pc, #128]	; (800443c <st25r3911CheckForReceivedInterrupts+0xb8>)
 80043ba:	f000 fd1c 	bl	8004df6 <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 80043be:	783b      	ldrb	r3, [r7, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 80043d2:	78bb      	ldrb	r3, [r7, #2]
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4313      	orrs	r3, r2
 80043da:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80043dc:	2101      	movs	r1, #1
 80043de:	4817      	ldr	r0, [pc, #92]	; (800443c <st25r3911CheckForReceivedInterrupts+0xb8>)
 80043e0:	f000 fcf2 	bl	8004dc8 <HAL_GPIO_ReadPin>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d0d8      	beq.n	800439c <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <st25r3911CheckForReceivedInterrupts+0xbc>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <st25r3911CheckForReceivedInterrupts+0xbc>)
 80043f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80043f6:	f3bf 8f4f 	dsb	sy
}
 80043fa:	bf00      	nop
 80043fc:	2006      	movs	r0, #6
 80043fe:	f7ff ff73 	bl	80042e8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004402:	f3bf 8f4f 	dsb	sy
}
 8004406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004408:	f3bf 8f6f 	isb	sy
}
 800440c:	bf00      	nop
    st25r3911interrupt.status |= irqStatus;
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <st25r3911CheckForReceivedInterrupts+0xc0>)
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4313      	orrs	r3, r2
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <st25r3911CheckForReceivedInterrupts+0xc0>)
 8004418:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	3b01      	subs	r3, #1
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <st25r3911CheckForReceivedInterrupts+0xb0>
 800442e:	2006      	movs	r0, #6
 8004430:	f7ff ff3e 	bl	80042b0 <__NVIC_EnableIRQ>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40020000 	.word	0x40020000
 8004440:	200004f0 	.word	0x200004f0
 8004444:	20003140 	.word	0x20003140

08004448 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43da      	mvns	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	401a      	ands	r2, r3
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	400b      	ands	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	43db      	mvns	r3, r3
 8004472:	4013      	ands	r3, r2
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 8004476:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4313      	orrs	r3, r2
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 8004482:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	75fb      	strb	r3, [r7, #23]
 8004488:	e019      	b.n	80044be <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	3314      	adds	r3, #20
 800449e:	b2d8      	uxtb	r0, r3
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <st25r3911ModifyInterrupts+0x84>)
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	4619      	mov	r1, r3
 80044b0:	f7ff fcde 	bl	8003e70 <st25r3911WriteRegister>
 80044b4:	e000      	b.n	80044b8 <st25r3911ModifyInterrupts+0x70>
            continue;
 80044b6:	bf00      	nop
    for (i=0; i<3U ; i++)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	3301      	adds	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d9e2      	bls.n	800448a <st25r3911ModifyInterrupts+0x42>
    }
    return;
 80044c4:	bf00      	nop
}
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20003140 	.word	0x20003140

080044d0 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f8d2 	bl	8004688 <timerCalculateTimer>
 80044e4:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 80044e6:	4b22      	ldr	r3, [pc, #136]	; (8004570 <st25r3911WaitForInterruptsTimed+0xa0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4013      	ands	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f8d7 	bl	80046a4 <timerIsExpired>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <st25r3911WaitForInterruptsTimed+0x38>
 8004502:	887b      	ldrh	r3, [r7, #2]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <st25r3911WaitForInterruptsTimed+0x3e>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0eb      	beq.n	80044e6 <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <st25r3911WaitForInterruptsTimed+0xa4>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004522:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004524:	f3bf 8f4f 	dsb	sy
}
 8004528:	bf00      	nop
 800452a:	2006      	movs	r0, #6
 800452c:	f7ff fedc 	bl	80042e8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004530:	f3bf 8f4f 	dsb	sy
}
 8004534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004536:	f3bf 8f6f 	isb	sy
}
 800453a:	bf00      	nop
    st25r3911interrupt.status &= ~status;
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <st25r3911WaitForInterruptsTimed+0xa0>)
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	43db      	mvns	r3, r3
 8004544:	4013      	ands	r3, r2
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004548:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <st25r3911WaitForInterruptsTimed+0xa4>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <st25r3911WaitForInterruptsTimed+0xa4>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <st25r3911WaitForInterruptsTimed+0x94>
 800455e:	2006      	movs	r0, #6
 8004560:	f7ff fea6 	bl	80042b0 <__NVIC_EnableIRQ>
    
    return status;
 8004564:	68bb      	ldr	r3, [r7, #8]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20003140 	.word	0x20003140
 8004574:	200004f0 	.word	0x200004f0

08004578 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <st25r3911GetInterrupt+0x70>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d025      	beq.n	80045dc <st25r3911GetInterrupt+0x64>
    {
        platformProtectST25R391xIrqStatus();
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <st25r3911GetInterrupt+0x74>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <st25r3911GetInterrupt+0x74>)
 800459a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800459c:	f3bf 8f4f 	dsb	sy
}
 80045a0:	bf00      	nop
 80045a2:	2006      	movs	r0, #6
 80045a4:	f7ff fea0 	bl	80042e8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80045a8:	f3bf 8f4f 	dsb	sy
}
 80045ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045ae:	f3bf 8f6f 	isb	sy
}
 80045b2:	bf00      	nop
        st25r3911interrupt.status &= ~irqs;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <st25r3911GetInterrupt+0x70>)
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <st25r3911GetInterrupt+0x70>)
 80045c0:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <st25r3911GetInterrupt+0x74>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <st25r3911GetInterrupt+0x74>)
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <st25r3911GetInterrupt+0x74>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <st25r3911GetInterrupt+0x64>
 80045d6:	2006      	movs	r0, #6
 80045d8:	f7ff fe6a 	bl	80042b0 <__NVIC_EnableIRQ>
    }
    return irqs;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20003140 	.word	0x20003140
 80045ec:	200004f0 	.word	0x200004f0

080045f0 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 80045f8:	2100      	movs	r1, #0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff24 	bl	8004448 <st25r3911ModifyInterrupts>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	2000      	movs	r0, #0
 8004614:	f7ff ff18 	bl	8004448 <st25r3911ModifyInterrupts>
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	2203      	movs	r2, #3
 800462a:	4619      	mov	r1, r3
 800462c:	2017      	movs	r0, #23
 800462e:	f7ff fb37 	bl	8003ca0 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <st25r3911ClearInterrupts+0x60>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <st25r3911ClearInterrupts+0x60>)
 800463c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800463e:	f3bf 8f4f 	dsb	sy
}
 8004642:	bf00      	nop
 8004644:	2006      	movs	r0, #6
 8004646:	f7ff fe4f 	bl	80042e8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800464a:	f3bf 8f4f 	dsb	sy
}
 800464e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004650:	f3bf 8f6f 	isb	sy
}
 8004654:	bf00      	nop
    st25r3911interrupt.status = 0;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <st25r3911ClearInterrupts+0x64>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <st25r3911ClearInterrupts+0x60>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <st25r3911ClearInterrupts+0x60>)
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <st25r3911ClearInterrupts+0x60>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <st25r3911ClearInterrupts+0x58>
 8004670:	2006      	movs	r0, #6
 8004672:	f7ff fe1d 	bl	80042b0 <__NVIC_EnableIRQ>
    return;
 8004676:	bf00      	nop
 8004678:	bf00      	nop
}
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	200004f0 	.word	0x200004f0
 8004684:	20003140 	.word	0x20003140

08004688 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 8004692:	f000 f881 	bl	8004798 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4413      	add	r3, r2
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80046ac:	f000 f874 	bl	8004798 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da01      	bge.n	80046c6 <timerIsExpired+0x22>
  {
    return true;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <timerIsExpired+0x24>
  }
  
  return false;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046da:	2003      	movs	r0, #3
 80046dc:	f000 f954 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046e0:	2000      	movs	r0, #0
 80046e2:	f000 f80d 	bl	8004700 <HAL_InitTick>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	71fb      	strb	r3, [r7, #7]
 80046f0:	e001      	b.n	80046f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046f2:	f7fe fccf 	bl	8003094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046f6:	79fb      	ldrb	r3, [r7, #7]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800470c:	4b16      	ldr	r3, [pc, #88]	; (8004768 <HAL_InitTick+0x68>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d022      	beq.n	800475a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <HAL_InitTick+0x6c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_InitTick+0x68>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004720:	fbb1 f3f3 	udiv	r3, r1, r3
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f962 	bl	80049f2 <HAL_SYSTICK_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d809      	bhi.n	800474e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800473a:	2200      	movs	r2, #0
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	f000 f92c 	bl	800499e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_InitTick+0x70>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e007      	b.n	800475e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	e004      	b.n	800475e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e001      	b.n	800475e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200000c4 	.word	0x200000c4
 800476c:	200000bc 	.word	0x200000bc
 8004770:	200000c0 	.word	0x200000c0

08004774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_IncTick+0x1c>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_IncTick+0x20>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4413      	add	r3, r2
 8004782:	4a03      	ldr	r2, [pc, #12]	; (8004790 <HAL_IncTick+0x1c>)
 8004784:	6013      	str	r3, [r2, #0]
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20003150 	.word	0x20003150
 8004794:	200000c4 	.word	0x200000c4

08004798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return uwTick;
 800479c:	4b02      	ldr	r3, [pc, #8]	; (80047a8 <HAL_GetTick+0x10>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	20003150 	.word	0x20003150

080047ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b4:	f7ff fff0 	bl	8004798 <HAL_GetTick>
 80047b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d004      	beq.n	80047d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_Delay+0x40>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047d0:	bf00      	nop
 80047d2:	f7ff ffe1 	bl	8004798 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d8f7      	bhi.n	80047d2 <HAL_Delay+0x26>
  {
  }
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200000c4 	.word	0x200000c4

080047f0 <__NVIC_SetPriorityGrouping>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4906      	ldr	r1, [pc, #24]	; (8004888 <__NVIC_EnableIRQ+0x34>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	e000e100 	.word	0xe000e100

0800488c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db0a      	blt.n	80048b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	490c      	ldr	r1, [pc, #48]	; (80048d8 <__NVIC_SetPriority+0x4c>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	440b      	add	r3, r1
 80048b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b4:	e00a      	b.n	80048cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <__NVIC_SetPriority+0x50>)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3b04      	subs	r3, #4
 80048c4:	0112      	lsls	r2, r2, #4
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	440b      	add	r3, r1
 80048ca:	761a      	strb	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f1c3 0307 	rsb	r3, r3, #7
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf28      	it	cs
 80048fe:	2304      	movcs	r3, #4
 8004900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3304      	adds	r3, #4
 8004906:	2b06      	cmp	r3, #6
 8004908:	d902      	bls.n	8004910 <NVIC_EncodePriority+0x30>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3b03      	subs	r3, #3
 800490e:	e000      	b.n	8004912 <NVIC_EncodePriority+0x32>
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	f04f 32ff 	mov.w	r2, #4294967295
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	401a      	ands	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004928:	f04f 31ff 	mov.w	r1, #4294967295
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43d9      	mvns	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	4313      	orrs	r3, r2
         );
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004954:	d301      	bcc.n	800495a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004956:	2301      	movs	r3, #1
 8004958:	e00f      	b.n	800497a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <SysTick_Config+0x40>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004962:	210f      	movs	r1, #15
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	f7ff ff90 	bl	800488c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <SysTick_Config+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <SysTick_Config+0x40>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff2d 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b0:	f7ff ff42 	bl	8004838 <__NVIC_GetPriorityGrouping>
 80049b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f7ff ff90 	bl	80048e0 <NVIC_EncodePriority>
 80049c0:	4602      	mov	r2, r0
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ff5f 	bl	800488c <__NVIC_SetPriority>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4603      	mov	r3, r0
 80049de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff35 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ffa2 	bl	8004944 <SysTick_Config>
 8004a00:	4603      	mov	r3, r0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e029      	b.n	8004a82 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 020e 	bic.w	r2, r2, #14
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 021c 	and.w	r2, r3, #28
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
    }
  }
  return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a9a:	b2db      	uxtb	r3, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004abe:	e160      	b.n	8004d82 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8152 	beq.w	8004d7c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d005      	beq.n	8004af0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d130      	bne.n	8004b52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	2203      	movs	r2, #3
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004b26:	2201      	movs	r2, #1
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0201 	and.w	r2, r3, #1
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d017      	beq.n	8004b8e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d123      	bne.n	8004be2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	08da      	lsrs	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3208      	adds	r2, #8
 8004bdc:	6939      	ldr	r1, [r7, #16]
 8004bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80ac 	beq.w	8004d7c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c24:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_GPIO_Init+0x2f8>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4a5d      	ldr	r2, [pc, #372]	; (8004da0 <HAL_GPIO_Init+0x2f8>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6213      	str	r3, [r2, #32]
 8004c30:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <HAL_GPIO_Init+0x2f8>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c3c:	4a59      	ldr	r2, [pc, #356]	; (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d025      	beq.n	8004cb4 <HAL_GPIO_Init+0x20c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_GPIO_Init+0x304>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01f      	beq.n	8004cb0 <HAL_GPIO_Init+0x208>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a4f      	ldr	r2, [pc, #316]	; (8004db0 <HAL_GPIO_Init+0x308>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d019      	beq.n	8004cac <HAL_GPIO_Init+0x204>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_GPIO_Init+0x30c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_GPIO_Init+0x200>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_GPIO_Init+0x310>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00d      	beq.n	8004ca4 <HAL_GPIO_Init+0x1fc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4c      	ldr	r2, [pc, #304]	; (8004dbc <HAL_GPIO_Init+0x314>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <HAL_GPIO_Init+0x1f8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <HAL_GPIO_Init+0x318>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_GPIO_Init+0x1f4>
 8004c98:	2306      	movs	r3, #6
 8004c9a:	e00c      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	e00a      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004ca0:	2305      	movs	r3, #5
 8004ca2:	e008      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e006      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e004      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e002      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	f002 0203 	and.w	r2, r2, #3
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4093      	lsls	r3, r2
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cc6:	4937      	ldr	r1, [pc, #220]	; (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004cf8:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d22:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f ae97 	bne.w	8004ac0 <HAL_GPIO_Init+0x18>
  }
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e001      	b.n	8004dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	807b      	strh	r3, [r7, #2]
 8004e02:	4613      	mov	r3, r2
 8004e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e06:	787b      	ldrb	r3, [r7, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004e12:	e003      	b.n	8004e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e38:	887a      	ldrh	r2, [r7, #2]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	041a      	lsls	r2, r3, #16
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	43d9      	mvns	r1, r3
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	400b      	ands	r3, r1
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	619a      	str	r2, [r3, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e6e:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f806 	bl	8004e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40010400 	.word	0x40010400

08004e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e12b      	b.n	8005106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fe f916 	bl	80030f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	; 0x24
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f00:	f002 fe46 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 8004f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4a81      	ldr	r2, [pc, #516]	; (8005110 <HAL_I2C_Init+0x274>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d807      	bhi.n	8004f20 <HAL_I2C_Init+0x84>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a80      	ldr	r2, [pc, #512]	; (8005114 <HAL_I2C_Init+0x278>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bf94      	ite	ls
 8004f18:	2301      	movls	r3, #1
 8004f1a:	2300      	movhi	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e006      	b.n	8004f2e <HAL_I2C_Init+0x92>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a7d      	ldr	r2, [pc, #500]	; (8005118 <HAL_I2C_Init+0x27c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bf94      	ite	ls
 8004f28:	2301      	movls	r3, #1
 8004f2a:	2300      	movhi	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e0e7      	b.n	8005106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a78      	ldr	r2, [pc, #480]	; (800511c <HAL_I2C_Init+0x280>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0c9b      	lsrs	r3, r3, #18
 8004f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a6a      	ldr	r2, [pc, #424]	; (8005110 <HAL_I2C_Init+0x274>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d802      	bhi.n	8004f70 <HAL_I2C_Init+0xd4>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	e009      	b.n	8004f84 <HAL_I2C_Init+0xe8>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	4a69      	ldr	r2, [pc, #420]	; (8005120 <HAL_I2C_Init+0x284>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	3301      	adds	r3, #1
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	495c      	ldr	r1, [pc, #368]	; (8005110 <HAL_I2C_Init+0x274>)
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	d819      	bhi.n	8004fd8 <HAL_I2C_Init+0x13c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1e59      	subs	r1, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fb8:	400b      	ands	r3, r1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_I2C_Init+0x138>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1e59      	subs	r1, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	e051      	b.n	8005078 <HAL_I2C_Init+0x1dc>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	e04f      	b.n	8005078 <HAL_I2C_Init+0x1dc>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d111      	bne.n	8005004 <HAL_I2C_Init+0x168>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1e58      	subs	r0, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	440b      	add	r3, r1
 8004fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e012      	b.n	800502a <HAL_I2C_Init+0x18e>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1e58      	subs	r0, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	0099      	lsls	r1, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	fbb0 f3f3 	udiv	r3, r0, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	2b00      	cmp	r3, #0
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Init+0x196>
 800502e:	2301      	movs	r3, #1
 8005030:	e022      	b.n	8005078 <HAL_I2C_Init+0x1dc>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10e      	bne.n	8005058 <HAL_I2C_Init+0x1bc>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1e58      	subs	r0, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6859      	ldr	r1, [r3, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	440b      	add	r3, r1
 8005048:	fbb0 f3f3 	udiv	r3, r0, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	e00f      	b.n	8005078 <HAL_I2C_Init+0x1dc>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1e58      	subs	r0, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	0099      	lsls	r1, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	fbb0 f3f3 	udiv	r3, r0, r3
 800506e:	3301      	adds	r3, #1
 8005070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	6809      	ldr	r1, [r1, #0]
 800507c:	4313      	orrs	r3, r2
 800507e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6911      	ldr	r1, [r2, #16]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	4311      	orrs	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	000186a0 	.word	0x000186a0
 8005114:	001e847f 	.word	0x001e847f
 8005118:	003d08ff 	.word	0x003d08ff
 800511c:	431bde83 	.word	0x431bde83
 8005120:	10624dd3 	.word	0x10624dd3

08005124 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	461a      	mov	r2, r3
 8005130:	460b      	mov	r3, r1
 8005132:	817b      	strh	r3, [r7, #10]
 8005134:	4613      	mov	r3, r2
 8005136:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005138:	f7ff fb2e 	bl	8004798 <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b20      	cmp	r3, #32
 8005148:	f040 80e0 	bne.w	800530c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2319      	movs	r3, #25
 8005152:	2201      	movs	r2, #1
 8005154:	4970      	ldr	r1, [pc, #448]	; (8005318 <HAL_I2C_Master_Transmit+0x1f4>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f001 fdda 	bl	8006d10 <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	e0d3      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_I2C_Master_Transmit+0x50>
 8005170:	2302      	movs	r3, #2
 8005172:	e0cc      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b01      	cmp	r3, #1
 8005188:	d007      	beq.n	800519a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2221      	movs	r2, #33	; 0x21
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2210      	movs	r2, #16
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	893a      	ldrh	r2, [r7, #8]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a50      	ldr	r2, [pc, #320]	; (800531c <HAL_I2C_Master_Transmit+0x1f8>)
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051dc:	8979      	ldrh	r1, [r7, #10]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 fc6a 	bl	8006abc <I2C_MasterRequestWrite>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e08d      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005208:	e066      	b.n	80052d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f001 fe54 	bl	8006ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e06b      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b04      	cmp	r3, #4
 8005272:	d11b      	bne.n	80052ac <HAL_I2C_Master_Transmit+0x188>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	6a39      	ldr	r1, [r7, #32]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f001 fe44 	bl	8006f3e <I2C_WaitOnBTFFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d107      	bne.n	80052d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e01a      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d194      	bne.n	800520a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	00100002 	.word	0x00100002
 800531c:	ffff0000 	.word	0xffff0000

08005320 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005340:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b10      	cmp	r3, #16
 800534e:	d003      	beq.n	8005358 <HAL_I2C_EV_IRQHandler+0x38>
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	f040 80c1 	bne.w	80054da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <HAL_I2C_EV_IRQHandler+0x6e>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005378:	d003      	beq.n	8005382 <HAL_I2C_EV_IRQHandler+0x62>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005380:	d101      	bne.n	8005386 <HAL_I2C_EV_IRQHandler+0x66>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_I2C_EV_IRQHandler+0x68>
 8005386:	2300      	movs	r3, #0
 8005388:	2b01      	cmp	r3, #1
 800538a:	f000 8132 	beq.w	80055f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x92>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	0a5b      	lsrs	r3, r3, #9
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 fe6b 	bl	8007080 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd6f 	bl	8005e8e <I2C_Master_SB>
 80053b0:	e092      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fde4 	bl	8005f98 <I2C_Master_ADD10>
 80053d0:	e082      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0a5b      	lsrs	r3, r3, #9
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fdfd 	bl	8005fea <I2C_Master_ADDR>
 80053f0:	e072      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03b      	beq.n	8005476 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	f000 80f3 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00f      	beq.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9e9 	bl	800580c <I2C_MasterTransmit_TXE>
 800543a:	e04d      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80d6 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	0a5b      	lsrs	r3, r3, #9
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80cf 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b21      	cmp	r3, #33	; 0x21
 800545c:	d103      	bne.n	8005466 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa70 	bl	8005944 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005464:	e0c7      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	f040 80c4 	bne.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fade 	bl	8005a30 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005474:	e0bf      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	f000 80b7 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	0a9b      	lsrs	r3, r3, #10
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb53 	bl	8005b58 <I2C_MasterReceive_RXNE>
 80054b2:	e011      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 809a 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	0a5b      	lsrs	r3, r3, #9
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8093 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbf2 	bl	8005cba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d6:	e08e      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054d8:	e08d      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e007      	b.n	80054fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x20e>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	0a5b      	lsrs	r3, r3, #9
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 ffab 	bl	8006482 <I2C_Slave_ADDR>
 800552c:	e066      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x22e>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	0a5b      	lsrs	r3, r3, #9
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 ffe6 	bl	8006518 <I2C_Slave_STOPF>
 800554c:	e056      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	2b21      	cmp	r3, #33	; 0x21
 8005552:	d002      	beq.n	800555a <HAL_I2C_EV_IRQHandler+0x23a>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	2b29      	cmp	r3, #41	; 0x29
 8005558:	d125      	bne.n	80055a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	09db      	lsrs	r3, r3, #7
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	0a9b      	lsrs	r3, r3, #10
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fec3 	bl	800630a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005584:	e039      	b.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d033      	beq.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	0a5b      	lsrs	r3, r3, #9
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02d      	beq.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fef0 	bl	8006384 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a4:	e029      	b.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	099b      	lsrs	r3, r3, #6
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	0a9b      	lsrs	r3, r3, #10
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fefa 	bl	80063c4 <I2C_SlaveReceive_RXNE>
 80055d0:	e014      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00e      	beq.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 ff28 	bl	8006440 <I2C_SlaveReceive_BTF>
 80055f0:	e004      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	; 0x28
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <HAL_I2C_ER_IRQHandler+0x4e>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800564e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	0a5b      	lsrs	r3, r3, #9
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <HAL_I2C_ER_IRQHandler+0x78>
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005678:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	0a9b      	lsrs	r3, r3, #10
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d03f      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0x104>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d039      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005692:	7efb      	ldrb	r3, [r7, #27]
 8005694:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056ac:	7ebb      	ldrb	r3, [r7, #26]
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d112      	bne.n	80056d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <HAL_I2C_ER_IRQHandler+0xd6>
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	2b21      	cmp	r3, #33	; 0x21
 80056bc:	d008      	beq.n	80056d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	2b29      	cmp	r3, #41	; 0x29
 80056c2:	d005      	beq.n	80056d0 <HAL_I2C_ER_IRQHandler+0xce>
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	2b28      	cmp	r3, #40	; 0x28
 80056c8:	d106      	bne.n	80056d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b21      	cmp	r3, #33	; 0x21
 80056ce:	d103      	bne.n	80056d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 f851 	bl	8006778 <I2C_Slave_AF>
 80056d6:	e016      	b.n	8005706 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	f043 0304 	orr.w	r3, r3, #4
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056ea:	7efb      	ldrb	r3, [r7, #27]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d002      	beq.n	80056f6 <HAL_I2C_ER_IRQHandler+0xf4>
 80056f0:	7efb      	ldrb	r3, [r7, #27]
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d107      	bne.n	8005706 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005704:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	0adb      	lsrs	r3, r3, #11
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <HAL_I2C_ER_IRQHandler+0x12e>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800572e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 f888 	bl	8006858 <I2C_ITError>
  }
}
 8005748:	bf00      	nop
 800574a:	3728      	adds	r7, #40	; 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
 80057a4:	4613      	mov	r3, r2
 80057a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005822:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d150      	bne.n	80058d4 <I2C_MasterTransmit_TXE+0xc8>
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b21      	cmp	r3, #33	; 0x21
 8005836:	d14d      	bne.n	80058d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d01d      	beq.n	800587a <I2C_MasterTransmit_TXE+0x6e>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b20      	cmp	r3, #32
 8005842:	d01a      	beq.n	800587a <I2C_MasterTransmit_TXE+0x6e>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800584a:	d016      	beq.n	800587a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800585a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2211      	movs	r2, #17
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff6c 	bl	8005750 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005878:	e060      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005888:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005898:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d107      	bne.n	80058c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ff81 	bl	80057c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c2:	e03b      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ff3f 	bl	8005750 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058d2:	e033      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b21      	cmp	r3, #33	; 0x21
 80058d8:	d005      	beq.n	80058e6 <I2C_MasterTransmit_TXE+0xda>
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d12d      	bne.n	800593c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b22      	cmp	r3, #34	; 0x22
 80058e4:	d12a      	bne.n	800593c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005900:	e01c      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d103      	bne.n	8005916 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f88e 	bl	8005a30 <I2C_MemoryTransmit_TXE_BTF>
}
 8005914:	e012      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800593a:	e7ff      	b.n	800593c <I2C_MasterTransmit_TXE+0x130>
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b21      	cmp	r3, #33	; 0x21
 800595c:	d164      	bne.n	8005a28 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d012      	beq.n	800598e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800598c:	e04c      	b.n	8005a28 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d01d      	beq.n	80059d0 <I2C_MasterTransmit_BTF+0x8c>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b20      	cmp	r3, #32
 8005998:	d01a      	beq.n	80059d0 <I2C_MasterTransmit_BTF+0x8c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059a0:	d016      	beq.n	80059d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2211      	movs	r2, #17
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fec1 	bl	8005750 <HAL_I2C_MasterTxCpltCallback>
}
 80059ce:	e02b      	b.n	8005a28 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d107      	bne.n	8005a1a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fed6 	bl	80057c4 <HAL_I2C_MemTxCpltCallback>
}
 8005a18:	e006      	b.n	8005a28 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fe94 	bl	8005750 <HAL_I2C_MasterTxCpltCallback>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11d      	bne.n	8005a84 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10b      	bne.n	8005a68 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005a66:	e073      	b.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	121b      	asrs	r3, r3, #8
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a82:	e065      	b.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10b      	bne.n	8005aa4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005aa2:	e055      	b.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d151      	bne.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b22      	cmp	r3, #34	; 0x22
 8005ab0:	d10d      	bne.n	8005ace <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005acc:	e040      	b.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b21      	cmp	r3, #33	; 0x21
 8005adc:	d112      	bne.n	8005b04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b02:	e025      	b.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d120      	bne.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b21      	cmp	r3, #33	; 0x21
 8005b12:	d11d      	bne.n	8005b50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b22:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fe3a 	bl	80057c4 <HAL_I2C_MemTxCpltCallback>
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b22      	cmp	r3, #34	; 0x22
 8005b6a:	f040 80a2 	bne.w	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d921      	bls.n	8005bc0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	f040 8082 	bne.w	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005bbe:	e078      	b.n	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d074      	beq.n	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d002      	beq.n	8005bd4 <I2C_MasterReceive_RXNE+0x7c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d16e      	bne.n	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 f9f3 	bl	8006fc0 <I2C_WaitOnSTOPRequestThroughIT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d142      	bne.n	8005c66 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bfe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d10a      	bne.n	8005c50 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff fdc4 	bl	80057d6 <HAL_I2C_MemRxCpltCallback>
}
 8005c4e:	e030      	b.n	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2212      	movs	r2, #18
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fd7f 	bl	8005762 <HAL_I2C_MasterRxCpltCallback>
}
 8005c64:	e025      	b.n	8005cb2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fd9b 	bl	80057e8 <HAL_I2C_ErrorCallback>
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d11b      	bne.n	8005d0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d08:	e0bd      	b.n	8005e86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d129      	bne.n	8005d68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d00a      	beq.n	8005d40 <I2C_MasterReceive_BTF+0x86>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d007      	beq.n	8005d40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d66:	e08e      	b.n	8005e86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d176      	bne.n	8005e60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <I2C_MasterReceive_BTF+0xc4>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d108      	bne.n	8005d90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e019      	b.n	8005dc4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d002      	beq.n	8005d9c <I2C_MasterReceive_BTF+0xe2>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d108      	bne.n	8005dae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e00a      	b.n	8005dc4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d007      	beq.n	8005dc4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d10a      	bne.n	8005e4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fcc7 	bl	80057d6 <HAL_I2C_MemRxCpltCallback>
}
 8005e48:	e01d      	b.n	8005e86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2212      	movs	r2, #18
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fc82 	bl	8005762 <HAL_I2C_MasterRxCpltCallback>
}
 8005e5e:	e012      	b.n	8005e86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d117      	bne.n	8005ed2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ebc:	e067      	b.n	8005f8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	611a      	str	r2, [r3, #16]
}
 8005ed0:	e05d      	b.n	8005f8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eda:	d133      	bne.n	8005f44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b21      	cmp	r3, #33	; 0x21
 8005ee6:	d109      	bne.n	8005efc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef8:	611a      	str	r2, [r3, #16]
 8005efa:	e008      	b.n	8005f0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <I2C_Master_SB+0x92>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d108      	bne.n	8005f32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d032      	beq.n	8005f8e <I2C_Master_SB+0x100>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02d      	beq.n	8005f8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f40:	605a      	str	r2, [r3, #4]
}
 8005f42:	e024      	b.n	8005f8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10e      	bne.n	8005f6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	11db      	asrs	r3, r3, #7
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0306 	and.w	r3, r3, #6
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f063 030f 	orn	r3, r3, #15
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]
}
 8005f68:	e011      	b.n	8005f8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10d      	bne.n	8005f8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	11db      	asrs	r3, r3, #7
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0306 	and.w	r3, r3, #6
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f063 030e 	orn	r3, r3, #14
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	611a      	str	r2, [r3, #16]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <I2C_Master_ADD10+0x26>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d108      	bne.n	8005fd0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <I2C_Master_ADD10+0x48>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fde:	605a      	str	r2, [r3, #4]
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b091      	sub	sp, #68	; 0x44
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b22      	cmp	r3, #34	; 0x22
 8006012:	f040 8169 	bne.w	80062e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10f      	bne.n	800603e <I2C_Master_ADDR+0x54>
 800601e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d10b      	bne.n	800603e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006026:	2300      	movs	r3, #0
 8006028:	633b      	str	r3, [r7, #48]	; 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	e160      	b.n	8006300 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11d      	bne.n	8006082 <I2C_Master_ADDR+0x98>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800604e:	d118      	bne.n	8006082 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006050:	2300      	movs	r3, #0
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006074:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	651a      	str	r2, [r3, #80]	; 0x50
 8006080:	e13e      	b.n	8006300 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d113      	bne.n	80060b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608c:	2300      	movs	r3, #0
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	e115      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 808a 	bne.w	80061d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060c6:	d137      	bne.n	8006138 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e6:	d113      	bne.n	8006110 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f8:	2300      	movs	r3, #0
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	e0e7      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e0d3      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b08      	cmp	r3, #8
 800613c:	d02e      	beq.n	800619c <I2C_Master_ADDR+0x1b2>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b20      	cmp	r3, #32
 8006142:	d02b      	beq.n	800619c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	2b12      	cmp	r3, #18
 8006148:	d102      	bne.n	8006150 <I2C_Master_ADDR+0x166>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2b01      	cmp	r3, #1
 800614e:	d125      	bne.n	800619c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	2b04      	cmp	r3, #4
 8006154:	d00e      	beq.n	8006174 <I2C_Master_ADDR+0x18a>
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b02      	cmp	r3, #2
 800615a:	d00b      	beq.n	8006174 <I2C_Master_ADDR+0x18a>
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	2b10      	cmp	r3, #16
 8006160:	d008      	beq.n	8006174 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e007      	b.n	8006184 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006182:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	e0a1      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	e085      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d14d      	bne.n	800627a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d016      	beq.n	8006212 <I2C_Master_ADDR+0x228>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d013      	beq.n	8006212 <I2C_Master_ADDR+0x228>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d010      	beq.n	8006212 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006220:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006230:	d117      	bne.n	8006262 <I2C_Master_ADDR+0x278>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006238:	d00b      	beq.n	8006252 <I2C_Master_ADDR+0x268>
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	2b01      	cmp	r3, #1
 800623e:	d008      	beq.n	8006252 <I2C_Master_ADDR+0x268>
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2b08      	cmp	r3, #8
 8006244:	d005      	beq.n	8006252 <I2C_Master_ADDR+0x268>
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	2b10      	cmp	r3, #16
 800624a:	d002      	beq.n	8006252 <I2C_Master_ADDR+0x268>
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	2b20      	cmp	r3, #32
 8006250:	d107      	bne.n	8006262 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006260:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	e032      	b.n	80062e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006298:	d117      	bne.n	80062ca <I2C_Master_ADDR+0x2e0>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a0:	d00b      	beq.n	80062ba <I2C_Master_ADDR+0x2d0>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d008      	beq.n	80062ba <I2C_Master_ADDR+0x2d0>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d005      	beq.n	80062ba <I2C_Master_ADDR+0x2d0>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d002      	beq.n	80062ba <I2C_Master_ADDR+0x2d0>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d107      	bne.n	80062ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80062e6:	e00b      	b.n	8006300 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	e7ff      	b.n	8006300 <I2C_Master_ADDR+0x316>
 8006300:	bf00      	nop
 8006302:	3744      	adds	r7, #68	; 0x44
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02b      	beq.n	800637c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d114      	bne.n	800637c <I2C_SlaveTransmit_TXE+0x72>
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	2b29      	cmp	r3, #41	; 0x29
 8006356:	d111      	bne.n	800637c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006366:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2221      	movs	r2, #33	; 0x21
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2228      	movs	r2, #40	; 0x28
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff f9fc 	bl	8005774 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d02c      	beq.n	8006438 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d114      	bne.n	8006438 <I2C_SlaveReceive_RXNE+0x74>
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b2a      	cmp	r3, #42	; 0x2a
 8006412:	d111      	bne.n	8006438 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2222      	movs	r2, #34	; 0x22
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2228      	movs	r2, #40	; 0x28
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff f9a7 	bl	8005786 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d012      	beq.n	8006478 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr

08006482 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800649c:	2b28      	cmp	r3, #40	; 0x28
 800649e:	d127      	bne.n	80064f0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ae:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	089b      	lsrs	r3, r3, #2
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	81bb      	strh	r3, [r7, #12]
 80064d2:	e002      	b.n	80064da <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80064e2:	89ba      	ldrh	r2, [r7, #12]
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff f955 	bl	8005798 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80064ee:	e00e      	b.n	800650e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60bb      	str	r3, [r7, #8]
 8006504:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006526:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006536:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006574:	d172      	bne.n	800665c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b22      	cmp	r3, #34	; 0x22
 800657a:	d002      	beq.n	8006582 <I2C_Slave_STOPF+0x6a>
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b2a      	cmp	r3, #42	; 0x2a
 8006580:	d135      	bne.n	80065ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fa66 	bl	8004a8c <HAL_DMA_GetState>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d049      	beq.n	800665a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	4a69      	ldr	r2, [pc, #420]	; (8006770 <I2C_Slave_STOPF+0x258>)
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fa19 	bl	8004a0a <HAL_DMA_Abort_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d03d      	beq.n	800665a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065ec:	e035      	b.n	800665a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f043 0204 	orr.w	r2, r3, #4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006620:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fa30 	bl	8004a8c <HAL_DMA_GetState>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d014      	beq.n	800665c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	4a4e      	ldr	r2, [pc, #312]	; (8006770 <I2C_Slave_STOPF+0x258>)
 8006638:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f9e3 	bl	8004a0a <HAL_DMA_Abort_IT>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	e000      	b.n	800665c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800665a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03e      	beq.n	80066e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d112      	bne.n	800669a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d112      	bne.n	80066ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	f043 0204 	orr.w	r2, r3, #4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8b3 	bl	8006858 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80066f2:	e039      	b.n	8006768 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b2a      	cmp	r3, #42	; 0x2a
 80066f8:	d109      	bne.n	800670e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2228      	movs	r2, #40	; 0x28
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f83c 	bl	8005786 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b28      	cmp	r3, #40	; 0x28
 8006718:	d111      	bne.n	800673e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a15      	ldr	r2, [pc, #84]	; (8006774 <I2C_Slave_STOPF+0x25c>)
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff f83b 	bl	80057b2 <HAL_I2C_ListenCpltCallback>
}
 800673c:	e014      	b.n	8006768 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	2b22      	cmp	r3, #34	; 0x22
 8006744:	d002      	beq.n	800674c <I2C_Slave_STOPF+0x234>
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b22      	cmp	r3, #34	; 0x22
 800674a:	d10d      	bne.n	8006768 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff f80f 	bl	8005786 <HAL_I2C_SlaveRxCpltCallback>
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	08006bc1 	.word	0x08006bc1
 8006774:	ffff0000 	.word	0xffff0000

08006778 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d002      	beq.n	800679a <I2C_Slave_AF+0x22>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b20      	cmp	r3, #32
 8006798:	d129      	bne.n	80067ee <I2C_Slave_AF+0x76>
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b28      	cmp	r3, #40	; 0x28
 800679e:	d126      	bne.n	80067ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <I2C_Slave_AF+0xdc>)
 80067a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe ffe3 	bl	80057b2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80067ec:	e02e      	b.n	800684c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b21      	cmp	r3, #33	; 0x21
 80067f2:	d126      	bne.n	8006842 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a17      	ldr	r2, [pc, #92]	; (8006854 <I2C_Slave_AF+0xdc>)
 80067f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2221      	movs	r2, #33	; 0x21
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800681e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006828:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006838:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fe ff9a 	bl	8005774 <HAL_I2C_SlaveTxCpltCallback>
}
 8006840:	e004      	b.n	800684c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800684a:	615a      	str	r2, [r3, #20]
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	ffff0000 	.word	0xffff0000

08006858 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	2b10      	cmp	r3, #16
 8006874:	d002      	beq.n	800687c <I2C_ITError+0x24>
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d10a      	bne.n	8006892 <I2C_ITError+0x3a>
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b22      	cmp	r3, #34	; 0x22
 8006880:	d107      	bne.n	8006892 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006890:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006898:	2b28      	cmp	r3, #40	; 0x28
 800689a:	d107      	bne.n	80068ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2228      	movs	r2, #40	; 0x28
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068aa:	e015      	b.n	80068d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ba:	d00a      	beq.n	80068d2 <I2C_ITError+0x7a>
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b60      	cmp	r3, #96	; 0x60
 80068c0:	d007      	beq.n	80068d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e6:	d162      	bne.n	80069ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d020      	beq.n	8006948 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	4a6a      	ldr	r2, [pc, #424]	; (8006ab4 <I2C_ITError+0x25c>)
 800690c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe f879 	bl	8004a0a <HAL_DMA_Abort_IT>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8089 	beq.w	8006a32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006942:	4610      	mov	r0, r2
 8006944:	4798      	blx	r3
 8006946:	e074      	b.n	8006a32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	4a59      	ldr	r2, [pc, #356]	; (8006ab4 <I2C_ITError+0x25c>)
 800694e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f858 	bl	8004a0a <HAL_DMA_Abort_IT>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d068      	beq.n	8006a32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d10b      	bne.n	8006986 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	e041      	b.n	8006a32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b60      	cmp	r3, #96	; 0x60
 80069b8:	d125      	bne.n	8006a06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d10b      	bne.n	80069ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fe fefb 	bl	80057fa <HAL_I2C_AbortCpltCallback>
 8006a04:	e015      	b.n	8006a32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d10b      	bne.n	8006a2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe fedb 	bl	80057e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10e      	bne.n	8006a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d113      	bne.n	8006aac <I2C_ITError+0x254>
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b28      	cmp	r3, #40	; 0x28
 8006a88:	d110      	bne.n	8006aac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <I2C_ITError+0x260>)
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fe fe83 	bl	80057b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08006bc1 	.word	0x08006bc1
 8006ab8:	ffff0000 	.word	0xffff0000

08006abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d006      	beq.n	8006ae6 <I2C_MasterRequestWrite+0x2a>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <I2C_MasterRequestWrite+0x2a>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ae4:	d108      	bne.n	8006af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e00b      	b.n	8006b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	2b12      	cmp	r3, #18
 8006afe:	d107      	bne.n	8006b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f8f7 	bl	8006d10 <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d103      	bne.n	8006b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e035      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b4c:	d108      	bne.n	8006b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b5c:	611a      	str	r2, [r3, #16]
 8006b5e:	e01b      	b.n	8006b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b60:	897b      	ldrh	r3, [r7, #10]
 8006b62:	11db      	asrs	r3, r3, #7
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0306 	and.w	r3, r3, #6
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f063 030f 	orn	r3, r3, #15
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <I2C_MasterRequestWrite+0xfc>)
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f91d 	bl	8006dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e010      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <I2C_MasterRequestWrite+0x100>)
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f90d 	bl	8006dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	00010008 	.word	0x00010008
 8006bbc:	00010002 	.word	0x00010002

08006bc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bda:	4b4b      	ldr	r3, [pc, #300]	; (8006d08 <I2C_DMAAbort+0x148>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <I2C_DMAAbort+0x14c>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	0a1a      	lsrs	r2, r3, #8
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	00da      	lsls	r2, r3, #3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006c06:	e00a      	b.n	8006c1e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1c:	d0ea      	beq.n	8006bf4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2200      	movs	r2, #0
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	2200      	movs	r2, #0
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	2200      	movs	r2, #0
 8006c72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b60      	cmp	r3, #96	; 0x60
 8006c8e:	d10e      	bne.n	8006cae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ca6:	6978      	ldr	r0, [r7, #20]
 8006ca8:	f7fe fda7 	bl	80057fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cac:	e027      	b.n	8006cfe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cae:	7cfb      	ldrb	r3, [r7, #19]
 8006cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cb4:	2b28      	cmp	r3, #40	; 0x28
 8006cb6:	d117      	bne.n	8006ce8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2228      	movs	r2, #40	; 0x28
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ce6:	e007      	b.n	8006cf8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006cf8:	6978      	ldr	r0, [r7, #20]
 8006cfa:	f7fe fd75 	bl	80057e8 <HAL_I2C_ErrorCallback>
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200000bc 	.word	0x200000bc
 8006d0c:	14f8b589 	.word	0x14f8b589

08006d10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d20:	e025      	b.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d021      	beq.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2a:	f7fd fd35 	bl	8004798 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d116      	bne.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f043 0220 	orr.w	r2, r3, #32
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e023      	b.n	8006db6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	0c1b      	lsrs	r3, r3, #16
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d10d      	bne.n	8006d94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bf0c      	ite	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	2300      	movne	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	e00c      	b.n	8006dae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf0c      	ite	eq
 8006da6:	2301      	moveq	r3, #1
 8006da8:	2300      	movne	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d0b6      	beq.n	8006d22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dcc:	e051      	b.n	8006e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d123      	bne.n	8006e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006df6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f043 0204 	orr.w	r2, r3, #4
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e046      	b.n	8006eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d021      	beq.n	8006e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fd fcb3 	bl	8004798 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d116      	bne.n	8006e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f043 0220 	orr.w	r2, r3, #32
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e020      	b.n	8006eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10c      	bne.n	8006e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	43da      	mvns	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf14      	ite	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	2300      	moveq	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	e00b      	b.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	43da      	mvns	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d18d      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ec8:	e02d      	b.n	8006f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 f8aa 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e02d      	b.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d021      	beq.n	8006f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee2:	f7fd fc59 	bl	8004798 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d116      	bne.n	8006f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e007      	b.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f30:	2b80      	cmp	r3, #128	; 0x80
 8006f32:	d1ca      	bne.n	8006eca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f4a:	e02d      	b.n	8006fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f869 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e02d      	b.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d021      	beq.n	8006fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f64:	f7fd fc18 	bl	8004798 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d302      	bcc.n	8006f7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d116      	bne.n	8006fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f043 0220 	orr.w	r2, r3, #32
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e007      	b.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d1ca      	bne.n	8006f4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	08db      	lsrs	r3, r3, #3
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	0a1a      	lsrs	r2, r3, #8
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e008      	b.n	8007010 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d0e9      	beq.n	8006fe2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	200000bc 	.word	0x200000bc
 8007020:	14f8b589 	.word	0x14f8b589

08007024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703a:	d11b      	bne.n	8007074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007090:	d103      	bne.n	800709a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007098:	e007      	b.n	80070aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80070a2:	d102      	bne.n	80070aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2208      	movs	r2, #8
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e31d      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c6:	4b94      	ldr	r3, [pc, #592]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d0:	4b91      	ldr	r3, [pc, #580]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d07b      	beq.n	80071de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d006      	beq.n	80070fa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b0c      	cmp	r3, #12
 80070f0:	d10f      	bne.n	8007112 <HAL_RCC_OscConfig+0x5e>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d10b      	bne.n	8007112 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070fa:	4b87      	ldr	r3, [pc, #540]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d06a      	beq.n	80071dc <HAL_RCC_OscConfig+0x128>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d166      	bne.n	80071dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e2f7      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d106      	bne.n	8007128 <HAL_RCC_OscConfig+0x74>
 800711a:	4b7f      	ldr	r3, [pc, #508]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a7e      	ldr	r2, [pc, #504]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	e02d      	b.n	8007184 <HAL_RCC_OscConfig+0xd0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10c      	bne.n	800714a <HAL_RCC_OscConfig+0x96>
 8007130:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a78      	ldr	r2, [pc, #480]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4b76      	ldr	r3, [pc, #472]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a75      	ldr	r2, [pc, #468]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e01c      	b.n	8007184 <HAL_RCC_OscConfig+0xd0>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b05      	cmp	r3, #5
 8007150:	d10c      	bne.n	800716c <HAL_RCC_OscConfig+0xb8>
 8007152:	4b71      	ldr	r3, [pc, #452]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a70      	ldr	r2, [pc, #448]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b6e      	ldr	r3, [pc, #440]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a6d      	ldr	r2, [pc, #436]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e00b      	b.n	8007184 <HAL_RCC_OscConfig+0xd0>
 800716c:	4b6a      	ldr	r3, [pc, #424]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a69      	ldr	r2, [pc, #420]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	4b67      	ldr	r3, [pc, #412]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a66      	ldr	r2, [pc, #408]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800717e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d013      	beq.n	80071b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7fd fb04 	bl	8004798 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007194:	f7fd fb00 	bl	8004798 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	; 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e2ad      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a6:	4b5c      	ldr	r3, [pc, #368]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCC_OscConfig+0xe0>
 80071b2:	e014      	b.n	80071de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fd faf0 	bl	8004798 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071bc:	f7fd faec 	bl	8004798 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b64      	cmp	r3, #100	; 0x64
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e299      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071ce:	4b52      	ldr	r3, [pc, #328]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x108>
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d05a      	beq.n	80072a0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d119      	bne.n	800722a <HAL_RCC_OscConfig+0x176>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d116      	bne.n	800722a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fc:	4b46      	ldr	r3, [pc, #280]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_OscConfig+0x160>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d001      	beq.n	8007214 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e276      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007214:	4b40      	ldr	r3, [pc, #256]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	493d      	ldr	r1, [pc, #244]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007224:	4313      	orrs	r3, r2
 8007226:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007228:	e03a      	b.n	80072a0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d020      	beq.n	8007274 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007232:	4b3a      	ldr	r3, [pc, #232]	; (800731c <HAL_RCC_OscConfig+0x268>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007238:	f7fd faae 	bl	8004798 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007240:	f7fd faaa 	bl	8004798 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e257      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007252:	4b31      	ldr	r3, [pc, #196]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725e:	4b2e      	ldr	r3, [pc, #184]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	492a      	ldr	r1, [pc, #168]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 800726e:	4313      	orrs	r3, r2
 8007270:	604b      	str	r3, [r1, #4]
 8007272:	e015      	b.n	80072a0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007274:	4b29      	ldr	r3, [pc, #164]	; (800731c <HAL_RCC_OscConfig+0x268>)
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727a:	f7fd fa8d 	bl	8004798 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007280:	e008      	b.n	8007294 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007282:	f7fd fa89 	bl	8004798 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e236      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f0      	bne.n	8007282 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80b8 	beq.w	800741e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d170      	bne.n	8007396 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072b4:	4b18      	ldr	r3, [pc, #96]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCC_OscConfig+0x218>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e21a      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80072d8:	429a      	cmp	r2, r3
 80072da:	d921      	bls.n	8007320 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fc7d 	bl	8007be0 <RCC_SetFlashLatencyFromMSIRange>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e208      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4906      	ldr	r1, [pc, #24]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	061b      	lsls	r3, r3, #24
 8007310:	4901      	ldr	r1, [pc, #4]	; (8007318 <HAL_RCC_OscConfig+0x264>)
 8007312:	4313      	orrs	r3, r2
 8007314:	604b      	str	r3, [r1, #4]
 8007316:	e020      	b.n	800735a <HAL_RCC_OscConfig+0x2a6>
 8007318:	40023800 	.word	0x40023800
 800731c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007320:	4b99      	ldr	r3, [pc, #612]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	4996      	ldr	r1, [pc, #600]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 800732e:	4313      	orrs	r3, r2
 8007330:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007332:	4b95      	ldr	r3, [pc, #596]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	061b      	lsls	r3, r3, #24
 8007340:	4991      	ldr	r1, [pc, #580]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007342:	4313      	orrs	r3, r2
 8007344:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fc48 	bl	8007be0 <RCC_SetFlashLatencyFromMSIRange>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e1d3      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	0b5b      	lsrs	r3, r3, #13
 8007360:	3301      	adds	r3, #1
 8007362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800736a:	4a87      	ldr	r2, [pc, #540]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 800736c:	6892      	ldr	r2, [r2, #8]
 800736e:	0912      	lsrs	r2, r2, #4
 8007370:	f002 020f 	and.w	r2, r2, #15
 8007374:	4985      	ldr	r1, [pc, #532]	; (800758c <HAL_RCC_OscConfig+0x4d8>)
 8007376:	5c8a      	ldrb	r2, [r1, r2]
 8007378:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800737a:	4a85      	ldr	r2, [pc, #532]	; (8007590 <HAL_RCC_OscConfig+0x4dc>)
 800737c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800737e:	4b85      	ldr	r3, [pc, #532]	; (8007594 <HAL_RCC_OscConfig+0x4e0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd f9bc 	bl	8004700 <HAL_InitTick>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d045      	beq.n	800741e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	e1b5      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d029      	beq.n	80073f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800739e:	4b7e      	ldr	r3, [pc, #504]	; (8007598 <HAL_RCC_OscConfig+0x4e4>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fd f9f8 	bl	8004798 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073ac:	f7fd f9f4 	bl	8004798 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e1a1      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80073be:	4b72      	ldr	r3, [pc, #456]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073ca:	4b6f      	ldr	r3, [pc, #444]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	496c      	ldr	r1, [pc, #432]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073dc:	4b6a      	ldr	r3, [pc, #424]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	4967      	ldr	r1, [pc, #412]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
 80073f0:	e015      	b.n	800741e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073f2:	4b69      	ldr	r3, [pc, #420]	; (8007598 <HAL_RCC_OscConfig+0x4e4>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f8:	f7fd f9ce 	bl	8004798 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007400:	f7fd f9ca 	bl	8004798 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e177      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d030      	beq.n	800748c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007432:	4b5a      	ldr	r3, [pc, #360]	; (800759c <HAL_RCC_OscConfig+0x4e8>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007438:	f7fd f9ae 	bl	8004798 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007440:	f7fd f9aa 	bl	8004798 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e157      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007452:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x38c>
 800745e:	e015      	b.n	800748c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007460:	4b4e      	ldr	r3, [pc, #312]	; (800759c <HAL_RCC_OscConfig+0x4e8>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007466:	f7fd f997 	bl	8004798 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800746e:	f7fd f993 	bl	8004798 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e140      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007480:	4b41      	ldr	r3, [pc, #260]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f0      	bne.n	800746e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80b5 	beq.w	8007604 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b3a      	ldr	r3, [pc, #232]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10d      	bne.n	80074c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	4b37      	ldr	r3, [pc, #220]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	4a36      	ldr	r2, [pc, #216]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80074b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b4:	6253      	str	r3, [r2, #36]	; 0x24
 80074b6:	4b34      	ldr	r3, [pc, #208]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c2:	2301      	movs	r3, #1
 80074c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c6:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <HAL_RCC_OscConfig+0x4ec>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d118      	bne.n	8007504 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d2:	4b33      	ldr	r3, [pc, #204]	; (80075a0 <HAL_RCC_OscConfig+0x4ec>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a32      	ldr	r2, [pc, #200]	; (80075a0 <HAL_RCC_OscConfig+0x4ec>)
 80074d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074de:	f7fd f95b 	bl	8004798 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e6:	f7fd f957 	bl	8004798 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b64      	cmp	r3, #100	; 0x64
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e104      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f8:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <HAL_RCC_OscConfig+0x4ec>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d106      	bne.n	800751a <HAL_RCC_OscConfig+0x466>
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 800750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007510:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007516:	6353      	str	r3, [r2, #52]	; 0x34
 8007518:	e02d      	b.n	8007576 <HAL_RCC_OscConfig+0x4c2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10c      	bne.n	800753c <HAL_RCC_OscConfig+0x488>
 8007522:	4b19      	ldr	r3, [pc, #100]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800752c:	6353      	str	r3, [r2, #52]	; 0x34
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007538:	6353      	str	r3, [r2, #52]	; 0x34
 800753a:	e01c      	b.n	8007576 <HAL_RCC_OscConfig+0x4c2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b05      	cmp	r3, #5
 8007542:	d10c      	bne.n	800755e <HAL_RCC_OscConfig+0x4aa>
 8007544:	4b10      	ldr	r3, [pc, #64]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 800754a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800754e:	6353      	str	r3, [r2, #52]	; 0x34
 8007550:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6353      	str	r3, [r2, #52]	; 0x34
 800755c:	e00b      	b.n	8007576 <HAL_RCC_OscConfig+0x4c2>
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007568:	6353      	str	r3, [r2, #52]	; 0x34
 800756a:	4b07      	ldr	r3, [pc, #28]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	4a06      	ldr	r2, [pc, #24]	; (8007588 <HAL_RCC_OscConfig+0x4d4>)
 8007570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007574:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d024      	beq.n	80075c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757e:	f7fd f90b 	bl	8004798 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007584:	e019      	b.n	80075ba <HAL_RCC_OscConfig+0x506>
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	0801d12c 	.word	0x0801d12c
 8007590:	200000bc 	.word	0x200000bc
 8007594:	200000c0 	.word	0x200000c0
 8007598:	42470020 	.word	0x42470020
 800759c:	42470680 	.word	0x42470680
 80075a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7fd f8f8 	bl	8004798 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e0a3      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ba:	4b54      	ldr	r3, [pc, #336]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80075bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0ee      	beq.n	80075a4 <HAL_RCC_OscConfig+0x4f0>
 80075c6:	e014      	b.n	80075f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c8:	f7fd f8e6 	bl	8004798 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fd f8e2 	bl	8004798 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e08d      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075e6:	4b49      	ldr	r3, [pc, #292]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ee      	bne.n	80075d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075f2:	7ffb      	ldrb	r3, [r7, #31]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f8:	4b44      	ldr	r3, [pc, #272]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	4a43      	ldr	r2, [pc, #268]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80075fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007602:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d079      	beq.n	8007700 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d056      	beq.n	80076c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b02      	cmp	r3, #2
 8007618:	d13b      	bne.n	8007692 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761a:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <HAL_RCC_OscConfig+0x65c>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007620:	f7fd f8ba 	bl	8004798 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007628:	f7fd f8b6 	bl	8004798 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e063      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763a:	4b34      	ldr	r3, [pc, #208]	; (800770c <HAL_RCC_OscConfig+0x658>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007646:	4b31      	ldr	r3, [pc, #196]	; (800770c <HAL_RCC_OscConfig+0x658>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	4319      	orrs	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	430b      	orrs	r3, r1
 800765e:	492b      	ldr	r1, [pc, #172]	; (800770c <HAL_RCC_OscConfig+0x658>)
 8007660:	4313      	orrs	r3, r2
 8007662:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007664:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <HAL_RCC_OscConfig+0x65c>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800766a:	f7fd f895 	bl	8004798 <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007672:	f7fd f891 	bl	8004798 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e03e      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007684:	4b21      	ldr	r3, [pc, #132]	; (800770c <HAL_RCC_OscConfig+0x658>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f0      	beq.n	8007672 <HAL_RCC_OscConfig+0x5be>
 8007690:	e036      	b.n	8007700 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007692:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <HAL_RCC_OscConfig+0x65c>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007698:	f7fd f87e 	bl	8004798 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fd f87a 	bl	8004798 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e027      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5ec>
 80076be:	e01f      	b.n	8007700 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e01a      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80076cc:	4b0f      	ldr	r3, [pc, #60]	; (800770c <HAL_RCC_OscConfig+0x658>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	429a      	cmp	r2, r3
 80076de:	d10d      	bne.n	80076fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d106      	bne.n	80076fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40023800 	.word	0x40023800
 8007710:	42470060 	.word	0x42470060

08007714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e11a      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007728:	4b8f      	ldr	r3, [pc, #572]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d919      	bls.n	800776a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d105      	bne.n	8007748 <HAL_RCC_ClockConfig+0x34>
 800773c:	4b8a      	ldr	r3, [pc, #552]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a89      	ldr	r2, [pc, #548]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	4b87      	ldr	r3, [pc, #540]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f023 0201 	bic.w	r2, r3, #1
 8007750:	4985      	ldr	r1, [pc, #532]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	4313      	orrs	r3, r2
 8007756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007758:	4b83      	ldr	r3, [pc, #524]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d001      	beq.n	800776a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0f9      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007776:	4b7d      	ldr	r3, [pc, #500]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	497a      	ldr	r1, [pc, #488]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007784:	4313      	orrs	r3, r2
 8007786:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 808e 	beq.w	80078b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d107      	bne.n	80077ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800779e:	4b73      	ldr	r3, [pc, #460]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d121      	bne.n	80077ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e0d7      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d107      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077b6:	4b6d      	ldr	r3, [pc, #436]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d115      	bne.n	80077ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0cb      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d107      	bne.n	80077de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077ce:	4b67      	ldr	r3, [pc, #412]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0bf      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80077de:	4b63      	ldr	r3, [pc, #396]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0b7      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077ee:	4b5f      	ldr	r3, [pc, #380]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 0203 	bic.w	r2, r3, #3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	495c      	ldr	r1, [pc, #368]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007800:	f7fc ffca 	bl	8004798 <HAL_GetTick>
 8007804:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d112      	bne.n	8007834 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800780e:	e00a      	b.n	8007826 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007810:	f7fc ffc2 	bl	8004798 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3288 	movw	r2, #5000	; 0x1388
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e09b      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007826:	4b51      	ldr	r3, [pc, #324]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 030c 	and.w	r3, r3, #12
 800782e:	2b08      	cmp	r3, #8
 8007830:	d1ee      	bne.n	8007810 <HAL_RCC_ClockConfig+0xfc>
 8007832:	e03e      	b.n	80078b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d112      	bne.n	8007862 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800783c:	e00a      	b.n	8007854 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800783e:	f7fc ffab 	bl	8004798 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	4293      	cmp	r3, r2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e084      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007854:	4b45      	ldr	r3, [pc, #276]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d1ee      	bne.n	800783e <HAL_RCC_ClockConfig+0x12a>
 8007860:	e027      	b.n	80078b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d11d      	bne.n	80078a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800786a:	e00a      	b.n	8007882 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800786c:	f7fc ff94 	bl	8004798 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f241 3288 	movw	r2, #5000	; 0x1388
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e06d      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007882:	4b3a      	ldr	r3, [pc, #232]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 030c 	and.w	r3, r3, #12
 800788a:	2b04      	cmp	r3, #4
 800788c:	d1ee      	bne.n	800786c <HAL_RCC_ClockConfig+0x158>
 800788e:	e010      	b.n	80078b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007890:	f7fc ff82 	bl	8004798 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f241 3288 	movw	r2, #5000	; 0x1388
 800789e:	4293      	cmp	r3, r2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e05b      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80078a6:	4b31      	ldr	r3, [pc, #196]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1ee      	bne.n	8007890 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078b2:	4b2d      	ldr	r3, [pc, #180]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d219      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <HAL_RCC_ClockConfig+0x1be>
 80078c6:	4b28      	ldr	r3, [pc, #160]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a27      	ldr	r2, [pc, #156]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078cc:	f043 0304 	orr.w	r3, r3, #4
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	4b25      	ldr	r3, [pc, #148]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f023 0201 	bic.w	r2, r3, #1
 80078da:	4923      	ldr	r1, [pc, #140]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	4313      	orrs	r3, r2
 80078e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e2:	4b21      	ldr	r3, [pc, #132]	; (8007968 <HAL_RCC_ClockConfig+0x254>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e034      	b.n	800795e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007900:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4917      	ldr	r1, [pc, #92]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	490f      	ldr	r1, [pc, #60]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007932:	f000 f823 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007936:	4602      	mov	r2, r0
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <HAL_RCC_ClockConfig+0x258>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	091b      	lsrs	r3, r3, #4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	490b      	ldr	r1, [pc, #44]	; (8007970 <HAL_RCC_ClockConfig+0x25c>)
 8007944:	5ccb      	ldrb	r3, [r1, r3]
 8007946:	fa22 f303 	lsr.w	r3, r2, r3
 800794a:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x260>)
 800794c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800794e:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <HAL_RCC_ClockConfig+0x264>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc fed4 	bl	8004700 <HAL_InitTick>
 8007958:	4603      	mov	r3, r0
 800795a:	72fb      	strb	r3, [r7, #11]

  return status;
 800795c:	7afb      	ldrb	r3, [r7, #11]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40023c00 	.word	0x40023c00
 800796c:	40023800 	.word	0x40023800
 8007970:	0801d12c 	.word	0x0801d12c
 8007974:	200000bc 	.word	0x200000bc
 8007978:	200000c0 	.word	0x200000c0

0800797c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007980:	b092      	sub	sp, #72	; 0x48
 8007982:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007984:	4b79      	ldr	r3, [pc, #484]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800798a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798c:	f003 030c 	and.w	r3, r3, #12
 8007990:	2b0c      	cmp	r3, #12
 8007992:	d00d      	beq.n	80079b0 <HAL_RCC_GetSysClockFreq+0x34>
 8007994:	2b0c      	cmp	r3, #12
 8007996:	f200 80d5 	bhi.w	8007b44 <HAL_RCC_GetSysClockFreq+0x1c8>
 800799a:	2b04      	cmp	r3, #4
 800799c:	d002      	beq.n	80079a4 <HAL_RCC_GetSysClockFreq+0x28>
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d003      	beq.n	80079aa <HAL_RCC_GetSysClockFreq+0x2e>
 80079a2:	e0cf      	b.n	8007b44 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a4:	4b72      	ldr	r3, [pc, #456]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80079a6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80079a8:	e0da      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079aa:	4b72      	ldr	r3, [pc, #456]	; (8007b74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80079ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80079ae:	e0d7      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	0c9b      	lsrs	r3, r3, #18
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	4b6f      	ldr	r3, [pc, #444]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80079ba:	5c9b      	ldrb	r3, [r3, r2]
 80079bc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	0d9b      	lsrs	r3, r3, #22
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	3301      	adds	r3, #1
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ca:	4b68      	ldr	r3, [pc, #416]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d05d      	beq.n	8007a92 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	2200      	movs	r2, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	4611      	mov	r1, r2
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	4622      	mov	r2, r4
 80079e4:	462b      	mov	r3, r5
 80079e6:	f04f 0000 	mov.w	r0, #0
 80079ea:	f04f 0100 	mov.w	r1, #0
 80079ee:	0159      	lsls	r1, r3, #5
 80079f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079f4:	0150      	lsls	r0, r2, #5
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4621      	mov	r1, r4
 80079fc:	1a51      	subs	r1, r2, r1
 80079fe:	6139      	str	r1, [r7, #16]
 8007a00:	4629      	mov	r1, r5
 8007a02:	eb63 0301 	sbc.w	r3, r3, r1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a14:	4659      	mov	r1, fp
 8007a16:	018b      	lsls	r3, r1, #6
 8007a18:	4651      	mov	r1, sl
 8007a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a1e:	4651      	mov	r1, sl
 8007a20:	018a      	lsls	r2, r1, #6
 8007a22:	46d4      	mov	ip, sl
 8007a24:	ebb2 080c 	subs.w	r8, r2, ip
 8007a28:	4659      	mov	r1, fp
 8007a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a42:	4690      	mov	r8, r2
 8007a44:	4699      	mov	r9, r3
 8007a46:	4623      	mov	r3, r4
 8007a48:	eb18 0303 	adds.w	r3, r8, r3
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	462b      	mov	r3, r5
 8007a50:	eb49 0303 	adc.w	r3, r9, r3
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a62:	4629      	mov	r1, r5
 8007a64:	024b      	lsls	r3, r1, #9
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8007a70:	4601      	mov	r1, r0
 8007a72:	024a      	lsls	r2, r1, #9
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a84:	f7f8 fb82 	bl	800018c <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a90:	e055      	b.n	8007b3e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2200      	movs	r2, #0
 8007a96:	623b      	str	r3, [r7, #32]
 8007a98:	627a      	str	r2, [r7, #36]	; 0x24
 8007a9a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	0159      	lsls	r1, r3, #5
 8007aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab0:	0150      	lsls	r0, r2, #5
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	46c4      	mov	ip, r8
 8007ab8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	468c      	mov	ip, r1
 8007ac2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ad2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ad6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ada:	ebb2 040a 	subs.w	r4, r2, sl
 8007ade:	eb63 050b 	sbc.w	r5, r3, fp
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	00eb      	lsls	r3, r5, #3
 8007aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007af0:	00e2      	lsls	r2, r4, #3
 8007af2:	4614      	mov	r4, r2
 8007af4:	461d      	mov	r5, r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	18e3      	adds	r3, r4, r3
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	460b      	mov	r3, r1
 8007afe:	eb45 0303 	adc.w	r3, r5, r3
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b10:	4629      	mov	r1, r5
 8007b12:	028b      	lsls	r3, r1, #10
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	4604      	mov	r4, r0
 8007b1a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007b1e:	4601      	mov	r1, r0
 8007b20:	028a      	lsls	r2, r1, #10
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	2200      	movs	r2, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	61fa      	str	r2, [r7, #28]
 8007b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b32:	f7f8 fb2b 	bl	800018c <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8007b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007b42:	e00d      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	0b5b      	lsrs	r3, r3, #13
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	3301      	adds	r3, #1
 8007b54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3748      	adds	r7, #72	; 0x48
 8007b66:	46bd      	mov	sp, r7
 8007b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	00f42400 	.word	0x00f42400
 8007b74:	007a1200 	.word	0x007a1200
 8007b78:	0801d120 	.word	0x0801d120

08007b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8007b82:	681b      	ldr	r3, [r3, #0]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	200000bc 	.word	0x200000bc

08007b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b94:	f7ff fff2 	bl	8007b7c <HAL_RCC_GetHCLKFreq>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	0a1b      	lsrs	r3, r3, #8
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	4903      	ldr	r1, [pc, #12]	; (8007bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba6:	5ccb      	ldrb	r3, [r1, r3]
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	0801d13c 	.word	0x0801d13c

08007bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bbc:	f7ff ffde 	bl	8007b7c <HAL_RCC_GetHCLKFreq>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	0adb      	lsrs	r3, r3, #11
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	4903      	ldr	r1, [pc, #12]	; (8007bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bce:	5ccb      	ldrb	r3, [r1, r3]
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	0801d13c 	.word	0x0801d13c

08007be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007bec:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d12c      	bne.n	8007c52 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007bf8:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007c04:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e016      	b.n	8007c3e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c10:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	4a1f      	ldr	r2, [pc, #124]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	6253      	str	r3, [r2, #36]	; 0x24
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007c28:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007c30:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c32:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007c44:	d105      	bne.n	8007c52 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c4c:	d101      	bne.n	8007c52 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007c4e:	2301      	movs	r3, #1
 8007c50:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d105      	bne.n	8007c64 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007c58:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a0f      	ldr	r2, [pc, #60]	; (8007c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c5e:	f043 0304 	orr.w	r3, r3, #4
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f023 0201 	bic.w	r2, r3, #1
 8007c6c:	490b      	ldr	r1, [pc, #44]	; (8007c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c74:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40023800 	.word	0x40023800
 8007c98:	40007000 	.word	0x40007000
 8007c9c:	40023c00 	.word	0x40023c00

08007ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e07b      	b.n	8007daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d108      	bne.n	8007ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cc2:	d009      	beq.n	8007cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	61da      	str	r2, [r3, #28]
 8007cca:	e005      	b.n	8007cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fb fa52 	bl	800319c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	ea42 0103 	orr.w	r1, r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	f003 0104 	and.w	r1, r3, #4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	f003 0210 	and.w	r2, r3, #16
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b08c      	sub	sp, #48	; 0x30
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d101      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x26>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e18a      	b.n	80080ee <HAL_SPI_TransmitReceive+0x33c>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de0:	f7fc fcda 	bl	8004798 <HAL_GetTick>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007df6:	887b      	ldrh	r3, [r7, #2]
 8007df8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d00f      	beq.n	8007e22 <HAL_SPI_TransmitReceive+0x70>
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e08:	d107      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x68>
 8007e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d003      	beq.n	8007e22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e20:	e15b      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x82>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x82>
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e3a:	e14e      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d003      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	887a      	ldrh	r2, [r7, #2]
 8007e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	887a      	ldrh	r2, [r7, #2]
 8007e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d007      	beq.n	8007ea4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eac:	d178      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x10a>
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d166      	bne.n	8007f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	881a      	ldrh	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ee0:	e053      	b.n	8007f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d11b      	bne.n	8007f28 <HAL_SPI_TransmitReceive+0x176>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d016      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x176>
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d113      	bne.n	8007f28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	1c9a      	adds	r2, r3, #2
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d119      	bne.n	8007f6a <HAL_SPI_TransmitReceive+0x1b8>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d014      	beq.n	8007f6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	1c9a      	adds	r2, r3, #2
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f66:	2301      	movs	r3, #1
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f6a:	f7fc fc15 	bl	8004798 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d807      	bhi.n	8007f8a <HAL_SPI_TransmitReceive+0x1d8>
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d003      	beq.n	8007f8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f88:	e0a7      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1a6      	bne.n	8007ee2 <HAL_SPI_TransmitReceive+0x130>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1a1      	bne.n	8007ee2 <HAL_SPI_TransmitReceive+0x130>
 8007f9e:	e07c      	b.n	800809a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <HAL_SPI_TransmitReceive+0x1fc>
 8007fa8:	8b7b      	ldrh	r3, [r7, #26]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d16b      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd4:	e057      	b.n	8008086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d11c      	bne.n	800801e <HAL_SPI_TransmitReceive+0x26c>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d017      	beq.n	800801e <HAL_SPI_TransmitReceive+0x26c>
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d114      	bne.n	800801e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008010:	b29b      	uxth	r3, r3
 8008012:	3b01      	subs	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b01      	cmp	r3, #1
 800802a:	d119      	bne.n	8008060 <HAL_SPI_TransmitReceive+0x2ae>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d014      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800805c:	2301      	movs	r3, #1
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008060:	f7fc fb9a 	bl	8004798 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806c:	429a      	cmp	r2, r3
 800806e:	d803      	bhi.n	8008078 <HAL_SPI_TransmitReceive+0x2c6>
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d102      	bne.n	800807e <HAL_SPI_TransmitReceive+0x2cc>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008084:	e029      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1a2      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x224>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d19d      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f8b2 	bl	8008208 <SPI_EndRxTxTransaction>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080b6:	e010      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	e000      	b.n	80080da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80080d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3730      	adds	r7, #48	; 0x30
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008108:	f7fc fb46 	bl	8004798 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4413      	add	r3, r2
 8008116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008118:	f7fc fb3e 	bl	8004798 <HAL_GetTick>
 800811c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800811e:	4b39      	ldr	r3, [pc, #228]	; (8008204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	015b      	lsls	r3, r3, #5
 8008124:	0d1b      	lsrs	r3, r3, #20
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800812e:	e054      	b.n	80081da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d050      	beq.n	80081da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008138:	f7fc fb2e 	bl	8004798 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	429a      	cmp	r2, r3
 8008146:	d902      	bls.n	800814e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d13d      	bne.n	80081ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800815c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008166:	d111      	bne.n	800818c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008170:	d004      	beq.n	800817c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800817a:	d107      	bne.n	800818c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800818a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008194:	d10f      	bne.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e017      	b.n	80081fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4013      	ands	r3, r2
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	bf0c      	ite	eq
 80081ea:	2301      	moveq	r3, #1
 80081ec:	2300      	movne	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d19b      	bne.n	8008130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200000bc 	.word	0x200000bc

08008208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af02      	add	r7, sp, #8
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <SPI_EndRxTxTransaction+0x7c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <SPI_EndRxTxTransaction+0x80>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	0d5b      	lsrs	r3, r3, #21
 8008220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008224:	fb02 f303 	mul.w	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008232:	d112      	bne.n	800825a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff ff5a 	bl	80080f8 <SPI_WaitFlagStateUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e00f      	b.n	800827a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	3b01      	subs	r3, #1
 8008264:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d0f2      	beq.n	800825a <SPI_EndRxTxTransaction+0x52>
 8008274:	e000      	b.n	8008278 <SPI_EndRxTxTransaction+0x70>
        break;
 8008276:	bf00      	nop
  }

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	200000bc 	.word	0x200000bc
 8008288:	165e9f81 	.word	0x165e9f81

0800828c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e03f      	b.n	800831e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fa ffb6 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2224      	movs	r2, #36	; 0x24
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f905 	bl	80084e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695a      	ldr	r2, [r3, #20]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b08a      	sub	sp, #40	; 0x28
 800832a:	af02      	add	r7, sp, #8
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b20      	cmp	r3, #32
 8008344:	d17c      	bne.n	8008440 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <HAL_UART_Transmit+0x2c>
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e075      	b.n	8008442 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_UART_Transmit+0x3e>
 8008360:	2302      	movs	r3, #2
 8008362:	e06e      	b.n	8008442 <HAL_UART_Transmit+0x11c>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2221      	movs	r2, #33	; 0x21
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800837a:	f7fc fa0d 	bl	8004798 <HAL_GetTick>
 800837e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	d108      	bne.n	80083a8 <HAL_UART_Transmit+0x82>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e003      	b.n	80083b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083b8:	e02a      	b.n	8008410 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2180      	movs	r1, #128	; 0x80
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f840 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e036      	b.n	8008442 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e007      	b.n	8008402 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1cf      	bne.n	80083ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2200      	movs	r2, #0
 8008422:	2140      	movs	r1, #64	; 0x40
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f810 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e006      	b.n	8008442 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845a:	e02c      	b.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d028      	beq.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0x30>
 800846a:	f7fc f995 	bl	8004798 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	429a      	cmp	r2, r3
 8008478:	d21d      	bcs.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008488:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e00f      	b.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4013      	ands	r3, r2
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	bf0c      	ite	eq
 80084c6:	2301      	moveq	r3, #1
 80084c8:	2300      	movne	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d0c3      	beq.n	800845c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	4313      	orrs	r3, r2
 8008514:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008520:	f023 030c 	bic.w	r3, r3, #12
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	430b      	orrs	r3, r1
 800852c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a55      	ldr	r2, [pc, #340]	; (80086a0 <UART_SetConfig+0x1c0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d103      	bne.n	8008556 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800854e:	f7ff fb33 	bl	8007bb8 <HAL_RCC_GetPCLK2Freq>
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	e002      	b.n	800855c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008556:	f7ff fb1b 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 800855a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008564:	d14c      	bne.n	8008600 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009a      	lsls	r2, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	fbb2 f3f3 	udiv	r3, r2, r3
 800857c:	4a49      	ldr	r2, [pc, #292]	; (80086a4 <UART_SetConfig+0x1c4>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	0119      	lsls	r1, r3, #4
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009a      	lsls	r2, r3, #2
 8008590:	441a      	add	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	fbb2 f2f3 	udiv	r2, r2, r3
 800859c:	4b41      	ldr	r3, [pc, #260]	; (80086a4 <UART_SetConfig+0x1c4>)
 800859e:	fba3 0302 	umull	r0, r3, r3, r2
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	2064      	movs	r0, #100	; 0x64
 80085a6:	fb00 f303 	mul.w	r3, r0, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	3332      	adds	r3, #50	; 0x32
 80085b0:	4a3c      	ldr	r2, [pc, #240]	; (80086a4 <UART_SetConfig+0x1c4>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085be:	4419      	add	r1, r3
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009a      	lsls	r2, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80085d6:	4b33      	ldr	r3, [pc, #204]	; (80086a4 <UART_SetConfig+0x1c4>)
 80085d8:	fba3 0302 	umull	r0, r3, r3, r2
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	2064      	movs	r0, #100	; 0x64
 80085e0:	fb00 f303 	mul.w	r3, r0, r3
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	3332      	adds	r3, #50	; 0x32
 80085ea:	4a2e      	ldr	r2, [pc, #184]	; (80086a4 <UART_SetConfig+0x1c4>)
 80085ec:	fba2 2303 	umull	r2, r3, r2, r3
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	f003 0207 	and.w	r2, r3, #7
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	440a      	add	r2, r1
 80085fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085fe:	e04a      	b.n	8008696 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009a      	lsls	r2, r3, #2
 800860a:	441a      	add	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	4a23      	ldr	r2, [pc, #140]	; (80086a4 <UART_SetConfig+0x1c4>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	0119      	lsls	r1, r3, #4
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009a      	lsls	r2, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	fbb2 f2f3 	udiv	r2, r2, r3
 8008636:	4b1b      	ldr	r3, [pc, #108]	; (80086a4 <UART_SetConfig+0x1c4>)
 8008638:	fba3 0302 	umull	r0, r3, r3, r2
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	2064      	movs	r0, #100	; 0x64
 8008640:	fb00 f303 	mul.w	r3, r0, r3
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	3332      	adds	r3, #50	; 0x32
 800864a:	4a16      	ldr	r2, [pc, #88]	; (80086a4 <UART_SetConfig+0x1c4>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008656:	4419      	add	r1, r3
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009a      	lsls	r2, r3, #2
 8008662:	441a      	add	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	fbb2 f2f3 	udiv	r2, r2, r3
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <UART_SetConfig+0x1c4>)
 8008670:	fba3 0302 	umull	r0, r3, r3, r2
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	2064      	movs	r0, #100	; 0x64
 8008678:	fb00 f303 	mul.w	r3, r0, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	3332      	adds	r3, #50	; 0x32
 8008682:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <UART_SetConfig+0x1c4>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	440a      	add	r2, r1
 8008694:	609a      	str	r2, [r3, #8]
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40013800 	.word	0x40013800
 80086a4:	51eb851f 	.word	0x51eb851f

080086a8 <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 80086ac:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <ndefAllocRecord+0x34>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	d901      	bls.n	80086b8 <ndefAllocRecord+0x10>
    {
        return NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e00c      	b.n	80086d2 <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 80086b8:	4b08      	ldr	r3, [pc, #32]	; (80086dc <ndefAllocRecord+0x34>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	b2d1      	uxtb	r1, r2
 80086c0:	4a06      	ldr	r2, [pc, #24]	; (80086dc <ndefAllocRecord+0x34>)
 80086c2:	7011      	strb	r1, [r2, #0]
 80086c4:	461a      	mov	r2, r3
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4a04      	ldr	r2, [pc, #16]	; (80086e0 <ndefAllocRecord+0x38>)
 80086d0:	4413      	add	r3, r2
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20003154 	.word	0x20003154
 80086e0:	20003158 	.word	0x20003158

080086e4 <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 80086f2:	2307      	movs	r3, #7
 80086f4:	e00c      	b.n	8008710 <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <ndefMessageInit+0x38>)
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	20003154 	.word	0x20003154

08008720 <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <ndefMessageGetInfo+0x1e>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 800873e:	2307      	movs	r3, #7
 8008740:	e01a      	b.n	8008778 <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 8008748:	e00c      	b.n	8008764 <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 800874a:	6978      	ldr	r0, [r7, #20]
 800874c:	f000 f994 	bl	8008a78 <ndefRecordGetLength>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
        recordCount++;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]

        record = record->next;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1ef      	bne.n	800874a <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <ndefMessageAppend+0x16>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 8008796:	2307      	movs	r3, #7
 8008798:	e043      	b.n	8008822 <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2200      	movs	r2, #0
 80087ba:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	701a      	strb	r2, [r3, #0]

        message->record = record;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e014      	b.n	8008804 <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 80087e0:	e002      	b.n	80087e8 <ndefMessageAppend+0x68>
        {
            current = current->next;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f8      	bne.n	80087e2 <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 8008804:	6838      	ldr	r0, [r7, #0]
 8008806:	f000 f937 	bl	8008a78 <ndefRecordGetLength>
 800880a:	4602      	mov	r2, r0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b088      	sub	sp, #32
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <ndefMessageDecode+0x1e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <ndefMessageDecode+0x1e>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 8008848:	2307      	movs	r3, #7
 800884a:	e043      	b.n	80088d4 <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 800884c:	6838      	ldr	r0, [r7, #0]
 800884e:	f7ff ff49 	bl	80086e4 <ndefMessageInit>
 8008852:	4603      	mov	r3, r0
 8008854:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8008856:	8b7b      	ldrh	r3, [r7, #26]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <ndefMessageDecode+0x36>
    {
        return err;
 800885c:	8b7b      	ldrh	r3, [r7, #26]
 800885e:	e039      	b.n	80088d4 <ndefMessageDecode+0xaa>
    }

    offset = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 8008864:	e030      	b.n	80088c8 <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 8008866:	f7ff ff1f 	bl	80086a8 <ndefAllocRecord>
 800886a:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 8008872:	2301      	movs	r3, #1
 8008874:	e02e      	b.n	80088d4 <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 800888a:	f107 030c 	add.w	r3, r7, #12
 800888e:	6979      	ldr	r1, [r7, #20]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fa32 	bl	8008cfa <ndefRecordDecode>
 8008896:	4603      	mov	r3, r0
 8008898:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800889a:	8b7b      	ldrh	r3, [r7, #26]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <ndefMessageDecode+0x7a>
        {
            return err;
 80088a0:	8b7b      	ldrh	r3, [r7, #26]
 80088a2:	e017      	b.n	80088d4 <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f000 f8e7 	bl	8008a78 <ndefRecordGetLength>
 80088aa:	4602      	mov	r2, r0
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 80088b2:	6979      	ldr	r1, [r7, #20]
 80088b4:	6838      	ldr	r0, [r7, #0]
 80088b6:	f7ff ff63 	bl	8008780 <ndefMessageAppend>
 80088ba:	4603      	mov	r3, r0
 80088bc:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80088be:	8b7b      	ldrh	r3, [r7, #26]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <ndefMessageDecode+0x9e>
        {
            return err;
 80088c4:	8b7b      	ldrh	r3, [r7, #26]
 80088c6:	e005      	b.n	80088d4 <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d3c9      	bcc.n	8008866 <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3720      	adds	r7, #32
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <ndefMessageEncode+0x1e>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <ndefMessageEncode+0x1e>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 80088fa:	2307      	movs	r3, #7
 80088fc:	e050      	b.n	80089a0 <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 80088fe:	f107 0310 	add.w	r3, r7, #16
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff ff0b 	bl	8008720 <ndefMessageGetInfo>
 800890a:	4603      	mov	r3, r0
 800890c:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 800890e:	8b7b      	ldrh	r3, [r7, #26]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <ndefMessageEncode+0x42>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	429a      	cmp	r2, r3
 800891c:	d204      	bcs.n	8008928 <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8008924:	2301      	movs	r3, #1
 8008926:	e03b      	b.n	80089a0 <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <ndefMessageEncode+0x58>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	e000      	b.n	8008936 <ndefMessageEncode+0x5a>
 8008934:	2300      	movs	r3, #0
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 8008942:	e026      	b.n	8008992 <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	4413      	add	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4619      	mov	r1, r3
 8008958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800895a:	f000 fb91 	bl	8009080 <ndefRecordEncode>
 800895e:	4603      	mov	r3, r0
 8008960:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 8008962:	8b7b      	ldrh	r3, [r7, #26]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d004      	beq.n	8008972 <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	605a      	str	r2, [r3, #4]
            return err;
 800896e:	8b7b      	ldrh	r3, [r7, #26]
 8008970:	e016      	b.n	80089a0 <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	4413      	add	r3, r2
 8008978:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <ndefMessageEncode+0xb2>
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	e000      	b.n	8008990 <ndefMessageEncode+0xb4>
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1d5      	bne.n	8008944 <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3728      	adds	r7, #40	; 0x28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	2300      	movs	r3, #0
 80089b6:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 80089b8:	2300      	movs	r3, #0
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 80089c6:	2307      	movs	r3, #7
 80089c8:	e01c      	b.n	8008a04 <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 80089d0:	f107 0310 	add.w	r3, r7, #16
 80089d4:	461a      	mov	r2, r3
 80089d6:	2100      	movs	r1, #0
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f866 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 80089de:	f107 0310 	add.w	r3, r7, #16
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8e4 	bl	8008bb2 <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f92f 	bl	8008c54 <ndefRecordSetPayload>

    record->ndeftype = NULL;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e027      	b.n	8008a6e <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 8008a1e:	2301      	movs	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	e002      	b.n	8008a42 <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	789b      	ldrb	r3, [r3, #2]
 8008a64:	461a      	mov	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

    return length;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <ndefRecordGetLength+0x12>
    {
        return 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e00b      	b.n	8008aa2 <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff ffbe 	bl	8008a0c <ndefRecordGetHeaderLength>
 8008a90:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fb75 	bl	8009182 <ndefRecordGetPayloadLength>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

    return length;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b085      	sub	sp, #20
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <ndefRecordSetType+0x2a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	791b      	ldrb	r3, [r3, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 8008ad4:	2307      	movs	r3, #7
 8008ad6:	e012      	b.n	8008afe <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	791a      	ldrb	r2, [r3, #4]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <ndefRecordGetType+0x1e>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <ndefRecordGetType+0x1e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 8008b26:	2307      	movs	r3, #7
 8008b28:	e00f      	b.n	8008b4a <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	785a      	ldrb	r2, [r3, #1]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <ndefRecordTypeMatch+0x1a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <ndefRecordTypeMatch+0x1e>
    {
        return false;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e01b      	b.n	8008baa <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 0207 	and.w	r2, r3, #7
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d113      	bne.n	8008ba8 <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	785a      	ldrb	r2, [r3, #1]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d10d      	bne.n	8008ba8 <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6858      	ldr	r0, [r3, #4]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f012 fc7b 	bl	801b494 <memcmp>
 8008b9e:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <ndefRecordTypeMatch+0x54>
    {
        return true;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <ndefRecordTypeMatch+0x56>
    }

     return false;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <ndefRecordSetId+0x26>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d105      	bne.n	8008bdc <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	791b      	ldrb	r3, [r3, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 8008bd8:	2307      	movs	r3, #7
 8008bda:	e01b      	b.n	8008c14 <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f043 0308 	orr.w	r3, r3, #8
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e006      	b.n	8008c02 <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f023 0308 	bic.w	r3, r3, #8
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	791a      	ldrb	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr

08008c1e <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <ndefRecordGetId+0x16>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 8008c34:	2307      	movs	r3, #7
 8008c36:	e008      	b.n	8008c4a <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	789a      	ldrb	r2, [r3, #2]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <ndefRecordSetPayload+0x26>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d105      	bne.n	8008c7e <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 8008c7a:	2307      	movs	r3, #7
 8008c7c:	e01c      	b.n	8008cb8 <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f023 0310 	bic.w	r3, r3, #16
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	6852      	ldr	r2, [r2, #4]
 8008c94:	2aff      	cmp	r2, #255	; 0xff
 8008c96:	d801      	bhi.n	8008c9c <ndefRecordSetPayload+0x48>
 8008c98:	2210      	movs	r2, #16
 8008c9a:	e000      	b.n	8008c9e <ndefRecordSetPayload+0x4a>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr

08008cc2 <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <ndefRecordGetPayload+0x16>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 8008cd8:	2307      	movs	r3, #7
 8008cda:	e00a      	b.n	8008cf2 <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa4c 	bl	8009182 <ndefRecordGetPayloadLength>
 8008cea:	4602      	mov	r2, r0
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d006      	beq.n	8008d18 <ndefRecordDecode+0x1e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <ndefRecordDecode+0x1e>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 8008d18:	2307      	movs	r3, #7
 8008d1a:	e0e7      	b.n	8008eec <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 8008d1c:	6838      	ldr	r0, [r7, #0]
 8008d1e:	f7ff fe43 	bl	80089a8 <ndefRecordReset>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 8008d28:	230c      	movs	r3, #12
 8008d2a:	e0df      	b.n	8008eec <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d901      	bls.n	8008d40 <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 8008d3c:	230b      	movs	r3, #11
 8008d3e:	e0d5      	b.n	8008eec <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
    offset++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d901      	bls.n	8008d64 <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 8008d60:	230b      	movs	r3, #11
 8008d62:	e0c3      	b.n	8008eec <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	705a      	strb	r2, [r3, #1]
    offset++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d013      	beq.n	8008dac <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d901      	bls.n	8008d94 <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 8008d90:	230b      	movs	r3, #11
 8008d92:	e0ab      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	611a      	str	r2, [r3, #16]
        offset++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e029      	b.n	8008e00 <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d901      	bls.n	8008dbc <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 8008db8:	230b      	movs	r3, #11
 8008dba:	e097      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	061a      	lsls	r2, r3, #24
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6819      	ldr	r1, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	440b      	add	r3, r1
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6819      	ldr	r1, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3302      	adds	r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	4313      	orrs	r3, r2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6811      	ldr	r1, [r2, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	3203      	adds	r2, #3
 8008df0:	440a      	add	r2, r1
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	431a      	orrs	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d012      	beq.n	8008e32 <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d901      	bls.n	8008e1c <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 8008e18:	230b      	movs	r3, #11
 8008e1a:	e067      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	709a      	strb	r2, [r3, #2]
        offset++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	e002      	b.n	8008e38 <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2200      	movs	r2, #0
 8008e36:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d017      	beq.n	8008e70 <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	461a      	mov	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	441a      	add	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d901      	bls.n	8008e56 <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 8008e52:	230b      	movs	r3, #11
 8008e54:	e04a      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	441a      	add	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	461a      	mov	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e002      	b.n	8008e76 <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2200      	movs	r2, #0
 8008e74:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	789b      	ldrb	r3, [r3, #2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d017      	beq.n	8008eae <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	789b      	ldrb	r3, [r3, #2]
 8008e82:	461a      	mov	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d901      	bls.n	8008e94 <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 8008e90:	230b      	movs	r3, #11
 8008e92:	e02b      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	441a      	add	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	789b      	ldrb	r3, [r3, #2]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e002      	b.n	8008eb4 <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d010      	beq.n	8008ede <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	441a      	add	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d901      	bls.n	8008ed0 <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 8008ecc:	230b      	movs	r3, #11
 8008ece:	e00d      	b.n	8008eec <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	60da      	str	r2, [r3, #12]
 8008edc:	e002      	b.n	8008ee4 <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <ndefRecordEncodeHeader+0x1e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <ndefRecordEncodeHeader+0x1e>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 8008f12:	2307      	movs	r3, #7
 8008f14:	e06f      	b.n	8008ff6 <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b06      	cmp	r3, #6
 8008f1c:	d804      	bhi.n	8008f28 <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2207      	movs	r2, #7
 8008f22:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e066      	b.n	8008ff6 <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	701a      	strb	r2, [r3, #0]
    offset++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7852      	ldrb	r2, [r2, #1]
 8008f4c:	701a      	strb	r2, [r3, #0]
    offset++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f914 	bl	8009182 <ndefRecordGetPayloadLength>
 8008f5a:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2bff      	cmp	r3, #255	; 0xff
 8008f60:	d80a      	bhi.n	8008f78 <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]
        offset++;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e02a      	b.n	8008fce <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	0e19      	lsrs	r1, r3, #24
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	b2ca      	uxtb	r2, r1
 8008f86:	701a      	strb	r2, [r3, #0]
        offset++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	0c19      	lsrs	r1, r3, #16
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	b2ca      	uxtb	r2, r1
 8008f9c:	701a      	strb	r2, [r3, #0]
        offset++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	0a19      	lsrs	r1, r3, #8
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	b2ca      	uxtb	r2, r1
 8008fb2:	701a      	strb	r2, [r3, #0]
        offset++;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
        offset++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	7892      	ldrb	r2, [r2, #2]
 8008fe6:	701a      	strb	r2, [r3, #0]
        offset++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <ndefRecordPayloadEncode+0x16>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 8009014:	230b      	movs	r3, #11
 8009016:	e02f      	b.n	8009078 <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8b2 	bl	8009182 <ndefRecordGetPayloadLength>
 800901e:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	429a      	cmp	r2, r3
 8009028:	d901      	bls.n	800902e <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 800902a:	2301      	movs	r3, #1
 800902c:	e024      	b.n	8009078 <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 800902e:	2301      	movs	r3, #1
 8009030:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 8009036:	e011      	b.n	800905c <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 8009038:	2300      	movs	r3, #0
 800903a:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d008      	beq.n	8009054 <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	68f9      	ldr	r1, [r7, #12]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4618      	mov	r0, r3
 8009050:	f012 fa30 	bl	801b4b4 <memcpy>
        }
        offset += bufPayloadItem.length;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 800905c:	7efa      	ldrb	r2, [r7, #27]
 800905e:	f107 030c 	add.w	r3, r7, #12
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8af 	bl	80091c8 <ndefRecordGetPayloadItem>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e3      	bne.n	8009038 <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 8009080:	b590      	push	{r4, r7, lr}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <ndefRecordEncode+0x1e>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <ndefRecordEncode+0x1e>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 800909e:	2307      	movs	r3, #7
 80090a0:	e06b      	b.n	800917a <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685c      	ldr	r4, [r3, #4]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fce6 	bl	8008a78 <ndefRecordGetLength>
 80090ac:	4603      	mov	r3, r0
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d207      	bcs.n	80090c2 <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fce0 	bl	8008a78 <ndefRecordGetLength>
 80090b8:	4602      	mov	r2, r0
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 80090be:	2301      	movs	r3, #1
 80090c0:	e05b      	b.n	800917a <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 80090ce:	f107 0310 	add.w	r3, r7, #16
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff ff0d 	bl	8008ef4 <ndefRecordEncodeHeader>
 80090da:	4603      	mov	r3, r0
 80090dc:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 80090de:	8b7b      	ldrh	r3, [r7, #26]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <ndefRecordEncode+0x68>
    {
        return err;
 80090e4:	8b7b      	ldrh	r3, [r7, #26]
 80090e6:	e048      	b.n	800917a <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	18d0      	adds	r0, r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	785b      	ldrb	r3, [r3, #1]
 8009104:	461a      	mov	r2, r3
 8009106:	f012 f9d5 	bl	801b4b4 <memcpy>
        offset += record->typeLength;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	461a      	mov	r2, r3
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d010      	beq.n	8009140 <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	18d0      	adds	r0, r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6899      	ldr	r1, [r3, #8]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	789b      	ldrb	r3, [r3, #2]
 800912e:	461a      	mov	r2, r3
 8009130:	f012 f9c0 	bl	801b4b4 <memcpy>
        offset += record->idLength;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	789b      	ldrb	r3, [r3, #2]
 8009138:	461a      	mov	r2, r3
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ff4f 	bl	8008ffe <ndefRecordPayloadEncode>
 8009160:	4603      	mov	r3, r0
 8009162:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8009164:	8b7b      	ldrh	r3, [r7, #26]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <ndefRecordEncode+0xee>
    {
        return err;
 800916a:	8b7b      	ldrh	r3, [r7, #26]
 800916c:	e005      	b.n	800917a <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	441a      	add	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3724      	adds	r7, #36	; 0x24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd90      	pop	{r4, r7, pc}

08009182 <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 8009190:	2300      	movs	r3, #0
 8009192:	e015      	b.n	80091c0 <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00d      	beq.n	80091b8 <ndefRecordGetPayloadLength+0x36>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d008      	beq.n	80091b8 <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6952      	ldr	r2, [r2, #20]
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	e002      	b.n	80091be <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <ndefRecordGetPayloadItem+0x1a>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e020      	b.n	8009228 <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00d      	beq.n	8009216 <ndefRecordGetPayloadItem+0x4e>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	6950      	ldr	r0, [r2, #20]
 800920e:	79fa      	ldrb	r2, [r7, #7]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	4798      	blx	r3
 8009214:	e006      	b.n	8009224 <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fd4f 	bl	8008cc2 <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	681b      	ldr	r3, [r3, #0]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <ndefWifiPayloadGetLength+0x16>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b07      	cmp	r3, #7
 8009244:	d001      	beq.n	800924a <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 8009246:	2300      	movs	r3, #0
 8009248:	e00a      	b.n	8009260 <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	330c      	adds	r3, #12
 800924e:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 800925a:	3340      	adds	r3, #64	; 0x40
 800925c:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 800925e:	68bb      	ldr	r3, [r7, #8]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr
	...

0800926c <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 800926c:	b480      	push	{r7}
 800926e:	b08b      	sub	sp, #44	; 0x2c
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 800927a:	2300      	movs	r3, #0
 800927c:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 800927e:	f107 0318 	add.w	r3, r7, #24
 8009282:	613b      	str	r3, [r7, #16]
 8009284:	2304      	movs	r3, #4
 8009286:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 8009288:	2307      	movs	r3, #7
 800928a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 800928e:	2305      	movs	r3, #5
 8009290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 8009294:	230b      	movs	r3, #11
 8009296:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d006      	beq.n	80092ae <ndefWifiToPayloadItem+0x42>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	d102      	bne.n	80092ae <ndefWifiToPayloadItem+0x42>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	e0b3      	b.n	800941a <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	330c      	adds	r3, #12
 80092b6:	623b      	str	r3, [r7, #32]

    if (begin == true)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 80092be:	4b59      	ldr	r3, [pc, #356]	; (8009424 <ndefWifiToPayloadItem+0x1b8>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	605a      	str	r2, [r3, #4]

    switch (item)
 80092d0:	4b54      	ldr	r3, [pc, #336]	; (8009424 <ndefWifiToPayloadItem+0x1b8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	f200 8092 	bhi.w	80093fe <ndefWifiToPayloadItem+0x192>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <ndefWifiToPayloadItem+0x74>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	08009305 	.word	0x08009305
 80092e4:	08009345 	.word	0x08009345
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009369 	.word	0x08009369
 80092f0:	0800937b 	.word	0x0800937b
 80092f4:	080093a1 	.word	0x080093a1
 80092f8:	080093b5 	.word	0x080093b5
 80092fc:	080093c7 	.word	0x080093c7
 8009300:	080093f1 	.word	0x080093f1

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 8009308:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 800930e:	b29b      	uxth	r3, r3
 8009310:	4413      	add	r3, r2
 8009312:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 8009314:	3337      	adds	r3, #55	; 0x37
 8009316:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 8009318:	8bfb      	ldrh	r3, [r7, #30]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	b29a      	uxth	r2, r3
 800931e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009322:	b2d1      	uxtb	r1, r2
 8009324:	4a40      	ldr	r2, [pc, #256]	; (8009428 <ndefWifiToPayloadItem+0x1bc>)
 8009326:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 8009328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800932c:	3301      	adds	r3, #1
 800932e:	8bfa      	ldrh	r2, [r7, #30]
 8009330:	b2d1      	uxtb	r1, r2
 8009332:	4a3d      	ldr	r2, [pc, #244]	; (8009428 <ndefWifiToPayloadItem+0x1bc>)
 8009334:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4a3b      	ldr	r2, [pc, #236]	; (8009428 <ndefWifiToPayloadItem+0x1bc>)
 800933a:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2210      	movs	r2, #16
 8009340:	605a      	str	r2, [r3, #4]
        break;
 8009342:	e063      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8009344:	4b39      	ldr	r3, [pc, #228]	; (800942c <ndefWifiToPayloadItem+0x1c0>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 800934c:	4b37      	ldr	r3, [pc, #220]	; (800942c <ndefWifiToPayloadItem+0x1c0>)
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	461a      	mov	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	605a      	str	r2, [r3, #4]
        break;
 8009356:	e059      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2201      	movs	r2, #1
 8009364:	605a      	str	r2, [r3, #4]
        break;
 8009366:	e051      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	605a      	str	r2, [r3, #4]
        break;
 8009378:	e048      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 800937a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800937e:	6a3a      	ldr	r2, [r7, #32]
 8009380:	7c11      	ldrb	r1, [r2, #16]
 8009382:	4a2b      	ldr	r2, [pc, #172]	; (8009430 <ndefWifiToPayloadItem+0x1c4>)
 8009384:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 8009386:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	7c51      	ldrb	r1, [r2, #17]
 800938e:	4a28      	ldr	r2, [pc, #160]	; (8009430 <ndefWifiToPayloadItem+0x1c4>)
 8009390:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	4a26      	ldr	r2, [pc, #152]	; (8009430 <ndefWifiToPayloadItem+0x1c4>)
 8009396:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	220e      	movs	r2, #14
 800939c:	605a      	str	r2, [r3, #4]
        break;
 800939e:	e035      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 80093a0:	4b22      	ldr	r3, [pc, #136]	; (800942c <ndefWifiToPayloadItem+0x1c0>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 80093a8:	4b20      	ldr	r3, [pc, #128]	; (800942c <ndefWifiToPayloadItem+0x1c0>)
 80093aa:	791b      	ldrb	r3, [r3, #4]
 80093ac:	461a      	mov	r2, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	605a      	str	r2, [r3, #4]
        break;
 80093b2:	e02b      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	f103 020c 	add.w	r2, r3, #12
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2201      	movs	r2, #1
 80093c2:	605a      	str	r2, [r3, #4]
        break;
 80093c4:	e022      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d107      	bne.n	80093de <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 80093d4:	7d3b      	ldrb	r3, [r7, #20]
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 80093dc:	e016      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	605a      	str	r2, [r3, #4]
        break;
 80093ee:	e00d      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4a10      	ldr	r2, [pc, #64]	; (8009434 <ndefWifiToPayloadItem+0x1c8>)
 80093f4:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	221e      	movs	r2, #30
 80093fa:	605a      	str	r2, [r3, #4]
        break;
 80093fc:	e006      	b.n	800940c <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	605a      	str	r2, [r3, #4]
        break;
 800940a:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800940c:	4b05      	ldr	r3, [pc, #20]	; (8009424 <ndefWifiToPayloadItem+0x1b8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a04      	ldr	r2, [pc, #16]	; (8009424 <ndefWifiToPayloadItem+0x1b8>)
 8009414:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	681b      	ldr	r3, [r3, #0]
}
 800941a:	4618      	mov	r0, r3
 800941c:	372c      	adds	r7, #44	; 0x2c
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr
 8009424:	20003270 	.word	0x20003270
 8009428:	200000c8 	.word	0x200000c8
 800942c:	20000108 	.word	0x20000108
 8009430:	200000d8 	.word	0x200000d8
 8009434:	200000e8 	.word	0x200000e8

08009438 <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <ndefWifi+0x16>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 800944e:	2307      	movs	r3, #7
 8009450:	e022      	b.n	8009498 <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2207      	movs	r2, #7
 8009456:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a12      	ldr	r2, [pc, #72]	; (80094a4 <ndefWifi+0x6c>)
 800945c:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a11      	ldr	r2, [pc, #68]	; (80094a8 <ndefWifi+0x70>)
 8009462:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	330c      	adds	r3, #12
 8009468:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009472:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	3208      	adds	r2, #8
 800947e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009482:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	7c1a      	ldrb	r2, [r3, #16]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	7c5a      	ldrb	r2, [r3, #17]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	bc80      	pop	{r7}
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	08009231 	.word	0x08009231
 80094a8:	0800926d 	.word	0x0800926d

080094ac <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <ndefGetWifi+0x1e>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	d102      	bne.n	80094ca <ndefGetWifi+0x1e>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 80094ca:	2307      	movs	r3, #7
 80094cc:	e01b      	b.n	8009506 <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	330c      	adds	r3, #12
 80094d2:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	7c1a      	ldrb	r2, [r3, #16]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	7c5a      	ldrb	r2, [r3, #17]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr

08009510 <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	; 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <ndefPayloadToWifi+0x16>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 8009526:	2307      	movs	r3, #7
 8009528:	e0a2      	b.n	8009670 <ndefPayloadToWifi+0x160>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 800952a:	2300      	movs	r3, #0
 800952c:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	767b      	strb	r3, [r7, #25]

    offset = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8009546:	e086      	b.n	8009656 <ndefPayloadToWifi+0x146>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	4413      	add	r3, r2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 8009556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800955a:	2b10      	cmp	r3, #16
 800955c:	d178      	bne.n	8009650 <ndefPayloadToWifi+0x140>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	3302      	adds	r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	3303      	adds	r3, #3
 8009576:	4413      	add	r3, r2
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 800957e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009582:	021a      	lsls	r2, r3, #8
 8009584:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009588:	4313      	orrs	r3, r2
 800958a:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	3301      	adds	r3, #1
 8009594:	4413      	add	r3, r2
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b45      	cmp	r3, #69	; 0x45
 800959a:	d00a      	beq.n	80095b2 <ndefPayloadToWifi+0xa2>
 800959c:	2b45      	cmp	r3, #69	; 0x45
 800959e:	dc52      	bgt.n	8009646 <ndefPayloadToWifi+0x136>
 80095a0:	2b27      	cmp	r3, #39	; 0x27
 80095a2:	d019      	beq.n	80095d8 <ndefPayloadToWifi+0xc8>
 80095a4:	2b27      	cmp	r3, #39	; 0x27
 80095a6:	dc4e      	bgt.n	8009646 <ndefPayloadToWifi+0x136>
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d028      	beq.n	80095fe <ndefPayloadToWifi+0xee>
 80095ac:	2b0f      	cmp	r3, #15
 80095ae:	d038      	beq.n	8009622 <ndefPayloadToWifi+0x112>
 80095b0:	e049      	b.n	8009646 <ndefPayloadToWifi+0x136>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d901      	bls.n	80095bc <ndefPayloadToWifi+0xac>
                {
                    return ERR_PROTO;
 80095b8:	230b      	movs	r3, #11
 80095ba:	e059      	b.n	8009670 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	3304      	adds	r3, #4
 80095c4:	4413      	add	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	4413      	add	r3, r2
 80095d2:	3304      	adds	r3, #4
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80095d6:	e03e      	b.n	8009656 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d901      	bls.n	80095e2 <ndefPayloadToWifi+0xd2>
                {
                    return ERR_PROTO;
 80095de:	230b      	movs	r3, #11
 80095e0:	e046      	b.n	8009670 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	3304      	adds	r3, #4
 80095ea:	4413      	add	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	4413      	add	r3, r2
 80095f8:	3304      	adds	r3, #4
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80095fc:	e02b      	b.n	8009656 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d001      	beq.n	8009608 <ndefPayloadToWifi+0xf8>
                {
                    return ERR_PROTO;
 8009604:	230b      	movs	r3, #11
 8009606:	e033      	b.n	8009670 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	3305      	adds	r3, #5
 8009610:	4413      	add	r3, r2
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	4413      	add	r3, r2
 800961c:	3304      	adds	r3, #4
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009620:	e019      	b.n	8009656 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d001      	beq.n	800962c <ndefPayloadToWifi+0x11c>
                {
                    return ERR_PROTO;
 8009628:	230b      	movs	r3, #11
 800962a:	e021      	b.n	8009670 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	3305      	adds	r3, #5
 8009634:	4413      	add	r3, r2
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	4413      	add	r3, r2
 8009640:	3304      	adds	r3, #4
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009644:	e007      	b.n	8009656 <ndefPayloadToWifi+0x146>
            default:
                offset++;
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	3301      	adds	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800964c:	bf00      	nop
 800964e:	e002      	b.n	8009656 <ndefPayloadToWifi+0x146>
            }
        }
        else
        {
            offset++;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	3301      	adds	r3, #1
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965c:	429a      	cmp	r2, r3
 800965e:	f4ff af73 	bcc.w	8009548 <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4619      	mov	r1, r3
 8009668:	6838      	ldr	r0, [r7, #0]
 800966a:	f7ff fee5 	bl	8009438 <ndefWifi>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3728      	adds	r7, #40	; 0x28
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <ndefRecordToWifi+0x16>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 800968e:	2307      	movs	r3, #7
 8009690:	e022      	b.n	80096d8 <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 8009692:	4a13      	ldr	r2, [pc, #76]	; (80096e0 <ndefRecordToWifi+0x68>)
 8009694:	2102      	movs	r1, #2
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fa5c 	bl	8008b54 <ndefRecordTypeMatch>
 800969c:	4603      	mov	r3, r0
 800969e:	f083 0301 	eor.w	r3, r3, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 80096a8:	230b      	movs	r3, #11
 80096aa:	e015      	b.n	80096d8 <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f95d 	bl	800996c <ndefRecordGetNdefType>
 80096b2:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 80096ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80096be:	68f9      	ldr	r1, [r7, #12]
 80096c0:	6838      	ldr	r0, [r7, #0]
 80096c2:	f011 fef7 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e006      	b.n	80096d8 <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	330c      	adds	r3, #12
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff ff1d 	bl	8009510 <ndefPayloadToWifi>
 80096d6:	4603      	mov	r3, r0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	0801d15c 	.word	0x0801d15c

080096e4 <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <ndefWifiToRecord+0x1e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b07      	cmp	r3, #7
 80096fa:	d102      	bne.n	8009702 <ndefWifiToRecord+0x1e>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8009702:	2307      	movs	r3, #7
 8009704:	e00c      	b.n	8009720 <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8009706:	6838      	ldr	r0, [r7, #0]
 8009708:	f7ff f94e 	bl	80089a8 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <ndefWifiToRecord+0x44>)
 800970e:	2102      	movs	r1, #2
 8009710:	6838      	ldr	r0, [r7, #0]
 8009712:	f7ff f9ca 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	6838      	ldr	r0, [r7, #0]
 800971a:	f000 f8ef 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	0801d15c 	.word	0x0801d15c

0800972c <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <ndefTypeStringToTypeId+0x1a>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 8009746:	230b      	movs	r3, #11
 8009748:	e03f      	b.n	80097ca <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e038      	b.n	80097c2 <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 8009750:	4a20      	ldr	r2, [pc, #128]	; (80097d4 <ndefTypeStringToTypeId+0xa8>)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	4413      	add	r3, r2
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	7bfa      	ldrb	r2, [r7, #15]
 800975c:	429a      	cmp	r2, r3
 800975e:	d12d      	bne.n	80097bc <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	791a      	ldrb	r2, [r3, #4]
 8009764:	491b      	ldr	r1, [pc, #108]	; (80097d4 <ndefTypeStringToTypeId+0xa8>)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	440b      	add	r3, r1
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d123      	bne.n	80097bc <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d107      	bne.n	800978c <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 800977c:	4a15      	ldr	r2, [pc, #84]	; (80097d4 <ndefTypeStringToTypeId+0xa8>)
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 8009788:	2300      	movs	r3, #0
 800978a:	e01e      	b.n	80097ca <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 800978c:	4a11      	ldr	r2, [pc, #68]	; (80097d4 <ndefTypeStringToTypeId+0xa8>)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4413      	add	r3, r2
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	6819      	ldr	r1, [r3, #0]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	791b      	ldrb	r3, [r3, #4]
 80097a0:	461a      	mov	r2, r3
 80097a2:	f011 fe77 	bl	801b494 <memcmp>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d107      	bne.n	80097bc <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 80097ac:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <ndefTypeStringToTypeId+0xa8>)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	e006      	b.n	80097ca <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3301      	adds	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b06      	cmp	r3, #6
 80097c6:	d9c3      	bls.n	8009750 <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 80097c8:	2316      	movs	r3, #22
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	0801d1b8 	.word	0x0801d1b8

080097d8 <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <ndefRecordTypeStringToTypeId+0x16>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 80097ee:	2307      	movs	r3, #7
 80097f0:	e029      	b.n	8009846 <ndefRecordTypeStringToTypeId+0x6e>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 80097f2:	f107 020c 	add.w	r2, r7, #12
 80097f6:	f107 0315 	add.w	r3, r7, #21
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff f983 	bl	8008b08 <ndefRecordGetType>
 8009802:	4603      	mov	r3, r0
 8009804:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 8009806:	8afb      	ldrh	r3, [r7, #22]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 800980c:	8afb      	ldrh	r3, [r7, #22]
 800980e:	e01a      	b.n	8009846 <ndefRecordTypeStringToTypeId+0x6e>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 8009810:	7d7b      	ldrb	r3, [r7, #21]
 8009812:	2b06      	cmp	r3, #6
 8009814:	d901      	bls.n	800981a <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 8009816:	230c      	movs	r3, #12
 8009818:	e015      	b.n	8009846 <ndefRecordTypeStringToTypeId+0x6e>
    }

    switch (tnf)
 800981a:	7d7b      	ldrb	r3, [r7, #21]
 800981c:	2b02      	cmp	r3, #2
 800981e:	dc02      	bgt.n	8009826 <ndefRecordTypeStringToTypeId+0x4e>
 8009820:	2b00      	cmp	r3, #0
 8009822:	da02      	bge.n	800982a <ndefRecordTypeStringToTypeId+0x52>
 8009824:	e00b      	b.n	800983e <ndefRecordTypeStringToTypeId+0x66>
 8009826:	2b04      	cmp	r3, #4
 8009828:	d109      	bne.n	800983e <ndefRecordTypeStringToTypeId+0x66>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 800982a:	7d7b      	ldrb	r3, [r7, #21]
 800982c:	f107 010c 	add.w	r1, r7, #12
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff ff7a 	bl	800972c <ndefTypeStringToTypeId>
 8009838:	4603      	mov	r3, r0
 800983a:	82fb      	strh	r3, [r7, #22]
        break;
 800983c:	e002      	b.n	8009844 <ndefRecordTypeStringToTypeId+0x6c>
    default:
        err = ERR_NOT_IMPLEMENTED;
 800983e:	230f      	movs	r3, #15
 8009840:	82fb      	strh	r3, [r7, #22]
        break;
 8009842:	bf00      	nop
    }

    return err;
 8009844:	8afb      	ldrh	r3, [r7, #22]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f886 	bl	800996c <ndefRecordGetNdefType>
 8009860:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 8009868:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800986c:	6939      	ldr	r1, [r7, #16]
 800986e:	6838      	ldr	r0, [r7, #0]
 8009870:	f011 fe20 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 8009874:	2300      	movs	r3, #0
 8009876:	e03a      	b.n	80098ee <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 8009878:	f107 030d 	add.w	r3, r7, #13
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff ffaa 	bl	80097d8 <ndefRecordTypeStringToTypeId>
 8009884:	4603      	mov	r3, r0
 8009886:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <ndefRecordToType+0x42>
    {
        return err;
 800988e:	89fb      	ldrh	r3, [r7, #14]
 8009890:	e02d      	b.n	80098ee <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e026      	b.n	80098e6 <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 8009898:	4917      	ldr	r1, [pc, #92]	; (80098f8 <ndefRecordToType+0xa8>)
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4613      	mov	r3, r2
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	7b7b      	ldrb	r3, [r7, #13]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d118      	bne.n	80098e0 <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 80098ae:	4912      	ldr	r1, [pc, #72]	; (80098f8 <ndefRecordToType+0xa8>)
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4613      	mov	r3, r2
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	3304      	adds	r3, #4
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00d      	beq.n	80098e0 <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 80098c4:	490c      	ldr	r1, [pc, #48]	; (80098f8 <ndefRecordToType+0xa8>)
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4613      	mov	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	3304      	adds	r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
 80098dc:	4603      	mov	r3, r0
 80098de:	e006      	b.n	80098ee <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3301      	adds	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b06      	cmp	r3, #6
 80098ea:	d9d5      	bls.n	8009898 <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 80098ec:	230f      	movs	r3, #15
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	0801d164 	.word	0x0801d164

080098fc <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00e      	beq.n	800992a <ndefRecordSetNdefType+0x2e>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 8009916:	2b08      	cmp	r3, #8
 8009918:	d807      	bhi.n	800992a <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 800992a:	2307      	movs	r3, #7
 800992c:	e01a      	b.n	8009964 <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fc24 	bl	8009182 <ndefRecordGetPayloadLength>
 800993a:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f023 0310 	bic.w	r3, r3, #16
 8009944:	b2da      	uxtb	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	2aff      	cmp	r2, #255	; 0xff
 8009952:	d801      	bhi.n	8009958 <ndefRecordSetNdefType+0x5c>
 8009954:	2210      	movs	r2, #16
 8009956:	e000      	b.n	800995a <ndefRecordSetNdefType+0x5e>
 8009958:	2200      	movs	r2, #0
 800995a:	4313      	orrs	r3, r2
 800995c:	b2da      	uxtb	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	e016      	b.n	80099ac <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d011      	beq.n	80099aa <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b07      	cmp	r3, #7
 800998e:	d80c      	bhi.n	80099aa <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	e000      	b.n	80099ac <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr

080099b6 <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b087      	sub	sp, #28
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <ndefVCardPayloadGetLength+0x1a>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b06      	cmp	r3, #6
 80099ce:	d001      	beq.n	80099d4 <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e06e      	b.n	8009ab2 <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	330c      	adds	r3, #12
 80099d8:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 80099da:	2205      	movs	r2, #5
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 80099e2:	2201      	movs	r2, #1
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	4413      	add	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 80099ea:	2205      	movs	r2, #5
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	4413      	add	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 80099f2:	2202      	movs	r2, #2
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	4413      	add	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 80099fa:	2207      	movs	r2, #7
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4413      	add	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8009a02:	2201      	movs	r2, #1
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	4413      	add	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 8009a12:	2202      	movs	r2, #2
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	4413      	add	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]

    i = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 8009a1e:	e034      	b.n	8009a8a <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	4413      	add	r3, r2
 8009a28:	330c      	adds	r3, #12
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	011b      	lsls	r3, r3, #4
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 8009a44:	2201      	movs	r2, #1
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	011b      	lsls	r3, r3, #4
 8009a52:	4413      	add	r3, r2
 8009a54:	330d      	adds	r3, #13
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 8009a60:	2201      	movs	r2, #1
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	4413      	add	r3, r2
 8009a66:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	4413      	add	r3, r2
 8009a70:	330e      	adds	r3, #14
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

        i++;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3301      	adds	r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	4413      	add	r3, r2
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1c3      	bne.n	8009a20 <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 8009a98:	2203      	movs	r2, #3
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8009aa8:	2205      	movs	r2, #5
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	4413      	add	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 8009ab0:	697b      	ldr	r3, [r7, #20]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bc80      	pop	{r7}
 8009aba:	4770      	bx	lr

08009abc <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <ndefVCardToPayloadItem+0x22>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b06      	cmp	r3, #6
 8009ad6:	d102      	bne.n	8009ade <ndefVCardToPayloadItem+0x22>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e17f      	b.n	8009de2 <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d008      	beq.n	8009b00 <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 8009aee:	4b8c      	ldr	r3, [pc, #560]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
        userItem = 0;
 8009af4:	4b8b      	ldr	r3, [pc, #556]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	601a      	str	r2, [r3, #0]
        index    = 0;
 8009afa:	4b8b      	ldr	r3, [pc, #556]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	e164      	b.n	8009de2 <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 8009b18:	4b81      	ldr	r3, [pc, #516]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b0a      	cmp	r3, #10
 8009b1e:	f200 8157 	bhi.w	8009dd0 <ndefVCardToPayloadItem+0x314>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <ndefVCardToPayloadItem+0x6c>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b55 	.word	0x08009b55
 8009b2c:	08009b6d 	.word	0x08009b6d
 8009b30:	08009b85 	.word	0x08009b85
 8009b34:	08009b9d 	.word	0x08009b9d
 8009b38:	08009bb5 	.word	0x08009bb5
 8009b3c:	08009bcd 	.word	0x08009bcd
 8009b40:	08009be5 	.word	0x08009be5
 8009b44:	08009bfd 	.word	0x08009bfd
 8009b48:	08009c21 	.word	0x08009c21
 8009b4c:	08009da1 	.word	0x08009da1
 8009b50:	08009db9 	.word	0x08009db9
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 8009b54:	4a75      	ldr	r2, [pc, #468]	; (8009d2c <ndefVCardToPayloadItem+0x270>)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 8009b5a:	2205      	movs	r2, #5
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b60:	4b6f      	ldr	r3, [pc, #444]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a6e      	ldr	r2, [pc, #440]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b68:	6013      	str	r3, [r2, #0]
        break;
 8009b6a:	e138      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009b6c:	4a70      	ldr	r2, [pc, #448]	; (8009d30 <ndefVCardToPayloadItem+0x274>)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009b72:	2201      	movs	r2, #1
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b78:	4b69      	ldr	r3, [pc, #420]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	4a68      	ldr	r2, [pc, #416]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b80:	6013      	str	r3, [r2, #0]
        break;
 8009b82:	e12c      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 8009b84:	4a6b      	ldr	r2, [pc, #428]	; (8009d34 <ndefVCardToPayloadItem+0x278>)
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 8009b8a:	2205      	movs	r2, #5
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b90:	4b63      	ldr	r3, [pc, #396]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3301      	adds	r3, #1
 8009b96:	4a62      	ldr	r2, [pc, #392]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009b98:	6013      	str	r3, [r2, #0]
        break;
 8009b9a:	e120      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 8009b9c:	4a66      	ldr	r2, [pc, #408]	; (8009d38 <ndefVCardToPayloadItem+0x27c>)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009ba8:	4b5d      	ldr	r3, [pc, #372]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3301      	adds	r3, #1
 8009bae:	4a5c      	ldr	r2, [pc, #368]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bb0:	6013      	str	r3, [r2, #0]
        break;
 8009bb2:	e114      	b.n	8009dde <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 8009bb4:	4a61      	ldr	r2, [pc, #388]	; (8009d3c <ndefVCardToPayloadItem+0x280>)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 8009bba:	2207      	movs	r2, #7
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009bc0:	4b57      	ldr	r3, [pc, #348]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	4a56      	ldr	r2, [pc, #344]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bc8:	6013      	str	r3, [r2, #0]
        break;
 8009bca:	e108      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009bcc:	4a58      	ldr	r2, [pc, #352]	; (8009d30 <ndefVCardToPayloadItem+0x274>)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009bd8:	4b51      	ldr	r3, [pc, #324]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	4a50      	ldr	r2, [pc, #320]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009be0:	6013      	str	r3, [r2, #0]
        break;
 8009be2:	e0fc      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 8009be4:	4a56      	ldr	r2, [pc, #344]	; (8009d40 <ndefVCardToPayloadItem+0x284>)
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 8009bea:	2203      	movs	r2, #3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009bf0:	4b4b      	ldr	r3, [pc, #300]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	4a4a      	ldr	r2, [pc, #296]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009bf8:	6013      	str	r3, [r2, #0]
        break;
 8009bfa:	e0f0      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 8009bfc:	4a4e      	ldr	r2, [pc, #312]	; (8009d38 <ndefVCardToPayloadItem+0x27c>)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8009c02:	2202      	movs	r2, #2
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009c08:	4b45      	ldr	r3, [pc, #276]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	4a44      	ldr	r2, [pc, #272]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009c10:	6013      	str	r3, [r2, #0]
        userItem = 0;
 8009c12:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
        index    = 0;
 8009c18:	4b43      	ldr	r3, [pc, #268]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
        break;
 8009c1e:	e0de      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 8009c20:	4b40      	ldr	r3, [pc, #256]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b05      	cmp	r3, #5
 8009c26:	f200 80b9 	bhi.w	8009d9c <ndefVCardToPayloadItem+0x2e0>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <ndefVCardToPayloadItem+0x174>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c49 	.word	0x08009c49
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009cd7 	.word	0x08009cd7
 8009c3c:	08009d09 	.word	0x08009d09
 8009c40:	08009d4d 	.word	0x08009d4d
 8009c44:	08009d7f 	.word	0x08009d7f
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 8009c48:	4b37      	ldr	r3, [pc, #220]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10b      	bne.n	8009c70 <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 8009c58:	4a3a      	ldr	r2, [pc, #232]	; (8009d44 <ndefVCardToPayloadItem+0x288>)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 8009c5e:	2203      	movs	r2, #3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 8009c64:	4b2e      	ldr	r3, [pc, #184]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	4a2d      	ldr	r2, [pc, #180]	; (8009d20 <ndefVCardToPayloadItem+0x264>)
 8009c6c:	6013      	str	r3, [r2, #0]
                break;
 8009c6e:	e096      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 8009c70:	4b2d      	ldr	r3, [pc, #180]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 8009c80:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	4413      	add	r3, r2
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 8009c94:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d005      	beq.n	8009cb2 <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	4a1d      	ldr	r2, [pc, #116]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009cae:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 8009cb0:	e075      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 8009cb2:	4b1c      	ldr	r3, [pc, #112]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3303      	adds	r3, #3
 8009cb8:	4a1a      	ldr	r2, [pc, #104]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009cba:	6013      	str	r3, [r2, #0]
            break;
 8009cbc:	e06f      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 8009cbe:	4a22      	ldr	r2, [pc, #136]	; (8009d48 <ndefVCardToPayloadItem+0x28c>)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	605a      	str	r2, [r3, #4]
            userItem++;
 8009cca:	4b16      	ldr	r3, [pc, #88]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a14      	ldr	r2, [pc, #80]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009cd2:	6013      	str	r3, [r2, #0]
            break;
 8009cd4:	e063      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	4413      	add	r3, r2
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <ndefVCardToPayloadItem+0x26c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	4413      	add	r3, r2
 8009cf2:	330d      	adds	r3, #13
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	605a      	str	r2, [r3, #4]
            userItem++;
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a08      	ldr	r2, [pc, #32]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009d04:	6013      	str	r3, [r2, #0]
            break;
 8009d06:	e04a      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 8009d08:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <ndefVCardToPayloadItem+0x274>)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 8009d0e:	2201      	movs	r2, #1
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	605a      	str	r2, [r3, #4]
            userItem++;
 8009d14:	4b03      	ldr	r3, [pc, #12]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	4a02      	ldr	r2, [pc, #8]	; (8009d24 <ndefVCardToPayloadItem+0x268>)
 8009d1c:	6013      	str	r3, [r2, #0]
            break;
 8009d1e:	e03e      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
 8009d20:	20003278 	.word	0x20003278
 8009d24:	2000327c 	.word	0x2000327c
 8009d28:	20003280 	.word	0x20003280
 8009d2c:	0801d230 	.word	0x0801d230
 8009d30:	0801d20c 	.word	0x0801d20c
 8009d34:	0801d244 	.word	0x0801d244
 8009d38:	0801d214 	.word	0x0801d214
 8009d3c:	0801d23c 	.word	0x0801d23c
 8009d40:	0801d24c 	.word	0x0801d24c
 8009d44:	0801d238 	.word	0x0801d238
 8009d48:	0801d210 	.word	0x0801d210
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 8009d4c:	4b27      	ldr	r3, [pc, #156]	; (8009dec <ndefVCardToPayloadItem+0x330>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	011b      	lsls	r3, r3, #4
 8009d54:	4413      	add	r3, r2
 8009d56:	3308      	adds	r3, #8
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 8009d5e:	4b23      	ldr	r3, [pc, #140]	; (8009dec <ndefVCardToPayloadItem+0x330>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	4413      	add	r3, r2
 8009d68:	330e      	adds	r3, #14
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	605a      	str	r2, [r3, #4]
            userItem++;
 8009d72:	4b1f      	ldr	r3, [pc, #124]	; (8009df0 <ndefVCardToPayloadItem+0x334>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3301      	adds	r3, #1
 8009d78:	4a1d      	ldr	r2, [pc, #116]	; (8009df0 <ndefVCardToPayloadItem+0x334>)
 8009d7a:	6013      	str	r3, [r2, #0]
            break;
 8009d7c:	e00f      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 8009d7e:	4a1d      	ldr	r2, [pc, #116]	; (8009df4 <ndefVCardToPayloadItem+0x338>)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 8009d84:	2202      	movs	r2, #2
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	605a      	str	r2, [r3, #4]
            index++;
 8009d8a:	4b18      	ldr	r3, [pc, #96]	; (8009dec <ndefVCardToPayloadItem+0x330>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	4a16      	ldr	r2, [pc, #88]	; (8009dec <ndefVCardToPayloadItem+0x330>)
 8009d92:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 8009d94:	4b16      	ldr	r3, [pc, #88]	; (8009df0 <ndefVCardToPayloadItem+0x334>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
            break;
 8009d9a:	e000      	b.n	8009d9e <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 8009d9c:	bf00      	nop
        }
        break;
 8009d9e:	e01e      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009da0:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <ndefVCardToPayloadItem+0x33c>)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009da6:	2201      	movs	r2, #1
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009dac:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <ndefVCardToPayloadItem+0x340>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	4a12      	ldr	r2, [pc, #72]	; (8009dfc <ndefVCardToPayloadItem+0x340>)
 8009db4:	6013      	str	r3, [r2, #0]
        break;
 8009db6:	e012      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 8009db8:	4a11      	ldr	r2, [pc, #68]	; (8009e00 <ndefVCardToPayloadItem+0x344>)
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <ndefVCardToPayloadItem+0x340>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	4a0c      	ldr	r2, [pc, #48]	; (8009dfc <ndefVCardToPayloadItem+0x340>)
 8009dcc:	6013      	str	r3, [r2, #0]
        break;
 8009dce:	e006      	b.n	8009dde <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	605a      	str	r2, [r3, #4]
        break;
 8009ddc:	bf00      	nop
    }

    return bufItem->buffer;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	681b      	ldr	r3, [r3, #0]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr
 8009dec:	20003280 	.word	0x20003280
 8009df0:	2000327c 	.word	0x2000327c
 8009df4:	0801d214 	.word	0x0801d214
 8009df8:	0801d20c 	.word	0x0801d20c
 8009dfc:	20003278 	.word	0x20003278
 8009e00:	0801d244 	.word	0x0801d244

08009e04 <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00c      	beq.n	8009e32 <ndefGetVCard+0x2e>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b06      	cmp	r3, #6
 8009e1e:	d108      	bne.n	8009e32 <ndefGetVCard+0x2e>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <ndefGetVCard+0x2e>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 8009e32:	2307      	movs	r3, #7
 8009e34:	e062      	b.n	8009efc <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2200      	movs	r2, #0
 8009e52:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e04c      	b.n	8009ef4 <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	4413      	add	r3, r2
 8009e62:	330c      	adds	r3, #12
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d041      	beq.n	8009eee <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	4413      	add	r3, r2
 8009e72:	330c      	adds	r3, #12
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d136      	bne.n	8009eee <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d032      	beq.n	8009eee <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	4413      	add	r3, r2
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6819      	ldr	r1, [r3, #0]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f011 fafa 	bl	801b494 <memcmp>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d123      	bne.n	8009eee <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	4413      	add	r3, r2
 8009eae:	3304      	adds	r3, #4
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	4413      	add	r3, r2
 8009ebe:	330d      	adds	r3, #13
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	4413      	add	r3, r2
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	4413      	add	r3, r2
 8009ee0:	330e      	adds	r3, #14
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	e006      	b.n	8009efc <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b0f      	cmp	r3, #15
 8009ef8:	d9af      	bls.n	8009e5a <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8009efa:	2316      	movs	r3, #22
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00d      	beq.n	8009f32 <ndefVCardFindMarker+0x2e>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <ndefVCardFindMarker+0x2e>
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d006      	beq.n	8009f32 <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <ndefVCardFindMarker+0x2e>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 8009f32:	230b      	movs	r3, #11
 8009f34:	e025      	b.n	8009f82 <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8009f3a:	e019      	b.n	8009f70 <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d012      	beq.n	8009f6a <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	18d0      	adds	r0, r2, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6819      	ldr	r1, [r3, #0]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	461a      	mov	r2, r3
 8009f56:	f011 fa9d 	bl	801b494 <memcmp>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e00b      	b.n	8009f82 <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d3dd      	bcc.n	8009f3c <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 8009f80:	2316      	movs	r3, #22
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d011      	beq.n	8009fc0 <ndefVCardExtractLine+0x36>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00d      	beq.n	8009fc0 <ndefVCardExtractLine+0x36>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d006      	beq.n	8009fc0 <ndefVCardExtractLine+0x36>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 8009fc0:	230b      	movs	r3, #11
 8009fc2:	e01c      	b.n	8009ffe <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	461a      	mov	r2, r3
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f7ff ff99 	bl	8009f04 <ndefVCardFindMarker>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 8009fd6:	8afb      	ldrh	r3, [r7, #22]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d107      	bne.n	8009fec <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	605a      	str	r2, [r3, #4]
 8009fea:	e007      	b.n	8009ffc <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <ndefVCardParseLine+0x1e>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <ndefVCardParseLine+0x1e>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 800a026:	230b      	movs	r3, #11
 800a028:	e053      	b.n	800a0d2 <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 800a02a:	f107 030c 	add.w	r3, r7, #12
 800a02e:	461a      	mov	r2, r3
 800a030:	492a      	ldr	r1, [pc, #168]	; (800a0dc <ndefVCardParseLine+0xd4>)
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff ff66 	bl	8009f04 <ndefVCardFindMarker>
 800a038:	4603      	mov	r3, r0
 800a03a:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 800a03c:	8bfb      	ldrh	r3, [r7, #30]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 800a042:	8bfb      	ldrh	r3, [r7, #30]
 800a044:	e045      	b.n	800a0d2 <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 800a060:	f107 0210 	add.w	r2, r7, #16
 800a064:	f107 0314 	add.w	r3, r7, #20
 800a068:	491d      	ldr	r1, [pc, #116]	; (800a0e0 <ndefVCardParseLine+0xd8>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff ff4a 	bl	8009f04 <ndefVCardFindMarker>
 800a070:	4603      	mov	r3, r0
 800a072:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 800a074:	8bfb      	ldrh	r3, [r7, #30]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d11a      	bne.n	800a0b0 <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3301      	adds	r3, #1
 800a082:	441a      	add	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	b2db      	uxtb	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b2da      	uxtb	r2, r3
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	7b1a      	ldrb	r2, [r3, #12]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	7b5b      	ldrb	r3, [r3, #13]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	441a      	add	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	0801d218 	.word	0x0801d218
 800a0e0:	0801d220 	.word	0x0801d220

0800a0e4 <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e01e      	b.n	800a132 <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	4413      	add	r3, r2
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d013      	beq.n	800a12c <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	011b      	lsls	r3, r3, #4
 800a10a:	4413      	add	r3, r2
 800a10c:	6819      	ldr	r1, [r3, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	4413      	add	r3, r2
 800a116:	330c      	adds	r3, #12
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	6838      	ldr	r0, [r7, #0]
 800a11e:	f011 f9b9 	bl	801b494 <memcmp>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <ndefIsVCardTypeFound+0x48>
            {
                return true;
 800a128:	2301      	movs	r3, #1
 800a12a:	e006      	b.n	800a13a <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3301      	adds	r3, #1
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d9dd      	bls.n	800a0f4 <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08c      	sub	sp, #48	; 0x30
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00a      	beq.n	800a16a <ndefPayloadToVcard+0x26>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d006      	beq.n	800a16a <ndefPayloadToVcard+0x26>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <ndefPayloadToVcard+0x26>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 800a16a:	230b      	movs	r3, #11
 800a16c:	e09c      	b.n	800a2a8 <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2206      	movs	r2, #6
 800a172:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	4a4e      	ldr	r2, [pc, #312]	; (800a2b0 <ndefPayloadToVcard+0x16c>)
 800a178:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	4a4d      	ldr	r2, [pc, #308]	; (800a2b4 <ndefPayloadToVcard+0x170>)
 800a17e:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	330c      	adds	r3, #12
 800a184:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a186:	2300      	movs	r3, #0
 800a188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a18a:	e02b      	b.n	800a1e4 <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 800a18c:	6a3a      	ldr	r2, [r7, #32]
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	4413      	add	r3, r2
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 800a198:	6a3a      	ldr	r2, [r7, #32]
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	4413      	add	r3, r2
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 800a1a6:	6a3a      	ldr	r2, [r7, #32]
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 800a1b4:	6a3a      	ldr	r2, [r7, #32]
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	4413      	add	r3, r2
 800a1bc:	330d      	adds	r3, #13
 800a1be:	2200      	movs	r2, #0
 800a1c0:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	4413      	add	r3, r2
 800a1d8:	330e      	adds	r3, #14
 800a1da:	2200      	movs	r2, #0
 800a1dc:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d9d0      	bls.n	800a18c <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800a1f2:	e029      	b.n	800a248 <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	4413      	add	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 800a208:	f107 020c 	add.w	r2, r7, #12
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	4929      	ldr	r1, [pc, #164]	; (800a2b8 <ndefPayloadToVcard+0x174>)
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff feb9 	bl	8009f8a <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	6a3a      	ldr	r2, [r7, #32]
 800a21e:	441a      	add	r2, r3
 800a220:	f107 030c 	add.w	r3, r7, #12
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff feee 	bl	800a008 <ndefVCardParseLine>
 800a22c:	4603      	mov	r3, r0
 800a22e:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 800a230:	8bfb      	ldrh	r3, [r7, #30]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	3301      	adds	r3, #1
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2202      	movs	r2, #2
 800a240:	4413      	add	r3, r2
 800a242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a244:	4413      	add	r3, r2
 800a246:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24e:	429a      	cmp	r2, r3
 800a250:	d202      	bcs.n	800a258 <ndefPayloadToVcard+0x114>
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	2b0f      	cmp	r3, #15
 800a256:	d9cd      	bls.n	800a1f4 <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 800a258:	4b18      	ldr	r3, [pc, #96]	; (800a2bc <ndefPayloadToVcard+0x178>)
 800a25a:	4619      	mov	r1, r3
 800a25c:	6a38      	ldr	r0, [r7, #32]
 800a25e:	f7ff ff41 	bl	800a0e4 <ndefIsVCardTypeFound>
 800a262:	4603      	mov	r3, r0
 800a264:	f083 0301 	eor.w	r3, r3, #1
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 800a26e:	2314      	movs	r3, #20
 800a270:	e01a      	b.n	800a2a8 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 800a272:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <ndefPayloadToVcard+0x17c>)
 800a274:	4619      	mov	r1, r3
 800a276:	6a38      	ldr	r0, [r7, #32]
 800a278:	f7ff ff34 	bl	800a0e4 <ndefIsVCardTypeFound>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f083 0301 	eor.w	r3, r3, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 800a288:	2314      	movs	r3, #20
 800a28a:	e00d      	b.n	800a2a8 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 800a28c:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <ndefPayloadToVcard+0x180>)
 800a28e:	4619      	mov	r1, r3
 800a290:	6a38      	ldr	r0, [r7, #32]
 800a292:	f7ff ff27 	bl	800a0e4 <ndefIsVCardTypeFound>
 800a296:	4603      	mov	r3, r0
 800a298:	f083 0301 	eor.w	r3, r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 800a2a2:	2314      	movs	r3, #20
 800a2a4:	e000      	b.n	800a2a8 <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3730      	adds	r7, #48	; 0x30
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	080099b7 	.word	0x080099b7
 800a2b4:	08009abd 	.word	0x08009abd
 800a2b8:	0801d228 	.word	0x0801d228
 800a2bc:	0801d230 	.word	0x0801d230
 800a2c0:	0801d23c 	.word	0x0801d23c
 800a2c4:	0801d238 	.word	0x0801d238

0800a2c8 <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <ndefRecordToVCard+0x16>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 800a2de:	2307      	movs	r3, #7
 800a2e0:	e022      	b.n	800a328 <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 800a2e2:	4a13      	ldr	r2, [pc, #76]	; (800a330 <ndefRecordToVCard+0x68>)
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7fe fc34 	bl	8008b54 <ndefRecordTypeMatch>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f083 0301 	eor.w	r3, r3, #1
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 800a2f8:	230b      	movs	r3, #11
 800a2fa:	e015      	b.n	800a328 <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fb35 	bl	800996c <ndefRecordGetNdefType>
 800a302:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d007      	beq.n	800a31a <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 800a30a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a30e:	68f9      	ldr	r1, [r7, #12]
 800a310:	6838      	ldr	r0, [r7, #0]
 800a312:	f011 f8cf 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 800a316:	2300      	movs	r3, #0
 800a318:	e006      	b.n	800a328 <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	330c      	adds	r3, #12
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff0f 	bl	800a144 <ndefPayloadToVcard>
 800a326:	4603      	mov	r3, r0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	0801d204 	.word	0x0801d204

0800a334 <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <ndefVCardToRecord+0x1e>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b06      	cmp	r3, #6
 800a34a:	d102      	bne.n	800a352 <ndefVCardToRecord+0x1e>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800a352:	2307      	movs	r3, #7
 800a354:	e00c      	b.n	800a370 <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800a356:	6838      	ldr	r0, [r7, #0]
 800a358:	f7fe fb26 	bl	80089a8 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 800a35c:	4a06      	ldr	r2, [pc, #24]	; (800a378 <ndefVCardToRecord+0x44>)
 800a35e:	2102      	movs	r1, #2
 800a360:	6838      	ldr	r0, [r7, #0]
 800a362:	f7fe fba2 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	6838      	ldr	r0, [r7, #0]
 800a36a:	f7ff fac7 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0801d204 	.word	0x0801d204

0800a37c <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <ndefEmptyTypePayloadGetLength+0x16>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 800a392:	2300      	movs	r3, #0
 800a394:	e000      	b.n	800a398 <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr

0800a3a2 <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b085      	sub	sp, #20
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <ndefEmptyTypePayloadItem+0x1c>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e009      	b.n	800a3d6 <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr

0800a3e0 <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 800a3ee:	2307      	movs	r3, #7
 800a3f0:	e009      	b.n	800a406 <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a05      	ldr	r2, [pc, #20]	; (800a410 <ndefEmptyType+0x30>)
 800a3fc:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a04      	ldr	r2, [pc, #16]	; (800a414 <ndefEmptyType+0x34>)
 800a402:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr
 800a410:	0800a37d 	.word	0x0800a37d
 800a414:	0800a3a3 	.word	0x0800a3a3

0800a418 <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	2300      	movs	r3, #0
 800a428:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <ndefRecordToEmptyType+0x1e>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 800a436:	2307      	movs	r3, #7
 800a438:	e024      	b.n	800a484 <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 800a43a:	f107 0308 	add.w	r3, r7, #8
 800a43e:	461a      	mov	r2, r3
 800a440:	2100      	movs	r1, #0
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7fe fb86 	bl	8008b54 <ndefRecordTypeMatch>
 800a448:	4603      	mov	r3, r0
 800a44a:	f083 0301 	eor.w	r3, r3, #1
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 800a454:	2307      	movs	r3, #7
 800a456:	e015      	b.n	800a484 <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	789b      	ldrb	r3, [r3, #2]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10b      	bne.n	800a478 <ndefRecordToEmptyType+0x60>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d107      	bne.n	800a478 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 800a478:	2307      	movs	r3, #7
 800a47a:	e003      	b.n	800a484 <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 800a47c:	6838      	ldr	r0, [r7, #0]
 800a47e:	f7ff ffaf 	bl	800a3e0 <ndefEmptyType>
 800a482:	4603      	mov	r3, r0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <ndefEmptyTypeToRecord+0x1e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <ndefEmptyTypeToRecord+0x1e>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800a4aa:	2307      	movs	r3, #7
 800a4ac:	e007      	b.n	800a4be <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 800a4ae:	6838      	ldr	r0, [r7, #0]
 800a4b0:	f7fe fa7a 	bl	80089a8 <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	6838      	ldr	r0, [r7, #0]
 800a4b8:	f7ff fa20 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b087      	sub	sp, #28
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d001      	beq.n	800a4e4 <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e01d      	b.n	800a520 <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	613b      	str	r3, [r7, #16]
 800a4ee:	e013      	b.n	800a518 <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d009      	beq.n	800a512 <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4413      	add	r3, r2
 800a506:	785b      	ldrb	r3, [r3, #1]
 800a508:	461a      	mov	r2, r3
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	4413      	add	r3, r2
 800a50e:	3302      	adds	r3, #2
 800a510:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	3301      	adds	r3, #1
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	d9e8      	bls.n	800a4f0 <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 800a51e:	697b      	ldr	r3, [r7, #20]
}
 800a520:	4618      	mov	r0, r3
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr
	...

0800a52c <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d006      	beq.n	800a54e <ndefRtdDeviceInfoToPayloadItem+0x22>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d102      	bne.n	800a54e <ndefRtdDeviceInfoToPayloadItem+0x22>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	e063      	b.n	800a61a <ndefRtdDeviceInfoToPayloadItem+0xee>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	330c      	adds	r3, #12
 800a556:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 800a55e:	4b31      	ldr	r3, [pc, #196]	; (800a624 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2200      	movs	r2, #0
 800a56e:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 800a570:	4b2c      	ldr	r3, [pc, #176]	; (800a624 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a2c      	ldr	r2, [pc, #176]	; (800a628 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800a576:	fba2 2303 	umull	r2, r3, r2, r3
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	4413      	add	r3, r2
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d03e      	beq.n	800a60a <ndefRtdDeviceInfoToPayloadItem+0xde>
    {
        switch (item % 3U)
 800a58c:	4b25      	ldr	r3, [pc, #148]	; (800a624 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800a592:	fba3 2301 	umull	r2, r3, r3, r1
 800a596:	085b      	lsrs	r3, r3, #1
 800a598:	461a      	mov	r2, r3
 800a59a:	0052      	lsls	r2, r2, #1
 800a59c:	441a      	add	r2, r3
 800a59e:	1a8b      	subs	r3, r1, r2
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d01b      	beq.n	800a5dc <ndefRtdDeviceInfoToPayloadItem+0xb0>
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d829      	bhi.n	800a5fc <ndefRtdDeviceInfoToPayloadItem+0xd0>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <ndefRtdDeviceInfoToPayloadItem+0x86>
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d00a      	beq.n	800a5c6 <ndefRtdDeviceInfoToPayloadItem+0x9a>
 800a5b0:	e024      	b.n	800a5fc <ndefRtdDeviceInfoToPayloadItem+0xd0>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	441a      	add	r2, r3
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	605a      	str	r2, [r3, #4]
            break;
 800a5c4:	e022      	b.n	800a60c <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	605a      	str	r2, [r3, #4]
            break;
 800a5da:	e017      	b.n	800a60c <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	4413      	add	r3, r2
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	605a      	str	r2, [r3, #4]
            break;
 800a5fa:	e007      	b.n	800a60c <ndefRtdDeviceInfoToPayloadItem+0xe0>
        default:
            bufItem->buffer = NULL;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	605a      	str	r2, [r3, #4]
            break;
 800a608:	e000      	b.n	800a60c <ndefRtdDeviceInfoToPayloadItem+0xe0>
        }
    }
 800a60a:	bf00      	nop

    /* Move to next item for next call */
    item++;
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a04      	ldr	r2, [pc, #16]	; (800a624 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a614:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	681b      	ldr	r3, [r3, #0]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bc80      	pop	{r7}
 800a622:	4770      	bx	lr
 800a624:	20003284 	.word	0x20003284
 800a628:	aaaaaaab 	.word	0xaaaaaaab

0800a62c <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <ndefGetRtdDeviceInfo+0x1e>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d102      	bne.n	800a64a <ndefGetRtdDeviceInfo+0x1e>
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 800a64a:	2307      	movs	r3, #7
 800a64c:	e029      	b.n	800a6a2 <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	330c      	adds	r3, #12
 800a652:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a654:	2300      	movs	r3, #0
 800a656:	60fb      	str	r3, [r7, #12]
 800a658:	e01f      	b.n	800a69a <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	4413      	add	r3, r2
 800a672:	7859      	ldrb	r1, [r3, #1]
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4413      	add	r3, r2
 800a67c:	460a      	mov	r2, r1
 800a67e:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	4413      	add	r3, r2
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	00db      	lsls	r3, r3, #3
 800a690:	440b      	add	r3, r1
 800a692:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d9dc      	bls.n	800a65a <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <ndefPayloadToRtdDeviceInfo+0x26>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d006      	beq.n	800a6d2 <ndefPayloadToRtdDeviceInfo+0x26>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <ndefPayloadToRtdDeviceInfo+0x26>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 800a6d2:	2307      	movs	r3, #7
 800a6d4:	e09d      	b.n	800a812 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4a4f      	ldr	r2, [pc, #316]	; (800a81c <ndefPayloadToRtdDeviceInfo+0x170>)
 800a6e0:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	4a4e      	ldr	r2, [pc, #312]	; (800a820 <ndefPayloadToRtdDeviceInfo+0x174>)
 800a6e6:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	330c      	adds	r3, #12
 800a6ec:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d905      	bls.n	800a702 <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800a6fa:	f240 4216 	movw	r2, #1046	; 0x416
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d901      	bls.n	800a706 <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 800a702:	230b      	movs	r3, #11
 800a704:	e085      	b.n	800a812 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a706:	2300      	movs	r3, #0
 800a708:	61fb      	str	r3, [r7, #28]
 800a70a:	e013      	b.n	800a734 <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	2100      	movs	r1, #0
 800a712:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	4413      	add	r3, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	4413      	add	r3, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	3301      	adds	r3, #1
 800a732:	61fb      	str	r3, [r7, #28]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d9e8      	bls.n	800a70c <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61bb      	str	r3, [r7, #24]
    count = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800a74a:	e044      	b.n	800a7d6 <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	4413      	add	r3, r2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	3301      	adds	r3, #1
 800a760:	4413      	add	r3, r2
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d104      	bne.n	800a776 <ndefPayloadToRtdDeviceInfo+0xca>
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d001      	beq.n	800a776 <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 800a772:	230b      	movs	r3, #11
 800a774:	e04d      	b.n	800a812 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	2b05      	cmp	r3, #5
 800a77a:	d802      	bhi.n	800a782 <ndefPayloadToRtdDeviceInfo+0xd6>
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 800a782:	230b      	movs	r3, #11
 800a784:	e045      	b.n	800a812 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	75bb      	strb	r3, [r7, #22]
 800a790:	e004      	b.n	800a79c <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 800a79c:	7dfa      	ldrb	r2, [r7, #23]
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	7bf9      	ldrb	r1, [r7, #15]
 800a7a2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	7bba      	ldrb	r2, [r7, #14]
 800a7b0:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6819      	ldr	r1, [r3, #0]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	1c9a      	adds	r2, r3, #2
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	440a      	add	r2, r1
 800a7be:	6939      	ldr	r1, [r7, #16]
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	440b      	add	r3, r1
 800a7c4:	605a      	str	r2, [r3, #4]
        count++;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 800a7cc:	7bba      	ldrb	r2, [r7, #14]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	1c9a      	adds	r2, r3, #2
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d202      	bcs.n	800a7e8 <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d9b1      	bls.n	800a74c <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800a7e8:	7dba      	ldrb	r2, [r7, #22]
 800a7ea:	7d7b      	ldrb	r3, [r7, #21]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d00f      	beq.n	800a810 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800a7f0:	7dbb      	ldrb	r3, [r7, #22]
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d008      	beq.n	800a810 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 800a7fe:	7d7b      	ldrb	r3, [r7, #21]
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	4413      	add	r3, r2
 800a806:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e000      	b.n	800a812 <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 800a810:	2307      	movs	r3, #7
    }
}
 800a812:	4618      	mov	r0, r3
 800a814:	3724      	adds	r7, #36	; 0x24
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	0800a4c7 	.word	0x0800a4c7
 800a820:	0800a52d 	.word	0x0800a52d

0800a824 <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <ndefRecordToRtdDeviceInfo+0x16>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 800a83a:	2307      	movs	r3, #7
 800a83c:	e028      	b.n	800a890 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <ndefRecordToRtdDeviceInfo+0x74>)
 800a840:	2101      	movs	r1, #1
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7fe f986 	bl	8008b54 <ndefRecordTypeMatch>
 800a848:	4603      	mov	r3, r0
 800a84a:	f083 0301 	eor.w	r3, r3, #1
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 800a854:	230b      	movs	r3, #11
 800a856:	e01b      	b.n	800a890 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff f887 	bl	800996c <ndefRecordGetNdefType>
 800a85e:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 800a866:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	6838      	ldr	r0, [r7, #0]
 800a86e:	f010 fe21 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 800a872:	2300      	movs	r3, #0
 800a874:	e00c      	b.n	800a890 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d801      	bhi.n	800a882 <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 800a87e:	230b      	movs	r3, #11
 800a880:	e006      	b.n	800a890 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	330c      	adds	r3, #12
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff ff0f 	bl	800a6ac <ndefPayloadToRtdDeviceInfo>
 800a88e:	4603      	mov	r3, r0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	0801d26c 	.word	0x0801d26c

0800a89c <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d006      	beq.n	800a8ba <ndefRtdDeviceInfoToRecord+0x1e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d102      	bne.n	800a8ba <ndefRtdDeviceInfoToRecord+0x1e>
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	e00c      	b.n	800a8d8 <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800a8be:	6838      	ldr	r0, [r7, #0]
 800a8c0:	f7fe f872 	bl	80089a8 <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 800a8c4:	4a06      	ldr	r2, [pc, #24]	; (800a8e0 <ndefRtdDeviceInfoToRecord+0x44>)
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	6838      	ldr	r0, [r7, #0]
 800a8ca:	f7fe f8ee 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	6838      	ldr	r0, [r7, #0]
 800a8d2:	f7ff f813 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0801d26c 	.word	0x0801d26c

0800a8e4 <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <ndefRtdTextPayloadGetLength+0x16>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d001      	beq.n	800a8fe <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e009      	b.n	800a912 <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	330c      	adds	r3, #12
 800a902:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	7a1b      	ldrb	r3, [r3, #8]
 800a908:	461a      	mov	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	3301      	adds	r3, #1
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr

0800a91c <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d006      	beq.n	800a93e <ndefRtdTextToPayloadItem+0x22>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d102      	bne.n	800a93e <ndefRtdTextToPayloadItem+0x22>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	e03b      	b.n	800a9ba <ndefRtdTextToPayloadItem+0x9e>
    }

    rtdText = &text->data.text;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	330c      	adds	r3, #12
 800a946:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 800a94e:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <ndefRtdTextToPayloadItem+0xa8>)
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800a954:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <ndefRtdTextToPayloadItem+0xa8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d017      	beq.n	800a98c <ndefRtdTextToPayloadItem+0x70>
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d81e      	bhi.n	800a99e <ndefRtdTextToPayloadItem+0x82>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <ndefRtdTextToPayloadItem+0x4e>
 800a964:	2b01      	cmp	r3, #1
 800a966:	d007      	beq.n	800a978 <ndefRtdTextToPayloadItem+0x5c>
 800a968:	e019      	b.n	800a99e <ndefRtdTextToPayloadItem+0x82>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2201      	movs	r2, #1
 800a974:	605a      	str	r2, [r3, #4]
        break;
 800a976:	e019      	b.n	800a9ac <ndefRtdTextToPayloadItem+0x90>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	7a1b      	ldrb	r3, [r3, #8]
 800a984:	461a      	mov	r2, r3
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	605a      	str	r2, [r3, #4]
        break;
 800a98a:	e00f      	b.n	800a9ac <ndefRtdTextToPayloadItem+0x90>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	691a      	ldr	r2, [r3, #16]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	605a      	str	r2, [r3, #4]
        break;
 800a99c:	e006      	b.n	800a9ac <ndefRtdTextToPayloadItem+0x90>

    default:
        bufItem->buffer = NULL;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	605a      	str	r2, [r3, #4]
        break;
 800a9aa:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <ndefRtdTextToPayloadItem+0xa8>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	4a04      	ldr	r2, [pc, #16]	; (800a9c4 <ndefRtdTextToPayloadItem+0xa8>)
 800a9b4:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	681b      	ldr	r3, [r3, #0]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr
 800a9c4:	20003288 	.word	0x20003288

0800a9c8 <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d015      	beq.n	800aa0a <ndefRtdText+0x42>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00e      	beq.n	800aa0a <ndefRtdText+0x42>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	791b      	ldrb	r3, [r3, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00a      	beq.n	800aa0a <ndefRtdText+0x42>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d007      	beq.n	800aa0a <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <ndefRtdText+0x42>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 800aa0a:	2307      	movs	r3, #7
 800aa0c:	e036      	b.n	800aa7c <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	791b      	ldrb	r3, [r3, #4]
 800aa12:	2b3f      	cmp	r3, #63	; 0x3f
 800aa14:	d901      	bls.n	800aa1a <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 800aa16:	230b      	movs	r3, #11
 800aa18:	e030      	b.n	800aa7c <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d004      	beq.n	800aa2a <ndefRtdText+0x62>
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d001      	beq.n	800aa2a <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 800aa26:	2307      	movs	r3, #7
 800aa28:	e028      	b.n	800aa7c <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <ndefRtdText+0xc0>)
 800aa34:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4a14      	ldr	r2, [pc, #80]	; (800aa8c <ndefRtdText+0xc4>)
 800aa3a:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	01db      	lsls	r3, r3, #7
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	4313      	orrs	r3, r2
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	791a      	ldrb	r2, [r3, #4]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bc80      	pop	{r7}
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	0800a8e5 	.word	0x0800a8e5
 800aa8c:	0800a91d 	.word	0x0800a91d

0800aa90 <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00c      	beq.n	800aabe <ndefGetRtdText+0x2e>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d108      	bne.n	800aabe <ndefGetRtdText+0x2e>
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d005      	beq.n	800aabe <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <ndefGetRtdText+0x2e>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 800aabe:	2307      	movs	r3, #7
 800aac0:	e019      	b.n	800aaf6 <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	330c      	adds	r3, #12
 800aac6:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	09db      	lsrs	r3, r3, #7
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	7a1a      	ldrb	r2, [r3, #8]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bc80      	pop	{r7}
 800aafe:	4770      	bx	lr

0800ab00 <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <ndefPayloadToRtdText+0x26>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d006      	beq.n	800ab26 <ndefPayloadToRtdText+0x26>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <ndefPayloadToRtdText+0x26>
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 800ab26:	2307      	movs	r3, #7
 800ab28:	e02d      	b.n	800ab86 <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	4a17      	ldr	r2, [pc, #92]	; (800ab90 <ndefPayloadToRtdText+0x90>)
 800ab34:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	4a16      	ldr	r2, [pc, #88]	; (800ab94 <ndefPayloadToRtdText+0x94>)
 800ab3a:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	330c      	adds	r3, #12
 800ab40:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	7afa      	ldrb	r2, [r7, #11]
 800ab4e:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800ab50:	7afb      	ldrb	r3, [r7, #11]
 800ab52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab56:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	7aba      	ldrb	r2, [r7, #10]
 800ab66:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	7abb      	ldrb	r3, [r7, #10]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	441a      	add	r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	7abb      	ldrb	r3, [r7, #10]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bc80      	pop	{r7}
 800ab8e:	4770      	bx	lr
 800ab90:	0800a8e5 	.word	0x0800a8e5
 800ab94:	0800a91d 	.word	0x0800a91d

0800ab98 <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <ndefRecordToRtdText+0x16>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 800abae:	2307      	movs	r3, #7
 800abb0:	e028      	b.n	800ac04 <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 800abb2:	4a16      	ldr	r2, [pc, #88]	; (800ac0c <ndefRecordToRtdText+0x74>)
 800abb4:	2101      	movs	r1, #1
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fd ffcc 	bl	8008b54 <ndefRecordTypeMatch>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f083 0301 	eor.w	r3, r3, #1
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 800abc8:	230b      	movs	r3, #11
 800abca:	e01b      	b.n	800ac04 <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7fe fecd 	bl	800996c <ndefRecordGetNdefType>
 800abd2:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 800abda:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	6838      	ldr	r0, [r7, #0]
 800abe2:	f010 fc67 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e00c      	b.n	800ac04 <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d801      	bhi.n	800abf6 <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 800abf2:	230b      	movs	r3, #11
 800abf4:	e006      	b.n	800ac04 <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	330c      	adds	r3, #12
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff ff7f 	bl	800ab00 <ndefPayloadToRtdText>
 800ac02:	4603      	mov	r3, r0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	0801d274 	.word	0x0801d274

0800ac10 <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d006      	beq.n	800ac2e <ndefRtdTextToRecord+0x1e>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d102      	bne.n	800ac2e <ndefRtdTextToRecord+0x1e>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800ac2e:	2307      	movs	r3, #7
 800ac30:	e00c      	b.n	800ac4c <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800ac32:	6838      	ldr	r0, [r7, #0]
 800ac34:	f7fd feb8 	bl	80089a8 <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 800ac38:	4a06      	ldr	r2, [pc, #24]	; (800ac54 <ndefRtdTextToRecord+0x44>)
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	6838      	ldr	r0, [r7, #0]
 800ac3e:	f7fd ff34 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	6838      	ldr	r0, [r7, #0]
 800ac46:	f7fe fe59 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	0801d274 	.word	0x0801d274

0800ac58 <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <ndefRtdUriPayloadGetLength+0x16>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d001      	beq.n	800ac72 <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e005      	b.n	800ac7e <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	330c      	adds	r3, #12
 800ac76:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	3301      	adds	r3, #1
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d006      	beq.n	800acaa <ndefRtdUriToPayloadItem+0x22>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d102      	bne.n	800acaa <ndefRtdUriToPayloadItem+0x22>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	e02d      	b.n	800ad0a <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	330c      	adds	r3, #12
 800acb2:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 800acba:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <ndefRtdUriToPayloadItem+0x8c>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800acc0:	4b14      	ldr	r3, [pc, #80]	; (800ad14 <ndefRtdUriToPayloadItem+0x8c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <ndefRtdUriToPayloadItem+0x46>
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d007      	beq.n	800acdc <ndefRtdUriToPayloadItem+0x54>
 800accc:	e00f      	b.n	800acee <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2201      	movs	r2, #1
 800acd8:	605a      	str	r2, [r3, #4]
        break;
 800acda:	e00f      	b.n	800acfc <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	605a      	str	r2, [r3, #4]
        break;
 800acec:	e006      	b.n	800acfc <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	605a      	str	r2, [r3, #4]
        break;
 800acfa:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <ndefRtdUriToPayloadItem+0x8c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3301      	adds	r3, #1
 800ad02:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <ndefRtdUriToPayloadItem+0x8c>)
 800ad04:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	681b      	ldr	r3, [r3, #0]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	371c      	adds	r7, #28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bc80      	pop	{r7}
 800ad12:	4770      	bx	lr
 800ad14:	2000328c 	.word	0x2000328c

0800ad18 <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 800ad2c:	2b24      	cmp	r3, #36	; 0x24
 800ad2e:	d102      	bne.n	800ad36 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 800ad36:	2307      	movs	r3, #7
 800ad38:	e03d      	b.n	800adb6 <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
 800ad3e:	e033      	b.n	800ada8 <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4a1f      	ldr	r2, [pc, #124]	; (800adc0 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	4413      	add	r3, r2
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d029      	beq.n	800ada2 <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	4a1a      	ldr	r2, [pc, #104]	; (800adc0 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ad56:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	4a18      	ldr	r2, [pc, #96]	; (800adc0 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4413      	add	r3, r2
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	461a      	mov	r2, r3
 800ad66:	f010 fb95 	bl	801b494 <memcmp>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d118      	bne.n	800ada2 <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7bfa      	ldrb	r2, [r7, #15]
 800ad74:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	4910      	ldr	r1, [pc, #64]	; (800adc0 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	441a      	add	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	490b      	ldr	r1, [pc, #44]	; (800adc0 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	440b      	add	r3, r1
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	1ad2      	subs	r2, r2, r3
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e009      	b.n	800adb6 <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	3301      	adds	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b24      	cmp	r3, #36	; 0x24
 800adac:	d9c8      	bls.n	800ad40 <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 800adb4:	2316      	movs	r3, #22
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	0801d40c 	.word	0x0801d40c

0800adc4 <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b088      	sub	sp, #32
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	460b      	mov	r3, r1
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <ndefRtdUri+0x30>
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	2b24      	cmp	r3, #36	; 0x24
 800addc:	d80a      	bhi.n	800adf4 <ndefRtdUri+0x30>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d007      	beq.n	800adf4 <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <ndefRtdUri+0x30>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 800adf4:	2307      	movs	r3, #7
 800adf6:	e028      	b.n	800ae4a <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2203      	movs	r2, #3
 800adfc:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4a14      	ldr	r2, [pc, #80]	; (800ae54 <ndefRtdUri+0x90>)
 800ae02:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a14      	ldr	r2, [pc, #80]	; (800ae58 <ndefRtdUri+0x94>)
 800ae08:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 800ae20:	7afb      	ldrb	r3, [r7, #11]
 800ae22:	2b24      	cmp	r3, #36	; 0x24
 800ae24:	d107      	bne.n	800ae36 <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 800ae26:	f107 0214 	add.w	r2, r7, #20
 800ae2a:	f107 0313 	add.w	r3, r7, #19
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ff71 	bl	800ad18 <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 800ae36:	7cfa      	ldrb	r2, [r7, #19]
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	0800ac59 	.word	0x0800ac59
 800ae58:	0800ac89 	.word	0x0800ac89

0800ae5c <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <ndefGetRtdUri+0x26>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d105      	bne.n	800ae82 <ndefGetRtdUri+0x26>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 800ae82:	2307      	movs	r3, #7
 800ae84:	e01b      	b.n	800aebe <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	330c      	adds	r3, #12
 800ae8a:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b0d      	ldr	r3, [pc, #52]	; (800aec8 <ndefGetRtdUri+0x6c>)
 800ae94:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <ndefGetRtdUri+0x6c>)
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bc80      	pop	{r7}
 800aec6:	4770      	bx	lr
 800aec8:	0801d40c 	.word	0x0801d40c

0800aecc <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <ndefPayloadToRtdUri+0x26>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d006      	beq.n	800aef2 <ndefPayloadToRtdUri+0x26>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <ndefPayloadToRtdUri+0x26>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 800aef2:	2307      	movs	r3, #7
 800aef4:	e013      	b.n	800af1e <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 800af0e:	f107 020c 	add.w	r2, r7, #12
 800af12:	7dfb      	ldrb	r3, [r7, #23]
 800af14:	4619      	mov	r1, r3
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f7ff ff54 	bl	800adc4 <ndefRtdUri>
 800af1c:	4603      	mov	r3, r0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <ndefRecordToRtdUri+0x16>
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 800af3e:	2307      	movs	r3, #7
 800af40:	e028      	b.n	800af94 <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 800af42:	4a16      	ldr	r2, [pc, #88]	; (800af9c <ndefRecordToRtdUri+0x74>)
 800af44:	2101      	movs	r1, #1
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fd fe04 	bl	8008b54 <ndefRecordTypeMatch>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f083 0301 	eor.w	r3, r3, #1
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 800af58:	230b      	movs	r3, #11
 800af5a:	e01b      	b.n	800af94 <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7fe fd05 	bl	800996c <ndefRecordGetNdefType>
 800af62:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 800af6a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f010 fa9f 	bl	801b4b4 <memcpy>
        return ERR_NONE;
 800af76:	2300      	movs	r3, #0
 800af78:	e00c      	b.n	800af94 <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d801      	bhi.n	800af86 <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 800af82:	230b      	movs	r3, #11
 800af84:	e006      	b.n	800af94 <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	330c      	adds	r3, #12
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff ff9d 	bl	800aecc <ndefPayloadToRtdUri>
 800af92:	4603      	mov	r3, r0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	0801d27c 	.word	0x0801d27c

0800afa0 <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d006      	beq.n	800afbe <ndefRtdUriToRecord+0x1e>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d102      	bne.n	800afbe <ndefRtdUriToRecord+0x1e>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800afbe:	2307      	movs	r3, #7
 800afc0:	e00c      	b.n	800afdc <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800afc2:	6838      	ldr	r0, [r7, #0]
 800afc4:	f7fd fcf0 	bl	80089a8 <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 800afc8:	4a06      	ldr	r2, [pc, #24]	; (800afe4 <ndefRtdUriToRecord+0x44>)
 800afca:	2101      	movs	r1, #1
 800afcc:	6838      	ldr	r0, [r7, #0]
 800afce:	f7fd fd6c 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 800afd2:	6879      	ldr	r1, [r7, #4]
 800afd4:	6838      	ldr	r0, [r7, #0]
 800afd6:	f7fe fc91 	bl	80098fc <ndefRecordSetNdefType>

    return ERR_NONE;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	0801d27c 	.word	0x0801d27c

0800afe8 <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <ndefRtdAar+0x26>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <ndefRtdAar+0x26>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 800b00e:	2307      	movs	r3, #7
 800b010:	e01a      	b.n	800b048 <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2204      	movs	r2, #4
 800b016:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	330c      	adds	r3, #12
 800b028:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 800b02a:	4a0a      	ldr	r2, [pc, #40]	; (800b054 <ndefRtdAar+0x6c>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 800b030:	220f      	movs	r2, #15
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	0801d25c 	.word	0x0801d25c

0800b058 <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <ndefGetRtdAar+0x1e>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d102      	bne.n	800b076 <ndefGetRtdAar+0x1e>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 800b076:	2307      	movs	r3, #7
 800b078:	e00b      	b.n	800b092 <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	330c      	adds	r3, #12
 800b07e:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	bc80      	pop	{r7}
 800b09a:	4770      	bx	lr

0800b09c <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <ndefRecordToRtdAar+0x16>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 800b0b2:	2307      	movs	r3, #7
 800b0b4:	e013      	b.n	800b0de <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 800b0b6:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <ndefRecordToRtdAar+0x4c>)
 800b0b8:	2104      	movs	r1, #4
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7fd fd4a 	bl	8008b54 <ndefRecordTypeMatch>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f083 0301 	eor.w	r3, r3, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 800b0cc:	230b      	movs	r3, #11
 800b0ce:	e006      	b.n	800b0de <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	330c      	adds	r3, #12
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6838      	ldr	r0, [r7, #0]
 800b0d8:	f7ff ff86 	bl	800afe8 <ndefRtdAar>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0801d284 	.word	0x0801d284

0800b0ec <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <ndefRtdAarToRecord+0x1e>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b04      	cmp	r3, #4
 800b102:	d102      	bne.n	800b10a <ndefRtdAarToRecord+0x1e>
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800b10a:	2307      	movs	r3, #7
 800b10c:	e011      	b.n	800b132 <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	330c      	adds	r3, #12
 800b112:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 800b114:	6838      	ldr	r0, [r7, #0]
 800b116:	f7fd fc47 	bl	80089a8 <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 800b11a:	4a08      	ldr	r2, [pc, #32]	; (800b13c <ndefRtdAarToRecord+0x50>)
 800b11c:	2104      	movs	r1, #4
 800b11e:	6838      	ldr	r0, [r7, #0]
 800b120:	f7fd fcc3 	bl	8008aaa <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3308      	adds	r3, #8
 800b128:	4619      	mov	r1, r3
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f7fd fd92 	bl	8008c54 <ndefRecordSetPayload>

    return ERR_NONE;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	0801d284 	.word	0x0801d284

0800b140 <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <ndefPollerContextInitialization+0x16>
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 800b156:	2307      	movs	r3, #7
 800b158:	e019      	b.n	800b18e <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 800b15a:	6838      	ldr	r0, [r7, #0]
 800b15c:	f000 fa02 	bl	800b564 <ndefPollerGetDeviceType>
 800b160:	4603      	mov	r3, r0
 800b162:	461a      	mov	r2, r3
 800b164:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <ndefPollerContextInitialization+0x58>)
 800b166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 800b17a:	2318      	movs	r3, #24
 800b17c:	e007      	b.n	800b18e <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	4798      	blx	r3
 800b18c:	4603      	mov	r3, r0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20000118 	.word	0x20000118

0800b19c <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 800b1ac:	2307      	movs	r3, #7
 800b1ae:	e00e      	b.n	800b1ce <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 800b1ba:	2321      	movs	r3, #33	; 0x21
 800b1bc:	e007      	b.n	800b1ce <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
 800b1cc:	4603      	mov	r3, r0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800b1d6:	b590      	push	{r4, r7, lr}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	60f8      	str	r0, [r7, #12]
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 800b1ea:	2307      	movs	r3, #7
 800b1ec:	e010      	b.n	800b210 <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 800b1f8:	2321      	movs	r3, #33	; 0x21
 800b1fa:	e009      	b.n	800b210 <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b202:	68dc      	ldr	r4, [r3, #12]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	47a0      	blx	r4
 800b20e:	4603      	mov	r3, r0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bd90      	pop	{r4, r7, pc}

0800b218 <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 800b22a:	2307      	movs	r3, #7
 800b22c:	e00f      	b.n	800b24e <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 800b238:	2321      	movs	r3, #33	; 0x21
 800b23a:	e008      	b.n	800b24e <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	4798      	blx	r3
 800b24c:	4603      	mov	r3, r0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 800b268:	2307      	movs	r3, #7
 800b26a:	e00f      	b.n	800b28c <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 800b276:	2321      	movs	r3, #33	; 0x21
 800b278:	e008      	b.n	800b28c <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	4798      	blx	r3
 800b28a:	4603      	mov	r3, r0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800b294:	b590      	push	{r4, r7, lr}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 800b2a8:	2307      	movs	r3, #7
 800b2aa:	e010      	b.n	800b2ce <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 800b2b6:	2321      	movs	r3, #33	; 0x21
 800b2b8:	e009      	b.n	800b2ce <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2c0:	691c      	ldr	r4, [r3, #16]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	47a0      	blx	r4
 800b2cc:	4603      	mov	r3, r0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd90      	pop	{r4, r7, pc}

0800b2d6 <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 800b2e6:	2307      	movs	r3, #7
 800b2e8:	e00e      	b.n	800b308 <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 800b2f4:	2321      	movs	r3, #33	; 0x21
 800b2f6:	e007      	b.n	800b308 <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	4798      	blx	r3
 800b306:	4603      	mov	r3, r0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 800b320:	2307      	movs	r3, #7
 800b322:	e00e      	b.n	800b342 <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800b32e:	2321      	movs	r3, #33	; 0x21
 800b330:	e007      	b.n	800b342 <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	4798      	blx	r3
 800b340:	4603      	mov	r3, r0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 800b35a:	2307      	movs	r3, #7
 800b35c:	e00e      	b.n	800b37c <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800b368:	2321      	movs	r3, #33	; 0x21
 800b36a:	e007      	b.n	800b37c <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
 800b37a:	4603      	mov	r3, r0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08e      	sub	sp, #56	; 0x38
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <ndefPollerWriteMessage+0x16>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 800b39a:	2307      	movs	r3, #7
 800b39c:	e0de      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d006      	beq.n	800b3b6 <ndefPollerWriteMessage+0x32>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d001      	beq.n	800b3b6 <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800b3b2:	2321      	movs	r3, #33	; 0x21
 800b3b4:	e0d2      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 800b3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6838      	ldr	r0, [r7, #0]
 800b3be:	f7fd f9af 	bl	8008720 <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ff85 	bl	800b2d6 <ndefPollerCheckAvailableSpace>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800b3d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800b3d6:	2307      	movs	r3, #7
 800b3d8:	e0c0      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff ff96 	bl	800b310 <ndefPollerBeginWriteMessage>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800b3e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 800b3f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3f8:	e0b0      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 80ac 	beq.w	800b55a <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b408:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <ndefPollerWriteMessage+0x92>
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	e000      	b.n	800b418 <ndefPollerWriteMessage+0x94>
 800b416:	2300      	movs	r3, #0
 800b418:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 800b41a:	e08a      	b.n	800b532 <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 800b41c:	f107 031c 	add.w	r3, r7, #28
 800b420:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 800b422:	2307      	movs	r3, #7
 800b424:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 800b426:	f107 0314 	add.w	r3, r7, #20
 800b42a:	4619      	mov	r1, r3
 800b42c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b42e:	f7fd fd61 	bl	8008ef4 <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ff2b 	bl	800b294 <ndefPollerWriteBytes>
 800b43e:	4603      	mov	r3, r0
 800b440:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 800b442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <ndefPollerWriteMessage+0xc8>
            {
                return err;
 800b448:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b44a:	e087      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b450:	4413      	add	r3, r2
 800b452:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 800b454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b456:	785b      	ldrb	r3, [r3, #1]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d018      	beq.n	800b48e <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff ff14 	bl	800b294 <ndefPollerWriteBytes>
 800b46c:	4603      	mov	r3, r0
 800b46e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800b470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b472:	2b00      	cmp	r3, #0
 800b474:	d005      	beq.n	800b482 <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800b47e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b480:	e06c      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 800b482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	461a      	mov	r2, r3
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	4413      	add	r3, r2
 800b48c:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	789b      	ldrb	r3, [r3, #2]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d018      	beq.n	800b4c8 <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 800b496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b49c:	789b      	ldrb	r3, [r3, #2]
 800b49e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff fef7 	bl	800b294 <ndefPollerWriteBytes>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800b4aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d005      	beq.n	800b4bc <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800b4b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ba:	e04f      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	789b      	ldrb	r3, [r3, #2]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	4413      	add	r3, r2
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 800b4c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4ca:	f7fd fe5a 	bl	8009182 <ndefRecordGetPayloadLength>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d026      	beq.n	800b522 <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800b4da:	e017      	b.n	800b50c <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fed3 	bl	800b294 <ndefPollerWriteBytes>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 800b4f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 800b500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b502:	e02b      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b508:	4413      	add	r3, r2
 800b50a:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800b50c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b510:	f107 030c 	add.w	r3, r7, #12
 800b514:	4619      	mov	r1, r3
 800b516:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b518:	f7fd fe56 	bl	80091c8 <ndefRecordGetPayloadItem>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1dc      	bne.n	800b4dc <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <ndefPollerWriteMessage+0x1aa>
 800b528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	e000      	b.n	800b530 <ndefPollerWriteMessage+0x1ac>
 800b52e:	2300      	movs	r3, #0
 800b530:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 800b532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b534:	2b00      	cmp	r3, #0
 800b536:	f47f af71 	bne.w	800b41c <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff ff03 	bl	800b34a <ndefPollerEndWriteMessage>
 800b544:	4603      	mov	r3, r0
 800b546:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 800b548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d005      	beq.n	800b55a <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 800b556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b558:	e000      	b.n	800b55c <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3738      	adds	r7, #56	; 0x38
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
 800b576:	e032      	b.n	800b5de <ndefPollerGetDeviceType+0x7a>
    }
    else
    {
        switch( dev->type )
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d82b      	bhi.n	800b5d8 <ndefPollerGetDeviceType+0x74>
 800b580:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <ndefPollerGetDeviceType+0x24>)
 800b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b586:	bf00      	nop
 800b588:	0800b599 	.word	0x0800b599
 800b58c:	0800b5c7 	.word	0x0800b5c7
 800b590:	0800b5cd 	.word	0x0800b5cd
 800b594:	0800b5d3 	.word	0x0800b5d3
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	785b      	ldrb	r3, [r3, #1]
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	d00b      	beq.n	800b5b8 <ndefPollerGetDeviceType+0x54>
 800b5a0:	2b20      	cmp	r3, #32
 800b5a2:	dc0c      	bgt.n	800b5be <ndefPollerGetDeviceType+0x5a>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d004      	beq.n	800b5b2 <ndefPollerGetDeviceType+0x4e>
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d108      	bne.n	800b5be <ndefPollerGetDeviceType+0x5a>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
                    break; 
 800b5b0:	e008      	b.n	800b5c4 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	73fb      	strb	r3, [r7, #15]
                    break;
 800b5b6:	e005      	b.n	800b5c4 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 800b5b8:	2304      	movs	r3, #4
 800b5ba:	73fb      	strb	r3, [r7, #15]
                    break;
 800b5bc:	e002      	b.n	800b5c4 <ndefPollerGetDeviceType+0x60>
                default:
                    type = NDEF_DEV_NONE;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
                    break;
 800b5c2:	bf00      	nop
            }
            break;
 800b5c4:	e00b      	b.n	800b5de <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	73fb      	strb	r3, [r7, #15]
            break;
 800b5ca:	e008      	b.n	800b5de <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	73fb      	strb	r3, [r7, #15]
            break;
 800b5d0:	e005      	b.n	800b5de <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 800b5d2:	2305      	movs	r3, #5
 800b5d4:	73fb      	strb	r3, [r7, #15]
            break;
 800b5d6:	e002      	b.n	800b5de <ndefPollerGetDeviceType+0x7a>
        default:
            type = NDEF_DEV_NONE;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]
            break;
 800b5dc:	bf00      	nop
        }
    }
    return type;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop

0800b5ec <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00a      	beq.n	800b616 <ndefT2TPollerReadBlock+0x2a>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <ndefT2TPollerReadBlock+0x2a>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	785b      	ldrb	r3, [r3, #1]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <ndefT2TPollerReadBlock+0x2a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 800b616:	2307      	movs	r3, #7
 800b618:	e02c      	b.n	800b674 <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800b61a:	897b      	ldrh	r3, [r7, #10]
 800b61c:	0a1b      	lsrs	r3, r3, #8
 800b61e:	b29b      	uxth	r3, r3
 800b620:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800b622:	897b      	ldrh	r3, [r7, #10]
 800b624:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b62c:	7dfa      	ldrb	r2, [r7, #23]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d00e      	beq.n	800b650 <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	4618      	mov	r0, r3
 800b636:	f00f fbeb 	bl	801ae10 <rfalT2TPollerSectorSelect>
 800b63a:	4603      	mov	r3, r0
 800b63c:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800b63e:	8abb      	ldrh	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 800b644:	8abb      	ldrh	r3, [r7, #20]
 800b646:	e015      	b.n	800b674 <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	7dfa      	ldrb	r2, [r7, #23]
 800b64c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 800b650:	f107 0312 	add.w	r3, r7, #18
 800b654:	7db8      	ldrb	r0, [r7, #22]
 800b656:	2210      	movs	r2, #16
 800b658:	6879      	ldr	r1, [r7, #4]
 800b65a:	f00f fb65 	bl	801ad28 <rfalT2TPollerRead>
 800b65e:	4603      	mov	r3, r0
 800b660:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 800b662:	8abb      	ldrh	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d104      	bne.n	800b672 <ndefT2TPollerReadBlock+0x86>
 800b668:	8a7b      	ldrh	r3, [r7, #18]
 800b66a:	2b10      	cmp	r3, #16
 800b66c:	d001      	beq.n	800b672 <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 800b66e:	230b      	movs	r3, #11
 800b670:	e000      	b.n	800b674 <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 800b672:	8abb      	ldrh	r3, [r7, #20]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08a      	sub	sp, #40	; 0x28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00e      	beq.n	800b6ba <ndefT2TPollerReadBytes+0x3e>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10a      	bne.n	800b6ba <ndefT2TPollerReadBytes+0x3e>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	785b      	ldrb	r3, [r3, #1]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <ndefT2TPollerReadBytes+0x3e>
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <ndefT2TPollerReadBytes+0x3e>
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 800b6b8:	d901      	bls.n	800b6be <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800b6ba:	2307      	movs	r3, #7
 800b6bc:	e0a7      	b.n	800b80e <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d31e      	bcc.n	800b708 <ndefT2TPollerReadBytes+0x8c>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b6d0:	3310      	adds	r3, #16
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d217      	bcs.n	800b708 <ndefT2TPollerReadBytes+0x8c>
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	441a      	add	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b6e4:	3310      	adds	r3, #16
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d20e      	bcs.n	800b708 <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	33b0      	adds	r3, #176	; 0xb0
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3305      	adds	r3, #5
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4619      	mov	r1, r3
 800b700:	69b8      	ldr	r0, [r7, #24]
 800b702:	f00f fed7 	bl	801b4b4 <memcpy>
 800b706:	e07b      	b.n	800b800 <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	089b      	lsrs	r3, r3, #2
 800b70c:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	b2db      	uxtb	r3, r3
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2b0f      	cmp	r3, #15
 800b71c:	d802      	bhi.n	800b724 <ndefT2TPollerReadBytes+0xa8>
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	e000      	b.n	800b726 <ndefT2TPollerReadBytes+0xaa>
 800b724:	2310      	movs	r3, #16
 800b726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 800b72a:	7d7b      	ldrb	r3, [r7, #21]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d102      	bne.n	800b736 <ndefT2TPollerReadBytes+0xba>
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	2b0f      	cmp	r3, #15
 800b734:	d834      	bhi.n	800b7a0 <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800b73c:	8afb      	ldrh	r3, [r7, #22]
 800b73e:	4619      	mov	r1, r3
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff ff53 	bl	800b5ec <ndefT2TPollerReadBlock>
 800b746:	4603      	mov	r3, r0
 800b748:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800b74a:	8a7b      	ldrh	r3, [r7, #18]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d006      	beq.n	800b75e <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f04f 32ff 	mov.w	r2, #4294967295
 800b756:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 800b75a:	8a7b      	ldrh	r3, [r7, #18]
 800b75c:	e057      	b.n	800b80e <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800b75e:	8afb      	ldrh	r3, [r7, #22]
 800b760:	009a      	lsls	r2, r3, #2
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 800b768:	7d7b      	ldrb	r3, [r7, #21]
 800b76a:	f1c3 0210 	rsb	r2, r3, #16
 800b76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b772:	429a      	cmp	r2, r3
 800b774:	d204      	bcs.n	800b780 <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 800b776:	7d7b      	ldrb	r3, [r7, #21]
 800b778:	f1c3 0310 	rsb	r3, r3, #16
 800b77c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 800b780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b784:	2b00      	cmp	r3, #0
 800b786:	d029      	beq.n	800b7dc <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 800b788:	7d7b      	ldrb	r3, [r7, #21]
 800b78a:	33b0      	adds	r3, #176	; 0xb0
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	3305      	adds	r3, #5
 800b792:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b796:	4619      	mov	r1, r3
 800b798:	69b8      	ldr	r0, [r7, #24]
 800b79a:	f00f fe8b 	bl	801b4b4 <memcpy>
                if( le > 0U)
 800b79e:	e01d      	b.n	800b7dc <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 800b7a0:	8afb      	ldrh	r3, [r7, #22]
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f7ff ff20 	bl	800b5ec <ndefT2TPollerReadBlock>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 800b7b6:	8a7b      	ldrh	r3, [r7, #18]
 800b7b8:	e029      	b.n	800b80e <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 800b7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d10b      	bne.n	800b7dc <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	33b5      	adds	r3, #181	; 0xb5
 800b7c8:	2210      	movs	r2, #16
 800b7ca:	69b9      	ldr	r1, [r7, #24]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f00f fe71 	bl	801b4b4 <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800b7d2:	8afb      	ldrh	r3, [r7, #22]
 800b7d4:	009a      	lsls	r2, r3, #2
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 800b7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e0:	69ba      	ldr	r2, [r7, #24]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 800b7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ea:	6a3a      	ldr	r2, [r7, #32]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 800b7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d183      	bne.n	800b708 <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3728      	adds	r7, #40	; 0x28
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <ndefT2TPollerContextInitialization+0x26>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <ndefT2TPollerContextInitialization+0x26>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d103      	bne.n	800b83c <ndefT2TPollerContextInitialization+0x26>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	785b      	ldrb	r3, [r3, #1]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 800b83c:	2307      	movs	r3, #7
 800b83e:	e013      	b.n	800b868 <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2278      	movs	r2, #120	; 0x78
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	4618      	mov	r0, r3
 800b848:	f00f fe34 	bl	801b4b4 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af02      	add	r7, sp, #8
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d011      	beq.n	800b8a4 <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2200      	movs	r2, #0
 800b884:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2200      	movs	r2, #0
 800b890:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2200      	movs	r2, #0
 800b896:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d007      	beq.n	800b8ba <ndefT2TPollerNdefDetect+0x4a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <ndefT2TPollerNdefDetect+0x4a>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	785b      	ldrb	r3, [r3, #1]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800b8ba:	2307      	movs	r3, #7
 800b8bc:	e134      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
    }

    ctx->state = NDEF_STATE_INVALID;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	339c      	adds	r3, #156	; 0x9c
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	9200      	str	r2, [sp, #0]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	210c      	movs	r1, #12
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff fed2 	bl	800b67c <ndefT2TPollerReadBytes>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 800b8dc:	8a3b      	ldrh	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <ndefT2TPollerNdefDetect+0x76>
    {
        /* Conclude procedure */
        return ret;
 800b8e2:	8a3b      	ldrh	r3, [r7, #16]
 800b8e4:	e120      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b8f8:	091b      	lsrs	r3, r3, #4
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b908:	f003 030f 	and.w	r3, r3, #15
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b926:	091b      	lsrs	r3, r3, #4
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b948:	00da      	lsls	r2, r3, #3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b956:	2be1      	cmp	r3, #225	; 0xe1
 800b958:	d104      	bne.n	800b964 <ndefT2TPollerNdefDetect+0xf4>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b960:	2b01      	cmp	r3, #1
 800b962:	d901      	bls.n	800b968 <ndefT2TPollerNdefDetect+0xf8>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 800b964:	2305      	movs	r3, #5
 800b966:	e0df      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 800b968:	2310      	movs	r3, #16
 800b96a:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800b96c:	e0d1      	b.n	800bb12 <ndefT2TPollerNdefDetect+0x2a2>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800b96e:	f107 030c 	add.w	r3, r7, #12
 800b972:	2200      	movs	r2, #0
 800b974:	9200      	str	r2, [sp, #0]
 800b976:	2201      	movs	r2, #1
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff fe7e 	bl	800b67c <ndefT2TPollerReadBytes>
 800b980:	4603      	mov	r3, r0
 800b982:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800b984:	8a3b      	ldrh	r3, [r7, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <ndefT2TPollerNdefDetect+0x11e>
        {
            /* Conclude procedure */
            return ret;
 800b98a:	8a3b      	ldrh	r3, [r7, #16]
 800b98c:	e0cc      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
        }
        typeTLV = data[0];
 800b98e:	7b3b      	ldrb	r3, [r7, #12]
 800b990:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	2b03      	cmp	r3, #3
 800b996:	d103      	bne.n	800b9a0 <ndefT2TPollerNdefDetect+0x130>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	2bfe      	cmp	r3, #254	; 0xfe
 800b9aa:	f000 80bb 	beq.w	800bb24 <ndefT2TPollerNdefDetect+0x2b4>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d100      	bne.n	800b9b6 <ndefT2TPollerNdefDetect+0x146>
        {
            continue;
 800b9b4:	e0ad      	b.n	800bb12 <ndefT2TPollerNdefDetect+0x2a2>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800b9b6:	f107 030c 	add.w	r3, r7, #12
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	9200      	str	r2, [sp, #0]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	6979      	ldr	r1, [r7, #20]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff fe5a 	bl	800b67c <ndefT2TPollerReadBytes>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800b9cc:	8a3b      	ldrh	r3, [r7, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <ndefT2TPollerNdefDetect+0x166>
        {
            /* Conclude procedure */
            return ret;
 800b9d2:	8a3b      	ldrh	r3, [r7, #16]
 800b9d4:	e0a8      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset++;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 800b9dc:	7b3b      	ldrb	r3, [r7, #12]
 800b9de:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 800b9e0:	8a7b      	ldrh	r3, [r7, #18]
 800b9e2:	2bff      	cmp	r3, #255	; 0xff
 800b9e4:	d11d      	bne.n	800ba22 <ndefT2TPollerNdefDetect+0x1b2>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 800b9e6:	f107 030c 	add.w	r3, r7, #12
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	9200      	str	r2, [sp, #0]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	6979      	ldr	r1, [r7, #20]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff fe42 	bl	800b67c <ndefT2TPollerReadBytes>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 800b9fc:	8a3b      	ldrh	r3, [r7, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <ndefT2TPollerNdefDetect+0x196>
            {
                /* Conclude procedure */
                return ret;
 800ba02:	8a3b      	ldrh	r3, [r7, #16]
 800ba04:	e090      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
            }
            offset += 2U;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	3302      	adds	r3, #2
 800ba0a:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 800ba0c:	7b3b      	ldrb	r3, [r7, #12]
 800ba0e:	021b      	lsls	r3, r3, #8
 800ba10:	b21a      	sxth	r2, r3
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	3301      	adds	r3, #1
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	b21b      	sxth	r3, r3
 800ba20:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d002      	beq.n	800ba2e <ndefT2TPollerNdefDetect+0x1be>
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d101      	bne.n	800ba32 <ndefT2TPollerNdefDetect+0x1c2>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 800ba2e:	2305      	movs	r3, #5
 800ba30:	e07a      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d168      	bne.n	800bb0a <ndefT2TPollerNdefDetect+0x29a>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 800ba38:	8a7a      	ldrh	r2, [r7, #18]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d110      	bne.n	800ba74 <ndefT2TPollerNdefDetect+0x204>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <ndefT2TPollerNdefDetect+0x1f6>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <ndefT2TPollerNdefDetect+0x1fa>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 800ba66:	2305      	movs	r3, #5
 800ba68:	e05e      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800ba72:	e01e      	b.n	800bab2 <ndefT2TPollerNdefDetect+0x242>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d109      	bne.n	800ba92 <ndefT2TPollerNdefDetect+0x222>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d104      	bne.n	800ba92 <ndefT2TPollerNdefDetect+0x222>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800ba90:	e00f      	b.n	800bab2 <ndefT2TPollerNdefDetect+0x242>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d104      	bne.n	800baa6 <ndefT2TPollerNdefDetect+0x236>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800baa2:	2b0f      	cmp	r3, #15
 800baa4:	d001      	beq.n	800baaa <ndefT2TPollerNdefDetect+0x23a>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 800baa6:	2305      	movs	r3, #5
 800baa8:	e03e      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2203      	movs	r2, #3
 800baae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d026      	beq.n	800bb06 <ndefT2TPollerNdefDetect+0x296>
            {
                info->state                = ctx->state;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800bac8:	091b      	lsrs	r3, r3, #4
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800bad6:	f003 030f 	and.w	r3, r3, #15
 800bada:	b2da      	uxtb	r2, r3
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baf6:	1ad2      	subs	r2, r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e00e      	b.n	800bb28 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset += lenTLV;
 800bb0a:	8a7b      	ldrh	r3, [r7, #18]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4413      	add	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb18:	3310      	adds	r3, #16
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	f4ff af26 	bcc.w	800b96e <ndefT2TPollerNdefDetect+0xfe>
 800bb22:	e000      	b.n	800bb26 <ndefT2TPollerNdefDetect+0x2b6>
            break;
 800bb24:	bf00      	nop
    }
    return ERR_REQUEST;
 800bb26:	2305      	movs	r3, #5
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <ndefT2TPollerReadRawMessage+0x2a>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <ndefT2TPollerReadRawMessage+0x2a>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <ndefT2TPollerReadRawMessage+0x2a>
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 800bb5a:	2307      	movs	r3, #7
 800bb5c:	e024      	b.n	800bba8 <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d801      	bhi.n	800bb6c <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800bb68:	2321      	movs	r3, #33	; 0x21
 800bb6a:	e01d      	b.n	800bba8 <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d201      	bcs.n	800bb7c <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e015      	b.n	800bba8 <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fd74 	bl	800b67c <ndefT2TPollerReadBytes>
 800bb94:	4603      	mov	r3, r0
 800bb96:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bb98:	8afb      	ldrh	r3, [r7, #22]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800bba6:	8afb      	ldrh	r3, [r7, #22]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <ndefT2TPollerWriteBlock+0x2a>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <ndefT2TPollerWriteBlock+0x2a>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	785b      	ldrb	r3, [r3, #1]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <ndefT2TPollerWriteBlock+0x2a>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 800bbda:	2307      	movs	r3, #7
 800bbdc:	e022      	b.n	800bc24 <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800bbde:	897b      	ldrh	r3, [r7, #10]
 800bbe0:	0a1b      	lsrs	r3, r3, #8
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800bbe6:	897b      	ldrh	r3, [r7, #10]
 800bbe8:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800bbf0:	7dfa      	ldrb	r2, [r7, #23]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d00e      	beq.n	800bc14 <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f00f f909 	bl	801ae10 <rfalT2TPollerSectorSelect>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800bc02:	8abb      	ldrh	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 800bc08:	8abb      	ldrh	r3, [r7, #20]
 800bc0a:	e00b      	b.n	800bc24 <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	7dfa      	ldrb	r2, [r7, #23]
 800bc10:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 800bc14:	7dbb      	ldrb	r3, [r7, #22]
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f00f f8c1 	bl	801ada0 <rfalT2TPollerWrite>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	82bb      	strh	r3, [r7, #20]

    return ret;
 800bc22:	8abb      	ldrh	r3, [r7, #20]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08e      	sub	sp, #56	; 0x38
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00a      	beq.n	800bc62 <ndefT2TPollerWriteBytes+0x36>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d106      	bne.n	800bc62 <ndefT2TPollerWriteBytes+0x36>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <ndefT2TPollerWriteBytes+0x36>
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 800bc62:	2307      	movs	r3, #7
 800bc64:	e076      	b.n	800bd54 <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	089b      	lsrs	r3, r3, #2
 800bc74:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d802      	bhi.n	800bc8e <ndefT2TPollerWriteBytes+0x62>
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	e000      	b.n	800bc90 <ndefT2TPollerWriteBytes+0x64>
 800bc8e:	2304      	movs	r3, #4
 800bc90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 800bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <ndefT2TPollerWriteBytes+0x76>
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d838      	bhi.n	800bd14 <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 800bca2:	f107 0214 	add.w	r2, r7, #20
 800bca6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bca8:	4619      	mov	r1, r3
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7ff fc9e 	bl	800b5ec <ndefT2TPollerReadBlock>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bcb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 800bcba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcbc:	e04a      	b.n	800bd54 <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800bcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc2:	f1c3 0204 	rsb	r2, r3, #4
 800bcc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d205      	bcs.n	800bcda <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800bcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcd2:	f1c3 0304 	rsb	r3, r3, #4
 800bcd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 800bcda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 800bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce6:	f107 0214 	add.w	r2, r7, #20
 800bcea:	4413      	add	r3, r2
 800bcec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bcf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f00f fbde 	bl	801b4b4 <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 800bcf8:	f107 0214 	add.w	r2, r7, #20
 800bcfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f7ff ff55 	bl	800bbb0 <ndefT2TPollerWriteBlock>
 800bd06:	4603      	mov	r3, r0
 800bd08:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bd0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00e      	beq.n	800bd2e <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800bd10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd12:	e01f      	b.n	800bd54 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 800bd14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff ff48 	bl	800bbb0 <ndefT2TPollerWriteBlock>
 800bd20:	4603      	mov	r3, r0
 800bd22:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bd24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800bd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2c:	e012      	b.n	800bd54 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 800bd2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd34:	4413      	add	r3, r2
 800bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 800bd38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd3e:	4413      	add	r3, r2
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 800bd42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d18e      	bne.n	800bc70 <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3738      	adds	r7, #56	; 0x38
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <ndefT2TPollerWriteRawMessageLen+0x20>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <ndefT2TPollerWriteRawMessageLen+0x20>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	785b      	ldrb	r3, [r3, #1]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 800bd7c:	2307      	movs	r3, #7
 800bd7e:	e077      	b.n	800be70 <ndefT2TPollerWriteRawMessageLen+0x114>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d006      	beq.n	800bd98 <ndefT2TPollerWriteRawMessageLen+0x3c>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d001      	beq.n	800bd98 <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 800bd94:	2321      	movs	r3, #33	; 0x21
 800bd96:	e06b      	b.n	800be70 <ndefT2TPollerWriteRawMessageLen+0x114>
    }
    dataIt = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	3310      	adds	r3, #16
 800bda0:	443b      	add	r3, r7
 800bda2:	2203      	movs	r2, #3
 800bda4:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2bfe      	cmp	r3, #254	; 0xfe
 800bdb2:	d80a      	bhi.n	800bdca <ndefT2TPollerWriteRawMessageLen+0x6e>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	b2d2      	uxtb	r2, r2
 800bdba:	3310      	adds	r3, #16
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]
 800bdc8:	e014      	b.n	800bdf4 <ndefT2TPollerWriteRawMessageLen+0x98>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	0a1a      	lsrs	r2, r3, #8
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	443b      	add	r3, r7
 800bdd6:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	3301      	adds	r3, #1
 800bdde:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	b2d2      	uxtb	r2, r2
 800bde6:	3310      	adds	r3, #16
 800bde8:	443b      	add	r3, r7
 800bdea:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d108      	bne.n	800be0c <ndefT2TPollerWriteRawMessageLen+0xb0>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	3310      	adds	r3, #16
 800bdfe:	443b      	add	r3, r7
 800be00:	22fe      	movs	r2, #254	; 0xfe
 800be02:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	3301      	adds	r3, #1
 800be0a:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	f107 0208 	add.w	r2, r7, #8
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff07 	bl	800bc2c <ndefT2TPollerWriteBytes>
 800be1e:	4603      	mov	r3, r0
 800be20:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 800be22:	89bb      	ldrh	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d022      	beq.n	800be6e <ndefT2TPollerWriteRawMessageLen+0x112>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d01f      	beq.n	800be6e <ndefT2TPollerWriteRawMessageLen+0x112>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	441a      	add	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be3e:	429a      	cmp	r2, r3
 800be40:	d215      	bcs.n	800be6e <ndefT2TPollerWriteRawMessageLen+0x112>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	3310      	adds	r3, #16
 800be4a:	443b      	add	r3, r7
 800be4c:	22fe      	movs	r2, #254	; 0xfe
 800be4e:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	3301      	adds	r3, #1
 800be56:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	18d1      	adds	r1, r2, r3
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	f107 0208 	add.w	r2, r7, #8
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff fedf 	bl	800bc2c <ndefT2TPollerWriteBytes>
    }

    return ret;
 800be6e:	89bb      	ldrh	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00d      	beq.n	800bea6 <ndefT2TPollerWriteRawMessage+0x2e>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d109      	bne.n	800bea6 <ndefT2TPollerWriteRawMessage+0x2e>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d105      	bne.n	800bea6 <ndefT2TPollerWriteRawMessage+0x2e>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <ndefT2TPollerWriteRawMessage+0x32>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 800bea6:	2307      	movs	r3, #7
 800bea8:	e04b      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d006      	beq.n	800bec2 <ndefT2TPollerWriteRawMessage+0x4a>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d001      	beq.n	800bec2 <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800bebe:	2321      	movs	r3, #33	; 0x21
 800bec0:	e03f      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f92c 	bl	800c122 <ndefT2TPollerCheckAvailableSpace>
 800beca:	4603      	mov	r3, r0
 800becc:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bece:	8afb      	ldrh	r3, [r7, #22]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800bed4:	2307      	movs	r3, #7
 800bed6:	e034      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 f957 	bl	800c18e <ndefT2TPollerBeginWriteMessage>
 800bee0:	4603      	mov	r3, r0
 800bee2:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bee4:	8afb      	ldrh	r3, [r7, #22]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800bef2:	8afb      	ldrh	r3, [r7, #22]
 800bef4:	e025      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d021      	beq.n	800bf40 <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7ff fe90 	bl	800bc2c <ndefT2TPollerWriteBytes>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800bf10:	8afb      	ldrh	r3, [r7, #22]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d005      	beq.n	800bf22 <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800bf1e:	8afb      	ldrh	r3, [r7, #22]
 800bf20:	e00f      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f984 	bl	800c232 <ndefT2TPollerEndWriteMessage>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800bf2e:	8afb      	ldrh	r3, [r7, #22]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800bf3c:	8afb      	ldrh	r3, [r7, #22]
 800bf3e:	e000      	b.n	800bf42 <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 800bf40:	8afb      	ldrh	r3, [r7, #22]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d007      	beq.n	800bf6e <ndefT2TPollerTagFormat+0x22>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <ndefT2TPollerTagFormat+0x22>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800bf6e:	2307      	movs	r3, #7
 800bf70:	e0a0      	b.n	800c0b4 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	339c      	adds	r3, #156	; 0x9c
 800bf76:	2200      	movs	r2, #0
 800bf78:	9200      	str	r2, [sp, #0]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	210c      	movs	r1, #12
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff fb7c 	bl	800b67c <ndefT2TPollerReadBytes>
 800bf84:	4603      	mov	r3, r0
 800bf86:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bf88:	8afb      	ldrh	r3, [r7, #22]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <ndefT2TPollerTagFormat+0x46>
    {
        return ret;
 800bf8e:	8afb      	ldrh	r3, [r7, #22]
 800bf90:	e090      	b.n	800c0b4 <ndefT2TPollerTagFormat+0x168>
    }

    ndefT2TInvalidateCache(ctx);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f04f 32ff 	mov.w	r2, #4294967295
 800bf98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d17e      	bne.n	800c0a4 <ndefT2TPollerTagFormat+0x158>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d179      	bne.n	800c0a4 <ndefT2TPollerTagFormat+0x158>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d174      	bne.n	800c0a4 <ndefT2TPollerTagFormat+0x158>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d16f      	bne.n	800c0a4 <ndefT2TPollerTagFormat+0x158>
    {
        dataIt = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d124      	bne.n	800c018 <ndefT2TPollerTagFormat+0xcc>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800bfce:	7d7b      	ldrb	r3, [r7, #21]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	22e1      	movs	r2, #225	; 0xe1
 800bfd6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bfda:	7d7b      	ldrb	r3, [r7, #21]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800bfe0:	7d7b      	ldrb	r3, [r7, #21]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	2210      	movs	r2, #16
 800bfe8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bfec:	7d7b      	ldrb	r3, [r7, #21]
 800bfee:	3301      	adds	r3, #1
 800bff0:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800bff2:	7d7b      	ldrb	r3, [r7, #21]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	2206      	movs	r2, #6
 800bffa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bffe:	7d7b      	ldrb	r3, [r7, #21]
 800c000:	3301      	adds	r3, #1
 800c002:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 800c004:	7d7b      	ldrb	r3, [r7, #21]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4413      	add	r3, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800c010:	7d7b      	ldrb	r3, [r7, #21]
 800c012:	3301      	adds	r3, #1
 800c014:	757b      	strb	r3, [r7, #21]
 800c016:	e037      	b.n	800c088 <ndefT2TPollerTagFormat+0x13c>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 800c018:	7d7b      	ldrb	r3, [r7, #21]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	7811      	ldrb	r1, [r2, #0]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	4413      	add	r3, r2
 800c022:	460a      	mov	r2, r1
 800c024:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800c028:	7d7b      	ldrb	r3, [r7, #21]
 800c02a:	3301      	adds	r3, #1
 800c02c:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	785b      	ldrb	r3, [r3, #1]
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	b2d9      	uxtb	r1, r3
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	789a      	ldrb	r2, [r3, #2]
 800c03a:	7d7b      	ldrb	r3, [r7, #21]
 800c03c:	430a      	orrs	r2, r1
 800c03e:	b2d1      	uxtb	r1, r2
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4413      	add	r3, r2
 800c044:	460a      	mov	r2, r1
 800c046:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800c04a:	7d7b      	ldrb	r3, [r7, #21]
 800c04c:	3301      	adds	r3, #1
 800c04e:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 800c050:	7d7b      	ldrb	r3, [r7, #21]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	78d1      	ldrb	r1, [r2, #3]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	4413      	add	r3, r2
 800c05a:	460a      	mov	r2, r1
 800c05c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800c060:	7d7b      	ldrb	r3, [r7, #21]
 800c062:	3301      	adds	r3, #1
 800c064:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	791b      	ldrb	r3, [r3, #4]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	b2d9      	uxtb	r1, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	795a      	ldrb	r2, [r3, #5]
 800c072:	7d7b      	ldrb	r3, [r7, #21]
 800c074:	430a      	orrs	r2, r1
 800c076:	b2d1      	uxtb	r1, r2
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	460a      	mov	r2, r1
 800c07e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800c082:	7d7b      	ldrb	r3, [r7, #21]
 800c084:	3301      	adds	r3, #1
 800c086:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	339c      	adds	r3, #156	; 0x9c
 800c08c:	461a      	mov	r2, r3
 800c08e:	2103      	movs	r1, #3
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff fd8d 	bl	800bbb0 <ndefT2TPollerWriteBlock>
 800c096:	4603      	mov	r3, r0
 800c098:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800c09a:	8afb      	ldrh	r3, [r7, #22]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <ndefT2TPollerTagFormat+0x158>
        {
            return ret;
 800c0a0:	8afb      	ldrh	r3, [r7, #22]
 800c0a2:	e007      	b.n	800c0b4 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 800c0a4:	4a05      	ldr	r2, [pc, #20]	; (800c0bc <ndefT2TPollerTagFormat+0x170>)
 800c0a6:	2104      	movs	r1, #4
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7ff fd81 	bl	800bbb0 <ndefT2TPollerWriteBlock>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	82fb      	strh	r3, [r7, #22]

    return ret;
 800c0b2:	8afb      	ldrh	r3, [r7, #22]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	0801d624 	.word	0x0801d624

0800c0c0 <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d007      	beq.n	800c0de <ndefT2TPollerCheckPresence+0x1e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <ndefT2TPollerCheckPresence+0x1e>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800c0de:	2307      	movs	r3, #7
 800c0e0:	e01b      	b.n	800c11a <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800c0ec:	89fb      	ldrh	r3, [r7, #14]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fa7b 	bl	800b5ec <ndefT2TPollerReadBlock>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 800c0fa:	89bb      	ldrh	r3, [r7, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d006      	beq.n	800c10e <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f04f 32ff 	mov.w	r2, #4294967295
 800c106:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 800c10a:	89bb      	ldrh	r3, [r7, #12]
 800c10c:	e005      	b.n	800c11a <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800c10e:	89fb      	ldrh	r3, [r7, #14]
 800c110:	009a      	lsls	r2, r3, #2
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800c122:	b480      	push	{r7}
 800c124:	b085      	sub	sp, #20
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <ndefT2TPollerCheckAvailableSpace+0x20>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d103      	bne.n	800c142 <ndefT2TPollerCheckAvailableSpace+0x20>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 800c142:	2307      	movs	r3, #7
 800c144:	e01e      	b.n	800c184 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 800c150:	2321      	movs	r3, #33	; 0x21
 800c152:	e017      	b.n	800c184 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2bfe      	cmp	r3, #254	; 0xfe
 800c158:	d901      	bls.n	800c15e <ndefT2TPollerCheckAvailableSpace+0x3c>
 800c15a:	2303      	movs	r3, #3
 800c15c:	e000      	b.n	800c160 <ndefT2TPollerCheckAvailableSpace+0x3e>
 800c15e:	2301      	movs	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	441a      	add	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c178:	3310      	adds	r3, #16
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d901      	bls.n	800c182 <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	bc80      	pop	{r7}
 800c18c:	4770      	bx	lr

0800c18e <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <ndefT2TPollerBeginWriteMessage+0x20>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d103      	bne.n	800c1ae <ndefT2TPollerBeginWriteMessage+0x20>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	785b      	ldrb	r3, [r3, #1]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 800c1ae:	2307      	movs	r3, #7
 800c1b0:	e03b      	b.n	800c22a <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d006      	beq.n	800c1ca <ndefT2TPollerBeginWriteMessage+0x3c>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d001      	beq.n	800c1ca <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 800c1c6:	2321      	movs	r3, #33	; 0x21
 800c1c8:	e02f      	b.n	800c22a <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff fdc5 	bl	800bd5c <ndefT2TPollerWriteRawMessageLen>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800c1d6:	89fb      	ldrh	r3, [r7, #14]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800c1e4:	89fb      	ldrh	r3, [r7, #14]
 800c1e6:	e020      	b.n	800c22a <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2bfe      	cmp	r3, #254	; 0xfe
 800c1ec:	d901      	bls.n	800c1f2 <ndefT2TPollerBeginWriteMessage+0x64>
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e000      	b.n	800c1f4 <ndefT2TPollerBeginWriteMessage+0x66>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	441a      	add	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d007      	beq.n	800c252 <ndefT2TPollerEndWriteMessage+0x20>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d103      	bne.n	800c252 <ndefT2TPollerEndWriteMessage+0x20>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	785b      	ldrb	r3, [r3, #1]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 800c252:	2307      	movs	r3, #7
 800c254:	e025      	b.n	800c2a2 <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d001      	beq.n	800c264 <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800c260:	2321      	movs	r3, #33	; 0x21
 800c262:	e01e      	b.n	800c2a2 <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff fd78 	bl	800bd5c <ndefT2TPollerWriteRawMessageLen>
 800c26c:	4603      	mov	r3, r0
 800c26e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800c270:	89fb      	ldrh	r3, [r7, #14]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d005      	beq.n	800c282 <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800c27e:	89fb      	ldrh	r3, [r7, #14]
 800c280:	e00f      	b.n	800c2a2 <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <ndefT2TPollerEndWriteMessage+0x66>
 800c294:	2201      	movs	r2, #1
 800c296:	e000      	b.n	800c29a <ndefT2TPollerEndWriteMessage+0x68>
 800c298:	2202      	movs	r2, #2
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b08e      	sub	sp, #56	; 0x38
 800c2ae:	af02      	add	r7, sp, #8
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	817b      	strh	r3, [r7, #10]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 800c2c0:	230b      	movs	r3, #11
 800c2c2:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <ndefT3TPollerReadBlocks+0x28>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d001      	beq.n	800c2d6 <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 800c2d2:	2307      	movs	r3, #7
 800c2d4:	e065      	b.n	800c3a2 <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 800c2d6:	7a7b      	ldrb	r3, [r7, #9]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 800c2de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c2e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d201      	bcs.n	800c2ea <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 800c2e6:	2307      	movs	r3, #7
 800c2e8:	e05b      	b.n	800c3a2 <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c2f0:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c2f8:	e017      	b.n	800c32a <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800c2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c302:	4413      	add	r3, r2
 800c304:	2280      	movs	r2, #128	; 0x80
 800c306:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800c308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c30c:	b299      	uxth	r1, r3
 800c30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c316:	4413      	add	r3, r2
 800c318:	897a      	ldrh	r2, [r7, #10]
 800c31a:	440a      	add	r2, r1
 800c31c:	b292      	uxth	r2, r2
 800c31e:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 800c320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c324:	3301      	adds	r3, #1
 800c326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c32a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c32e:	7a7b      	ldrb	r3, [r7, #9]
 800c330:	429a      	cmp	r2, r3
 800c332:	d3e2      	bcc.n	800c2fa <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 800c334:	2301      	movs	r3, #1
 800c336:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800c338:	f107 0310 	add.w	r3, r7, #16
 800c33c:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800c33e:	7a7b      	ldrb	r3, [r7, #9]
 800c340:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	1cd8      	adds	r0, r3, #3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c350:	f107 0114 	add.w	r1, r7, #20
 800c354:	f107 0312 	add.w	r3, r7, #18
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	2350      	movs	r3, #80	; 0x50
 800c35c:	f00a fb10 	bl	8016980 <rfalNfcfPollerCheck>
 800c360:	4603      	mov	r3, r0
 800c362:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 800c364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 800c36a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c36c:	e019      	b.n	800c3a2 <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 800c36e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c370:	3301      	adds	r3, #1
 800c372:	b29a      	uxth	r2, r3
 800c374:	8a7b      	ldrh	r3, [r7, #18]
 800c376:	429a      	cmp	r2, r3
 800c378:	d001      	beq.n	800c37e <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 800c37a:	2305      	movs	r3, #5
 800c37c:	e011      	b.n	800c3a2 <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 800c37e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f203 1305 	addw	r3, r3, #261	; 0x105
 800c38a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f00f f890 	bl	801b4b4 <memcpy>
        if (rcvLen != NULL)
 800c394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 800c39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c39e:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3730      	adds	r7, #48	; 0x30
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800c3aa:	b590      	push	{r4, r7, lr}
 800c3ac:	b08f      	sub	sp, #60	; 0x3c
 800c3ae:	af02      	add	r7, sp, #8
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800c3c8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d0:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800c3d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3d4:	8bfa      	ldrh	r2, [r7, #30]
 800c3d6:	fb02 f303 	mul.w	r3, r2, r3
 800c3da:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	8bbb      	ldrh	r3, [r7, #28]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 800c3e6:	2304      	movs	r3, #4
 800c3e8:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <ndefT3TPollerReadBytes+0x54>
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d102      	bne.n	800c3fe <ndefT3TPollerReadBytes+0x54>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 800c3fe:	2307      	movs	r3, #7
 800c400:	e0e3      	b.n	800c5ca <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800c412:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 800c414:	8b7b      	ldrh	r3, [r7, #26]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 808e 	beq.w	800c538 <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c422:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c424:	f107 0316 	add.w	r3, r7, #22
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	8bfb      	ldrh	r3, [r7, #30]
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	4613      	mov	r3, r2
 800c430:	2201      	movs	r2, #1
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f7ff ff39 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800c438:	4603      	mov	r3, r0
 800c43a:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c43c:	8b3b      	ldrh	r3, [r7, #24]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 800c442:	8b3b      	ldrh	r3, [r7, #24]
 800c444:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c446:	e077      	b.n	800c538 <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800c448:	8afb      	ldrh	r3, [r7, #22]
 800c44a:	2b10      	cmp	r3, #16
 800c44c:	d002      	beq.n	800c454 <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800c44e:	230e      	movs	r3, #14
 800c450:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c452:	e071      	b.n	800c538 <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 800c454:	8afa      	ldrh	r2, [r7, #22]
 800c456:	8b7b      	ldrh	r3, [r7, #26]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 800c45e:	8afb      	ldrh	r3, [r7, #22]
 800c460:	461a      	mov	r2, r3
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	4293      	cmp	r3, r2
 800c466:	d202      	bcs.n	800c46e <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 800c46e:	8afb      	ldrh	r3, [r7, #22]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00a      	beq.n	800c48a <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	3304      	adds	r3, #4
 800c480:	8afa      	ldrh	r2, [r7, #22]
 800c482:	4619      	mov	r1, r3
 800c484:	6838      	ldr	r0, [r7, #0]
 800c486:	f00f f815 	bl	801b4b4 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800c48a:	8afb      	ldrh	r3, [r7, #22]
 800c48c:	461a      	mov	r2, r3
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	4413      	add	r3, r2
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 800c494:	8afb      	ldrh	r3, [r7, #22]
 800c496:	461a      	mov	r2, r3
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 800c49e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800c4a4:	e048      	b.n	800c538 <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800c4a6:	8bfb      	ldrh	r3, [r7, #30]
 800c4a8:	8c3a      	ldrh	r2, [r7, #32]
 800c4aa:	fb02 f303 	mul.w	r3, r2, r3
 800c4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d204      	bcs.n	800c4be <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 800c4b4:	8bfb      	ldrh	r3, [r7, #30]
 800c4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4bc:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 800c4be:	8c3b      	ldrh	r3, [r7, #32]
 800c4c0:	b2d8      	uxtb	r0, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800c4c8:	8bfb      	ldrh	r3, [r7, #30]
 800c4ca:	8c3a      	ldrh	r2, [r7, #32]
 800c4cc:	fb02 f303 	mul.w	r3, r2, r3
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c4d4:	f107 0216 	add.w	r2, r7, #22
 800c4d8:	9201      	str	r2, [sp, #4]
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4623      	mov	r3, r4
 800c4de:	4602      	mov	r2, r0
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff fee2 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c4ea:	8b3b      	ldrh	r3, [r7, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 800c4f0:	8b3b      	ldrh	r3, [r7, #24]
 800c4f2:	e06a      	b.n	800c5ca <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 800c4f4:	8afb      	ldrh	r3, [r7, #22]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	8bfb      	ldrh	r3, [r7, #30]
 800c4fa:	8c3a      	ldrh	r2, [r7, #32]
 800c4fc:	fb02 f303 	mul.w	r3, r2, r3
 800c500:	4299      	cmp	r1, r3
 800c502:	d001      	beq.n	800c508 <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800c504:	230e      	movs	r3, #14
 800c506:	e060      	b.n	800c5ca <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	18d0      	adds	r0, r2, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c516:	4619      	mov	r1, r3
 800c518:	f00e ffcc 	bl	801b4b4 <memcpy>
            lvRcvLen   += nbRead;
 800c51c:	8afb      	ldrh	r3, [r7, #22]
 800c51e:	461a      	mov	r2, r3
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	4413      	add	r3, r2
 800c524:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 800c526:	8afb      	ldrh	r3, [r7, #22]
 800c528:	461a      	mov	r2, r3
 800c52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 800c530:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c532:	8c3b      	ldrh	r3, [r7, #32]
 800c534:	4413      	add	r3, r2
 800c536:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800c538:	8bfb      	ldrh	r3, [r7, #30]
 800c53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d302      	bcc.n	800c546 <ndefT3TPollerReadBytes+0x19c>
 800c540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0af      	beq.n	800c4a6 <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d02f      	beq.n	800c5ac <ndefT3TPollerReadBytes+0x202>
 800c54c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d12c      	bne.n	800c5ac <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c558:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c55a:	f107 0316 	add.w	r3, r7, #22
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	8bfb      	ldrh	r3, [r7, #30]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	2201      	movs	r2, #1
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7ff fe9e 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800c56e:	4603      	mov	r3, r0
 800c570:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c572:	8b3b      	ldrh	r3, [r7, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 800c578:	8b3b      	ldrh	r3, [r7, #24]
 800c57a:	e026      	b.n	800c5ca <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800c57c:	8afb      	ldrh	r3, [r7, #22]
 800c57e:	2b10      	cmp	r3, #16
 800c580:	d001      	beq.n	800c586 <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800c582:	230e      	movs	r3, #14
 800c584:	e021      	b.n	800c5ca <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	18d0      	adds	r0, r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c59a:	4619      	mov	r1, r3
 800c59c:	f00e ff8a 	bl	801b4b4 <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 800c5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	4413      	add	r3, r2
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <ndefT3TPollerReadBytes+0x212>
 800c5b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c6:	601a      	str	r2, [r3, #0]
    }
    return result;
 800c5c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3734      	adds	r7, #52	; 0x34
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd90      	pop	{r4, r7, pc}

0800c5d2 <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b088      	sub	sp, #32
 800c5d6:	af02      	add	r7, sp, #8
 800c5d8:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d001      	beq.n	800c5f4 <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 800c5f0:	2307      	movs	r3, #7
 800c5f2:	e07d      	b.n	800c6f0 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	339c      	adds	r3, #156	; 0x9c
 800c5f8:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 800c5fa:	f107 030a 	add.w	r3, r7, #10
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	2310      	movs	r3, #16
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	2201      	movs	r2, #1
 800c608:	2100      	movs	r1, #0
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff fe4d 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800c610:	4603      	mov	r3, r0
 800c612:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 800c614:	89fb      	ldrh	r3, [r7, #14]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <ndefT3TPollerReadAttributeInformationBlock+0x52>
 800c61a:	897b      	ldrh	r3, [r7, #10]
 800c61c:	2b10      	cmp	r3, #16
 800c61e:	d001      	beq.n	800c624 <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 800c620:	89fb      	ldrh	r3, [r7, #14]
 800c622:	e065      	b.n	800c6f0 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800c624:	2300      	movs	r3, #0
 800c626:	757b      	strb	r3, [r7, #21]
 800c628:	e00a      	b.n	800c640 <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 800c62a:	7d7b      	ldrb	r3, [r7, #21]
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	4413      	add	r3, r2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b29a      	uxth	r2, r3
 800c634:	8afb      	ldrh	r3, [r7, #22]
 800c636:	4413      	add	r3, r2
 800c638:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800c63a:	7d7b      	ldrb	r3, [r7, #21]
 800c63c:	3301      	adds	r3, #1
 800c63e:	757b      	strb	r3, [r7, #21]
 800c640:	7d7b      	ldrb	r3, [r7, #21]
 800c642:	2b0d      	cmp	r3, #13
 800c644:	d9f1      	bls.n	800c62a <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	330e      	adds	r3, #14
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	b29a      	uxth	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	330f      	adds	r3, #15
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	b29b      	uxth	r3, r3
 800c65a:	4413      	add	r3, r2
 800c65c:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 800c65e:	89ba      	ldrh	r2, [r7, #12]
 800c660:	8afb      	ldrh	r3, [r7, #22]
 800c662:	429a      	cmp	r2, r3
 800c664:	d001      	beq.n	800c66a <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 800c666:	2305      	movs	r3, #5
 800c668:	e042      	b.n	800c6f0 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	091b      	lsrs	r3, r3, #4
 800c670:	b2da      	uxtb	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	b2da      	uxtb	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	785a      	ldrb	r2, [r3, #1]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	789a      	ldrb	r2, [r3, #2]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	3303      	adds	r3, #3
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	7a5a      	ldrb	r2, [r3, #9]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	7a9a      	ldrb	r2, [r3, #10]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	330b      	adds	r3, #11
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	330c      	adds	r3, #12
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	021b      	lsls	r3, r3, #8
 800c6de:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	320d      	adds	r2, #13
 800c6e4:	7812      	ldrb	r2, [r2, #0]
 800c6e6:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d006      	beq.n	800c716 <ndefT3TPollerContextInitialization+0x1e>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <ndefT3TPollerContextInitialization+0x1e>
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d001      	beq.n	800c71a <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800c716:	2307      	movs	r3, #7
 800c718:	e00a      	b.n	800c730 <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2278      	movs	r2, #120	; 0x78
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f00e fec7 	bl	801b4b4 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08c      	sub	sp, #48	; 0x30
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d011      	beq.n	800c774 <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2200      	movs	r2, #0
 800c75a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2200      	movs	r2, #0
 800c760:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2200      	movs	r2, #0
 800c766:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2200      	movs	r2, #0
 800c76c:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2200      	movs	r2, #0
 800c772:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <ndefT3TPollerNdefDetect+0x4a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d001      	beq.n	800c786 <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800c782:	2307      	movs	r3, #7
 800c784:	e087      	b.n	800c896 <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 800c78e:	f107 0210 	add.w	r2, r7, #16
 800c792:	f107 030e 	add.w	r3, r7, #14
 800c796:	9301      	str	r3, [sp, #4]
 800c798:	f107 030f 	add.w	r3, r7, #15
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	f00a f83c 	bl	8016824 <rfalNfcfPollerPoll>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800c7b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 800c7b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7b8:	e06d      	b.n	800c896 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	1cd9      	adds	r1, r3, #3
 800c7be:	f107 0310 	add.w	r3, r7, #16
 800c7c2:	3302      	adds	r3, #2
 800c7c4:	2208      	movs	r2, #8
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f00e fe64 	bl	801b494 <memcmp>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 800c7d2:	2305      	movs	r3, #5
 800c7d4:	e05f      	b.n	800c896 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff fefb 	bl	800c5d2 <ndefT3TPollerReadAttributeInformationBlock>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800c7e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 800c7e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7e8:	e055      	b.n	800c896 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d001      	beq.n	800c7f8 <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 800c7f4:	2305      	movs	r3, #5
 800c7f6:	e04e      	b.n	800c896 <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2210      	movs	r2, #16
 800c808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800c812:	011a      	lsls	r2, r3, #4
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d012      	beq.n	800c852 <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c832:	2b01      	cmp	r3, #1
 800c834:	d104      	bne.n	800c840 <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2202      	movs	r2, #2
 800c83a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c83e:	e008      	b.n	800c852 <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c846:	2b00      	cmp	r3, #0
 800c848:	d103      	bne.n	800c852 <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2203      	movs	r2, #3
 800c84e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01d      	beq.n	800c894 <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3728      	adds	r7, #40	; 0x28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b088      	sub	sp, #32
 800c8a2:	af02      	add	r7, sp, #8
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
 800c8aa:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d006      	beq.n	800c8c0 <ndefT3TPollerReadRawMessage+0x22>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d102      	bne.n	800c8c0 <ndefT3TPollerReadRawMessage+0x22>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800c8c0:	2307      	movs	r3, #7
 800c8c2:	e02b      	b.n	800c91c <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d801      	bhi.n	800c8d2 <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800c8ce:	2321      	movs	r3, #33	; 0x21
 800c8d0:	e024      	b.n	800c91c <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c8d8:	2b0f      	cmp	r3, #15
 800c8da:	d101      	bne.n	800c8e0 <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 800c8dc:	2321      	movs	r3, #33	; 0x21
 800c8de:	e01d      	b.n	800c91c <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d201      	bcs.n	800c8f0 <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e015      	b.n	800c91c <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f7ff fd51 	bl	800c3aa <ndefT3TPollerReadBytes>
 800c908:	4603      	mov	r3, r0
 800c90a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800c90c:	8afb      	ldrh	r3, [r7, #22]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800c91a:	8afb      	ldrh	r3, [r7, #22]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b091      	sub	sp, #68	; 0x44
 800c928:	af04      	add	r7, sp, #16
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	460b      	mov	r3, r1
 800c930:	817b      	strh	r3, [r7, #10]
 800c932:	4613      	mov	r3, r2
 800c934:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 800c936:	2309      	movs	r3, #9
 800c938:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <ndefT3TPollerWriteBlocks+0x24>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d001      	beq.n	800c94c <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 800c948:	2307      	movs	r3, #7
 800c94a:	e042      	b.n	800c9d2 <ndefT3TPollerWriteBlocks+0xae>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c952:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 800c954:	2300      	movs	r3, #0
 800c956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c95a:	e017      	b.n	800c98c <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800c95c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	4413      	add	r3, r2
 800c966:	2280      	movs	r2, #128	; 0x80
 800c968:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800c96a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c96e:	b299      	uxth	r1, r3
 800c970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c978:	4413      	add	r3, r2
 800c97a:	897a      	ldrh	r2, [r7, #10]
 800c97c:	440a      	add	r2, r1
 800c97e:	b292      	uxth	r2, r2
 800c980:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800c982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c986:	3301      	adds	r3, #1
 800c988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c98c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c990:	7a7b      	ldrb	r3, [r7, #9]
 800c992:	429a      	cmp	r2, r3
 800c994:	d3e2      	bcc.n	800c95c <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 800c996:	2301      	movs	r3, #1
 800c998:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800c99a:	f107 0312 	add.w	r3, r7, #18
 800c99e:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800c9a0:	7a7b      	ldrb	r3, [r7, #9]
 800c9a2:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	1cd8      	adds	r0, r3, #3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c9b8:	f107 0114 	add.w	r1, r7, #20
 800c9bc:	2450      	movs	r4, #80	; 0x50
 800c9be:	9402      	str	r4, [sp, #8]
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	2350      	movs	r3, #80	; 0x50
 800c9c8:	f00a f916 	bl	8016bf8 <rfalNfcfPollerUpdate>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800c9d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3734      	adds	r7, #52	; 0x34
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd90      	pop	{r4, r7, pc}

0800c9da <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b092      	sub	sp, #72	; 0x48
 800c9de:	af02      	add	r7, sp, #8
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	60b9      	str	r1, [r7, #8]
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800c9fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca04:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800ca06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca0a:	fb02 f303 	mul.w	r3, r2, r3
 800ca0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d006      	beq.n	800ca2e <ndefT3TPollerWriteBytes+0x54>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d102      	bne.n	800ca2e <ndefT3TPollerWriteBytes+0x54>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 800ca2e:	2307      	movs	r3, #7
 800ca30:	e0d0      	b.n	800cbd4 <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ca42:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 800ca44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d078      	beq.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 800ca4a:	f107 0214 	add.w	r2, r7, #20
 800ca4e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800ca50:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f7ff fc23 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800ca64:	4603      	mov	r3, r0
 800ca66:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800ca68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800ca6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca70:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ca72:	e063      	b.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 800ca74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d002      	beq.n	800ca82 <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800ca7c:	230e      	movs	r3, #14
 800ca7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ca80:	e05c      	b.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800ca82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca84:	f1c3 0310 	rsb	r3, r3, #16
 800ca88:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 800ca8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d201      	bcs.n	800ca96 <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 800ca96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca98:	f107 0214 	add.w	r2, r7, #20
 800ca9c:	4413      	add	r3, r2
 800ca9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f00e fd06 	bl	801b4b4 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800caa8:	f107 0314 	add.w	r3, r7, #20
 800caac:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800caae:	2201      	movs	r2, #1
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f7ff ff37 	bl	800c924 <ndefT3TPollerWriteBlocks>
 800cab6:	4603      	mov	r3, r0
 800cab8:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800caba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10b      	bne.n	800cad8 <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800cac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cac4:	4413      	add	r3, r2
 800cac6:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 800cac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800caca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800cad0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cad2:	3301      	adds	r3, #1
 800cad4:	863b      	strh	r3, [r7, #48]	; 0x30
 800cad6:	e031      	b.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 800cad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cada:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800cadc:	e02e      	b.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800cade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cae0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800cae2:	fb02 f303 	mul.w	r3, r2, r3
 800cae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cae8:	429a      	cmp	r2, r3
 800caea:	d204      	bcs.n	800caf6 <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 800caec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf4:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 800caf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caf8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800cafa:	fb02 f303 	mul.w	r3, r2, r3
 800cafe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 800cb00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cb02:	b2d8      	uxtb	r0, r3
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	4413      	add	r3, r2
 800cb0a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f7ff ff08 	bl	800c924 <ndefT3TPollerWriteBlocks>
 800cb14:	4603      	mov	r3, r0
 800cb16:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800cb18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 800cb1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cb22:	e00b      	b.n	800cb3c <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 800cb24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb28:	4413      	add	r3, r2
 800cb2a:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 800cb2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 800cb34:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800cb36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cb38:	4413      	add	r3, r2
 800cb3a:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800cb3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d302      	bcc.n	800cb4a <ndefT3TPollerWriteBytes+0x170>
 800cb44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0c9      	beq.n	800cade <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d038      	beq.n	800cbc2 <ndefT3TPollerWriteBytes+0x1e8>
 800cb50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d135      	bne.n	800cbc2 <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 800cb56:	f107 0214 	add.w	r2, r7, #20
 800cb5a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800cb5c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800cb60:	9301      	str	r3, [sp, #4]
 800cb62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	4613      	mov	r3, r2
 800cb68:	2201      	movs	r2, #1
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f7ff fb9d 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800cb70:	4603      	mov	r3, r0
 800cb72:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800cb74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 800cb7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cb7e:	e020      	b.n	800cbc2 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800cb80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d002      	beq.n	800cb8e <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800cb88:	230e      	movs	r3, #14
 800cb8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cb8c:	e019      	b.n	800cbc2 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	18d1      	adds	r1, r2, r3
 800cb94:	f107 0314 	add.w	r3, r7, #20
 800cb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f00e fc8a 	bl	801b4b4 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800cba0:	f107 0314 	add.w	r3, r7, #20
 800cba4:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800cba6:	2201      	movs	r2, #1
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7ff febb 	bl	800c924 <ndefT3TPollerWriteBlocks>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800cbb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbbc:	e001      	b.n	800cbc2 <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800cbbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cbc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d104      	bne.n	800cbd2 <ndefT3TPollerWriteBytes+0x1f8>
 800cbc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800cbd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3740      	adds	r7, #64	; 0x40
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d001      	beq.n	800cbf6 <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800cbf2:	2307      	movs	r3, #7
 800cbf4:	e10e      	b.n	800ce14 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 800cc00:	2321      	movs	r3, #33	; 0x21
 800cc02:	e107      	b.n	800ce14 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	339c      	adds	r3, #156	; 0x9c
 800cc0c:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	b2d9      	uxtb	r1, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	6938      	ldr	r0, [r7, #16]
 800cc26:	4403      	add	r3, r0
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4413      	add	r3, r2
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	89fb      	ldrh	r3, [r7, #14]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	3301      	adds	r3, #1
 800cc42:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	4413      	add	r3, r2
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800cc50:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4413      	add	r3, r2
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	4413      	add	r3, r2
 800cc60:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	3301      	adds	r3, #1
 800cc66:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800cc74:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	89fb      	ldrh	r3, [r7, #14]
 800cc82:	4413      	add	r3, r2
 800cc84:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	b299      	uxth	r1, r3
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	b2ca      	uxtb	r2, r1
 800cc9e:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4413      	add	r3, r2
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	89fb      	ldrh	r3, [r7, #14]
 800ccac:	4413      	add	r3, r2
 800ccae:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	b2ca      	uxtb	r2, r1
 800ccc4:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	4413      	add	r3, r2
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4413      	add	r3, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	3301      	adds	r3, #1
 800ccea:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 800ccfc:	7dfb      	ldrb	r3, [r7, #23]
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	4413      	add	r3, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	4413      	add	r3, r2
 800cd12:	2200      	movs	r2, #0
 800cd14:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	4413      	add	r3, r2
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800cd28:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4413      	add	r3, r2
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	89fb      	ldrh	r3, [r7, #14]
 800cd36:	4413      	add	r3, r2
 800cd38:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	4413      	add	r3, r2
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800cd4c:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4413      	add	r3, r2
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	89fb      	ldrh	r3, [r7, #14]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	3301      	adds	r3, #1
 800cd62:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd6a:	0c19      	lsrs	r1, r3, #16
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	4413      	add	r3, r2
 800cd72:	b2ca      	uxtb	r2, r1
 800cd74:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	89fb      	ldrh	r3, [r7, #14]
 800cd82:	4413      	add	r3, r2
 800cd84:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd92:	0a19      	lsrs	r1, r3, #8
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	4413      	add	r3, r2
 800cd9a:	b2ca      	uxtb	r2, r1
 800cd9c:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	4413      	add	r3, r2
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	89fb      	ldrh	r3, [r7, #14]
 800cdaa:	4413      	add	r3, r2
 800cdac:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	b2ca      	uxtb	r2, r1
 800cdc2:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cdc4:	7dfb      	ldrb	r3, [r7, #23]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	4413      	add	r3, r2
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	89fb      	ldrh	r3, [r7, #14]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 800cdda:	89fb      	ldrh	r3, [r7, #14]
 800cddc:	0a1b      	lsrs	r3, r3, #8
 800cdde:	b299      	uxth	r1, r3
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4413      	add	r3, r2
 800cde6:	b2ca      	uxtb	r2, r1
 800cde8:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	3301      	adds	r3, #1
 800cdee:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	89fa      	ldrh	r2, [r7, #14]
 800cdf8:	b2d2      	uxtb	r2, r2
 800cdfa:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2201      	movs	r2, #1
 800ce06:	2100      	movs	r1, #0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fd8b 	bl	800c924 <ndefT3TPollerWriteBlocks>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	81bb      	strh	r3, [r7, #12]
    return ret;
 800ce12:	89bb      	ldrh	r3, [r7, #12]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <ndefT3TPollerWriteRawMessage+0x26>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d105      	bne.n	800ce42 <ndefT3TPollerWriteRawMessage+0x26>
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d104      	bne.n	800ce46 <ndefT3TPollerWriteRawMessage+0x2a>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 800ce42:	2307      	movs	r3, #7
 800ce44:	e04b      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d006      	beq.n	800ce5e <ndefT3TPollerWriteRawMessage+0x42>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d001      	beq.n	800ce5e <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800ce5a:	2321      	movs	r3, #33	; 0x21
 800ce5c:	e03f      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 f8cb 	bl	800cffc <ndefT3TPollerCheckAvailableSpace>
 800ce66:	4603      	mov	r3, r0
 800ce68:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ce6a:	8afb      	ldrh	r3, [r7, #22]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800ce70:	2307      	movs	r3, #7
 800ce72:	e034      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f000 f8e3 	bl	800d042 <ndefT3TPollerBeginWriteMessage>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ce80:	8afb      	ldrh	r3, [r7, #22]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d005      	beq.n	800ce92 <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800ce8e:	8afb      	ldrh	r3, [r7, #22]
 800ce90:	e025      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d012      	beq.n	800cebe <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7ff fd99 	bl	800c9da <ndefT3TPollerWriteBytes>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800ceac:	8afb      	ldrh	r3, [r7, #22]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d005      	beq.n	800cebe <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800ceba:	8afb      	ldrh	r3, [r7, #22]
 800cebc:	e00f      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800cebe:	6879      	ldr	r1, [r7, #4]
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f000 f8f3 	bl	800d0ac <ndefT3TPollerEndWriteMessage>
 800cec6:	4603      	mov	r3, r0
 800cec8:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ceca:	8afb      	ldrh	r3, [r7, #22]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d005      	beq.n	800cedc <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ced8:	8afb      	ldrh	r3, [r7, #22]
 800ceda:	e000      	b.n	800cede <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 800cedc:	8afb      	ldrh	r3, [r7, #22]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b08e      	sub	sp, #56	; 0x38
 800ceea:	af02      	add	r7, sp, #8
 800ceec:	60f8      	str	r0, [r7, #12]
 800ceee:	60b9      	str	r1, [r7, #8]
 800cef0:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800cef2:	2301      	movs	r3, #1
 800cef4:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 800cef6:	2300      	movs	r3, #0
 800cef8:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d003      	beq.n	800cf08 <ndefT3TPollerTagFormat+0x22>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d001      	beq.n	800cf0c <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800cf08:	2307      	movs	r3, #7
 800cf0a:	e051      	b.n	800cfb0 <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d109      	bne.n	800cf26 <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff fb5d 	bl	800c5d2 <ndefT3TPollerReadAttributeInformationBlock>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 800cf1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d008      	beq.n	800cf34 <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 800cf22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf24:	e044      	b.n	800cfb0 <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	337c      	adds	r3, #124	; 0x7c
 800cf2a:	2214      	movs	r2, #20
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f00e fac0 	bl	801b4b4 <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 800cf34:	f107 0218 	add.w	r2, r7, #24
 800cf38:	f107 0316 	add.w	r3, r7, #22
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	f107 0317 	add.w	r3, r7, #23
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	4613      	mov	r3, r2
 800cf46:	2200      	movs	r2, #0
 800cf48:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f009 fc69 	bl	8016824 <rfalNfcfPollerPoll>
 800cf52:	4603      	mov	r3, r0
 800cf54:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800cf56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 800cf5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf5e:	e027      	b.n	800cfb0 <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800cf60:	f107 0218 	add.w	r2, r7, #24
 800cf64:	f107 0316 	add.w	r3, r7, #22
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	f107 0317 	add.w	r3, r7, #23
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	4613      	mov	r3, r2
 800cf72:	2201      	movs	r2, #1
 800cf74:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f009 fc53 	bl	8016824 <rfalNfcfPollerPoll>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800cf82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 800cf88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf8a:	e011      	b.n	800cfb0 <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7ff fe19 	bl	800cbdc <ndefT3TPollerWriteAttributeInformationBlock>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800cfae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3730      	adds	r7, #48	; 0x30
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <ndefT3TPollerCheckPresence+0x16>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d001      	beq.n	800cfd2 <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800cfce:	2307      	movs	r3, #7
 800cfd0:	e010      	b.n	800cff4 <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800cfd8:	f107 030c 	add.w	r3, r7, #12
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	2310      	movs	r3, #16
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff f95e 	bl	800c2aa <ndefT3TPollerReadBlocks>
 800cfee:	4603      	mov	r3, r0
 800cff0:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800cff2:	89fb      	ldrh	r3, [r7, #14]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <ndefT3TPollerCheckAvailableSpace+0x18>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d001      	beq.n	800d018 <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800d014:	2307      	movs	r3, #7
 800d016:	e00f      	b.n	800d038 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800d022:	2321      	movs	r3, #33	; 0x21
 800d024:	e008      	b.n	800d038 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d901      	bls.n	800d036 <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr

0800d042 <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <ndefT3TPollerBeginWriteMessage+0x18>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b02      	cmp	r3, #2
 800d058:	d001      	beq.n	800d05e <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800d05a:	2307      	movs	r3, #7
 800d05c:	e022      	b.n	800d0a4 <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d064:	2b01      	cmp	r3, #1
 800d066:	d006      	beq.n	800d076 <ndefT3TPollerBeginWriteMessage+0x34>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d001      	beq.n	800d076 <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800d072:	2321      	movs	r3, #33	; 0x21
 800d074:	e016      	b.n	800d0a4 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	220f      	movs	r2, #15
 800d07a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fdac 	bl	800cbdc <ndefT3TPollerWriteAttributeInformationBlock>
 800d084:	4603      	mov	r3, r0
 800d086:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d088:	89fb      	ldrh	r3, [r7, #14]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800d096:	89fb      	ldrh	r3, [r7, #14]
 800d098:	e004      	b.n	800d0a4 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <ndefT3TPollerEndWriteMessage+0x18>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d001      	beq.n	800d0c8 <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800d0c4:	2307      	movs	r3, #7
 800d0c6:	e02c      	b.n	800d122 <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d001      	beq.n	800d0d6 <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800d0d2:	2321      	movs	r3, #33	; 0x21
 800d0d4:	e025      	b.n	800d122 <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff fd78 	bl	800cbdc <ndefT3TPollerWriteAttributeInformationBlock>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d0f0:	89fb      	ldrh	r3, [r7, #14]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d005      	beq.n	800d102 <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800d0fe:	89fb      	ldrh	r3, [r7, #14]
 800d100:	e00f      	b.n	800d122 <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d110:	2b00      	cmp	r3, #0
 800d112:	d101      	bne.n	800d118 <ndefT3TPollerEndWriteMessage+0x6c>
 800d114:	2201      	movs	r2, #1
 800d116:	e000      	b.n	800d11a <ndefT3TPollerEndWriteMessage+0x6e>
 800d118:	2202      	movs	r2, #2
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <ndefT3TPollerWriteRawMessageLen+0x18>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d001      	beq.n	800d146 <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 800d142:	2307      	movs	r3, #7
 800d144:	e010      	b.n	800d168 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d006      	beq.n	800d15e <ndefT3TPollerWriteRawMessageLen+0x34>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d156:	2b02      	cmp	r3, #2
 800d158:	d001      	beq.n	800d15e <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 800d15a:	2321      	movs	r3, #33	; 0x21
 800d15c:	e004      	b.n	800d168 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff ffa3 	bl	800d0ac <ndefT3TPollerEndWriteMessage>
 800d166:	4603      	mov	r3, r0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	22ff      	movs	r2, #255	; 0xff
 800d1ae:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f603 02cc 	addw	r2, r3, #2252	; 0x8cc
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	611a      	str	r2, [r3, #16]
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc80      	pop	{r7}
 800d1cc:	4770      	bx	lr

0800d1ce <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800d1ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d0:	b08b      	sub	sp, #44	; 0x2c
 800d1d2:	af06      	add	r7, sp, #24
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800d1ee:	683e      	ldr	r6, [r7, #0]
 800d1f0:	466d      	mov	r5, sp
 800d1f2:	f106 0410 	add.w	r4, r6, #16
 800d1f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d202:	f004 fa67 	bl	80116d4 <rfalIsoDepStartApduTransceive>
 800d206:	4603      	mov	r3, r0
 800d208:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 800d20a:	89fb      	ldrh	r3, [r7, #14]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d108      	bne.n	800d222 <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 800d210:	f00b faaa 	bl	8018768 <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 800d214:	f004 faae 	bl	8011774 <rfalIsoDepGetApduTransceiveStatus>
 800d218:	4603      	mov	r3, r0
 800d21a:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 800d21c:	89fb      	ldrh	r3, [r7, #14]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d0f6      	beq.n	800d210 <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 800d222:	89fb      	ldrh	r3, [r7, #14]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 800d228:	89fb      	ldrh	r3, [r7, #14]
 800d22a:	e00e      	b.n	800d24a <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800d232:	4618      	mov	r0, r3
 800d234:	f00d fee5 	bl	801b002 <rfalT4TPollerParseRAPDU>
 800d238:	4603      	mov	r3, r0
 800d23a:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8b3 28c6 	ldrh.w	r2, [r3, #2246]	; 0x8c6
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8a3 29d0 	strh.w	r2, [r3, #2512]	; 0x9d0
    
    return ret;
 800d248:	89fb      	ldrh	r3, [r7, #14]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d254 <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 800d25c:	49a0      	ldr	r1, [pc, #640]	; (800d4e0 <ndefT4TReadAndParseCCFile+0x28c>)
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f9e6 	bl	800d630 <ndefT4TPollerSelectFile>
 800d264:	4603      	mov	r3, r0
 800d266:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d268:	89fb      	ldrh	r3, [r7, #14]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 800d26e:	89fb      	ldrh	r3, [r7, #14]
 800d270:	e180      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 800d272:	220f      	movs	r2, #15
 800d274:	2100      	movs	r1, #0
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fa19 	bl	800d6ae <ndefT4TPollerReadBinary>
 800d27c:	4603      	mov	r3, r0
 800d27e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 800d286:	89fb      	ldrh	r3, [r7, #14]
 800d288:	e174      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800d296:	220f      	movs	r2, #15
 800d298:	4619      	mov	r1, r3
 800d29a:	f00e f90b 	bl	801b4b4 <memcpy>
    dataIt = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 800d2a2:	7b7b      	ldrb	r3, [r7, #13]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d2ac:	021b      	lsls	r3, r3, #8
 800d2ae:	b21a      	sxth	r2, r3
 800d2b0:	7b7b      	ldrb	r3, [r7, #13]
 800d2b2:	3398      	adds	r3, #152	; 0x98
 800d2b4:	6879      	ldr	r1, [r7, #4]
 800d2b6:	440b      	add	r3, r1
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	b21b      	sxth	r3, r3
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 800d2cc:	7b7b      	ldrb	r3, [r7, #13]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 800d2d2:	7b7b      	ldrb	r3, [r7, #13]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 800d2e2:	7b7b      	ldrb	r3, [r7, #13]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 800d2e8:	7b7b      	ldrb	r3, [r7, #13]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	b21a      	sxth	r2, r3
 800d2f6:	7b7b      	ldrb	r3, [r7, #13]
 800d2f8:	3398      	adds	r3, #152	; 0x98
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	440b      	add	r3, r1
 800d2fe:	3304      	adds	r3, #4
 800d300:	3301      	adds	r3, #1
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	b21b      	sxth	r3, r3
 800d306:	4313      	orrs	r3, r2
 800d308:	b21b      	sxth	r3, r3
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 800d312:	7b7b      	ldrb	r3, [r7, #13]
 800d314:	3302      	adds	r3, #2
 800d316:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 800d318:	7b7b      	ldrb	r3, [r7, #13]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d322:	021b      	lsls	r3, r3, #8
 800d324:	b21a      	sxth	r2, r3
 800d326:	7b7b      	ldrb	r3, [r7, #13]
 800d328:	3398      	adds	r3, #152	; 0x98
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	440b      	add	r3, r1
 800d32e:	3304      	adds	r3, #4
 800d330:	3301      	adds	r3, #1
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	b21b      	sxth	r3, r3
 800d336:	4313      	orrs	r3, r2
 800d338:	b21b      	sxth	r3, r3
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 800d342:	7b7b      	ldrb	r3, [r7, #13]
 800d344:	3302      	adds	r3, #2
 800d346:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d34e:	2b0e      	cmp	r3, #14
 800d350:	d904      	bls.n	800d35c <ndefT4TReadAndParseCCFile+0x108>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d358:	2b0c      	cmp	r3, #12
 800d35a:	d801      	bhi.n	800d360 <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d35c:	2305      	movs	r3, #5
 800d35e:	e109      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d366:	2bfe      	cmp	r3, #254	; 0xfe
 800d368:	d804      	bhi.n	800d374 <ndefT4TReadAndParseCCFile+0x120>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d370:	b2da      	uxtb	r2, r3
 800d372:	e000      	b.n	800d376 <ndefT4TReadAndParseCCFile+0x122>
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d382:	2bfe      	cmp	r3, #254	; 0xfe
 800d384:	d804      	bhi.n	800d390 <ndefT4TReadAndParseCCFile+0x13c>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	e000      	b.n	800d392 <ndefT4TReadAndParseCCFile+0x13e>
 800d390:	22ff      	movs	r2, #255	; 0xff
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d39e:	091b      	lsrs	r3, r3, #4
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d901      	bls.n	800d3aa <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d3a6:	2305      	movs	r3, #5
 800d3a8:	e0e4      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d3b0:	091b      	lsrs	r3, r3, #4
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d17e      	bne.n	800d4b6 <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	210f      	movs	r1, #15
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f976 	bl	800d6ae <ndefT4TPollerReadBinary>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 800d3c6:	89fb      	ldrh	r3, [r7, #14]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	e0d1      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	33ab      	adds	r3, #171	; 0xab
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	f202 42bd 	addw	r2, r2, #1213	; 0x4bd
 800d3da:	8812      	ldrh	r2, [r2, #0]
 800d3dc:	b292      	uxth	r2, r2
 800d3de:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 800d3e0:	7b7b      	ldrb	r3, [r7, #13]
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d3ea:	2b06      	cmp	r3, #6
 800d3ec:	d001      	beq.n	800d3f2 <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800d3ee:	2305      	movs	r3, #5
 800d3f0:	e0c0      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d3f2:	7b7b      	ldrb	r3, [r7, #13]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 800d3f8:	7b7b      	ldrb	r3, [r7, #13]
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d402:	2b07      	cmp	r3, #7
 800d404:	d801      	bhi.n	800d40a <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800d406:	2305      	movs	r3, #5
 800d408:	e0b4      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d40a:	7b7b      	ldrb	r3, [r7, #13]
 800d40c:	3301      	adds	r3, #1
 800d40e:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800d410:	7b7b      	ldrb	r3, [r7, #13]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800d420:	7b7b      	ldrb	r3, [r7, #13]
 800d422:	3301      	adds	r3, #1
 800d424:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800d426:	7b7b      	ldrb	r3, [r7, #13]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	4413      	add	r3, r2
 800d42c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800d436:	7b7b      	ldrb	r3, [r7, #13]
 800d438:	3301      	adds	r3, #1
 800d43a:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 800d43c:	7b7b      	ldrb	r3, [r7, #13]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4413      	add	r3, r2
 800d442:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d446:	061a      	lsls	r2, r3, #24
 800d448:	7b7b      	ldrb	r3, [r7, #13]
 800d44a:	3398      	adds	r3, #152	; 0x98
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	440b      	add	r3, r1
 800d450:	3304      	adds	r3, #4
 800d452:	3301      	adds	r3, #1
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	041b      	lsls	r3, r3, #16
 800d458:	431a      	orrs	r2, r3
 800d45a:	7b7b      	ldrb	r3, [r7, #13]
 800d45c:	3398      	adds	r3, #152	; 0x98
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	440b      	add	r3, r1
 800d462:	3304      	adds	r3, #4
 800d464:	3302      	adds	r3, #2
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	4313      	orrs	r3, r2
 800d46c:	7b7a      	ldrb	r2, [r7, #13]
 800d46e:	3298      	adds	r2, #152	; 0x98
 800d470:	6879      	ldr	r1, [r7, #4]
 800d472:	440a      	add	r2, r1
 800d474:	3204      	adds	r2, #4
 800d476:	3203      	adds	r2, #3
 800d478:	7812      	ldrb	r2, [r2, #0]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 800d482:	7b7b      	ldrb	r3, [r7, #13]
 800d484:	3304      	adds	r3, #4
 800d486:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800d488:	7b7b      	ldrb	r3, [r7, #13]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	4413      	add	r3, r2
 800d48e:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800d498:	7b7b      	ldrb	r3, [r7, #13]
 800d49a:	3301      	adds	r3, #1
 800d49c:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800d49e:	7b7b      	ldrb	r3, [r7, #13]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800d4ae:	7b7b      	ldrb	r3, [r7, #13]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	737b      	strb	r3, [r7, #13]
 800d4b4:	e05d      	b.n	800d572 <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 800d4b6:	7b7b      	ldrb	r3, [r7, #13]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d001      	beq.n	800d4c8 <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 800d4c4:	2305      	movs	r3, #5
 800d4c6:	e055      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d4c8:	7b7b      	ldrb	r3, [r7, #13]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 800d4ce:	7b7b      	ldrb	r3, [r7, #13]
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d4d8:	2b05      	cmp	r3, #5
 800d4da:	d803      	bhi.n	800d4e4 <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 800d4dc:	2305      	movs	r3, #5
 800d4de:	e049      	b.n	800d574 <ndefT4TReadAndParseCCFile+0x320>
 800d4e0:	0801d628 	.word	0x0801d628
        }
        dataIt++;
 800d4e4:	7b7b      	ldrb	r3, [r7, #13]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800d4ea:	7b7b      	ldrb	r3, [r7, #13]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800d4fa:	7b7b      	ldrb	r3, [r7, #13]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800d500:	7b7b      	ldrb	r3, [r7, #13]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4413      	add	r3, r2
 800d506:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800d510:	7b7b      	ldrb	r3, [r7, #13]
 800d512:	3301      	adds	r3, #1
 800d514:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 800d516:	7b7b      	ldrb	r3, [r7, #13]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	4413      	add	r3, r2
 800d51c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d520:	b29b      	uxth	r3, r3
 800d522:	021b      	lsls	r3, r3, #8
 800d524:	b29a      	uxth	r2, r3
 800d526:	7b7b      	ldrb	r3, [r7, #13]
 800d528:	3301      	adds	r3, #1
 800d52a:	6879      	ldr	r1, [r7, #4]
 800d52c:	440b      	add	r3, r1
 800d52e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d532:	b29b      	uxth	r3, r3
 800d534:	4313      	orrs	r3, r2
 800d536:	b29b      	uxth	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 800d540:	7b7b      	ldrb	r3, [r7, #13]
 800d542:	3302      	adds	r3, #2
 800d544:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800d546:	7b7b      	ldrb	r3, [r7, #13]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	4413      	add	r3, r2
 800d54c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800d556:	7b7b      	ldrb	r3, [r7, #13]
 800d558:	3301      	adds	r3, #1
 800d55a:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800d55c:	7b7b      	ldrb	r3, [r7, #13]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4413      	add	r3, r2
 800d562:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800d56c:	7b7b      	ldrb	r3, [r7, #13]
 800d56e:	3301      	adds	r3, #1
 800d570:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b08c      	sub	sp, #48	; 0x30
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <ndefT4TPollerSelectNdefTagApplication+0x26>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d103      	bne.n	800d59a <ndefT4TPollerSelectNdefTagApplication+0x1e>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	785b      	ldrb	r3, [r3, #1]
 800d596:	2b20      	cmp	r3, #32
 800d598:	d005      	beq.n	800d5a6 <ndefT4TPollerSelectNdefTagApplication+0x2a>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d001      	beq.n	800d5a6 <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 800d5a2:	2307      	movs	r3, #7
 800d5a4:	e03b      	b.n	800d61e <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d5a6:	f107 0308 	add.w	r3, r7, #8
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7ff fddf 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 800d5b2:	68b8      	ldr	r0, [r7, #8]
 800d5b4:	f107 0308 	add.w	r3, r7, #8
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	2207      	movs	r2, #7
 800d5bc:	491a      	ldr	r1, [pc, #104]	; (800d628 <ndefT4TPollerSelectNdefTagApplication+0xac>)
 800d5be:	f00d fd5c 	bl	801b07a <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff fe00 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800d5d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d105      	bne.n	800d5e4 <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 800d5e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5e2:	e01c      	b.n	800d61e <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 800d5e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5e6:	2b05      	cmp	r3, #5
 800d5e8:	d001      	beq.n	800d5ee <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 800d5ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5ec:	e017      	b.n	800d61e <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 800d5ee:	68b8      	ldr	r0, [r7, #8]
 800d5f0:	f107 0308 	add.w	r3, r7, #8
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	2207      	movs	r2, #7
 800d5f8:	490c      	ldr	r1, [pc, #48]	; (800d62c <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 800d5fa:	f00d fd3e 	bl	801b07a <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff fde2 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800d60a:	4603      	mov	r3, r0
 800d60c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800d60e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 800d61c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3730      	adds	r7, #48	; 0x30
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	0801d62c 	.word	0x0801d62c
 800d62c:	0801d634 	.word	0x0801d634

0800d630 <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	; 0x30
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <ndefT4TPollerSelectFile+0x28>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <ndefT4TPollerSelectFile+0x20>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	785b      	ldrb	r3, [r3, #1]
 800d64c:	2b20      	cmp	r3, #32
 800d64e:	d005      	beq.n	800d65c <ndefT4TPollerSelectFile+0x2c>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d001      	beq.n	800d65c <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 800d658:	2307      	movs	r3, #7
 800d65a:	e024      	b.n	800d6a6 <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d65c:	f107 0308 	add.w	r3, r7, #8
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff fd84 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d008      	beq.n	800d684 <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 800d672:	68b8      	ldr	r0, [r7, #8]
 800d674:	f107 0308 	add.w	r3, r7, #8
 800d678:	3304      	adds	r3, #4
 800d67a:	2204      	movs	r2, #4
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	f00d fd5c 	bl	801b13a <rfalT4TPollerComposeSelectFileV1Mapping>
 800d682:	e007      	b.n	800d694 <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 800d684:	68b8      	ldr	r0, [r7, #8]
 800d686:	f107 0308 	add.w	r3, r7, #8
 800d68a:	3304      	adds	r3, #4
 800d68c:	2202      	movs	r2, #2
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	f00d fd23 	bl	801b0da <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d694:	f107 0308 	add.w	r3, r7, #8
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7ff fd97 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 800d6a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3730      	adds	r7, #48	; 0x30
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b08c      	sub	sp, #48	; 0x30
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	807b      	strh	r3, [r7, #2]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d015      	beq.n	800d6f0 <ndefT4TPollerReadBinary+0x42>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d103      	bne.n	800d6d4 <ndefT4TPollerReadBinary+0x26>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	785b      	ldrb	r3, [r3, #1]
 800d6d0:	2b20      	cmp	r3, #32
 800d6d2:	d003      	beq.n	800d6dc <ndefT4TPollerReadBinary+0x2e>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d109      	bne.n	800d6f0 <ndefT4TPollerReadBinary+0x42>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d6e2:	787a      	ldrb	r2, [r7, #1]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d803      	bhi.n	800d6f0 <ndefT4TPollerReadBinary+0x42>
 800d6e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	da01      	bge.n	800d6f4 <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 800d6f0:	2307      	movs	r3, #7
 800d6f2:	e016      	b.n	800d722 <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d6f4:	f107 0308 	add.w	r3, r7, #8
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7ff fd38 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f107 0308 	add.w	r3, r7, #8
 800d706:	3304      	adds	r3, #4
 800d708:	787a      	ldrb	r2, [r7, #1]
 800d70a:	8879      	ldrh	r1, [r7, #2]
 800d70c:	f00d fd45 	bl	801b19a <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d710:	f107 0308 	add.w	r3, r7, #8
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fd59 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800d71c:	4603      	mov	r3, r0
 800d71e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 800d720:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d722:	4618      	mov	r0, r3
 800d724:	3730      	adds	r7, #48	; 0x30
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b08e      	sub	sp, #56	; 0x38
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	4613      	mov	r3, r2
 800d736:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d016      	beq.n	800d76c <ndefT4TPollerReadBinaryODO+0x42>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <ndefT4TPollerReadBinaryODO+0x24>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	d003      	beq.n	800d756 <ndefT4TPollerReadBinaryODO+0x2c>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d10a      	bne.n	800d76c <ndefT4TPollerReadBinaryODO+0x42>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d75c:	79fa      	ldrb	r2, [r7, #7]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d804      	bhi.n	800d76c <ndefT4TPollerReadBinaryODO+0x42>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d768:	4293      	cmp	r3, r2
 800d76a:	d301      	bcc.n	800d770 <ndefT4TPollerReadBinaryODO+0x46>
    {
        return ERR_PARAM;
 800d76c:	2307      	movs	r3, #7
 800d76e:	e016      	b.n	800d79e <ndefT4TPollerReadBinaryODO+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d770:	f107 0310 	add.w	r3, r7, #16
 800d774:	4619      	mov	r1, r3
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff fcfa 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800d77c:	6938      	ldr	r0, [r7, #16]
 800d77e:	f107 0310 	add.w	r3, r7, #16
 800d782:	3304      	adds	r3, #4
 800d784:	79fa      	ldrb	r2, [r7, #7]
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	f00d fd30 	bl	801b1ec <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d78c:	f107 0310 	add.w	r3, r7, #16
 800d790:	4619      	mov	r1, r3
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff fd1b 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800d798:	4603      	mov	r3, r0
 800d79a:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800d79c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3738      	adds	r7, #56	; 0x38
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b08a      	sub	sp, #40	; 0x28
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
 800d7b2:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00e      	beq.n	800d7e4 <ndefT4TPollerReadBytes+0x3e>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d103      	bne.n	800d7d6 <ndefT4TPollerReadBytes+0x30>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	785b      	ldrb	r3, [r3, #1]
 800d7d2:	2b20      	cmp	r3, #32
 800d7d4:	d003      	beq.n	800d7de <ndefT4TPollerReadBytes+0x38>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d102      	bne.n	800d7e4 <ndefT4TPollerReadBytes+0x3e>
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800d7e4:	2307      	movs	r3, #7
 800d7e6:	e06c      	b.n	800d8c2 <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d903      	bls.n	800d80a <ndefT4TPollerReadBytes+0x64>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d808:	e001      	b.n	800d80e <ndefT4TPollerReadBytes+0x68>
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d816:	d308      	bcc.n	800d82a <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6a39      	ldr	r1, [r7, #32]
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f7ff ff83 	bl	800d72a <ndefT4TPollerReadBinaryODO>
 800d824:	4603      	mov	r3, r0
 800d826:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d828:	e008      	b.n	800d83c <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	7dfa      	ldrb	r2, [r7, #23]
 800d830:	4619      	mov	r1, r3
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff ff3b 	bl	800d6ae <ndefT4TPollerReadBinary>
 800d838:	4603      	mov	r3, r0
 800d83a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 800d83c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d001      	beq.n	800d846 <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 800d842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d844:	e03d      	b.n	800d8c2 <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d036      	beq.n	800d8be <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d856:	461a      	mov	r2, r3
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d201      	bcs.n	800d862 <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800d85e:	2308      	movs	r3, #8
 800d860:	e02f      	b.n	800d8c2 <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f203 41bd 	addw	r1, r3, #1213	; 0x4bd
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d86e:	461a      	mov	r2, r3
 800d870:	69b8      	ldr	r0, [r7, #24]
 800d872:	f00d fe1f 	bl	801b4b4 <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d87c:	461a      	mov	r2, r3
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	4413      	add	r3, r2
 800d882:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d88a:	461a      	mov	r2, r3
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	4413      	add	r3, r2
 800d890:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d898:	461a      	mov	r2, r3
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	1a9b      	subs	r3, r3, r2
 800d89e:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d007      	beq.n	800d8b6 <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	f8b2 29d0 	ldrh.w	r2, [r2, #2512]	; 0x9d0
 800d8b0:	441a      	add	r2, r3
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b4:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d19b      	bne.n	800d7f4 <ndefT4TPollerReadBytes+0x4e>
 800d8bc:	e000      	b.n	800d8c0 <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800d8be:	bf00      	nop

    return ERR_NONE;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3728      	adds	r7, #40	; 0x28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00e      	beq.n	800d8f8 <ndefT4TPollerContextInitialization+0x2e>
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <ndefT4TPollerContextInitialization+0x2e>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d103      	bne.n	800d8f0 <ndefT4TPollerContextInitialization+0x26>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	2b20      	cmp	r3, #32
 800d8ee:	d005      	beq.n	800d8fc <ndefT4TPollerContextInitialization+0x32>
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d001      	beq.n	800d8fc <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800d8f8:	2307      	movs	r3, #7
 800d8fa:	e012      	b.n	800d922 <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2278      	movs	r2, #120	; 0x78
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f00d fdd6 	bl	801b4b4 <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	220d      	movs	r2, #13
 800d914:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	220f      	movs	r2, #15
 800d91c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d011      	beq.n	800d95e <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2200      	movs	r2, #0
 800d93e:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2200      	movs	r2, #0
 800d950:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2200      	movs	r2, #0
 800d956:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2200      	movs	r2, #0
 800d95c:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00b      	beq.n	800d97c <ndefT4TPollerNdefDetect+0x52>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d103      	bne.n	800d974 <ndefT4TPollerNdefDetect+0x4a>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	785b      	ldrb	r3, [r3, #1]
 800d970:	2b20      	cmp	r3, #32
 800d972:	d005      	beq.n	800d980 <ndefT4TPollerNdefDetect+0x56>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d001      	beq.n	800d980 <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800d97c:	2307      	movs	r3, #7
 800d97e:	e0fa      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fdf7 	bl	800d57c <ndefT4TPollerSelectNdefTagApplication>
 800d98e:	4603      	mov	r3, r0
 800d990:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d992:	89fb      	ldrh	r3, [r7, #14]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800d998:	89fb      	ldrh	r3, [r7, #14]
 800d99a:	e0ec      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fc59 	bl	800d254 <ndefT4TReadAndParseCCFile>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d9a6:	89fb      	ldrh	r3, [r7, #14]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800d9ac:	89fb      	ldrh	r3, [r7, #14]
 800d9ae:	e0e2      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d9b6:	091b      	lsrs	r3, r3, #4
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d101      	bne.n	800d9c2 <ndefT4TPollerNdefDetect+0x98>
 800d9be:	2304      	movs	r3, #4
 800d9c0:	e000      	b.n	800d9c4 <ndefT4TPollerNdefDetect+0x9a>
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00c      	beq.n	800d9ea <ndefT4TPollerNdefDetect+0xc0>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d9d6:	b25b      	sxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	da04      	bge.n	800d9e6 <ndefT4TPollerNdefDetect+0xbc>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d9e2:	2bff      	cmp	r3, #255	; 0xff
 800d9e4:	d101      	bne.n	800d9ea <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d9e6:	2305      	movs	r3, #5
 800d9e8:	e0c5      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d9f0:	7b7b      	ldrb	r3, [r7, #13]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d201      	bcs.n	800d9fa <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800d9f6:	2305      	movs	r3, #5
 800d9f8:	e0bd      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	3384      	adds	r3, #132	; 0x84
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff fe15 	bl	800d630 <ndefT4TPollerSelectFile>
 800da06:	4603      	mov	r3, r0
 800da08:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800da0a:	89fb      	ldrh	r3, [r7, #14]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800da10:	89fb      	ldrh	r3, [r7, #14]
 800da12:	e0b0      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800da14:	7b7b      	ldrb	r3, [r7, #13]
 800da16:	461a      	mov	r2, r3
 800da18:	2100      	movs	r1, #0
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff fe47 	bl	800d6ae <ndefT4TPollerReadBinary>
 800da20:	4603      	mov	r3, r0
 800da22:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800da24:	89fb      	ldrh	r3, [r7, #14]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800da2a:	89fb      	ldrh	r3, [r7, #14]
 800da2c:	e0a3      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800da34:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800da36:	7b7b      	ldrb	r3, [r7, #13]
 800da38:	2b04      	cmp	r3, #4
 800da3a:	d111      	bne.n	800da60 <ndefT4TPollerNdefDetect+0x136>
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	061a      	lsls	r2, r3, #24
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	3301      	adds	r3, #1
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	041b      	lsls	r3, r3, #16
 800da4a:	431a      	orrs	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	3302      	adds	r3, #2
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	021b      	lsls	r3, r3, #8
 800da54:	4313      	orrs	r3, r2
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	3203      	adds	r2, #3
 800da5a:	7812      	ldrb	r2, [r2, #0]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	e00a      	b.n	800da76 <ndefT4TPollerNdefDetect+0x14c>
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	b29b      	uxth	r3, r3
 800da66:	021b      	lsls	r3, r3, #8
 800da68:	b29a      	uxth	r2, r3
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	3301      	adds	r3, #1
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4313      	orrs	r3, r2
 800da74:	b29b      	uxth	r3, r3
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800da7c:	7b7a      	ldrb	r2, [r7, #13]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800da9c:	7b7b      	ldrb	r3, [r7, #13]
 800da9e:	1acb      	subs	r3, r1, r3
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d809      	bhi.n	800dab8 <ndefT4TPollerNdefDetect+0x18e>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d006      	beq.n	800dabc <ndefT4TPollerNdefDetect+0x192>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d801      	bhi.n	800dabc <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800dab8:	2305      	movs	r3, #5
 800daba:	e05c      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d116      	bne.n	800daf4 <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00c      	beq.n	800daea <ndefT4TPollerNdefDetect+0x1c0>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800dad6:	b25b      	sxtb	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	da04      	bge.n	800dae6 <ndefT4TPollerNdefDetect+0x1bc>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800dae2:	2bff      	cmp	r3, #255	; 0xff
 800dae4:	d101      	bne.n	800daea <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800dae6:	2305      	movs	r3, #5
 800dae8:	e045      	b.n	800db76 <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800daf2:	e015      	b.n	800db20 <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00a      	beq.n	800db14 <ndefT4TPollerNdefDetect+0x1ea>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800db04:	b25b      	sxtb	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	da06      	bge.n	800db18 <ndefT4TPollerNdefDetect+0x1ee>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800db10:	2bff      	cmp	r3, #255	; 0xff
 800db12:	d001      	beq.n	800db18 <ndefT4TPollerNdefDetect+0x1ee>
 800db14:	2202      	movs	r2, #2
 800db16:	e000      	b.n	800db1a <ndefT4TPollerNdefDetect+0x1f0>
 800db18:	2203      	movs	r2, #3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d026      	beq.n	800db74 <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800db36:	091b      	lsrs	r3, r3, #4
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800db44:	f003 030f 	and.w	r3, r3, #15
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db64:	1ad2      	subs	r2, r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b088      	sub	sp, #32
 800db82:	af02      	add	r7, sp, #8
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
 800db8a:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00e      	beq.n	800dbb0 <ndefT4TPollerReadRawMessage+0x32>
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d103      	bne.n	800dba2 <ndefT4TPollerReadRawMessage+0x24>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	785b      	ldrb	r3, [r3, #1]
 800db9e:	2b20      	cmp	r3, #32
 800dba0:	d003      	beq.n	800dbaa <ndefT4TPollerReadRawMessage+0x2c>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d102      	bne.n	800dbb0 <ndefT4TPollerReadRawMessage+0x32>
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800dbb0:	2307      	movs	r3, #7
 800dbb2:	e024      	b.n	800dbfe <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d801      	bhi.n	800dbc2 <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800dbbe:	2321      	movs	r3, #33	; 0x21
 800dbc0:	e01d      	b.n	800dbfe <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d201      	bcs.n	800dbd2 <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e015      	b.n	800dbfe <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fdde 	bl	800d7a6 <ndefT4TPollerReadBytes>
 800dbea:	4603      	mov	r3, r0
 800dbec:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800dbee:	8afb      	ldrh	r3, [r7, #22]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d003      	beq.n	800dbfc <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800dbfc:	8afb      	ldrh	r3, [r7, #22]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b090      	sub	sp, #64	; 0x40
 800dc0a:	af02      	add	r7, sp, #8
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	461a      	mov	r2, r3
 800dc12:	460b      	mov	r3, r1
 800dc14:	817b      	strh	r3, [r7, #10]
 800dc16:	4613      	mov	r3, r2
 800dc18:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d015      	beq.n	800dc4c <ndefT4TPollerWriteBinary+0x46>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <ndefT4TPollerWriteBinary+0x2a>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	785b      	ldrb	r3, [r3, #1]
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	d003      	beq.n	800dc38 <ndefT4TPollerWriteBinary+0x32>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d109      	bne.n	800dc4c <ndefT4TPollerWriteBinary+0x46>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dc3e:	7a7a      	ldrb	r2, [r7, #9]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d803      	bhi.n	800dc4c <ndefT4TPollerWriteBinary+0x46>
 800dc44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	da01      	bge.n	800dc50 <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800dc4c:	2307      	movs	r3, #7
 800dc4e:	e019      	b.n	800dc84 <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	4619      	mov	r1, r3
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fa8a 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800dc5c:	6938      	ldr	r0, [r7, #16]
 800dc5e:	7a7a      	ldrb	r2, [r7, #9]
 800dc60:	8979      	ldrh	r1, [r7, #10]
 800dc62:	f107 0310 	add.w	r3, r7, #16
 800dc66:	3304      	adds	r3, #4
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	f00d fb1e 	bl	801b2ae <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800dc72:	f107 0310 	add.w	r3, r7, #16
 800dc76:	4619      	mov	r1, r3
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f7ff faa8 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800dc82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3738      	adds	r7, #56	; 0x38
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b090      	sub	sp, #64	; 0x40
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d016      	beq.n	800dcce <ndefT4TPollerWriteBinaryODO+0x42>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d103      	bne.n	800dcb0 <ndefT4TPollerWriteBinaryODO+0x24>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	785b      	ldrb	r3, [r3, #1]
 800dcac:	2b20      	cmp	r3, #32
 800dcae:	d003      	beq.n	800dcb8 <ndefT4TPollerWriteBinaryODO+0x2c>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d10a      	bne.n	800dcce <ndefT4TPollerWriteBinaryODO+0x42>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dcbe:	78fa      	ldrb	r2, [r7, #3]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d804      	bhi.n	800dcce <ndefT4TPollerWriteBinaryODO+0x42>
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d301      	bcc.n	800dcd2 <ndefT4TPollerWriteBinaryODO+0x46>
    {
        return ERR_PARAM;
 800dcce:	2307      	movs	r3, #7
 800dcd0:	e019      	b.n	800dd06 <ndefT4TPollerWriteBinaryODO+0x7a>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800dcd2:	f107 0310 	add.w	r3, r7, #16
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff fa49 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800dcde:	6938      	ldr	r0, [r7, #16]
 800dce0:	78fa      	ldrb	r2, [r7, #3]
 800dce2:	f107 0310 	add.w	r3, r7, #16
 800dce6:	3304      	adds	r3, #4
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	4613      	mov	r3, r2
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	f00d fb11 	bl	801b316 <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800dcf4:	f107 0310 	add.w	r3, r7, #16
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7ff fa67 	bl	800d1ce <ndefT4TTransceiveTxRx>
 800dd00:	4603      	mov	r3, r0
 800dd02:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800dd04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3738      	adds	r7, #56	; 0x38
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b088      	sub	sp, #32
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00e      	beq.n	800dd4c <ndefT4TPollerWriteBytes+0x3e>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d103      	bne.n	800dd3e <ndefT4TPollerWriteBytes+0x30>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	2b20      	cmp	r3, #32
 800dd3c:	d003      	beq.n	800dd46 <ndefT4TPollerWriteBytes+0x38>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d102      	bne.n	800dd4c <ndefT4TPollerWriteBytes+0x3e>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800dd4c:	2307      	movs	r3, #7
 800dd4e:	e048      	b.n	800dde2 <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd56:	d318      	bcc.n	800dd8a <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dd5e:	3b07      	subs	r3, #7
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d905      	bls.n	800dd72 <ndefT4TPollerWriteBytes+0x64>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dd6c:	3b07      	subs	r3, #7
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	e001      	b.n	800dd76 <ndefT4TPollerWriteBytes+0x68>
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800dd78:	7f7b      	ldrb	r3, [r7, #29]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	69b9      	ldr	r1, [r7, #24]
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f7ff ff84 	bl	800dc8c <ndefT4TPollerWriteBinaryODO>
 800dd84:	4603      	mov	r3, r0
 800dd86:	83fb      	strh	r3, [r7, #30]
 800dd88:	e016      	b.n	800ddb8 <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dd90:	461a      	mov	r2, r3
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d903      	bls.n	800dda0 <ndefT4TPollerWriteBytes+0x92>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dd9e:	e001      	b.n	800dda4 <ndefT4TPollerWriteBytes+0x96>
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	b299      	uxth	r1, r3
 800ddaa:	7f7b      	ldrb	r3, [r7, #29]
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f7ff ff29 	bl	800dc06 <ndefT4TPollerWriteBinary>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800ddb8:	8bfb      	ldrh	r3, [r7, #30]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800ddbe:	8bfb      	ldrh	r3, [r7, #30]
 800ddc0:	e00f      	b.n	800dde2 <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800ddc2:	7f7b      	ldrb	r3, [r7, #29]
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800ddca:	7f7b      	ldrb	r3, [r7, #29]
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	4413      	add	r3, r2
 800ddd0:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800ddd2:	7f7b      	ldrb	r3, [r7, #29]
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1b7      	bne.n	800dd50 <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3720      	adds	r7, #32
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b084      	sub	sp, #16
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00b      	beq.n	800de12 <ndefT4TPollerWriteRawMessageLen+0x28>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d103      	bne.n	800de0a <ndefT4TPollerWriteRawMessageLen+0x20>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	2b20      	cmp	r3, #32
 800de08:	d005      	beq.n	800de16 <ndefT4TPollerWriteRawMessageLen+0x2c>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d001      	beq.n	800de16 <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800de12:	2307      	movs	r3, #7
 800de14:	e05f      	b.n	800ded6 <ndefT4TPollerWriteRawMessageLen+0xec>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d006      	beq.n	800de2e <ndefT4TPollerWriteRawMessageLen+0x44>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800de26:	2b02      	cmp	r3, #2
 800de28:	d001      	beq.n	800de2e <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800de2a:	2321      	movs	r3, #33	; 0x21
 800de2c:	e053      	b.n	800ded6 <ndefT4TPollerWriteRawMessageLen+0xec>
    }

    dataIt = 0U;
 800de2e:	2300      	movs	r3, #0
 800de30:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800de38:	091b      	lsrs	r3, r3, #4
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d12b      	bne.n	800de98 <ndefT4TPollerWriteRawMessageLen+0xae>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	0e1a      	lsrs	r2, r3, #24
 800de44:	7bfb      	ldrb	r3, [r7, #15]
 800de46:	b2d2      	uxtb	r2, r2
 800de48:	3310      	adds	r3, #16
 800de4a:	443b      	add	r3, r7
 800de4c:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
 800de52:	3301      	adds	r3, #1
 800de54:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	0c1a      	lsrs	r2, r3, #16
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	b2d2      	uxtb	r2, r2
 800de5e:	3310      	adds	r3, #16
 800de60:	443b      	add	r3, r7
 800de62:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	3301      	adds	r3, #1
 800de6a:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	0a1a      	lsrs	r2, r3, #8
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	b2d2      	uxtb	r2, r2
 800de74:	3310      	adds	r3, #16
 800de76:	443b      	add	r3, r7
 800de78:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
 800de7e:	3301      	adds	r3, #1
 800de80:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800de82:	7bfb      	ldrb	r3, [r7, #15]
 800de84:	683a      	ldr	r2, [r7, #0]
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	3310      	adds	r3, #16
 800de8a:	443b      	add	r3, r7
 800de8c:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	3301      	adds	r3, #1
 800de94:	73fb      	strb	r3, [r7, #15]
 800de96:	e014      	b.n	800dec2 <ndefT4TPollerWriteRawMessageLen+0xd8>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	0a1a      	lsrs	r2, r3, #8
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	3310      	adds	r3, #16
 800dea2:	443b      	add	r3, r7
 800dea4:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	3301      	adds	r3, #1
 800deac:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	3310      	adds	r3, #16
 800deb6:	443b      	add	r3, r7
 800deb8:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	3301      	adds	r3, #1
 800dec0:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	f107 0208 	add.w	r2, r7, #8
 800dec8:	2100      	movs	r1, #0
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff ff1f 	bl	800dd0e <ndefT4TPollerWriteBytes>
 800ded0:	4603      	mov	r3, r0
 800ded2:	81bb      	strh	r3, [r7, #12]
    return ret;
 800ded4:	89bb      	ldrh	r3, [r7, #12]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b086      	sub	sp, #24
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d011      	beq.n	800df14 <ndefT4TPollerWriteRawMessage+0x36>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d103      	bne.n	800df00 <ndefT4TPollerWriteRawMessage+0x22>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	785b      	ldrb	r3, [r3, #1]
 800defc:	2b20      	cmp	r3, #32
 800defe:	d003      	beq.n	800df08 <ndefT4TPollerWriteRawMessage+0x2a>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d105      	bne.n	800df14 <ndefT4TPollerWriteRawMessage+0x36>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d104      	bne.n	800df18 <ndefT4TPollerWriteRawMessage+0x3a>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800df14:	2307      	movs	r3, #7
 800df16:	e04b      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d006      	beq.n	800df30 <ndefT4TPollerWriteRawMessage+0x52>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d001      	beq.n	800df30 <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800df2c:	2321      	movs	r3, #33	; 0x21
 800df2e:	e03f      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800df30:	6879      	ldr	r1, [r7, #4]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 f8dd 	bl	800e0f2 <ndefT4TPollerCheckAvailableSpace>
 800df38:	4603      	mov	r3, r0
 800df3a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df3c:	8afb      	ldrh	r3, [r7, #22]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800df42:	2307      	movs	r3, #7
 800df44:	e034      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800df46:	6879      	ldr	r1, [r7, #4]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f90a 	bl	800e162 <ndefT4TPollerBeginWriteMessage>
 800df4e:	4603      	mov	r3, r0
 800df50:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df52:	8afb      	ldrh	r3, [r7, #22]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d005      	beq.n	800df64 <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800df60:	8afb      	ldrh	r3, [r7, #22]
 800df62:	e025      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d021      	beq.n	800dfae <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff feca 	bl	800dd0e <ndefT4TPollerWriteBytes>
 800df7a:	4603      	mov	r3, r0
 800df7c:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800df7e:	8afb      	ldrh	r3, [r7, #22]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d005      	beq.n	800df90 <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800df8c:	8afb      	ldrh	r3, [r7, #22]
 800df8e:	e00f      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 800df90:	6879      	ldr	r1, [r7, #4]
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 f91f 	bl	800e1d6 <ndefT4TPollerEndWriteMessage>
 800df98:	4603      	mov	r3, r0
 800df9a:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800df9c:	8afb      	ldrh	r3, [r7, #22]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d005      	beq.n	800dfae <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800dfaa:	8afb      	ldrh	r3, [r7, #22]
 800dfac:	e000      	b.n	800dfb0 <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 800dfae:	8afb      	ldrh	r3, [r7, #22]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3718      	adds	r7, #24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00b      	beq.n	800dfe2 <ndefT4TPollerTagFormat+0x2a>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d103      	bne.n	800dfda <ndefT4TPollerTagFormat+0x22>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	2b20      	cmp	r3, #32
 800dfd8:	d005      	beq.n	800dfe6 <ndefT4TPollerTagFormat+0x2e>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d001      	beq.n	800dfe6 <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 800dfe2:	2307      	movs	r3, #7
 800dfe4:	e03a      	b.n	800e05c <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff fac8 	bl	800d57c <ndefT4TPollerSelectNdefTagApplication>
 800dfec:	4603      	mov	r3, r0
 800dfee:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800dff0:	8afb      	ldrh	r3, [r7, #22]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 800dff6:	8afb      	ldrh	r3, [r7, #22]
 800dff8:	e030      	b.n	800e05c <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff f92a 	bl	800d254 <ndefT4TReadAndParseCCFile>
 800e000:	4603      	mov	r3, r0
 800e002:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800e004:	8afb      	ldrh	r3, [r7, #22]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 800e00a:	8afb      	ldrh	r3, [r7, #22]
 800e00c:	e026      	b.n	800e05c <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3384      	adds	r3, #132	; 0x84
 800e012:	4619      	mov	r1, r3
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7ff fb0b 	bl	800d630 <ndefT4TPollerSelectFile>
 800e01a:	4603      	mov	r3, r0
 800e01c:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800e01e:	8afb      	ldrh	r3, [r7, #22]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 800e024:	8afb      	ldrh	r3, [r7, #22]
 800e026:	e019      	b.n	800e05c <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 800e028:	f107 0310 	add.w	r3, r7, #16
 800e02c:	2204      	movs	r2, #4
 800e02e:	2100      	movs	r1, #0
 800e030:	4618      	mov	r0, r3
 800e032:	f00d fa67 	bl	801b504 <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e03c:	091b      	lsrs	r3, r3, #4
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b03      	cmp	r3, #3
 800e042:	d101      	bne.n	800e048 <ndefT4TPollerTagFormat+0x90>
 800e044:	2304      	movs	r3, #4
 800e046:	e000      	b.n	800e04a <ndefT4TPollerTagFormat+0x92>
 800e048:	2302      	movs	r3, #2
 800e04a:	f107 0210 	add.w	r2, r7, #16
 800e04e:	2100      	movs	r1, #0
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7ff fe5c 	bl	800dd0e <ndefT4TPollerWriteBytes>
 800e056:	4603      	mov	r3, r0
 800e058:	82fb      	strh	r3, [r7, #22]
    return ret;
 800e05a:	8afb      	ldrh	r3, [r7, #22]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 800e064:	b5b0      	push	{r4, r5, r7, lr}
 800e066:	b092      	sub	sp, #72	; 0x48
 800e068:	af06      	add	r7, sp, #24
 800e06a:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00b      	beq.n	800e08a <ndefT4TPollerCheckPresence+0x26>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d103      	bne.n	800e082 <ndefT4TPollerCheckPresence+0x1e>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	2b20      	cmp	r3, #32
 800e080:	d005      	beq.n	800e08e <ndefT4TPollerCheckPresence+0x2a>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d001      	beq.n	800e08e <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 800e08a:	2307      	movs	r3, #7
 800e08c:	e02d      	b.n	800e0ea <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800e08e:	f107 0308 	add.w	r3, r7, #8
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff f86b 	bl	800d170 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 800e09a:	68b8      	ldr	r0, [r7, #8]
 800e09c:	f107 0308 	add.w	r3, r7, #8
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	f00d f878 	bl	801b19a <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800e0bc:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 800e0be:	466d      	mov	r5, sp
 800e0c0:	f107 0418 	add.w	r4, r7, #24
 800e0c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	602b      	str	r3, [r5, #0]
 800e0cc:	f107 0308 	add.w	r3, r7, #8
 800e0d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0d2:	f003 faff 	bl	80116d4 <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 800e0d6:	f00a fb47 	bl	8018768 <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 800e0da:	f003 fb4b 	bl	8011774 <rfalIsoDepGetApduTransceiveStatus>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 800e0e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d0f6      	beq.n	800e0d6 <ndefT4TPollerCheckPresence+0x72>

    return ret;
 800e0e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3730      	adds	r7, #48	; 0x30
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bdb0      	pop	{r4, r5, r7, pc}

0800e0f2 <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00b      	beq.n	800e11a <ndefT4TPollerCheckAvailableSpace+0x28>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d103      	bne.n	800e112 <ndefT4TPollerCheckAvailableSpace+0x20>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	785b      	ldrb	r3, [r3, #1]
 800e10e:	2b20      	cmp	r3, #32
 800e110:	d005      	beq.n	800e11e <ndefT4TPollerCheckAvailableSpace+0x2c>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d001      	beq.n	800e11e <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 800e11a:	2307      	movs	r3, #7
 800e11c:	e01c      	b.n	800e158 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 800e128:	2321      	movs	r3, #33	; 0x21
 800e12a:	e015      	b.n	800e158 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e132:	091b      	lsrs	r3, r3, #4
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b03      	cmp	r3, #3
 800e138:	d101      	bne.n	800e13e <ndefT4TPollerCheckAvailableSpace+0x4c>
 800e13a:	2304      	movs	r3, #4
 800e13c:	e000      	b.n	800e140 <ndefT4TPollerCheckAvailableSpace+0x4e>
 800e13e:	2302      	movs	r3, #2
 800e140:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 800e142:	7bfa      	ldrb	r2, [r7, #15]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	441a      	add	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e14e:	429a      	cmp	r2, r3
 800e150:	d901      	bls.n	800e156 <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 800e152:	2301      	movs	r3, #1
 800e154:	e000      	b.n	800e158 <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bc80      	pop	{r7}
 800e160:	4770      	bx	lr

0800e162 <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <ndefT4TPollerBeginWriteMessage+0x28>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d103      	bne.n	800e182 <ndefT4TPollerBeginWriteMessage+0x20>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	785b      	ldrb	r3, [r3, #1]
 800e17e:	2b20      	cmp	r3, #32
 800e180:	d005      	beq.n	800e18e <ndefT4TPollerBeginWriteMessage+0x2c>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d001      	beq.n	800e18e <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800e18a:	2307      	movs	r3, #7
 800e18c:	e01f      	b.n	800e1ce <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e194:	2b01      	cmp	r3, #1
 800e196:	d006      	beq.n	800e1a6 <ndefT4TPollerBeginWriteMessage+0x44>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d001      	beq.n	800e1a6 <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 800e1a2:	2321      	movs	r3, #33	; 0x21
 800e1a4:	e013      	b.n	800e1ce <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff fe1e 	bl	800ddea <ndefT4TPollerWriteRawMessageLen>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e1b2:	89fb      	ldrh	r3, [r7, #14]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d005      	beq.n	800e1c4 <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e1c0:	89fb      	ldrh	r3, [r7, #14]
 800e1c2:	e004      	b.n	800e1ce <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00b      	beq.n	800e1fe <ndefT4TPollerEndWriteMessage+0x28>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d103      	bne.n	800e1f6 <ndefT4TPollerEndWriteMessage+0x20>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	785b      	ldrb	r3, [r3, #1]
 800e1f2:	2b20      	cmp	r3, #32
 800e1f4:	d005      	beq.n	800e202 <ndefT4TPollerEndWriteMessage+0x2c>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d001      	beq.n	800e202 <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800e1fe:	2307      	movs	r3, #7
 800e200:	e025      	b.n	800e24e <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d001      	beq.n	800e210 <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 800e20c:	2321      	movs	r3, #33	; 0x21
 800e20e:	e01e      	b.n	800e24e <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fde9 	bl	800ddea <ndefT4TPollerWriteRawMessageLen>
 800e218:	4603      	mov	r3, r0
 800e21a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e21c:	89fb      	ldrh	r3, [r7, #14]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d005      	beq.n	800e22e <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e22a:	89fb      	ldrh	r3, [r7, #14]
 800e22c:	e00f      	b.n	800e24e <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <ndefT4TPollerEndWriteMessage+0x6e>
 800e240:	2201      	movs	r2, #1
 800e242:	e000      	b.n	800e246 <ndefT4TPollerEndWriteMessage+0x70>
 800e244:	2202      	movs	r2, #2
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b08c      	sub	sp, #48	; 0x30
 800e25a:	af02      	add	r7, sp, #8
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
 800e262:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 800e264:	2307      	movs	r3, #7
 800e266:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80ef 	beq.w	800e456 <ndefT5TPollerReadBytes+0x200>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 80e9 	beq.w	800e456 <ndefT5TPollerReadBytes+0x200>
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 80e5 	beq.w	800e456 <ndefT5TPollerReadBytes+0x200>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 80e1 	beq.w	800e456 <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e29a:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 800e29c:	8b7b      	ldrh	r3, [r7, #26]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d101      	bne.n	800e2a6 <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 800e2a2:	2308      	movs	r3, #8
 800e2a4:	e0e3      	b.n	800e46e <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 800e2a6:	8b7b      	ldrh	r3, [r7, #26]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 800e2b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e2b2:	8b7a      	ldrh	r2, [r7, #26]
 800e2b4:	fb02 f303 	mul.w	r3, r2, r3
 800e2b8:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e2c0:	8b7b      	ldrh	r3, [r7, #26]
 800e2c2:	3303      	adds	r3, #3
 800e2c4:	b298      	uxth	r0, r3
 800e2c6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e2c8:	f107 0312 	add.w	r3, r7, #18
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f001 f932 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800e2da:	8afb      	ldrh	r3, [r7, #22]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f040 80ba 	bne.w	800e456 <ndefT5TPollerReadBytes+0x200>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f040 80b4 	bne.w	800e456 <ndefT5TPollerReadBytes+0x200>
 800e2ee:	8a7b      	ldrh	r3, [r7, #18]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 80b0 	beq.w	800e456 <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 800e2f6:	8a7a      	ldrh	r2, [r7, #18]
 800e2f8:	8b3b      	ldrh	r3, [r7, #24]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	b29b      	uxth	r3, r3
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	b29b      	uxth	r3, r3
 800e306:	3b01      	subs	r3, #1
 800e308:	b29b      	uxth	r3, r3
 800e30a:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 800e30c:	8a7b      	ldrh	r3, [r7, #18]
 800e30e:	461a      	mov	r2, r3
 800e310:	6a3b      	ldr	r3, [r7, #32]
 800e312:	4293      	cmp	r3, r2
 800e314:	d202      	bcs.n	800e31c <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 800e31c:	8a7b      	ldrh	r3, [r7, #18]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00e      	beq.n	800e340 <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	b29b      	uxth	r3, r3
 800e326:	461a      	mov	r2, r3
 800e328:	8b3b      	ldrh	r3, [r7, #24]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	3301      	adds	r3, #1
 800e32e:	33d0      	adds	r3, #208	; 0xd0
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	4413      	add	r3, r2
 800e334:	3304      	adds	r3, #4
 800e336:	8a7a      	ldrh	r2, [r7, #18]
 800e338:	4619      	mov	r1, r3
 800e33a:	6838      	ldr	r0, [r7, #0]
 800e33c:	f00d f8ba 	bl	801b4b4 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800e340:	8a7b      	ldrh	r3, [r7, #18]
 800e342:	461a      	mov	r2, r3
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	4413      	add	r3, r2
 800e348:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 800e34a:	8a7b      	ldrh	r3, [r7, #18]
 800e34c:	461a      	mov	r2, r3
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	1a9b      	subs	r3, r3, r2
 800e352:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800e354:	e036      	b.n	800e3c4 <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 800e356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e358:	3301      	adds	r3, #1
 800e35a:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	3b01      	subs	r3, #1
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	4413      	add	r3, r2
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	683a      	ldr	r2, [r7, #0]
 800e36e:	441a      	add	r2, r3
 800e370:	8b7b      	ldrh	r3, [r7, #26]
 800e372:	3303      	adds	r3, #3
 800e374:	b298      	uxth	r0, r3
 800e376:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e378:	f107 0312 	add.w	r3, r7, #18
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	4603      	mov	r3, r0
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f001 f8da 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800e386:	4603      	mov	r3, r0
 800e388:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	4413      	add	r3, r2
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	3b01      	subs	r3, #1
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	7d7a      	ldrb	r2, [r7, #21]
 800e3a0:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 800e3a2:	8afb      	ldrh	r3, [r7, #22]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d153      	bne.n	800e450 <ndefT5TPollerReadBytes+0x1fa>
 800e3a8:	8a7b      	ldrh	r3, [r7, #18]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d050      	beq.n	800e450 <ndefT5TPollerReadBytes+0x1fa>
 800e3ae:	7d3b      	ldrb	r3, [r7, #20]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d14d      	bne.n	800e450 <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 800e3b4:	8b7b      	ldrh	r3, [r7, #26]
 800e3b6:	69fa      	ldr	r2, [r7, #28]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 800e3bc:	8b7b      	ldrh	r3, [r7, #26]
 800e3be:	6a3a      	ldr	r2, [r7, #32]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800e3c4:	8b7b      	ldrh	r3, [r7, #26]
 800e3c6:	3302      	adds	r3, #2
 800e3c8:	6a3a      	ldr	r2, [r7, #32]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d2c3      	bcs.n	800e356 <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 800e3ce:	e03f      	b.n	800e450 <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 800e3d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e3dc:	8b7b      	ldrh	r3, [r7, #26]
 800e3de:	3303      	adds	r3, #3
 800e3e0:	b298      	uxth	r0, r3
 800e3e2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e3e4:	f107 0312 	add.w	r3, r7, #18
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f001 f8a4 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 800e3f6:	8afb      	ldrh	r3, [r7, #22]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d12c      	bne.n	800e456 <ndefT5TPollerReadBytes+0x200>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d127      	bne.n	800e456 <ndefT5TPollerReadBytes+0x200>
 800e406:	8a7b      	ldrh	r3, [r7, #18]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d024      	beq.n	800e456 <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 800e40c:	8a7b      	ldrh	r3, [r7, #18]
 800e40e:	3b01      	subs	r3, #1
 800e410:	b29b      	uxth	r3, r3
 800e412:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 800e414:	8a7b      	ldrh	r3, [r7, #18]
 800e416:	461a      	mov	r2, r3
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d202      	bcs.n	800e424 <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	b29b      	uxth	r3, r3
 800e422:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 800e424:	8a7b      	ldrh	r3, [r7, #18]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	18d0      	adds	r0, r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	33d5      	adds	r3, #213	; 0xd5
 800e434:	8a7a      	ldrh	r2, [r7, #18]
 800e436:	4619      	mov	r1, r3
 800e438:	f00d f83c 	bl	801b4b4 <memcpy>
                    }
                    lvRcvLen   += nbRead;
 800e43c:	8a7b      	ldrh	r3, [r7, #18]
 800e43e:	461a      	mov	r2, r3
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	4413      	add	r3, r2
 800e444:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 800e446:	8a7b      	ldrh	r3, [r7, #18]
 800e448:	461a      	mov	r2, r3
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	1a9b      	subs	r3, r3, r2
 800e44e:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1bc      	bne.n	800e3d0 <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 800e45c:	2300      	movs	r3, #0
 800e45e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 800e460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	69fa      	ldr	r2, [r7, #28]
 800e46a:	601a      	str	r2, [r3, #0]
    }
    return result;
 800e46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3728      	adds	r7, #40	; 0x28
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b086      	sub	sp, #24
 800e47a:	af02      	add	r7, sp, #8
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d006      	beq.n	800e494 <ndefT5TPollerContextInitialization+0x1e>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <ndefT5TPollerContextInitialization+0x1e>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b03      	cmp	r3, #3
 800e492:	d001      	beq.n	800e498 <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800e494:	2307      	movs	r3, #7
 800e496:	e096      	b.n	800e5c6 <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2278      	movs	r2, #120	; 0x78
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f00d f808 	bl	801b4b4 <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	1cda      	adds	r2, r3, #3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e4e4:	f107 030c 	add.w	r3, r7, #12
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	2323      	movs	r3, #35	; 0x23
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 f823 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 800e4f8:	89fb      	ldrh	r3, [r7, #14]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d019      	beq.n	800e532 <ndefT5TPollerContextInitialization+0xbc>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	7a5b      	ldrb	r3, [r3, #9]
 800e502:	2b02      	cmp	r3, #2
 800e504:	d115      	bne.n	800e532 <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2201      	movs	r2, #1
 800e50a:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e514:	f107 030c 	add.w	r3, r7, #12
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2323      	movs	r3, #35	; 0x23
 800e51c:	2100      	movs	r1, #0
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f001 f80b 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800e524:	4603      	mov	r3, r0
 800e526:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 800e528:	89fb      	ldrh	r3, [r7, #14]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 800e52e:	89fb      	ldrh	r3, [r7, #14]
 800e530:	e049      	b.n	800e5c6 <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 800e532:	89bb      	ldrh	r3, [r7, #12]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d915      	bls.n	800e564 <ndefT5TPollerContextInitialization+0xee>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d110      	bne.n	800e564 <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 800e542:	89bb      	ldrh	r3, [r7, #12]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	3b01      	subs	r3, #1
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3303      	adds	r3, #3
 800e554:	4619      	mov	r1, r3
 800e556:	2002      	movs	r0, #2
 800e558:	f008 fef2 	bl	8017340 <rfalNfcvPollerSelect>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <ndefT5TPollerContextInitialization+0xf2>
 800e562:	e005      	b.n	800e570 <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 800e564:	230b      	movs	r3, #11
 800e566:	e02e      	b.n	800e5c6 <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800e57e:	f083 0301 	eor.w	r3, r3, #1
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00a      	beq.n	800e59e <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 800e588:	2101      	movs	r1, #1
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f822 	bl	800f5d4 <ndefT5TGetSystemInformation>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d103      	bne.n	800e59e <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e5a4:	f083 0301 	eor.w	r3, r3, #1
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00a      	beq.n	800e5c4 <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f80f 	bl	800f5d4 <ndefT5TGetSystemInformation>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d103      	bne.n	800e5c4 <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 800e5c4:	89fb      	ldrh	r3, [r7, #14]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b08a      	sub	sp, #40	; 0x28
 800e5d2:	af02      	add	r7, sp, #8
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 800e5d8:	2305      	movs	r3, #5
 800e5da:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <ndefT5TPollerNdefDetect+0x1c>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d001      	beq.n	800e5ee <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 800e5ea:	2307      	movs	r3, #7
 800e5ec:	e203      	b.n	800e9f6 <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d011      	beq.n	800e640 <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2200      	movs	r2, #0
 800e620:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2200      	movs	r2, #0
 800e626:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	2200      	movs	r2, #0
 800e62c:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2200      	movs	r2, #0
 800e632:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2200      	movs	r2, #0
 800e638:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2200      	movs	r2, #0
 800e63e:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800e646:	f107 0308 	add.w	r3, r7, #8
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	4613      	mov	r3, r2
 800e64e:	2208      	movs	r2, #8
 800e650:	2100      	movs	r1, #0
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff fdff 	bl	800e256 <ndefT5TPollerReadBytes>
 800e658:	4603      	mov	r3, r0
 800e65a:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e65c:	8a3b      	ldrh	r3, [r7, #16]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f040 818e 	bne.w	800e980 <ndefT5TPollerNdefDetect+0x3b2>
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2b08      	cmp	r3, #8
 800e668:	f040 818a 	bne.w	800e980 <ndefT5TPollerNdefDetect+0x3b2>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e672:	2be1      	cmp	r3, #225	; 0xe1
 800e674:	d005      	beq.n	800e682 <ndefT5TPollerNdefDetect+0xb4>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e67c:	2be2      	cmp	r3, #226	; 0xe2
 800e67e:	f040 817f 	bne.w	800e980 <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e694:	099b      	lsrs	r3, r3, #6
 800e696:	b2da      	uxtb	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e6a4:	091b      	lsrs	r3, r3, #4
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	f003 0303 	and.w	r3, r3, #3
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e6ba:	089b      	lsrs	r3, r3, #2
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	f003 0303 	and.w	r3, r3, #3
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e6d0:	f003 0303 	and.w	r3, r3, #3
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	bf14      	ite	ne
 800e6f8:	2301      	movne	r3, #1
 800e6fa:	2300      	moveq	r3, #0
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e70a:	089b      	lsrs	r3, r3, #2
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	2b00      	cmp	r3, #0
 800e714:	bf14      	ite	ne
 800e716:	2301      	movne	r3, #1
 800e718:	2300      	moveq	r3, #0
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e728:	08db      	lsrs	r3, r3, #3
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	2b00      	cmp	r3, #0
 800e732:	bf14      	ite	ne
 800e734:	2301      	movne	r3, #1
 800e736:	2300      	moveq	r3, #0
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e746:	091b      	lsrs	r3, r3, #4
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	f003 0301 	and.w	r3, r3, #1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	bf14      	ite	ne
 800e752:	2301      	movne	r3, #1
 800e754:	2300      	moveq	r3, #0
 800e756:	b2da      	uxtb	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d02a      	beq.n	800e7c6 <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2204      	movs	r2, #4
 800e774:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e77e:	2bff      	cmp	r3, #255	; 0xff
 800e780:	d134      	bne.n	800e7ec <ndefT5TPollerNdefDetect+0x21e>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d02f      	beq.n	800e7ec <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d02a      	beq.n	800e7ec <ndefT5TPollerNdefDetect+0x21e>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800e79c:	089b      	lsrs	r3, r3, #2
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	f003 0301 	and.w	r3, r3, #1
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d021      	beq.n	800e7ec <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800e7b6:	fb02 f303 	mul.w	r3, r2, r3
 800e7ba:	08db      	lsrs	r3, r3, #3
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e7c4:	e012      	b.n	800e7ec <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	021b      	lsls	r3, r3, #8
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	4413      	add	r3, r2
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d025      	beq.n	800e842 <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800e7fc:	089b      	lsrs	r3, r3, #2
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800e804:	2b00      	cmp	r3, #0
 800e806:	d01c      	beq.n	800e842 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e814:	4619      	mov	r1, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800e81c:	fb01 f303 	mul.w	r3, r1, r3
 800e820:	08db      	lsrs	r3, r3, #3
 800e822:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800e824:	429a      	cmp	r2, r3
 800e826:	d10c      	bne.n	800e842 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d007      	beq.n	800e842 <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e838:	3b01      	subs	r3, #1
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e850:	461a      	mov	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e85e:	617b      	str	r3, [r7, #20]
        bExit     = false;
 800e860:	2300      	movs	r3, #0
 800e862:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 800e864:	f107 020c 	add.w	r2, r7, #12
 800e868:	f107 0308 	add.w	r3, r7, #8
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	4613      	mov	r3, r2
 800e870:	2204      	movs	r2, #4
 800e872:	6979      	ldr	r1, [r7, #20]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7ff fcee 	bl	800e256 <ndefT5TPollerReadBytes>
 800e87a:	4603      	mov	r3, r0
 800e87c:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 800e87e:	8a3b      	ldrh	r3, [r7, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f040 8085 	bne.w	800e990 <ndefT5TPollerNdefDetect+0x3c2>
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2b04      	cmp	r3, #4
 800e88a:	f040 8081 	bne.w	800e990 <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 800e88e:	2302      	movs	r3, #2
 800e890:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 800e892:	7b7b      	ldrb	r3, [r7, #13]
 800e894:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 800e896:	8b7b      	ldrh	r3, [r7, #26]
 800e898:	2bff      	cmp	r3, #255	; 0xff
 800e89a:	d10a      	bne.n	800e8b2 <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 800e89c:	7bbb      	ldrb	r3, [r7, #14]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	021b      	lsls	r3, r3, #8
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	7bfb      	ldrb	r3, [r7, #15]
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	4413      	add	r3, r2
 800e8aa:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 800e8ac:	8bbb      	ldrh	r3, [r7, #28]
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 800e8b2:	7b3b      	ldrb	r3, [r7, #12]
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	d142      	bne.n	800e93e <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	697a      	ldr	r2, [r7, #20]
 800e8c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 800e8c4:	8bba      	ldrh	r2, [r7, #28]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	441a      	add	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 800e8d0:	8b7a      	ldrh	r2, [r7, #26]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 800e8dc:	8b7b      	ldrh	r3, [r7, #26]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d117      	bne.n	800e912 <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d109      	bne.n	800e900 <ndefT5TPollerNdefDetect+0x332>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d104      	bne.n	800e900 <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800e8fe:	e005      	b.n	800e90c <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 800e908:	2305      	movs	r3, #5
 800e90a:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 800e90c:	2301      	movs	r3, #1
 800e90e:	74fb      	strb	r3, [r7, #19]
 800e910:	e02b      	b.n	800e96a <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10d      	bne.n	800e938 <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e922:	2b00      	cmp	r3, #0
 800e924:	d104      	bne.n	800e930 <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2202      	movs	r2, #2
 800e92a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800e92e:	e003      	b.n	800e938 <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2203      	movs	r2, #3
 800e934:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 800e938:	2301      	movs	r3, #1
 800e93a:	74fb      	strb	r3, [r7, #19]
 800e93c:	e015      	b.n	800e96a <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 800e93e:	7b3b      	ldrb	r3, [r7, #12]
 800e940:	2bfe      	cmp	r3, #254	; 0xfe
 800e942:	d104      	bne.n	800e94e <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 800e944:	2300      	movs	r3, #0
 800e946:	617b      	str	r3, [r7, #20]
                bExit     = true;
 800e948:	2301      	movs	r3, #1
 800e94a:	74fb      	strb	r3, [r7, #19]
 800e94c:	e00d      	b.n	800e96a <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 800e94e:	7b3b      	ldrb	r3, [r7, #12]
 800e950:	2bfd      	cmp	r3, #253	; 0xfd
 800e952:	d106      	bne.n	800e962 <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 800e954:	8bba      	ldrh	r2, [r7, #28]
 800e956:	8b7b      	ldrh	r3, [r7, #26]
 800e958:	4413      	add	r3, r2
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	4413      	add	r3, r2
 800e95e:	617b      	str	r3, [r7, #20]
 800e960:	e003      	b.n	800e96a <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 800e962:	2300      	movs	r3, #0
 800e964:	617b      	str	r3, [r7, #20]
                bExit = true;
 800e966:	2301      	movs	r3, #1
 800e968:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00f      	beq.n	800e990 <ndefT5TPollerNdefDetect+0x3c2>
 800e970:	7cfb      	ldrb	r3, [r7, #19]
 800e972:	f083 0301 	eor.w	r3, r3, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f47f af73 	bne.w	800e864 <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e97e:	e007      	b.n	800e990 <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 800e980:	2305      	movs	r3, #5
 800e982:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 800e984:	8a3b      	ldrh	r3, [r7, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d003      	beq.n	800e992 <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 800e98a:	8a3b      	ldrh	r3, [r7, #16]
 800e98c:	83fb      	strh	r3, [r7, #30]
 800e98e:	e000      	b.n	800e992 <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e990:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e998:	00da      	lsls	r2, r3, #3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d026      	beq.n	800e9f4 <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9dc:	441a      	add	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9e4:	1ad2      	subs	r2, r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 800e9f4:	8bfb      	ldrh	r3, [r7, #30]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3720      	adds	r7, #32
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b088      	sub	sp, #32
 800ea02:	af02      	add	r7, sp, #8
 800ea04:	60f8      	str	r0, [r7, #12]
 800ea06:	60b9      	str	r1, [r7, #8]
 800ea08:	607a      	str	r2, [r7, #4]
 800ea0a:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d006      	beq.n	800ea20 <ndefT5TPollerReadRawMessage+0x22>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b03      	cmp	r3, #3
 800ea18:	d102      	bne.n	800ea20 <ndefT5TPollerReadRawMessage+0x22>
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800ea20:	2307      	movs	r3, #7
 800ea22:	e016      	b.n	800ea52 <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d201      	bcs.n	800ea34 <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 800ea30:	2301      	movs	r3, #1
 800ea32:	e00e      	b.n	800ea52 <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7ff fc05 	bl	800e256 <ndefT5TPollerReadBytes>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	82fb      	strh	r3, [r7, #22]
    return result;
 800ea50:	8afb      	ldrh	r3, [r7, #22]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3718      	adds	r7, #24
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b08c      	sub	sp, #48	; 0x30
 800ea5e:	af02      	add	r7, sp, #8
 800ea60:	60f8      	str	r0, [r7, #12]
 800ea62:	60b9      	str	r1, [r7, #8]
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 800ea68:	2305      	movs	r3, #5
 800ea6a:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00b      	beq.n	800ea92 <ndefT5TPollerWriteBytes+0x38>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b03      	cmp	r3, #3
 800ea80:	d107      	bne.n	800ea92 <ndefT5TPollerWriteBytes+0x38>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <ndefT5TPollerWriteBytes+0x38>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 800ea92:	2307      	movs	r3, #7
 800ea94:	e0eb      	b.n	800ec6e <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ea9c:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 800ea9e:	8b7b      	ldrh	r3, [r7, #26]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 800eaa4:	2308      	movs	r3, #8
 800eaa6:	e0e2      	b.n	800ec6e <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 800eaa8:	8b7b      	ldrh	r3, [r7, #26]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab0:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 800eab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab4:	8b7a      	ldrh	r2, [r7, #26]
 800eab6:	fb02 f303 	mul.w	r3, r2, r3
 800eaba:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 800eabc:	8b3b      	ldrh	r3, [r7, #24]
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	f000 8081 	beq.w	800ebc8 <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800eacc:	8b7b      	ldrh	r3, [r7, #26]
 800eace:	3303      	adds	r3, #3
 800ead0:	b298      	uxth	r0, r3
 800ead2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ead4:	f107 0314 	add.w	r3, r7, #20
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	4603      	mov	r3, r0
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f000 fd2c 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800eae2:	4603      	mov	r3, r0
 800eae4:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800eae6:	8afb      	ldrh	r3, [r7, #22]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d13b      	bne.n	800eb64 <ndefT5TPollerWriteBytes+0x10a>
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d136      	bne.n	800eb64 <ndefT5TPollerWriteBytes+0x10a>
 800eaf6:	8abb      	ldrh	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d033      	beq.n	800eb64 <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 800eafc:	8aba      	ldrh	r2, [r7, #20]
 800eafe:	8b3b      	ldrh	r3, [r7, #24]
 800eb00:	4413      	add	r3, r2
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 800eb12:	8abb      	ldrh	r3, [r7, #20]
 800eb14:	461a      	mov	r2, r3
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d202      	bcs.n	800eb22 <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 800eb22:	8abb      	ldrh	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00e      	beq.n	800eb46 <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	8b3b      	ldrh	r3, [r7, #24]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	3301      	adds	r3, #1
 800eb34:	33d0      	adds	r3, #208	; 0xd0
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	4413      	add	r3, r2
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	8aba      	ldrh	r2, [r7, #20]
 800eb3e:	6a39      	ldr	r1, [r7, #32]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f00c fcb7 	bl	801b4b4 <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800eb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb4e:	4619      	mov	r1, r3
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f000 fc49 	bl	800f3e8 <ndefT5TPollerWriteSingleBlock>
 800eb56:	4603      	mov	r3, r0
 800eb58:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800eb5a:	8afb      	ldrh	r3, [r7, #22]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00b      	beq.n	800eb78 <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 800eb60:	8afb      	ldrh	r3, [r7, #22]
 800eb62:	e084      	b.n	800ec6e <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800eb64:	8afb      	ldrh	r3, [r7, #22]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 800eb6a:	8afb      	ldrh	r3, [r7, #22]
 800eb6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eb6e:	e001      	b.n	800eb74 <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 800eb70:	2307      	movs	r3, #7
 800eb72:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800eb74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb76:	e07a      	b.n	800ec6e <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 800eb78:	8abb      	ldrh	r3, [r7, #20]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 800eb82:	8abb      	ldrh	r3, [r7, #20]
 800eb84:	461a      	mov	r2, r3
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	4413      	add	r3, r2
 800eb8a:	623b      	str	r3, [r7, #32]
        startBlock++;
 800eb8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb8e:	3301      	adds	r3, #1
 800eb90:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 800eb92:	e019      	b.n	800ebc8 <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 800eb94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb96:	6a3a      	ldr	r2, [r7, #32]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f000 fc24 	bl	800f3e8 <ndefT5TPollerWriteSingleBlock>
 800eba0:	4603      	mov	r3, r0
 800eba2:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 800eba4:	8afb      	ldrh	r3, [r7, #22]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10b      	bne.n	800ebc2 <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 800ebaa:	8b7b      	ldrh	r3, [r7, #26]
 800ebac:	69fa      	ldr	r2, [r7, #28]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 800ebb2:	8b7b      	ldrh	r3, [r7, #26]
 800ebb4:	6a3a      	ldr	r2, [r7, #32]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	623b      	str	r3, [r7, #32]
            startBlock++;
 800ebba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ebc0:	e002      	b.n	800ebc8 <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 800ebc2:	8afb      	ldrh	r3, [r7, #22]
 800ebc4:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800ebc6:	e003      	b.n	800ebd0 <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 800ebc8:	8b7b      	ldrh	r3, [r7, #26]
 800ebca:	69fa      	ldr	r2, [r7, #28]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d2e1      	bcs.n	800eb94 <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d045      	beq.n	800ec62 <ndefT5TPollerWriteBytes+0x208>
 800ebd6:	8b7b      	ldrh	r3, [r7, #26]
 800ebd8:	69fa      	ldr	r2, [r7, #28]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d241      	bcs.n	800ec62 <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800ebe4:	8b7b      	ldrh	r3, [r7, #26]
 800ebe6:	3303      	adds	r3, #3
 800ebe8:	b298      	uxth	r0, r3
 800ebea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ebec:	f107 0314 	add.w	r3, r7, #20
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f000 fca0 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800ebfe:	8afb      	ldrh	r3, [r7, #22]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d124      	bne.n	800ec4e <ndefT5TPollerWriteBytes+0x1f4>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d11f      	bne.n	800ec4e <ndefT5TPollerWriteBytes+0x1f4>
 800ec0e:	8abb      	ldrh	r3, [r7, #20]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d01c      	beq.n	800ec4e <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d006      	beq.n	800ec28 <ndefT5TPollerWriteBytes+0x1ce>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	33d5      	adds	r3, #213	; 0xd5
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	6a39      	ldr	r1, [r7, #32]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f00c fc46 	bl	801b4b4 <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800ec2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec30:	4619      	mov	r1, r3
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f000 fbd8 	bl	800f3e8 <ndefT5TPollerWriteSingleBlock>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800ec3c:	8afb      	ldrh	r3, [r7, #22]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 800ec42:	8afb      	ldrh	r3, [r7, #22]
 800ec44:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 800ec46:	e00c      	b.n	800ec62 <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 800ec4c:	e009      	b.n	800ec62 <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800ec4e:	8afb      	ldrh	r3, [r7, #22]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 800ec54:	8afb      	ldrh	r3, [r7, #22]
 800ec56:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ec58:	e001      	b.n	800ec5e <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 800ec5a:	2307      	movs	r3, #7
 800ec5c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800ec5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec60:	e005      	b.n	800ec6e <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 800ec6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3728      	adds	r7, #40	; 0x28
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b086      	sub	sp, #24
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 800ec80:	2307      	movs	r3, #7
 800ec82:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d071      	beq.n	800ed72 <ndefT5TPollerWriteRawMessageLen+0xfc>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	2b03      	cmp	r3, #3
 800ec94:	d16d      	bne.n	800ed72 <ndefT5TPollerWriteRawMessageLen+0xfc>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d007      	beq.n	800ecb0 <ndefT5TPollerWriteRawMessageLen+0x3a>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d002      	beq.n	800ecb0 <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 800ecaa:	2321      	movs	r3, #33	; 0x21
 800ecac:	82fb      	strh	r3, [r7, #22]
 800ecae:	e060      	b.n	800ed72 <ndefT5TPollerWriteRawMessageLen+0xfc>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 800ecb0:	7d7b      	ldrb	r3, [r7, #21]
 800ecb2:	3318      	adds	r3, #24
 800ecb4:	443b      	add	r3, r7
 800ecb6:	2203      	movs	r2, #3
 800ecb8:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 800ecbc:	7d7b      	ldrb	r3, [r7, #21]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	2bfe      	cmp	r3, #254	; 0xfe
 800ecc6:	d80a      	bhi.n	800ecde <ndefT5TPollerWriteRawMessageLen+0x68>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 800ecc8:	7d7b      	ldrb	r3, [r7, #21]
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	b2d2      	uxtb	r2, r2
 800ecce:	3318      	adds	r3, #24
 800ecd0:	443b      	add	r3, r7
 800ecd2:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ecd6:	7d7b      	ldrb	r3, [r7, #21]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	757b      	strb	r3, [r7, #21]
 800ecdc:	e014      	b.n	800ed08 <ndefT5TPollerWriteRawMessageLen+0x92>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	0a1a      	lsrs	r2, r3, #8
 800ece2:	7d7b      	ldrb	r3, [r7, #21]
 800ece4:	b2d2      	uxtb	r2, r2
 800ece6:	3318      	adds	r3, #24
 800ece8:	443b      	add	r3, r7
 800ecea:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ecee:	7d7b      	ldrb	r3, [r7, #21]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 800ecf4:	7d7b      	ldrb	r3, [r7, #21]
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	b2d2      	uxtb	r2, r2
 800ecfa:	3318      	adds	r3, #24
 800ecfc:	443b      	add	r3, r7
 800ecfe:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ed02:	7d7b      	ldrb	r3, [r7, #21]
 800ed04:	3301      	adds	r3, #1
 800ed06:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d108      	bne.n	800ed20 <ndefT5TPollerWriteRawMessageLen+0xaa>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800ed0e:	7d7b      	ldrb	r3, [r7, #21]
 800ed10:	3318      	adds	r3, #24
 800ed12:	443b      	add	r3, r7
 800ed14:	22fe      	movs	r2, #254	; 0xfe
 800ed16:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ed1a:	7d7b      	ldrb	r3, [r7, #21]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ed26:	7d7b      	ldrb	r3, [r7, #21]
 800ed28:	f107 020c 	add.w	r2, r7, #12
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff fe94 	bl	800ea5a <ndefT5TPollerWriteBytes>
 800ed32:	4603      	mov	r3, r0
 800ed34:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 800ed36:	8afb      	ldrh	r3, [r7, #22]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d11a      	bne.n	800ed72 <ndefT5TPollerWriteRawMessageLen+0xfc>
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d017      	beq.n	800ed72 <ndefT5TPollerWriteRawMessageLen+0xfc>
            {  /* T5T need specific terminator */
               len = 0U;
 800ed42:	2300      	movs	r3, #0
 800ed44:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800ed46:	7d7b      	ldrb	r3, [r7, #21]
 800ed48:	3318      	adds	r3, #24
 800ed4a:	443b      	add	r3, r7
 800ed4c:	22fe      	movs	r2, #254	; 0xfe
 800ed4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 800ed52:	7d7b      	ldrb	r3, [r7, #21]
 800ed54:	3301      	adds	r3, #1
 800ed56:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	18d1      	adds	r1, r2, r3
 800ed62:	7d7b      	ldrb	r3, [r7, #21]
 800ed64:	f107 020c 	add.w	r2, r7, #12
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff fe76 	bl	800ea5a <ndefT5TPollerWriteBytes>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 800ed72:	8afb      	ldrh	r3, [r7, #22]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d006      	beq.n	800eda0 <ndefT5TPollerWriteRawMessage+0x24>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d102      	bne.n	800eda0 <ndefT5TPollerWriteRawMessage+0x24>
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 800eda0:	2307      	movs	r3, #7
 800eda2:	e04b      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d006      	beq.n	800edbc <ndefT5TPollerWriteRawMessage+0x40>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d001      	beq.n	800edbc <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800edb8:	2321      	movs	r3, #33	; 0x21
 800edba:	e03f      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 800edbc:	6879      	ldr	r1, [r7, #4]
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f000 fa57 	bl	800f272 <ndefT5TPollerCheckAvailableSpace>
 800edc4:	4603      	mov	r3, r0
 800edc6:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800edc8:	8afb      	ldrh	r3, [r7, #22]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800edce:	2307      	movs	r3, #7
 800edd0:	e034      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 800edd2:	6879      	ldr	r1, [r7, #4]
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 fa81 	bl	800f2dc <ndefT5TPollerBeginWriteMessage>
 800edda:	4603      	mov	r3, r0
 800eddc:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 800edde:	8afb      	ldrh	r3, [r7, #22]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d005      	beq.n	800edf0 <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 800edec:	8afb      	ldrh	r3, [r7, #22]
 800edee:	e025      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d021      	beq.n	800ee3a <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f7ff fe2a 	bl	800ea5a <ndefT5TPollerWriteBytes>
 800ee06:	4603      	mov	r3, r0
 800ee08:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800ee0a:	8afb      	ldrh	r3, [r7, #22]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d005      	beq.n	800ee1c <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800ee18:	8afb      	ldrh	r3, [r7, #22]
 800ee1a:	e00f      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 800ee1c:	6939      	ldr	r1, [r7, #16]
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 faaa 	bl	800f378 <ndefT5TPollerEndWriteMessage>
 800ee24:	4603      	mov	r3, r0
 800ee26:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800ee28:	8afb      	ldrh	r3, [r7, #22]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d005      	beq.n	800ee3a <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800ee36:	8afb      	ldrh	r3, [r7, #22]
 800ee38:	e000      	b.n	800ee3c <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 800ee3a:	8afb      	ldrh	r3, [r7, #22]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3718      	adds	r7, #24
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <ndefT5TWriteCC+0x16>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d001      	beq.n	800ee5e <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 800ee5a:	2307      	movs	r3, #7
 800ee5c:	e0c9      	b.n	800eff2 <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	339c      	adds	r3, #156	; 0x9c
 800ee62:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 800ee64:	2300      	movs	r3, #0
 800ee66:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 800ee68:	7afb      	ldrb	r3, [r7, #11]
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800ee74:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ee76:	7afb      	ldrb	r3, [r7, #11]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ee82:	019b      	lsls	r3, r3, #6
 800ee84:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ee8c:	011b      	lsls	r3, r3, #4
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee94:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800ee96:	4313      	orrs	r3, r2
 800ee98:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	f003 030c 	and.w	r3, r3, #12
 800eea8:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eeb4:	f003 0303 	and.w	r3, r3, #3
 800eeb8:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800eeba:	7afb      	ldrb	r3, [r7, #11]
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	4403      	add	r3, r0
 800eec0:	430a      	orrs	r2, r1
 800eec2:	b2d2      	uxtb	r2, r2
 800eec4:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800eec6:	7afb      	ldrb	r3, [r7, #11]
 800eec8:	3301      	adds	r3, #1
 800eeca:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eed2:	2b08      	cmp	r3, #8
 800eed4:	d004      	beq.n	800eee0 <ndefT5TWriteCC+0x9c>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eedc:	b2d9      	uxtb	r1, r3
 800eede:	e000      	b.n	800eee2 <ndefT5TWriteCC+0x9e>
 800eee0:	2100      	movs	r1, #0
 800eee2:	7afb      	ldrb	r3, [r7, #11]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	460a      	mov	r2, r1
 800eeea:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800eeec:	7afb      	ldrb	r3, [r7, #11]
 800eeee:	3301      	adds	r3, #1
 800eef0:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 800eef2:	7afb      	ldrb	r3, [r7, #11]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	2200      	movs	r2, #0
 800eefa:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <ndefT5TWriteCC+0xd8>
 800ef06:	7afb      	ldrb	r3, [r7, #11]
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	781a      	ldrb	r2, [r3, #0]
 800ef0e:	7afb      	ldrb	r3, [r7, #11]
 800ef10:	68f9      	ldr	r1, [r7, #12]
 800ef12:	440b      	add	r3, r1
 800ef14:	f042 0201 	orr.w	r2, r2, #1
 800ef18:	b2d2      	uxtb	r2, r2
 800ef1a:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00a      	beq.n	800ef3c <ndefT5TWriteCC+0xf8>
 800ef26:	7afb      	ldrb	r3, [r7, #11]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	781a      	ldrb	r2, [r3, #0]
 800ef2e:	7afb      	ldrb	r3, [r7, #11]
 800ef30:	68f9      	ldr	r1, [r7, #12]
 800ef32:	440b      	add	r3, r1
 800ef34:	f042 0204 	orr.w	r2, r2, #4
 800ef38:	b2d2      	uxtb	r2, r2
 800ef3a:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <ndefT5TWriteCC+0x118>
 800ef46:	7afb      	ldrb	r3, [r7, #11]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	781a      	ldrb	r2, [r3, #0]
 800ef4e:	7afb      	ldrb	r3, [r7, #11]
 800ef50:	68f9      	ldr	r1, [r7, #12]
 800ef52:	440b      	add	r3, r1
 800ef54:	f042 0208 	orr.w	r2, r2, #8
 800ef58:	b2d2      	uxtb	r2, r2
 800ef5a:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00a      	beq.n	800ef7c <ndefT5TWriteCC+0x138>
 800ef66:	7afb      	ldrb	r3, [r7, #11]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	781a      	ldrb	r2, [r3, #0]
 800ef6e:	7afb      	ldrb	r3, [r7, #11]
 800ef70:	68f9      	ldr	r1, [r7, #12]
 800ef72:	440b      	add	r3, r1
 800ef74:	f042 0210 	orr.w	r2, r2, #16
 800ef78:	b2d2      	uxtb	r2, r2
 800ef7a:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ef7c:	7afb      	ldrb	r3, [r7, #11]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ef88:	2b08      	cmp	r3, #8
 800ef8a:	d127      	bne.n	800efdc <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	2200      	movs	r2, #0
 800ef94:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800ef96:	7afb      	ldrb	r3, [r7, #11]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 800ef9c:	7afb      	ldrb	r3, [r7, #11]
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	4413      	add	r3, r2
 800efa2:	2200      	movs	r2, #0
 800efa4:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800efa6:	7afb      	ldrb	r3, [r7, #11]
 800efa8:	3301      	adds	r3, #1
 800efaa:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800efb2:	0a1b      	lsrs	r3, r3, #8
 800efb4:	b299      	uxth	r1, r3
 800efb6:	7afb      	ldrb	r3, [r7, #11]
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4413      	add	r3, r2
 800efbc:	b2ca      	uxtb	r2, r1
 800efbe:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800efc0:	7afb      	ldrb	r3, [r7, #11]
 800efc2:	3301      	adds	r3, #1
 800efc4:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800efcc:	7afb      	ldrb	r3, [r7, #11]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	4413      	add	r3, r2
 800efd2:	b2ca      	uxtb	r2, r1
 800efd4:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800efd6:	7afb      	ldrb	r3, [r7, #11]
 800efd8:	3301      	adds	r3, #1
 800efda:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	2100      	movs	r1, #0
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff fd37 	bl	800ea5a <ndefT5TPollerWriteBytes>
 800efec:	4603      	mov	r3, r0
 800efee:	813b      	strh	r3, [r7, #8]
    return ret;
 800eff0:	893b      	ldrh	r3, [r7, #8]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
	...

0800effc <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af02      	add	r7, sp, #8
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <ndefT5TPollerTagFormat+0x1a>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b03      	cmp	r3, #3
 800f014:	d001      	beq.n	800f01a <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 800f016:	2307      	movs	r3, #7
 800f018:	e103      	b.n	800f222 <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2200      	movs	r2, #0
 800f026:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d011      	beq.n	800f05c <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b08      	cmp	r3, #8
 800f03e:	d005      	beq.n	800f04c <ndefT5TPollerTagFormat+0x50>
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	2b04      	cmp	r3, #4
 800f046:	d001      	beq.n	800f04c <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 800f048:	2307      	movs	r3, #7
 800f04a:	e0ea      	b.n	800f222 <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	337c      	adds	r3, #124	; 0x7c
 800f050:	2214      	movs	r2, #20
 800f052:	68b9      	ldr	r1, [r7, #8]
 800f054:	4618      	mov	r0, r3
 800f056:	f00c fa2d 	bl	801b4b4 <memcpy>
 800f05a:	e09b      	b.n	800f194 <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	22e1      	movs	r2, #225	; 0xe1
 800f060:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800f0aa:	f107 0314 	add.w	r3, r7, #20
 800f0ae:	9301      	str	r3, [sp, #4]
 800f0b0:	2323      	movs	r3, #35	; 0x23
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 f9e7 	bl	800f48e <ndefT5TPollerReadMultipleBlocks>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 800f0c4:	8afb      	ldrh	r3, [r7, #22]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	bf0c      	ite	eq
 800f0ca:	2301      	moveq	r3, #1
 800f0cc:	2300      	movne	r3, #0
 800f0ce:	b2da      	uxtb	r2, r3
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d056      	beq.n	800f18e <ndefT5TPollerTagFormat+0x192>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f0e6:	089b      	lsrs	r3, r3, #2
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d04d      	beq.n	800f18e <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800f100:	fb02 f303 	mul.w	r3, r2, r3
 800f104:	08db      	lsrs	r3, r3, #3
 800f106:	b29a      	uxth	r2, r3
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f003 0301 	and.w	r3, r3, #1
 800f114:	2b00      	cmp	r3, #0
 800f116:	d016      	beq.n	800f146 <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f11e:	2bff      	cmp	r3, #255	; 0xff
 800f120:	d903      	bls.n	800f12a <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2208      	movs	r2, #8
 800f126:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f130:	2b00      	cmp	r3, #0
 800f132:	d019      	beq.n	800f168 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f13a:	3b01      	subs	r3, #1
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800f144:	e010      	b.n	800f168 <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2204      	movs	r2, #4
 800f14a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f154:	2bff      	cmp	r3, #255	; 0xff
 800f156:	d907      	bls.n	800f168 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2201      	movs	r2, #1
 800f15c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	22ff      	movs	r2, #255	; 0xff
 800f164:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f16e:	f083 0301 	eor.w	r3, r3, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00c      	beq.n	800f192 <ndefT5TPollerTagFormat+0x196>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f182:	d906      	bls.n	800f192 <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	22e2      	movs	r2, #226	; 0xe2
 800f188:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f18c:	e001      	b.n	800f192 <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 800f18e:	2305      	movs	r3, #5
 800f190:	e047      	b.n	800f222 <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f192:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff fe55 	bl	800ee44 <ndefT5TWriteCC>
 800f19a:	4603      	mov	r3, r0
 800f19c:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800f19e:	8afb      	ldrh	r3, [r7, #22]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01e      	beq.n	800f1e2 <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800f1aa:	f083 0301 	eor.w	r3, r3, #1
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d014      	beq.n	800f1de <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 800f1b4:	2014      	movs	r0, #20
 800f1b6:	f7f5 faf9 	bl	80047ac <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f7ff fe3e 	bl	800ee44 <ndefT5TWriteCC>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 800f1cc:	8afb      	ldrh	r3, [r7, #22]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d007      	beq.n	800f1e2 <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 800f1da:	8afb      	ldrh	r3, [r7, #22]
 800f1dc:	e021      	b.n	800f222 <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 800f1de:	8afb      	ldrh	r3, [r7, #22]
 800f1e0:	e01f      	b.n	800f222 <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800f1f6:	2304      	movs	r3, #4
 800f1f8:	4a0c      	ldr	r2, [pc, #48]	; (800f22c <ndefT5TPollerTagFormat+0x230>)
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7ff fc2d 	bl	800ea5a <ndefT5TPollerWriteBytes>
 800f200:	4603      	mov	r3, r0
 800f202:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 800f204:	8afb      	ldrh	r3, [r7, #22]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d10a      	bne.n	800f220 <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f210:	1c9a      	adds	r2, r3, #2
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 800f220:	8afb      	ldrh	r3, [r7, #22]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	0801d63c 	.word	0x0801d63c

0800f230 <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af02      	add	r7, sp, #8
 800f236:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d003      	beq.n	800f246 <ndefT5TPollerCheckPresence+0x16>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b03      	cmp	r3, #3
 800f244:	d001      	beq.n	800f24a <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800f246:	2307      	movs	r3, #7
 800f248:	e00f      	b.n	800f26a <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 800f24a:	2300      	movs	r3, #0
 800f24c:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800f254:	89f9      	ldrh	r1, [r7, #14]
 800f256:	f107 030a 	add.w	r3, r7, #10
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	2323      	movs	r3, #35	; 0x23
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f96b 	bl	800f53a <ndefT5TPollerReadSingleBlock>
 800f264:	4603      	mov	r3, r0
 800f266:	81bb      	strh	r3, [r7, #12]

    return ret;
 800f268:	89bb      	ldrh	r3, [r7, #12]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800f272:	b480      	push	{r7}
 800f274:	b085      	sub	sp, #20
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <ndefT5TPollerCheckAvailableSpace+0x18>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b03      	cmp	r3, #3
 800f288:	d001      	beq.n	800f28e <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800f28a:	2307      	movs	r3, #7
 800f28c:	e021      	b.n	800f2d2 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f294:	2b00      	cmp	r3, #0
 800f296:	d101      	bne.n	800f29c <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800f298:	2321      	movs	r3, #33	; 0x21
 800f29a:	e01a      	b.n	800f2d2 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2bfe      	cmp	r3, #254	; 0xfe
 800f2a0:	d901      	bls.n	800f2a6 <ndefT5TPollerCheckAvailableSpace+0x34>
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	e000      	b.n	800f2a8 <ndefT5TPollerCheckAvailableSpace+0x36>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	441a      	add	r2, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f2c0:	6879      	ldr	r1, [r7, #4]
 800f2c2:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 800f2c6:	440b      	add	r3, r1
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d901      	bls.n	800f2d0 <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e000      	b.n	800f2d2 <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bc80      	pop	{r7}
 800f2da:	4770      	bx	lr

0800f2dc <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d003      	beq.n	800f2f4 <ndefT5TPollerBeginWriteMessage+0x18>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d001      	beq.n	800f2f8 <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f2f4:	2307      	movs	r3, #7
 800f2f6:	e03b      	b.n	800f370 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d006      	beq.n	800f310 <ndefT5TPollerBeginWriteMessage+0x34>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d001      	beq.n	800f310 <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800f30c:	2321      	movs	r3, #33	; 0x21
 800f30e:	e02f      	b.n	800f370 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fcaf 	bl	800ec76 <ndefT5TPollerWriteRawMessageLen>
 800f318:	4603      	mov	r3, r0
 800f31a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f31c:	89fb      	ldrh	r3, [r7, #14]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f32a:	89fb      	ldrh	r3, [r7, #14]
 800f32c:	e020      	b.n	800f370 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	2bfe      	cmp	r3, #254	; 0xfe
 800f332:	d901      	bls.n	800f338 <ndefT5TPollerBeginWriteMessage+0x5c>
 800f334:	2303      	movs	r3, #3
 800f336:	e000      	b.n	800f33a <ndefT5TPollerBeginWriteMessage+0x5e>
 800f338:	2301      	movs	r3, #1
 800f33a:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f34e:	1c5a      	adds	r2, r3, #1
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	441a      	add	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d003      	beq.n	800f390 <ndefT5TPollerEndWriteMessage+0x18>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d001      	beq.n	800f394 <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f390:	2307      	movs	r3, #7
 800f392:	e025      	b.n	800f3e0 <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d001      	beq.n	800f3a2 <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800f39e:	2321      	movs	r3, #33	; 0x21
 800f3a0:	e01e      	b.n	800f3e0 <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff fc66 	bl	800ec76 <ndefT5TPollerWriteRawMessageLen>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f3bc:	89fb      	ldrh	r3, [r7, #14]
 800f3be:	e00f      	b.n	800f3e0 <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <ndefT5TPollerEndWriteMessage+0x5e>
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	e000      	b.n	800f3d8 <ndefT5TPollerEndWriteMessage+0x60>
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b088      	sub	sp, #32
 800f3ec:	af02      	add	r7, sp, #8
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d003      	beq.n	800f404 <ndefT5TPollerWriteSingleBlock+0x1c>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b03      	cmp	r3, #3
 800f402:	d001      	beq.n	800f408 <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 800f404:	2307      	movs	r3, #7
 800f406:	e03e      	b.n	800f486 <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <ndefT5TPollerWriteSingleBlock+0x2e>
 800f412:	2342      	movs	r3, #66	; 0x42
 800f414:	e000      	b.n	800f418 <ndefT5TPollerWriteSingleBlock+0x30>
 800f416:	2302      	movs	r3, #2
 800f418:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00e      	beq.n	800f442 <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f430:	897a      	ldrh	r2, [r7, #10]
 800f432:	7d78      	ldrb	r0, [r7, #21]
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f00b fb78 	bl	801ab2c <rfalST25xVPollerM24LRWriteSingleBlock>
 800f43c:	4603      	mov	r3, r0
 800f43e:	82fb      	strh	r3, [r7, #22]
 800f440:	e020      	b.n	800f484 <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f442:	897b      	ldrh	r3, [r7, #10]
 800f444:	2bff      	cmp	r3, #255	; 0xff
 800f446:	d80f      	bhi.n	800f468 <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f44e:	897b      	ldrh	r3, [r7, #10]
 800f450:	b2da      	uxtb	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f458:	7d78      	ldrb	r0, [r7, #21]
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f007 ffb2 	bl	80173c6 <rfalNfcvPollerWriteSingleBlock>
 800f462:	4603      	mov	r3, r0
 800f464:	82fb      	strh	r3, [r7, #22]
 800f466:	e00d      	b.n	800f484 <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f474:	897a      	ldrh	r2, [r7, #10]
 800f476:	7d78      	ldrb	r0, [r7, #21]
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f008 f85d 	bl	801753a <rfalNfcvPollerExtendedWriteSingleBlock>
 800f480:	4603      	mov	r3, r0
 800f482:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f484:	8afb      	ldrh	r3, [r7, #22]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b08a      	sub	sp, #40	; 0x28
 800f492:	af04      	add	r7, sp, #16
 800f494:	60f8      	str	r0, [r7, #12]
 800f496:	607b      	str	r3, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	817b      	strh	r3, [r7, #10]
 800f49c:	4613      	mov	r3, r2
 800f49e:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d003      	beq.n	800f4ae <ndefT5TPollerReadMultipleBlocks+0x20>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	d001      	beq.n	800f4b2 <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 800f4ae:	2307      	movs	r3, #7
 800f4b0:	e03f      	b.n	800f532 <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d011      	beq.n	800f4e0 <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f4c2:	7a78      	ldrb	r0, [r7, #9]
 800f4c4:	897a      	ldrh	r2, [r7, #10]
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	9302      	str	r3, [sp, #8]
 800f4ca:	8c3b      	ldrh	r3, [r7, #32]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2002      	movs	r0, #2
 800f4d6:	f00b fb89 	bl	801abec <rfalST25xVPollerM24LRReadMultipleBlocks>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	82fb      	strh	r3, [r7, #22]
 800f4de:	e027      	b.n	800f530 <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f4e0:	897b      	ldrh	r3, [r7, #10]
 800f4e2:	2bff      	cmp	r3, #255	; 0xff
 800f4e4:	d812      	bhi.n	800f50c <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f4ec:	897b      	ldrh	r3, [r7, #10]
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	7a78      	ldrb	r0, [r7, #9]
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	9302      	str	r3, [sp, #8]
 800f4f6:	8c3b      	ldrh	r3, [r7, #32]
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4603      	mov	r3, r0
 800f500:	2002      	movs	r0, #2
 800f502:	f007 ffaf 	bl	8017464 <rfalNfcvPollerReadMultipleBlocks>
 800f506:	4603      	mov	r3, r0
 800f508:	82fb      	strh	r3, [r7, #22]
 800f50a:	e011      	b.n	800f530 <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f512:	7a7b      	ldrb	r3, [r7, #9]
 800f514:	b298      	uxth	r0, r3
 800f516:	897a      	ldrh	r2, [r7, #10]
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	9302      	str	r3, [sp, #8]
 800f51c:	8c3b      	ldrh	r3, [r7, #32]
 800f51e:	9301      	str	r3, [sp, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	4603      	mov	r3, r0
 800f526:	2002      	movs	r0, #2
 800f528:	f008 f861 	bl	80175ee <rfalNfcvPollerExtendedReadMultipleBlocks>
 800f52c:	4603      	mov	r3, r0
 800f52e:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f530:	8afb      	ldrh	r3, [r7, #22]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b088      	sub	sp, #32
 800f53e:	af02      	add	r7, sp, #8
 800f540:	60f8      	str	r0, [r7, #12]
 800f542:	607a      	str	r2, [r7, #4]
 800f544:	461a      	mov	r2, r3
 800f546:	460b      	mov	r3, r1
 800f548:	817b      	strh	r3, [r7, #10]
 800f54a:	4613      	mov	r3, r2
 800f54c:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d003      	beq.n	800f55c <ndefT5TPollerReadSingleBlock+0x22>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b03      	cmp	r3, #3
 800f55a:	d001      	beq.n	800f560 <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 800f55c:	2307      	movs	r3, #7
 800f55e:	e035      	b.n	800f5cc <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00e      	beq.n	800f588 <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f570:	897a      	ldrh	r2, [r7, #10]
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	9301      	str	r3, [sp, #4]
 800f576:	893b      	ldrh	r3, [r7, #8]
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2002      	movs	r0, #2
 800f57e:	f00b fa9c 	bl	801aaba <rfalST25xVPollerM24LRReadSingleBlock>
 800f582:	4603      	mov	r3, r0
 800f584:	82fb      	strh	r3, [r7, #22]
 800f586:	e020      	b.n	800f5ca <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f588:	897b      	ldrh	r3, [r7, #10]
 800f58a:	2bff      	cmp	r3, #255	; 0xff
 800f58c:	d80f      	bhi.n	800f5ae <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f594:	897b      	ldrh	r3, [r7, #10]
 800f596:	b2da      	uxtb	r2, r3
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	893b      	ldrh	r3, [r7, #8]
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2002      	movs	r0, #2
 800f5a4:	f007 feee 	bl	8017384 <rfalNfcvPollerReadSingleBlock>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	82fb      	strh	r3, [r7, #22]
 800f5ac:	e00d      	b.n	800f5ca <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f5b4:	897a      	ldrh	r2, [r7, #10]
 800f5b6:	6a3b      	ldr	r3, [r7, #32]
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	893b      	ldrh	r3, [r7, #8]
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2002      	movs	r0, #2
 800f5c2:	f007 ff84 	bl	80174ce <rfalNfcvPollerExtendedReadSingleBlock>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f5ca:	8afb      	ldrh	r3, [r7, #22]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3718      	adds	r7, #24
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08e      	sub	sp, #56	; 0x38
 800f5d8:	af02      	add	r7, sp, #8
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d003      	beq.n	800f5ee <ndefT5TGetSystemInformation+0x1a>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d001      	beq.n	800f5f2 <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 800f5ee:	2307      	movs	r3, #7
 800f5f0:	e0ff      	b.n	800f7f2 <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d011      	beq.n	800f61c <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f5fe:	f107 0210 	add.w	r2, r7, #16
 800f602:	f107 030e 	add.w	r3, r7, #14
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	2316      	movs	r3, #22
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	4613      	mov	r3, r2
 800f60e:	227f      	movs	r2, #127	; 0x7f
 800f610:	2002      	movs	r0, #2
 800f612:	f008 f858 	bl	80176c6 <rfalNfcvPollerExtendedGetSystemInformation>
 800f616:	4603      	mov	r3, r0
 800f618:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f61a:	e014      	b.n	800f646 <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <ndefT5TGetSystemInformation+0x56>
 800f626:	200a      	movs	r0, #10
 800f628:	e000      	b.n	800f62c <ndefT5TGetSystemInformation+0x58>
 800f62a:	2002      	movs	r0, #2
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f632:	f107 0210 	add.w	r2, r7, #16
 800f636:	f107 030e 	add.w	r3, r7, #14
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	2316      	movs	r3, #22
 800f63e:	f008 f823 	bl	8017688 <rfalNfcvPollerGetSystemInformation>
 800f642:	4603      	mov	r3, r0
 800f644:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 800f646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 800f64c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f64e:	e0d0      	b.n	800f7f2 <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 800f650:	f107 0310 	add.w	r3, r7, #16
 800f654:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	3301      	adds	r3, #1
 800f65a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 800f65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65e:	781a      	ldrb	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	3301      	adds	r3, #1
 800f66a:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00a      	beq.n	800f688 <ndefT5TGetSystemInformation+0xb4>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f678:	09db      	lsrs	r3, r3, #7
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	f003 0301 	and.w	r3, r3, #1
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 800f684:	230b      	movs	r3, #11
 800f686:	e0b4      	b.n	800f7f2 <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	33c0      	adds	r3, #192	; 0xc0
 800f68c:	2208      	movs	r2, #8
 800f68e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f690:	4618      	mov	r0, r3
 800f692:	f00b ff0f 	bl	801b4b4 <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 800f696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f698:	3308      	adds	r3, #8
 800f69a:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d007      	beq.n	800f6ba <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 800f6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ac:	781a      	ldrb	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 800f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f6c0:	085b      	lsrs	r3, r3, #1
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d007      	beq.n	800f6dc <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	781a      	ldrb	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 800f6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d8:	3301      	adds	r3, #1
 800f6da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f6e2:	089b      	lsrs	r3, r3, #2
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d043      	beq.n	800f776 <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <ndefT5TGetSystemInformation+0x12a>
 800f6f8:	78fb      	ldrb	r3, [r7, #3]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d01a      	beq.n	800f734 <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	b29a      	uxth	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70c:	3301      	adds	r3, #1
 800f70e:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f716:	b21a      	sxth	r2, r3
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	021b      	lsls	r3, r3, #8
 800f71e:	b21b      	sxth	r3, r3
 800f720:	4313      	orrs	r3, r2
 800f722:	b21b      	sxth	r3, r3
 800f724:	b29a      	uxth	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	3301      	adds	r3, #1
 800f730:	62bb      	str	r3, [r7, #40]	; 0x28
 800f732:	e008      	b.n	800f746 <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 800f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	3301      	adds	r3, #1
 800f744:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	781a      	ldrb	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 800f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f752:	3301      	adds	r3, #1
 800f754:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f75c:	3301      	adds	r3, #1
 800f75e:	b29a      	uxth	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800f76c:	3301      	adds	r3, #1
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f77c:	08db      	lsrs	r3, r3, #3
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d007      	beq.n	800f798 <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 800f788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78a:	781a      	ldrb	r2, [r3, #0]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 800f792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f794:	3301      	adds	r3, #1
 800f796:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800f798:	78fb      	ldrb	r3, [r7, #3]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d028      	beq.n	800f7f0 <ndefT5TGetSystemInformation+0x21c>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f7a4:	095b      	lsrs	r3, r3, #5
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01f      	beq.n	800f7f0 <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 800f7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b2:	781a      	ldrb	r2, [r3, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	3301      	adds	r3, #1
 800f7be:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	781a      	ldrb	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	781a      	ldrb	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 800f7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7dc:	3301      	adds	r3, #1
 800f7de:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	781a      	ldrb	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 800f7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3730      	adds	r7, #48	; 0x30
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800f800:	4b06      	ldr	r3, [pc, #24]	; (800f81c <rfalAnalogConfigInitialize+0x20>)
 800f802:	4a07      	ldr	r2, [pc, #28]	; (800f820 <rfalAnalogConfigInitialize+0x24>)
 800f804:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800f806:	4b05      	ldr	r3, [pc, #20]	; (800f81c <rfalAnalogConfigInitialize+0x20>)
 800f808:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800f80c:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800f80e:	4b03      	ldr	r3, [pc, #12]	; (800f81c <rfalAnalogConfigInitialize+0x20>)
 800f810:	2201      	movs	r2, #1
 800f812:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800f814:	bf00      	nop
 800f816:	46bd      	mov	sp, r7
 800f818:	bc80      	pop	{r7}
 800f81a:	4770      	bx	lr
 800f81c:	20003290 	.word	0x20003290
 800f820:	0801d640 	.word	0x0801d640

0800f824 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b086      	sub	sp, #24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	4603      	mov	r3, r0
 800f82c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800f82e:	2300      	movs	r3, #0
 800f830:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800f832:	2300      	movs	r3, #0
 800f834:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800f836:	4b4b      	ldr	r3, [pc, #300]	; (800f964 <rfalSetAnalogConfig+0x140>)
 800f838:	799b      	ldrb	r3, [r3, #6]
 800f83a:	f083 0301 	eor.w	r3, r3, #1
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800f844:	2305      	movs	r3, #5
 800f846:	e089      	b.n	800f95c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800f848:	f107 020e 	add.w	r2, r7, #14
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	4611      	mov	r1, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f000 f889 	bl	800f968 <rfalAnalogConfigSearch>
 800f856:	4603      	mov	r3, r0
 800f858:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800f85a:	7d3b      	ldrb	r3, [r7, #20]
 800f85c:	2bff      	cmp	r3, #255	; 0xff
 800f85e:	d07b      	beq.n	800f958 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800f860:	4b40      	ldr	r3, [pc, #256]	; (800f964 <rfalSetAnalogConfig+0x140>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	461a      	mov	r2, r3
 800f866:	89fb      	ldrh	r3, [r7, #14]
 800f868:	4413      	add	r3, r2
 800f86a:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800f86c:	7d3b      	ldrb	r3, [r7, #20]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	b29a      	uxth	r2, r3
 800f874:	89fb      	ldrh	r3, [r7, #14]
 800f876:	4413      	add	r3, r2
 800f878:	b29b      	uxth	r3, r3
 800f87a:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800f87c:	4b39      	ldr	r3, [pc, #228]	; (800f964 <rfalSetAnalogConfig+0x140>)
 800f87e:	889b      	ldrh	r3, [r3, #4]
 800f880:	3301      	adds	r3, #1
 800f882:	89fa      	ldrh	r2, [r7, #14]
 800f884:	4293      	cmp	r3, r2
 800f886:	d201      	bcs.n	800f88c <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800f888:	2301      	movs	r3, #1
 800f88a:	e067      	b.n	800f95c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800f88c:	2300      	movs	r3, #0
 800f88e:	757b      	strb	r3, [r7, #21]
 800f890:	e05d      	b.n	800f94e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800f892:	7d7b      	ldrb	r3, [r7, #21]
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	4413      	add	r3, r2
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	021b      	lsls	r3, r3, #8
 800f89e:	7d7a      	ldrb	r2, [r7, #21]
 800f8a0:	0092      	lsls	r2, r2, #2
 800f8a2:	6939      	ldr	r1, [r7, #16]
 800f8a4:	440a      	add	r2, r1
 800f8a6:	7852      	ldrb	r2, [r2, #1]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d026      	beq.n	800f900 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800f8b2:	7d7b      	ldrb	r3, [r7, #21]
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	021b      	lsls	r3, r3, #8
 800f8be:	b21a      	sxth	r2, r3
 800f8c0:	7d7b      	ldrb	r3, [r7, #21]
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	6939      	ldr	r1, [r7, #16]
 800f8c6:	440b      	add	r3, r1
 800f8c8:	785b      	ldrb	r3, [r3, #1]
 800f8ca:	b21b      	sxth	r3, r3
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	b21b      	sxth	r3, r3
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8d6:	b298      	uxth	r0, r3
 800f8d8:	7d7b      	ldrb	r3, [r7, #21]
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	693a      	ldr	r2, [r7, #16]
 800f8de:	4413      	add	r3, r2
 800f8e0:	7899      	ldrb	r1, [r3, #2]
 800f8e2:	7d7b      	ldrb	r3, [r7, #21]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	78db      	ldrb	r3, [r3, #3]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	f00a fed6 	bl	801a69e <rfalChipChangeTestRegBits>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	82fb      	strh	r3, [r7, #22]
 800f8f6:	8afb      	ldrh	r3, [r7, #22]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d025      	beq.n	800f948 <rfalSetAnalogConfig+0x124>
 800f8fc:	8afb      	ldrh	r3, [r7, #22]
 800f8fe:	e02d      	b.n	800f95c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800f900:	7d7b      	ldrb	r3, [r7, #21]
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	4413      	add	r3, r2
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	021b      	lsls	r3, r3, #8
 800f90c:	b21a      	sxth	r2, r3
 800f90e:	7d7b      	ldrb	r3, [r7, #21]
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	6939      	ldr	r1, [r7, #16]
 800f914:	440b      	add	r3, r1
 800f916:	785b      	ldrb	r3, [r3, #1]
 800f918:	b21b      	sxth	r3, r3
 800f91a:	4313      	orrs	r3, r2
 800f91c:	b21b      	sxth	r3, r3
 800f91e:	b298      	uxth	r0, r3
 800f920:	7d7b      	ldrb	r3, [r7, #21]
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	693a      	ldr	r2, [r7, #16]
 800f926:	4413      	add	r3, r2
 800f928:	7899      	ldrb	r1, [r3, #2]
 800f92a:	7d7b      	ldrb	r3, [r7, #21]
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	693a      	ldr	r2, [r7, #16]
 800f930:	4413      	add	r3, r2
 800f932:	78db      	ldrb	r3, [r3, #3]
 800f934:	461a      	mov	r2, r3
 800f936:	f00a fe9d 	bl	801a674 <rfalChipChangeRegBits>
 800f93a:	4603      	mov	r3, r0
 800f93c:	82fb      	strh	r3, [r7, #22]
 800f93e:	8afb      	ldrh	r3, [r7, #22]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <rfalSetAnalogConfig+0x124>
 800f944:	8afb      	ldrh	r3, [r7, #22]
 800f946:	e009      	b.n	800f95c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800f948:	7d7b      	ldrb	r3, [r7, #21]
 800f94a:	3301      	adds	r3, #1
 800f94c:	757b      	strb	r3, [r7, #21]
 800f94e:	7d7a      	ldrb	r2, [r7, #21]
 800f950:	7d3b      	ldrb	r3, [r7, #20]
 800f952:	429a      	cmp	r2, r3
 800f954:	d39d      	bcc.n	800f892 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800f956:	e777      	b.n	800f848 <rfalSetAnalogConfig+0x24>
            break;
 800f958:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800f95a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800f95c:	4618      	mov	r0, r3
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	20003290 	.word	0x20003290

0800f968 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800f968:	b480      	push	{r7}
 800f96a:	b089      	sub	sp, #36	; 0x24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800f974:	4b2c      	ldr	r3, [pc, #176]	; (800fa28 <rfalAnalogConfigSearch+0xc0>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800f97a:	88fb      	ldrh	r3, [r7, #6]
 800f97c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800f980:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00a      	beq.n	800f99c <rfalAnalogConfigSearch+0x34>
 800f986:	88fb      	ldrh	r3, [r7, #6]
 800f988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f994:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800f998:	b29a      	uxth	r2, r3
 800f99a:	e001      	b.n	800f9a0 <rfalAnalogConfigSearch+0x38>
 800f99c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9a0:	88fb      	ldrh	r3, [r7, #6]
 800f9a2:	f003 0303 	and.w	r3, r3, #3
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <rfalAnalogConfigSearch+0x48>
 800f9ac:	88fb      	ldrh	r3, [r7, #6]
 800f9ae:	e000      	b.n	800f9b2 <rfalAnalogConfigSearch+0x4a>
 800f9b0:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800f9bc:	e029      	b.n	800fa12 <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 800f9be:	8bfb      	ldrh	r3, [r7, #30]
 800f9c0:	69ba      	ldr	r2, [r7, #24]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	021b      	lsls	r3, r3, #8
 800f9cc:	b21a      	sxth	r2, r3
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	b21b      	sxth	r3, r3
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	b21b      	sxth	r3, r3
 800f9da:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 800f9dc:	89fa      	ldrh	r2, [r7, #14]
 800f9de:	8afb      	ldrh	r3, [r7, #22]
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	88fa      	ldrh	r2, [r7, #6]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d108      	bne.n	800f9fc <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800f9ea:	8bfb      	ldrh	r3, [r7, #30]
 800f9ec:	3303      	adds	r3, #3
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	3302      	adds	r3, #2
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	e010      	b.n	800fa1e <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	3302      	adds	r3, #2
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800fa08:	8bfb      	ldrh	r3, [r7, #30]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	3303      	adds	r3, #3
 800fa10:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800fa12:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <rfalAnalogConfigSearch+0xc0>)
 800fa14:	889b      	ldrh	r3, [r3, #4]
 800fa16:	8bfa      	ldrh	r2, [r7, #30]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d3d0      	bcc.n	800f9be <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800fa1c:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3724      	adds	r7, #36	; 0x24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bc80      	pop	{r7}
 800fa26:	4770      	bx	lr
 800fa28:	20003290 	.word	0x20003290

0800fa2c <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	6039      	str	r1, [r7, #0]
 800fa36:	80fb      	strh	r3, [r7, #6]
 800fa38:	4613      	mov	r3, r2
 800fa3a:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800fa3c:	88fb      	ldrh	r3, [r7, #6]
 800fa3e:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800fa40:	2300      	movs	r3, #0
 800fa42:	81bb      	strh	r3, [r7, #12]
 800fa44:	e00d      	b.n	800fa62 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800fa46:	89bb      	ldrh	r3, [r7, #12]
 800fa48:	683a      	ldr	r2, [r7, #0]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	781a      	ldrb	r2, [r3, #0]
 800fa4e:	89fb      	ldrh	r3, [r7, #14]
 800fa50:	4611      	mov	r1, r2
 800fa52:	4618      	mov	r0, r3
 800fa54:	f000 f80e 	bl	800fa74 <rfalCrcUpdateCcitt>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800fa5c:	89bb      	ldrh	r3, [r7, #12]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	81bb      	strh	r3, [r7, #12]
 800fa62:	89ba      	ldrh	r2, [r7, #12]
 800fa64:	88bb      	ldrh	r3, [r7, #4]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d3ed      	bcc.n	800fa46 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800fa6a:	89fb      	ldrh	r3, [r7, #14]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	460a      	mov	r2, r1
 800fa7e:	80fb      	strh	r3, [r7, #6]
 800fa80:	4613      	mov	r3, r2
 800fa82:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800fa84:	88fb      	ldrh	r3, [r7, #6]
 800fa86:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800fa88:	797b      	ldrb	r3, [r7, #5]
 800fa8a:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800fa8c:	89fb      	ldrh	r3, [r7, #14]
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	7b7b      	ldrb	r3, [r7, #13]
 800fa92:	4053      	eors	r3, r2
 800fa94:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800fa96:	7b7b      	ldrb	r3, [r7, #13]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	b25a      	sxtb	r2, r3
 800fa9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800faa0:	4053      	eors	r3, r2
 800faa2:	b25b      	sxtb	r3, r3
 800faa4:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800faa6:	89fb      	ldrh	r3, [r7, #14]
 800faa8:	0a1b      	lsrs	r3, r3, #8
 800faaa:	b29b      	uxth	r3, r3
 800faac:	b21a      	sxth	r2, r3
 800faae:	7b7b      	ldrb	r3, [r7, #13]
 800fab0:	021b      	lsls	r3, r3, #8
 800fab2:	b21b      	sxth	r3, r3
 800fab4:	4053      	eors	r3, r2
 800fab6:	b21a      	sxth	r2, r3
 800fab8:	7b7b      	ldrb	r3, [r7, #13]
 800faba:	00db      	lsls	r3, r3, #3
 800fabc:	b21b      	sxth	r3, r3
 800fabe:	4053      	eors	r3, r2
 800fac0:	b21a      	sxth	r2, r3
 800fac2:	7b7b      	ldrb	r3, [r7, #13]
 800fac4:	091b      	lsrs	r3, r3, #4
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	b21b      	sxth	r3, r3
 800faca:	4053      	eors	r3, r2
 800facc:	b21b      	sxth	r3, r3
 800face:	81fb      	strh	r3, [r7, #14]

    return crc;
 800fad0:	89fb      	ldrh	r3, [r7, #14]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3714      	adds	r7, #20
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bc80      	pop	{r7}
 800fada:	4770      	bx	lr

0800fadc <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800fae6:	2208      	movs	r2, #8
 800fae8:	6879      	ldr	r1, [r7, #4]
 800faea:	480d      	ldr	r0, [pc, #52]	; (800fb20 <iso15693PhyConfigure+0x44>)
 800faec:	f00b fce2 	bl	801b4b4 <memcpy>
    
    if ( config->speedMode <= 3U)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	d808      	bhi.n	800fb0a <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f1c3 0303 	rsb	r3, r3, #3
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <iso15693PhyConfigure+0x48>)
 800fb06:	70da      	strb	r2, [r3, #3]
 800fb08:	e002      	b.n	800fb10 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800fb0a:	4b06      	ldr	r3, [pc, #24]	; (800fb24 <iso15693PhyConfigure+0x48>)
 800fb0c:	2203      	movs	r2, #3
 800fb0e:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	4a04      	ldr	r2, [pc, #16]	; (800fb24 <iso15693PhyConfigure+0x48>)
 800fb14:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20003298 	.word	0x20003298
 800fb24:	20000130 	.word	0x20000130

0800fb28 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b08b      	sub	sp, #44	; 0x2c
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	4608      	mov	r0, r1
 800fb32:	4611      	mov	r1, r2
 800fb34:	461a      	mov	r2, r3
 800fb36:	4603      	mov	r3, r0
 800fb38:	807b      	strh	r3, [r7, #2]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	707b      	strb	r3, [r7, #1]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800fb42:	2300      	movs	r3, #0
 800fb44:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800fb4a:	787b      	ldrb	r3, [r7, #1]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <iso15693VCDCode+0x2c>
 800fb50:	2302      	movs	r3, #2
 800fb52:	e000      	b.n	800fb56 <iso15693VCDCode+0x2e>
 800fb54:	2300      	movs	r3, #0
 800fb56:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800fb5e:	4b93      	ldr	r3, [pc, #588]	; (800fdac <iso15693VCDCode+0x284>)
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d117      	bne.n	800fb96 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800fb66:	2321      	movs	r3, #33	; 0x21
 800fb68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800fb6c:	2304      	movs	r3, #4
 800fb6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800fb72:	4b8f      	ldr	r3, [pc, #572]	; (800fdb0 <iso15693VCDCode+0x288>)
 800fb74:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800fb76:	887a      	ldrh	r2, [r7, #2]
 800fb78:	7d7b      	ldrb	r3, [r7, #21]
 800fb7a:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	3302      	adds	r3, #2
 800fb84:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800fb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb88:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800fb8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d823      	bhi.n	800fbda <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800fb92:	2301      	movs	r3, #1
 800fb94:	e138      	b.n	800fe08 <iso15693VCDCode+0x2e0>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800fb96:	2381      	movs	r3, #129	; 0x81
 800fb98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800fb9c:	2304      	movs	r3, #4
 800fb9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800fba2:	4b84      	ldr	r3, [pc, #528]	; (800fdb4 <iso15693VCDCode+0x28c>)
 800fba4:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800fba6:	887a      	ldrh	r2, [r7, #2]
 800fba8:	7d7b      	ldrb	r3, [r7, #21]
 800fbaa:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	019b      	lsls	r3, r3, #6
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	3302      	adds	r3, #2
 800fbb4:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800fbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb8:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800fbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbbc:	881b      	ldrh	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d005      	beq.n	800fbce <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800fbc2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fbc6:	2b3f      	cmp	r3, #63	; 0x3f
 800fbc8:	d807      	bhi.n	800fbda <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e11c      	b.n	800fe08 <iso15693VCDCode+0x2e0>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800fbce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fbd2:	2b40      	cmp	r3, #64	; 0x40
 800fbd4:	d801      	bhi.n	800fbda <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e116      	b.n	800fe08 <iso15693VCDCode+0x2e0>
            }
        }
    }

    if (length == 0U)
 800fbda:	887b      	ldrh	r3, [r7, #2]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d102      	bne.n	800fbe6 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800fbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800fbe6:	887b      	ldrh	r3, [r7, #2]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d01b      	beq.n	800fc24 <iso15693VCDCode+0xfc>
 800fbec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d117      	bne.n	800fc24 <iso15693VCDCode+0xfc>
 800fbf4:	783b      	ldrb	r3, [r7, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d014      	beq.n	800fc24 <iso15693VCDCode+0xfc>
 800fbfa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fbfe:	f083 0301 	eor.w	r3, r3, #1
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00d      	beq.n	800fc24 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	f043 0302 	orr.w	r3, r3, #2
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	f023 0301 	bic.w	r3, r3, #1
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800fc28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fc2c:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800fc2e:	887b      	ldrh	r3, [r7, #2]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d03b      	beq.n	800fcac <iso15693VCDCode+0x184>
 800fc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc36:	881b      	ldrh	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d137      	bne.n	800fcac <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800fc42:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800fc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4e:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800fc50:	8afb      	ldrh	r3, [r7, #22]
 800fc52:	3b01      	subs	r3, #1
 800fc54:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800fc5c:	e026      	b.n	800fcac <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800fc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4413      	add	r3, r2
 800fc68:	7818      	ldrb	r0, [r3, #0]
 800fc6a:	f107 030e 	add.w	r3, r7, #14
 800fc6e:	8afa      	ldrh	r2, [r7, #22]
 800fc70:	69fc      	ldr	r4, [r7, #28]
 800fc72:	69b9      	ldr	r1, [r7, #24]
 800fc74:	47a0      	blx	r4
 800fc76:	4603      	mov	r3, r0
 800fc78:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800fc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc7c:	881a      	ldrh	r2, [r3, #0]
 800fc7e:	89fb      	ldrh	r3, [r7, #14]
 800fc80:	4413      	add	r3, r2
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc86:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800fc88:	89fb      	ldrh	r3, [r7, #14]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	4413      	add	r3, r2
 800fc90:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800fc92:	89fb      	ldrh	r3, [r7, #14]
 800fc94:	8afa      	ldrh	r2, [r7, #22]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800fc9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d105      	bne.n	800fcac <iso15693VCDCode+0x184>
            (*offset)++;
 800fca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	3301      	adds	r3, #1
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcaa:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800fcac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	887a      	ldrh	r2, [r7, #2]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d902      	bls.n	800fcbc <iso15693VCDCode+0x194>
 800fcb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d0d0      	beq.n	800fc5e <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800fcbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d062      	beq.n	800fd88 <iso15693VCDCode+0x260>
        return ERR_AGAIN;
 800fcc2:	230d      	movs	r3, #13
 800fcc4:	e0a0      	b.n	800fe08 <iso15693VCDCode+0x2e0>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800fcc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d12b      	bne.n	800fd24 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800fccc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d002      	beq.n	800fcda <iso15693VCDCode+0x1b2>
 800fcd4:	f24e 0012 	movw	r0, #57362	; 0xe012
 800fcd8:	e001      	b.n	800fcde <iso15693VCDCode+0x1b6>
 800fcda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fcde:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d002      	beq.n	800fcec <iso15693VCDCode+0x1c4>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	3301      	adds	r3, #1
 800fcea:	e000      	b.n	800fcee <iso15693VCDCode+0x1c6>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fcf2:	2a00      	cmp	r2, #0
 800fcf4:	d003      	beq.n	800fcfe <iso15693VCDCode+0x1d6>
 800fcf6:	887a      	ldrh	r2, [r7, #2]
 800fcf8:	3a01      	subs	r2, #1
 800fcfa:	b292      	uxth	r2, r2
 800fcfc:	e000      	b.n	800fd00 <iso15693VCDCode+0x1d8>
 800fcfe:	887a      	ldrh	r2, [r7, #2]
 800fd00:	4619      	mov	r1, r3
 800fd02:	f7ff fe93 	bl	800fa2c <rfalCrcCalculateCcitt>
 800fd06:	4603      	mov	r3, r0
 800fd08:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800fd0a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fd0e:	f083 0301 	eor.w	r3, r3, #1
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d003      	beq.n	800fd20 <iso15693VCDCode+0x1f8>
 800fd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd1a:	43db      	mvns	r3, r3
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	e000      	b.n	800fd22 <iso15693VCDCode+0x1fa>
 800fd20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd22:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800fd24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800fd2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd2c:	0a1b      	lsrs	r3, r3, #8
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800fd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd36:	881b      	ldrh	r3, [r3, #0]
 800fd38:	461a      	mov	r2, r3
 800fd3a:	887b      	ldrh	r3, [r7, #2]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	3328      	adds	r3, #40	; 0x28
 800fd40:	443b      	add	r3, r7
 800fd42:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800fd46:	f107 030c 	add.w	r3, r7, #12
 800fd4a:	8afa      	ldrh	r2, [r7, #22]
 800fd4c:	69fc      	ldr	r4, [r7, #28]
 800fd4e:	69b9      	ldr	r1, [r7, #24]
 800fd50:	47a0      	blx	r4
 800fd52:	4603      	mov	r3, r0
 800fd54:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800fd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd58:	881a      	ldrh	r2, [r3, #0]
 800fd5a:	89bb      	ldrh	r3, [r7, #12]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd62:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800fd64:	89bb      	ldrh	r3, [r7, #12]
 800fd66:	461a      	mov	r2, r3
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800fd6e:	89bb      	ldrh	r3, [r7, #12]
 800fd70:	8afa      	ldrh	r2, [r7, #22]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800fd76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d105      	bne.n	800fd88 <iso15693VCDCode+0x260>
            (*offset)++;
 800fd7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	3301      	adds	r3, #1
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd86:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800fd88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d109      	bne.n	800fda2 <iso15693VCDCode+0x27a>
 800fd8e:	787b      	ldrb	r3, [r7, #1]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d006      	beq.n	800fda2 <iso15693VCDCode+0x27a>
 800fd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd96:	881b      	ldrh	r3, [r3, #0]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	887b      	ldrh	r3, [r7, #2]
 800fd9c:	3302      	adds	r3, #2
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d391      	bcc.n	800fcc6 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800fda2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d007      	beq.n	800fdb8 <iso15693VCDCode+0x290>
        return ERR_AGAIN;
 800fda8:	230d      	movs	r3, #13
 800fdaa:	e02d      	b.n	800fe08 <iso15693VCDCode+0x2e0>
 800fdac:	20003298 	.word	0x20003298
 800fdb0:	0801004d 	.word	0x0801004d
 800fdb4:	080100f5 	.word	0x080100f5
    }

    if ((!sendCrc && (*offset == length))
 800fdb8:	787b      	ldrb	r3, [r7, #1]
 800fdba:	f083 0301 	eor.w	r3, r3, #1
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d004      	beq.n	800fdce <iso15693VCDCode+0x2a6>
 800fdc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdc6:	881b      	ldrh	r3, [r3, #0]
 800fdc8:	887a      	ldrh	r2, [r7, #2]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d009      	beq.n	800fde2 <iso15693VCDCode+0x2ba>
            || (sendCrc && (*offset == (length + 2U))))
 800fdce:	787b      	ldrb	r3, [r7, #1]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d018      	beq.n	800fe06 <iso15693VCDCode+0x2de>
 800fdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	887b      	ldrh	r3, [r7, #2]
 800fddc:	3302      	adds	r3, #2
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d111      	bne.n	800fe06 <iso15693VCDCode+0x2de>
    {
        *outputBuf = eof; 
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800fde8:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800fdea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdf4:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800fdf6:	8afb      	ldrh	r3, [r7, #22]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800fe02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe04:	e000      	b.n	800fe08 <iso15693VCDCode+0x2e0>
        return ERR_AGAIN;
 800fe06:	230d      	movs	r3, #13
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	372c      	adds	r7, #44	; 0x2c
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd90      	pop	{r4, r7, pc}

0800fe10 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b088      	sub	sp, #32
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	607a      	str	r2, [r7, #4]
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	817b      	strh	r3, [r7, #10]
 800fe20:	4613      	mov	r3, r2
 800fe22:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800fe24:	2300      	movs	r3, #0
 800fe26:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	2200      	movs	r2, #0
 800fe32:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	f003 031f 	and.w	r3, r3, #31
 800fe3c:	2b17      	cmp	r3, #23
 800fe3e:	d001      	beq.n	800fe44 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800fe40:	2309      	movs	r3, #9
 800fe42:	e0ff      	b.n	8010044 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800fe44:	893b      	ldrh	r3, [r7, #8]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d101      	bne.n	800fe4e <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e0fa      	b.n	8010044 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800fe4e:	2305      	movs	r3, #5
 800fe50:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800fe56:	893b      	ldrh	r3, [r7, #8]
 800fe58:	461a      	mov	r2, r3
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f00b fb51 	bl	801b504 <memset>

    if (inBufLen == 0U)
 800fe62:	897b      	ldrh	r3, [r7, #10]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f040 808e 	bne.w	800ff86 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800fe6a:	2315      	movs	r3, #21
 800fe6c:	e0ea      	b.n	8010044 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800fe72:	8bbb      	ldrh	r3, [r7, #28]
 800fe74:	08db      	lsrs	r3, r3, #3
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	461a      	mov	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	461a      	mov	r2, r3
 800fe82:	8bbb      	ldrh	r3, [r7, #28]
 800fe84:	f003 0307 	and.w	r3, r3, #7
 800fe88:	fa42 f303 	asr.w	r3, r2, r3
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f003 0301 	and.w	r3, r3, #1
 800fe92:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800fe94:	8bbb      	ldrh	r3, [r7, #28]
 800fe96:	3301      	adds	r3, #1
 800fe98:	08db      	lsrs	r3, r3, #3
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	8bbb      	ldrh	r3, [r7, #28]
 800fea4:	3301      	adds	r3, #1
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	fa42 f303 	asr.w	r3, r2, r3
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	005b      	lsls	r3, r3, #1
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	f003 0302 	and.w	r3, r3, #2
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	7e3b      	ldrb	r3, [r7, #24]
 800febc:	4313      	orrs	r3, r2
 800febe:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800fec0:	7e3b      	ldrb	r3, [r7, #24]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d102      	bne.n	800fecc <iso15693VICCDecode+0xbc>
        {
            bp++;
 800fec6:	8b7b      	ldrh	r3, [r7, #26]
 800fec8:	3301      	adds	r3, #1
 800feca:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800fecc:	7e3b      	ldrb	r3, [r7, #24]
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d119      	bne.n	800ff06 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800fed2:	8b7b      	ldrh	r3, [r7, #26]
 800fed4:	08db      	lsrs	r3, r3, #3
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	461a      	mov	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4413      	add	r3, r2
 800fede:	7819      	ldrb	r1, [r3, #0]
 800fee0:	8b7b      	ldrh	r3, [r7, #26]
 800fee2:	f003 0307 	and.w	r3, r3, #7
 800fee6:	2201      	movs	r2, #1
 800fee8:	fa02 f303 	lsl.w	r3, r2, r3
 800feec:	b2da      	uxtb	r2, r3
 800feee:	8b7b      	ldrh	r3, [r7, #26]
 800fef0:	08db      	lsrs	r3, r3, #3
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	4618      	mov	r0, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4403      	add	r3, r0
 800fefa:	430a      	orrs	r2, r1
 800fefc:	b2d2      	uxtb	r2, r2
 800fefe:	701a      	strb	r2, [r3, #0]
            bp++;
 800ff00:	8b7b      	ldrh	r3, [r7, #26]
 800ff02:	3301      	adds	r3, #1
 800ff04:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800ff06:	8b7b      	ldrh	r3, [r7, #26]
 800ff08:	f003 0307 	and.w	r3, r3, #7
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d115      	bne.n	800ff3e <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800ff12:	8bbb      	ldrh	r3, [r7, #28]
 800ff14:	08db      	lsrs	r3, r3, #3
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	461a      	mov	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ff24:	2ba0      	cmp	r3, #160	; 0xa0
 800ff26:	d10a      	bne.n	800ff3e <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800ff28:	8bbb      	ldrh	r3, [r7, #28]
 800ff2a:	08db      	lsrs	r3, r3, #3
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	3301      	adds	r3, #1
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	4413      	add	r3, r2
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	2b03      	cmp	r3, #3
 800ff38:	d101      	bne.n	800ff3e <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800ff3e:	7e3b      	ldrb	r3, [r7, #24]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d002      	beq.n	800ff4a <iso15693VICCDecode+0x13a>
 800ff44:	7e3b      	ldrb	r3, [r7, #24]
 800ff46:	2b03      	cmp	r3, #3
 800ff48:	d10f      	bne.n	800ff6a <iso15693VICCDecode+0x15a>
 800ff4a:	7e7b      	ldrb	r3, [r7, #25]
 800ff4c:	f083 0301 	eor.w	r3, r3, #1
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800ff56:	8b7a      	ldrh	r2, [r7, #26]
 800ff58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d302      	bcc.n	800ff64 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800ff5e:	231d      	movs	r3, #29
 800ff60:	83fb      	strh	r3, [r7, #30]
 800ff62:	e002      	b.n	800ff6a <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800ff64:	8b7b      	ldrh	r3, [r7, #26]
 800ff66:	3301      	adds	r3, #1
 800ff68:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800ff6a:	8b7a      	ldrh	r2, [r7, #26]
 800ff6c:	893b      	ldrh	r3, [r7, #8]
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d20f      	bcs.n	800ff94 <iso15693VICCDecode+0x184>
 800ff74:	8bfb      	ldrh	r3, [r7, #30]
 800ff76:	2b1d      	cmp	r3, #29
 800ff78:	d00c      	beq.n	800ff94 <iso15693VICCDecode+0x184>
 800ff7a:	7e7b      	ldrb	r3, [r7, #25]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d109      	bne.n	800ff94 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800ff80:	8bbb      	ldrh	r3, [r7, #28]
 800ff82:	3302      	adds	r3, #2
 800ff84:	83bb      	strh	r3, [r7, #28]
 800ff86:	8bba      	ldrh	r2, [r7, #28]
 800ff88:	897b      	ldrh	r3, [r7, #10]
 800ff8a:	00db      	lsls	r3, r3, #3
 800ff8c:	3b02      	subs	r3, #2
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	f4ff af6d 	bcc.w	800fe6e <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800ff94:	8b7b      	ldrh	r3, [r7, #26]
 800ff96:	08db      	lsrs	r3, r3, #3
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9c:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	8b7a      	ldrh	r2, [r7, #26]
 800ffa2:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800ffa4:	8bfb      	ldrh	r3, [r7, #30]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d001      	beq.n	800ffae <iso15693VICCDecode+0x19e>
    {
        return err;
 800ffaa:	8bfb      	ldrh	r3, [r7, #30]
 800ffac:	e04a      	b.n	8010044 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800ffae:	8b7b      	ldrh	r3, [r7, #26]
 800ffb0:	f003 0307 	and.w	r3, r3, #7
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800ffba:	2315      	movs	r3, #21
 800ffbc:	e042      	b.n	8010044 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800ffbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d93b      	bls.n	801003e <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800ffc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d002      	beq.n	800ffd4 <iso15693VICCDecode+0x1c4>
 800ffce:	f24e 0012 	movw	r0, #57362	; 0xe012
 800ffd2:	e001      	b.n	800ffd8 <iso15693VICCDecode+0x1c8>
 800ffd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	3b02      	subs	r3, #2
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6879      	ldr	r1, [r7, #4]
 800ffe4:	f7ff fd22 	bl	800fa2c <rfalCrcCalculateCcitt>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800ffec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800fff0:	f083 0301 	eor.w	r3, r3, #1
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <iso15693VICCDecode+0x1f2>
 800fffa:	8afb      	ldrh	r3, [r7, #22]
 800fffc:	43db      	mvns	r3, r3
 800fffe:	b29b      	uxth	r3, r3
 8010000:	e000      	b.n	8010004 <iso15693VICCDecode+0x1f4>
 8010002:	8afb      	ldrh	r3, [r7, #22]
 8010004:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8010006:	8afb      	ldrh	r3, [r7, #22]
 8010008:	b2db      	uxtb	r3, r3
 801000a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801000c:	8812      	ldrh	r2, [r2, #0]
 801000e:	3a02      	subs	r2, #2
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	440a      	add	r2, r1
 8010014:	7812      	ldrb	r2, [r2, #0]
 8010016:	4293      	cmp	r3, r2
 8010018:	d10e      	bne.n	8010038 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 801001a:	8afb      	ldrh	r3, [r7, #22]
 801001c:	0a1b      	lsrs	r3, r3, #8
 801001e:	b29b      	uxth	r3, r3
 8010020:	b2db      	uxtb	r3, r3
 8010022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010024:	8812      	ldrh	r2, [r2, #0]
 8010026:	3a01      	subs	r2, #1
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	440a      	add	r2, r1
 801002c:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 801002e:	4293      	cmp	r3, r2
 8010030:	d102      	bne.n	8010038 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 8010032:	2300      	movs	r3, #0
 8010034:	83fb      	strh	r3, [r7, #30]
 8010036:	e004      	b.n	8010042 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 8010038:	2315      	movs	r3, #21
 801003a:	83fb      	strh	r3, [r7, #30]
 801003c:	e001      	b.n	8010042 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 801003e:	2315      	movs	r3, #21
 8010040:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 8010042:	8bfb      	ldrh	r3, [r7, #30]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3720      	adds	r7, #32
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 801004c:	b480      	push	{r7}
 801004e:	b089      	sub	sp, #36	; 0x24
 8010050:	af00      	add	r7, sp, #0
 8010052:	60b9      	str	r1, [r7, #8]
 8010054:	607b      	str	r3, [r7, #4]
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]
 801005a:	4613      	mov	r3, r2
 801005c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 801005e:	2300      	movs	r3, #0
 8010060:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 801006c:	89bb      	ldrh	r3, [r7, #12]
 801006e:	2b03      	cmp	r3, #3
 8010070:	d801      	bhi.n	8010076 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 8010072:	2301      	movs	r3, #1
 8010074:	e038      	b.n	80100e8 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 8010076:	7bfb      	ldrb	r3, [r7, #15]
 8010078:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 801007a:	2300      	movs	r3, #0
 801007c:	83bb      	strh	r3, [r7, #28]
 801007e:	e02f      	b.n	80100e0 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 8010080:	7ffb      	ldrb	r3, [r7, #31]
 8010082:	f003 0303 	and.w	r3, r3, #3
 8010086:	2b03      	cmp	r3, #3
 8010088:	d81a      	bhi.n	80100c0 <iso15693PhyVCDCode1Of4+0x74>
 801008a:	a201      	add	r2, pc, #4	; (adr r2, 8010090 <iso15693PhyVCDCode1Of4+0x44>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100a1 	.word	0x080100a1
 8010094:	080100a9 	.word	0x080100a9
 8010098:	080100b1 	.word	0x080100b1
 801009c:	080100b9 	.word	0x080100b9
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	2202      	movs	r2, #2
 80100a4:	701a      	strb	r2, [r3, #0]
                break;
 80100a6:	e00c      	b.n	80100c2 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	2208      	movs	r2, #8
 80100ac:	701a      	strb	r2, [r3, #0]
                break;
 80100ae:	e008      	b.n	80100c2 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	2220      	movs	r2, #32
 80100b4:	701a      	strb	r2, [r3, #0]
                break;
 80100b6:	e004      	b.n	80100c2 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	2280      	movs	r2, #128	; 0x80
 80100bc:	701a      	strb	r2, [r3, #0]
                break;
 80100be:	e000      	b.n	80100c2 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 80100c0:	bf00      	nop
        }
        outbuf++;
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	3301      	adds	r3, #1
 80100c6:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	3301      	adds	r3, #1
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 80100d4:	7ffb      	ldrb	r3, [r7, #31]
 80100d6:	089b      	lsrs	r3, r3, #2
 80100d8:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 80100da:	8bbb      	ldrh	r3, [r7, #28]
 80100dc:	3301      	adds	r3, #1
 80100de:	83bb      	strh	r3, [r7, #28]
 80100e0:	8bbb      	ldrh	r3, [r7, #28]
 80100e2:	2b03      	cmp	r3, #3
 80100e4:	d9cc      	bls.n	8010080 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 80100e6:	8afb      	ldrh	r3, [r7, #22]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3724      	adds	r7, #36	; 0x24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bc80      	pop	{r7}
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop

080100f4 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b089      	sub	sp, #36	; 0x24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60b9      	str	r1, [r7, #8]
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	4603      	mov	r3, r0
 8010100:	73fb      	strb	r3, [r7, #15]
 8010102:	4613      	mov	r3, r2
 8010104:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 8010106:	2300      	movs	r3, #0
 8010108:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2200      	movs	r2, #0
 8010112:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 8010114:	89bb      	ldrh	r3, [r7, #12]
 8010116:	2b3f      	cmp	r3, #63	; 0x3f
 8010118:	d801      	bhi.n	801011e <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 801011a:	2301      	movs	r3, #1
 801011c:	e039      	b.n	8010192 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8010122:	2300      	movs	r3, #0
 8010124:	83bb      	strh	r3, [r7, #28]
 8010126:	e030      	b.n	801018a <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 8010128:	7ffb      	ldrb	r3, [r7, #31]
 801012a:	2b03      	cmp	r3, #3
 801012c:	d81a      	bhi.n	8010164 <iso15693PhyVCDCode1Of256+0x70>
 801012e:	a201      	add	r2, pc, #4	; (adr r2, 8010134 <iso15693PhyVCDCode1Of256+0x40>)
 8010130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010134:	08010145 	.word	0x08010145
 8010138:	0801014d 	.word	0x0801014d
 801013c:	08010155 	.word	0x08010155
 8010140:	0801015d 	.word	0x0801015d
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	2202      	movs	r2, #2
 8010148:	701a      	strb	r2, [r3, #0]
                break;
 801014a:	e00f      	b.n	801016c <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	2208      	movs	r2, #8
 8010150:	701a      	strb	r2, [r3, #0]
                break;
 8010152:	e00b      	b.n	801016c <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	2220      	movs	r2, #32
 8010158:	701a      	strb	r2, [r3, #0]
                break;
 801015a:	e007      	b.n	801016c <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	2280      	movs	r2, #128	; 0x80
 8010160:	701a      	strb	r2, [r3, #0]
                break;
 8010162:	e003      	b.n	801016c <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	2200      	movs	r2, #0
 8010168:	701a      	strb	r2, [r3, #0]
                break;               
 801016a:	bf00      	nop
        }
        outbuf++;
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	3301      	adds	r3, #1
 8010170:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	3301      	adds	r3, #1
 8010178:	b29a      	uxth	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 801017e:	7ffb      	ldrb	r3, [r7, #31]
 8010180:	3b04      	subs	r3, #4
 8010182:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8010184:	8bbb      	ldrh	r3, [r7, #28]
 8010186:	3301      	adds	r3, #1
 8010188:	83bb      	strh	r3, [r7, #28]
 801018a:	8bbb      	ldrh	r3, [r7, #28]
 801018c:	2b3f      	cmp	r3, #63	; 0x3f
 801018e:	d9cb      	bls.n	8010128 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 8010190:	8afb      	ldrh	r3, [r7, #22]
}
 8010192:	4618      	mov	r0, r3
 8010194:	3724      	adds	r7, #36	; 0x24
 8010196:	46bd      	mov	sp, r7
 8010198:	bc80      	pop	{r7}
 801019a:	4770      	bx	lr

0801019c <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 801019c:	b480      	push	{r7}
 801019e:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 80101a0:	4b06      	ldr	r3, [pc, #24]	; (80101bc <isoDepClearCounters+0x20>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 80101a6:	4b05      	ldr	r3, [pc, #20]	; (80101bc <isoDepClearCounters+0x20>)
 80101a8:	2200      	movs	r2, #0
 80101aa:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 80101ac:	4b03      	ldr	r3, [pc, #12]	; (80101bc <isoDepClearCounters+0x20>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	71da      	strb	r2, [r3, #7]
}
 80101b2:	bf00      	nop
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bc80      	pop	{r7}
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	200032a0 	.word	0x200032a0

080101c0 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 80101c0:	b590      	push	{r4, r7, lr}
 80101c2:	b08b      	sub	sp, #44	; 0x2c
 80101c4:	af04      	add	r7, sp, #16
 80101c6:	60b9      	str	r1, [r7, #8]
 80101c8:	607a      	str	r2, [r7, #4]
 80101ca:	461a      	mov	r2, r3
 80101cc:	4603      	mov	r3, r0
 80101ce:	73fb      	strb	r3, [r7, #15]
 80101d0:	4613      	mov	r3, r2
 80101d2:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 80101d8:	4a44      	ldr	r2, [pc, #272]	; (80102ec <isoDepTx+0x12c>)
 80101da:	7bfb      	ldrb	r3, [r7, #15]
 80101dc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 80101e0:	89bb      	ldrh	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d009      	beq.n	80101fa <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	4a3f      	ldr	r2, [pc, #252]	; (80102ec <isoDepTx+0x12c>)
 80101ee:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d201      	bcs.n	80101fa <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 80101f6:	2301      	movs	r3, #1
 80101f8:	e074      	b.n	80102e4 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 80101fa:	7bfb      	ldrb	r3, [r7, #15]
 80101fc:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 80101fe:	4b3b      	ldr	r3, [pc, #236]	; (80102ec <isoDepTx+0x12c>)
 8010200:	78db      	ldrb	r3, [r3, #3]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d108      	bne.n	8010218 <isoDepTx+0x58>
 8010206:	4b39      	ldr	r3, [pc, #228]	; (80102ec <isoDepTx+0x12c>)
 8010208:	78db      	ldrb	r3, [r3, #3]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d108      	bne.n	8010220 <isoDepTx+0x60>
 801020e:	4b37      	ldr	r3, [pc, #220]	; (80102ec <isoDepTx+0x12c>)
 8010210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010214:	2b00      	cmp	r3, #0
 8010216:	d003      	beq.n	8010220 <isoDepTx+0x60>
 8010218:	7cfb      	ldrb	r3, [r7, #19]
 801021a:	f043 0308 	orr.w	r3, r3, #8
 801021e:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8010220:	4b32      	ldr	r3, [pc, #200]	; (80102ec <isoDepTx+0x12c>)
 8010222:	791b      	ldrb	r3, [r3, #4]
 8010224:	2bff      	cmp	r3, #255	; 0xff
 8010226:	d003      	beq.n	8010230 <isoDepTx+0x70>
 8010228:	7cfb      	ldrb	r3, [r7, #19]
 801022a:	f043 0304 	orr.w	r3, r3, #4
 801022e:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8010230:	4b2e      	ldr	r3, [pc, #184]	; (80102ec <isoDepTx+0x12c>)
 8010232:	7c9b      	ldrb	r3, [r3, #18]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d008      	beq.n	801024a <isoDepTx+0x8a>
 8010238:	7cfb      	ldrb	r3, [r7, #19]
 801023a:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 801023e:	2b02      	cmp	r3, #2
 8010240:	d103      	bne.n	801024a <isoDepTx+0x8a>
 8010242:	7cfb      	ldrb	r3, [r7, #19]
 8010244:	f043 0310 	orr.w	r3, r3, #16
 8010248:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 801024a:	4b28      	ldr	r3, [pc, #160]	; (80102ec <isoDepTx+0x12c>)
 801024c:	791b      	ldrb	r3, [r3, #4]
 801024e:	2bff      	cmp	r3, #255	; 0xff
 8010250:	d006      	beq.n	8010260 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	3b01      	subs	r3, #1
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	4b24      	ldr	r3, [pc, #144]	; (80102ec <isoDepTx+0x12c>)
 801025a:	791a      	ldrb	r2, [r3, #4]
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8010260:	4b22      	ldr	r3, [pc, #136]	; (80102ec <isoDepTx+0x12c>)
 8010262:	78db      	ldrb	r3, [r3, #3]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d108      	bne.n	801027a <isoDepTx+0xba>
 8010268:	4b20      	ldr	r3, [pc, #128]	; (80102ec <isoDepTx+0x12c>)
 801026a:	78db      	ldrb	r3, [r3, #3]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10b      	bne.n	8010288 <isoDepTx+0xc8>
 8010270:	4b1e      	ldr	r3, [pc, #120]	; (80102ec <isoDepTx+0x12c>)
 8010272:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010276:	2b00      	cmp	r3, #0
 8010278:	d006      	beq.n	8010288 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	3b01      	subs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
 8010280:	4b1a      	ldr	r3, [pc, #104]	; (80102ec <isoDepTx+0x12c>)
 8010282:	78da      	ldrb	r2, [r3, #3]
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	3b01      	subs	r3, #1
 801028c:	617b      	str	r3, [r7, #20]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	7cfa      	ldrb	r2, [r7, #19]
 8010292:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	b29a      	uxth	r2, r3
 801029c:	89bb      	ldrh	r3, [r7, #12]
 801029e:	4413      	add	r3, r2
 80102a0:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 80102a2:	8a3a      	ldrh	r2, [r7, #16]
 80102a4:	4b11      	ldr	r3, [pc, #68]	; (80102ec <isoDepTx+0x12c>)
 80102a6:	8a1b      	ldrh	r3, [r3, #16]
 80102a8:	3b02      	subs	r3, #2
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d901      	bls.n	80102b2 <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 80102ae:	2318      	movs	r3, #24
 80102b0:	e018      	b.n	80102e4 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 80102b2:	4b0e      	ldr	r3, [pc, #56]	; (80102ec <isoDepTx+0x12c>)
 80102b4:	6998      	ldr	r0, [r3, #24]
 80102b6:	4b0d      	ldr	r3, [pc, #52]	; (80102ec <isoDepTx+0x12c>)
 80102b8:	8bdc      	ldrh	r4, [r3, #30]
 80102ba:	4b0c      	ldr	r3, [pc, #48]	; (80102ec <isoDepTx+0x12c>)
 80102bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102be:	4b0b      	ldr	r3, [pc, #44]	; (80102ec <isoDepTx+0x12c>)
 80102c0:	785b      	ldrb	r3, [r3, #1]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d001      	beq.n	80102ca <isoDepTx+0x10a>
 80102c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c8:	e001      	b.n	80102ce <isoDepTx+0x10e>
 80102ca:	f04f 33ff 	mov.w	r3, #4294967295
 80102ce:	8a39      	ldrh	r1, [r7, #16]
 80102d0:	9302      	str	r3, [sp, #8]
 80102d2:	2300      	movs	r3, #0
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	9200      	str	r2, [sp, #0]
 80102d8:	4623      	mov	r3, r4
 80102da:	4602      	mov	r2, r0
 80102dc:	6978      	ldr	r0, [r7, #20]
 80102de:	f008 f97d 	bl	80185dc <rfalTransceiveBlockingTx>
 80102e2:	4603      	mov	r3, r0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	371c      	adds	r7, #28
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd90      	pop	{r4, r7, pc}
 80102ec:	200032a0 	.word	0x200032a0

080102f0 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 80102f0:	b590      	push	{r4, r7, lr}
 80102f2:	b089      	sub	sp, #36	; 0x24
 80102f4:	af02      	add	r7, sp, #8
 80102f6:	4603      	mov	r3, r0
 80102f8:	460a      	mov	r2, r1
 80102fa:	71fb      	strb	r3, [r7, #7]
 80102fc:	4613      	mov	r3, r2
 80102fe:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8010304:	4b56      	ldr	r3, [pc, #344]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010306:	689a      	ldr	r2, [r3, #8]
 8010308:	4b55      	ldr	r3, [pc, #340]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	4413      	add	r3, r2
 801030e:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8010310:	f107 030c 	add.w	r3, r7, #12
 8010314:	2204      	movs	r2, #4
 8010316:	2100      	movs	r1, #0
 8010318:	4618      	mov	r0, r3
 801031a:	f00b f8f3 	bl	801b504 <memset>
    
    switch( controlMsg )
 801031e:	79fb      	ldrb	r3, [r7, #7]
 8010320:	2b03      	cmp	r3, #3
 8010322:	f200 8088 	bhi.w	8010436 <isoDepHandleControlMsg+0x146>
 8010326:	a201      	add	r2, pc, #4	; (adr r2, 801032c <isoDepHandleControlMsg+0x3c>)
 8010328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801032c:	0801033d 	.word	0x0801033d
 8010330:	08010369 	.word	0x08010369
 8010334:	08010395 	.word	0x08010395
 8010338:	08010403 	.word	0x08010403
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 801033c:	4b48      	ldr	r3, [pc, #288]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801033e:	799b      	ldrb	r3, [r3, #6]
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	b2d1      	uxtb	r1, r2
 8010344:	4a46      	ldr	r2, [pc, #280]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010346:	7191      	strb	r1, [r2, #6]
 8010348:	4a45      	ldr	r2, [pc, #276]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801034a:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 801034e:	4293      	cmp	r3, r2
 8010350:	d901      	bls.n	8010356 <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 8010352:	230b      	movs	r3, #11
 8010354:	e07f      	b.n	8010456 <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 8010356:	4b42      	ldr	r3, [pc, #264]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010358:	789b      	ldrb	r3, [r3, #2]
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	b2db      	uxtb	r3, r3
 8010360:	f063 035d 	orn	r3, r3, #93	; 0x5d
 8010364:	75fb      	strb	r3, [r7, #23]
            break;
 8010366:	e068      	b.n	801043a <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8010368:	4b3d      	ldr	r3, [pc, #244]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801036a:	799b      	ldrb	r3, [r3, #6]
 801036c:	1c5a      	adds	r2, r3, #1
 801036e:	b2d1      	uxtb	r1, r2
 8010370:	4a3b      	ldr	r2, [pc, #236]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010372:	7191      	strb	r1, [r2, #6]
 8010374:	4a3a      	ldr	r2, [pc, #232]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010376:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 801037a:	4293      	cmp	r3, r2
 801037c:	d901      	bls.n	8010382 <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 801037e:	2304      	movs	r3, #4
 8010380:	e069      	b.n	8010456 <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 8010382:	4b37      	ldr	r3, [pc, #220]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010384:	789b      	ldrb	r3, [r3, #2]
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f063 034d 	orn	r3, r3, #77	; 0x4d
 8010390:	75fb      	strb	r3, [r7, #23]
            break;
 8010392:	e052      	b.n	801043a <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8010394:	4b32      	ldr	r3, [pc, #200]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010396:	79db      	ldrb	r3, [r3, #7]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	b2d1      	uxtb	r1, r2
 801039c:	4a30      	ldr	r2, [pc, #192]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801039e:	71d1      	strb	r1, [r2, #7]
 80103a0:	4a2f      	ldr	r2, [pc, #188]	; (8010460 <isoDepHandleControlMsg+0x170>)
 80103a2:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d901      	bls.n	80103ae <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 80103aa:	230b      	movs	r3, #11
 80103ac:	e053      	b.n	8010456 <isoDepHandleControlMsg+0x166>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 80103ae:	79bb      	ldrb	r3, [r7, #6]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <isoDepHandleControlMsg+0xca>
 80103b4:	79bb      	ldrb	r3, [r7, #6]
 80103b6:	2b3b      	cmp	r3, #59	; 0x3b
 80103b8:	d901      	bls.n	80103be <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 80103ba:	230b      	movs	r3, #11
 80103bc:	e04b      	b.n	8010456 <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80103be:	4b28      	ldr	r3, [pc, #160]	; (8010460 <isoDepHandleControlMsg+0x170>)
 80103c0:	785b      	ldrb	r3, [r3, #1]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d111      	bne.n	80103ea <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 80103c6:	4b26      	ldr	r3, [pc, #152]	; (8010460 <isoDepHandleControlMsg+0x170>)
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	79ba      	ldrb	r2, [r7, #6]
 80103cc:	fb02 f303 	mul.w	r3, r2, r3
 80103d0:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80103d8:	bf28      	it	cs
 80103da:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 80103de:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 80103e0:	4b1f      	ldr	r3, [pc, #124]	; (8010460 <isoDepHandleControlMsg+0x170>)
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	693a      	ldr	r2, [r7, #16]
 80103e6:	4413      	add	r3, r2
 80103e8:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 80103ea:	23f2      	movs	r3, #242	; 0xf2
 80103ec:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 80103ee:	7dbb      	ldrb	r3, [r7, #22]
 80103f0:	1c5a      	adds	r2, r3, #1
 80103f2:	75ba      	strb	r2, [r7, #22]
 80103f4:	3302      	adds	r3, #2
 80103f6:	3318      	adds	r3, #24
 80103f8:	443b      	add	r3, r7
 80103fa:	79ba      	ldrb	r2, [r7, #6]
 80103fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 8010400:	e01b      	b.n	801043a <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8010402:	4b17      	ldr	r3, [pc, #92]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010404:	79db      	ldrb	r3, [r3, #7]
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	b2d1      	uxtb	r1, r2
 801040a:	4a15      	ldr	r2, [pc, #84]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801040c:	71d1      	strb	r1, [r2, #7]
 801040e:	4a14      	ldr	r2, [pc, #80]	; (8010460 <isoDepHandleControlMsg+0x170>)
 8010410:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8010414:	4293      	cmp	r3, r2
 8010416:	d901      	bls.n	801041c <isoDepHandleControlMsg+0x12c>
            {
                return ERR_PROTO;
 8010418:	230b      	movs	r3, #11
 801041a:	e01c      	b.n	8010456 <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 801041c:	4b10      	ldr	r3, [pc, #64]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801041e:	785b      	ldrb	r3, [r3, #1]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d105      	bne.n	8010430 <isoDepHandleControlMsg+0x140>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8010424:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 8010428:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 801042a:	4b0d      	ldr	r3, [pc, #52]	; (8010460 <isoDepHandleControlMsg+0x170>)
 801042c:	2203      	movs	r2, #3
 801042e:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 8010430:	23c2      	movs	r3, #194	; 0xc2
 8010432:	75fb      	strb	r3, [r7, #23]
            break;
 8010434:	e001      	b.n	801043a <isoDepHandleControlMsg+0x14a>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 8010436:	230c      	movs	r3, #12
 8010438:	e00d      	b.n	8010456 <isoDepHandleControlMsg+0x166>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 801043a:	7dbb      	ldrb	r3, [r7, #22]
 801043c:	b29c      	uxth	r4, r3
 801043e:	f107 030c 	add.w	r3, r7, #12
 8010442:	1c9a      	adds	r2, r3, #2
 8010444:	f107 010c 	add.w	r1, r7, #12
 8010448:	7df8      	ldrb	r0, [r7, #23]
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	4623      	mov	r3, r4
 8010450:	f7ff feb6 	bl	80101c0 <isoDepTx>
 8010454:	4603      	mov	r3, r0
}
 8010456:	4618      	mov	r0, r3
 8010458:	371c      	adds	r7, #28
 801045a:	46bd      	mov	sp, r7
 801045c:	bd90      	pop	{r4, r7, pc}
 801045e:	bf00      	nop
 8010460:	200032a0 	.word	0x200032a0

08010464 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 8010468:	4b26      	ldr	r3, [pc, #152]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 801046a:	2200      	movs	r2, #0
 801046c:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 801046e:	4b25      	ldr	r3, [pc, #148]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 8010470:	2200      	movs	r2, #0
 8010472:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 8010474:	4b23      	ldr	r3, [pc, #140]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 8010476:	2200      	movs	r2, #0
 8010478:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 801047a:	4b22      	ldr	r3, [pc, #136]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 801047c:	22ff      	movs	r2, #255	; 0xff
 801047e:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 8010480:	4b20      	ldr	r3, [pc, #128]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 8010482:	2200      	movs	r2, #0
 8010484:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 8010486:	4b1f      	ldr	r3, [pc, #124]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 8010488:	2200      	movs	r2, #0
 801048a:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 801048c:	4b1d      	ldr	r3, [pc, #116]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 801048e:	2200      	movs	r2, #0
 8010490:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 8010492:	4b1c      	ldr	r3, [pc, #112]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 801049a:	4b1a      	ldr	r3, [pc, #104]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 801049c:	2240      	movs	r2, #64	; 0x40
 801049e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 80104a2:	4b18      	ldr	r3, [pc, #96]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104a4:	2210      	movs	r2, #16
 80104a6:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 80104a8:	4b16      	ldr	r3, [pc, #88]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104aa:	2210      	movs	r2, #16
 80104ac:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 80104ae:	4b15      	ldr	r3, [pc, #84]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 80104b6:	4b13      	ldr	r3, [pc, #76]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 80104bc:	4b11      	ldr	r3, [pc, #68]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104be:	2200      	movs	r2, #0
 80104c0:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 80104c2:	4b10      	ldr	r3, [pc, #64]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 80104ca:	4b0e      	ldr	r3, [pc, #56]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 80104d2:	4b0c      	ldr	r3, [pc, #48]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 80104da:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104dc:	2203      	movs	r2, #3
 80104de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 80104e2:	4b08      	ldr	r3, [pc, #32]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104e4:	2203      	movs	r2, #3
 80104e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 80104ea:	4b06      	ldr	r3, [pc, #24]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104ec:	2202      	movs	r2, #2
 80104ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 80104f2:	4b04      	ldr	r3, [pc, #16]	; (8010504 <rfalIsoDepInitialize+0xa0>)
 80104f4:	2201      	movs	r2, #1
 80104f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 80104fa:	f7ff fe4f 	bl	801019c <isoDepClearCounters>
}
 80104fe:	bf00      	nop
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	200032a0 	.word	0x200032a0

08010508 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 8010508:	b5b0      	push	{r4, r5, r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af02      	add	r7, sp, #8
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <isoDepDataExchangePCD+0x16>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 801051e:	2307      	movs	r3, #7
 8010520:	e290      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
    }    
    
    *outIsChaining = false;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	2200      	movs	r2, #0
 8010526:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 8010528:	4ba1      	ldr	r3, [pc, #644]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8010530:	4b9f      	ldr	r3, [pc, #636]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010532:	78db      	ldrb	r3, [r3, #3]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d007      	beq.n	8010548 <isoDepDataExchangePCD+0x40>
 8010538:	4b9d      	ldr	r3, [pc, #628]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801053a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801053e:	3301      	adds	r3, #1
 8010540:	b2da      	uxtb	r2, r3
 8010542:	4b9b      	ldr	r3, [pc, #620]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010544:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 8010548:	4b99      	ldr	r3, [pc, #612]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801054a:	791b      	ldrb	r3, [r3, #4]
 801054c:	2bff      	cmp	r3, #255	; 0xff
 801054e:	d007      	beq.n	8010560 <isoDepDataExchangePCD+0x58>
 8010550:	4b97      	ldr	r3, [pc, #604]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010552:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010556:	3301      	adds	r3, #1
 8010558:	b2da      	uxtb	r2, r3
 801055a:	4b95      	ldr	r3, [pc, #596]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801055c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 8010560:	4b93      	ldr	r3, [pc, #588]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010562:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010566:	4b92      	ldr	r3, [pc, #584]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010568:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801056c:	429a      	cmp	r2, r3
 801056e:	d307      	bcc.n	8010580 <isoDepDataExchangePCD+0x78>
 8010570:	4b8f      	ldr	r3, [pc, #572]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010572:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010576:	4b8e      	ldr	r3, [pc, #568]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010578:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801057c:	429a      	cmp	r2, r3
 801057e:	d201      	bcs.n	8010584 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 8010580:	2307      	movs	r3, #7
 8010582:	e25f      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 8010584:	4b8a      	ldr	r3, [pc, #552]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00c      	beq.n	80105a6 <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 801058c:	4b88      	ldr	r3, [pc, #544]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801058e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010590:	4618      	mov	r0, r3
 8010592:	f7f4 f887 	bl	80046a4 <timerIsExpired>
 8010596:	4603      	mov	r3, r0
 8010598:	f083 0301 	eor.w	r3, r3, #1
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 80105a2:	2302      	movs	r3, #2
 80105a4:	e24e      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 80105a6:	4b82      	ldr	r3, [pc, #520]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 80105ac:	4b80      	ldr	r3, [pc, #512]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	f300 8245 	bgt.w	8010a40 <isoDepDataExchangePCD+0x538>
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	da2d      	bge.n	8010616 <isoDepDataExchangePCD+0x10e>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d002      	beq.n	80105c4 <isoDepDataExchangePCD+0xbc>
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d002      	beq.n	80105c8 <isoDepDataExchangePCD+0xc0>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 80105c2:	e23d      	b.n	8010a40 <isoDepDataExchangePCD+0x538>
            return ERR_NONE;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e23d      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 80105c8:	4b79      	ldr	r3, [pc, #484]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105ca:	789b      	ldrb	r3, [r3, #2]
 80105cc:	f003 0301 	and.w	r3, r3, #1
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	f043 0302 	orr.w	r3, r3, #2
 80105d6:	b2d8      	uxtb	r0, r3
 80105d8:	4b75      	ldr	r3, [pc, #468]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105da:	6959      	ldr	r1, [r3, #20]
 80105dc:	4b74      	ldr	r3, [pc, #464]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105de:	695b      	ldr	r3, [r3, #20]
 80105e0:	4a73      	ldr	r2, [pc, #460]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80105e6:	189c      	adds	r4, r3, r2
 80105e8:	4b71      	ldr	r3, [pc, #452]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105ea:	8b9d      	ldrh	r5, [r3, #28]
 80105ec:	4b70      	ldr	r3, [pc, #448]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105ee:	689a      	ldr	r2, [r3, #8]
 80105f0:	4b6f      	ldr	r3, [pc, #444]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	4413      	add	r3, r2
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	462b      	mov	r3, r5
 80105fa:	4622      	mov	r2, r4
 80105fc:	f7ff fde0 	bl	80101c0 <isoDepTx>
 8010600:	4603      	mov	r3, r0
 8010602:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8010604:	89fb      	ldrh	r3, [r7, #14]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d103      	bne.n	8010612 <isoDepDataExchangePCD+0x10a>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 801060a:	4b69      	ldr	r3, [pc, #420]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801060c:	2202      	movs	r2, #2
 801060e:	701a      	strb	r2, [r3, #0]
                  break;
 8010610:	e001      	b.n	8010616 <isoDepDataExchangePCD+0x10e>
                  return ret;
 8010612:	89fb      	ldrh	r3, [r7, #14]
 8010614:	e216      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            ret = rfalGetTransceiveStatus();
 8010616:	f008 f897 	bl	8018748 <rfalGetTransceiveStatus>
 801061a:	4603      	mov	r3, r0
 801061c:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 801061e:	89fb      	ldrh	r3, [r7, #14]
 8010620:	2b28      	cmp	r3, #40	; 0x28
 8010622:	f200 8082 	bhi.w	801072a <isoDepDataExchangePCD+0x222>
 8010626:	a201      	add	r2, pc, #4	; (adr r2, 801062c <isoDepDataExchangePCD+0x124>)
 8010628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062c:	0801072f 	.word	0x0801072f
 8010630:	0801072b 	.word	0x0801072b
 8010634:	08010727 	.word	0x08010727
 8010638:	0801072b 	.word	0x0801072b
 801063c:	080106d1 	.word	0x080106d1
 8010640:	0801072b 	.word	0x0801072b
 8010644:	0801072b 	.word	0x0801072b
 8010648:	0801072b 	.word	0x0801072b
 801064c:	0801072b 	.word	0x0801072b
 8010650:	080106d1 	.word	0x080106d1
 8010654:	0801072b 	.word	0x0801072b
 8010658:	0801072b 	.word	0x0801072b
 801065c:	0801072b 	.word	0x0801072b
 8010660:	0801072b 	.word	0x0801072b
 8010664:	0801072b 	.word	0x0801072b
 8010668:	0801072b 	.word	0x0801072b
 801066c:	0801072b 	.word	0x0801072b
 8010670:	0801072b 	.word	0x0801072b
 8010674:	0801072b 	.word	0x0801072b
 8010678:	0801072b 	.word	0x0801072b
 801067c:	0801072b 	.word	0x0801072b
 8010680:	080106d1 	.word	0x080106d1
 8010684:	0801072b 	.word	0x0801072b
 8010688:	0801072b 	.word	0x0801072b
 801068c:	0801072b 	.word	0x0801072b
 8010690:	0801072b 	.word	0x0801072b
 8010694:	0801072b 	.word	0x0801072b
 8010698:	080106d1 	.word	0x080106d1
 801069c:	0801072b 	.word	0x0801072b
 80106a0:	0801072b 	.word	0x0801072b
 80106a4:	0801072b 	.word	0x0801072b
 80106a8:	0801072b 	.word	0x0801072b
 80106ac:	0801072b 	.word	0x0801072b
 80106b0:	0801072b 	.word	0x0801072b
 80106b4:	0801072b 	.word	0x0801072b
 80106b8:	0801072b 	.word	0x0801072b
 80106bc:	0801072b 	.word	0x0801072b
 80106c0:	0801072b 	.word	0x0801072b
 80106c4:	0801072b 	.word	0x0801072b
 80106c8:	0801072b 	.word	0x0801072b
 80106cc:	080106d1 	.word	0x080106d1
                    if( gIsoDep.isRxChaining )
 80106d0:	4b37      	ldr	r3, [pc, #220]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80106d2:	7cdb      	ldrb	r3, [r3, #19]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00a      	beq.n	80106ee <isoDepDataExchangePCD+0x1e6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80106d8:	2100      	movs	r1, #0
 80106da:	2000      	movs	r0, #0
 80106dc:	f7ff fe08 	bl	80102f0 <isoDepHandleControlMsg>
 80106e0:	4603      	mov	r3, r0
 80106e2:	81fb      	strh	r3, [r7, #14]
 80106e4:	89fb      	ldrh	r3, [r7, #14]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d01b      	beq.n	8010722 <isoDepDataExchangePCD+0x21a>
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	e1aa      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 80106ee:	4b30      	ldr	r3, [pc, #192]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	2b03      	cmp	r3, #3
 80106f4:	d10a      	bne.n	801070c <isoDepDataExchangePCD+0x204>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 80106f6:	2100      	movs	r1, #0
 80106f8:	2003      	movs	r0, #3
 80106fa:	f7ff fdf9 	bl	80102f0 <isoDepHandleControlMsg>
 80106fe:	4603      	mov	r3, r0
 8010700:	81fb      	strh	r3, [r7, #14]
 8010702:	89fb      	ldrh	r3, [r7, #14]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00c      	beq.n	8010722 <isoDepDataExchangePCD+0x21a>
 8010708:	89fb      	ldrh	r3, [r7, #14]
 801070a:	e19b      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 801070c:	2100      	movs	r1, #0
 801070e:	2001      	movs	r0, #1
 8010710:	f7ff fdee 	bl	80102f0 <isoDepHandleControlMsg>
 8010714:	4603      	mov	r3, r0
 8010716:	81fb      	strh	r3, [r7, #14]
 8010718:	89fb      	ldrh	r3, [r7, #14]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <isoDepDataExchangePCD+0x21a>
 801071e:	89fb      	ldrh	r3, [r7, #14]
 8010720:	e190      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8010722:	2302      	movs	r3, #2
 8010724:	e18e      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;  /* Debug purposes */
 8010726:	2302      	movs	r3, #2
 8010728:	e18c      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ret;
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	e18a      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    break;
 801072e:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	881b      	ldrh	r3, [r3, #0]
 8010734:	3307      	adds	r3, #7
 8010736:	08db      	lsrs	r3, r3, #3
 8010738:	b29a      	uxth	r2, r3
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	881a      	ldrh	r2, [r3, #0]
 8010742:	4b1b      	ldr	r3, [pc, #108]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010744:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010748:	b29b      	uxth	r3, r3
 801074a:	429a      	cmp	r2, r3
 801074c:	d305      	bcc.n	801075a <isoDepDataExchangePCD+0x252>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	881a      	ldrh	r2, [r3, #0]
 8010752:	4b17      	ldr	r3, [pc, #92]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010754:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010756:	429a      	cmp	r2, r3
 8010758:	d301      	bcc.n	801075e <isoDepDataExchangePCD+0x256>
                return ERR_PROTO;
 801075a:	230b      	movs	r3, #11
 801075c:	e172      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 801075e:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8010766:	4b12      	ldr	r3, [pc, #72]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 8010768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801076c:	2b01      	cmp	r3, #1
 801076e:	d10b      	bne.n	8010788 <isoDepDataExchangePCD+0x280>
 8010770:	7b7b      	ldrb	r3, [r7, #13]
 8010772:	f003 0308 	and.w	r3, r3, #8
 8010776:	2b00      	cmp	r3, #0
 8010778:	d104      	bne.n	8010784 <isoDepDataExchangePCD+0x27c>
 801077a:	7b7b      	ldrb	r3, [r7, #13]
 801077c:	f003 0304 	and.w	r3, r3, #4
 8010780:	2b00      	cmp	r3, #0
 8010782:	d001      	beq.n	8010788 <isoDepDataExchangePCD+0x280>
                return ERR_PROTO;
 8010784:	230b      	movs	r3, #11
 8010786:	e15d      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8010788:	4b09      	ldr	r3, [pc, #36]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801078a:	78db      	ldrb	r3, [r3, #3]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d011      	beq.n	80107b4 <isoDepDataExchangePCD+0x2ac>
 8010790:	7b7b      	ldrb	r3, [r7, #13]
 8010792:	f003 0308 	and.w	r3, r3, #8
 8010796:	2b00      	cmp	r3, #0
 8010798:	d007      	beq.n	80107aa <isoDepDataExchangePCD+0x2a2>
 801079a:	4b05      	ldr	r3, [pc, #20]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 801079c:	78da      	ldrb	r2, [r3, #3]
 801079e:	4b04      	ldr	r3, [pc, #16]	; (80107b0 <isoDepDataExchangePCD+0x2a8>)
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	3301      	adds	r3, #1
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d004      	beq.n	80107b4 <isoDepDataExchangePCD+0x2ac>
                return ERR_PROTO;
 80107aa:	230b      	movs	r3, #11
 80107ac:	e14a      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
 80107ae:	bf00      	nop
 80107b0:	200032a0 	.word	0x200032a0
            if( isoDep_PCBisSBlock(rxPCB) )
 80107b4:	7b7b      	ldrb	r3, [r7, #13]
 80107b6:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80107ba:	2bc2      	cmp	r3, #194	; 0xc2
 80107bc:	d134      	bne.n	8010828 <isoDepDataExchangePCD+0x320>
                if( isoDep_PCBisSWTX(rxPCB) )
 80107be:	7b7b      	ldrb	r3, [r7, #13]
 80107c0:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80107c4:	2bc2      	cmp	r3, #194	; 0xc2
 80107c6:	d11b      	bne.n	8010800 <isoDepDataExchangePCD+0x2f8>
 80107c8:	7b7b      	ldrb	r3, [r7, #13]
 80107ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80107ce:	2b30      	cmp	r3, #48	; 0x30
 80107d0:	d116      	bne.n	8010800 <isoDepDataExchangePCD+0x2f8>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 80107d2:	4b9e      	ldr	r3, [pc, #632]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	4a9d      	ldr	r2, [pc, #628]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80107d8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80107dc:	4413      	add	r3, r2
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	4619      	mov	r1, r3
 80107e8:	2002      	movs	r0, #2
 80107ea:	f7ff fd81 	bl	80102f0 <isoDepHandleControlMsg>
 80107ee:	4603      	mov	r3, r0
 80107f0:	81fb      	strh	r3, [r7, #14]
 80107f2:	89fb      	ldrh	r3, [r7, #14]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <isoDepDataExchangePCD+0x2f4>
 80107f8:	89fb      	ldrh	r3, [r7, #14]
 80107fa:	e123      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 80107fc:	2302      	movs	r3, #2
 80107fe:	e121      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                if( isoDep_PCBisSDeselect(rxPCB) )
 8010800:	7b7b      	ldrb	r3, [r7, #13]
 8010802:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8010806:	2bc2      	cmp	r3, #194	; 0xc2
 8010808:	d10c      	bne.n	8010824 <isoDepDataExchangePCD+0x31c>
 801080a:	7b7b      	ldrb	r3, [r7, #13]
 801080c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010810:	2b00      	cmp	r3, #0
 8010812:	d107      	bne.n	8010824 <isoDepDataExchangePCD+0x31c>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8010814:	4b8d      	ldr	r3, [pc, #564]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b03      	cmp	r3, #3
 801081a:	d103      	bne.n	8010824 <isoDepDataExchangePCD+0x31c>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 801081c:	f7ff fe22 	bl	8010464 <rfalIsoDepInitialize>
                        return ERR_NONE;
 8010820:	2300      	movs	r3, #0
 8010822:	e10f      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 8010824:	230b      	movs	r3, #11
 8010826:	e10d      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisRBlock(rxPCB) )
 8010828:	7b7b      	ldrb	r3, [r7, #13]
 801082a:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 801082e:	2ba2      	cmp	r3, #162	; 0xa2
 8010830:	d141      	bne.n	80108b6 <isoDepDataExchangePCD+0x3ae>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 8010832:	7b7b      	ldrb	r3, [r7, #13]
 8010834:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8010838:	2ba2      	cmp	r3, #162	; 0xa2
 801083a:	d13a      	bne.n	80108b2 <isoDepDataExchangePCD+0x3aa>
 801083c:	7b7b      	ldrb	r3, [r7, #13]
 801083e:	f003 0310 	and.w	r3, r3, #16
 8010842:	2b00      	cmp	r3, #0
 8010844:	d135      	bne.n	80108b2 <isoDepDataExchangePCD+0x3aa>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 8010846:	7b7b      	ldrb	r3, [r7, #13]
 8010848:	f003 0301 	and.w	r3, r3, #1
 801084c:	4a7f      	ldr	r2, [pc, #508]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 801084e:	7892      	ldrb	r2, [r2, #2]
 8010850:	4293      	cmp	r3, r2
 8010852:	d119      	bne.n	8010888 <isoDepDataExchangePCD+0x380>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 8010854:	4b7d      	ldr	r3, [pc, #500]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010856:	789b      	ldrb	r3, [r3, #2]
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	bf0c      	ite	eq
 8010862:	2301      	moveq	r3, #1
 8010864:	2300      	movne	r3, #0
 8010866:	b2db      	uxtb	r3, r3
 8010868:	461a      	mov	r2, r3
 801086a:	4b78      	ldr	r3, [pc, #480]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 801086c:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 801086e:	4b77      	ldr	r3, [pc, #476]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010870:	7c9b      	ldrb	r3, [r3, #18]
 8010872:	f083 0301 	eor.w	r3, r3, #1
 8010876:	b2db      	uxtb	r3, r3
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <isoDepDataExchangePCD+0x378>
                            return ERR_PROTO;
 801087c:	230b      	movs	r3, #11
 801087e:	e0e1      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        isoDepClearCounters();
 8010880:	f7ff fc8c 	bl	801019c <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 8010884:	2300      	movs	r3, #0
 8010886:	e0dd      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8010888:	4b70      	ldr	r3, [pc, #448]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 801088a:	795b      	ldrb	r3, [r3, #5]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	b2d1      	uxtb	r1, r2
 8010890:	4a6e      	ldr	r2, [pc, #440]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010892:	7151      	strb	r1, [r2, #5]
 8010894:	4a6d      	ldr	r2, [pc, #436]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010896:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 801089a:	4293      	cmp	r3, r2
 801089c:	d207      	bcs.n	80108ae <isoDepDataExchangePCD+0x3a6>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 801089e:	4b6b      	ldr	r3, [pc, #428]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 80108a4:	4b69      	ldr	r3, [pc, #420]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108a6:	2201      	movs	r2, #1
 80108a8:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 80108aa:	2302      	movs	r3, #2
 80108ac:	e0ca      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        return ERR_PROTO;
 80108ae:	230b      	movs	r3, #11
 80108b0:	e0c8      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_PROTO;
 80108b2:	230b      	movs	r3, #11
 80108b4:	e0c6      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisIBlock(rxPCB) )
 80108b6:	7b7b      	ldrb	r3, [r7, #13]
 80108b8:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80108bc:	2b02      	cmp	r3, #2
 80108be:	f040 80bd 	bne.w	8010a3c <isoDepDataExchangePCD+0x534>
                if( isoDep_PCBisChaining(rxPCB) )
 80108c2:	7b7b      	ldrb	r3, [r7, #13]
 80108c4:	f003 0310 	and.w	r3, r3, #16
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d05e      	beq.n	801098a <isoDepDataExchangePCD+0x482>
                    gIsoDep.isRxChaining = true;
 80108cc:	4b5f      	ldr	r3, [pc, #380]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108ce:	2201      	movs	r2, #1
 80108d0:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2201      	movs	r2, #1
 80108d6:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 80108d8:	7b7b      	ldrb	r3, [r7, #13]
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	4a5b      	ldr	r2, [pc, #364]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108e0:	7892      	ldrb	r2, [r2, #2]
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d144      	bne.n	8010970 <isoDepDataExchangePCD+0x468>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 80108e6:	4b59      	ldr	r3, [pc, #356]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108e8:	789b      	ldrb	r3, [r3, #2]
 80108ea:	f003 0301 	and.w	r3, r3, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	bf0c      	ite	eq
 80108f4:	2301      	moveq	r3, #1
 80108f6:	2300      	movne	r3, #0
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	461a      	mov	r2, r3
 80108fc:	4b53      	ldr	r3, [pc, #332]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80108fe:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8010900:	f7ff fc4c 	bl	801019c <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8010904:	2100      	movs	r1, #0
 8010906:	2000      	movs	r0, #0
 8010908:	f7ff fcf2 	bl	80102f0 <isoDepHandleControlMsg>
 801090c:	4603      	mov	r3, r0
 801090e:	81fb      	strh	r3, [r7, #14]
 8010910:	89fb      	ldrh	r3, [r7, #14]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d001      	beq.n	801091a <isoDepDataExchangePCD+0x412>
 8010916:	89fb      	ldrh	r3, [r7, #14]
 8010918:	e094      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        *outActRxLen -= gIsoDep.hdrLen;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	881a      	ldrh	r2, [r3, #0]
 801091e:	4b4b      	ldr	r3, [pc, #300]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010920:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010924:	b29b      	uxth	r3, r3
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	b29a      	uxth	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 801092e:	4b47      	ldr	r3, [pc, #284]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010930:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010934:	4b45      	ldr	r3, [pc, #276]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801093a:	429a      	cmp	r2, r3
 801093c:	d014      	beq.n	8010968 <isoDepDataExchangePCD+0x460>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d010      	beq.n	8010968 <isoDepDataExchangePCD+0x460>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8010946:	4b41      	ldr	r3, [pc, #260]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010948:	699b      	ldr	r3, [r3, #24]
 801094a:	4a40      	ldr	r2, [pc, #256]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 801094c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8010950:	1898      	adds	r0, r3, r2
 8010952:	4b3e      	ldr	r3, [pc, #248]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	4a3d      	ldr	r2, [pc, #244]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010958:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801095c:	1899      	adds	r1, r3, r2
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f00a fdb4 	bl	801b4d0 <memmove>
                        isoDepClearCounters();
 8010968:	f7ff fc18 	bl	801019c <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 801096c:	230d      	movs	r3, #13
 801096e:	e069      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8010970:	2100      	movs	r1, #0
 8010972:	2000      	movs	r0, #0
 8010974:	f7ff fcbc 	bl	80102f0 <isoDepHandleControlMsg>
 8010978:	4603      	mov	r3, r0
 801097a:	81fb      	strh	r3, [r7, #14]
 801097c:	89fb      	ldrh	r3, [r7, #14]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d001      	beq.n	8010986 <isoDepDataExchangePCD+0x47e>
 8010982:	89fb      	ldrh	r3, [r7, #14]
 8010984:	e05e      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8010986:	2302      	movs	r3, #2
 8010988:	e05c      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 801098a:	4b30      	ldr	r3, [pc, #192]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 801098c:	2200      	movs	r2, #0
 801098e:	74da      	strb	r2, [r3, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8010990:	7b7b      	ldrb	r3, [r7, #13]
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	4a2d      	ldr	r2, [pc, #180]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010998:	7892      	ldrb	r2, [r2, #2]
 801099a:	4293      	cmp	r3, r2
 801099c:	d13a      	bne.n	8010a14 <isoDepDataExchangePCD+0x50c>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 801099e:	4b2b      	ldr	r3, [pc, #172]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109a0:	789b      	ldrb	r3, [r3, #2]
 80109a2:	f003 0301 	and.w	r3, r3, #1
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	bf0c      	ite	eq
 80109ac:	2301      	moveq	r3, #1
 80109ae:	2300      	movne	r3, #0
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	461a      	mov	r2, r3
 80109b4:	4b25      	ldr	r3, [pc, #148]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109b6:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	881a      	ldrh	r2, [r3, #0]
 80109bc:	4b23      	ldr	r3, [pc, #140]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 80109cc:	4b1f      	ldr	r3, [pc, #124]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109ce:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80109d2:	4b1e      	ldr	r3, [pc, #120]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80109d8:	429a      	cmp	r2, r3
 80109da:	d014      	beq.n	8010a06 <isoDepDataExchangePCD+0x4fe>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d010      	beq.n	8010a06 <isoDepDataExchangePCD+0x4fe>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 80109e4:	4b19      	ldr	r3, [pc, #100]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	4a18      	ldr	r2, [pc, #96]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109ea:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80109ee:	1898      	adds	r0, r3, r2
 80109f0:	4b16      	ldr	r3, [pc, #88]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	4a15      	ldr	r2, [pc, #84]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 80109f6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80109fa:	1899      	adds	r1, r3, r2
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	461a      	mov	r2, r3
 8010a02:	f00a fd65 	bl	801b4d0 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8010a06:	4b11      	ldr	r3, [pc, #68]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010a08:	2200      	movs	r2, #0
 8010a0a:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 8010a0c:	f7ff fbc6 	bl	801019c <isoDepClearCounters>
                    return ERR_NONE;
 8010a10:	2300      	movs	r3, #0
 8010a12:	e017      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8010a14:	4b0d      	ldr	r3, [pc, #52]	; (8010a4c <isoDepDataExchangePCD+0x544>)
 8010a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d001      	beq.n	8010a22 <isoDepDataExchangePCD+0x51a>
                        return ERR_PROTO;
 8010a1e:	230b      	movs	r3, #11
 8010a20:	e010      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8010a22:	2100      	movs	r1, #0
 8010a24:	2001      	movs	r0, #1
 8010a26:	f7ff fc63 	bl	80102f0 <isoDepHandleControlMsg>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	81fb      	strh	r3, [r7, #14]
 8010a2e:	89fb      	ldrh	r3, [r7, #14]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d001      	beq.n	8010a38 <isoDepDataExchangePCD+0x530>
 8010a34:	89fb      	ldrh	r3, [r7, #14]
 8010a36:	e005      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8010a38:	2302      	movs	r3, #2
 8010a3a:	e003      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 8010a3c:	230b      	movs	r3, #11
 8010a3e:	e001      	b.n	8010a44 <isoDepDataExchangePCD+0x53c>
            break;
 8010a40:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 8010a42:	230c      	movs	r3, #12
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010a4c:	200032a0 	.word	0x200032a0

08010a50 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8010a56:	4b23      	ldr	r3, [pc, #140]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d003      	beq.n	8010a66 <rfalIsoDepDeselect+0x16>
 8010a5e:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d110      	bne.n	8010a88 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8010a66:	4b1f      	ldr	r3, [pc, #124]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a68:	4a1f      	ldr	r2, [pc, #124]	; (8010ae8 <rfalIsoDepDeselect+0x98>)
 8010a6a:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a6e:	4a1f      	ldr	r2, [pc, #124]	; (8010aec <rfalIsoDepDeselect+0x9c>)
 8010a70:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 8010a72:	4b1c      	ldr	r3, [pc, #112]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a74:	2204      	movs	r2, #4
 8010a76:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8010a78:	4b1a      	ldr	r3, [pc, #104]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a7a:	2202      	movs	r2, #2
 8010a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010a82:	2202      	movs	r2, #2
 8010a84:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 8010a88:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8010a8c:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 8010a8e:	2100      	movs	r1, #0
 8010a90:	2003      	movs	r0, #3
 8010a92:	f7ff fc2d 	bl	80102f0 <isoDepHandleControlMsg>
 8010a96:	4603      	mov	r3, r0
 8010a98:	807b      	strh	r3, [r7, #2]
 8010a9a:	887b      	ldrh	r3, [r7, #2]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <rfalIsoDepDeselect+0x54>
 8010aa0:	887b      	ldrh	r3, [r7, #2]
 8010aa2:	e01a      	b.n	8010ada <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8010aa4:	4b0f      	ldr	r3, [pc, #60]	; (8010ae4 <rfalIsoDepDeselect+0x94>)
 8010aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa8:	1c7a      	adds	r2, r7, #1
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff fd2b 	bl	8010508 <isoDepDataExchangePCD>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 8010ab6:	f007 fe57 	bl	8018768 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	1e5a      	subs	r2, r3, #1
 8010abe:	607a      	str	r2, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d002      	beq.n	8010aca <rfalIsoDepDeselect+0x7a>
 8010ac4:	887b      	ldrh	r3, [r7, #2]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d0ec      	beq.n	8010aa4 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 8010aca:	f7ff fccb 	bl	8010464 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <rfalIsoDepDeselect+0x88>
 8010ad4:	887b      	ldrh	r3, [r7, #2]
 8010ad6:	e000      	b.n	8010ada <rfalIsoDepDeselect+0x8a>
 8010ad8:	2304      	movs	r3, #4
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	200032a0 	.word	0x200032a0
 8010ae8:	200032ea 	.word	0x200032ea
 8010aec:	200032e5 	.word	0x200032e5

08010af0 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 8010afa:	79fb      	ldrb	r3, [r7, #7]
 8010afc:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 8010afe:	7bfb      	ldrb	r3, [r7, #15]
 8010b00:	2b0e      	cmp	r3, #14
 8010b02:	d901      	bls.n	8010b08 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8010b04:	2304      	movs	r3, #4
 8010b06:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	330c      	adds	r3, #12
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b12:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010b1a:	bf28      	it	cs
 8010b1c:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8010b20:	60bb      	str	r3, [r7, #8]
    
    return result;
 8010b22:	68bb      	ldr	r3, [r7, #8]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bc80      	pop	{r7}
 8010b2c:	4770      	bx	lr
	...

08010b30 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	4603      	mov	r3, r0
 8010b38:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8010b3a:	4b33      	ldr	r3, [pc, #204]	; (8010c08 <rfalIsoDepFSxI2FSx+0xd8>)
 8010b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d105      	bne.n	8010b50 <rfalIsoDepFSxI2FSx+0x20>
 8010b44:	79fb      	ldrb	r3, [r7, #7]
 8010b46:	2b0c      	cmp	r3, #12
 8010b48:	bf28      	it	cs
 8010b4a:	230c      	movcs	r3, #12
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	e004      	b.n	8010b5a <rfalIsoDepFSxI2FSx+0x2a>
 8010b50:	79fb      	ldrb	r3, [r7, #7]
 8010b52:	2b08      	cmp	r3, #8
 8010b54:	bf28      	it	cs
 8010b56:	2308      	movcs	r3, #8
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8010b5c:	7b7b      	ldrb	r3, [r7, #13]
 8010b5e:	2b0c      	cmp	r3, #12
 8010b60:	d848      	bhi.n	8010bf4 <rfalIsoDepFSxI2FSx+0xc4>
 8010b62:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <rfalIsoDepFSxI2FSx+0x38>)
 8010b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b68:	08010b9d 	.word	0x08010b9d
 8010b6c:	08010ba3 	.word	0x08010ba3
 8010b70:	08010ba9 	.word	0x08010ba9
 8010b74:	08010baf 	.word	0x08010baf
 8010b78:	08010bb5 	.word	0x08010bb5
 8010b7c:	08010bbb 	.word	0x08010bbb
 8010b80:	08010bc1 	.word	0x08010bc1
 8010b84:	08010bc7 	.word	0x08010bc7
 8010b88:	08010bcd 	.word	0x08010bcd
 8010b8c:	08010bd5 	.word	0x08010bd5
 8010b90:	08010bdd 	.word	0x08010bdd
 8010b94:	08010be5 	.word	0x08010be5
 8010b98:	08010bed 	.word	0x08010bed
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8010b9c:	2310      	movs	r3, #16
 8010b9e:	81fb      	strh	r3, [r7, #14]
 8010ba0:	e02c      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8010ba2:	2318      	movs	r3, #24
 8010ba4:	81fb      	strh	r3, [r7, #14]
 8010ba6:	e029      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8010ba8:	2320      	movs	r3, #32
 8010baa:	81fb      	strh	r3, [r7, #14]
 8010bac:	e026      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8010bae:	2328      	movs	r3, #40	; 0x28
 8010bb0:	81fb      	strh	r3, [r7, #14]
 8010bb2:	e023      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8010bb4:	2330      	movs	r3, #48	; 0x30
 8010bb6:	81fb      	strh	r3, [r7, #14]
 8010bb8:	e020      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8010bba:	2340      	movs	r3, #64	; 0x40
 8010bbc:	81fb      	strh	r3, [r7, #14]
 8010bbe:	e01d      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8010bc0:	2360      	movs	r3, #96	; 0x60
 8010bc2:	81fb      	strh	r3, [r7, #14]
 8010bc4:	e01a      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8010bc6:	2380      	movs	r3, #128	; 0x80
 8010bc8:	81fb      	strh	r3, [r7, #14]
 8010bca:	e017      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8010bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bd0:	81fb      	strh	r3, [r7, #14]
 8010bd2:	e013      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8010bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bd8:	81fb      	strh	r3, [r7, #14]
 8010bda:	e00f      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8010bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be0:	81fb      	strh	r3, [r7, #14]
 8010be2:	e00b      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8010be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010be8:	81fb      	strh	r3, [r7, #14]
 8010bea:	e007      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8010bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bf0:	81fb      	strh	r3, [r7, #14]
 8010bf2:	e003      	b.n	8010bfc <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8010bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bf8:	81fb      	strh	r3, [r7, #14]
 8010bfa:	bf00      	nop
    }
    return fsx;
 8010bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3714      	adds	r7, #20
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bc80      	pop	{r7}
 8010c06:	4770      	bx	lr
 8010c08:	200032a0 	.word	0x200032a0

08010c0c <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 8010c12:	4b11      	ldr	r3, [pc, #68]	; (8010c58 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010c14:	8a1b      	ldrh	r3, [r3, #16]
 8010c16:	2b0f      	cmp	r3, #15
 8010c18:	d909      	bls.n	8010c2e <rfalIsoDepGetMaxInfLen+0x22>
 8010c1a:	4b0f      	ldr	r3, [pc, #60]	; (8010c58 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010c1c:	8a1b      	ldrh	r3, [r3, #16]
 8010c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c22:	d804      	bhi.n	8010c2e <rfalIsoDepGetMaxInfLen+0x22>
 8010c24:	4b0c      	ldr	r3, [pc, #48]	; (8010c58 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010c26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d905      	bls.n	8010c3a <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 8010c2e:	2310      	movs	r3, #16
 8010c30:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 8010c32:	88fb      	ldrh	r3, [r7, #6]
 8010c34:	3b03      	subs	r3, #3
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	e009      	b.n	8010c4e <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 8010c3a:	4b07      	ldr	r3, [pc, #28]	; (8010c58 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010c3c:	8a1a      	ldrh	r2, [r3, #16]
 8010c3e:	4b06      	ldr	r3, [pc, #24]	; (8010c58 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010c40:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	3b02      	subs	r3, #2
 8010c4c:	b29b      	uxth	r3, r3
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bc80      	pop	{r7}
 8010c56:	4770      	bx	lr
 8010c58:	200032a0 	.word	0x200032a0

08010c5c <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	f107 0c08 	add.w	ip, r7, #8
 8010c66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	4b30      	ldr	r3, [pc, #192]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c70:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 8010c72:	4b2f      	ldr	r3, [pc, #188]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c74:	2203      	movs	r2, #3
 8010c76:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 8010c7a:	89ba      	ldrh	r2, [r7, #12]
 8010c7c:	4b2c      	ldr	r3, [pc, #176]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c7e:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 8010c80:	7bba      	ldrb	r2, [r7, #14]
 8010c82:	4b2b      	ldr	r3, [pc, #172]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c84:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	4b29      	ldr	r3, [pc, #164]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c8c:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 8010c8e:	4b28      	ldr	r3, [pc, #160]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c90:	2203      	movs	r2, #3
 8010c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 8010c96:	4b26      	ldr	r3, [pc, #152]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010c98:	f240 1203 	movw	r2, #259	; 0x103
 8010c9c:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	4a23      	ldr	r2, [pc, #140]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	4a22      	ldr	r2, [pc, #136]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010ca8:	6313      	str	r3, [r2, #48]	; 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	4a20      	ldr	r2, [pc, #128]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cae:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	4a1f      	ldr	r2, [pc, #124]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cb4:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 8010cb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010cb8:	4b1d      	ldr	r3, [pc, #116]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cba:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 8010cbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010cc0:	4b1b      	ldr	r3, [pc, #108]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cc2:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8010cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cc6:	2bff      	cmp	r3, #255	; 0xff
 8010cc8:	d001      	beq.n	8010cce <rfalIsoDepStartTransceive+0x72>
 8010cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ccc:	e001      	b.n	8010cd2 <rfalIsoDepStartTransceive+0x76>
 8010cce:	4b18      	ldr	r3, [pc, #96]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cd0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010cd2:	4a17      	ldr	r2, [pc, #92]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cd4:	8453      	strh	r3, [r2, #34]	; 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 8010cd6:	4b16      	ldr	r3, [pc, #88]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 8010cdc:	f7ff fa5e 	bl	801019c <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 8010ce0:	4b13      	ldr	r3, [pc, #76]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010ce2:	785b      	ldrb	r3, [r3, #1]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d119      	bne.n	8010d1c <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 8010ce8:	4b11      	ldr	r3, [pc, #68]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cea:	8b9b      	ldrh	r3, [r3, #28]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d010      	beq.n	8010d12 <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 8010cf0:	4b0f      	ldr	r3, [pc, #60]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010cf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010cf6:	f083 0301 	eor.w	r3, r3, #1
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d004      	beq.n	8010d0a <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 8010d00:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010d02:	2208      	movs	r2, #8
 8010d04:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e00c      	b.n	8010d24 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 8010d0a:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 8010d12:	4b07      	ldr	r3, [pc, #28]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010d14:	2206      	movs	r2, #6
 8010d16:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e003      	b.n	8010d24 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 8010d1c:	4b04      	ldr	r3, [pc, #16]	; (8010d30 <rfalIsoDepStartTransceive+0xd4>)
 8010d1e:	2201      	movs	r2, #1
 8010d20:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	46bd      	mov	sp, r7
 8010d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d2c:	b004      	add	sp, #16
 8010d2e:	4770      	bx	lr
 8010d30:	200032a0 	.word	0x200032a0

08010d34 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8010d38:	4b08      	ldr	r3, [pc, #32]	; (8010d5c <rfalIsoDepGetTransceiveStatus+0x28>)
 8010d3a:	785b      	ldrb	r3, [r3, #1]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d101      	bne.n	8010d44 <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 8010d40:	2318      	movs	r3, #24
 8010d42:	e008      	b.n	8010d56 <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 8010d44:	4b05      	ldr	r3, [pc, #20]	; (8010d5c <rfalIsoDepGetTransceiveStatus+0x28>)
 8010d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d48:	4a04      	ldr	r2, [pc, #16]	; (8010d5c <rfalIsoDepGetTransceiveStatus+0x28>)
 8010d4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff fbda 	bl	8010508 <isoDepDataExchangePCD>
 8010d54:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	200032a0 	.word	0x200032a0

08010d60 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08a      	sub	sp, #40	; 0x28
 8010d64:	af04      	add	r7, sp, #16
 8010d66:	60ba      	str	r2, [r7, #8]
 8010d68:	607b      	str	r3, [r7, #4]
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	73fb      	strb	r3, [r7, #15]
 8010d6e:	460b      	mov	r3, r1
 8010d70:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d101      	bne.n	8010d7c <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 8010d78:	2307      	movs	r3, #7
 8010d7a:	e03c      	b.n	8010df6 <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8010d7c:	23e0      	movs	r3, #224	; 0xe0
 8010d7e:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8010d80:	7bfb      	ldrb	r3, [r7, #15]
 8010d82:	011b      	lsls	r3, r3, #4
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	7bbb      	ldrb	r3, [r7, #14]
 8010d88:	f003 030f 	and.w	r3, r3, #15
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8010d94:	f107 0010 	add.w	r0, r7, #16
 8010d98:	4b19      	ldr	r3, [pc, #100]	; (8010e00 <rfalIsoDepRATS+0xa0>)
 8010d9a:	9302      	str	r3, [sp, #8]
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	9301      	str	r3, [sp, #4]
 8010da0:	f107 0314 	add.w	r3, r7, #20
 8010da4:	9300      	str	r3, [sp, #0]
 8010da6:	2314      	movs	r3, #20
 8010da8:	68ba      	ldr	r2, [r7, #8]
 8010daa:	2102      	movs	r1, #2
 8010dac:	f007 fc78 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8010db0:	4603      	mov	r3, r0
 8010db2:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8010db4:	8afb      	ldrh	r3, [r7, #22]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d115      	bne.n	8010de6 <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8010dba:	8abb      	ldrh	r3, [r7, #20]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d008      	beq.n	8010dd2 <rfalIsoDepRATS+0x72>
 8010dc0:	8abb      	ldrh	r3, [r7, #20]
 8010dc2:	2b14      	cmp	r3, #20
 8010dc4:	d805      	bhi.n	8010dd2 <rfalIsoDepRATS+0x72>
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	8abb      	ldrh	r3, [r7, #20]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d001      	beq.n	8010dd6 <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8010dd2:	230b      	movs	r3, #11
 8010dd4:	e00f      	b.n	8010df6 <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8010dd6:	7bfb      	ldrb	r3, [r7, #15]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fea9 	bl	8010b30 <rfalIsoDepFSxI2FSx>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	4b08      	ldr	r3, [pc, #32]	; (8010e04 <rfalIsoDepRATS+0xa4>)
 8010de4:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d003      	beq.n	8010df4 <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 8010dec:	8abb      	ldrh	r3, [r7, #20]
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8010df4:	8afb      	ldrh	r3, [r7, #22]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	00046780 	.word	0x00046780
 8010e04:	200032a0 	.word	0x200032a0

08010e08 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af04      	add	r7, sp, #16
 8010e0e:	603b      	str	r3, [r7, #0]
 8010e10:	4603      	mov	r3, r0
 8010e12:	71fb      	strb	r3, [r7, #7]
 8010e14:	460b      	mov	r3, r1
 8010e16:	71bb      	strb	r3, [r7, #6]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d008      	beq.n	8010e34 <rfalIsoDepPPS+0x2c>
 8010e22:	79bb      	ldrb	r3, [r7, #6]
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d805      	bhi.n	8010e34 <rfalIsoDepPPS+0x2c>
 8010e28:	797b      	ldrb	r3, [r7, #5]
 8010e2a:	2b03      	cmp	r3, #3
 8010e2c:	d802      	bhi.n	8010e34 <rfalIsoDepPPS+0x2c>
 8010e2e:	79fb      	ldrb	r3, [r7, #7]
 8010e30:	2b0e      	cmp	r3, #14
 8010e32:	d901      	bls.n	8010e38 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 8010e34:	2307      	movs	r3, #7
 8010e36:	e033      	b.n	8010ea0 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8010e38:	79fb      	ldrb	r3, [r7, #7]
 8010e3a:	f003 030f 	and.w	r3, r3, #15
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8010e48:	2311      	movs	r3, #17
 8010e4a:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8010e4c:	79bb      	ldrb	r3, [r7, #6]
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	b25a      	sxtb	r2, r3
 8010e52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8010e56:	4313      	orrs	r3, r2
 8010e58:	b25b      	sxtb	r3, r3
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f003 030f 	and.w	r3, r3, #15
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8010e64:	f107 0008 	add.w	r0, r7, #8
 8010e68:	4b0f      	ldr	r3, [pc, #60]	; (8010ea8 <rfalIsoDepPPS+0xa0>)
 8010e6a:	9302      	str	r3, [sp, #8]
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	f107 030c 	add.w	r3, r7, #12
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	2301      	movs	r3, #1
 8010e78:	683a      	ldr	r2, [r7, #0]
 8010e7a:	2103      	movs	r1, #3
 8010e7c:	f007 fc10 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8010e80:	4603      	mov	r3, r0
 8010e82:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8010e84:	89fb      	ldrh	r3, [r7, #14]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d109      	bne.n	8010e9e <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8010e8a:	89bb      	ldrh	r3, [r7, #12]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d104      	bne.n	8010e9a <rfalIsoDepPPS+0x92>
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	781a      	ldrb	r2, [r3, #0]
 8010e94:	7a3b      	ldrb	r3, [r7, #8]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d001      	beq.n	8010e9e <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 8010e9a:	230b      	movs	r3, #11
 8010e9c:	e000      	b.n	8010ea0 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 8010e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	00046780 	.word	0x00046780

08010eac <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b092      	sub	sp, #72	; 0x48
 8010eb0:	af04      	add	r7, sp, #16
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4603      	mov	r3, r0
 8010ebc:	70fb      	strb	r3, [r7, #3]
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	70bb      	strb	r3, [r7, #2]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8010ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00c      	beq.n	8010ee6 <rfalIsoDepATTRIB+0x3a>
 8010ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <rfalIsoDepATTRIB+0x3a>
 8010ed2:	78bb      	ldrb	r3, [r7, #2]
 8010ed4:	2b03      	cmp	r3, #3
 8010ed6:	d806      	bhi.n	8010ee6 <rfalIsoDepATTRIB+0x3a>
 8010ed8:	787b      	ldrb	r3, [r7, #1]
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d803      	bhi.n	8010ee6 <rfalIsoDepATTRIB+0x3a>
 8010ede:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010ee2:	2b0e      	cmp	r3, #14
 8010ee4:	d901      	bls.n	8010eea <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e066      	b.n	8010fb8 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8010eea:	231d      	movs	r3, #29
 8010eec:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 8010eee:	78fb      	ldrb	r3, [r7, #3]
 8010ef0:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8010ef2:	78bb      	ldrb	r3, [r7, #2]
 8010ef4:	019b      	lsls	r3, r3, #6
 8010ef6:	b25a      	sxtb	r2, r3
 8010ef8:	787b      	ldrb	r3, [r7, #1]
 8010efa:	011b      	lsls	r3, r3, #4
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	4313      	orrs	r3, r2
 8010f00:	b25b      	sxtb	r3, r3
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	f023 030f 	bic.w	r3, r3, #15
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f0e:	f003 030f 	and.w	r3, r3, #15
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	4313      	orrs	r3, r2
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 8010f1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010f1e:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8010f20:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010f24:	f003 030f 	and.w	r3, r3, #15
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	743b      	strb	r3, [r7, #16]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8010f30:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8010f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d011      	beq.n	8010f5e <rfalIsoDepATTRIB+0xb2>
 8010f3a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00d      	beq.n	8010f5e <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8010f42:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010f46:	2b20      	cmp	r3, #32
 8010f48:	bf28      	it	cs
 8010f4a:	2320      	movcs	r3, #32
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f107 0308 	add.w	r3, r7, #8
 8010f54:	3309      	adds	r3, #9
 8010f56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f00a faab 	bl	801b4b4 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8010f5e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010f62:	2b20      	cmp	r3, #32
 8010f64:	bf28      	it	cs
 8010f66:	2320      	movcs	r3, #32
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	3309      	adds	r3, #9
 8010f6e:	b299      	uxth	r1, r3
 8010f70:	f107 0008 	add.w	r0, r7, #8
 8010f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f76:	9302      	str	r3, [sp, #8]
 8010f78:	2300      	movs	r3, #0
 8010f7a:	9301      	str	r3, [sp, #4]
 8010f7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	2321      	movs	r3, #33	; 0x21
 8010f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f86:	f007 fb8b 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 8010f8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f94:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 8010f96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d10c      	bne.n	8010fb6 <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8010f9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d007      	beq.n	8010fb2 <rfalIsoDepATTRIB+0x106>
 8010fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 020f 	and.w	r2, r3, #15
 8010faa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d001      	beq.n	8010fb6 <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 8010fb2:	230b      	movs	r3, #11
 8010fb4:	e000      	b.n	8010fb8 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 8010fb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3738      	adds	r7, #56	; 0x38
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	603b      	str	r3, [r7, #0]
 8010fc8:	4603      	mov	r3, r0
 8010fca:	71fb      	strb	r3, [r7, #7]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	71bb      	strb	r3, [r7, #6]
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d101      	bne.n	8010fde <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8010fda:	2307      	movs	r3, #7
 8010fdc:	e143      	b.n	8011266 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8010fde:	2002      	movs	r0, #2
 8010fe0:	f007 f8ca 	bl	8018178 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8010fe4:	4ba2      	ldr	r3, [pc, #648]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8010fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010fea:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	3314      	adds	r3, #20
 8010ff2:	79b9      	ldrb	r1, [r7, #6]
 8010ff4:	79f8      	ldrb	r0, [r7, #7]
 8010ff6:	f7ff feb3 	bl	8010d60 <rfalIsoDepRATS>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8010ffe:	4b9c      	ldr	r3, [pc, #624]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8011000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011004:	2b01      	cmp	r3, #1
 8011006:	d105      	bne.n	8011014 <rfalIsoDepPollAHandleActivation+0x54>
 8011008:	89bb      	ldrh	r3, [r7, #12]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d002      	beq.n	8011014 <rfalIsoDepPollAHandleActivation+0x54>
 801100e:	89bb      	ldrh	r3, [r7, #12]
 8011010:	2b04      	cmp	r3, #4
 8011012:	d10b      	bne.n	801102c <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8011014:	2001      	movs	r0, #1
 8011016:	f7f3 fbc9 	bl	80047ac <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 801101a:	7bfb      	ldrb	r3, [r7, #15]
 801101c:	1e5a      	subs	r2, r3, #1
 801101e:	73fa      	strb	r2, [r7, #15]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d004      	beq.n	801102e <rfalIsoDepPollAHandleActivation+0x6e>
 8011024:	89bb      	ldrh	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1e0      	bne.n	8010fec <rfalIsoDepPollAHandleActivation+0x2c>
 801102a:	e000      	b.n	801102e <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 801102c:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 801102e:	89bb      	ldrh	r3, [r7, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d008      	beq.n	8011046 <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8011034:	4b8e      	ldr	r3, [pc, #568]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8011036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801103a:	2b02      	cmp	r3, #2
 801103c:	d101      	bne.n	8011042 <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 801103e:	f7ff fd07 	bl	8010a50 <rfalIsoDepDeselect>
        }
        return ret;
 8011042:	89bb      	ldrh	r3, [r7, #12]
 8011044:	e10f      	b.n	8011266 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	2204      	movs	r2, #4
 801104a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	2200      	movs	r2, #0
 8011052:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	2200      	movs	r2, #0
 8011058:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2200      	movs	r2, #0
 801105e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	2200      	movs	r2, #0
 8011066:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2202      	movs	r2, #2
 801106e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	2b01      	cmp	r3, #1
 8011078:	d973      	bls.n	8011162 <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 801107a:	2301      	movs	r3, #1
 801107c:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	785b      	ldrb	r3, [r3, #1]
 8011082:	f003 030f 	and.w	r3, r3, #15
 8011086:	b2da      	uxtb	r2, r3
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 801108e:	7bbb      	ldrb	r3, [r7, #14]
 8011090:	3301      	adds	r3, #1
 8011092:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	785b      	ldrb	r3, [r3, #1]
 8011098:	f003 0310 	and.w	r3, r3, #16
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00d      	beq.n	80110bc <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	7bbb      	ldrb	r3, [r7, #14]
 80110a4:	1c59      	adds	r1, r3, #1
 80110a6:	73b9      	strb	r1, [r7, #14]
 80110a8:	4413      	add	r3, r2
 80110aa:	7819      	ldrb	r1, [r3, #0]
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	3349      	adds	r3, #73	; 0x49
 80110b6:	7978      	ldrb	r0, [r7, #5]
 80110b8:	f000 f9f6 	bl	80114a8 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	785b      	ldrb	r3, [r3, #1]
 80110c0:	f003 0320 	and.w	r3, r3, #32
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d018      	beq.n	80110fa <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	1c59      	adds	r1, r3, #1
 80110ce:	73b9      	strb	r1, [r7, #14]
 80110d0:	4413      	add	r3, r2
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	461a      	mov	r2, r3
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110de:	091b      	lsrs	r3, r3, #4
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	f003 030f 	and.w	r3, r3, #15
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f2:	f003 020f 	and.w	r2, r3, #15
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	785b      	ldrb	r3, [r3, #1]
 80110fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011102:	2b00      	cmp	r3, #0
 8011104:	d02d      	beq.n	8011162 <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 8011106:	683a      	ldr	r2, [r7, #0]
 8011108:	7bbb      	ldrb	r3, [r7, #14]
 801110a:	4413      	add	r3, r2
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	091b      	lsrs	r3, r3, #4
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	2b00      	cmp	r3, #0
 8011116:	bf14      	ite	ne
 8011118:	2301      	movne	r3, #1
 801111a:	2300      	moveq	r3, #0
 801111c:	b2da      	uxtb	r2, r3
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 8011124:	683a      	ldr	r2, [r7, #0]
 8011126:	7bbb      	ldrb	r3, [r7, #14]
 8011128:	4413      	add	r3, r2
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	085b      	lsrs	r3, r3, #1
 801112e:	f003 0301 	and.w	r3, r3, #1
 8011132:	2b00      	cmp	r3, #0
 8011134:	bf14      	ite	ne
 8011136:	2301      	movne	r3, #1
 8011138:	2300      	moveq	r3, #0
 801113a:	b2da      	uxtb	r2, r3
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	7bbb      	ldrb	r3, [r7, #14]
 8011146:	1c59      	adds	r1, r3, #1
 8011148:	73b9      	strb	r1, [r7, #14]
 801114a:	4413      	add	r3, r2
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	bf14      	ite	ne
 8011156:	2301      	movne	r3, #1
 8011158:	2300      	moveq	r3, #0
 801115a:	b2da      	uxtb	r2, r3
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011168:	4618      	mov	r0, r3
 801116a:	f7ff fce1 	bl	8010b30 <rfalIsoDepFSxI2FSx>
 801116e:	4603      	mov	r3, r0
 8011170:	461a      	mov	r2, r3
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801117c:	b2db      	uxtb	r3, r3
 801117e:	4618      	mov	r0, r3
 8011180:	f000 fa34 	bl	80115ec <rfalIsoDepSFGI2SFGT>
 8011184:	4602      	mov	r2, r0
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801118e:	b29b      	uxth	r3, r3
 8011190:	4618      	mov	r0, r3
 8011192:	f7f3 fa79 	bl	8004688 <timerCalculateTimer>
 8011196:	4603      	mov	r3, r0
 8011198:	4a35      	ldr	r2, [pc, #212]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 801119a:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7ff fca4 	bl	8010af0 <rfalIsoDepFWI2FWT>
 80111a8:	4602      	mov	r2, r0
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80111b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <rfalIsoDepPollAHandleActivation+0x204>
 80111c0:	79ba      	ldrb	r2, [r7, #6]
 80111c2:	e000      	b.n	80111c6 <rfalIsoDepPollAHandleActivation+0x206>
 80111c4:	2200      	movs	r2, #0
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	22ff      	movs	r2, #255	; 0xff
 80111d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d104      	bne.n	80111e8 <rfalIsoDepPollAHandleActivation+0x228>
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d030      	beq.n	801124a <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 80111e8:	bf00      	nop
 80111ea:	4b21      	ldr	r3, [pc, #132]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80111ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7f3 fa58 	bl	80046a4 <timerIsExpired>
 80111f4:	4603      	mov	r3, r0
 80111f6:	f083 0301 	eor.w	r3, r3, #1
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1f4      	bne.n	80111ea <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011212:	f107 0308 	add.w	r3, r7, #8
 8011216:	f7ff fdf7 	bl	8010e08 <rfalIsoDepPPS>
 801121a:	4603      	mov	r3, r0
 801121c:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 801121e:	89bb      	ldrh	r3, [r7, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10a      	bne.n	801123a <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f006 fd16 	bl	8017c64 <rfalSetBitRate>
 8011238:	e007      	b.n	801124a <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	2200      	movs	r2, #0
 801123e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2200      	movs	r2, #0
 8011246:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8011250:	4b07      	ldr	r3, [pc, #28]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8011252:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8011254:	79fb      	ldrb	r3, [r7, #7]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fc6a 	bl	8010b30 <rfalIsoDepFSxI2FSx>
 801125c:	4603      	mov	r3, r0
 801125e:	461a      	mov	r2, r3
 8011260:	4b03      	ldr	r3, [pc, #12]	; (8011270 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8011262:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	200032a0 	.word	0x200032a0

08011274 <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 8011274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011276:	b08d      	sub	sp, #52	; 0x34
 8011278:	af08      	add	r7, sp, #32
 801127a:	4604      	mov	r4, r0
 801127c:	4608      	mov	r0, r1
 801127e:	4611      	mov	r1, r2
 8011280:	461a      	mov	r2, r3
 8011282:	4623      	mov	r3, r4
 8011284:	71fb      	strb	r3, [r7, #7]
 8011286:	4603      	mov	r3, r0
 8011288:	71bb      	strb	r3, [r7, #6]
 801128a:	460b      	mov	r3, r1
 801128c:	717b      	strb	r3, [r7, #5]
 801128e:	4613      	mov	r3, r2
 8011290:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 8011292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011294:	7b1b      	ldrb	r3, [r3, #12]
 8011296:	091b      	lsrs	r3, r3, #4
 8011298:	b2da      	uxtb	r2, r3
 801129a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 80112a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7ff fc22 	bl	8010af0 <rfalIsoDepFWI2FWT>
 80112ac:	4602      	mov	r2, r0
 80112ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b0:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 80112b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80112b8:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80112ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112bc:	7b5b      	ldrb	r3, [r3, #13]
 80112be:	091b      	lsrs	r3, r3, #4
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	f003 020f 	and.w	r2, r3, #15
 80112c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c8:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 80112ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f000 f98b 	bl	80115ec <rfalIsoDepSFGI2SFGT>
 80112d6:	4602      	mov	r2, r0
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	7adb      	ldrb	r3, [r3, #11]
 80112e0:	091b      	lsrs	r3, r3, #4
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 80112ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fc1d 	bl	8010b30 <rfalIsoDepFSxI2FSx>
 80112f6:	4603      	mov	r3, r0
 80112f8:	461a      	mov	r2, r3
 80112fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 8011300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011302:	79ba      	ldrb	r2, [r7, #6]
 8011304:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8011308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130a:	7b1b      	ldrb	r3, [r3, #12]
 801130c:	f003 0301 	and.w	r3, r3, #1
 8011310:	2b00      	cmp	r3, #0
 8011312:	bf14      	ite	ne
 8011314:	2301      	movne	r3, #1
 8011316:	2300      	moveq	r3, #0
 8011318:	b2da      	uxtb	r2, r3
 801131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	7b1b      	ldrb	r3, [r3, #12]
 8011324:	085b      	lsrs	r3, r3, #1
 8011326:	f003 0301 	and.w	r3, r3, #1
 801132a:	2b00      	cmp	r3, #0
 801132c:	bf14      	ite	ne
 801132e:	2301      	movne	r3, #1
 8011330:	2300      	moveq	r3, #0
 8011332:	b2da      	uxtb	r2, r3
 8011334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011336:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 801133a:	79bb      	ldrb	r3, [r7, #6]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d009      	beq.n	8011354 <rfalIsoDepPollBHandleActivation+0xe0>
 8011340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011342:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011346:	f083 0301 	eor.w	r3, r3, #1
 801134a:	b2db      	uxtb	r3, r3
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 8011350:	2307      	movs	r3, #7
 8011352:	e0a3      	b.n	801149c <rfalIsoDepPollBHandleActivation+0x228>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8011354:	2002      	movs	r0, #2
 8011356:	f006 ff0f 	bl	8018178 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 801135a:	4b52      	ldr	r3, [pc, #328]	; (80114a4 <rfalIsoDepPollBHandleActivation+0x230>)
 801135c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011360:	2b01      	cmp	r3, #1
 8011362:	d104      	bne.n	801136e <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8011364:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8011368:	f006 ff16 	bl	8018198 <rfalSetFDTPoll>
 801136c:	e00d      	b.n	801138a <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	7adb      	ldrb	r3, [r3, #11]
 8011372:	085b      	lsrs	r3, r3, #1
 8011374:	b2db      	uxtb	r3, r3
 8011376:	f003 0303 	and.w	r3, r3, #3
 801137a:	b2db      	uxtb	r3, r3
 801137c:	4618      	mov	r0, r3
 801137e:	f005 f903 	bl	8016588 <rfalNfcbTR2ToFDT>
 8011382:	4603      	mov	r3, r0
 8011384:	4618      	mov	r0, r3
 8011386:	f006 ff07 	bl	8018198 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 801138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138c:	7a99      	ldrb	r1, [r3, #10]
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	3349      	adds	r3, #73	; 0x49
 8011398:	7978      	ldrb	r0, [r7, #5]
 801139a:	f000 f885 	bl	80114a8 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 801139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a0:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 80113a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a4:	7b1b      	ldrb	r3, [r3, #12]
 80113a6:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d001      	beq.n	80113b2 <rfalIsoDepPollBHandleActivation+0x13e>
 80113ae:	7939      	ldrb	r1, [r7, #4]
 80113b0:	e000      	b.n	80113b4 <rfalIsoDepPollBHandleActivation+0x140>
 80113b2:	2100      	movs	r1, #0
 80113b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b6:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 80113ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113bc:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 80113c0:	4b38      	ldr	r3, [pc, #224]	; (80114a4 <rfalIsoDepPollBHandleActivation+0x230>)
 80113c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d005      	beq.n	80113d6 <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80113ce:	f003 0307 	and.w	r3, r3, #7
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	e000      	b.n	80113d8 <rfalIsoDepPollBHandleActivation+0x164>
 80113d6:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 80113d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113da:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80113dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113de:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80113e0:	4402      	add	r2, r0
 80113e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80113e4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80113e6:	3421      	adds	r4, #33	; 0x21
 80113e8:	9407      	str	r4, [sp, #28]
 80113ea:	9006      	str	r0, [sp, #24]
 80113ec:	9205      	str	r2, [sp, #20]
 80113ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80113f2:	9204      	str	r2, [sp, #16]
 80113f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113f6:	9203      	str	r2, [sp, #12]
 80113f8:	79ba      	ldrb	r2, [r7, #6]
 80113fa:	9202      	str	r2, [sp, #8]
 80113fc:	9301      	str	r3, [sp, #4]
 80113fe:	79fb      	ldrb	r3, [r7, #7]
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	4663      	mov	r3, ip
 8011404:	4632      	mov	r2, r6
 8011406:	4628      	mov	r0, r5
 8011408:	f7ff fd50 	bl	8010eac <rfalIsoDepATTRIB>
 801140c:	4603      	mov	r3, r0
 801140e:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 8011410:	89fb      	ldrh	r3, [r7, #14]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d12c      	bne.n	8011470 <rfalIsoDepPollBHandleActivation+0x1fc>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 8011416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	f003 020f 	and.w	r2, r3, #15
 801141e:	79bb      	ldrb	r3, [r7, #6]
 8011420:	429a      	cmp	r2, r3
 8011422:	d001      	beq.n	8011428 <rfalIsoDepPollBHandleActivation+0x1b4>
        {
            return ERR_PROTO;
 8011424:	230b      	movs	r3, #11
 8011426:	e039      	b.n	801149c <rfalIsoDepPollBHandleActivation+0x228>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 8011428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	091b      	lsrs	r3, r3, #4
 801142e:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 8011430:	7b7b      	ldrb	r3, [r7, #13]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d008      	beq.n	8011448 <rfalIsoDepPollBHandleActivation+0x1d4>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 8011436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011438:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801143c:	461a      	mov	r2, r3
 801143e:	7b7b      	ldrb	r3, [r7, #13]
 8011440:	3b01      	subs	r3, #1
 8011442:	409a      	lsls	r2, r3
 8011444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011446:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8011448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 801144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011450:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011454:	4619      	mov	r1, r3
 8011456:	4610      	mov	r0, r2
 8011458:	f006 fc04 	bl	8017c64 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 801145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011460:	b29b      	uxth	r3, r3
 8011462:	4618      	mov	r0, r3
 8011464:	f7f3 f910 	bl	8004688 <timerCalculateTimer>
 8011468:	4603      	mov	r3, r0
 801146a:	4a0e      	ldr	r2, [pc, #56]	; (80114a4 <rfalIsoDepPollBHandleActivation+0x230>)
 801146c:	63d3      	str	r3, [r2, #60]	; 0x3c
 801146e:	e007      	b.n	8011480 <rfalIsoDepPollBHandleActivation+0x20c>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 8011470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011472:	2200      	movs	r2, #0
 8011474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 8011478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801147a:	2200      	movs	r2, #0
 801147c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 8011480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011482:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8011486:	4b07      	ldr	r3, [pc, #28]	; (80114a4 <rfalIsoDepPollBHandleActivation+0x230>)
 8011488:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 801148a:	79fb      	ldrb	r3, [r7, #7]
 801148c:	4618      	mov	r0, r3
 801148e:	f7ff fb4f 	bl	8010b30 <rfalIsoDepFSxI2FSx>
 8011492:	4603      	mov	r3, r0
 8011494:	461a      	mov	r2, r3
 8011496:	4b03      	ldr	r3, [pc, #12]	; (80114a4 <rfalIsoDepPollBHandleActivation+0x230>)
 8011498:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 801149a:	89fb      	ldrh	r3, [r7, #14]
}
 801149c:	4618      	mov	r0, r3
 801149e:	3714      	adds	r7, #20
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a4:	200032a0 	.word	0x200032a0

080114a8 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 80114a8:	b480      	push	{r7}
 80114aa:	b087      	sub	sp, #28
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60ba      	str	r2, [r7, #8]
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	4603      	mov	r3, r0
 80114b4:	73fb      	strb	r3, [r7, #15]
 80114b6:	460b      	mov	r3, r1
 80114b8:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 80114ba:	7bfb      	ldrb	r3, [r7, #15]
 80114bc:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 80114be:	2301      	movs	r3, #1
 80114c0:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	2200      	movs	r2, #0
 80114c6:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 80114ce:	7bbb      	ldrb	r3, [r7, #14]
 80114d0:	f003 0308 	and.w	r3, r3, #8
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f040 8083 	bne.w	80115e2 <rfalIsoDepCalcBitRate+0x13a>
 80114dc:	7d7b      	ldrb	r3, [r7, #21]
 80114de:	2b03      	cmp	r3, #3
 80114e0:	d87f      	bhi.n	80115e2 <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 80114e2:	7bbb      	ldrb	r3, [r7, #14]
 80114e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80114e8:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 80114ea:	2302      	movs	r3, #2
 80114ec:	75fb      	strb	r3, [r7, #23]
 80114ee:	e019      	b.n	8011524 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80114f0:	7d3a      	ldrb	r2, [r7, #20]
 80114f2:	7dfb      	ldrb	r3, [r7, #23]
 80114f4:	4619      	mov	r1, r3
 80114f6:	2310      	movs	r3, #16
 80114f8:	408b      	lsls	r3, r1
 80114fa:	4013      	ands	r3, r2
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00b      	beq.n	8011518 <rfalIsoDepCalcBitRate+0x70>
 8011500:	7dfb      	ldrb	r3, [r7, #23]
 8011502:	1c5a      	adds	r2, r3, #1
 8011504:	7d7b      	ldrb	r3, [r7, #21]
 8011506:	429a      	cmp	r2, r3
 8011508:	d806      	bhi.n	8011518 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	3301      	adds	r3, #1
 801150e:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	7cfa      	ldrb	r2, [r7, #19]
 8011514:	701a      	strb	r2, [r3, #0]
                break;
 8011516:	e009      	b.n	801152c <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8011518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801151c:	b2db      	uxtb	r3, r3
 801151e:	3b01      	subs	r3, #1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	75fb      	strb	r3, [r7, #23]
 8011524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011528:	2b00      	cmp	r3, #0
 801152a:	dae1      	bge.n	80114f0 <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 801152c:	7bbb      	ldrb	r3, [r7, #14]
 801152e:	f003 0307 	and.w	r3, r3, #7
 8011532:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8011534:	2302      	movs	r3, #2
 8011536:	75fb      	strb	r3, [r7, #23]
 8011538:	e018      	b.n	801156c <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 801153a:	7cbb      	ldrb	r3, [r7, #18]
 801153c:	7dfa      	ldrb	r2, [r7, #23]
 801153e:	40d3      	lsrs	r3, r2
 8011540:	f003 0301 	and.w	r3, r3, #1
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00b      	beq.n	8011560 <rfalIsoDepCalcBitRate+0xb8>
 8011548:	7dfb      	ldrb	r3, [r7, #23]
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	7d7b      	ldrb	r3, [r7, #21]
 801154e:	429a      	cmp	r2, r3
 8011550:	d806      	bhi.n	8011560 <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	3301      	adds	r3, #1
 8011556:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7c7a      	ldrb	r2, [r7, #17]
 801155c:	701a      	strb	r2, [r3, #0]
                break;
 801155e:	e009      	b.n	8011574 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8011560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011564:	b2db      	uxtb	r3, r3
 8011566:	3b01      	subs	r3, #1
 8011568:	b2db      	uxtb	r3, r3
 801156a:	75fb      	strb	r3, [r7, #23]
 801156c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011570:	2b00      	cmp	r3, #0
 8011572:	dae2      	bge.n	801153a <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 8011574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011578:	2b00      	cmp	r3, #0
 801157a:	da2a      	bge.n	80115d2 <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	781a      	ldrb	r2, [r3, #0]
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	4293      	cmp	r3, r2
 8011586:	bf28      	it	cs
 8011588:	4613      	movcs	r3, r2
 801158a:	b2da      	uxtb	r2, r3
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	781a      	ldrb	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d018      	beq.n	80115d2 <rfalIsoDepCalcBitRate+0x12a>
 80115a0:	7d3a      	ldrb	r2, [r7, #20]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	3b01      	subs	r3, #1
 80115a8:	2110      	movs	r1, #16
 80115aa:	fa01 f303 	lsl.w	r3, r1, r3
 80115ae:	4013      	ands	r3, r2
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d009      	beq.n	80115c8 <rfalIsoDepCalcBitRate+0x120>
 80115b4:	7cba      	ldrb	r2, [r7, #18]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	3b01      	subs	r3, #1
 80115bc:	fa22 f303 	lsr.w	r3, r2, r3
 80115c0:	f003 0301 	and.w	r3, r3, #1
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d104      	bne.n	80115d2 <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 80115c8:	2300      	movs	r3, #0
 80115ca:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 80115d2:	7dbb      	ldrb	r3, [r7, #22]
 80115d4:	f083 0301 	eor.w	r3, r3, #1
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f47f af6f 	bne.w	80114be <rfalIsoDepCalcBitRate+0x16>
 80115e0:	e000      	b.n	80115e4 <rfalIsoDepCalcBitRate+0x13c>
            return;
 80115e2:	bf00      	nop
    
}
 80115e4:	371c      	adds	r7, #28
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bc80      	pop	{r7}
 80115ea:	4770      	bx	lr

080115ec <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 80115ec:	b480      	push	{r7}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 80115fa:	7afb      	ldrb	r3, [r7, #11]
 80115fc:	2b0e      	cmp	r3, #14
 80115fe:	d901      	bls.n	8011604 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 8011600:	2300      	movs	r3, #0
 8011602:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 8011604:	7afb      	ldrb	r3, [r7, #11]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00b      	beq.n	8011622 <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 801160a:	79fb      	ldrb	r3, [r7, #7]
 801160c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011610:	409a      	lsls	r2, r3
 8011612:	79fb      	ldrb	r3, [r7, #7]
 8011614:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011618:	fa01 f303 	lsl.w	r3, r1, r3
 801161c:	4413      	add	r3, r2
 801161e:	60fb      	str	r3, [r7, #12]
 8011620:	e002      	b.n	8011628 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 8011622:	f641 237c 	movw	r3, #6780	; 0x1a7c
 8011626:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	4a05      	ldr	r2, [pc, #20]	; (8011640 <rfalIsoDepSFGI2SFGT+0x54>)
 801162c:	fba2 2303 	umull	r2, r3, r2, r3
 8011630:	0b1b      	lsrs	r3, r3, #12
 8011632:	3301      	adds	r3, #1
}
 8011634:	4618      	mov	r0, r3
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	bc80      	pop	{r7}
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	4d542005 	.word	0x4d542005

08011644 <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 8011644:	b084      	sub	sp, #16
 8011646:	b598      	push	{r3, r4, r7, lr}
 8011648:	af00      	add	r7, sp, #0
 801164a:	f107 0410 	add.w	r4, r7, #16
 801164e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 8011652:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8011656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011658:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 801165c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011660:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 8011662:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011666:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 8011668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166c:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 801166e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011672:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 8011674:	8abb      	ldrh	r3, [r7, #20]
 8011676:	461a      	mov	r2, r3
 8011678:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801167a:	1ad4      	subs	r4, r2, r3
 801167c:	f7ff fac6 	bl	8010c0c <rfalIsoDepGetMaxInfLen>
 8011680:	4603      	mov	r3, r0
 8011682:	429c      	cmp	r4, r3
 8011684:	dd09      	ble.n	801169a <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 8011686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011688:	2201      	movs	r2, #1
 801168a:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 801168c:	f7ff fabe 	bl	8010c0c <rfalIsoDepGetMaxInfLen>
 8011690:	4603      	mov	r3, r0
 8011692:	461a      	mov	r2, r3
 8011694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011696:	809a      	strh	r2, [r3, #4]
 8011698:	e008      	b.n	80116ac <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 801169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169c:	2200      	movs	r2, #0
 801169e:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 80116a0:	8aba      	ldrh	r2, [r7, #20]
 80116a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116aa:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 80116ac:	693a      	ldr	r2, [r7, #16]
 80116ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b0:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 80116b2:	6a3a      	ldr	r2, [r7, #32]
 80116b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b6:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 80116b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ba:	4a05      	ldr	r2, [pc, #20]	; (80116d0 <rfalIsoDepApdu2IBLockParam+0x8c>)
 80116bc:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 80116be:	69fa      	ldr	r2, [r7, #28]
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	60da      	str	r2, [r3, #12]
}
 80116c4:	bf00      	nop
 80116c6:	46bd      	mov	sp, r7
 80116c8:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80116cc:	b004      	add	sp, #16
 80116ce:	4770      	bx	lr
 80116d0:	20003324 	.word	0x20003324

080116d4 <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 80116d4:	b084      	sub	sp, #16
 80116d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d8:	b093      	sub	sp, #76	; 0x4c
 80116da:	af08      	add	r7, sp, #32
 80116dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80116e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 80116e4:	4b22      	ldr	r3, [pc, #136]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 80116e6:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80116ea:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80116ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116f6:	682b      	ldr	r3, [r5, #0]
 80116f8:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 80116fa:	4b1d      	ldr	r3, [pc, #116]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    gIsoDep.APDURxPos = 0;
 8011702:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 8011704:	2200      	movs	r2, #0
 8011706:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    
    /* Assign current FSx to calculate INF length */
    gIsoDep.ourFsx = param.ourFSx;
 801170a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801170e:	4b18      	ldr	r3, [pc, #96]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 8011710:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.fsx    = param.FSx;
 8011712:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8011716:	4b16      	ldr	r3, [pc, #88]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 8011718:	821a      	strh	r2, [r3, #16]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 801171a:	4b15      	ldr	r3, [pc, #84]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 801171c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8011720:	4a13      	ldr	r2, [pc, #76]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 8011722:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8011726:	4e12      	ldr	r6, [pc, #72]	; (8011770 <rfalIsoDepStartApduTransceive+0x9c>)
 8011728:	9207      	str	r2, [sp, #28]
 801172a:	9306      	str	r3, [sp, #24]
 801172c:	1d3b      	adds	r3, r7, #4
 801172e:	9305      	str	r3, [sp, #20]
 8011730:	466d      	mov	r5, sp
 8011732:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 8011736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801173a:	6823      	ldr	r3, [r4, #0]
 801173c:	602b      	str	r3, [r5, #0]
 801173e:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 8011742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011744:	f7ff ff7e 	bl	8011644 <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 8011748:	466d      	mov	r5, sp
 801174a:	f107 0414 	add.w	r4, r7, #20
 801174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	602b      	str	r3, [r5, #0]
 8011756:	1d3b      	adds	r3, r7, #4
 8011758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801175a:	f7ff fa7f 	bl	8010c5c <rfalIsoDepStartTransceive>
 801175e:	4603      	mov	r3, r0
}
 8011760:	4618      	mov	r0, r3
 8011762:	372c      	adds	r7, #44	; 0x2c
 8011764:	46bd      	mov	sp, r7
 8011766:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801176a:	b004      	add	sp, #16
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	200032a0 	.word	0x200032a0

08011774 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	b093      	sub	sp, #76	; 0x4c
 8011778:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 801177a:	f7ff fadb 	bl	8010d34 <rfalIsoDepGetTransceiveStatus>
 801177e:	4603      	mov	r3, r0
 8011780:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 8011782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <rfalIsoDepGetApduTransceiveStatus+0x1a>
 8011788:	2b0d      	cmp	r3, #13
 801178a:	d064      	beq.n	8011856 <rfalIsoDepGetApduTransceiveStatus+0xe2>
 801178c:	e085      	b.n	801189a <rfalIsoDepGetApduTransceiveStatus+0x126>
    {
        /*******************************************************************************/
        case ERR_NONE:
         
            /* Check if we are still doing chaining on Tx */
            if( gIsoDep.isTxChaining )
 801178e:	4b4a      	ldr	r3, [pc, #296]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011790:	7c9b      	ldrb	r3, [r3, #18]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d03e      	beq.n	8011814 <rfalIsoDepGetApduTransceiveStatus+0xa0>
            {
                /* Add already Tx bytes */
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 8011796:	4b48      	ldr	r3, [pc, #288]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011798:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 801179c:	4b46      	ldr	r3, [pc, #280]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801179e:	8b9b      	ldrh	r3, [r3, #28]
 80117a0:	4413      	add	r3, r2
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	4b44      	ldr	r3, [pc, #272]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117a6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                
                /* Convert APDU TxRxParams to I-Block TxRxParams */
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 80117aa:	4b43      	ldr	r3, [pc, #268]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117ac:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80117b0:	4a41      	ldr	r2, [pc, #260]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117b2:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80117b6:	4e40      	ldr	r6, [pc, #256]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117b8:	9207      	str	r2, [sp, #28]
 80117ba:	9306      	str	r3, [sp, #24]
 80117bc:	463b      	mov	r3, r7
 80117be:	9305      	str	r3, [sp, #20]
 80117c0:	466d      	mov	r5, sp
 80117c2:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 80117c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80117c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80117ca:	6823      	ldr	r3, [r4, #0]
 80117cc:	602b      	str	r3, [r5, #0]
 80117ce:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 80117d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80117d4:	f7ff ff36 	bl	8011644 <rfalIsoDepApdu2IBLockParam>
                
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 80117d8:	88bb      	ldrh	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00d      	beq.n	80117fa <rfalIsoDepGetApduTransceiveStatus+0x86>
                {
                    /* Move next I-Block to beginning of APDU Tx buffer */
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 80117de:	4b36      	ldr	r3, [pc, #216]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117e2:	1cd8      	adds	r0, r3, #3
 80117e4:	4b34      	ldr	r3, [pc, #208]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117e8:	4a33      	ldr	r2, [pc, #204]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117ea:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80117ee:	4413      	add	r3, r2
 80117f0:	3303      	adds	r3, #3
 80117f2:	88ba      	ldrh	r2, [r7, #4]
 80117f4:	4619      	mov	r1, r3
 80117f6:	f009 fe5d 	bl	801b4b4 <memcpy>
                }
                
                rfalIsoDepStartTransceive( txRxParam );
 80117fa:	466d      	mov	r5, sp
 80117fc:	f107 0410 	add.w	r4, r7, #16
 8011800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	602b      	str	r3, [r5, #0]
 8011808:	463b      	mov	r3, r7
 801180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801180c:	f7ff fa26 	bl	8010c5c <rfalIsoDepStartTransceive>
                return ERR_BUSY;
 8011810:	2302      	movs	r3, #2
 8011812:	e04c      	b.n	80118ae <rfalIsoDepGetApduTransceiveStatus+0x13a>
            }
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8011814:	4b28      	ldr	r3, [pc, #160]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011818:	881b      	ldrh	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d03f      	beq.n	801189e <rfalIsoDepGetApduTransceiveStatus+0x12a>
            {
                /* Copy packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 801181e:	4b26      	ldr	r3, [pc, #152]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011822:	4a25      	ldr	r2, [pc, #148]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011824:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8011828:	4413      	add	r3, r2
 801182a:	1cd8      	adds	r0, r3, #3
 801182c:	4b22      	ldr	r3, [pc, #136]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801182e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011830:	1cd9      	adds	r1, r3, #3
 8011832:	4b21      	ldr	r3, [pc, #132]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011836:	881b      	ldrh	r3, [r3, #0]
 8011838:	461a      	mov	r2, r3
 801183a:	f009 fe3b 	bl	801b4b4 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 801183e:	4b1e      	ldr	r3, [pc, #120]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011840:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8011844:	4b1c      	ldr	r3, [pc, #112]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	4413      	add	r3, r2
 801184c:	b29a      	uxth	r2, r3
 801184e:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011850:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
             
            /* APDU TxRx is done */
            break;
 8011854:	e023      	b.n	801189e <rfalIsoDepGetApduTransceiveStatus+0x12a>
         
        /*******************************************************************************/
        case ERR_AGAIN:
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8011856:	4b18      	ldr	r3, [pc, #96]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d01a      	beq.n	8011896 <rfalIsoDepGetApduTransceiveStatus+0x122>
            {
                /* Copy chained packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8011860:	4b15      	ldr	r3, [pc, #84]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011864:	4a14      	ldr	r2, [pc, #80]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011866:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801186a:	4413      	add	r3, r2
 801186c:	1cd8      	adds	r0, r3, #3
 801186e:	4b12      	ldr	r3, [pc, #72]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011872:	1cd9      	adds	r1, r3, #3
 8011874:	4b10      	ldr	r3, [pc, #64]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f009 fe1a 	bl	801b4b4 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 8011880:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011882:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8011886:	4b0c      	ldr	r3, [pc, #48]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	4413      	add	r3, r2
 801188e:	b29a      	uxth	r2, r3
 8011890:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011892:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
            
            /* Wait for next I-Block */
            return ERR_BUSY;
 8011896:	2302      	movs	r3, #2
 8011898:	e009      	b.n	80118ae <rfalIsoDepGetApduTransceiveStatus+0x13a>
        
        /*******************************************************************************/
        default:
            return ret;
 801189a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801189c:	e007      	b.n	80118ae <rfalIsoDepGetApduTransceiveStatus+0x13a>
            break;
 801189e:	bf00      	nop
    }
    
    *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 80118a0:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80118a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118a4:	4a04      	ldr	r2, [pc, #16]	; (80118b8 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80118a6:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80118aa:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 80118ac:	2300      	movs	r3, #0
 }
 80118ae:	4618      	mov	r0, r3
 80118b0:	372c      	adds	r7, #44	; 0x2c
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b6:	bf00      	nop
 80118b8:	200032a0 	.word	0x200032a0

080118bc <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 80118c2:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <rfalNfcInitialize+0x34>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 80118c8:	f7fd ff98 	bl	800f7fc <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 80118cc:	f006 f814 	bl	80178f8 <rfalInitialize>
 80118d0:	4603      	mov	r3, r0
 80118d2:	80fb      	strh	r3, [r7, #6]
 80118d4:	88fb      	ldrh	r3, [r7, #6]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <rfalNfcInitialize+0x22>
 80118da:	88fb      	ldrh	r3, [r7, #6]
 80118dc:	e003      	b.n	80118e6 <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 80118de:	4b04      	ldr	r3, [pc, #16]	; (80118f0 <rfalNfcInitialize+0x34>)
 80118e0:	2201      	movs	r2, #1
 80118e2:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	20003328 	.word	0x20003328

080118f4 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 80118fc:	4b42      	ldr	r3, [pc, #264]	; (8011a08 <rfalNfcDiscover+0x114>)
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	2b01      	cmp	r3, #1
 8011902:	d001      	beq.n	8011908 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 8011904:	2321      	movs	r3, #33	; 0x21
 8011906:	e07a      	b.n	80119fe <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d025      	beq.n	801195a <rfalNfcDiscover+0x66>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	799b      	ldrb	r3, [r3, #6]
 8011912:	2b05      	cmp	r3, #5
 8011914:	d821      	bhi.n	801195a <rfalNfcDiscover+0x66>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	799b      	ldrb	r3, [r3, #6]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d01d      	beq.n	801195a <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	885b      	ldrh	r3, [r3, #2]
 8011922:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8011926:	2b00      	cmp	r3, #0
 8011928:	d007      	beq.n	801193a <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	79db      	ldrb	r3, [r3, #7]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d003      	beq.n	801193a <rfalNfcDiscover+0x46>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	79db      	ldrb	r3, [r3, #7]
 8011936:	2b02      	cmp	r3, #2
 8011938:	d10f      	bne.n	801195a <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	885b      	ldrh	r3, [r3, #2]
 801193e:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8011942:	2b00      	cmp	r3, #0
 8011944:	d004      	beq.n	8011950 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801194c:	2b02      	cmp	r3, #2
 801194e:	d804      	bhi.n	801195a <rfalNfcDiscover+0x66>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011956:	2b30      	cmp	r3, #48	; 0x30
 8011958:	d901      	bls.n	801195e <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 801195a:	2307      	movs	r3, #7
 801195c:	e04f      	b.n	80119fe <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 801195e:	4b2a      	ldr	r3, [pc, #168]	; (8011a08 <rfalNfcDiscover+0x114>)
 8011960:	2200      	movs	r2, #0
 8011962:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 8011964:	4b28      	ldr	r3, [pc, #160]	; (8011a08 <rfalNfcDiscover+0x114>)
 8011966:	2200      	movs	r2, #0
 8011968:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 801196a:	4b27      	ldr	r3, [pc, #156]	; (8011a08 <rfalNfcDiscover+0x114>)
 801196c:	2200      	movs	r2, #0
 801196e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 8011972:	4b25      	ldr	r3, [pc, #148]	; (8011a08 <rfalNfcDiscover+0x114>)
 8011974:	2201      	movs	r2, #1
 8011976:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 801197a:	4b23      	ldr	r3, [pc, #140]	; (8011a08 <rfalNfcDiscover+0x114>)
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	330c      	adds	r3, #12
 8011980:	4611      	mov	r1, r2
 8011982:	2284      	movs	r2, #132	; 0x84
 8011984:	4618      	mov	r0, r3
 8011986:	f009 fd95 	bl	801b4b4 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 801198a:	4b1f      	ldr	r3, [pc, #124]	; (8011a08 <rfalNfcDiscover+0x114>)
 801198c:	2200      	movs	r2, #0
 801198e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8011992:	4b1d      	ldr	r3, [pc, #116]	; (8011a08 <rfalNfcDiscover+0x114>)
 8011994:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8011998:	4b1b      	ldr	r3, [pc, #108]	; (8011a08 <rfalNfcDiscover+0x114>)
 801199a:	89db      	ldrh	r3, [r3, #14]
 801199c:	089b      	lsrs	r3, r3, #2
 801199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80119a2:	4313      	orrs	r3, r2
 80119a4:	4a18      	ldr	r2, [pc, #96]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119a6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 80119aa:	4b17      	ldr	r3, [pc, #92]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119ac:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80119b0:	4b15      	ldr	r3, [pc, #84]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119b2:	89db      	ldrh	r3, [r3, #14]
 80119b4:	089b      	lsrs	r3, r3, #2
 80119b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119ba:	4313      	orrs	r3, r2
 80119bc:	4a12      	ldr	r2, [pc, #72]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119be:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 80119c2:	4b11      	ldr	r3, [pc, #68]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119c4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80119c8:	4b0f      	ldr	r3, [pc, #60]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119ca:	89db      	ldrh	r3, [r3, #14]
 80119cc:	089b      	lsrs	r3, r3, #2
 80119ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80119d2:	4313      	orrs	r3, r2
 80119d4:	4a0c      	ldr	r2, [pc, #48]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119d6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 80119da:	4b0b      	ldr	r3, [pc, #44]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119dc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80119e0:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119e2:	89db      	ldrh	r3, [r3, #14]
 80119e4:	b21b      	sxth	r3, r3
 80119e6:	109b      	asrs	r3, r3, #2
 80119e8:	b21b      	sxth	r3, r3
 80119ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80119ee:	4313      	orrs	r3, r2
 80119f0:	4a05      	ldr	r2, [pc, #20]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119f2:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 80119f6:	4b04      	ldr	r3, [pc, #16]	; (8011a08 <rfalNfcDiscover+0x114>)
 80119f8:	2202      	movs	r2, #2
 80119fa:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	20003328 	.word	0x20003328

08011a0c <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 8011a16:	4b0d      	ldr	r3, [pc, #52]	; (8011a4c <rfalNfcDeactivate+0x40>)
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d801      	bhi.n	8011a22 <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8011a1e:	2321      	movs	r3, #33	; 0x21
 8011a20:	e010      	b.n	8011a44 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 8011a22:	79fb      	ldrb	r3, [r7, #7]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d007      	beq.n	8011a38 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8011a28:	4a08      	ldr	r2, [pc, #32]	; (8011a4c <rfalNfcDeactivate+0x40>)
 8011a2a:	79fb      	ldrb	r3, [r7, #7]
 8011a2c:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8011a30:	4b06      	ldr	r3, [pc, #24]	; (8011a4c <rfalNfcDeactivate+0x40>)
 8011a32:	2222      	movs	r2, #34	; 0x22
 8011a34:	701a      	strb	r2, [r3, #0]
 8011a36:	e004      	b.n	8011a42 <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8011a38:	f001 fcc2 	bl	80133c0 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8011a3c:	4b03      	ldr	r3, [pc, #12]	; (8011a4c <rfalNfcDeactivate+0x40>)
 8011a3e:	2201      	movs	r2, #1
 8011a40:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	20003328 	.word	0x20003328

08011a50 <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 8011a50:	b480      	push	{r7}
 8011a52:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 8011a54:	4b02      	ldr	r3, [pc, #8]	; (8011a60 <rfalNfcGetState+0x10>)
 8011a56:	781b      	ldrb	r3, [r3, #0]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bc80      	pop	{r7}
 8011a5e:	4770      	bx	lr
 8011a60:	20003328 	.word	0x20003328

08011a64 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8011a6c:	4b0f      	ldr	r3, [pc, #60]	; (8011aac <rfalNfcGetActiveDevice+0x48>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	2b1d      	cmp	r3, #29
 8011a72:	d801      	bhi.n	8011a78 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 8011a74:	2321      	movs	r3, #33	; 0x21
 8011a76:	e014      	b.n	8011aa2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d101      	bne.n	8011a82 <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 8011a7e:	2307      	movs	r3, #7
 8011a80:	e00f      	b.n	8011aa2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 8011a82:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <rfalNfcGetActiveDevice+0x48>)
 8011a84:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d003      	beq.n	8011a94 <rfalNfcGetActiveDevice+0x30>
 8011a8c:	4b07      	ldr	r3, [pc, #28]	; (8011aac <rfalNfcGetActiveDevice+0x48>)
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 8011a94:	2305      	movs	r3, #5
 8011a96:	e004      	b.n	8011aa2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 8011a98:	4b04      	ldr	r3, [pc, #16]	; (8011aac <rfalNfcGetActiveDevice+0x48>)
 8011a9a:	689a      	ldr	r2, [r3, #8]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bc80      	pop	{r7}
 8011aaa:	4770      	bx	lr
 8011aac:	20003328 	.word	0x20003328

08011ab0 <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8011ab6:	f006 fe57 	bl	8018768 <rfalWorker>
    
    switch( gNfcDev.state )
 8011aba:	4bae      	ldr	r3, [pc, #696]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	2b22      	cmp	r3, #34	; 0x22
 8011ac0:	f200 81b6 	bhi.w	8011e30 <rfalNfcWorker+0x380>
 8011ac4:	a201      	add	r2, pc, #4	; (adr r2, 8011acc <rfalNfcWorker+0x1c>)
 8011ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aca:	bf00      	nop
 8011acc:	08011e31 	.word	0x08011e31
 8011ad0:	08011e31 	.word	0x08011e31
 8011ad4:	08011b59 	.word	0x08011b59
 8011ad8:	08011bc7 	.word	0x08011bc7
 8011adc:	08011e31 	.word	0x08011e31
 8011ae0:	08011e31 	.word	0x08011e31
 8011ae4:	08011e31 	.word	0x08011e31
 8011ae8:	08011e31 	.word	0x08011e31
 8011aec:	08011e31 	.word	0x08011e31
 8011af0:	08011e31 	.word	0x08011e31
 8011af4:	08011bf5 	.word	0x08011bf5
 8011af8:	08011c41 	.word	0x08011c41
 8011afc:	08011e31 	.word	0x08011e31
 8011b00:	08011c9d 	.word	0x08011c9d
 8011b04:	08011e31 	.word	0x08011e31
 8011b08:	08011e31 	.word	0x08011e31
 8011b0c:	08011e31 	.word	0x08011e31
 8011b10:	08011e31 	.word	0x08011e31
 8011b14:	08011e31 	.word	0x08011e31
 8011b18:	08011e31 	.word	0x08011e31
 8011b1c:	08011d55 	.word	0x08011d55
 8011b20:	08011dab 	.word	0x08011dab
 8011b24:	08011ddf 	.word	0x08011ddf
 8011b28:	08011ddf 	.word	0x08011ddf
 8011b2c:	08011e31 	.word	0x08011e31
 8011b30:	08011e31 	.word	0x08011e31
 8011b34:	08011e31 	.word	0x08011e31
 8011b38:	08011e31 	.word	0x08011e31
 8011b3c:	08011e31 	.word	0x08011e31
 8011b40:	08011e31 	.word	0x08011e31
 8011b44:	08011e31 	.word	0x08011e31
 8011b48:	08011cd3 	.word	0x08011cd3
 8011b4c:	08011e31 	.word	0x08011e31
 8011b50:	08011e31 	.word	0x08011e31
 8011b54:	08011d25 	.word	0x08011d25
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8011b58:	4b86      	ldr	r3, [pc, #536]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 8011b60:	4b84      	ldr	r3, [pc, #528]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8011b66:	4b83      	ldr	r3, [pc, #524]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8011b6c:	4b81      	ldr	r3, [pc, #516]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b6e:	89da      	ldrh	r2, [r3, #14]
 8011b70:	4b80      	ldr	r3, [pc, #512]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b72:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8011b74:	4b7f      	ldr	r3, [pc, #508]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b76:	220a      	movs	r2, #10
 8011b78:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8011b7a:	4b7e      	ldr	r3, [pc, #504]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b7c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 8157 	beq.w	8011e34 <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8011b86:	4b7b      	ldr	r3, [pc, #492]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011b88:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d001      	beq.n	8011b94 <rfalNfcWorker+0xe4>
 8011b90:	2300      	movs	r3, #0
 8011b92:	e000      	b.n	8011b96 <rfalNfcWorker+0xe6>
 8011b94:	4b78      	ldr	r3, [pc, #480]	; (8011d78 <rfalNfcWorker+0x2c8>)
 8011b96:	4618      	mov	r0, r3
 8011b98:	f008 fb2c 	bl	801a1f4 <rfalWakeUpModeStart>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8011ba0:	88fb      	ldrh	r3, [r7, #6]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f040 8146 	bne.w	8011e34 <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8011ba8:	4b72      	ldr	r3, [pc, #456]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011baa:	2203      	movs	r2, #3
 8011bac:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8011bae:	4b71      	ldr	r3, [pc, #452]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 813e 	beq.w	8011e34 <rfalNfcWorker+0x384>
 8011bb8:	4b6e      	ldr	r3, [pc, #440]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bbc:	4a6d      	ldr	r2, [pc, #436]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bbe:	7812      	ldrb	r2, [r2, #0]
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8011bc4:	e136      	b.n	8011e34 <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8011bc6:	f008 fce3 	bl	801a590 <rfalWakeUpModeHasWoke>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 8133 	beq.w	8011e38 <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8011bd2:	f008 fd2b 	bl	801a62c <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8011bd6:	4b67      	ldr	r3, [pc, #412]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bd8:	220a      	movs	r2, #10
 8011bda:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8011bdc:	4b65      	ldr	r3, [pc, #404]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 8129 	beq.w	8011e38 <rfalNfcWorker+0x388>
 8011be6:	4b63      	ldr	r3, [pc, #396]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bea:	4a62      	ldr	r2, [pc, #392]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bec:	7812      	ldrb	r2, [r2, #0]
 8011bee:	4610      	mov	r0, r2
 8011bf0:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 8011bf2:	e121      	b.n	8011e38 <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8011bf4:	4b5f      	ldr	r3, [pc, #380]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011bf6:	8a1b      	ldrh	r3, [r3, #16]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7f2 fd45 	bl	8004688 <timerCalculateTimer>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	4a5c      	ldr	r2, [pc, #368]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c02:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 8011c06:	f000 fad5 	bl	80121b4 <rfalNfcPollTechDetetection>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	f000 8113 	beq.w	8011e3c <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 8011c16:	88fb      	ldrh	r3, [r7, #6]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d103      	bne.n	8011c24 <rfalNfcWorker+0x174>
 8011c1c:	4b55      	ldr	r3, [pc, #340]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c1e:	885b      	ldrh	r3, [r3, #2]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d105      	bne.n	8011c30 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 8011c24:	f006 fb6e 	bl	8018304 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 8011c28:	4b52      	ldr	r3, [pc, #328]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c2a:	2214      	movs	r2, #20
 8011c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8011c2e:	e114      	b.n	8011e5a <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8011c30:	4b50      	ldr	r3, [pc, #320]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c32:	885a      	ldrh	r2, [r3, #2]
 8011c34:	4b4f      	ldr	r3, [pc, #316]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c36:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 8011c38:	4b4e      	ldr	r3, [pc, #312]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c3a:	220b      	movs	r2, #11
 8011c3c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011c3e:	e0fd      	b.n	8011e3c <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 8011c40:	f000 fc46 	bl	80124d0 <rfalNfcPollCollResolution>
 8011c44:	4603      	mov	r3, r0
 8011c46:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8011c48:	88fb      	ldrh	r3, [r7, #6]
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	f000 80f8 	beq.w	8011e40 <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8011c50:	88fb      	ldrh	r3, [r7, #6]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d104      	bne.n	8011c60 <rfalNfcWorker+0x1b0>
 8011c56:	4b47      	ldr	r3, [pc, #284]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c58:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d103      	bne.n	8011c68 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8011c60:	4b44      	ldr	r3, [pc, #272]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c62:	2222      	movs	r2, #34	; 0x22
 8011c64:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8011c66:	e0f8      	b.n	8011e5a <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8011c68:	4b42      	ldr	r3, [pc, #264]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c6a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d90d      	bls.n	8011c8e <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8011c72:	4b40      	ldr	r3, [pc, #256]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d009      	beq.n	8011c8e <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8011c7a:	4b3e      	ldr	r3, [pc, #248]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c7c:	220c      	movs	r2, #12
 8011c7e:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8011c80:	4b3c      	ldr	r3, [pc, #240]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c84:	4a3b      	ldr	r2, [pc, #236]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c86:	7812      	ldrb	r2, [r2, #0]
 8011c88:	4610      	mov	r0, r2
 8011c8a:	4798      	blx	r3
                        break;
 8011c8c:	e0e5      	b.n	8011e5a <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 8011c8e:	4b39      	ldr	r3, [pc, #228]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8011c94:	4b37      	ldr	r3, [pc, #220]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c96:	220d      	movs	r2, #13
 8011c98:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011c9a:	e0d1      	b.n	8011e40 <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 8011c9c:	4b35      	ldr	r3, [pc, #212]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011c9e:	79db      	ldrb	r3, [r3, #7]
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 fee3 	bl	8012a6c <rfalNfcPollActivation>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d003      	beq.n	8011cb4 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 8011cac:	4b31      	ldr	r3, [pc, #196]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cae:	2222      	movs	r2, #34	; 0x22
 8011cb0:	701a      	strb	r2, [r3, #0]
                break;
 8011cb2:	e0d2      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8011cb4:	4b2f      	ldr	r3, [pc, #188]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cb6:	221e      	movs	r2, #30
 8011cb8:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8011cba:	4b2e      	ldr	r3, [pc, #184]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f000 80c0 	beq.w	8011e44 <rfalNfcWorker+0x394>
 8011cc4:	4b2b      	ldr	r3, [pc, #172]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cc8:	4a2a      	ldr	r2, [pc, #168]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cca:	7812      	ldrb	r2, [r2, #0]
 8011ccc:	4610      	mov	r0, r2
 8011cce:	4798      	blx	r3
            break;
 8011cd0:	e0b8      	b.n	8011e44 <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 8011cd2:	f000 f9eb 	bl	80120ac <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8011cd6:	4b27      	ldr	r3, [pc, #156]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cd8:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8011cdc:	2b02      	cmp	r3, #2
 8011cde:	d00c      	beq.n	8011cfa <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8011ce0:	4b24      	ldr	r3, [pc, #144]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011ce2:	2221      	movs	r2, #33	; 0x21
 8011ce4:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8011ce6:	4b23      	ldr	r3, [pc, #140]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d005      	beq.n	8011cfa <rfalNfcWorker+0x24a>
 8011cee:	4b21      	ldr	r3, [pc, #132]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cf2:	4a20      	ldr	r2, [pc, #128]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cf4:	7812      	ldrb	r2, [r2, #0]
 8011cf6:	4610      	mov	r0, r2
 8011cf8:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 8011cfa:	4b1e      	ldr	r3, [pc, #120]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011cfc:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8011d00:	2b20      	cmp	r3, #32
 8011d02:	f040 80a1 	bne.w	8011e48 <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 8011d06:	4b1b      	ldr	r3, [pc, #108]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d08:	2217      	movs	r2, #23
 8011d0a:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8011d0c:	4b19      	ldr	r3, [pc, #100]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f000 8099 	beq.w	8011e48 <rfalNfcWorker+0x398>
 8011d16:	4b17      	ldr	r3, [pc, #92]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d1a:	4a16      	ldr	r2, [pc, #88]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d1c:	7812      	ldrb	r2, [r2, #0]
 8011d1e:	4610      	mov	r0, r2
 8011d20:	4798      	blx	r3
            }
            break;
 8011d22:	e091      	b.n	8011e48 <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 8011d24:	f001 fb4c 	bl	80133c0 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8011d28:	4b12      	ldr	r3, [pc, #72]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d2a:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <rfalNfcWorker+0x286>
 8011d32:	2202      	movs	r2, #2
 8011d34:	e000      	b.n	8011d38 <rfalNfcWorker+0x288>
 8011d36:	2201      	movs	r2, #1
 8011d38:	4b0e      	ldr	r3, [pc, #56]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d3a:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8011d3c:	4b0d      	ldr	r3, [pc, #52]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 8083 	beq.w	8011e4c <rfalNfcWorker+0x39c>
 8011d46:	4b0b      	ldr	r3, [pc, #44]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d4a:	4a0a      	ldr	r2, [pc, #40]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d4c:	7812      	ldrb	r2, [r2, #0]
 8011d4e:	4610      	mov	r0, r2
 8011d50:	4798      	blx	r3
            break;
 8011d52:	e07b      	b.n	8011e4c <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8011d54:	4b07      	ldr	r3, [pc, #28]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d56:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7f2 fca2 	bl	80046a4 <timerIsExpired>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00a      	beq.n	8011d7c <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 8011d66:	f008 f929 	bl	8019fbc <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8011d6a:	4b02      	ldr	r3, [pc, #8]	; (8011d74 <rfalNfcWorker+0x2c4>)
 8011d6c:	2202      	movs	r2, #2
 8011d6e:	701a      	strb	r2, [r3, #0]
                break;
 8011d70:	e073      	b.n	8011e5a <rfalNfcWorker+0x3aa>
 8011d72:	bf00      	nop
 8011d74:	20003328 	.word	0x20003328
 8011d78:	200033a2 	.word	0x200033a2
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 8011d7c:	4b38      	ldr	r3, [pc, #224]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011d7e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8011d82:	4b38      	ldr	r3, [pc, #224]	; (8011e64 <rfalNfcWorker+0x3b4>)
 8011d84:	9302      	str	r3, [sp, #8]
 8011d86:	23ff      	movs	r3, #255	; 0xff
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	4b37      	ldr	r3, [pc, #220]	; (8011e68 <rfalNfcWorker+0x3b8>)
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	4b37      	ldr	r3, [pc, #220]	; (8011e6c <rfalNfcWorker+0x3bc>)
 8011d90:	2200      	movs	r2, #0
 8011d92:	4937      	ldr	r1, [pc, #220]	; (8011e70 <rfalNfcWorker+0x3c0>)
 8011d94:	f007 ffac 	bl	8019cf0 <rfalListenStart>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 8011d9c:	88fb      	ldrh	r3, [r7, #6]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d156      	bne.n	8011e50 <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 8011da2:	4b2f      	ldr	r3, [pc, #188]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011da4:	2215      	movs	r2, #21
 8011da6:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011da8:	e052      	b.n	8011e50 <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 8011daa:	4b2d      	ldr	r3, [pc, #180]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011dac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7f2 fc77 	bl	80046a4 <timerIsExpired>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d005      	beq.n	8011dc8 <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 8011dbc:	f008 f8fe 	bl	8019fbc <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8011dc0:	4b27      	ldr	r3, [pc, #156]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011dc2:	2202      	movs	r2, #2
 8011dc4:	701a      	strb	r2, [r3, #0]
                break;
 8011dc6:	e048      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 8011dc8:	2100      	movs	r1, #0
 8011dca:	2000      	movs	r0, #0
 8011dcc:	f008 f922 	bl	801a014 <rfalListenGetState>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b01      	cmp	r3, #1
 8011dd4:	d93e      	bls.n	8011e54 <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 8011dd6:	4b22      	ldr	r3, [pc, #136]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011dd8:	2216      	movs	r2, #22
 8011dda:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011ddc:	e03a      	b.n	8011e54 <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 8011dde:	f001 f8f7 	bl	8012fd0 <rfalNfcListenActivation>
 8011de2:	4603      	mov	r3, r0
 8011de4:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 8011de6:	88fb      	ldrh	r3, [r7, #6]
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	d035      	beq.n	8011e58 <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 8011dec:	88fb      	ldrh	r3, [r7, #6]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d118      	bne.n	8011e24 <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 8011df2:	4b1b      	ldr	r3, [pc, #108]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011df4:	4a1f      	ldr	r2, [pc, #124]	; (8011e74 <rfalNfcWorker+0x3c4>)
 8011df6:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 8011df8:	4b19      	ldr	r3, [pc, #100]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011dfa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011dfe:	3301      	adds	r3, #1
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	4b17      	ldr	r3, [pc, #92]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e04:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 8011e08:	4b15      	ldr	r3, [pc, #84]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e0a:	221e      	movs	r2, #30
 8011e0c:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 8011e0e:	4b14      	ldr	r3, [pc, #80]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d020      	beq.n	8011e58 <rfalNfcWorker+0x3a8>
 8011e16:	4b12      	ldr	r3, [pc, #72]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e1a:	4a11      	ldr	r2, [pc, #68]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e1c:	7812      	ldrb	r2, [r2, #0]
 8011e1e:	4610      	mov	r0, r2
 8011e20:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 8011e22:	e019      	b.n	8011e58 <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 8011e24:	f008 f8ca 	bl	8019fbc <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 8011e28:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <rfalNfcWorker+0x3b0>)
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	701a      	strb	r2, [r3, #0]
            break;
 8011e2e:	e013      	b.n	8011e58 <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 8011e30:	bf00      	nop
 8011e32:	e012      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e34:	bf00      	nop
 8011e36:	e010      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e38:	bf00      	nop
 8011e3a:	e00e      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e3c:	bf00      	nop
 8011e3e:	e00c      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e40:	bf00      	nop
 8011e42:	e00a      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e44:	bf00      	nop
 8011e46:	e008      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e48:	bf00      	nop
 8011e4a:	e006      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e4c:	bf00      	nop
 8011e4e:	e004      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e50:	bf00      	nop
 8011e52:	e002      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e54:	bf00      	nop
 8011e56:	e000      	b.n	8011e5a <rfalNfcWorker+0x3aa>
            break;
 8011e58:	bf00      	nop
    }
}
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20003328 	.word	0x20003328
 8011e64:	20003826 	.word	0x20003826
 8011e68:	20003723 	.word	0x20003723
 8011e6c:	20003386 	.word	0x20003386
 8011e70:	20003378 	.word	0x20003378
 8011e74:	200033b8 	.word	0x200033b8

08011e78 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 8011e78:	b5b0      	push	{r4, r5, r7, lr}
 8011e7a:	b09c      	sub	sp, #112	; 0x70
 8011e7c:	af06      	add	r7, sp, #24
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	607a      	str	r2, [r7, #4]
 8011e82:	603b      	str	r3, [r7, #0]
 8011e84:	460b      	mov	r3, r1
 8011e86:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 8011e88:	4b7f      	ldr	r3, [pc, #508]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	2b1d      	cmp	r3, #29
 8011e8e:	f240 80f5 	bls.w	801207c <rfalNfcDataExchangeStart+0x204>
 8011e92:	4b7d      	ldr	r3, [pc, #500]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	f000 80f0 	beq.w	801207c <rfalNfcDataExchangeStart+0x204>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 8011e9c:	4b7a      	ldr	r3, [pc, #488]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	2b1e      	cmp	r3, #30
 8011ea2:	d124      	bne.n	8011eee <rfalNfcDataExchangeStart+0x76>
 8011ea4:	4b78      	ldr	r3, [pc, #480]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b09      	cmp	r3, #9
 8011eac:	d91f      	bls.n	8011eee <rfalNfcDataExchangeStart+0x76>
 8011eae:	4b76      	ldr	r3, [pc, #472]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	2b0f      	cmp	r3, #15
 8011eb6:	d81a      	bhi.n	8011eee <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 8011eb8:	897b      	ldrh	r3, [r7, #10]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d001      	beq.n	8011ec2 <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 8011ebe:	2321      	movs	r3, #33	; 0x21
 8011ec0:	e0dd      	b.n	801207e <rfalNfcDataExchangeStart+0x206>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	4a71      	ldr	r2, [pc, #452]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8011ec6:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8011ec8:	4b6f      	ldr	r3, [pc, #444]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	7f5b      	ldrb	r3, [r3, #29]
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d008      	beq.n	8011ee4 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 8011ed2:	4b6d      	ldr	r3, [pc, #436]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	7f5b      	ldrb	r3, [r3, #29]
 8011ed8:	2b02      	cmp	r3, #2
 8011eda:	d101      	bne.n	8011ee0 <rfalNfcDataExchangeStart+0x68>
 8011edc:	4b6c      	ldr	r3, [pc, #432]	; (8012090 <rfalNfcDataExchangeStart+0x218>)
 8011ede:	e002      	b.n	8011ee6 <rfalNfcDataExchangeStart+0x6e>
 8011ee0:	4b6c      	ldr	r3, [pc, #432]	; (8012094 <rfalNfcDataExchangeStart+0x21c>)
 8011ee2:	e000      	b.n	8011ee6 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8011ee4:	4b6c      	ldr	r3, [pc, #432]	; (8012098 <rfalNfcDataExchangeStart+0x220>)
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 8011eea:	2300      	movs	r3, #0
 8011eec:	e0c7      	b.n	801207e <rfalNfcDataExchangeStart+0x206>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 8011eee:	4b66      	ldr	r3, [pc, #408]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	7f5b      	ldrb	r3, [r3, #29]
 8011ef4:	2b02      	cmp	r3, #2
 8011ef6:	d065      	beq.n	8011fc4 <rfalNfcDataExchangeStart+0x14c>
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	f300 80ad 	bgt.w	8012058 <rfalNfcDataExchangeStart+0x1e0>
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d002      	beq.n	8011f08 <rfalNfcDataExchangeStart+0x90>
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d021      	beq.n	8011f4a <rfalNfcDataExchangeStart+0xd2>
 8011f06:	e0a7      	b.n	8012058 <rfalNfcDataExchangeStart+0x1e0>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f0c:	897b      	ldrh	r3, [r7, #10]
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011f14:	4b5f      	ldr	r3, [pc, #380]	; (8012094 <rfalNfcDataExchangeStart+0x21c>)
 8011f16:	643b      	str	r3, [r7, #64]	; 0x40
 8011f18:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8011f1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011f20:	4b5a      	ldr	r3, [pc, #360]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8011f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f24:	2300      	movs	r3, #0
 8011f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f2a:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	4a59      	ldr	r2, [pc, #356]	; (8012094 <rfalNfcDataExchangeStart+0x21c>)
 8011f30:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	4a55      	ldr	r2, [pc, #340]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8011f36:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 8011f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f006 f9f7 	bl	8018330 <rfalStartTransceive>
 8011f42:	4603      	mov	r3, r0
 8011f44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011f48:	e08a      	b.n	8012060 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 8011f4a:	897b      	ldrh	r3, [r7, #10]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d005      	beq.n	8011f5c <rfalNfcDataExchangeStart+0xe4>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 8011f50:	897b      	ldrh	r3, [r7, #10]
 8011f52:	461a      	mov	r2, r3
 8011f54:	68f9      	ldr	r1, [r7, #12]
 8011f56:	4851      	ldr	r0, [pc, #324]	; (801209c <rfalNfcDataExchangeStart+0x224>)
 8011f58:	f009 faac 	bl	801b4b4 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 8011f62:	23ff      	movs	r3, #255	; 0xff
 8011f64:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 8011f66:	4b48      	ldr	r3, [pc, #288]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f6e:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 8011f70:	4b45      	ldr	r3, [pc, #276]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011f72:	689b      	ldr	r3, [r3, #8]
 8011f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f76:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 8011f78:	4b43      	ldr	r3, [pc, #268]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f7e:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 8011f80:	4b47      	ldr	r3, [pc, #284]	; (80120a0 <rfalNfcDataExchangeStart+0x228>)
 8011f82:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 8011f84:	897b      	ldrh	r3, [r7, #10]
 8011f86:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 8011f8c:	4b41      	ldr	r3, [pc, #260]	; (8012094 <rfalNfcDataExchangeStart+0x21c>)
 8011f8e:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 8011f90:	4b3e      	ldr	r3, [pc, #248]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8011f92:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8011f94:	4b43      	ldr	r3, [pc, #268]	; (80120a4 <rfalNfcDataExchangeStart+0x22c>)
 8011f96:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4a3f      	ldr	r2, [pc, #252]	; (8012098 <rfalNfcDataExchangeStart+0x220>)
 8011f9c:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	4a3a      	ldr	r2, [pc, #232]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8011fa2:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 8011fa4:	466d      	mov	r5, sp
 8011fa6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8011faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	602b      	str	r3, [r5, #0]
 8011fb2:	f107 0314 	add.w	r3, r7, #20
 8011fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fb8:	f7fe fe50 	bl	8010c5c <rfalIsoDepStartTransceive>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011fc2:	e04d      	b.n	8012060 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 8011fc4:	897b      	ldrh	r3, [r7, #10]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d005      	beq.n	8011fd6 <rfalNfcDataExchangeStart+0x15e>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 8011fca:	897b      	ldrh	r3, [r7, #10]
 8011fcc:	461a      	mov	r2, r3
 8011fce:	68f9      	ldr	r1, [r7, #12]
 8011fd0:	4835      	ldr	r0, [pc, #212]	; (80120a8 <rfalNfcDataExchangeStart+0x230>)
 8011fd2:	f009 fa6f 	bl	801b4b4 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 8011fd6:	23ff      	movs	r3, #255	; 0xff
 8011fd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8011fdc:	4b2a      	ldr	r3, [pc, #168]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011fde:	689b      	ldr	r3, [r3, #8]
 8011fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fe4:	091b      	lsrs	r3, r3, #4
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	f003 0303 	and.w	r3, r3, #3
 8011fec:	3301      	adds	r3, #1
 8011fee:	019b      	lsls	r3, r3, #6
 8011ff0:	2bfd      	cmp	r3, #253	; 0xfd
 8011ff2:	d80c      	bhi.n	801200e <rfalNfcDataExchangeStart+0x196>
 8011ff4:	4b24      	ldr	r3, [pc, #144]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ffc:	091b      	lsrs	r3, r3, #4
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	f003 0303 	and.w	r3, r3, #3
 8012004:	3301      	adds	r3, #1
 8012006:	b29b      	uxth	r3, r3
 8012008:	019b      	lsls	r3, r3, #6
 801200a:	b29b      	uxth	r3, r3
 801200c:	e000      	b.n	8012010 <rfalNfcDataExchangeStart+0x198>
 801200e:	23fe      	movs	r3, #254	; 0xfe
 8012010:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8012012:	4b1d      	ldr	r3, [pc, #116]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012018:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 801201a:	4b1b      	ldr	r3, [pc, #108]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012020:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8012022:	4b1f      	ldr	r3, [pc, #124]	; (80120a0 <rfalNfcDataExchangeStart+0x228>)
 8012024:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 8012026:	897b      	ldrh	r3, [r7, #10]
 8012028:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 801202a:	2300      	movs	r3, #0
 801202c:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 801202e:	4b19      	ldr	r3, [pc, #100]	; (8012094 <rfalNfcDataExchangeStart+0x21c>)
 8012030:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 8012032:	4b16      	ldr	r3, [pc, #88]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8012034:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8012036:	4b1b      	ldr	r3, [pc, #108]	; (80120a4 <rfalNfcDataExchangeStart+0x22c>)
 8012038:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4a14      	ldr	r2, [pc, #80]	; (8012090 <rfalNfcDataExchangeStart+0x218>)
 801203e:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	4a12      	ldr	r2, [pc, #72]	; (801208c <rfalNfcDataExchangeStart+0x214>)
 8012044:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 8012046:	f107 0314 	add.w	r3, r7, #20
 801204a:	4618      	mov	r0, r3
 801204c:	f003 fb64 	bl	8015718 <rfalNfcDepStartTransceive>
 8012050:	4603      	mov	r3, r0
 8012052:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8012056:	e003      	b.n	8012060 <rfalNfcDataExchangeStart+0x1e8>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 8012058:	2307      	movs	r3, #7
 801205a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 801205e:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 8012060:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012064:	2b00      	cmp	r3, #0
 8012066:	d106      	bne.n	8012076 <rfalNfcDataExchangeStart+0x1fe>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 8012068:	4b07      	ldr	r3, [pc, #28]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 801206a:	2202      	movs	r2, #2
 801206c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8012070:	4b05      	ldr	r3, [pc, #20]	; (8012088 <rfalNfcDataExchangeStart+0x210>)
 8012072:	221f      	movs	r2, #31
 8012074:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 8012076:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801207a:	e000      	b.n	801207e <rfalNfcDataExchangeStart+0x206>
    }
    
    return ERR_WRONG_STATE;
 801207c:	2321      	movs	r3, #33	; 0x21
}
 801207e:	4618      	mov	r0, r3
 8012080:	3758      	adds	r7, #88	; 0x58
 8012082:	46bd      	mov	sp, r7
 8012084:	bdb0      	pop	{r4, r5, r7, pc}
 8012086:	bf00      	nop
 8012088:	20003328 	.word	0x20003328
 801208c:	20003826 	.word	0x20003826
 8012090:	20003728 	.word	0x20003728
 8012094:	20003723 	.word	0x20003723
 8012098:	20003726 	.word	0x20003726
 801209c:	20003623 	.word	0x20003623
 80120a0:	20003620 	.word	0x20003620
 80120a4:	2000361b 	.word	0x2000361b
 80120a8:	20003625 	.word	0x20003625

080120ac <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 80120b0:	4b3d      	ldr	r3, [pc, #244]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	2b1e      	cmp	r3, #30
 80120b6:	d114      	bne.n	80120e2 <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 80120b8:	4b3b      	ldr	r3, [pc, #236]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120ba:	2202      	movs	r2, #2
 80120bc:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 80120c0:	4b39      	ldr	r3, [pc, #228]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120c2:	221f      	movs	r2, #31
 80120c4:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 80120c6:	4b38      	ldr	r3, [pc, #224]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	2b0c      	cmp	r3, #12
 80120ce:	d108      	bne.n	80120e2 <rfalNfcDataExchangeGetStatus+0x36>
 80120d0:	4b35      	ldr	r3, [pc, #212]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	7f5b      	ldrb	r3, [r3, #29]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d103      	bne.n	80120e2 <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 80120da:	4b33      	ldr	r3, [pc, #204]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120dc:	2200      	movs	r2, #0
 80120de:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 80120e2:	4b31      	ldr	r3, [pc, #196]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2b17      	cmp	r3, #23
 80120e8:	d103      	bne.n	80120f2 <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 80120ea:	4b2f      	ldr	r3, [pc, #188]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120ec:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80120f0:	e057      	b.n	80121a2 <rfalNfcDataExchangeGetStatus+0xf6>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 80120f2:	4b2d      	ldr	r3, [pc, #180]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	2b1f      	cmp	r3, #31
 80120f8:	d005      	beq.n	8012106 <rfalNfcDataExchangeGetStatus+0x5a>
 80120fa:	4b2b      	ldr	r3, [pc, #172]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	2b21      	cmp	r3, #33	; 0x21
 8012100:	d001      	beq.n	8012106 <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 8012102:	2321      	movs	r3, #33	; 0x21
 8012104:	e04d      	b.n	80121a2 <rfalNfcDataExchangeGetStatus+0xf6>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 8012106:	4b28      	ldr	r3, [pc, #160]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012108:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 801210c:	2b02      	cmp	r3, #2
 801210e:	d145      	bne.n	801219c <rfalNfcDataExchangeGetStatus+0xf0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8012110:	4b25      	ldr	r3, [pc, #148]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	7f5b      	ldrb	r3, [r3, #29]
 8012116:	2b02      	cmp	r3, #2
 8012118:	d016      	beq.n	8012148 <rfalNfcDataExchangeGetStatus+0x9c>
 801211a:	2b02      	cmp	r3, #2
 801211c:	dc1c      	bgt.n	8012158 <rfalNfcDataExchangeGetStatus+0xac>
 801211e:	2b00      	cmp	r3, #0
 8012120:	d002      	beq.n	8012128 <rfalNfcDataExchangeGetStatus+0x7c>
 8012122:	2b01      	cmp	r3, #1
 8012124:	d008      	beq.n	8012138 <rfalNfcDataExchangeGetStatus+0x8c>
 8012126:	e017      	b.n	8012158 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8012128:	f006 fb0e 	bl	8018748 <rfalGetTransceiveStatus>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	4b1d      	ldr	r3, [pc, #116]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012132:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8012136:	e014      	b.n	8012162 <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 8012138:	f7fe fdfc 	bl	8010d34 <rfalIsoDepGetTransceiveStatus>
 801213c:	4603      	mov	r3, r0
 801213e:	461a      	mov	r2, r3
 8012140:	4b19      	ldr	r3, [pc, #100]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012142:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8012146:	e00c      	b.n	8012162 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 8012148:	f003 fb1c 	bl	8015784 <rfalNfcDepGetTransceiveStatus>
 801214c:	4603      	mov	r3, r0
 801214e:	461a      	mov	r2, r3
 8012150:	4b15      	ldr	r3, [pc, #84]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012152:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8012156:	e004      	b.n	8012162 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 8012158:	4b13      	ldr	r3, [pc, #76]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 801215a:	2207      	movs	r2, #7
 801215c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8012160:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 8012162:	4b11      	ldr	r3, [pc, #68]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012164:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8012168:	2b20      	cmp	r3, #32
 801216a:	d117      	bne.n	801219c <rfalNfcDataExchangeGetStatus+0xf0>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 801216c:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <rfalNfcDataExchangeGetStatus+0x100>)
 801216e:	22ff      	movs	r2, #255	; 0xff
 8012170:	490f      	ldr	r1, [pc, #60]	; (80121b0 <rfalNfcDataExchangeGetStatus+0x104>)
 8012172:	200c      	movs	r0, #12
 8012174:	f007 ff3e 	bl	8019ff4 <rfalListenSleepStart>
 8012178:	4603      	mov	r3, r0
 801217a:	461a      	mov	r2, r3
 801217c:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 801217e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 8012182:	4b09      	ldr	r3, [pc, #36]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012184:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d003      	beq.n	8012194 <rfalNfcDataExchangeGetStatus+0xe8>
 801218c:	4b06      	ldr	r3, [pc, #24]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 801218e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8012192:	e006      	b.n	80121a2 <rfalNfcDataExchangeGetStatus+0xf6>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 8012194:	4b04      	ldr	r3, [pc, #16]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012196:	2220      	movs	r2, #32
 8012198:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 801219c:	4b02      	ldr	r3, [pc, #8]	; (80121a8 <rfalNfcDataExchangeGetStatus+0xfc>)
 801219e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20003328 	.word	0x20003328
 80121ac:	20003826 	.word	0x20003826
 80121b0:	20003723 	.word	0x20003723

080121b4 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08a      	sub	sp, #40	; 0x28
 80121b8:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 80121ba:	2300      	movs	r3, #0
 80121bc:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 80121be:	4b9a      	ldr	r3, [pc, #616]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121c0:	89db      	ldrh	r3, [r3, #14]
 80121c2:	f003 0310 	and.w	r3, r3, #16
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d05a      	beq.n	8012280 <rfalNfcPollTechDetetection+0xcc>
 80121ca:	4b97      	ldr	r3, [pc, #604]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121cc:	889b      	ldrh	r3, [r3, #4]
 80121ce:	f003 0310 	and.w	r3, r3, #16
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d054      	beq.n	8012280 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 80121d6:	4b94      	ldr	r3, [pc, #592]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121d8:	889b      	ldrh	r3, [r3, #4]
 80121da:	f023 0310 	bic.w	r3, r3, #16
 80121de:	b29a      	uxth	r2, r3
 80121e0:	4b91      	ldr	r3, [pc, #580]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121e2:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 80121e4:	4b90      	ldr	r3, [pc, #576]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121e6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80121ea:	4a8f      	ldr	r2, [pc, #572]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80121ec:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 80121f0:	4619      	mov	r1, r3
 80121f2:	2009      	movs	r0, #9
 80121f4:	f005 fc24 	bl	8017a40 <rfalSetMode>
 80121f8:	4603      	mov	r3, r0
 80121fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80121fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <rfalNfcPollTechDetetection+0x52>
 8012202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012204:	e15d      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8012206:	2001      	movs	r0, #1
 8012208:	f005 ffb6 	bl	8018178 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 801220c:	2040      	movs	r0, #64	; 0x40
 801220e:	f005 ffd7 	bl	80181c0 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 8012212:	2000      	movs	r0, #0
 8012214:	f005 ffc0 	bl	8018198 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 8012218:	4884      	ldr	r0, [pc, #528]	; (801242c <rfalNfcPollTechDetetection+0x278>)
 801221a:	f005 ffe5 	bl	80181e8 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 801221e:	f006 f80f 	bl	8018240 <rfalFieldOnAndStartGT>
 8012222:	4603      	mov	r3, r0
 8012224:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <rfalNfcPollTechDetetection+0x7c>
 801222c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801222e:	e148      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 8012230:	2300      	movs	r3, #0
 8012232:	2200      	movs	r2, #0
 8012234:	2101      	movs	r1, #1
 8012236:	487e      	ldr	r0, [pc, #504]	; (8012430 <rfalNfcPollTechDetetection+0x27c>)
 8012238:	f001 f81e 	bl	8013278 <rfalNfcNfcDepActivate>
 801223c:	4603      	mov	r3, r0
 801223e:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8012240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012242:	2b00      	cmp	r3, #0
 8012244:	d118      	bne.n	8012278 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 8012246:	4b78      	ldr	r3, [pc, #480]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	f043 0310 	orr.w	r3, r3, #16
 801224e:	b29a      	uxth	r2, r3
 8012250:	4b75      	ldr	r3, [pc, #468]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012252:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 8012254:	4b74      	ldr	r3, [pc, #464]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012256:	2205      	movs	r2, #5
 8012258:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 801225c:	4b72      	ldr	r3, [pc, #456]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801225e:	2202      	movs	r2, #2
 8012260:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 8012264:	4b70      	ldr	r3, [pc, #448]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012266:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801226a:	3301      	adds	r3, #1
 801226c:	b2da      	uxtb	r2, r3
 801226e:	4b6e      	ldr	r3, [pc, #440]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012270:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 8012274:	2300      	movs	r3, #0
 8012276:	e124      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 8012278:	f006 f844 	bl	8018304 <rfalFieldOff>
        return ERR_BUSY;
 801227c:	2302      	movs	r3, #2
 801227e:	e120      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 8012280:	4b69      	ldr	r3, [pc, #420]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012282:	89db      	ldrh	r3, [r3, #14]
 8012284:	f003 0301 	and.w	r3, r3, #1
 8012288:	2b00      	cmp	r3, #0
 801228a:	d034      	beq.n	80122f6 <rfalNfcPollTechDetetection+0x142>
 801228c:	4b66      	ldr	r3, [pc, #408]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801228e:	889b      	ldrh	r3, [r3, #4]
 8012290:	f003 0301 	and.w	r3, r3, #1
 8012294:	2b00      	cmp	r3, #0
 8012296:	d02e      	beq.n	80122f6 <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8012298:	4b63      	ldr	r3, [pc, #396]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801229a:	889b      	ldrh	r3, [r3, #4]
 801229c:	f023 0301 	bic.w	r3, r3, #1
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	4b61      	ldr	r3, [pc, #388]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80122a4:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 80122a6:	f003 fa9d 	bl	80157e4 <rfalNfcaPollerInitialize>
 80122aa:	4603      	mov	r3, r0
 80122ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d001      	beq.n	80122b8 <rfalNfcPollTechDetetection+0x104>
 80122b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122b6:	e104      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 80122b8:	f005 ffc2 	bl	8018240 <rfalFieldOnAndStartGT>
 80122bc:	4603      	mov	r3, r0
 80122be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <rfalNfcPollTechDetetection+0x116>
 80122c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122c8:	e0fb      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 80122ca:	4b57      	ldr	r3, [pc, #348]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80122cc:	7b1b      	ldrb	r3, [r3, #12]
 80122ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80122d2:	4611      	mov	r1, r2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f003 fad1 	bl	801587c <rfalNfcaPollerTechnologyDetection>
 80122da:	4603      	mov	r3, r0
 80122dc:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80122de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d106      	bne.n	80122f2 <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 80122e4:	4b50      	ldr	r3, [pc, #320]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80122e6:	885b      	ldrh	r3, [r3, #2]
 80122e8:	f043 0301 	orr.w	r3, r3, #1
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	4b4e      	ldr	r3, [pc, #312]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80122f0:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 80122f2:	2302      	movs	r3, #2
 80122f4:	e0e5      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 80122f6:	4b4c      	ldr	r3, [pc, #304]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80122f8:	89db      	ldrh	r3, [r3, #14]
 80122fa:	f003 0302 	and.w	r3, r3, #2
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d035      	beq.n	801236e <rfalNfcPollTechDetetection+0x1ba>
 8012302:	4b49      	ldr	r3, [pc, #292]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012304:	889b      	ldrh	r3, [r3, #4]
 8012306:	f003 0302 	and.w	r3, r3, #2
 801230a:	2b00      	cmp	r3, #0
 801230c:	d02f      	beq.n	801236e <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 801230e:	4b46      	ldr	r3, [pc, #280]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012310:	889b      	ldrh	r3, [r3, #4]
 8012312:	f023 0302 	bic.w	r3, r3, #2
 8012316:	b29a      	uxth	r2, r3
 8012318:	4b43      	ldr	r3, [pc, #268]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801231a:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 801231c:	f003 fe7e 	bl	801601c <rfalNfcbPollerInitialize>
 8012320:	4603      	mov	r3, r0
 8012322:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <rfalNfcPollTechDetetection+0x17a>
 801232a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801232c:	e0c9      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 801232e:	f005 ff87 	bl	8018240 <rfalFieldOnAndStartGT>
 8012332:	4603      	mov	r3, r0
 8012334:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012338:	2b00      	cmp	r3, #0
 801233a:	d001      	beq.n	8012340 <rfalNfcPollTechDetetection+0x18c>
 801233c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801233e:	e0c0      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 8012340:	4b39      	ldr	r3, [pc, #228]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012342:	7b1b      	ldrb	r3, [r3, #12]
 8012344:	f107 0213 	add.w	r2, r7, #19
 8012348:	f107 0114 	add.w	r1, r7, #20
 801234c:	4618      	mov	r0, r3
 801234e:	f003 ff77 	bl	8016240 <rfalNfcbPollerTechnologyDetection>
 8012352:	4603      	mov	r3, r0
 8012354:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8012356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012358:	2b00      	cmp	r3, #0
 801235a:	d106      	bne.n	801236a <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 801235c:	4b32      	ldr	r3, [pc, #200]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801235e:	885b      	ldrh	r3, [r3, #2]
 8012360:	f043 0302 	orr.w	r3, r3, #2
 8012364:	b29a      	uxth	r2, r3
 8012366:	4b30      	ldr	r3, [pc, #192]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012368:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 801236a:	2302      	movs	r3, #2
 801236c:	e0a9      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 801236e:	4b2e      	ldr	r3, [pc, #184]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012370:	89db      	ldrh	r3, [r3, #14]
 8012372:	f003 0304 	and.w	r3, r3, #4
 8012376:	2b00      	cmp	r3, #0
 8012378:	d031      	beq.n	80123de <rfalNfcPollTechDetetection+0x22a>
 801237a:	4b2b      	ldr	r3, [pc, #172]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 801237c:	889b      	ldrh	r3, [r3, #4]
 801237e:	f003 0304 	and.w	r3, r3, #4
 8012382:	2b00      	cmp	r3, #0
 8012384:	d02b      	beq.n	80123de <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8012386:	4b28      	ldr	r3, [pc, #160]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012388:	889b      	ldrh	r3, [r3, #4]
 801238a:	f023 0304 	bic.w	r3, r3, #4
 801238e:	b29a      	uxth	r2, r3
 8012390:	4b25      	ldr	r3, [pc, #148]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012392:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8012394:	4b24      	ldr	r3, [pc, #144]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012396:	7cdb      	ldrb	r3, [r3, #19]
 8012398:	4618      	mov	r0, r3
 801239a:	f004 fa13 	bl	80167c4 <rfalNfcfPollerInitialize>
 801239e:	4603      	mov	r3, r0
 80123a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80123a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <rfalNfcPollTechDetetection+0x1f8>
 80123a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123aa:	e08a      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80123ac:	f005 ff48 	bl	8018240 <rfalFieldOnAndStartGT>
 80123b0:	4603      	mov	r3, r0
 80123b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80123b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d001      	beq.n	80123be <rfalNfcPollTechDetetection+0x20a>
 80123ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123bc:	e081      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 80123be:	f004 fa4f 	bl	8016860 <rfalNfcfPollerCheckPresence>
 80123c2:	4603      	mov	r3, r0
 80123c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 80123c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d106      	bne.n	80123da <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 80123cc:	4b16      	ldr	r3, [pc, #88]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80123ce:	885b      	ldrh	r3, [r3, #2]
 80123d0:	f043 0304 	orr.w	r3, r3, #4
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	4b14      	ldr	r3, [pc, #80]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80123d8:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 80123da:	2302      	movs	r3, #2
 80123dc:	e071      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 80123de:	4b12      	ldr	r3, [pc, #72]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80123e0:	89db      	ldrh	r3, [r3, #14]
 80123e2:	f003 0308 	and.w	r3, r3, #8
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d036      	beq.n	8012458 <rfalNfcPollTechDetetection+0x2a4>
 80123ea:	4b0f      	ldr	r3, [pc, #60]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80123ec:	889b      	ldrh	r3, [r3, #4]
 80123ee:	f003 0308 	and.w	r3, r3, #8
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d030      	beq.n	8012458 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80123f6:	4b0c      	ldr	r3, [pc, #48]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 80123f8:	889b      	ldrh	r3, [r3, #4]
 80123fa:	f023 0308 	bic.w	r3, r3, #8
 80123fe:	b29a      	uxth	r2, r3
 8012400:	4b09      	ldr	r3, [pc, #36]	; (8012428 <rfalNfcPollTechDetetection+0x274>)
 8012402:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 8012404:	f004 fd58 	bl	8016eb8 <rfalNfcvPollerInitialize>
 8012408:	4603      	mov	r3, r0
 801240a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801240c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801240e:	2b00      	cmp	r3, #0
 8012410:	d001      	beq.n	8012416 <rfalNfcPollTechDetetection+0x262>
 8012412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012414:	e055      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8012416:	f005 ff13 	bl	8018240 <rfalFieldOnAndStartGT>
 801241a:	4603      	mov	r3, r0
 801241c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801241e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012420:	2b00      	cmp	r3, #0
 8012422:	d007      	beq.n	8012434 <rfalNfcPollTechDetetection+0x280>
 8012424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012426:	e04c      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
 8012428:	20003328 	.word	0x20003328
 801242c:	00063510 	.word	0x00063510
 8012430:	200033b8 	.word	0x200033b8
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 8012434:	1d3b      	adds	r3, r7, #4
 8012436:	4618      	mov	r0, r3
 8012438:	f004 fd62 	bl	8016f00 <rfalNfcvPollerCheckPresence>
 801243c:	4603      	mov	r3, r0
 801243e:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8012440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <rfalNfcPollTechDetetection+0x2a0>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 8012446:	4b21      	ldr	r3, [pc, #132]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 8012448:	885b      	ldrh	r3, [r3, #2]
 801244a:	f043 0308 	orr.w	r3, r3, #8
 801244e:	b29a      	uxth	r2, r3
 8012450:	4b1e      	ldr	r3, [pc, #120]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 8012452:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8012454:	2302      	movs	r3, #2
 8012456:	e034      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8012458:	4b1c      	ldr	r3, [pc, #112]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 801245a:	89db      	ldrh	r3, [r3, #14]
 801245c:	f003 0320 	and.w	r3, r3, #32
 8012460:	2b00      	cmp	r3, #0
 8012462:	d02d      	beq.n	80124c0 <rfalNfcPollTechDetetection+0x30c>
 8012464:	4b19      	ldr	r3, [pc, #100]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 8012466:	889b      	ldrh	r3, [r3, #4]
 8012468:	f003 0320 	and.w	r3, r3, #32
 801246c:	2b00      	cmp	r3, #0
 801246e:	d027      	beq.n	80124c0 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8012470:	4b16      	ldr	r3, [pc, #88]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 8012472:	889b      	ldrh	r3, [r3, #4]
 8012474:	f023 0320 	bic.w	r3, r3, #32
 8012478:	b29a      	uxth	r2, r3
 801247a:	4b14      	ldr	r3, [pc, #80]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 801247c:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 801247e:	f008 f9ac 	bl	801a7da <rfalSt25tbPollerInitialize>
 8012482:	4603      	mov	r3, r0
 8012484:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <rfalNfcPollTechDetetection+0x2dc>
 801248c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801248e:	e018      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8012490:	f005 fed6 	bl	8018240 <rfalFieldOnAndStartGT>
 8012494:	4603      	mov	r3, r0
 8012496:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801249a:	2b00      	cmp	r3, #0
 801249c:	d001      	beq.n	80124a2 <rfalNfcPollTechDetetection+0x2ee>
 801249e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124a0:	e00f      	b.n	80124c2 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 80124a2:	2000      	movs	r0, #0
 80124a4:	f008 f9a0 	bl	801a7e8 <rfalSt25tbPollerCheckPresence>
 80124a8:	4603      	mov	r3, r0
 80124aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 80124ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d106      	bne.n	80124c0 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 80124b2:	4b06      	ldr	r3, [pc, #24]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 80124b4:	885b      	ldrh	r3, [r3, #2]
 80124b6:	f043 0320 	orr.w	r3, r3, #32
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	4b03      	ldr	r3, [pc, #12]	; (80124cc <rfalNfcPollTechDetetection+0x318>)
 80124be:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 80124c0:	2300      	movs	r3, #0
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3728      	adds	r7, #40	; 0x28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20003328 	.word	0x20003328

080124d0 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 80124d0:	b5b0      	push	{r4, r5, r7, lr}
 80124d2:	b09e      	sub	sp, #120	; 0x78
 80124d4:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 80124d6:	2300      	movs	r3, #0
 80124d8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 80124e8:	4bb5      	ldr	r3, [pc, #724]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80124ea:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 80124ee:	4bb4      	ldr	r3, [pc, #720]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80124f0:	7c9b      	ldrb	r3, [r3, #18]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d301      	bcc.n	80124fa <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e2b1      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 80124fa:	4bb1      	ldr	r3, [pc, #708]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	f003 0301 	and.w	r3, r3, #1
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 8084 	beq.w	8012610 <rfalNfcPollCollResolution+0x140>
 8012508:	4bad      	ldr	r3, [pc, #692]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801250a:	889b      	ldrh	r3, [r3, #4]
 801250c:	f003 0301 	and.w	r3, r3, #1
 8012510:	2b00      	cmp	r3, #0
 8012512:	d07d      	beq.n	8012610 <rfalNfcPollCollResolution+0x140>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8012514:	4baa      	ldr	r3, [pc, #680]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012516:	889b      	ldrh	r3, [r3, #4]
 8012518:	f023 0301 	bic.w	r3, r3, #1
 801251c:	b29a      	uxth	r2, r3
 801251e:	4ba8      	ldr	r3, [pc, #672]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012520:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 8012522:	f003 f95f 	bl	80157e4 <rfalNfcaPollerInitialize>
 8012526:	4603      	mov	r3, r0
 8012528:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801252c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012530:	2b00      	cmp	r3, #0
 8012532:	d002      	beq.n	801253a <rfalNfcPollCollResolution+0x6a>
 8012534:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012538:	e291      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 801253a:	f005 fe81 	bl	8018240 <rfalFieldOnAndStartGT>
 801253e:	4603      	mov	r3, r0
 8012540:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012544:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <rfalNfcPollCollResolution+0x82>
 801254c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012550:	e285      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 8012552:	4b9b      	ldr	r3, [pc, #620]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012554:	7b18      	ldrb	r0, [r3, #12]
 8012556:	4b9a      	ldr	r3, [pc, #616]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012558:	7c9a      	ldrb	r2, [r3, #18]
 801255a:	4b99      	ldr	r3, [pc, #612]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801255c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012560:	1ad3      	subs	r3, r2, r3
 8012562:	b2d9      	uxtb	r1, r3
 8012564:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8012568:	1d3a      	adds	r2, r7, #4
 801256a:	f003 fb76 	bl	8015c5a <rfalNfcaPollerFullCollisionResolution>
 801256e:	4603      	mov	r3, r0
 8012570:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8012574:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012578:	2b00      	cmp	r3, #0
 801257a:	d147      	bne.n	801260c <rfalNfcPollCollResolution+0x13c>
 801257c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012580:	2b00      	cmp	r3, #0
 8012582:	d043      	beq.n	801260c <rfalNfcPollCollResolution+0x13c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8012584:	2300      	movs	r3, #0
 8012586:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801258a:	e039      	b.n	8012600 <rfalNfcPollCollResolution+0x130>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 801258c:	4b8c      	ldr	r3, [pc, #560]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801258e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012592:	4619      	mov	r1, r3
 8012594:	4a8a      	ldr	r2, [pc, #552]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012596:	460b      	mov	r3, r1
 8012598:	011b      	lsls	r3, r3, #4
 801259a:	1a5b      	subs	r3, r3, r1
 801259c:	00db      	lsls	r3, r3, #3
 801259e:	4413      	add	r3, r2
 80125a0:	3390      	adds	r3, #144	; 0x90
 80125a2:	2200      	movs	r2, #0
 80125a4:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 80125a6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80125aa:	4b85      	ldr	r3, [pc, #532]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80125ac:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80125b0:	4618      	mov	r0, r3
 80125b2:	4983      	ldr	r1, [pc, #524]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80125b4:	4603      	mov	r3, r0
 80125b6:	011b      	lsls	r3, r3, #4
 80125b8:	1a1b      	subs	r3, r3, r0
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	440b      	add	r3, r1
 80125be:	3390      	adds	r3, #144	; 0x90
 80125c0:	2116      	movs	r1, #22
 80125c2:	fb01 f202 	mul.w	r2, r1, r2
 80125c6:	3278      	adds	r2, #120	; 0x78
 80125c8:	443a      	add	r2, r7
 80125ca:	3a74      	subs	r2, #116	; 0x74
 80125cc:	3301      	adds	r3, #1
 80125ce:	6811      	ldr	r1, [r2, #0]
 80125d0:	6855      	ldr	r5, [r2, #4]
 80125d2:	6894      	ldr	r4, [r2, #8]
 80125d4:	68d0      	ldr	r0, [r2, #12]
 80125d6:	6019      	str	r1, [r3, #0]
 80125d8:	605d      	str	r5, [r3, #4]
 80125da:	609c      	str	r4, [r3, #8]
 80125dc:	60d8      	str	r0, [r3, #12]
 80125de:	6911      	ldr	r1, [r2, #16]
 80125e0:	6119      	str	r1, [r3, #16]
 80125e2:	8a92      	ldrh	r2, [r2, #20]
 80125e4:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 80125e6:	4b76      	ldr	r3, [pc, #472]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80125e8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80125ec:	3301      	adds	r3, #1
 80125ee:	b2da      	uxtb	r2, r3
 80125f0:	4b73      	ldr	r3, [pc, #460]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80125f2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80125f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80125fa:	3301      	adds	r3, #1
 80125fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012600:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012604:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012608:	429a      	cmp	r2, r3
 801260a:	d3bf      	bcc.n	801258c <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 801260c:	2302      	movs	r3, #2
 801260e:	e226      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 8012610:	4b6b      	ldr	r3, [pc, #428]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012612:	885b      	ldrh	r3, [r3, #2]
 8012614:	f003 0302 	and.w	r3, r3, #2
 8012618:	2b00      	cmp	r3, #0
 801261a:	f000 8084 	beq.w	8012726 <rfalNfcPollCollResolution+0x256>
 801261e:	4b68      	ldr	r3, [pc, #416]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012620:	889b      	ldrh	r3, [r3, #4]
 8012622:	f003 0302 	and.w	r3, r3, #2
 8012626:	2b00      	cmp	r3, #0
 8012628:	d07d      	beq.n	8012726 <rfalNfcPollCollResolution+0x256>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 801262a:	4b65      	ldr	r3, [pc, #404]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801262c:	889b      	ldrh	r3, [r3, #4]
 801262e:	f023 0302 	bic.w	r3, r3, #2
 8012632:	b29a      	uxth	r2, r3
 8012634:	4b62      	ldr	r3, [pc, #392]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012636:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 8012638:	f003 fcf0 	bl	801601c <rfalNfcbPollerInitialize>
 801263c:	4603      	mov	r3, r0
 801263e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012642:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012646:	2b00      	cmp	r3, #0
 8012648:	d002      	beq.n	8012650 <rfalNfcPollCollResolution+0x180>
 801264a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801264e:	e206      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8012650:	f005 fdf6 	bl	8018240 <rfalFieldOnAndStartGT>
 8012654:	4603      	mov	r3, r0
 8012656:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801265a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801265e:	2b00      	cmp	r3, #0
 8012660:	d002      	beq.n	8012668 <rfalNfcPollCollResolution+0x198>
 8012662:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012666:	e1fa      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8012668:	4b55      	ldr	r3, [pc, #340]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801266a:	7b18      	ldrb	r0, [r3, #12]
 801266c:	4b54      	ldr	r3, [pc, #336]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801266e:	7c9a      	ldrb	r2, [r3, #18]
 8012670:	4b53      	ldr	r3, [pc, #332]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012672:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	b2d9      	uxtb	r1, r3
 801267a:	f107 0373 	add.w	r3, r7, #115	; 0x73
 801267e:	1d3a      	adds	r2, r7, #4
 8012680:	f003 fdf0 	bl	8016264 <rfalNfcbPollerCollisionResolution>
 8012684:	4603      	mov	r3, r0
 8012686:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801268a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801268e:	2b00      	cmp	r3, #0
 8012690:	d147      	bne.n	8012722 <rfalNfcPollCollResolution+0x252>
 8012692:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012696:	2b00      	cmp	r3, #0
 8012698:	d043      	beq.n	8012722 <rfalNfcPollCollResolution+0x252>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 801269a:	2300      	movs	r3, #0
 801269c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80126a0:	e039      	b.n	8012716 <rfalNfcPollCollResolution+0x246>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 80126a2:	4b47      	ldr	r3, [pc, #284]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80126a4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80126a8:	4619      	mov	r1, r3
 80126aa:	4a45      	ldr	r2, [pc, #276]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80126ac:	460b      	mov	r3, r1
 80126ae:	011b      	lsls	r3, r3, #4
 80126b0:	1a5b      	subs	r3, r3, r1
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	4413      	add	r3, r2
 80126b6:	3390      	adds	r3, #144	; 0x90
 80126b8:	2201      	movs	r2, #1
 80126ba:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 80126bc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80126c0:	4b3f      	ldr	r3, [pc, #252]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80126c2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80126c6:	4618      	mov	r0, r3
 80126c8:	493d      	ldr	r1, [pc, #244]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80126ca:	4603      	mov	r3, r0
 80126cc:	011b      	lsls	r3, r3, #4
 80126ce:	1a1b      	subs	r3, r3, r0
 80126d0:	00db      	lsls	r3, r3, #3
 80126d2:	440b      	add	r3, r1
 80126d4:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80126d8:	4613      	mov	r3, r2
 80126da:	011b      	lsls	r3, r3, #4
 80126dc:	1a9b      	subs	r3, r3, r2
 80126de:	3378      	adds	r3, #120	; 0x78
 80126e0:	443b      	add	r3, r7
 80126e2:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80126e6:	1c4b      	adds	r3, r1, #1
 80126e8:	6814      	ldr	r4, [r2, #0]
 80126ea:	6850      	ldr	r0, [r2, #4]
 80126ec:	6891      	ldr	r1, [r2, #8]
 80126ee:	601c      	str	r4, [r3, #0]
 80126f0:	6058      	str	r0, [r3, #4]
 80126f2:	6099      	str	r1, [r3, #8]
 80126f4:	8991      	ldrh	r1, [r2, #12]
 80126f6:	7b92      	ldrb	r2, [r2, #14]
 80126f8:	8199      	strh	r1, [r3, #12]
 80126fa:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 80126fc:	4b30      	ldr	r3, [pc, #192]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 80126fe:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012702:	3301      	adds	r3, #1
 8012704:	b2da      	uxtb	r2, r3
 8012706:	4b2e      	ldr	r3, [pc, #184]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012708:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 801270c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012710:	3301      	adds	r3, #1
 8012712:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012716:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801271a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801271e:	429a      	cmp	r2, r3
 8012720:	d3bf      	bcc.n	80126a2 <rfalNfcPollCollResolution+0x1d2>
            }
        }
        
        return ERR_BUSY;
 8012722:	2302      	movs	r3, #2
 8012724:	e19b      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 8012726:	4b26      	ldr	r3, [pc, #152]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012728:	885b      	ldrh	r3, [r3, #2]
 801272a:	f003 0304 	and.w	r3, r3, #4
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 808e 	beq.w	8012850 <rfalNfcPollCollResolution+0x380>
 8012734:	4b22      	ldr	r3, [pc, #136]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012736:	889b      	ldrh	r3, [r3, #4]
 8012738:	f003 0304 	and.w	r3, r3, #4
 801273c:	2b00      	cmp	r3, #0
 801273e:	f000 8087 	beq.w	8012850 <rfalNfcPollCollResolution+0x380>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8012742:	4b1f      	ldr	r3, [pc, #124]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012744:	889b      	ldrh	r3, [r3, #4]
 8012746:	f023 0304 	bic.w	r3, r3, #4
 801274a:	b29a      	uxth	r2, r3
 801274c:	4b1c      	ldr	r3, [pc, #112]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801274e:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8012750:	4b1b      	ldr	r3, [pc, #108]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012752:	7cdb      	ldrb	r3, [r3, #19]
 8012754:	4618      	mov	r0, r3
 8012756:	f004 f835 	bl	80167c4 <rfalNfcfPollerInitialize>
 801275a:	4603      	mov	r3, r0
 801275c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012760:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <rfalNfcPollCollResolution+0x29e>
 8012768:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801276c:	e177      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 801276e:	f005 fd67 	bl	8018240 <rfalFieldOnAndStartGT>
 8012772:	4603      	mov	r3, r0
 8012774:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012778:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <rfalNfcPollCollResolution+0x2b6>
 8012780:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012784:	e16b      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8012786:	4b0e      	ldr	r3, [pc, #56]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012788:	7b18      	ldrb	r0, [r3, #12]
 801278a:	4b0d      	ldr	r3, [pc, #52]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 801278c:	7c9a      	ldrb	r2, [r3, #18]
 801278e:	4b0c      	ldr	r3, [pc, #48]	; (80127c0 <rfalNfcPollCollResolution+0x2f0>)
 8012790:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012794:	1ad3      	subs	r3, r2, r3
 8012796:	b2d9      	uxtb	r1, r3
 8012798:	f107 0373 	add.w	r3, r7, #115	; 0x73
 801279c:	1d3a      	adds	r2, r7, #4
 801279e:	f004 f87f 	bl	80168a0 <rfalNfcfPollerCollisionResolution>
 80127a2:	4603      	mov	r3, r0
 80127a4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80127a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d14d      	bne.n	801284c <rfalNfcPollCollResolution+0x37c>
 80127b0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d049      	beq.n	801284c <rfalNfcPollCollResolution+0x37c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80127b8:	2300      	movs	r3, #0
 80127ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80127be:	e03f      	b.n	8012840 <rfalNfcPollCollResolution+0x370>
 80127c0:	20003328 	.word	0x20003328
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 80127c4:	4ba8      	ldr	r3, [pc, #672]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80127c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80127ca:	4619      	mov	r1, r3
 80127cc:	4aa6      	ldr	r2, [pc, #664]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80127ce:	460b      	mov	r3, r1
 80127d0:	011b      	lsls	r3, r3, #4
 80127d2:	1a5b      	subs	r3, r3, r1
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	4413      	add	r3, r2
 80127d8:	3390      	adds	r3, #144	; 0x90
 80127da:	2202      	movs	r2, #2
 80127dc:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 80127de:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80127e2:	4ba1      	ldr	r3, [pc, #644]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80127e4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80127e8:	4618      	mov	r0, r3
 80127ea:	499f      	ldr	r1, [pc, #636]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80127ec:	4603      	mov	r3, r0
 80127ee:	011b      	lsls	r3, r3, #4
 80127f0:	1a1b      	subs	r3, r3, r0
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	440b      	add	r3, r1
 80127f6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80127fa:	4613      	mov	r3, r2
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	4413      	add	r3, r2
 8012800:	005b      	lsls	r3, r3, #1
 8012802:	4413      	add	r3, r2
 8012804:	3378      	adds	r3, #120	; 0x78
 8012806:	443b      	add	r3, r7
 8012808:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 801280c:	1c4b      	adds	r3, r1, #1
 801280e:	6815      	ldr	r5, [r2, #0]
 8012810:	6854      	ldr	r4, [r2, #4]
 8012812:	6890      	ldr	r0, [r2, #8]
 8012814:	68d1      	ldr	r1, [r2, #12]
 8012816:	601d      	str	r5, [r3, #0]
 8012818:	605c      	str	r4, [r3, #4]
 801281a:	6098      	str	r0, [r3, #8]
 801281c:	60d9      	str	r1, [r3, #12]
 801281e:	8a11      	ldrh	r1, [r2, #16]
 8012820:	7c92      	ldrb	r2, [r2, #18]
 8012822:	8219      	strh	r1, [r3, #16]
 8012824:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 8012826:	4b90      	ldr	r3, [pc, #576]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012828:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801282c:	3301      	adds	r3, #1
 801282e:	b2da      	uxtb	r2, r3
 8012830:	4b8d      	ldr	r3, [pc, #564]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012832:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8012836:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801283a:	3301      	adds	r3, #1
 801283c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012840:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012844:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012848:	429a      	cmp	r2, r3
 801284a:	d3bb      	bcc.n	80127c4 <rfalNfcPollCollResolution+0x2f4>
            }
        }
        
        return ERR_BUSY;
 801284c:	2302      	movs	r3, #2
 801284e:	e106      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8012850:	4b85      	ldr	r3, [pc, #532]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012852:	885b      	ldrh	r3, [r3, #2]
 8012854:	f003 0308 	and.w	r3, r3, #8
 8012858:	2b00      	cmp	r3, #0
 801285a:	f000 8083 	beq.w	8012964 <rfalNfcPollCollResolution+0x494>
 801285e:	4b82      	ldr	r3, [pc, #520]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012860:	889b      	ldrh	r3, [r3, #4]
 8012862:	f003 0308 	and.w	r3, r3, #8
 8012866:	2b00      	cmp	r3, #0
 8012868:	d07c      	beq.n	8012964 <rfalNfcPollCollResolution+0x494>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 801286a:	4b7f      	ldr	r3, [pc, #508]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 801286c:	889b      	ldrh	r3, [r3, #4]
 801286e:	f023 0308 	bic.w	r3, r3, #8
 8012872:	b29a      	uxth	r2, r3
 8012874:	4b7c      	ldr	r3, [pc, #496]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012876:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 8012878:	f004 fb1e 	bl	8016eb8 <rfalNfcvPollerInitialize>
 801287c:	4603      	mov	r3, r0
 801287e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012882:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012886:	2b00      	cmp	r3, #0
 8012888:	d002      	beq.n	8012890 <rfalNfcPollCollResolution+0x3c0>
 801288a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801288e:	e0e6      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8012890:	f005 fcd6 	bl	8018240 <rfalFieldOnAndStartGT>
 8012894:	4603      	mov	r3, r0
 8012896:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801289a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d002      	beq.n	80128a8 <rfalNfcPollCollResolution+0x3d8>
 80128a2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80128a6:	e0da      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 80128a8:	4b6f      	ldr	r3, [pc, #444]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80128aa:	7c9a      	ldrb	r2, [r3, #18]
 80128ac:	4b6e      	ldr	r3, [pc, #440]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80128ae:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	b2d9      	uxtb	r1, r3
 80128b6:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80128ba:	1d3a      	adds	r2, r7, #4
 80128bc:	2000      	movs	r0, #0
 80128be:	f004 fba3 	bl	8017008 <rfalNfcvPollerCollisionResolution>
 80128c2:	4603      	mov	r3, r0
 80128c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80128c8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d147      	bne.n	8012960 <rfalNfcPollCollResolution+0x490>
 80128d0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d043      	beq.n	8012960 <rfalNfcPollCollResolution+0x490>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80128d8:	2300      	movs	r3, #0
 80128da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80128de:	e039      	b.n	8012954 <rfalNfcPollCollResolution+0x484>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80128e0:	4b61      	ldr	r3, [pc, #388]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80128e2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80128e6:	4619      	mov	r1, r3
 80128e8:	4a5f      	ldr	r2, [pc, #380]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80128ea:	460b      	mov	r3, r1
 80128ec:	011b      	lsls	r3, r3, #4
 80128ee:	1a5b      	subs	r3, r3, r1
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4413      	add	r3, r2
 80128f4:	3390      	adds	r3, #144	; 0x90
 80128f6:	2203      	movs	r2, #3
 80128f8:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80128fa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80128fe:	4b5a      	ldr	r3, [pc, #360]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012900:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012904:	4618      	mov	r0, r3
 8012906:	4958      	ldr	r1, [pc, #352]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012908:	4603      	mov	r3, r0
 801290a:	011b      	lsls	r3, r3, #4
 801290c:	1a1b      	subs	r3, r3, r0
 801290e:	00db      	lsls	r3, r3, #3
 8012910:	440b      	add	r3, r1
 8012912:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8012916:	4613      	mov	r3, r2
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	4413      	add	r3, r2
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	4413      	add	r3, r2
 8012920:	3378      	adds	r3, #120	; 0x78
 8012922:	443b      	add	r3, r7
 8012924:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8012928:	1c4b      	adds	r3, r1, #1
 801292a:	6814      	ldr	r4, [r2, #0]
 801292c:	6850      	ldr	r0, [r2, #4]
 801292e:	6891      	ldr	r1, [r2, #8]
 8012930:	601c      	str	r4, [r3, #0]
 8012932:	6058      	str	r0, [r3, #4]
 8012934:	6099      	str	r1, [r3, #8]
 8012936:	7b12      	ldrb	r2, [r2, #12]
 8012938:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 801293a:	4b4b      	ldr	r3, [pc, #300]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 801293c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012940:	3301      	adds	r3, #1
 8012942:	b2da      	uxtb	r2, r3
 8012944:	4b48      	ldr	r3, [pc, #288]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012946:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801294a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801294e:	3301      	adds	r3, #1
 8012950:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012954:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012958:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801295c:	429a      	cmp	r2, r3
 801295e:	d3bf      	bcc.n	80128e0 <rfalNfcPollCollResolution+0x410>
            }
        }
        
        return ERR_BUSY;
 8012960:	2302      	movs	r3, #2
 8012962:	e07c      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 8012964:	4b40      	ldr	r3, [pc, #256]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012966:	885b      	ldrh	r3, [r3, #2]
 8012968:	f003 0320 	and.w	r3, r3, #32
 801296c:	2b00      	cmp	r3, #0
 801296e:	d075      	beq.n	8012a5c <rfalNfcPollCollResolution+0x58c>
 8012970:	4b3d      	ldr	r3, [pc, #244]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012972:	889b      	ldrh	r3, [r3, #4]
 8012974:	f003 0320 	and.w	r3, r3, #32
 8012978:	2b00      	cmp	r3, #0
 801297a:	d06f      	beq.n	8012a5c <rfalNfcPollCollResolution+0x58c>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 801297c:	4b3a      	ldr	r3, [pc, #232]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 801297e:	889b      	ldrh	r3, [r3, #4]
 8012980:	f023 0320 	bic.w	r3, r3, #32
 8012984:	b29a      	uxth	r2, r3
 8012986:	4b38      	ldr	r3, [pc, #224]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012988:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 801298a:	f007 ff26 	bl	801a7da <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 801298e:	f005 fc57 	bl	8018240 <rfalFieldOnAndStartGT>
 8012992:	4603      	mov	r3, r0
 8012994:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012998:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <rfalNfcPollCollResolution+0x4d6>
 80129a0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80129a4:	e05b      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 80129a6:	4b30      	ldr	r3, [pc, #192]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80129a8:	7c9a      	ldrb	r2, [r3, #18]
 80129aa:	4b2f      	ldr	r3, [pc, #188]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80129ac:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	f107 0273 	add.w	r2, r7, #115	; 0x73
 80129b8:	1d39      	adds	r1, r7, #4
 80129ba:	4618      	mov	r0, r3
 80129bc:	f008 f80a 	bl	801a9d4 <rfalSt25tbPollerCollisionResolution>
 80129c0:	4603      	mov	r3, r0
 80129c2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80129c6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d144      	bne.n	8012a58 <rfalNfcPollCollResolution+0x588>
 80129ce:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d040      	beq.n	8012a58 <rfalNfcPollCollResolution+0x588>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80129d6:	2300      	movs	r3, #0
 80129d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80129dc:	e036      	b.n	8012a4c <rfalNfcPollCollResolution+0x57c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 80129de:	4b22      	ldr	r3, [pc, #136]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80129e0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80129e4:	4619      	mov	r1, r3
 80129e6:	4a20      	ldr	r2, [pc, #128]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80129e8:	460b      	mov	r3, r1
 80129ea:	011b      	lsls	r3, r3, #4
 80129ec:	1a5b      	subs	r3, r3, r1
 80129ee:	00db      	lsls	r3, r3, #3
 80129f0:	4413      	add	r3, r2
 80129f2:	3390      	adds	r3, #144	; 0x90
 80129f4:	2204      	movs	r2, #4
 80129f6:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 80129f8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80129fc:	4b1a      	ldr	r3, [pc, #104]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 80129fe:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012a02:	4618      	mov	r0, r3
 8012a04:	4918      	ldr	r1, [pc, #96]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012a06:	4603      	mov	r3, r0
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	1a1b      	subs	r3, r3, r0
 8012a0c:	00db      	lsls	r3, r3, #3
 8012a0e:	440b      	add	r3, r1
 8012a10:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8012a14:	4613      	mov	r3, r2
 8012a16:	009b      	lsls	r3, r3, #2
 8012a18:	4413      	add	r3, r2
 8012a1a:	005b      	lsls	r3, r3, #1
 8012a1c:	3378      	adds	r3, #120	; 0x78
 8012a1e:	443b      	add	r3, r7
 8012a20:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8012a24:	1c4b      	adds	r3, r1, #1
 8012a26:	6810      	ldr	r0, [r2, #0]
 8012a28:	6851      	ldr	r1, [r2, #4]
 8012a2a:	6018      	str	r0, [r3, #0]
 8012a2c:	6059      	str	r1, [r3, #4]
 8012a2e:	8912      	ldrh	r2, [r2, #8]
 8012a30:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8012a32:	4b0d      	ldr	r3, [pc, #52]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012a34:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012a38:	3301      	adds	r3, #1
 8012a3a:	b2da      	uxtb	r2, r3
 8012a3c:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <rfalNfcPollCollResolution+0x598>)
 8012a3e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8012a42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012a46:	3301      	adds	r3, #1
 8012a48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012a4c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012a50:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d3c2      	bcc.n	80129de <rfalNfcPollCollResolution+0x50e>
            }
        }
        
        return ERR_BUSY;
 8012a58:	2302      	movs	r3, #2
 8012a5a:	e000      	b.n	8012a5e <rfalNfcPollCollResolution+0x58e>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3778      	adds	r7, #120	; 0x78
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bdb0      	pop	{r4, r5, r7, pc}
 8012a66:	bf00      	nop
 8012a68:	20003328 	.word	0x20003328

08012a6c <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b08e      	sub	sp, #56	; 0x38
 8012a70:	af04      	add	r7, sp, #16
 8012a72:	4603      	mov	r3, r0
 8012a74:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 8012a76:	2300      	movs	r3, #0
 8012a78:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 8012a7a:	4ba6      	ldr	r3, [pc, #664]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012a7c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012a80:	79fa      	ldrb	r2, [r7, #7]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d901      	bls.n	8012a8a <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 8012a86:	2321      	movs	r3, #33	; 0x21
 8012a88:	e29c      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
    }
    
    switch( gNfcDev.devList[devIt].type )
 8012a8a:	79fa      	ldrb	r2, [r7, #7]
 8012a8c:	49a1      	ldr	r1, [pc, #644]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012a8e:	4613      	mov	r3, r2
 8012a90:	011b      	lsls	r3, r3, #4
 8012a92:	1a9b      	subs	r3, r3, r2
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	440b      	add	r3, r1
 8012a98:	3390      	adds	r3, #144	; 0x90
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2b05      	cmp	r3, #5
 8012a9e:	f200 8284 	bhi.w	8012faa <rfalNfcPollActivation+0x53e>
 8012aa2:	a201      	add	r2, pc, #4	; (adr r2, 8012aa8 <rfalNfcPollActivation+0x3c>)
 8012aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa8:	08012afb 	.word	0x08012afb
 8012aac:	08012d19 	.word	0x08012d19
 8012ab0:	08012e0d 	.word	0x08012e0d
 8012ab4:	08012f07 	.word	0x08012f07
 8012ab8:	08012f59 	.word	0x08012f59
 8012abc:	08012ac1 	.word	0x08012ac1
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8012ac0:	79f9      	ldrb	r1, [r7, #7]
 8012ac2:	79fa      	ldrb	r2, [r7, #7]
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	011b      	lsls	r3, r3, #4
 8012ac8:	1a5b      	subs	r3, r3, r1
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	33b0      	adds	r3, #176	; 0xb0
 8012ace:	4991      	ldr	r1, [pc, #580]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ad0:	440b      	add	r3, r1
 8012ad2:	1c99      	adds	r1, r3, #2
 8012ad4:	488f      	ldr	r0, [pc, #572]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	011b      	lsls	r3, r3, #4
 8012ada:	1a9b      	subs	r3, r3, r2
 8012adc:	00db      	lsls	r3, r3, #3
 8012ade:	4403      	add	r3, r0
 8012ae0:	33a8      	adds	r3, #168	; 0xa8
 8012ae2:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8012ae4:	79fa      	ldrb	r2, [r7, #7]
 8012ae6:	498b      	ldr	r1, [pc, #556]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ae8:	4613      	mov	r3, r2
 8012aea:	011b      	lsls	r3, r3, #4
 8012aec:	1a9b      	subs	r3, r3, r2
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	440b      	add	r3, r1
 8012af2:	33ac      	adds	r3, #172	; 0xac
 8012af4:	220a      	movs	r2, #10
 8012af6:	701a      	strb	r2, [r3, #0]
            break;
 8012af8:	e259      	b.n	8012fae <rfalNfcPollActivation+0x542>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8012afa:	f002 fe73 	bl	80157e4 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 8012afe:	79fa      	ldrb	r2, [r7, #7]
 8012b00:	4984      	ldr	r1, [pc, #528]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b02:	4613      	mov	r3, r2
 8012b04:	011b      	lsls	r3, r3, #4
 8012b06:	1a9b      	subs	r3, r3, r2
 8012b08:	00db      	lsls	r3, r3, #3
 8012b0a:	440b      	add	r3, r1
 8012b0c:	33a6      	adds	r3, #166	; 0xa6
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d02a      	beq.n	8012b6a <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8012b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b18:	4619      	mov	r1, r3
 8012b1a:	2052      	movs	r0, #82	; 0x52
 8012b1c:	f002 fe86 	bl	801582c <rfalNfcaPollerCheckPresence>
 8012b20:	4603      	mov	r3, r0
 8012b22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <rfalNfcPollActivation+0xc2>
 8012b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b2c:	e24a      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 8012b2e:	79fa      	ldrb	r2, [r7, #7]
 8012b30:	4613      	mov	r3, r2
 8012b32:	011b      	lsls	r3, r3, #4
 8012b34:	1a9b      	subs	r3, r3, r2
 8012b36:	00db      	lsls	r3, r3, #3
 8012b38:	3390      	adds	r3, #144	; 0x90
 8012b3a:	4a76      	ldr	r2, [pc, #472]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b3c:	4413      	add	r3, r2
 8012b3e:	1d98      	adds	r0, r3, #6
 8012b40:	79fa      	ldrb	r2, [r7, #7]
 8012b42:	4974      	ldr	r1, [pc, #464]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	1a9b      	subs	r3, r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	3395      	adds	r3, #149	; 0x95
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	f107 0220 	add.w	r2, r7, #32
 8012b56:	4619      	mov	r1, r3
 8012b58:	f003 f99a 	bl	8015e90 <rfalNfcaPollerSelect>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d001      	beq.n	8012b6a <rfalNfcPollActivation+0xfe>
 8012b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b68:	e22c      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8012b6a:	79f9      	ldrb	r1, [r7, #7]
 8012b6c:	79fa      	ldrb	r2, [r7, #7]
 8012b6e:	460b      	mov	r3, r1
 8012b70:	011b      	lsls	r3, r3, #4
 8012b72:	1a5b      	subs	r3, r3, r1
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	3390      	adds	r3, #144	; 0x90
 8012b78:	4966      	ldr	r1, [pc, #408]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b7a:	440b      	add	r3, r1
 8012b7c:	1d99      	adds	r1, r3, #6
 8012b7e:	4865      	ldr	r0, [pc, #404]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b80:	4613      	mov	r3, r2
 8012b82:	011b      	lsls	r3, r3, #4
 8012b84:	1a9b      	subs	r3, r3, r2
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	4403      	add	r3, r0
 8012b8a:	33a8      	adds	r3, #168	; 0xa8
 8012b8c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8012b8e:	79f9      	ldrb	r1, [r7, #7]
 8012b90:	79fa      	ldrb	r2, [r7, #7]
 8012b92:	4860      	ldr	r0, [pc, #384]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012b94:	460b      	mov	r3, r1
 8012b96:	011b      	lsls	r3, r3, #4
 8012b98:	1a5b      	subs	r3, r3, r1
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	4403      	add	r3, r0
 8012b9e:	3395      	adds	r3, #149	; 0x95
 8012ba0:	7818      	ldrb	r0, [r3, #0]
 8012ba2:	495c      	ldr	r1, [pc, #368]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	011b      	lsls	r3, r3, #4
 8012ba8:	1a9b      	subs	r3, r3, r2
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	440b      	add	r3, r1
 8012bae:	33ac      	adds	r3, #172	; 0xac
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8012bb4:	79fa      	ldrb	r2, [r7, #7]
 8012bb6:	4957      	ldr	r1, [pc, #348]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012bb8:	4613      	mov	r3, r2
 8012bba:	011b      	lsls	r3, r3, #4
 8012bbc:	1a9b      	subs	r3, r3, r2
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	440b      	add	r3, r1
 8012bc2:	3391      	adds	r3, #145	; 0x91
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b60      	cmp	r3, #96	; 0x60
 8012bc8:	d065      	beq.n	8012c96 <rfalNfcPollActivation+0x22a>
 8012bca:	2b60      	cmp	r3, #96	; 0x60
 8012bcc:	f300 809e 	bgt.w	8012d0c <rfalNfcPollActivation+0x2a0>
 8012bd0:	2b40      	cmp	r3, #64	; 0x40
 8012bd2:	d060      	beq.n	8012c96 <rfalNfcPollActivation+0x22a>
 8012bd4:	2b40      	cmp	r3, #64	; 0x40
 8012bd6:	f300 8099 	bgt.w	8012d0c <rfalNfcPollActivation+0x2a0>
 8012bda:	2b20      	cmp	r3, #32
 8012bdc:	d03a      	beq.n	8012c54 <rfalNfcPollActivation+0x1e8>
 8012bde:	2b20      	cmp	r3, #32
 8012be0:	f300 8094 	bgt.w	8012d0c <rfalNfcPollActivation+0x2a0>
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d02a      	beq.n	8012c3e <rfalNfcPollActivation+0x1d2>
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	f040 808f 	bne.w	8012d0c <rfalNfcPollActivation+0x2a0>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8012bee:	79f9      	ldrb	r1, [r7, #7]
 8012bf0:	79fa      	ldrb	r2, [r7, #7]
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	011b      	lsls	r3, r3, #4
 8012bf6:	1a5b      	subs	r3, r3, r1
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	3398      	adds	r3, #152	; 0x98
 8012bfc:	4945      	ldr	r1, [pc, #276]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012bfe:	440b      	add	r3, r1
 8012c00:	f103 010a 	add.w	r1, r3, #10
 8012c04:	4843      	ldr	r0, [pc, #268]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	011b      	lsls	r3, r3, #4
 8012c0a:	1a9b      	subs	r3, r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	4403      	add	r3, r0
 8012c10:	33a8      	adds	r3, #168	; 0xa8
 8012c12:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8012c14:	79fa      	ldrb	r2, [r7, #7]
 8012c16:	493f      	ldr	r1, [pc, #252]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c18:	4613      	mov	r3, r2
 8012c1a:	011b      	lsls	r3, r3, #4
 8012c1c:	1a9b      	subs	r3, r3, r2
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	440b      	add	r3, r1
 8012c22:	33ac      	adds	r3, #172	; 0xac
 8012c24:	2204      	movs	r2, #4
 8012c26:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8012c28:	79fa      	ldrb	r2, [r7, #7]
 8012c2a:	493a      	ldr	r1, [pc, #232]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c2c:	4613      	mov	r3, r2
 8012c2e:	011b      	lsls	r3, r3, #4
 8012c30:	1a9b      	subs	r3, r3, r2
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	440b      	add	r3, r1
 8012c36:	33ad      	adds	r3, #173	; 0xad
 8012c38:	2200      	movs	r2, #0
 8012c3a:	701a      	strb	r2, [r3, #0]
                    break;
 8012c3c:	e068      	b.n	8012d10 <rfalNfcPollActivation+0x2a4>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8012c3e:	79fa      	ldrb	r2, [r7, #7]
 8012c40:	4934      	ldr	r1, [pc, #208]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c42:	4613      	mov	r3, r2
 8012c44:	011b      	lsls	r3, r3, #4
 8012c46:	1a9b      	subs	r3, r3, r2
 8012c48:	00db      	lsls	r3, r3, #3
 8012c4a:	440b      	add	r3, r1
 8012c4c:	33ad      	adds	r3, #173	; 0xad
 8012c4e:	2200      	movs	r2, #0
 8012c50:	701a      	strb	r2, [r3, #0]
                    break;
 8012c52:	e05d      	b.n	8012d10 <rfalNfcPollActivation+0x2a4>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8012c54:	f7fd fc06 	bl	8010464 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8012c58:	79fa      	ldrb	r2, [r7, #7]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	011b      	lsls	r3, r3, #4
 8012c5e:	1a9b      	subs	r3, r3, r2
 8012c60:	00db      	lsls	r3, r3, #3
 8012c62:	33b0      	adds	r3, #176	; 0xb0
 8012c64:	4a2b      	ldr	r2, [pc, #172]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c66:	4413      	add	r3, r2
 8012c68:	2202      	movs	r2, #2
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	2008      	movs	r0, #8
 8012c6e:	f7fe f9a7 	bl	8010fc0 <rfalIsoDepPollAHandleActivation>
 8012c72:	4603      	mov	r3, r0
 8012c74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d001      	beq.n	8012c80 <rfalNfcPollActivation+0x214>
 8012c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c7e:	e1a1      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8012c80:	79fa      	ldrb	r2, [r7, #7]
 8012c82:	4924      	ldr	r1, [pc, #144]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012c84:	4613      	mov	r3, r2
 8012c86:	011b      	lsls	r3, r3, #4
 8012c88:	1a9b      	subs	r3, r3, r2
 8012c8a:	00db      	lsls	r3, r3, #3
 8012c8c:	440b      	add	r3, r1
 8012c8e:	33ad      	adds	r3, #173	; 0xad
 8012c90:	2201      	movs	r2, #1
 8012c92:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8012c94:	e03c      	b.n	8012d10 <rfalNfcPollActivation+0x2a4>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8012c96:	79fa      	ldrb	r2, [r7, #7]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	011b      	lsls	r3, r3, #4
 8012c9c:	1a9b      	subs	r3, r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	3390      	adds	r3, #144	; 0x90
 8012ca2:	4a1c      	ldr	r2, [pc, #112]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ca4:	1898      	adds	r0, r3, r2
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	2200      	movs	r2, #0
 8012caa:	2100      	movs	r1, #0
 8012cac:	f000 fae4 	bl	8013278 <rfalNfcNfcDepActivate>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <rfalNfcPollActivation+0x252>
 8012cba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cbc:	e182      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8012cbe:	79f9      	ldrb	r1, [r7, #7]
 8012cc0:	79fa      	ldrb	r2, [r7, #7]
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	011b      	lsls	r3, r3, #4
 8012cc6:	1a5b      	subs	r3, r3, r1
 8012cc8:	00db      	lsls	r3, r3, #3
 8012cca:	33b0      	adds	r3, #176	; 0xb0
 8012ccc:	4911      	ldr	r1, [pc, #68]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012cce:	440b      	add	r3, r1
 8012cd0:	1c99      	adds	r1, r3, #2
 8012cd2:	4810      	ldr	r0, [pc, #64]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	1a9b      	subs	r3, r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	4403      	add	r3, r0
 8012cde:	33a8      	adds	r3, #168	; 0xa8
 8012ce0:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012ce2:	79fa      	ldrb	r2, [r7, #7]
 8012ce4:	490b      	ldr	r1, [pc, #44]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	011b      	lsls	r3, r3, #4
 8012cea:	1a9b      	subs	r3, r3, r2
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	440b      	add	r3, r1
 8012cf0:	33ac      	adds	r3, #172	; 0xac
 8012cf2:	220a      	movs	r2, #10
 8012cf4:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8012cf6:	79fa      	ldrb	r2, [r7, #7]
 8012cf8:	4906      	ldr	r1, [pc, #24]	; (8012d14 <rfalNfcPollActivation+0x2a8>)
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	011b      	lsls	r3, r3, #4
 8012cfe:	1a9b      	subs	r3, r3, r2
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	440b      	add	r3, r1
 8012d04:	33ad      	adds	r3, #173	; 0xad
 8012d06:	2202      	movs	r2, #2
 8012d08:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8012d0a:	e001      	b.n	8012d10 <rfalNfcPollActivation+0x2a4>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8012d0c:	2321      	movs	r3, #33	; 0x21
 8012d0e:	e159      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
            }
            break;
 8012d10:	e14d      	b.n	8012fae <rfalNfcPollActivation+0x542>
 8012d12:	bf00      	nop
 8012d14:	20003328 	.word	0x20003328
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8012d18:	f003 f980 	bl	801601c <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8012d1c:	79fa      	ldrb	r2, [r7, #7]
 8012d1e:	49ab      	ldr	r1, [pc, #684]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012d20:	4613      	mov	r3, r2
 8012d22:	011b      	lsls	r3, r3, #4
 8012d24:	1a9b      	subs	r3, r3, r2
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	440b      	add	r3, r1
 8012d2a:	339f      	adds	r3, #159	; 0x9f
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d007      	beq.n	8012d42 <rfalNfcPollActivation+0x2d6>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8012d32:	f107 030f 	add.w	r3, r7, #15
 8012d36:	f107 0210 	add.w	r2, r7, #16
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	2008      	movs	r0, #8
 8012d3e:	f003 f999 	bl	8016074 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8012d42:	79f9      	ldrb	r1, [r7, #7]
 8012d44:	79fa      	ldrb	r2, [r7, #7]
 8012d46:	460b      	mov	r3, r1
 8012d48:	011b      	lsls	r3, r3, #4
 8012d4a:	1a5b      	subs	r3, r3, r1
 8012d4c:	00db      	lsls	r3, r3, #3
 8012d4e:	3390      	adds	r3, #144	; 0x90
 8012d50:	499e      	ldr	r1, [pc, #632]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012d52:	440b      	add	r3, r1
 8012d54:	1cd9      	adds	r1, r3, #3
 8012d56:	489d      	ldr	r0, [pc, #628]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012d58:	4613      	mov	r3, r2
 8012d5a:	011b      	lsls	r3, r3, #4
 8012d5c:	1a9b      	subs	r3, r3, r2
 8012d5e:	00db      	lsls	r3, r3, #3
 8012d60:	4403      	add	r3, r0
 8012d62:	33a8      	adds	r3, #168	; 0xa8
 8012d64:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8012d66:	79fa      	ldrb	r2, [r7, #7]
 8012d68:	4998      	ldr	r1, [pc, #608]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	011b      	lsls	r3, r3, #4
 8012d6e:	1a9b      	subs	r3, r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	33ac      	adds	r3, #172	; 0xac
 8012d76:	2204      	movs	r2, #4
 8012d78:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8012d7a:	79fa      	ldrb	r2, [r7, #7]
 8012d7c:	4993      	ldr	r1, [pc, #588]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012d7e:	4613      	mov	r3, r2
 8012d80:	011b      	lsls	r3, r3, #4
 8012d82:	1a9b      	subs	r3, r3, r2
 8012d84:	00db      	lsls	r3, r3, #3
 8012d86:	440b      	add	r3, r1
 8012d88:	339c      	adds	r3, #156	; 0x9c
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	f003 0301 	and.w	r3, r3, #1
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d030      	beq.n	8012df6 <rfalNfcPollActivation+0x38a>
            {
                rfalIsoDepInitialize();
 8012d94:	f7fd fb66 	bl	8010464 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8012d98:	79fa      	ldrb	r2, [r7, #7]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	1a9b      	subs	r3, r3, r2
 8012da0:	00db      	lsls	r3, r3, #3
 8012da2:	3390      	adds	r3, #144	; 0x90
 8012da4:	4a89      	ldr	r2, [pc, #548]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012da6:	4413      	add	r3, r2
 8012da8:	1c59      	adds	r1, r3, #1
 8012daa:	79fa      	ldrb	r2, [r7, #7]
 8012dac:	4613      	mov	r3, r2
 8012dae:	011b      	lsls	r3, r3, #4
 8012db0:	1a9b      	subs	r3, r3, r2
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	33b0      	adds	r3, #176	; 0xb0
 8012db6:	4a85      	ldr	r2, [pc, #532]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012db8:	4413      	add	r3, r2
 8012dba:	9303      	str	r3, [sp, #12]
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	9302      	str	r3, [sp, #8]
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	9301      	str	r3, [sp, #4]
 8012dc4:	9100      	str	r1, [sp, #0]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	2202      	movs	r2, #2
 8012dca:	2100      	movs	r1, #0
 8012dcc:	2008      	movs	r0, #8
 8012dce:	f7fe fa51 	bl	8011274 <rfalIsoDepPollBHandleActivation>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <rfalNfcPollActivation+0x374>
 8012ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012dde:	e0f1      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8012de0:	79fa      	ldrb	r2, [r7, #7]
 8012de2:	497a      	ldr	r1, [pc, #488]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012de4:	4613      	mov	r3, r2
 8012de6:	011b      	lsls	r3, r3, #4
 8012de8:	1a9b      	subs	r3, r3, r2
 8012dea:	00db      	lsls	r3, r3, #3
 8012dec:	440b      	add	r3, r1
 8012dee:	33ad      	adds	r3, #173	; 0xad
 8012df0:	2201      	movs	r2, #1
 8012df2:	701a      	strb	r2, [r3, #0]
                break;
 8012df4:	e0db      	b.n	8012fae <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8012df6:	79fa      	ldrb	r2, [r7, #7]
 8012df8:	4974      	ldr	r1, [pc, #464]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	011b      	lsls	r3, r3, #4
 8012dfe:	1a9b      	subs	r3, r3, r2
 8012e00:	00db      	lsls	r3, r3, #3
 8012e02:	440b      	add	r3, r1
 8012e04:	33ad      	adds	r3, #173	; 0xad
 8012e06:	2200      	movs	r2, #0
 8012e08:	701a      	strb	r2, [r3, #0]
            break;
 8012e0a:	e0d0      	b.n	8012fae <rfalNfcPollActivation+0x542>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8012e0c:	4b6f      	ldr	r3, [pc, #444]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e0e:	7cdb      	ldrb	r3, [r3, #19]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f003 fcd7 	bl	80167c4 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8012e16:	79fa      	ldrb	r2, [r7, #7]
 8012e18:	496c      	ldr	r1, [pc, #432]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	011b      	lsls	r3, r3, #4
 8012e1e:	1a9b      	subs	r3, r3, r2
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	440b      	add	r3, r1
 8012e24:	3393      	adds	r3, #147	; 0x93
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d145      	bne.n	8012eb8 <rfalNfcPollActivation+0x44c>
 8012e2c:	79fa      	ldrb	r2, [r7, #7]
 8012e2e:	4967      	ldr	r1, [pc, #412]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e30:	4613      	mov	r3, r2
 8012e32:	011b      	lsls	r3, r3, #4
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	00db      	lsls	r3, r3, #3
 8012e38:	440b      	add	r3, r1
 8012e3a:	3394      	adds	r3, #148	; 0x94
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	2bfe      	cmp	r3, #254	; 0xfe
 8012e40:	d13a      	bne.n	8012eb8 <rfalNfcPollActivation+0x44c>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8012e42:	79fa      	ldrb	r2, [r7, #7]
 8012e44:	4613      	mov	r3, r2
 8012e46:	011b      	lsls	r3, r3, #4
 8012e48:	1a9b      	subs	r3, r3, r2
 8012e4a:	00db      	lsls	r3, r3, #3
 8012e4c:	3390      	adds	r3, #144	; 0x90
 8012e4e:	4a5f      	ldr	r2, [pc, #380]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e50:	1898      	adds	r0, r3, r2
 8012e52:	2300      	movs	r3, #0
 8012e54:	2200      	movs	r2, #0
 8012e56:	2100      	movs	r1, #0
 8012e58:	f000 fa0e 	bl	8013278 <rfalNfcNfcDepActivate>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d001      	beq.n	8012e6a <rfalNfcPollActivation+0x3fe>
 8012e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e68:	e0ac      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8012e6a:	79f9      	ldrb	r1, [r7, #7]
 8012e6c:	79fa      	ldrb	r2, [r7, #7]
 8012e6e:	460b      	mov	r3, r1
 8012e70:	011b      	lsls	r3, r3, #4
 8012e72:	1a5b      	subs	r3, r3, r1
 8012e74:	00db      	lsls	r3, r3, #3
 8012e76:	33b0      	adds	r3, #176	; 0xb0
 8012e78:	4954      	ldr	r1, [pc, #336]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e7a:	440b      	add	r3, r1
 8012e7c:	1c99      	adds	r1, r3, #2
 8012e7e:	4853      	ldr	r0, [pc, #332]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e80:	4613      	mov	r3, r2
 8012e82:	011b      	lsls	r3, r3, #4
 8012e84:	1a9b      	subs	r3, r3, r2
 8012e86:	00db      	lsls	r3, r3, #3
 8012e88:	4403      	add	r3, r0
 8012e8a:	33a8      	adds	r3, #168	; 0xa8
 8012e8c:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012e8e:	79fa      	ldrb	r2, [r7, #7]
 8012e90:	494e      	ldr	r1, [pc, #312]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012e92:	4613      	mov	r3, r2
 8012e94:	011b      	lsls	r3, r3, #4
 8012e96:	1a9b      	subs	r3, r3, r2
 8012e98:	00db      	lsls	r3, r3, #3
 8012e9a:	440b      	add	r3, r1
 8012e9c:	33ac      	adds	r3, #172	; 0xac
 8012e9e:	220a      	movs	r2, #10
 8012ea0:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8012ea2:	79fa      	ldrb	r2, [r7, #7]
 8012ea4:	4949      	ldr	r1, [pc, #292]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012ea6:	4613      	mov	r3, r2
 8012ea8:	011b      	lsls	r3, r3, #4
 8012eaa:	1a9b      	subs	r3, r3, r2
 8012eac:	00db      	lsls	r3, r3, #3
 8012eae:	440b      	add	r3, r1
 8012eb0:	33ad      	adds	r3, #173	; 0xad
 8012eb2:	2202      	movs	r2, #2
 8012eb4:	701a      	strb	r2, [r3, #0]
                break;
 8012eb6:	e07a      	b.n	8012fae <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8012eb8:	79f9      	ldrb	r1, [r7, #7]
 8012eba:	79fa      	ldrb	r2, [r7, #7]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	1a5b      	subs	r3, r3, r1
 8012ec2:	00db      	lsls	r3, r3, #3
 8012ec4:	3390      	adds	r3, #144	; 0x90
 8012ec6:	4941      	ldr	r1, [pc, #260]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012ec8:	440b      	add	r3, r1
 8012eca:	1cd9      	adds	r1, r3, #3
 8012ecc:	483f      	ldr	r0, [pc, #252]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012ece:	4613      	mov	r3, r2
 8012ed0:	011b      	lsls	r3, r3, #4
 8012ed2:	1a9b      	subs	r3, r3, r2
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	4403      	add	r3, r0
 8012ed8:	33a8      	adds	r3, #168	; 0xa8
 8012eda:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8012edc:	79fa      	ldrb	r2, [r7, #7]
 8012ede:	493b      	ldr	r1, [pc, #236]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012ee0:	4613      	mov	r3, r2
 8012ee2:	011b      	lsls	r3, r3, #4
 8012ee4:	1a9b      	subs	r3, r3, r2
 8012ee6:	00db      	lsls	r3, r3, #3
 8012ee8:	440b      	add	r3, r1
 8012eea:	33ac      	adds	r3, #172	; 0xac
 8012eec:	2208      	movs	r2, #8
 8012eee:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8012ef0:	79fa      	ldrb	r2, [r7, #7]
 8012ef2:	4936      	ldr	r1, [pc, #216]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	011b      	lsls	r3, r3, #4
 8012ef8:	1a9b      	subs	r3, r3, r2
 8012efa:	00db      	lsls	r3, r3, #3
 8012efc:	440b      	add	r3, r1
 8012efe:	33ad      	adds	r3, #173	; 0xad
 8012f00:	2200      	movs	r2, #0
 8012f02:	701a      	strb	r2, [r3, #0]
            break;
 8012f04:	e053      	b.n	8012fae <rfalNfcPollActivation+0x542>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8012f06:	f003 ffd7 	bl	8016eb8 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8012f0a:	79f9      	ldrb	r1, [r7, #7]
 8012f0c:	79fa      	ldrb	r2, [r7, #7]
 8012f0e:	460b      	mov	r3, r1
 8012f10:	011b      	lsls	r3, r3, #4
 8012f12:	1a5b      	subs	r3, r3, r1
 8012f14:	00db      	lsls	r3, r3, #3
 8012f16:	3390      	adds	r3, #144	; 0x90
 8012f18:	492c      	ldr	r1, [pc, #176]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f1a:	440b      	add	r3, r1
 8012f1c:	1cd9      	adds	r1, r3, #3
 8012f1e:	482b      	ldr	r0, [pc, #172]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f20:	4613      	mov	r3, r2
 8012f22:	011b      	lsls	r3, r3, #4
 8012f24:	1a9b      	subs	r3, r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	4403      	add	r3, r0
 8012f2a:	33a8      	adds	r3, #168	; 0xa8
 8012f2c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8012f2e:	79fa      	ldrb	r2, [r7, #7]
 8012f30:	4926      	ldr	r1, [pc, #152]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f32:	4613      	mov	r3, r2
 8012f34:	011b      	lsls	r3, r3, #4
 8012f36:	1a9b      	subs	r3, r3, r2
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	440b      	add	r3, r1
 8012f3c:	33ac      	adds	r3, #172	; 0xac
 8012f3e:	2208      	movs	r2, #8
 8012f40:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8012f42:	79fa      	ldrb	r2, [r7, #7]
 8012f44:	4921      	ldr	r1, [pc, #132]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f46:	4613      	mov	r3, r2
 8012f48:	011b      	lsls	r3, r3, #4
 8012f4a:	1a9b      	subs	r3, r3, r2
 8012f4c:	00db      	lsls	r3, r3, #3
 8012f4e:	440b      	add	r3, r1
 8012f50:	33ad      	adds	r3, #173	; 0xad
 8012f52:	2200      	movs	r2, #0
 8012f54:	701a      	strb	r2, [r3, #0]
            break;
 8012f56:	e02a      	b.n	8012fae <rfalNfcPollActivation+0x542>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8012f58:	f007 fc3f 	bl	801a7da <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8012f5c:	79f9      	ldrb	r1, [r7, #7]
 8012f5e:	79fa      	ldrb	r2, [r7, #7]
 8012f60:	460b      	mov	r3, r1
 8012f62:	011b      	lsls	r3, r3, #4
 8012f64:	1a5b      	subs	r3, r3, r1
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	3390      	adds	r3, #144	; 0x90
 8012f6a:	4918      	ldr	r1, [pc, #96]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f6c:	440b      	add	r3, r1
 8012f6e:	1c99      	adds	r1, r3, #2
 8012f70:	4816      	ldr	r0, [pc, #88]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f72:	4613      	mov	r3, r2
 8012f74:	011b      	lsls	r3, r3, #4
 8012f76:	1a9b      	subs	r3, r3, r2
 8012f78:	00db      	lsls	r3, r3, #3
 8012f7a:	4403      	add	r3, r0
 8012f7c:	33a8      	adds	r3, #168	; 0xa8
 8012f7e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 8012f80:	79fa      	ldrb	r2, [r7, #7]
 8012f82:	4912      	ldr	r1, [pc, #72]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f84:	4613      	mov	r3, r2
 8012f86:	011b      	lsls	r3, r3, #4
 8012f88:	1a9b      	subs	r3, r3, r2
 8012f8a:	00db      	lsls	r3, r3, #3
 8012f8c:	440b      	add	r3, r1
 8012f8e:	33ac      	adds	r3, #172	; 0xac
 8012f90:	2208      	movs	r2, #8
 8012f92:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8012f94:	79fa      	ldrb	r2, [r7, #7]
 8012f96:	490d      	ldr	r1, [pc, #52]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012f98:	4613      	mov	r3, r2
 8012f9a:	011b      	lsls	r3, r3, #4
 8012f9c:	1a9b      	subs	r3, r3, r2
 8012f9e:	00db      	lsls	r3, r3, #3
 8012fa0:	440b      	add	r3, r1
 8012fa2:	33ad      	adds	r3, #173	; 0xad
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	701a      	strb	r2, [r3, #0]
            break;
 8012fa8:	e001      	b.n	8012fae <rfalNfcPollActivation+0x542>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8012faa:	2321      	movs	r3, #33	; 0x21
 8012fac:	e00a      	b.n	8012fc4 <rfalNfcPollActivation+0x558>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8012fae:	79fa      	ldrb	r2, [r7, #7]
 8012fb0:	4613      	mov	r3, r2
 8012fb2:	011b      	lsls	r3, r3, #4
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	00db      	lsls	r3, r3, #3
 8012fb8:	3390      	adds	r3, #144	; 0x90
 8012fba:	4a04      	ldr	r2, [pc, #16]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012fbc:	4413      	add	r3, r2
 8012fbe:	4a03      	ldr	r2, [pc, #12]	; (8012fcc <rfalNfcPollActivation+0x560>)
 8012fc0:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8012fc2:	2300      	movs	r3, #0
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3728      	adds	r7, #40	; 0x28
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	20003328 	.word	0x20003328

08012fd0 <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8012fd6:	1c7a      	adds	r2, r7, #1
 8012fd8:	1cbb      	adds	r3, r7, #2
 8012fda:	4611      	mov	r1, r2
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f007 f819 	bl	801a014 <rfalListenGetState>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	71fb      	strb	r3, [r7, #7]
    switch(lmSt)
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	3b01      	subs	r3, #1
 8012fea:	2b0f      	cmp	r3, #15
 8012fec:	f200 8136 	bhi.w	801325c <rfalNfcListenActivation+0x28c>
 8012ff0:	a201      	add	r2, pc, #4	; (adr r2, 8012ff8 <rfalNfcListenActivation+0x28>)
 8012ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff6:	bf00      	nop
 8012ff8:	08013259 	.word	0x08013259
 8012ffc:	080131bd 	.word	0x080131bd
 8013000:	08013255 	.word	0x08013255
 8013004:	0801325d 	.word	0x0801325d
 8013008:	080130f1 	.word	0x080130f1
 801300c:	08013039 	.word	0x08013039
 8013010:	0801325d 	.word	0x0801325d
 8013014:	0801325d 	.word	0x0801325d
 8013018:	08013177 	.word	0x08013177
 801301c:	0801319b 	.word	0x0801319b
 8013020:	0801319b 	.word	0x0801319b
 8013024:	08013255 	.word	0x08013255
 8013028:	0801325d 	.word	0x0801325d
 801302c:	08013255 	.word	0x08013255
 8013030:	08013039 	.word	0x08013039
 8013034:	08013255 	.word	0x08013255
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8013038:	78bb      	ldrb	r3, [r7, #2]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d056      	beq.n	80130ec <rfalNfcListenActivation+0x11c>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 801303e:	2302      	movs	r3, #2
 8013040:	70fb      	strb	r3, [r7, #3]
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 8013042:	4b89      	ldr	r3, [pc, #548]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013044:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013048:	3307      	adds	r3, #7
 801304a:	08db      	lsrs	r3, r3, #3
 801304c:	b29b      	uxth	r3, r3
 801304e:	4619      	mov	r1, r3
 8013050:	4886      	ldr	r0, [pc, #536]	; (801326c <rfalNfcListenActivation+0x29c>)
 8013052:	f002 ffa8 	bl	8015fa6 <rfalNfcaListenerIsSleepReq>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d00c      	beq.n	8013076 <rfalNfcListenActivation+0xa6>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 801305c:	4b84      	ldr	r3, [pc, #528]	; (8013270 <rfalNfcListenActivation+0x2a0>)
 801305e:	22ff      	movs	r2, #255	; 0xff
 8013060:	4982      	ldr	r1, [pc, #520]	; (801326c <rfalNfcListenActivation+0x29c>)
 8013062:	200c      	movs	r0, #12
 8013064:	f006 ffc6 	bl	8019ff4 <rfalListenSleepStart>
 8013068:	4603      	mov	r3, r0
 801306a:	80bb      	strh	r3, [r7, #4]
 801306c:	88bb      	ldrh	r3, [r7, #4]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d03c      	beq.n	80130ec <rfalNfcListenActivation+0x11c>
 8013072:	88bb      	ldrh	r3, [r7, #4]
 8013074:	e0f4      	b.n	8013260 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8013076:	78fb      	ldrb	r3, [r7, #3]
 8013078:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801307c:	4a7a      	ldr	r2, [pc, #488]	; (8013268 <rfalNfcListenActivation+0x298>)
 801307e:	4413      	add	r3, r2
 8013080:	1cd8      	adds	r0, r3, #3
 8013082:	4b79      	ldr	r3, [pc, #484]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013084:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013088:	3307      	adds	r3, #7
 801308a:	08db      	lsrs	r3, r3, #3
 801308c:	b29a      	uxth	r2, r3
 801308e:	78fb      	ldrb	r3, [r7, #3]
 8013090:	b29b      	uxth	r3, r3
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	b29b      	uxth	r3, r3
 8013096:	4a74      	ldr	r2, [pc, #464]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013098:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801309c:	4619      	mov	r1, r3
 801309e:	f001 fd6d 	bl	8014b7c <rfalNfcDepIsAtrReq>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d01f      	beq.n	80130e8 <rfalNfcListenActivation+0x118>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 80130a8:	4b6f      	ldr	r3, [pc, #444]	; (8013268 <rfalNfcListenActivation+0x298>)
 80130aa:	220a      	movs	r2, #10
 80130ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 80130b0:	78fb      	ldrb	r3, [r7, #3]
 80130b2:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80130b6:	4a6c      	ldr	r2, [pc, #432]	; (8013268 <rfalNfcListenActivation+0x298>)
 80130b8:	4413      	add	r3, r2
 80130ba:	1cd9      	adds	r1, r3, #3
 80130bc:	4b6a      	ldr	r3, [pc, #424]	; (8013268 <rfalNfcListenActivation+0x298>)
 80130be:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80130c2:	3307      	adds	r3, #7
 80130c4:	08db      	lsrs	r3, r3, #3
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	78fb      	ldrb	r3, [r7, #3]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	460a      	mov	r2, r1
 80130d2:	2100      	movs	r1, #0
 80130d4:	4867      	ldr	r0, [pc, #412]	; (8013274 <rfalNfcListenActivation+0x2a4>)
 80130d6:	f000 f8cf 	bl	8013278 <rfalNfcNfcDepActivate>
 80130da:	4603      	mov	r3, r0
 80130dc:	80bb      	strh	r3, [r7, #4]
 80130de:	88bb      	ldrh	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <rfalNfcListenActivation+0x11c>
 80130e4:	88bb      	ldrh	r3, [r7, #4]
 80130e6:	e0bb      	b.n	8013260 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 80130e8:	230b      	movs	r3, #11
 80130ea:	e0b9      	b.n	8013260 <rfalNfcListenActivation+0x290>
                }
            }
            return ERR_BUSY;
 80130ec:	2302      	movs	r3, #2
 80130ee:	e0b7      	b.n	8013260 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 80130f0:	78bb      	ldrb	r3, [r7, #2]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d03d      	beq.n	8013172 <rfalNfcListenActivation+0x1a2>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 80130f6:	2301      	movs	r3, #1
 80130f8:	70fb      	strb	r3, [r7, #3]
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 80130fa:	78fb      	ldrb	r3, [r7, #3]
 80130fc:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8013100:	4a59      	ldr	r2, [pc, #356]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013102:	4413      	add	r3, r2
 8013104:	1cd8      	adds	r0, r3, #3
 8013106:	4b58      	ldr	r3, [pc, #352]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013108:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801310c:	3307      	adds	r3, #7
 801310e:	08db      	lsrs	r3, r3, #3
 8013110:	b29a      	uxth	r2, r3
 8013112:	78fb      	ldrb	r3, [r7, #3]
 8013114:	b29b      	uxth	r3, r3
 8013116:	1ad3      	subs	r3, r2, r3
 8013118:	b29b      	uxth	r3, r3
 801311a:	4a53      	ldr	r2, [pc, #332]	; (8013268 <rfalNfcListenActivation+0x298>)
 801311c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8013120:	4619      	mov	r1, r3
 8013122:	f001 fd2b 	bl	8014b7c <rfalNfcDepIsAtrReq>
 8013126:	4603      	mov	r3, r0
 8013128:	2b00      	cmp	r3, #0
 801312a:	d01f      	beq.n	801316c <rfalNfcListenActivation+0x19c>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 801312c:	4b4e      	ldr	r3, [pc, #312]	; (8013268 <rfalNfcListenActivation+0x298>)
 801312e:	220c      	movs	r2, #12
 8013130:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8013134:	78fb      	ldrb	r3, [r7, #3]
 8013136:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801313a:	4a4b      	ldr	r2, [pc, #300]	; (8013268 <rfalNfcListenActivation+0x298>)
 801313c:	4413      	add	r3, r2
 801313e:	1cd9      	adds	r1, r3, #3
 8013140:	4b49      	ldr	r3, [pc, #292]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013142:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013146:	3307      	adds	r3, #7
 8013148:	08db      	lsrs	r3, r3, #3
 801314a:	b29a      	uxth	r2, r3
 801314c:	78fb      	ldrb	r3, [r7, #3]
 801314e:	b29b      	uxth	r3, r3
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	b29b      	uxth	r3, r3
 8013154:	460a      	mov	r2, r1
 8013156:	2100      	movs	r1, #0
 8013158:	4846      	ldr	r0, [pc, #280]	; (8013274 <rfalNfcListenActivation+0x2a4>)
 801315a:	f000 f88d 	bl	8013278 <rfalNfcNfcDepActivate>
 801315e:	4603      	mov	r3, r0
 8013160:	80bb      	strh	r3, [r7, #4]
 8013162:	88bb      	ldrh	r3, [r7, #4]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d004      	beq.n	8013172 <rfalNfcListenActivation+0x1a2>
 8013168:	88bb      	ldrh	r3, [r7, #4]
 801316a:	e079      	b.n	8013260 <rfalNfcListenActivation+0x290>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 801316c:	2009      	movs	r0, #9
 801316e:	f006 ff71 	bl	801a054 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 8013172:	2302      	movs	r3, #2
 8013174:	e074      	b.n	8013260 <rfalNfcListenActivation+0x290>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 8013176:	4b3c      	ldr	r3, [pc, #240]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013178:	220c      	movs	r2, #12
 801317a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 801317e:	4b3a      	ldr	r3, [pc, #232]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013180:	2200      	movs	r2, #0
 8013182:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devList->nfcid       = NULL;
 8013186:	4b38      	ldr	r3, [pc, #224]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013188:	2200      	movs	r2, #0
 801318a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 801318e:	4b36      	ldr	r3, [pc, #216]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013190:	2200      	movs	r2, #0
 8013192:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            
            return ERR_NONE;
 8013196:	2300      	movs	r3, #0
 8013198:	e062      	b.n	8013260 <rfalNfcListenActivation+0x290>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 801319a:	f002 fa57 	bl	801564c <rfalNfcDepListenGetActivationStatus>
 801319e:	4603      	mov	r3, r0
 80131a0:	80bb      	strh	r3, [r7, #4]
            if( ret == ERR_NONE )
 80131a2:	88bb      	ldrh	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d107      	bne.n	80131b8 <rfalNfcListenActivation+0x1e8>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80131a8:	4b2f      	ldr	r3, [pc, #188]	; (8013268 <rfalNfcListenActivation+0x298>)
 80131aa:	2202      	movs	r2, #2
 80131ac:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 80131b0:	4b2d      	ldr	r3, [pc, #180]	; (8013268 <rfalNfcListenActivation+0x298>)
 80131b2:	220a      	movs	r2, #10
 80131b4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            }
            return ret;
 80131b8:	88bb      	ldrh	r3, [r7, #4]
 80131ba:	e051      	b.n	8013260 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 80131bc:	78bb      	ldrb	r3, [r7, #2]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d046      	beq.n	8013250 <rfalNfcListenActivation+0x280>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 80131c2:	4b29      	ldr	r3, [pc, #164]	; (8013268 <rfalNfcListenActivation+0x298>)
 80131c4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80131c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d03f      	beq.n	8013250 <rfalNfcListenActivation+0x280>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 80131d0:	787b      	ldrb	r3, [r7, #1]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <rfalNfcListenActivation+0x20a>
 80131d6:	2302      	movs	r3, #2
 80131d8:	e000      	b.n	80131dc <rfalNfcListenActivation+0x20c>
 80131da:	2301      	movs	r3, #1
 80131dc:	70fb      	strb	r3, [r7, #3]
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 80131de:	78fb      	ldrb	r3, [r7, #3]
 80131e0:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80131e4:	4a20      	ldr	r2, [pc, #128]	; (8013268 <rfalNfcListenActivation+0x298>)
 80131e6:	4413      	add	r3, r2
 80131e8:	1cd8      	adds	r0, r3, #3
 80131ea:	4b1f      	ldr	r3, [pc, #124]	; (8013268 <rfalNfcListenActivation+0x298>)
 80131ec:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80131f0:	3307      	adds	r3, #7
 80131f2:	08db      	lsrs	r3, r3, #3
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	78fb      	ldrb	r3, [r7, #3]
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	2200      	movs	r2, #0
 8013200:	4619      	mov	r1, r3
 8013202:	f001 fcbb 	bl	8014b7c <rfalNfcDepIsAtrReq>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d01f      	beq.n	801324c <rfalNfcListenActivation+0x27c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 801320c:	4b16      	ldr	r3, [pc, #88]	; (8013268 <rfalNfcListenActivation+0x298>)
 801320e:	220f      	movs	r2, #15
 8013210:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801321a:	4a13      	ldr	r2, [pc, #76]	; (8013268 <rfalNfcListenActivation+0x298>)
 801321c:	4413      	add	r3, r2
 801321e:	1cd9      	adds	r1, r3, #3
 8013220:	4b11      	ldr	r3, [pc, #68]	; (8013268 <rfalNfcListenActivation+0x298>)
 8013222:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013226:	3307      	adds	r3, #7
 8013228:	08db      	lsrs	r3, r3, #3
 801322a:	b29a      	uxth	r2, r3
 801322c:	78fb      	ldrb	r3, [r7, #3]
 801322e:	b29b      	uxth	r3, r3
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	b29b      	uxth	r3, r3
 8013234:	460a      	mov	r2, r1
 8013236:	2101      	movs	r1, #1
 8013238:	480e      	ldr	r0, [pc, #56]	; (8013274 <rfalNfcListenActivation+0x2a4>)
 801323a:	f000 f81d 	bl	8013278 <rfalNfcNfcDepActivate>
 801323e:	4603      	mov	r3, r0
 8013240:	80bb      	strh	r3, [r7, #4]
 8013242:	88bb      	ldrh	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d003      	beq.n	8013250 <rfalNfcListenActivation+0x280>
 8013248:	88bb      	ldrh	r3, [r7, #4]
 801324a:	e009      	b.n	8013260 <rfalNfcListenActivation+0x290>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 801324c:	230b      	movs	r3, #11
 801324e:	e007      	b.n	8013260 <rfalNfcListenActivation+0x290>
                    }
                }
            }
            return ERR_BUSY;
 8013250:	2302      	movs	r3, #2
 8013252:	e005      	b.n	8013260 <rfalNfcListenActivation+0x290>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 8013254:	2302      	movs	r3, #2
 8013256:	e003      	b.n	8013260 <rfalNfcListenActivation+0x290>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 8013258:	2325      	movs	r3, #37	; 0x25
 801325a:	e001      	b.n	8013260 <rfalNfcListenActivation+0x290>
        
        default:                                                                      /* Wait for activation */
            break;
 801325c:	bf00      	nop
    }

    return ERR_INTERNAL;
 801325e:	230c      	movs	r3, #12
}
 8013260:	4618      	mov	r0, r3
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	20003328 	.word	0x20003328
 801326c:	20003723 	.word	0x20003723
 8013270:	20003826 	.word	0x20003826
 8013274:	200033b8 	.word	0x200033b8

08013278 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8013278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801327a:	b0a5      	sub	sp, #148	; 0x94
 801327c:	af04      	add	r7, sp, #16
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	607a      	str	r2, [r7, #4]
 8013282:	461a      	mov	r2, r3
 8013284:	460b      	mov	r3, r1
 8013286:	72fb      	strb	r3, [r7, #11]
 8013288:	4613      	mov	r3, r2
 801328a:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b05      	cmp	r3, #5
 8013292:	d838      	bhi.n	8013306 <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	2b02      	cmp	r3, #2
 801329a:	d106      	bne.n	80132aa <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	3303      	adds	r3, #3
 80132a0:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 80132a2:	2308      	movs	r3, #8
 80132a4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 80132a8:	e004      	b.n	80132b4 <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 80132aa:	4b3e      	ldr	r3, [pc, #248]	; (80133a4 <rfalNfcNfcDepActivate+0x12c>)
 80132ac:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80132ae:	230a      	movs	r3, #10
 80132b0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80132b4:	2300      	movs	r3, #0
 80132b6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80132ba:	2300      	movs	r3, #0
 80132bc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 80132c0:	2300      	movs	r3, #0
 80132c2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 80132c6:	2300      	movs	r3, #0
 80132c8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 80132cc:	2303      	movs	r3, #3
 80132ce:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 80132d2:	4b35      	ldr	r3, [pc, #212]	; (80133a8 <rfalNfcNfcDepActivate+0x130>)
 80132d4:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 80132d6:	4b35      	ldr	r3, [pc, #212]	; (80133ac <rfalNfcNfcDepActivate+0x134>)
 80132d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80132dc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 80132e0:	7afb      	ldrb	r3, [r7, #11]
 80132e2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 80132e6:	230e      	movs	r3, #14
 80132e8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 80132ec:	f001 fb88 	bl	8014a00 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f103 0220 	add.w	r2, r3, #32
 80132f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80132fa:	2102      	movs	r1, #2
 80132fc:	4618      	mov	r0, r3
 80132fe:	f001 ff29 	bl	8015154 <rfalNfcDepInitiatorHandleActivation>
 8013302:	4603      	mov	r3, r0
 8013304:	e04a      	b.n	801339c <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	2b09      	cmp	r3, #9
 801330c:	d945      	bls.n	801339a <rfalNfcNfcDepActivate+0x122>
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b0f      	cmp	r3, #15
 8013314:	d841      	bhi.n	801339a <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8013316:	4b25      	ldr	r3, [pc, #148]	; (80133ac <rfalNfcNfcDepActivate+0x134>)
 8013318:	f107 0215 	add.w	r2, r7, #21
 801331c:	3314      	adds	r3, #20
 801331e:	cb03      	ldmia	r3!, {r0, r1}
 8013320:	6010      	str	r0, [r2, #0]
 8013322:	6051      	str	r1, [r2, #4]
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8013328:	2300      	movs	r3, #0
 801332a:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801332c:	2300      	movs	r3, #0
 801332e:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 8013332:	230e      	movs	r3, #14
 8013334:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8013338:	2330      	movs	r3, #48	; 0x30
 801333a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        targetParam.GBtLen    = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8013344:	230e      	movs	r3, #14
 8013346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 801334a:	7afb      	ldrb	r3, [r7, #11]
 801334c:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 801334e:	4b18      	ldr	r3, [pc, #96]	; (80133b0 <rfalNfcNfcDepActivate+0x138>)
 8013350:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 8013352:	4b18      	ldr	r3, [pc, #96]	; (80133b4 <rfalNfcNfcDepActivate+0x13c>)
 8013354:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8013356:	4b18      	ldr	r3, [pc, #96]	; (80133b8 <rfalNfcNfcDepActivate+0x140>)
 8013358:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 801335a:	4b18      	ldr	r3, [pc, #96]	; (80133bc <rfalNfcNfcDepActivate+0x144>)
 801335c:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	2b0a      	cmp	r3, #10
 8013364:	d101      	bne.n	801336a <rfalNfcNfcDepActivate+0xf2>
 8013366:	230a      	movs	r3, #10
 8013368:	e000      	b.n	801336c <rfalNfcNfcDepActivate+0xf4>
 801336a:	230b      	movs	r3, #11
 801336c:	4618      	mov	r0, r3
 801336e:	f006 fe71 	bl	801a054 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 8013372:	f001 fb45 	bl	8014a00 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8013376:	893e      	ldrh	r6, [r7, #8]
 8013378:	f107 0514 	add.w	r5, r7, #20
 801337c:	466c      	mov	r4, sp
 801337e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801338c:	4632      	mov	r2, r6
 801338e:	6879      	ldr	r1, [r7, #4]
 8013390:	4628      	mov	r0, r5
 8013392:	f002 f849 	bl	8015428 <rfalNfcDepListenStartActivation>
 8013396:	4603      	mov	r3, r0
 8013398:	e000      	b.n	801339c <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 801339a:	230c      	movs	r3, #12
    }
}
 801339c:	4618      	mov	r0, r3
 801339e:	3784      	adds	r7, #132	; 0x84
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133a4:	2000333c 	.word	0x2000333c
 80133a8:	20003346 	.word	0x20003346
 80133ac:	20003328 	.word	0x20003328
 80133b0:	20003723 	.word	0x20003723
 80133b4:	20003826 	.word	0x20003826
 80133b8:	2000361b 	.word	0x2000361b
 80133bc:	200033d8 	.word	0x200033d8

080133c0 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 80133c4:	4b11      	ldr	r3, [pc, #68]	; (801340c <rfalNfcDeactivation+0x4c>)
 80133c6:	689b      	ldr	r3, [r3, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d012      	beq.n	80133f2 <rfalNfcDeactivation+0x32>
    {
        switch( gNfcDev.activeDev->rfInterface )
 80133cc:	4b0f      	ldr	r3, [pc, #60]	; (801340c <rfalNfcDeactivation+0x4c>)
 80133ce:	689b      	ldr	r3, [r3, #8]
 80133d0:	7f5b      	ldrb	r3, [r3, #29]
 80133d2:	2b02      	cmp	r3, #2
 80133d4:	d008      	beq.n	80133e8 <rfalNfcDeactivation+0x28>
 80133d6:	2b02      	cmp	r3, #2
 80133d8:	dc09      	bgt.n	80133ee <rfalNfcDeactivation+0x2e>
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00b      	beq.n	80133f6 <rfalNfcDeactivation+0x36>
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d105      	bne.n	80133ee <rfalNfcDeactivation+0x2e>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 80133e2:	f7fd fb35 	bl	8010a50 <rfalIsoDepDeselect>
                break;
 80133e6:	e007      	b.n	80133f8 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 80133e8:	f001 fe4c 	bl	8015084 <rfalNfcDepRLS>
                break;
 80133ec:	e004      	b.n	80133f8 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 80133ee:	2305      	movs	r3, #5
 80133f0:	e00a      	b.n	8013408 <rfalNfcDeactivation+0x48>
        }
    }
 80133f2:	bf00      	nop
 80133f4:	e000      	b.n	80133f8 <rfalNfcDeactivation+0x38>
                break;                                                                /* No specific deactivation to be performed */
 80133f6:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 80133f8:	f007 f918 	bl	801a62c <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 80133fc:	f006 fdde 	bl	8019fbc <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8013400:	4b02      	ldr	r3, [pc, #8]	; (801340c <rfalNfcDeactivation+0x4c>)
 8013402:	2200      	movs	r2, #0
 8013404:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 8013406:	2300      	movs	r3, #0
}
 8013408:	4618      	mov	r0, r3
 801340a:	bd80      	pop	{r7, pc}
 801340c:	20003328 	.word	0x20003328

08013410 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8013410:	b480      	push	{r7}
 8013412:	b085      	sub	sp, #20
 8013414:	af00      	add	r7, sp, #0
 8013416:	4603      	mov	r3, r0
 8013418:	71fb      	strb	r3, [r7, #7]
 801341a:	460b      	mov	r3, r1
 801341c:	71bb      	strb	r3, [r7, #6]
 801341e:	4613      	mov	r3, r2
 8013420:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8013422:	797a      	ldrb	r2, [r7, #5]
 8013424:	79bb      	ldrb	r3, [r7, #6]
 8013426:	4293      	cmp	r3, r2
 8013428:	bf28      	it	cs
 801342a:	4613      	movcs	r3, r2
 801342c:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 801342e:	79fb      	ldrb	r3, [r7, #7]
 8013430:	2b02      	cmp	r3, #2
 8013432:	d801      	bhi.n	8013438 <nfcipDxIsSupported+0x28>
	{
		return true;
 8013434:	2301      	movs	r3, #1
 8013436:	e008      	b.n	801344a <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	2b03      	cmp	r3, #3
 801343c:	d104      	bne.n	8013448 <nfcipDxIsSupported+0x38>
 801343e:	7bfb      	ldrb	r3, [r7, #15]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d001      	beq.n	8013448 <nfcipDxIsSupported+0x38>
	{
		return true;
 8013444:	2301      	movs	r3, #1
 8013446:	e000      	b.n	801344a <nfcipDxIsSupported+0x3a>
	}

	return false;
 8013448:	2300      	movs	r3, #0
}
 801344a:	4618      	mov	r0, r3
 801344c:	3714      	adds	r7, #20
 801344e:	46bd      	mov	sp, r7
 8013450:	bc80      	pop	{r7}
 8013452:	4770      	bx	lr

08013454 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af02      	add	r7, sp, #8
 801345a:	60b9      	str	r1, [r7, #8]
 801345c:	607a      	str	r2, [r7, #4]
 801345e:	603b      	str	r3, [r7, #0]
 8013460:	4603      	mov	r3, r0
 8013462:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 8013464:	7bfb      	ldrb	r3, [r7, #15]
 8013466:	2b06      	cmp	r3, #6
 8013468:	d002      	beq.n	8013470 <nfcipTxRx+0x1c>
 801346a:	7bfb      	ldrb	r3, [r7, #15]
 801346c:	2b07      	cmp	r3, #7
 801346e:	d101      	bne.n	8013474 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 8013470:	2307      	movs	r3, #7
 8013472:	e030      	b.n	80134d6 <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 8013474:	4a1a      	ldr	r2, [pc, #104]	; (80134e0 <nfcipTxRx+0x8c>)
 8013476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013478:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 801347a:	4a19      	ldr	r2, [pc, #100]	; (80134e0 <nfcipTxRx+0x8c>)
 801347c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801347e:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8013482:	4a17      	ldr	r2, [pc, #92]	; (80134e0 <nfcipTxRx+0x8c>)
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d013      	beq.n	80134b6 <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 801348e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013492:	b29a      	uxth	r2, r3
 8013494:	7bf8      	ldrb	r0, [r7, #15]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	2300      	movs	r3, #0
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	4613      	mov	r3, r2
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	68b9      	ldr	r1, [r7, #8]
 80134a4:	f000 ffac 	bl	8014400 <nfcipTx>
 80134a8:	4603      	mov	r3, r0
 80134aa:	82fb      	strh	r3, [r7, #22]
 80134ac:	8afb      	ldrh	r3, [r7, #22]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d001      	beq.n	80134b6 <nfcipTxRx+0x62>
 80134b2:	8afb      	ldrh	r3, [r7, #22]
 80134b4:	e00f      	b.n	80134d6 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 80134b6:	2001      	movs	r0, #1
 80134b8:	f001 ff72 	bl	80153a0 <nfcipDataRx>
 80134bc:	4603      	mov	r3, r0
 80134be:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80134c0:	8afb      	ldrh	r3, [r7, #22]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <nfcipTxRx+0x76>
    {
        return ret;
 80134c6:	8afb      	ldrh	r3, [r7, #22]
 80134c8:	e005      	b.n	80134d6 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 80134ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d2:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3718      	adds	r7, #24
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20003828 	.word	0x20003828

080134e4 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08c      	sub	sp, #48	; 0x30
 80134e8:	af02      	add	r7, sp, #8
 80134ea:	4603      	mov	r3, r0
 80134ec:	460a      	mov	r2, r1
 80134ee:	71fb      	strb	r3, [r7, #7]
 80134f0:	4613      	mov	r3, r2
 80134f2:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 80134f4:	4b2a      	ldr	r3, [pc, #168]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d101      	bne.n	8013500 <nfcipDEPControlMsg+0x1c>
 80134fc:	2307      	movs	r3, #7
 80134fe:	e000      	b.n	8013502 <nfcipDEPControlMsg+0x1e>
 8013500:	2306      	movs	r3, #6
 8013502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8013506:	4b26      	ldr	r3, [pc, #152]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	2b01      	cmp	r3, #1
 801350c:	d018      	beq.n	8013540 <nfcipDEPControlMsg+0x5c>
 801350e:	79fb      	ldrb	r3, [r7, #7]
 8013510:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013514:	2b80      	cmp	r3, #128	; 0x80
 8013516:	d10d      	bne.n	8013534 <nfcipDEPControlMsg+0x50>
 8013518:	79fb      	ldrb	r3, [r7, #7]
 801351a:	f003 0310 	and.w	r3, r3, #16
 801351e:	2b00      	cmp	r3, #0
 8013520:	d008      	beq.n	8013534 <nfcipDEPControlMsg+0x50>
 8013522:	79bb      	ldrb	r3, [r7, #6]
 8013524:	4a1e      	ldr	r2, [pc, #120]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 8013526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013528:	fb03 f202 	mul.w	r2, r3, r2
 801352c:	4b1c      	ldr	r3, [pc, #112]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 801352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013530:	4413      	add	r3, r2
 8013532:	e007      	b.n	8013544 <nfcipDEPControlMsg+0x60>
 8013534:	4b1a      	ldr	r3, [pc, #104]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 8013536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013538:	4b19      	ldr	r3, [pc, #100]	; (80135a0 <nfcipDEPControlMsg+0xbc>)
 801353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801353c:	4413      	add	r3, r2
 801353e:	e001      	b.n	8013544 <nfcipDEPControlMsg+0x60>
 8013540:	f04f 33ff 	mov.w	r3, #4294967295
 8013544:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801354c:	2b80      	cmp	r3, #128	; 0x80
 801354e:	d116      	bne.n	801357e <nfcipDEPControlMsg+0x9a>
 8013550:	79fb      	ldrb	r3, [r7, #7]
 8013552:	f003 0310 	and.w	r3, r3, #16
 8013556:	2b00      	cmp	r3, #0
 8013558:	d011      	beq.n	801357e <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 801355a:	79bb      	ldrb	r3, [r7, #6]
 801355c:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 801355e:	f107 030c 	add.w	r3, r7, #12
 8013562:	1d5a      	adds	r2, r3, #5
 8013564:	f107 010c 	add.w	r1, r7, #12
 8013568:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 801356c:	6a3b      	ldr	r3, [r7, #32]
 801356e:	9301      	str	r3, [sp, #4]
 8013570:	79fb      	ldrb	r3, [r7, #7]
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	2301      	movs	r3, #1
 8013576:	f000 ff43 	bl	8014400 <nfcipTx>
 801357a:	4603      	mov	r3, r0
 801357c:	e00c      	b.n	8013598 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 801357e:	f107 010c 	add.w	r1, r7, #12
 8013582:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8013586:	6a3b      	ldr	r3, [r7, #32]
 8013588:	9301      	str	r3, [sp, #4]
 801358a:	79fb      	ldrb	r3, [r7, #7]
 801358c:	9300      	str	r3, [sp, #0]
 801358e:	2300      	movs	r3, #0
 8013590:	2200      	movs	r2, #0
 8013592:	f000 ff35 	bl	8014400 <nfcipTx>
 8013596:	4603      	mov	r3, r0
    }
}
 8013598:	4618      	mov	r0, r3
 801359a:	3728      	adds	r7, #40	; 0x28
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	20003828 	.word	0x20003828

080135a4 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 80135a4:	b480      	push	{r7}
 80135a6:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 80135a8:	4b0b      	ldr	r3, [pc, #44]	; (80135d8 <nfcipClearCounters+0x34>)
 80135aa:	2200      	movs	r2, #0
 80135ac:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 80135b0:	4b09      	ldr	r3, [pc, #36]	; (80135d8 <nfcipClearCounters+0x34>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 80135b8:	4b07      	ldr	r3, [pc, #28]	; (80135d8 <nfcipClearCounters+0x34>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 80135c0:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <nfcipClearCounters+0x34>)
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 80135c8:	4b03      	ldr	r3, [pc, #12]	; (80135d8 <nfcipClearCounters+0x34>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80135d0:	bf00      	nop
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bc80      	pop	{r7}
 80135d6:	4770      	bx	lr
 80135d8:	20003828 	.word	0x20003828

080135dc <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60ba      	str	r2, [r7, #8]
 80135e4:	607b      	str	r3, [r7, #4]
 80135e6:	4603      	mov	r3, r0
 80135e8:	81fb      	strh	r3, [r7, #14]
 80135ea:	460b      	mov	r3, r1
 80135ec:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 80135ee:	230c      	movs	r3, #12
 80135f0:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 80135f6:	2300      	movs	r3, #0
 80135f8:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	2200      	movs	r2, #0
 80135fe:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8013606:	89fb      	ldrh	r3, [r7, #14]
 8013608:	2b1d      	cmp	r3, #29
 801360a:	f200 80c6 	bhi.w	801379a <nfcipInitiatorHandleDEP+0x1be>
 801360e:	a201      	add	r2, pc, #4	; (adr r2, 8013614 <nfcipInitiatorHandleDEP+0x38>)
 8013610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013614:	0801379f 	.word	0x0801379f
 8013618:	0801379b 	.word	0x0801379b
 801361c:	08013797 	.word	0x08013797
 8013620:	0801379b 	.word	0x0801379b
 8013624:	0801368d 	.word	0x0801368d
 8013628:	0801379b 	.word	0x0801379b
 801362c:	0801379b 	.word	0x0801379b
 8013630:	0801379b 	.word	0x0801379b
 8013634:	0801379b 	.word	0x0801379b
 8013638:	08013753 	.word	0x08013753
 801363c:	0801379b 	.word	0x0801379b
 8013640:	0801379b 	.word	0x0801379b
 8013644:	0801379b 	.word	0x0801379b
 8013648:	0801379b 	.word	0x0801379b
 801364c:	0801379b 	.word	0x0801379b
 8013650:	0801379b 	.word	0x0801379b
 8013654:	0801379b 	.word	0x0801379b
 8013658:	0801379b 	.word	0x0801379b
 801365c:	0801379b 	.word	0x0801379b
 8013660:	0801379b 	.word	0x0801379b
 8013664:	0801379b 	.word	0x0801379b
 8013668:	08013753 	.word	0x08013753
 801366c:	0801379b 	.word	0x0801379b
 8013670:	0801379b 	.word	0x0801379b
 8013674:	0801379b 	.word	0x0801379b
 8013678:	0801379b 	.word	0x0801379b
 801367c:	0801379b 	.word	0x0801379b
 8013680:	08013753 	.word	0x08013753
 8013684:	0801379b 	.word	0x0801379b
 8013688:	08013753 	.word	0x08013753
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 801368c:	4ba1      	ldr	r3, [pc, #644]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 801368e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	b2d1      	uxtb	r1, r2
 8013696:	4a9f      	ldr	r2, [pc, #636]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013698:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 801369c:	2b02      	cmp	r3, #2
 801369e:	d901      	bls.n	80136a4 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 80136a0:	230b      	movs	r3, #11
 80136a2:	e264      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 80136a4:	4b9b      	ldr	r3, [pc, #620]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d008      	beq.n	80136c0 <nfcipInitiatorHandleDEP+0xe4>
 80136ae:	4b99      	ldr	r3, [pc, #612]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136b4:	4798      	blx	r3
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d001      	beq.n	80136c0 <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 80136bc:	2304      	movs	r3, #4
 80136be:	e256      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 80136c0:	4b94      	ldr	r3, [pc, #592]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80136c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80136ca:	2b40      	cmp	r3, #64	; 0x40
 80136cc:	d128      	bne.n	8013720 <nfcipInitiatorHandleDEP+0x144>
 80136ce:	4b91      	ldr	r3, [pc, #580]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136d0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80136d4:	f003 0310 	and.w	r3, r3, #16
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d021      	beq.n	8013720 <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 80136dc:	4b8d      	ldr	r3, [pc, #564]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80136e2:	1c5a      	adds	r2, r3, #1
 80136e4:	b2d1      	uxtb	r1, r2
 80136e6:	4a8b      	ldr	r2, [pc, #556]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136e8:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 80136ec:	2b02      	cmp	r3, #2
 80136ee:	d901      	bls.n	80136f4 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 80136f0:	230b      	movs	r3, #11
 80136f2:	e23c      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 80136f4:	4b87      	ldr	r3, [pc, #540]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80136f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136fa:	f003 0303 	and.w	r3, r3, #3
 80136fe:	b2db      	uxtb	r3, r3
 8013700:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2100      	movs	r1, #0
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff feeb 	bl	80134e4 <nfcipDEPControlMsg>
 801370e:	4603      	mov	r3, r0
 8013710:	82fb      	strh	r3, [r7, #22]
 8013712:	8afb      	ldrh	r3, [r7, #22]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d001      	beq.n	801371c <nfcipInitiatorHandleDEP+0x140>
 8013718:	8afb      	ldrh	r3, [r7, #22]
 801371a:	e228      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 801371c:	2302      	movs	r3, #2
 801371e:	e226      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8013720:	4b7c      	ldr	r3, [pc, #496]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013722:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8013726:	1c5a      	adds	r2, r3, #1
 8013728:	b2d1      	uxtb	r1, r2
 801372a:	4a7a      	ldr	r2, [pc, #488]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 801372c:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8013730:	2b02      	cmp	r3, #2
 8013732:	d901      	bls.n	8013738 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8013734:	230b      	movs	r3, #11
 8013736:	e21a      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8013738:	2100      	movs	r1, #0
 801373a:	2080      	movs	r0, #128	; 0x80
 801373c:	f7ff fed2 	bl	80134e4 <nfcipDEPControlMsg>
 8013740:	4603      	mov	r3, r0
 8013742:	82fb      	strh	r3, [r7, #22]
 8013744:	8afb      	ldrh	r3, [r7, #22]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d001      	beq.n	801374e <nfcipInitiatorHandleDEP+0x172>
 801374a:	8afb      	ldrh	r3, [r7, #22]
 801374c:	e20f      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 801374e:	2302      	movs	r3, #2
 8013750:	e20d      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8013752:	4b70      	ldr	r3, [pc, #448]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013754:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013758:	1c5a      	adds	r2, r3, #1
 801375a:	b2d1      	uxtb	r1, r2
 801375c:	4a6d      	ldr	r2, [pc, #436]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 801375e:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8013762:	2b02      	cmp	r3, #2
 8013764:	d901      	bls.n	801376a <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 8013766:	2309      	movs	r3, #9
 8013768:	e201      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 801376a:	4b6a      	ldr	r3, [pc, #424]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 801376c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013770:	f003 0303 	and.w	r3, r3, #3
 8013774:	b2db      	uxtb	r3, r3
 8013776:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801377a:	b2db      	uxtb	r3, r3
 801377c:	2100      	movs	r1, #0
 801377e:	4618      	mov	r0, r3
 8013780:	f7ff feb0 	bl	80134e4 <nfcipDEPControlMsg>
 8013784:	4603      	mov	r3, r0
 8013786:	82fb      	strh	r3, [r7, #22]
 8013788:	8afb      	ldrh	r3, [r7, #22]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <nfcipInitiatorHandleDEP+0x1b6>
 801378e:	8afb      	ldrh	r3, [r7, #22]
 8013790:	e1ed      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8013792:	2302      	movs	r3, #2
 8013794:	e1eb      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8013796:	2302      	movs	r3, #2
 8013798:	e1e9      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 801379a:	89fb      	ldrh	r3, [r7, #14]
 801379c:	e1e7      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            break;
 801379e:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80137a0:	4b5c      	ldr	r3, [pc, #368]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80137a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80137a4:	7d7b      	ldrb	r3, [r7, #21]
 80137a6:	1c59      	adds	r1, r3, #1
 80137a8:	7579      	strb	r1, [r7, #21]
 80137aa:	4413      	add	r3, r2
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 80137b0:	4b58      	ldr	r3, [pc, #352]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80137b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80137b4:	7d7b      	ldrb	r3, [r7, #21]
 80137b6:	1c59      	adds	r1, r3, #1
 80137b8:	7579      	strb	r1, [r7, #21]
 80137ba:	4413      	add	r3, r2
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	2bd5      	cmp	r3, #213	; 0xd5
 80137c0:	d001      	beq.n	80137c6 <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 80137c2:	230b      	movs	r3, #11
 80137c4:	e1d3      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 80137c6:	4b53      	ldr	r3, [pc, #332]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80137c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80137ca:	7d7b      	ldrb	r3, [r7, #21]
 80137cc:	1c59      	adds	r1, r3, #1
 80137ce:	7579      	strb	r1, [r7, #21]
 80137d0:	4413      	add	r3, r2
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	2b07      	cmp	r3, #7
 80137d6:	d001      	beq.n	80137dc <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 80137d8:	230b      	movs	r3, #11
 80137da:	e1c8      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 80137dc:	4b4d      	ldr	r3, [pc, #308]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80137de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80137e0:	7d7b      	ldrb	r3, [r7, #21]
 80137e2:	1c59      	adds	r1, r3, #1
 80137e4:	7579      	strb	r1, [r7, #21]
 80137e6:	4413      	add	r3, r2
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 80137ec:	7cbb      	ldrb	r3, [r7, #18]
 80137ee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80137f2:	2b80      	cmp	r3, #128	; 0x80
 80137f4:	d00b      	beq.n	801380e <nfcipInitiatorHandleDEP+0x232>
 80137f6:	7cbb      	ldrb	r3, [r7, #18]
 80137f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80137fc:	2b40      	cmp	r3, #64	; 0x40
 80137fe:	d006      	beq.n	801380e <nfcipInitiatorHandleDEP+0x232>
 8013800:	7cbb      	ldrb	r3, [r7, #18]
 8013802:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d001      	beq.n	801380e <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 801380a:	230b      	movs	r3, #11
 801380c:	e1af      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 801380e:	4b41      	ldr	r3, [pc, #260]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013810:	78db      	ldrb	r3, [r3, #3]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d015      	beq.n	8013842 <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8013816:	4b3f      	ldr	r3, [pc, #252]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013818:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801381a:	7d7b      	ldrb	r3, [r7, #21]
 801381c:	1c59      	adds	r1, r3, #1
 801381e:	7579      	strb	r1, [r7, #21]
 8013820:	4413      	add	r3, r2
 8013822:	781a      	ldrb	r2, [r3, #0]
 8013824:	4b3b      	ldr	r3, [pc, #236]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013826:	78db      	ldrb	r3, [r3, #3]
 8013828:	429a      	cmp	r2, r3
 801382a:	d104      	bne.n	8013836 <nfcipInitiatorHandleDEP+0x25a>
 801382c:	7cbb      	ldrb	r3, [r7, #18]
 801382e:	f003 0304 	and.w	r3, r3, #4
 8013832:	2b00      	cmp	r3, #0
 8013834:	d101      	bne.n	801383a <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 8013836:	230b      	movs	r3, #11
 8013838:	e199      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 801383a:	7d3b      	ldrb	r3, [r7, #20]
 801383c:	3301      	adds	r3, #1
 801383e:	753b      	strb	r3, [r7, #20]
 8013840:	e006      	b.n	8013850 <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 8013842:	7cbb      	ldrb	r3, [r7, #18]
 8013844:	f003 0304 	and.w	r3, r3, #4
 8013848:	2b00      	cmp	r3, #0
 801384a:	d001      	beq.n	8013850 <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 801384c:	230b      	movs	r3, #11
 801384e:	e18e      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8013850:	4b30      	ldr	r3, [pc, #192]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013852:	791b      	ldrb	r3, [r3, #4]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d015      	beq.n	8013884 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8013858:	4b2e      	ldr	r3, [pc, #184]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 801385a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801385c:	7d7b      	ldrb	r3, [r7, #21]
 801385e:	1c59      	adds	r1, r3, #1
 8013860:	7579      	strb	r1, [r7, #21]
 8013862:	4413      	add	r3, r2
 8013864:	781a      	ldrb	r2, [r3, #0]
 8013866:	4b2b      	ldr	r3, [pc, #172]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013868:	791b      	ldrb	r3, [r3, #4]
 801386a:	429a      	cmp	r2, r3
 801386c:	d104      	bne.n	8013878 <nfcipInitiatorHandleDEP+0x29c>
 801386e:	7cbb      	ldrb	r3, [r7, #18]
 8013870:	f003 0308 	and.w	r3, r3, #8
 8013874:	2b00      	cmp	r3, #0
 8013876:	d101      	bne.n	801387c <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 8013878:	230b      	movs	r3, #11
 801387a:	e178      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 801387c:	7d3b      	ldrb	r3, [r7, #20]
 801387e:	3301      	adds	r3, #1
 8013880:	753b      	strb	r3, [r7, #20]
 8013882:	e006      	b.n	8013892 <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8013884:	7cbb      	ldrb	r3, [r7, #18]
 8013886:	f003 0308 	and.w	r3, r3, #8
 801388a:	2b00      	cmp	r3, #0
 801388c:	d001      	beq.n	8013892 <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 801388e:	230b      	movs	r3, #11
 8013890:	e16d      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8013892:	7cbb      	ldrb	r3, [r7, #18]
 8013894:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013898:	2b40      	cmp	r3, #64	; 0x40
 801389a:	d153      	bne.n	8013944 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 801389c:	7cbb      	ldrb	r3, [r7, #18]
 801389e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80138a2:	2b40      	cmp	r3, #64	; 0x40
 80138a4:	d14c      	bne.n	8013940 <nfcipInitiatorHandleDEP+0x364>
 80138a6:	7cbb      	ldrb	r3, [r7, #18]
 80138a8:	f003 0310 	and.w	r3, r3, #16
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d147      	bne.n	8013940 <nfcipInitiatorHandleDEP+0x364>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80138b0:	4b18      	ldr	r3, [pc, #96]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138b6:	461a      	mov	r2, r3
 80138b8:	7cbb      	ldrb	r3, [r7, #18]
 80138ba:	f003 0303 	and.w	r3, r3, #3
 80138be:	429a      	cmp	r2, r3
 80138c0:	d11c      	bne.n	80138fc <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80138c2:	4b14      	ldr	r3, [pc, #80]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138c8:	3301      	adds	r3, #1
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	f003 0303 	and.w	r3, r3, #3
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	4b10      	ldr	r3, [pc, #64]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 80138d8:	4b0e      	ldr	r3, [pc, #56]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138da:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80138de:	f083 0301 	eor.w	r3, r3, #1
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d001      	beq.n	80138ec <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 80138e8:	230b      	movs	r3, #11
 80138ea:	e140      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 80138ec:	f7ff fe5a 	bl	80135a4 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80138f0:	4b08      	ldr	r3, [pc, #32]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138f2:	2204      	movs	r2, #4
 80138f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 80138f8:	2300      	movs	r3, #0
 80138fa:	e138      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 80138fc:	4b05      	ldr	r3, [pc, #20]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 80138fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	b2d1      	uxtb	r1, r2
 8013906:	4a03      	ldr	r2, [pc, #12]	; (8013914 <nfcipInitiatorHandleDEP+0x338>)
 8013908:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 801390c:	2b02      	cmp	r3, #2
 801390e:	d903      	bls.n	8013918 <nfcipInitiatorHandleDEP+0x33c>
                {
                    return ERR_PROTO;
 8013910:	230b      	movs	r3, #11
 8013912:	e12c      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
 8013914:	20003828 	.word	0x20003828
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8013918:	4b97      	ldr	r3, [pc, #604]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 801391a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801391e:	3b01      	subs	r3, #1
 8013920:	b2da      	uxtb	r2, r3
 8013922:	7cbb      	ldrb	r3, [r7, #18]
 8013924:	4053      	eors	r3, r2
 8013926:	b2db      	uxtb	r3, r3
 8013928:	f003 0303 	and.w	r3, r3, #3
 801392c:	2b00      	cmp	r3, #0
 801392e:	d105      	bne.n	801393c <nfcipInitiatorHandleDEP+0x360>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8013930:	4b91      	ldr	r3, [pc, #580]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013932:	2205      	movs	r2, #5
 8013934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8013938:	2302      	movs	r3, #2
 801393a:	e118      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 801393c:	230b      	movs	r3, #11
 801393e:	e116      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 8013940:	230b      	movs	r3, #11
 8013942:	e114      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 8013944:	7cbb      	ldrb	r3, [r7, #18]
 8013946:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801394a:	2b80      	cmp	r3, #128	; 0x80
 801394c:	f040 8094 	bne.w	8013a78 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 8013950:	7cbb      	ldrb	r3, [r7, #18]
 8013952:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013956:	2b80      	cmp	r3, #128	; 0x80
 8013958:	d146      	bne.n	80139e8 <nfcipInitiatorHandleDEP+0x40c>
 801395a:	7cbb      	ldrb	r3, [r7, #18]
 801395c:	f003 0310 	and.w	r3, r3, #16
 8013960:	2b00      	cmp	r3, #0
 8013962:	d141      	bne.n	80139e8 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 8013964:	4b84      	ldr	r3, [pc, #528]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013966:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801396a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801396e:	2b80      	cmp	r3, #128	; 0x80
 8013970:	d138      	bne.n	80139e4 <nfcipInitiatorHandleDEP+0x408>
 8013972:	4b81      	ldr	r3, [pc, #516]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013974:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013978:	f003 0310 	and.w	r3, r3, #16
 801397c:	2b00      	cmp	r3, #0
 801397e:	d131      	bne.n	80139e4 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 8013980:	4b7d      	ldr	r3, [pc, #500]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013982:	2200      	movs	r2, #0
 8013984:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8013988:	4b7b      	ldr	r3, [pc, #492]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 801398a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801398e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013992:	2b80      	cmp	r3, #128	; 0x80
 8013994:	d114      	bne.n	80139c0 <nfcipInitiatorHandleDEP+0x3e4>
 8013996:	4b78      	ldr	r3, [pc, #480]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013998:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801399c:	f003 0310 	and.w	r3, r3, #16
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d00d      	beq.n	80139c0 <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 80139a4:	4b74      	ldr	r3, [pc, #464]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 80139a6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80139aa:	4619      	mov	r1, r3
 80139ac:	2090      	movs	r0, #144	; 0x90
 80139ae:	f7ff fd99 	bl	80134e4 <nfcipDEPControlMsg>
 80139b2:	4603      	mov	r3, r0
 80139b4:	82fb      	strh	r3, [r7, #22]
 80139b6:	8afb      	ldrh	r3, [r7, #22]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d011      	beq.n	80139e0 <nfcipInitiatorHandleDEP+0x404>
 80139bc:	8afb      	ldrh	r3, [r7, #22]
 80139be:	e0d6      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 80139c0:	4b6d      	ldr	r3, [pc, #436]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 80139c2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80139c6:	1c5a      	adds	r2, r3, #1
 80139c8:	b2d1      	uxtb	r1, r2
 80139ca:	4a6b      	ldr	r2, [pc, #428]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 80139cc:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d901      	bls.n	80139d8 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 80139d4:	230b      	movs	r3, #11
 80139d6:	e0ca      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 80139d8:	4b67      	ldr	r3, [pc, #412]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 80139da:	2205      	movs	r2, #5
 80139dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 80139e0:	2302      	movs	r3, #2
 80139e2:	e0c4      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 80139e4:	230b      	movs	r3, #11
 80139e6:	e0c2      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 80139e8:	7cbb      	ldrb	r3, [r7, #18]
 80139ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80139ee:	2b80      	cmp	r3, #128	; 0x80
 80139f0:	d140      	bne.n	8013a74 <nfcipInitiatorHandleDEP+0x498>
 80139f2:	7cbb      	ldrb	r3, [r7, #18]
 80139f4:	f003 0310 	and.w	r3, r3, #16
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d03b      	beq.n	8013a74 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 80139fc:	4b5e      	ldr	r3, [pc, #376]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 80139fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013a00:	7d7b      	ldrb	r3, [r7, #21]
 8013a02:	1c59      	adds	r1, r3, #1
 8013a04:	7579      	strb	r1, [r7, #21]
 8013a06:	4413      	add	r3, r2
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8013a0c:	4b5a      	ldr	r3, [pc, #360]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013a12:	1c5a      	adds	r2, r3, #1
 8013a14:	b2d1      	uxtb	r1, r2
 8013a16:	4a58      	ldr	r2, [pc, #352]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a18:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8013a1c:	2b03      	cmp	r3, #3
 8013a1e:	d80d      	bhi.n	8013a3c <nfcipInitiatorHandleDEP+0x460>
 8013a20:	4b55      	ldr	r3, [pc, #340]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a22:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013a26:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013a2a:	2b80      	cmp	r3, #128	; 0x80
 8013a2c:	d108      	bne.n	8013a40 <nfcipInitiatorHandleDEP+0x464>
 8013a2e:	4b52      	ldr	r3, [pc, #328]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a30:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013a34:	f003 0310 	and.w	r3, r3, #16
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d101      	bne.n	8013a40 <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8013a3c:	230b      	movs	r3, #11
 8013a3e:	e096      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8013a40:	7c7b      	ldrb	r3, [r7, #17]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <nfcipInitiatorHandleDEP+0x470>
 8013a46:	7c7b      	ldrb	r3, [r7, #17]
 8013a48:	2b3b      	cmp	r3, #59	; 0x3b
 8013a4a:	d901      	bls.n	8013a50 <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8013a4c:	230b      	movs	r3, #11
 8013a4e:	e08e      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8013a50:	7c7b      	ldrb	r3, [r7, #17]
 8013a52:	4619      	mov	r1, r3
 8013a54:	2090      	movs	r0, #144	; 0x90
 8013a56:	f7ff fd45 	bl	80134e4 <nfcipDEPControlMsg>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	82fb      	strh	r3, [r7, #22]
 8013a5e:	8afb      	ldrh	r3, [r7, #22]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d001      	beq.n	8013a68 <nfcipInitiatorHandleDEP+0x48c>
 8013a64:	8afb      	ldrh	r3, [r7, #22]
 8013a66:	e082      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 8013a68:	4a43      	ldr	r2, [pc, #268]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a6a:	7c7b      	ldrb	r3, [r7, #17]
 8013a6c:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 8013a70:	2302      	movs	r3, #2
 8013a72:	e07c      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 8013a74:	230b      	movs	r3, #11
 8013a76:	e07a      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8013a78:	7cbb      	ldrb	r3, [r7, #18]
 8013a7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d174      	bne.n	8013b6c <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8013a82:	4b3d      	ldr	r3, [pc, #244]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a88:	461a      	mov	r2, r3
 8013a8a:	7cbb      	ldrb	r3, [r7, #18]
 8013a8c:	f003 0303 	and.w	r3, r3, #3
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d001      	beq.n	8013a98 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 8013a94:	230b      	movs	r3, #11
 8013a96:	e06a      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8013a98:	4b37      	ldr	r3, [pc, #220]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	f003 0303 	and.w	r3, r3, #3
 8013aa6:	b2da      	uxtb	r2, r3
 8013aa8:	4b33      	ldr	r3, [pc, #204]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 8013aae:	f7ff fd79 	bl	80135a4 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8013ab2:	7cfb      	ldrb	r3, [r7, #19]
 8013ab4:	b29a      	uxth	r2, r3
 8013ab6:	7d3b      	ldrb	r3, [r7, #20]
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	3b04      	subs	r3, #4
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8013ac6:	4b2c      	ldr	r3, [pc, #176]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013ac8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8013acc:	461a      	mov	r2, r3
 8013ace:	7d3b      	ldrb	r3, [r7, #20]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d013      	beq.n	8013afe <nfcipInitiatorHandleDEP+0x522>
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	881b      	ldrh	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00f      	beq.n	8013afe <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8013ade:	4b26      	ldr	r3, [pc, #152]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013ae2:	4a25      	ldr	r2, [pc, #148]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013ae4:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8013ae8:	1898      	adds	r0, r3, r2
 8013aea:	4b23      	ldr	r3, [pc, #140]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013aee:	7d3b      	ldrb	r3, [r7, #20]
 8013af0:	3304      	adds	r3, #4
 8013af2:	18d1      	adds	r1, r2, r3
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	461a      	mov	r2, r3
 8013afa:	f007 fce9 	bl	801b4d0 <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8013afe:	7cbb      	ldrb	r3, [r7, #18]
 8013b00:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d127      	bne.n	8013b58 <nfcipInitiatorHandleDEP+0x57c>
 8013b08:	7cbb      	ldrb	r3, [r7, #18]
 8013b0a:	f003 0310 	and.w	r3, r3, #16
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d022      	beq.n	8013b58 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 8013b12:	4b19      	ldr	r3, [pc, #100]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8013b20:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b26:	f003 0303 	and.w	r3, r3, #3
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b30:	b2d8      	uxtb	r0, r3
 8013b32:	4b11      	ldr	r3, [pc, #68]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013b34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b36:	7d7b      	ldrb	r3, [r7, #21]
 8013b38:	1c59      	adds	r1, r3, #1
 8013b3a:	7579      	strb	r1, [r7, #21]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	4619      	mov	r1, r3
 8013b42:	f7ff fccf 	bl	80134e4 <nfcipDEPControlMsg>
 8013b46:	4603      	mov	r3, r0
 8013b48:	82fb      	strh	r3, [r7, #22]
 8013b4a:	8afb      	ldrh	r3, [r7, #22]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d001      	beq.n	8013b54 <nfcipInitiatorHandleDEP+0x578>
 8013b50:	8afb      	ldrh	r3, [r7, #22]
 8013b52:	e00c      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8013b54:	230d      	movs	r3, #13
 8013b56:	e00a      	b.n	8013b6e <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8013b58:	4b07      	ldr	r3, [pc, #28]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8013b60:	4b05      	ldr	r3, [pc, #20]	; (8013b78 <nfcipInitiatorHandleDEP+0x59c>)
 8013b62:	2204      	movs	r2, #4
 8013b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8013b68:	2300      	movs	r3, #0
 8013b6a:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8013b6c:	8afb      	ldrh	r3, [r7, #22]
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3718      	adds	r7, #24
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	20003828 	.word	0x20003828

08013b7c <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08c      	sub	sp, #48	; 0x30
 8013b80:	af04      	add	r7, sp, #16
 8013b82:	4603      	mov	r3, r0
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8013b8a:	230c      	movs	r3, #12
 8013b8c:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8013ba2:	89fb      	ldrh	r3, [r7, #14]
 8013ba4:	2b25      	cmp	r3, #37	; 0x25
 8013ba6:	d006      	beq.n	8013bb6 <nfcipTargetHandleRX+0x3a>
 8013ba8:	2b25      	cmp	r3, #37	; 0x25
 8013baa:	dc0a      	bgt.n	8013bc2 <nfcipTargetHandleRX+0x46>
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d01d      	beq.n	8013bec <nfcipTargetHandleRX+0x70>
 8013bb0:	2b02      	cmp	r3, #2
 8013bb2:	d003      	beq.n	8013bbc <nfcipTargetHandleRX+0x40>
 8013bb4:	e005      	b.n	8013bc2 <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8013bb6:	89fb      	ldrh	r3, [r7, #14]
 8013bb8:	f000 bc1a 	b.w	80143f0 <nfcipTargetHandleRX+0x874>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8013bbc:	2302      	movs	r3, #2
 8013bbe:	f000 bc17 	b.w	80143f0 <nfcipTargetHandleRX+0x874>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013bc2:	4b9e      	ldr	r3, [pc, #632]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013bc6:	4b9d      	ldr	r3, [pc, #628]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013bc8:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013bcc:	4b9b      	ldr	r3, [pc, #620]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd4:	9002      	str	r0, [sp, #8]
 8013bd6:	2004      	movs	r0, #4
 8013bd8:	9001      	str	r0, [sp, #4]
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	2100      	movs	r1, #0
 8013be0:	2000      	movs	r0, #0
 8013be2:	f004 fcfb 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8013be6:	2302      	movs	r3, #2
 8013be8:	f000 bc02 	b.w	80143f0 <nfcipTargetHandleRX+0x874>
            break;
 8013bec:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8013bee:	4b93      	ldr	r3, [pc, #588]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013bf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013bf2:	7f7b      	ldrb	r3, [r7, #29]
 8013bf4:	1c59      	adds	r1, r3, #1
 8013bf6:	7779      	strb	r1, [r7, #29]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 8013bfe:	4b8f      	ldr	r3, [pc, #572]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c02:	7f7b      	ldrb	r3, [r7, #29]
 8013c04:	1c59      	adds	r1, r3, #1
 8013c06:	7779      	strb	r1, [r7, #29]
 8013c08:	4413      	add	r3, r2
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	2bd4      	cmp	r3, #212	; 0xd4
 8013c0e:	d013      	beq.n	8013c38 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013c10:	4b8a      	ldr	r3, [pc, #552]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c14:	4b89      	ldr	r3, [pc, #548]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c16:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013c1a:	4b88      	ldr	r3, [pc, #544]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c22:	9002      	str	r0, [sp, #8]
 8013c24:	2004      	movs	r0, #4
 8013c26:	9001      	str	r0, [sp, #4]
 8013c28:	9300      	str	r3, [sp, #0]
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	2000      	movs	r0, #0
 8013c30:	f004 fcd4 	bl	80185dc <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8013c34:	2302      	movs	r3, #2
 8013c36:	e3db      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8013c38:	4b80      	ldr	r3, [pc, #512]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c3c:	7f7b      	ldrb	r3, [r7, #29]
 8013c3e:	1c59      	adds	r1, r3, #1
 8013c40:	7779      	strb	r1, [r7, #29]
 8013c42:	4413      	add	r3, r2
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	2b0a      	cmp	r3, #10
 8013c48:	d032      	beq.n	8013cb0 <nfcipTargetHandleRX+0x134>
 8013c4a:	2b0a      	cmp	r3, #10
 8013c4c:	dc5d      	bgt.n	8013d0a <nfcipTargetHandleRX+0x18e>
 8013c4e:	2b06      	cmp	r3, #6
 8013c50:	d06f      	beq.n	8013d32 <nfcipTargetHandleRX+0x1b6>
 8013c52:	2b08      	cmp	r3, #8
 8013c54:	d159      	bne.n	8013d0a <nfcipTargetHandleRX+0x18e>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8013c56:	4b79      	ldr	r3, [pc, #484]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c5a:	7f7b      	ldrb	r3, [r7, #29]
 8013c5c:	1c59      	adds	r1, r3, #1
 8013c5e:	7779      	strb	r1, [r7, #29]
 8013c60:	4413      	add	r3, r2
 8013c62:	781a      	ldrb	r2, [r3, #0]
 8013c64:	4b75      	ldr	r3, [pc, #468]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c66:	78db      	ldrb	r3, [r3, #3]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d102      	bne.n	8013c72 <nfcipTargetHandleRX+0xf6>
 8013c6c:	7efb      	ldrb	r3, [r7, #27]
 8013c6e:	2b04      	cmp	r3, #4
 8013c70:	d003      	beq.n	8013c7a <nfcipTargetHandleRX+0xfe>
 8013c72:	4b72      	ldr	r3, [pc, #456]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c74:	78db      	ldrb	r3, [r3, #3]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <nfcipTargetHandleRX+0x10c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8013c7a:	4b70      	ldr	r3, [pc, #448]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013c7c:	78db      	ldrb	r3, [r3, #3]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d104      	bne.n	8013c8c <nfcipTargetHandleRX+0x110>
 8013c82:	7efb      	ldrb	r3, [r7, #27]
 8013c84:	2b03      	cmp	r3, #3
 8013c86:	d001      	beq.n	8013c8c <nfcipTargetHandleRX+0x110>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8013c88:	2302      	movs	r3, #2
 8013c8a:	e3b1      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8013c8c:	f107 0114 	add.w	r1, r7, #20
 8013c90:	f04f 33ff 	mov.w	r3, #4294967295
 8013c94:	9301      	str	r3, [sp, #4]
 8013c96:	2300      	movs	r3, #0
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	2009      	movs	r0, #9
 8013ca0:	f000 fbae 	bl	8014400 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 8013ca4:	4b65      	ldr	r3, [pc, #404]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013ca6:	2210      	movs	r2, #16
 8013ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8013cac:	2320      	movs	r3, #32
 8013cae:	e39f      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8013cb0:	4b62      	ldr	r3, [pc, #392]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013cb4:	7f7b      	ldrb	r3, [r7, #29]
 8013cb6:	1c59      	adds	r1, r3, #1
 8013cb8:	7779      	strb	r1, [r7, #29]
 8013cba:	4413      	add	r3, r2
 8013cbc:	781a      	ldrb	r2, [r3, #0]
 8013cbe:	4b5f      	ldr	r3, [pc, #380]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013cc0:	78db      	ldrb	r3, [r3, #3]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d102      	bne.n	8013ccc <nfcipTargetHandleRX+0x150>
 8013cc6:	7efb      	ldrb	r3, [r7, #27]
 8013cc8:	2b04      	cmp	r3, #4
 8013cca:	d003      	beq.n	8013cd4 <nfcipTargetHandleRX+0x158>
 8013ccc:	4b5b      	ldr	r3, [pc, #364]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013cce:	78db      	ldrb	r3, [r3, #3]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d106      	bne.n	8013ce2 <nfcipTargetHandleRX+0x166>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8013cd4:	4b59      	ldr	r3, [pc, #356]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013cd6:	78db      	ldrb	r3, [r3, #3]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d104      	bne.n	8013ce6 <nfcipTargetHandleRX+0x16a>
 8013cdc:	7efb      	ldrb	r3, [r7, #27]
 8013cde:	2b03      	cmp	r3, #3
 8013ce0:	d901      	bls.n	8013ce6 <nfcipTargetHandleRX+0x16a>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8013ce2:	2302      	movs	r3, #2
 8013ce4:	e384      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8013ce6:	f107 0114 	add.w	r1, r7, #20
 8013cea:	f04f 33ff 	mov.w	r3, #4294967295
 8013cee:	9301      	str	r3, [sp, #4]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	9300      	str	r3, [sp, #0]
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	200b      	movs	r0, #11
 8013cfa:	f000 fb81 	bl	8014400 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 8013cfe:	4b4f      	ldr	r3, [pc, #316]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d00:	220c      	movs	r2, #12
 8013d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8013d06:	231f      	movs	r3, #31
 8013d08:	e372      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013d0a:	4b4c      	ldr	r3, [pc, #304]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d0e:	4b4b      	ldr	r3, [pc, #300]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d10:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013d14:	4b49      	ldr	r3, [pc, #292]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d18:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1c:	9002      	str	r0, [sp, #8]
 8013d1e:	2004      	movs	r0, #4
 8013d20:	9001      	str	r0, [sp, #4]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	460b      	mov	r3, r1
 8013d26:	2100      	movs	r1, #0
 8013d28:	2000      	movs	r0, #0
 8013d2a:	f004 fc57 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 8013d2e:	2302      	movs	r3, #2
 8013d30:	e35e      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            break;                                /* Continue to normal DEP processing */
 8013d32:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8013d34:	4b41      	ldr	r3, [pc, #260]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d38:	7f7b      	ldrb	r3, [r7, #29]
 8013d3a:	1c59      	adds	r1, r3, #1
 8013d3c:	7779      	strb	r1, [r7, #29]
 8013d3e:	4413      	add	r3, r2
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8013d44:	7ebb      	ldrb	r3, [r7, #26]
 8013d46:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013d4a:	2b80      	cmp	r3, #128	; 0x80
 8013d4c:	d01d      	beq.n	8013d8a <nfcipTargetHandleRX+0x20e>
 8013d4e:	7ebb      	ldrb	r3, [r7, #26]
 8013d50:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013d54:	2b40      	cmp	r3, #64	; 0x40
 8013d56:	d018      	beq.n	8013d8a <nfcipTargetHandleRX+0x20e>
 8013d58:	7ebb      	ldrb	r3, [r7, #26]
 8013d5a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d013      	beq.n	8013d8a <nfcipTargetHandleRX+0x20e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013d62:	4b36      	ldr	r3, [pc, #216]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d66:	4b35      	ldr	r3, [pc, #212]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d68:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013d6c:	4b33      	ldr	r3, [pc, #204]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d70:	f04f 30ff 	mov.w	r0, #4294967295
 8013d74:	9002      	str	r0, [sp, #8]
 8013d76:	2004      	movs	r0, #4
 8013d78:	9001      	str	r0, [sp, #4]
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	2100      	movs	r1, #0
 8013d80:	2000      	movs	r0, #0
 8013d82:	f004 fc2b 	bl	80185dc <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8013d86:	2302      	movs	r3, #2
 8013d88:	e332      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8013d8a:	4b2c      	ldr	r3, [pc, #176]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d8c:	78db      	ldrb	r3, [r3, #3]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d03b      	beq.n	8013e0a <nfcipTargetHandleRX+0x28e>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8013d92:	7ebb      	ldrb	r3, [r7, #26]
 8013d94:	f003 0304 	and.w	r3, r3, #4
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d113      	bne.n	8013dc4 <nfcipTargetHandleRX+0x248>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013d9c:	4b27      	ldr	r3, [pc, #156]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013d9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013da0:	4b26      	ldr	r3, [pc, #152]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013da2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013da6:	4b25      	ldr	r3, [pc, #148]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013daa:	f04f 30ff 	mov.w	r0, #4294967295
 8013dae:	9002      	str	r0, [sp, #8]
 8013db0:	2004      	movs	r0, #4
 8013db2:	9001      	str	r0, [sp, #4]
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	460b      	mov	r3, r1
 8013db8:	2100      	movs	r1, #0
 8013dba:	2000      	movs	r0, #0
 8013dbc:	f004 fc0e 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8013dc0:	2302      	movs	r3, #2
 8013dc2:	e315      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8013dc4:	4b1d      	ldr	r3, [pc, #116]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013dc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013dc8:	7f7b      	ldrb	r3, [r7, #29]
 8013dca:	1c59      	adds	r1, r3, #1
 8013dcc:	7779      	strb	r1, [r7, #29]
 8013dce:	4413      	add	r3, r2
 8013dd0:	781a      	ldrb	r2, [r3, #0]
 8013dd2:	4b1a      	ldr	r3, [pc, #104]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013dd4:	78db      	ldrb	r3, [r3, #3]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d013      	beq.n	8013e02 <nfcipTargetHandleRX+0x286>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013dda:	4b18      	ldr	r3, [pc, #96]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013ddc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013dde:	4b17      	ldr	r3, [pc, #92]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013de0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013de4:	4b15      	ldr	r3, [pc, #84]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013de8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dec:	9002      	str	r0, [sp, #8]
 8013dee:	2004      	movs	r0, #4
 8013df0:	9001      	str	r0, [sp, #4]
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	460b      	mov	r3, r1
 8013df6:	2100      	movs	r1, #0
 8013df8:	2000      	movs	r0, #0
 8013dfa:	f004 fbef 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8013dfe:	2302      	movs	r3, #2
 8013e00:	e2f6      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8013e02:	7f3b      	ldrb	r3, [r7, #28]
 8013e04:	3301      	adds	r3, #1
 8013e06:	773b      	strb	r3, [r7, #28]
 8013e08:	e01a      	b.n	8013e40 <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8013e0a:	7ebb      	ldrb	r3, [r7, #26]
 8013e0c:	f003 0304 	and.w	r3, r3, #4
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d015      	beq.n	8013e40 <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013e14:	4b09      	ldr	r3, [pc, #36]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013e16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013e18:	4b08      	ldr	r3, [pc, #32]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013e1a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013e1e:	4b07      	ldr	r3, [pc, #28]	; (8013e3c <nfcipTargetHandleRX+0x2c0>)
 8013e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e22:	f04f 30ff 	mov.w	r0, #4294967295
 8013e26:	9002      	str	r0, [sp, #8]
 8013e28:	2004      	movs	r0, #4
 8013e2a:	9001      	str	r0, [sp, #4]
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	460b      	mov	r3, r1
 8013e30:	2100      	movs	r1, #0
 8013e32:	2000      	movs	r0, #0
 8013e34:	f004 fbd2 	bl	80185dc <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8013e38:	2302      	movs	r3, #2
 8013e3a:	e2d9      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
 8013e3c:	20003828 	.word	0x20003828
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8013e40:	4b96      	ldr	r3, [pc, #600]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e42:	791b      	ldrb	r3, [r3, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d027      	beq.n	8013e98 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8013e48:	4b94      	ldr	r3, [pc, #592]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013e4c:	7f7b      	ldrb	r3, [r7, #29]
 8013e4e:	1c59      	adds	r1, r3, #1
 8013e50:	7779      	strb	r1, [r7, #29]
 8013e52:	4413      	add	r3, r2
 8013e54:	781a      	ldrb	r2, [r3, #0]
 8013e56:	4b91      	ldr	r3, [pc, #580]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e58:	78db      	ldrb	r3, [r3, #3]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d104      	bne.n	8013e68 <nfcipTargetHandleRX+0x2ec>
 8013e5e:	7ebb      	ldrb	r3, [r7, #26]
 8013e60:	f003 0304 	and.w	r3, r3, #4
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d113      	bne.n	8013e90 <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013e68:	4b8c      	ldr	r3, [pc, #560]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013e6c:	4b8b      	ldr	r3, [pc, #556]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e6e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013e72:	4b8a      	ldr	r3, [pc, #552]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e76:	f04f 30ff 	mov.w	r0, #4294967295
 8013e7a:	9002      	str	r0, [sp, #8]
 8013e7c:	2004      	movs	r0, #4
 8013e7e:	9001      	str	r0, [sp, #4]
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	460b      	mov	r3, r1
 8013e84:	2100      	movs	r1, #0
 8013e86:	2000      	movs	r0, #0
 8013e88:	f004 fba8 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8013e8c:	2302      	movs	r3, #2
 8013e8e:	e2af      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8013e90:	7f3b      	ldrb	r3, [r7, #28]
 8013e92:	3301      	adds	r3, #1
 8013e94:	773b      	strb	r3, [r7, #28]
 8013e96:	e018      	b.n	8013eca <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8013e98:	7ebb      	ldrb	r3, [r7, #26]
 8013e9a:	f003 0308 	and.w	r3, r3, #8
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d013      	beq.n	8013eca <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013ea2:	4b7e      	ldr	r3, [pc, #504]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013ea6:	4b7d      	ldr	r3, [pc, #500]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013ea8:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013eac:	4b7b      	ldr	r3, [pc, #492]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb4:	9002      	str	r0, [sp, #8]
 8013eb6:	2004      	movs	r0, #4
 8013eb8:	9001      	str	r0, [sp, #4]
 8013eba:	9300      	str	r3, [sp, #0]
 8013ebc:	460b      	mov	r3, r1
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	f004 fb8b 	bl	80185dc <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 8013ec6:	2302      	movs	r3, #2
 8013ec8:	e292      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8013eca:	7ebb      	ldrb	r3, [r7, #26]
 8013ecc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013ed0:	2b40      	cmp	r3, #64	; 0x40
 8013ed2:	f040 80c5 	bne.w	8014060 <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8013ed6:	7ebb      	ldrb	r3, [r7, #26]
 8013ed8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013edc:	2b40      	cmp	r3, #64	; 0x40
 8013ede:	f040 8083 	bne.w	8013fe8 <nfcipTargetHandleRX+0x46c>
 8013ee2:	7ebb      	ldrb	r3, [r7, #26]
 8013ee4:	f003 0310 	and.w	r3, r3, #16
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d17d      	bne.n	8013fe8 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8013eec:	4b6b      	ldr	r3, [pc, #428]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	7ebb      	ldrb	r3, [r7, #26]
 8013ef6:	f003 0303 	and.w	r3, r3, #3
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d149      	bne.n	8013f92 <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 8013efe:	4b67      	ldr	r3, [pc, #412]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f00:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8013f04:	f083 0301 	eor.w	r3, r3, #1
 8013f08:	b2db      	uxtb	r3, r3
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d013      	beq.n	8013f36 <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013f0e:	4b63      	ldr	r3, [pc, #396]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013f12:	4b62      	ldr	r3, [pc, #392]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f14:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013f18:	4b60      	ldr	r3, [pc, #384]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f20:	9002      	str	r0, [sp, #8]
 8013f22:	2004      	movs	r0, #4
 8013f24:	9001      	str	r0, [sp, #4]
 8013f26:	9300      	str	r3, [sp, #0]
 8013f28:	460b      	mov	r3, r1
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	f004 fb55 	bl	80185dc <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 8013f32:	2302      	movs	r3, #2
 8013f34:	e25c      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8013f36:	4b59      	ldr	r3, [pc, #356]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f3c:	f003 030f 	and.w	r3, r3, #15
 8013f40:	330c      	adds	r3, #12
 8013f42:	2201      	movs	r2, #1
 8013f44:	fa02 f303 	lsl.w	r3, r2, r3
 8013f48:	4a55      	ldr	r2, [pc, #340]	; (80140a0 <nfcipTargetHandleRX+0x524>)
 8013f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8013f4e:	0b1b      	lsrs	r3, r3, #12
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	4b52      	ldr	r3, [pc, #328]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f58:	f003 030f 	and.w	r3, r3, #15
 8013f5c:	330c      	adds	r3, #12
 8013f5e:	2101      	movs	r1, #1
 8013f60:	fa01 f303 	lsl.w	r3, r1, r3
 8013f64:	494e      	ldr	r1, [pc, #312]	; (80140a0 <nfcipTargetHandleRX+0x524>)
 8013f66:	fba1 1303 	umull	r1, r3, r1, r3
 8013f6a:	0b1b      	lsrs	r3, r3, #12
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	08db      	lsrs	r3, r3, #3
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	1ad3      	subs	r3, r2, r3
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	3301      	adds	r3, #1
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7f0 fb84 	bl	8004688 <timerCalculateTimer>
 8013f80:	4603      	mov	r3, r0
 8013f82:	4a46      	ldr	r2, [pc, #280]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f84:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8013f86:	4b45      	ldr	r3, [pc, #276]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f88:	220e      	movs	r2, #14
 8013f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e22e      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 8013f92:	4b42      	ldr	r3, [pc, #264]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013f94:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013f98:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013f9c:	2b80      	cmp	r3, #128	; 0x80
 8013f9e:	d15e      	bne.n	801405e <nfcipTargetHandleRX+0x4e2>
 8013fa0:	4b3e      	ldr	r3, [pc, #248]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013fa2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013fa6:	f003 0310 	and.w	r3, r3, #16
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d157      	bne.n	801405e <nfcipTargetHandleRX+0x4e2>
 8013fae:	4b3b      	ldr	r3, [pc, #236]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	b2da      	uxtb	r2, r3
 8013fb8:	7ebb      	ldrb	r3, [r7, #26]
 8013fba:	4053      	eors	r3, r2
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	f003 0303 	and.w	r3, r3, #3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d14b      	bne.n	801405e <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 8013fc6:	4b35      	ldr	r3, [pc, #212]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013fcc:	3b01      	subs	r3, #1
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	f003 0303 	and.w	r3, r3, #3
 8013fd4:	b2da      	uxtb	r2, r3
 8013fd6:	4b31      	ldr	r3, [pc, #196]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8013fdc:	4b2f      	ldr	r3, [pc, #188]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013fde:	220f      	movs	r2, #15
 8013fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 8013fe4:	2302      	movs	r3, #2
 8013fe6:	e203      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 8013fe8:	7ebb      	ldrb	r3, [r7, #26]
 8013fea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013fee:	2b40      	cmp	r3, #64	; 0x40
 8013ff0:	d121      	bne.n	8014036 <nfcipTargetHandleRX+0x4ba>
 8013ff2:	7ebb      	ldrb	r3, [r7, #26]
 8013ff4:	f003 0310 	and.w	r3, r3, #16
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d01c      	beq.n	8014036 <nfcipTargetHandleRX+0x4ba>
 8013ffc:	4b27      	ldr	r3, [pc, #156]	; (801409c <nfcipTargetHandleRX+0x520>)
 8013ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014002:	3b01      	subs	r3, #1
 8014004:	b2da      	uxtb	r2, r3
 8014006:	7ebb      	ldrb	r3, [r7, #26]
 8014008:	4053      	eors	r3, r2
 801400a:	b2db      	uxtb	r3, r3
 801400c:	f003 0303 	and.w	r3, r3, #3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d110      	bne.n	8014036 <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8014014:	4b21      	ldr	r3, [pc, #132]	; (801409c <nfcipTargetHandleRX+0x520>)
 8014016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801401a:	3b01      	subs	r3, #1
 801401c:	b2db      	uxtb	r3, r3
 801401e:	f003 0303 	and.w	r3, r3, #3
 8014022:	b2da      	uxtb	r2, r3
 8014024:	4b1d      	ldr	r3, [pc, #116]	; (801409c <nfcipTargetHandleRX+0x520>)
 8014026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 801402a:	4b1c      	ldr	r3, [pc, #112]	; (801409c <nfcipTargetHandleRX+0x520>)
 801402c:	220f      	movs	r2, #15
 801402e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8014032:	2302      	movs	r3, #2
 8014034:	e1dc      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8014036:	4b19      	ldr	r3, [pc, #100]	; (801409c <nfcipTargetHandleRX+0x520>)
 8014038:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801403a:	4b18      	ldr	r3, [pc, #96]	; (801409c <nfcipTargetHandleRX+0x520>)
 801403c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8014040:	4b16      	ldr	r3, [pc, #88]	; (801409c <nfcipTargetHandleRX+0x520>)
 8014042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014044:	f04f 30ff 	mov.w	r0, #4294967295
 8014048:	9002      	str	r0, [sp, #8]
 801404a:	2004      	movs	r0, #4
 801404c:	9001      	str	r0, [sp, #4]
 801404e:	9300      	str	r3, [sp, #0]
 8014050:	460b      	mov	r3, r1
 8014052:	2100      	movs	r1, #0
 8014054:	2000      	movs	r0, #0
 8014056:	f004 fac1 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 801405a:	2302      	movs	r3, #2
 801405c:	e1c8      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 801405e:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 8014060:	7ebb      	ldrb	r3, [r7, #26]
 8014062:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014066:	2b80      	cmp	r3, #128	; 0x80
 8014068:	f040 80ac 	bne.w	80141c4 <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 801406c:	7ebb      	ldrb	r3, [r7, #26]
 801406e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014072:	2b80      	cmp	r3, #128	; 0x80
 8014074:	d116      	bne.n	80140a4 <nfcipTargetHandleRX+0x528>
 8014076:	7ebb      	ldrb	r3, [r7, #26]
 8014078:	f003 0310 	and.w	r3, r3, #16
 801407c:	2b00      	cmp	r3, #0
 801407e:	d111      	bne.n	80140a4 <nfcipTargetHandleRX+0x528>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8014080:	2100      	movs	r1, #0
 8014082:	2080      	movs	r0, #128	; 0x80
 8014084:	f7ff fa2e 	bl	80134e4 <nfcipDEPControlMsg>
 8014088:	4603      	mov	r3, r0
 801408a:	83fb      	strh	r3, [r7, #30]
 801408c:	8bfb      	ldrh	r3, [r7, #30]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d001      	beq.n	8014096 <nfcipTargetHandleRX+0x51a>
 8014092:	8bfb      	ldrh	r3, [r7, #30]
 8014094:	e1ac      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            return ERR_BUSY;
 8014096:	2302      	movs	r3, #2
 8014098:	e1aa      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
 801409a:	bf00      	nop
 801409c:	20003828 	.word	0x20003828
 80140a0:	4d542005 	.word	0x4d542005
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 80140a4:	7ebb      	ldrb	r3, [r7, #26]
 80140a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80140aa:	2b80      	cmp	r3, #128	; 0x80
 80140ac:	d175      	bne.n	801419a <nfcipTargetHandleRX+0x61e>
 80140ae:	7ebb      	ldrb	r3, [r7, #26]
 80140b0:	f003 0310 	and.w	r3, r3, #16
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d070      	beq.n	801419a <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80140b8:	4bab      	ldr	r3, [pc, #684]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80140be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80140c2:	2b80      	cmp	r3, #128	; 0x80
 80140c4:	d17d      	bne.n	80141c2 <nfcipTargetHandleRX+0x646>
 80140c6:	4ba8      	ldr	r3, [pc, #672]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80140cc:	f003 0310 	and.w	r3, r3, #16
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d076      	beq.n	80141c2 <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 80140d4:	4ba4      	ldr	r3, [pc, #656]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140d6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80140da:	4ba3      	ldr	r3, [pc, #652]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80140de:	7f7b      	ldrb	r3, [r7, #29]
 80140e0:	1c58      	adds	r0, r3, #1
 80140e2:	7778      	strb	r0, [r7, #29]
 80140e4:	440b      	add	r3, r1
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d013      	beq.n	8014114 <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80140ec:	4b9e      	ldr	r3, [pc, #632]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80140f0:	4b9d      	ldr	r3, [pc, #628]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140f2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80140f6:	4b9c      	ldr	r3, [pc, #624]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80140f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fa:	f04f 30ff 	mov.w	r0, #4294967295
 80140fe:	9002      	str	r0, [sp, #8]
 8014100:	2004      	movs	r0, #4
 8014102:	9001      	str	r0, [sp, #4]
 8014104:	9300      	str	r3, [sp, #0]
 8014106:	460b      	mov	r3, r1
 8014108:	2100      	movs	r1, #0
 801410a:	2000      	movs	r0, #0
 801410c:	f004 fa66 	bl	80185dc <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 8014110:	2302      	movs	r3, #2
 8014112:	e16d      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 8014114:	4b94      	ldr	r3, [pc, #592]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014116:	2200      	movs	r2, #0
 8014118:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 801411c:	4b92      	ldr	r3, [pc, #584]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801411e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8014122:	2b00      	cmp	r3, #0
 8014124:	d005      	beq.n	8014132 <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8014126:	4b90      	ldr	r3, [pc, #576]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014128:	220f      	movs	r2, #15
 801412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 801412e:	2302      	movs	r3, #2
 8014130:	e15e      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 8014132:	4b8d      	ldr	r3, [pc, #564]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014134:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8014138:	461a      	mov	r2, r3
 801413a:	4b8b      	ldr	r3, [pc, #556]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801413c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014140:	f003 030f 	and.w	r3, r3, #15
 8014144:	330c      	adds	r3, #12
 8014146:	fa02 f303 	lsl.w	r3, r2, r3
 801414a:	4a88      	ldr	r2, [pc, #544]	; (801436c <nfcipTargetHandleRX+0x7f0>)
 801414c:	fba2 2303 	umull	r2, r3, r2, r3
 8014150:	0b1b      	lsrs	r3, r3, #12
 8014152:	b29a      	uxth	r2, r3
 8014154:	4b84      	ldr	r3, [pc, #528]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014156:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801415a:	4619      	mov	r1, r3
 801415c:	4b82      	ldr	r3, [pc, #520]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801415e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014162:	f003 030f 	and.w	r3, r3, #15
 8014166:	330c      	adds	r3, #12
 8014168:	fa01 f303 	lsl.w	r3, r1, r3
 801416c:	497f      	ldr	r1, [pc, #508]	; (801436c <nfcipTargetHandleRX+0x7f0>)
 801416e:	fba1 1303 	umull	r1, r3, r1, r3
 8014172:	0b1b      	lsrs	r3, r3, #12
 8014174:	3301      	adds	r3, #1
 8014176:	08db      	lsrs	r3, r3, #3
 8014178:	b29b      	uxth	r3, r3
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	b29b      	uxth	r3, r3
 801417e:	3301      	adds	r3, #1
 8014180:	b29b      	uxth	r3, r3
 8014182:	4618      	mov	r0, r3
 8014184:	f7f0 fa80 	bl	8004688 <timerCalculateTimer>
 8014188:	4603      	mov	r3, r0
 801418a:	4a77      	ldr	r2, [pc, #476]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801418c:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 801418e:	4b76      	ldr	r3, [pc, #472]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014190:	220e      	movs	r2, #14
 8014192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 8014196:	2302      	movs	r3, #2
 8014198:	e12a      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801419a:	4b73      	ldr	r3, [pc, #460]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801419c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801419e:	4b72      	ldr	r3, [pc, #456]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80141a0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80141a4:	4b70      	ldr	r3, [pc, #448]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80141a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a8:	f04f 30ff 	mov.w	r0, #4294967295
 80141ac:	9002      	str	r0, [sp, #8]
 80141ae:	2004      	movs	r0, #4
 80141b0:	9001      	str	r0, [sp, #4]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	460b      	mov	r3, r1
 80141b6:	2100      	movs	r1, #0
 80141b8:	2000      	movs	r0, #0
 80141ba:	f004 fa0f 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 80141be:	2302      	movs	r3, #2
 80141c0:	e116      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80141c2:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80141c4:	7ebb      	ldrb	r3, [r7, #26]
 80141c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f040 810f 	bne.w	80143ee <nfcipTargetHandleRX+0x872>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80141d0:	4b65      	ldr	r3, [pc, #404]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80141d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141d6:	461a      	mov	r2, r3
 80141d8:	7ebb      	ldrb	r3, [r7, #26]
 80141da:	f003 0303 	and.w	r3, r3, #3
 80141de:	429a      	cmp	r2, r3
 80141e0:	d06e      	beq.n	80142c0 <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 80141e2:	4b61      	ldr	r3, [pc, #388]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80141e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80141e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80141ec:	2b80      	cmp	r3, #128	; 0x80
 80141ee:	d153      	bne.n	8014298 <nfcipTargetHandleRX+0x71c>
 80141f0:	4b5d      	ldr	r3, [pc, #372]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80141f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80141f6:	f003 0310 	and.w	r3, r3, #16
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d14c      	bne.n	8014298 <nfcipTargetHandleRX+0x71c>
 80141fe:	4b5a      	ldr	r3, [pc, #360]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014204:	3b01      	subs	r3, #1
 8014206:	b2da      	uxtb	r2, r3
 8014208:	7ebb      	ldrb	r3, [r7, #26]
 801420a:	4053      	eors	r3, r2
 801420c:	b2db      	uxtb	r3, r3
 801420e:	f003 0303 	and.w	r3, r3, #3
 8014212:	2b00      	cmp	r3, #0
 8014214:	d140      	bne.n	8014298 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8014216:	4b54      	ldr	r3, [pc, #336]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801421c:	3b01      	subs	r3, #1
 801421e:	b2db      	uxtb	r3, r3
 8014220:	f003 0303 	and.w	r3, r3, #3
 8014224:	b2da      	uxtb	r2, r3
 8014226:	4b50      	ldr	r3, [pc, #320]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 801422c:	7ebb      	ldrb	r3, [r7, #26]
 801422e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014232:	2b00      	cmp	r3, #0
 8014234:	d12a      	bne.n	801428c <nfcipTargetHandleRX+0x710>
 8014236:	7ebb      	ldrb	r3, [r7, #26]
 8014238:	f003 0310 	and.w	r3, r3, #16
 801423c:	2b00      	cmp	r3, #0
 801423e:	d025      	beq.n	801428c <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8014240:	4b49      	ldr	r3, [pc, #292]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014246:	f003 0303 	and.w	r3, r3, #3
 801424a:	b2db      	uxtb	r3, r3
 801424c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014250:	b2d8      	uxtb	r0, r3
 8014252:	4b45      	ldr	r3, [pc, #276]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014254:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014256:	7f7b      	ldrb	r3, [r7, #29]
 8014258:	1c59      	adds	r1, r3, #1
 801425a:	7779      	strb	r1, [r7, #29]
 801425c:	4413      	add	r3, r2
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	4619      	mov	r1, r3
 8014262:	f7ff f93f 	bl	80134e4 <nfcipDEPControlMsg>
 8014266:	4603      	mov	r3, r0
 8014268:	83fb      	strh	r3, [r7, #30]
 801426a:	8bfb      	ldrh	r3, [r7, #30]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d001      	beq.n	8014274 <nfcipTargetHandleRX+0x6f8>
 8014270:	8bfb      	ldrh	r3, [r7, #30]
 8014272:	e0bd      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8014274:	4b3c      	ldr	r3, [pc, #240]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801427a:	3301      	adds	r3, #1
 801427c:	b2db      	uxtb	r3, r3
 801427e:	f003 0303 	and.w	r3, r3, #3
 8014282:	b2da      	uxtb	r2, r3
 8014284:	4b38      	ldr	r3, [pc, #224]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801428a:	e003      	b.n	8014294 <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 801428c:	4b36      	ldr	r3, [pc, #216]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801428e:	220f      	movs	r2, #15
 8014290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8014294:	2302      	movs	r3, #2
 8014296:	e0ab      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8014298:	4b33      	ldr	r3, [pc, #204]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801429a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801429c:	4b32      	ldr	r3, [pc, #200]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 801429e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80142a2:	4b31      	ldr	r3, [pc, #196]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80142a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142a6:	f04f 30ff 	mov.w	r0, #4294967295
 80142aa:	9002      	str	r0, [sp, #8]
 80142ac:	2004      	movs	r0, #4
 80142ae:	9001      	str	r0, [sp, #4]
 80142b0:	9300      	str	r3, [sp, #0]
 80142b2:	460b      	mov	r3, r1
 80142b4:	2100      	movs	r1, #0
 80142b6:	2000      	movs	r0, #0
 80142b8:	f004 f990 	bl	80185dc <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 80142bc:	2302      	movs	r3, #2
 80142be:	e097      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80142c0:	7efb      	ldrb	r3, [r7, #27]
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	7f3b      	ldrb	r3, [r7, #28]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	3b04      	subs	r3, #4
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 80142d4:	f7ff f966 	bl	80135a4 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 80142d8:	4b23      	ldr	r3, [pc, #140]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80142da:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80142de:	461a      	mov	r2, r3
 80142e0:	7f3b      	ldrb	r3, [r7, #28]
 80142e2:	3304      	adds	r3, #4
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d013      	beq.n	8014310 <nfcipTargetHandleRX+0x794>
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d00f      	beq.n	8014310 <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 80142f0:	4b1d      	ldr	r3, [pc, #116]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80142f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80142f4:	4a1c      	ldr	r2, [pc, #112]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80142f6:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 80142fa:	1898      	adds	r0, r3, r2
 80142fc:	4b1a      	ldr	r3, [pc, #104]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 80142fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014300:	7f3b      	ldrb	r3, [r7, #28]
 8014302:	3304      	adds	r3, #4
 8014304:	18d1      	adds	r1, r2, r3
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	f007 f8e0 	bl	801b4d0 <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8014310:	7ebb      	ldrb	r3, [r7, #26]
 8014312:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d137      	bne.n	801438a <nfcipTargetHandleRX+0x80e>
 801431a:	7ebb      	ldrb	r3, [r7, #26]
 801431c:	f003 0310 	and.w	r3, r3, #16
 8014320:	2b00      	cmp	r3, #0
 8014322:	d032      	beq.n	801438a <nfcipTargetHandleRX+0x80e>
        {
            gNfcip.isRxChaining = true;
 8014324:	4b10      	ldr	r3, [pc, #64]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014326:	2201      	movs	r2, #1
 8014328:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2201      	movs	r2, #1
 8014330:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8014332:	4b0d      	ldr	r3, [pc, #52]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014338:	f003 0303 	and.w	r3, r3, #3
 801433c:	b2db      	uxtb	r3, r3
 801433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014342:	b2d8      	uxtb	r0, r3
 8014344:	4b08      	ldr	r3, [pc, #32]	; (8014368 <nfcipTargetHandleRX+0x7ec>)
 8014346:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014348:	7f7b      	ldrb	r3, [r7, #29]
 801434a:	1c59      	adds	r1, r3, #1
 801434c:	7779      	strb	r1, [r7, #29]
 801434e:	4413      	add	r3, r2
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	4619      	mov	r1, r3
 8014354:	f7ff f8c6 	bl	80134e4 <nfcipDEPControlMsg>
 8014358:	4603      	mov	r3, r0
 801435a:	83fb      	strh	r3, [r7, #30]
 801435c:	8bfb      	ldrh	r3, [r7, #30]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d006      	beq.n	8014370 <nfcipTargetHandleRX+0x7f4>
 8014362:	8bfb      	ldrh	r3, [r7, #30]
 8014364:	e044      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
 8014366:	bf00      	nop
 8014368:	20003828 	.word	0x20003828
 801436c:	4d542005 	.word	0x4d542005
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8014370:	4b21      	ldr	r3, [pc, #132]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 8014372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014376:	3301      	adds	r3, #1
 8014378:	b2db      	uxtb	r3, r3
 801437a:	f003 0303 	and.w	r3, r3, #3
 801437e:	b2da      	uxtb	r2, r3
 8014380:	4b1d      	ldr	r3, [pc, #116]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 8014382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8014386:	230d      	movs	r3, #13
 8014388:	e032      	b.n	80143f0 <nfcipTargetHandleRX+0x874>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 801438a:	4b1b      	ldr	r3, [pc, #108]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 801438c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014390:	f003 030f 	and.w	r3, r3, #15
 8014394:	330c      	adds	r3, #12
 8014396:	2201      	movs	r2, #1
 8014398:	fa02 f303 	lsl.w	r3, r2, r3
 801439c:	4a17      	ldr	r2, [pc, #92]	; (80143fc <nfcipTargetHandleRX+0x880>)
 801439e:	fba2 2303 	umull	r2, r3, r2, r3
 80143a2:	0b1b      	lsrs	r3, r3, #12
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	4b14      	ldr	r3, [pc, #80]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 80143a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143ac:	f003 030f 	and.w	r3, r3, #15
 80143b0:	330c      	adds	r3, #12
 80143b2:	2101      	movs	r1, #1
 80143b4:	fa01 f303 	lsl.w	r3, r1, r3
 80143b8:	4910      	ldr	r1, [pc, #64]	; (80143fc <nfcipTargetHandleRX+0x880>)
 80143ba:	fba1 1303 	umull	r1, r3, r1, r3
 80143be:	0b1b      	lsrs	r3, r3, #12
 80143c0:	3301      	adds	r3, #1
 80143c2:	08db      	lsrs	r3, r3, #3
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	3301      	adds	r3, #1
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7f0 f95a 	bl	8004688 <timerCalculateTimer>
 80143d4:	4603      	mov	r3, r0
 80143d6:	4a08      	ldr	r2, [pc, #32]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 80143d8:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80143da:	4b07      	ldr	r3, [pc, #28]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 80143dc:	220e      	movs	r2, #14
 80143de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 80143e2:	4b05      	ldr	r3, [pc, #20]	; (80143f8 <nfcipTargetHandleRX+0x87c>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 80143ea:	2300      	movs	r3, #0
 80143ec:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 80143ee:	8bfb      	ldrh	r3, [r7, #30]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3720      	adds	r7, #32
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	20003828 	.word	0x20003828
 80143fc:	4d542005 	.word	0x4d542005

08014400 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b088      	sub	sp, #32
 8014404:	af00      	add	r7, sp, #0
 8014406:	60b9      	str	r1, [r7, #8]
 8014408:	607a      	str	r2, [r7, #4]
 801440a:	461a      	mov	r2, r3
 801440c:	4603      	mov	r3, r0
 801440e:	73fb      	strb	r3, [r7, #15]
 8014410:	4613      	mov	r3, r2
 8014412:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d101      	bne.n	801441e <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 801441a:	2307      	movs	r3, #7
 801441c:	e177      	b.n	801470e <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8014422:	89bb      	ldrh	r3, [r7, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d002      	beq.n	801442e <nfcipTx+0x2e>
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d102      	bne.n	8014434 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	3305      	adds	r3, #5
 8014432:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8014434:	2300      	movs	r3, #0
 8014436:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8014438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801443c:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8014442:	4aa0      	ldr	r2, [pc, #640]	; (80146c4 <nfcipTx+0x2c4>)
 8014444:	7bfb      	ldrb	r3, [r7, #15]
 8014446:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 801444a:	4b9e      	ldr	r3, [pc, #632]	; (80146c4 <nfcipTx+0x2c4>)
 801444c:	22ff      	movs	r2, #255	; 0xff
 801444e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8014452:	7bfb      	ldrb	r3, [r7, #15]
 8014454:	2b0b      	cmp	r3, #11
 8014456:	f200 8120 	bhi.w	801469a <nfcipTx+0x29a>
 801445a:	a201      	add	r2, pc, #4	; (adr r2, 8014460 <nfcipTx+0x60>)
 801445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014460:	08014491 	.word	0x08014491
 8014464:	08014491 	.word	0x08014491
 8014468:	08014585 	.word	0x08014585
 801446c:	080145bb 	.word	0x080145bb
 8014470:	080145bb 	.word	0x080145bb
 8014474:	080145bb 	.word	0x080145bb
 8014478:	080145e3 	.word	0x080145e3
 801447c:	080145e3 	.word	0x080145e3
 8014480:	080145cb 	.word	0x080145cb
 8014484:	080145cb 	.word	0x080145cb
 8014488:	080145cb 	.word	0x080145cb
 801448c:	080145cb 	.word	0x080145cb
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8014490:	220a      	movs	r2, #10
 8014492:	2100      	movs	r1, #0
 8014494:	6978      	ldr	r0, [r7, #20]
 8014496:	f007 f835 	bl	801b504 <memset>
 801449a:	4b8a      	ldr	r3, [pc, #552]	; (80146c4 <nfcipTx+0x2c4>)
 801449c:	7c5b      	ldrb	r3, [r3, #17]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d006      	beq.n	80144b0 <nfcipTx+0xb0>
 80144a2:	4b88      	ldr	r3, [pc, #544]	; (80146c4 <nfcipTx+0x2c4>)
 80144a4:	7c5b      	ldrb	r3, [r3, #17]
 80144a6:	461a      	mov	r2, r3
 80144a8:	4987      	ldr	r1, [pc, #540]	; (80146c8 <nfcipTx+0x2c8>)
 80144aa:	6978      	ldr	r0, [r7, #20]
 80144ac:	f007 f802 	bl	801b4b4 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80144b0:	8bfb      	ldrh	r3, [r7, #30]
 80144b2:	330a      	adds	r3, #10
 80144b4:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 80144b6:	8bfb      	ldrh	r3, [r7, #30]
 80144b8:	1c5a      	adds	r2, r3, #1
 80144ba:	83fa      	strh	r2, [r7, #30]
 80144bc:	461a      	mov	r2, r3
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	4413      	add	r3, r2
 80144c2:	4a80      	ldr	r2, [pc, #512]	; (80146c4 <nfcipTx+0x2c4>)
 80144c4:	78d2      	ldrb	r2, [r2, #3]
 80144c6:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 80144c8:	8bfb      	ldrh	r3, [r7, #30]
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	83fa      	strh	r2, [r7, #30]
 80144ce:	461a      	mov	r2, r3
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	4413      	add	r3, r2
 80144d4:	4a7b      	ldr	r2, [pc, #492]	; (80146c4 <nfcipTx+0x2c4>)
 80144d6:	7952      	ldrb	r2, [r2, #5]
 80144d8:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 80144da:	8bfb      	ldrh	r3, [r7, #30]
 80144dc:	1c5a      	adds	r2, r3, #1
 80144de:	83fa      	strh	r2, [r7, #30]
 80144e0:	461a      	mov	r2, r3
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	4413      	add	r3, r2
 80144e6:	4a77      	ldr	r2, [pc, #476]	; (80146c4 <nfcipTx+0x2c4>)
 80144e8:	7992      	ldrb	r2, [r2, #6]
 80144ea:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 80144ec:	7bfb      	ldrb	r3, [r7, #15]
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d109      	bne.n	8014506 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 80144f2:	8bfb      	ldrh	r3, [r7, #30]
 80144f4:	1c5a      	adds	r2, r3, #1
 80144f6:	83fa      	strh	r2, [r7, #30]
 80144f8:	461a      	mov	r2, r3
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	4413      	add	r3, r2
 80144fe:	4a71      	ldr	r2, [pc, #452]	; (80146c4 <nfcipTx+0x2c4>)
 8014500:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8014504:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 8014506:	4b6f      	ldr	r3, [pc, #444]	; (80146c4 <nfcipTx+0x2c4>)
 8014508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801450c:	2b00      	cmp	r3, #0
 801450e:	d023      	beq.n	8014558 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8014510:	4b6c      	ldr	r3, [pc, #432]	; (80146c4 <nfcipTx+0x2c4>)
 8014512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014516:	011b      	lsls	r3, r3, #4
 8014518:	b2db      	uxtb	r3, r3
 801451a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801451e:	b2da      	uxtb	r2, r3
 8014520:	8bfb      	ldrh	r3, [r7, #30]
 8014522:	1c59      	adds	r1, r3, #1
 8014524:	83f9      	strh	r1, [r7, #30]
 8014526:	4619      	mov	r1, r3
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	440b      	add	r3, r1
 801452c:	f042 0202 	orr.w	r2, r2, #2
 8014530:	b2d2      	uxtb	r2, r2
 8014532:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8014534:	8bfb      	ldrh	r3, [r7, #30]
 8014536:	697a      	ldr	r2, [r7, #20]
 8014538:	4413      	add	r3, r2
 801453a:	4a62      	ldr	r2, [pc, #392]	; (80146c4 <nfcipTx+0x2c4>)
 801453c:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8014540:	4962      	ldr	r1, [pc, #392]	; (80146cc <nfcipTx+0x2cc>)
 8014542:	4618      	mov	r0, r3
 8014544:	f006 ffb6 	bl	801b4b4 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8014548:	4b5e      	ldr	r3, [pc, #376]	; (80146c4 <nfcipTx+0x2c4>)
 801454a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801454e:	b29a      	uxth	r2, r3
 8014550:	8bfb      	ldrh	r3, [r7, #30]
 8014552:	4413      	add	r3, r2
 8014554:	83fb      	strh	r3, [r7, #30]
 8014556:	e00e      	b.n	8014576 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8014558:	4b5a      	ldr	r3, [pc, #360]	; (80146c4 <nfcipTx+0x2c4>)
 801455a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801455e:	011b      	lsls	r3, r3, #4
 8014560:	b2da      	uxtb	r2, r3
 8014562:	8bfb      	ldrh	r3, [r7, #30]
 8014564:	1c59      	adds	r1, r3, #1
 8014566:	83f9      	strh	r1, [r7, #30]
 8014568:	4619      	mov	r1, r3
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	440b      	add	r3, r1
 801456e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8014572:	b2d2      	uxtb	r2, r2
 8014574:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8014576:	8bfb      	ldrh	r3, [r7, #30]
 8014578:	3302      	adds	r3, #2
 801457a:	2b40      	cmp	r3, #64	; 0x40
 801457c:	f240 808f 	bls.w	801469e <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 8014580:	2307      	movs	r3, #7
 8014582:	e0c4      	b.n	801470e <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8014584:	220a      	movs	r2, #10
 8014586:	2100      	movs	r1, #0
 8014588:	6978      	ldr	r0, [r7, #20]
 801458a:	f006 ffbb 	bl	801b504 <memset>
 801458e:	4b4d      	ldr	r3, [pc, #308]	; (80146c4 <nfcipTx+0x2c4>)
 8014590:	7c5b      	ldrb	r3, [r3, #17]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d006      	beq.n	80145a4 <nfcipTx+0x1a4>
 8014596:	4b4b      	ldr	r3, [pc, #300]	; (80146c4 <nfcipTx+0x2c4>)
 8014598:	7c5b      	ldrb	r3, [r3, #17]
 801459a:	461a      	mov	r2, r3
 801459c:	494a      	ldr	r1, [pc, #296]	; (80146c8 <nfcipTx+0x2c8>)
 801459e:	6978      	ldr	r0, [r7, #20]
 80145a0:	f006 ff88 	bl	801b4b4 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80145a4:	8bfb      	ldrh	r3, [r7, #30]
 80145a6:	330a      	adds	r3, #10
 80145a8:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	3b01      	subs	r3, #1
 80145ae:	61bb      	str	r3, [r7, #24]
 80145b0:	4b44      	ldr	r3, [pc, #272]	; (80146c4 <nfcipTx+0x2c4>)
 80145b2:	78da      	ldrb	r2, [r3, #3]
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	701a      	strb	r2, [r3, #0]
            break;
 80145b8:	e076      	b.n	80146a8 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	3b01      	subs	r3, #1
 80145be:	61bb      	str	r3, [r7, #24]
 80145c0:	4b40      	ldr	r3, [pc, #256]	; (80146c4 <nfcipTx+0x2c4>)
 80145c2:	78da      	ldrb	r2, [r3, #3]
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	701a      	strb	r2, [r3, #0]
            break;
 80145c8:	e06e      	b.n	80146a8 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80145ca:	4b3e      	ldr	r3, [pc, #248]	; (80146c4 <nfcipTx+0x2c4>)
 80145cc:	78db      	ldrb	r3, [r3, #3]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d067      	beq.n	80146a2 <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	3b01      	subs	r3, #1
 80145d6:	61bb      	str	r3, [r7, #24]
 80145d8:	4b3a      	ldr	r3, [pc, #232]	; (80146c4 <nfcipTx+0x2c4>)
 80145da:	78da      	ldrb	r2, [r3, #3]
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	701a      	strb	r2, [r3, #0]
            }
            break;
 80145e0:	e05f      	b.n	80146a2 <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 80145e2:	4b38      	ldr	r3, [pc, #224]	; (80146c4 <nfcipTx+0x2c4>)
 80145e4:	78db      	ldrb	r3, [r3, #3]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d003      	beq.n	80145f2 <nfcipTx+0x1f2>
 80145ea:	7cfb      	ldrb	r3, [r7, #19]
 80145ec:	f043 0304 	orr.w	r3, r3, #4
 80145f0:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 80145f2:	4b34      	ldr	r3, [pc, #208]	; (80146c4 <nfcipTx+0x2c4>)
 80145f4:	791b      	ldrb	r3, [r3, #4]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d003      	beq.n	8014602 <nfcipTx+0x202>
 80145fa:	7cfb      	ldrb	r3, [r7, #19]
 80145fc:	f043 0308 	orr.w	r3, r3, #8
 8014600:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8014602:	4b30      	ldr	r3, [pc, #192]	; (80146c4 <nfcipTx+0x2c4>)
 8014604:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8014608:	2b00      	cmp	r3, #0
 801460a:	d008      	beq.n	801461e <nfcipTx+0x21e>
 801460c:	7cfb      	ldrb	r3, [r7, #19]
 801460e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014612:	2b00      	cmp	r3, #0
 8014614:	d103      	bne.n	801461e <nfcipTx+0x21e>
 8014616:	7cfb      	ldrb	r3, [r7, #19]
 8014618:	f043 0310 	orr.w	r3, r3, #16
 801461c:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 801461e:	4a29      	ldr	r2, [pc, #164]	; (80146c4 <nfcipTx+0x2c4>)
 8014620:	7cfb      	ldrb	r3, [r7, #19]
 8014622:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 8014626:	7cfb      	ldrb	r3, [r7, #19]
 8014628:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801462c:	2b80      	cmp	r3, #128	; 0x80
 801462e:	d104      	bne.n	801463a <nfcipTx+0x23a>
 8014630:	7cfb      	ldrb	r3, [r7, #19]
 8014632:	f003 0310 	and.w	r3, r3, #16
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 801463a:	4a22      	ldr	r2, [pc, #136]	; (80146c4 <nfcipTx+0x2c4>)
 801463c:	7cfb      	ldrb	r3, [r7, #19]
 801463e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8014642:	4b20      	ldr	r3, [pc, #128]	; (80146c4 <nfcipTx+0x2c4>)
 8014644:	791b      	ldrb	r3, [r3, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d006      	beq.n	8014658 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	3b01      	subs	r3, #1
 801464e:	61bb      	str	r3, [r7, #24]
 8014650:	4b1c      	ldr	r3, [pc, #112]	; (80146c4 <nfcipTx+0x2c4>)
 8014652:	791a      	ldrb	r2, [r3, #4]
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8014658:	4b1a      	ldr	r3, [pc, #104]	; (80146c4 <nfcipTx+0x2c4>)
 801465a:	78db      	ldrb	r3, [r3, #3]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d006      	beq.n	801466e <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	3b01      	subs	r3, #1
 8014664:	61bb      	str	r3, [r7, #24]
 8014666:	4b17      	ldr	r3, [pc, #92]	; (80146c4 <nfcipTx+0x2c4>)
 8014668:	78da      	ldrb	r2, [r3, #3]
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	3b01      	subs	r3, #1
 8014672:	61bb      	str	r3, [r7, #24]
 8014674:	69bb      	ldr	r3, [r7, #24]
 8014676:	7cfa      	ldrb	r2, [r7, #19]
 8014678:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 801467a:	89bb      	ldrh	r3, [r7, #12]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d112      	bne.n	80146a6 <nfcipTx+0x2a6>
 8014680:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <nfcipTx+0x2c4>)
 8014682:	789b      	ldrb	r3, [r3, #2]
 8014684:	f003 0304 	and.w	r3, r3, #4
 8014688:	2b00      	cmp	r3, #0
 801468a:	d00c      	beq.n	80146a6 <nfcipTx+0x2a6>
 801468c:	7cfb      	ldrb	r3, [r7, #19]
 801468e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d107      	bne.n	80146a6 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 8014696:	2307      	movs	r3, #7
 8014698:	e039      	b.n	801470e <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 801469a:	2307      	movs	r3, #7
 801469c:	e037      	b.n	801470e <nfcipTx+0x30e>
            break;
 801469e:	bf00      	nop
 80146a0:	e002      	b.n	80146a8 <nfcipTx+0x2a8>
            break;
 80146a2:	bf00      	nop
 80146a4:	e000      	b.n	80146a8 <nfcipTx+0x2a8>
            break;
 80146a6:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	3b01      	subs	r3, #1
 80146ac:	61bb      	str	r3, [r7, #24]
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	7bfa      	ldrb	r2, [r7, #15]
 80146b2:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80146b4:	7bfb      	ldrb	r3, [r7, #15]
 80146b6:	f003 0301 	and.w	r3, r3, #1
 80146ba:	b2db      	uxtb	r3, r3
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d107      	bne.n	80146d0 <nfcipTx+0x2d0>
 80146c0:	22d4      	movs	r2, #212	; 0xd4
 80146c2:	e006      	b.n	80146d2 <nfcipTx+0x2d2>
 80146c4:	20003828 	.word	0x20003828
 80146c8:	2000382f 	.word	0x2000382f
 80146cc:	2000383a 	.word	0x2000383a
 80146d0:	22d5      	movs	r2, #213	; 0xd5
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	3b01      	subs	r3, #1
 80146d6:	61bb      	str	r3, [r7, #24]
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 80146dc:	697a      	ldr	r2, [r7, #20]
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	89bb      	ldrh	r3, [r7, #12]
 80146e6:	4413      	add	r3, r2
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	8bfb      	ldrh	r3, [r7, #30]
 80146ec:	4413      	add	r3, r2
 80146ee:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 80146f0:	4b09      	ldr	r3, [pc, #36]	; (8014718 <nfcipTx+0x318>)
 80146f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80146f6:	8bfa      	ldrh	r2, [r7, #30]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d901      	bls.n	8014700 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 80146fc:	2318      	movs	r3, #24
 80146fe:	e006      	b.n	801470e <nfcipTx+0x30e>
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8014700:	8bfb      	ldrh	r3, [r7, #30]
 8014702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014704:	4619      	mov	r1, r3
 8014706:	69b8      	ldr	r0, [r7, #24]
 8014708:	f000 fe2a 	bl	8015360 <nfcipDataTx>
 801470c:	4603      	mov	r3, r0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3720      	adds	r7, #32
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	20003828 	.word	0x20003828

0801471c <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d034      	beq.n	8014794 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 801472a:	2250      	movs	r2, #80	; 0x50
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	481b      	ldr	r0, [pc, #108]	; (801479c <nfcipConfig+0x80>)
 8014730:	f006 fec0 	bl	801b4b4 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8014734:	4b19      	ldr	r3, [pc, #100]	; (801479c <nfcipConfig+0x80>)
 8014736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801473a:	2b0e      	cmp	r3, #14
 801473c:	bf28      	it	cs
 801473e:	230e      	movcs	r3, #14
 8014740:	b2da      	uxtb	r2, r3
 8014742:	4b16      	ldr	r3, [pc, #88]	; (801479c <nfcipConfig+0x80>)
 8014744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8014748:	4b14      	ldr	r3, [pc, #80]	; (801479c <nfcipConfig+0x80>)
 801474a:	78db      	ldrb	r3, [r3, #3]
 801474c:	2b0e      	cmp	r3, #14
 801474e:	bf28      	it	cs
 8014750:	230e      	movcs	r3, #14
 8014752:	b2da      	uxtb	r2, r3
 8014754:	4b11      	ldr	r3, [pc, #68]	; (801479c <nfcipConfig+0x80>)
 8014756:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8014758:	4b10      	ldr	r3, [pc, #64]	; (801479c <nfcipConfig+0x80>)
 801475a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801475e:	3301      	adds	r3, #1
 8014760:	019b      	lsls	r3, r3, #6
 8014762:	2bfd      	cmp	r3, #253	; 0xfd
 8014764:	d807      	bhi.n	8014776 <nfcipConfig+0x5a>
 8014766:	4b0d      	ldr	r3, [pc, #52]	; (801479c <nfcipConfig+0x80>)
 8014768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801476c:	3301      	adds	r3, #1
 801476e:	b29b      	uxth	r3, r3
 8014770:	019b      	lsls	r3, r3, #6
 8014772:	b29b      	uxth	r3, r3
 8014774:	e000      	b.n	8014778 <nfcipConfig+0x5c>
 8014776:	23fe      	movs	r3, #254	; 0xfe
 8014778:	4a08      	ldr	r2, [pc, #32]	; (801479c <nfcipConfig+0x80>)
 801477a:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 801477e:	4b07      	ldr	r3, [pc, #28]	; (801479c <nfcipConfig+0x80>)
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d101      	bne.n	801478a <nfcipConfig+0x6e>
 8014786:	220a      	movs	r2, #10
 8014788:	e000      	b.n	801478c <nfcipConfig+0x70>
 801478a:	2201      	movs	r2, #1
 801478c:	4b03      	ldr	r3, [pc, #12]	; (801479c <nfcipConfig+0x80>)
 801478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8014792:	e000      	b.n	8014796 <nfcipConfig+0x7a>
        return;
 8014794:	bf00      	nop
}
 8014796:	3708      	adds	r7, #8
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}
 801479c:	20003828 	.word	0x20003828

080147a0 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 80147a0:	b5b0      	push	{r4, r5, r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af02      	add	r7, sp, #8
 80147a6:	6078      	str	r0, [r7, #4]
 80147a8:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 80147aa:	2314      	movs	r3, #20
 80147ac:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 80147ae:	4b93      	ldr	r3, [pc, #588]	; (80149fc <nfcipRun+0x25c>)
 80147b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80147b4:	2b10      	cmp	r3, #16
 80147b6:	f200 8117 	bhi.w	80149e8 <nfcipRun+0x248>
 80147ba:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <nfcipRun+0x20>)
 80147bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c0:	08014805 	.word	0x08014805
 80147c4:	080149e9 	.word	0x080149e9
 80147c8:	080149e9 	.word	0x080149e9
 80147cc:	080149e9 	.word	0x080149e9
 80147d0:	08014805 	.word	0x08014805
 80147d4:	08014809 	.word	0x08014809
 80147d8:	08014865 	.word	0x08014865
 80147dc:	080149e9 	.word	0x080149e9
 80147e0:	080149e9 	.word	0x080149e9
 80147e4:	080149e9 	.word	0x080149e9
 80147e8:	080149e9 	.word	0x080149e9
 80147ec:	080149e9 	.word	0x080149e9
 80147f0:	08014805 	.word	0x08014805
 80147f4:	080149af 	.word	0x080149af
 80147f8:	0801488d 	.word	0x0801488d
 80147fc:	08014937 	.word	0x08014937
 8014800:	08014805 	.word	0x08014805
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8014804:	2300      	movs	r3, #0
 8014806:	e0f5      	b.n	80149f4 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8014808:	4b7c      	ldr	r3, [pc, #496]	; (80149fc <nfcipRun+0x25c>)
 801480a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801480c:	4b7b      	ldr	r3, [pc, #492]	; (80149fc <nfcipRun+0x25c>)
 801480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014810:	4a7a      	ldr	r2, [pc, #488]	; (80149fc <nfcipRun+0x25c>)
 8014812:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8014816:	189c      	adds	r4, r3, r2
 8014818:	4b78      	ldr	r3, [pc, #480]	; (80149fc <nfcipRun+0x25c>)
 801481a:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 801481e:	4b77      	ldr	r3, [pc, #476]	; (80149fc <nfcipRun+0x25c>)
 8014820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014824:	f003 0303 	and.w	r3, r3, #3
 8014828:	b2db      	uxtb	r3, r3
 801482a:	4a74      	ldr	r2, [pc, #464]	; (80149fc <nfcipRun+0x25c>)
 801482c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 801482e:	4a73      	ldr	r2, [pc, #460]	; (80149fc <nfcipRun+0x25c>)
 8014830:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8014832:	440a      	add	r2, r1
 8014834:	9201      	str	r2, [sp, #4]
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	462b      	mov	r3, r5
 801483a:	4622      	mov	r2, r4
 801483c:	4601      	mov	r1, r0
 801483e:	2006      	movs	r0, #6
 8014840:	f7ff fdde 	bl	8014400 <nfcipTx>
 8014844:	4603      	mov	r3, r0
 8014846:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 8014848:	89fb      	ldrh	r3, [r7, #14]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d005      	beq.n	801485a <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 801484e:	4b6b      	ldr	r3, [pc, #428]	; (80149fc <nfcipRun+0x25c>)
 8014850:	2204      	movs	r2, #4
 8014852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 8014856:	89fb      	ldrh	r3, [r7, #14]
 8014858:	e0cc      	b.n	80149f4 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 801485a:	4b68      	ldr	r3, [pc, #416]	; (80149fc <nfcipRun+0x25c>)
 801485c:	2206      	movs	r2, #6
 801485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8014862:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 8014864:	2000      	movs	r0, #0
 8014866:	f000 fd9b 	bl	80153a0 <nfcipDataRx>
 801486a:	4603      	mov	r3, r0
 801486c:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 801486e:	89fb      	ldrh	r3, [r7, #14]
 8014870:	2b02      	cmp	r3, #2
 8014872:	f000 80bb 	beq.w	80149ec <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 8014876:	4b61      	ldr	r3, [pc, #388]	; (80149fc <nfcipRun+0x25c>)
 8014878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801487a:	8819      	ldrh	r1, [r3, #0]
 801487c:	89f8      	ldrh	r0, [r7, #14]
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	f7fe feab 	bl	80135dc <nfcipInitiatorHandleDEP>
 8014886:	4603      	mov	r3, r0
 8014888:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 801488a:	e0af      	b.n	80149ec <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 801488c:	4b5b      	ldr	r3, [pc, #364]	; (80149fc <nfcipRun+0x25c>)
 801488e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014890:	4618      	mov	r0, r3
 8014892:	f7ef ff07 	bl	80046a4 <timerIsExpired>
 8014896:	4603      	mov	r3, r0
 8014898:	f083 0301 	eor.w	r3, r3, #1
 801489c:	b2db      	uxtb	r3, r3
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d001      	beq.n	80148a6 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 80148a2:	2302      	movs	r3, #2
 80148a4:	e0a6      	b.n	80149f4 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 80148a6:	4b55      	ldr	r3, [pc, #340]	; (80149fc <nfcipRun+0x25c>)
 80148a8:	789b      	ldrb	r3, [r3, #2]
 80148aa:	f003 0301 	and.w	r3, r3, #1
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d001      	beq.n	80148b6 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 80148b2:	2304      	movs	r3, #4
 80148b4:	e09e      	b.n	80149f4 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 80148b6:	4b51      	ldr	r3, [pc, #324]	; (80149fc <nfcipRun+0x25c>)
 80148b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80148bc:	1c5a      	adds	r2, r3, #1
 80148be:	b2d1      	uxtb	r1, r2
 80148c0:	4a4e      	ldr	r2, [pc, #312]	; (80149fc <nfcipRun+0x25c>)
 80148c2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 80148c6:	2b03      	cmp	r3, #3
 80148c8:	d901      	bls.n	80148ce <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 80148ca:	230b      	movs	r3, #11
 80148cc:	e092      	b.n	80149f4 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 80148ce:	4b4b      	ldr	r3, [pc, #300]	; (80149fc <nfcipRun+0x25c>)
 80148d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148d4:	f003 030f 	and.w	r3, r3, #15
 80148d8:	330c      	adds	r3, #12
 80148da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80148de:	fa22 f303 	lsr.w	r3, r2, r3
 80148e2:	2b3a      	cmp	r3, #58	; 0x3a
 80148e4:	d80b      	bhi.n	80148fe <nfcipRun+0x15e>
 80148e6:	4b45      	ldr	r3, [pc, #276]	; (80149fc <nfcipRun+0x25c>)
 80148e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ec:	f003 030f 	and.w	r3, r3, #15
 80148f0:	330c      	adds	r3, #12
 80148f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80148f6:	fa22 f303 	lsr.w	r3, r2, r3
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	e000      	b.n	8014900 <nfcipRun+0x160>
 80148fe:	233b      	movs	r3, #59	; 0x3b
 8014900:	4a3e      	ldr	r2, [pc, #248]	; (80149fc <nfcipRun+0x25c>)
 8014902:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8014906:	4b3d      	ldr	r3, [pc, #244]	; (80149fc <nfcipRun+0x25c>)
 8014908:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801490c:	4619      	mov	r1, r3
 801490e:	2090      	movs	r0, #144	; 0x90
 8014910:	f7fe fde8 	bl	80134e4 <nfcipDEPControlMsg>
 8014914:	4603      	mov	r3, r0
 8014916:	81fb      	strh	r3, [r7, #14]
 8014918:	89fb      	ldrh	r3, [r7, #14]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <nfcipRun+0x182>
 801491e:	89fb      	ldrh	r3, [r7, #14]
 8014920:	e068      	b.n	80149f4 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 8014922:	4b36      	ldr	r3, [pc, #216]	; (80149fc <nfcipRun+0x25c>)
 8014924:	2201      	movs	r2, #1
 8014926:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 801492a:	4b34      	ldr	r3, [pc, #208]	; (80149fc <nfcipRun+0x25c>)
 801492c:	220d      	movs	r2, #13
 801492e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8014932:	2302      	movs	r3, #2
 8014934:	e05e      	b.n	80149f4 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 8014936:	4b31      	ldr	r3, [pc, #196]	; (80149fc <nfcipRun+0x25c>)
 8014938:	6e19      	ldr	r1, [r3, #96]	; 0x60
 801493a:	4b30      	ldr	r3, [pc, #192]	; (80149fc <nfcipRun+0x25c>)
 801493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801493e:	4a2f      	ldr	r2, [pc, #188]	; (80149fc <nfcipRun+0x25c>)
 8014940:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8014944:	441a      	add	r2, r3
 8014946:	4b2d      	ldr	r3, [pc, #180]	; (80149fc <nfcipRun+0x25c>)
 8014948:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 801494c:	4b2b      	ldr	r3, [pc, #172]	; (80149fc <nfcipRun+0x25c>)
 801494e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014952:	f003 0303 	and.w	r3, r3, #3
 8014956:	b2db      	uxtb	r3, r3
 8014958:	f04f 34ff 	mov.w	r4, #4294967295
 801495c:	9401      	str	r4, [sp, #4]
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	4603      	mov	r3, r0
 8014962:	2007      	movs	r0, #7
 8014964:	f7ff fd4c 	bl	8014400 <nfcipTx>
 8014968:	4603      	mov	r3, r0
 801496a:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 801496c:	4b23      	ldr	r3, [pc, #140]	; (80149fc <nfcipRun+0x25c>)
 801496e:	2200      	movs	r2, #0
 8014970:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 8014974:	4b21      	ldr	r3, [pc, #132]	; (80149fc <nfcipRun+0x25c>)
 8014976:	2200      	movs	r2, #0
 8014978:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 801497c:	4b1f      	ldr	r3, [pc, #124]	; (80149fc <nfcipRun+0x25c>)
 801497e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014982:	3301      	adds	r3, #1
 8014984:	b2db      	uxtb	r3, r3
 8014986:	f003 0303 	and.w	r3, r3, #3
 801498a:	b2da      	uxtb	r2, r3
 801498c:	4b1b      	ldr	r3, [pc, #108]	; (80149fc <nfcipRun+0x25c>)
 801498e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 8014992:	89fb      	ldrh	r3, [r7, #14]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d005      	beq.n	80149a4 <nfcipRun+0x204>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 8014998:	4b18      	ldr	r3, [pc, #96]	; (80149fc <nfcipRun+0x25c>)
 801499a:	220c      	movs	r2, #12
 801499c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 80149a0:	89fb      	ldrh	r3, [r7, #14]
 80149a2:	e027      	b.n	80149f4 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 80149a4:	4b15      	ldr	r3, [pc, #84]	; (80149fc <nfcipRun+0x25c>)
 80149a6:	220d      	movs	r2, #13
 80149a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 80149ac:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 80149ae:	4b13      	ldr	r3, [pc, #76]	; (80149fc <nfcipRun+0x25c>)
 80149b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d006      	beq.n	80149c6 <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 80149b8:	4b10      	ldr	r3, [pc, #64]	; (80149fc <nfcipRun+0x25c>)
 80149ba:	2200      	movs	r2, #0
 80149bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 80149c0:	2300      	movs	r3, #0
 80149c2:	81fb      	strh	r3, [r7, #14]
 80149c4:	e004      	b.n	80149d0 <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 80149c6:	2000      	movs	r0, #0
 80149c8:	f000 fcea 	bl	80153a0 <nfcipDataRx>
 80149cc:	4603      	mov	r3, r0
 80149ce:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 80149d0:	89fb      	ldrh	r3, [r7, #14]
 80149d2:	2b02      	cmp	r3, #2
 80149d4:	d00c      	beq.n	80149f0 <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 80149d6:	89fb      	ldrh	r3, [r7, #14]
 80149d8:	683a      	ldr	r2, [r7, #0]
 80149da:	6879      	ldr	r1, [r7, #4]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7ff f8cd 	bl	8013b7c <nfcipTargetHandleRX>
 80149e2:	4603      	mov	r3, r0
 80149e4:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80149e6:	e003      	b.n	80149f0 <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 80149e8:	bf00      	nop
 80149ea:	e002      	b.n	80149f2 <nfcipRun+0x252>
            break;
 80149ec:	bf00      	nop
 80149ee:	e000      	b.n	80149f2 <nfcipRun+0x252>
            break;
 80149f0:	bf00      	nop
    }
    return ret;
 80149f2:	89fb      	ldrh	r3, [r7, #14]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bdb0      	pop	{r4, r5, r7, pc}
 80149fc:	20003828 	.word	0x20003828

08014a00 <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 8014a04:	4b28      	ldr	r3, [pc, #160]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a06:	2200      	movs	r2, #0
 8014a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 8014a0c:	4b26      	ldr	r3, [pc, #152]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 8014a14:	4b24      	ldr	r3, [pc, #144]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a16:	2200      	movs	r2, #0
 8014a18:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 8014a1c:	4b22      	ldr	r3, [pc, #136]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a1e:	2200      	movs	r2, #0
 8014a20:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8014a24:	4b20      	ldr	r3, [pc, #128]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a26:	2200      	movs	r2, #0
 8014a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8014a2c:	4b1e      	ldr	r3, [pc, #120]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a2e:	2202      	movs	r2, #2
 8014a30:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 8014a32:	4b1d      	ldr	r3, [pc, #116]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a34:	2200      	movs	r2, #0
 8014a36:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8014a38:	4b1b      	ldr	r3, [pc, #108]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8014a3e:	4b1a      	ldr	r3, [pc, #104]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a40:	2200      	movs	r2, #0
 8014a42:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8014a44:	4b18      	ldr	r3, [pc, #96]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a46:	2200      	movs	r2, #0
 8014a48:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 8014a4a:	4b17      	ldr	r3, [pc, #92]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a4c:	2203      	movs	r2, #3
 8014a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8014a52:	4b15      	ldr	r3, [pc, #84]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014a58:	3301      	adds	r3, #1
 8014a5a:	019b      	lsls	r3, r3, #6
 8014a5c:	2bfd      	cmp	r3, #253	; 0xfd
 8014a5e:	d807      	bhi.n	8014a70 <rfalNfcDepInitialize+0x70>
 8014a60:	4b11      	ldr	r3, [pc, #68]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014a66:	3301      	adds	r3, #1
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	019b      	lsls	r3, r3, #6
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	e000      	b.n	8014a72 <rfalNfcDepInitialize+0x72>
 8014a70:	23fe      	movs	r3, #254	; 0xfe
 8014a72:	4a0d      	ldr	r2, [pc, #52]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a74:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 8014a78:	4b0b      	ldr	r3, [pc, #44]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8014a80:	4b09      	ldr	r3, [pc, #36]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014a86:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8014a88:	4b07      	ldr	r3, [pc, #28]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014a8e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 8014a90:	4b05      	ldr	r3, [pc, #20]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a92:	2200      	movs	r2, #0
 8014a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 8014a98:	4b03      	ldr	r3, [pc, #12]	; (8014aa8 <rfalNfcDepInitialize+0xa8>)
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 8014a9e:	f7fe fd81 	bl	80135a4 <nfcipClearCounters>
}
 8014aa2:	bf00      	nop
 8014aa4:	bd80      	pop	{r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	20003828 	.word	0x20003828

08014aac <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	7ada      	ldrb	r2, [r3, #11]
 8014ab8:	4b2f      	ldr	r3, [pc, #188]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014aba:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	4a2d      	ldr	r2, [pc, #180]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014ac4:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	4a2b      	ldr	r2, [pc, #172]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014acc:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	891a      	ldrh	r2, [r3, #8]
 8014ad2:	4b29      	ldr	r3, [pc, #164]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	8a1a      	ldrh	r2, [r3, #16]
 8014adc:	4b26      	ldr	r3, [pc, #152]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	7a9a      	ldrb	r2, [r3, #10]
 8014ae6:	4b24      	ldr	r3, [pc, #144]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	7c9a      	ldrb	r2, [r3, #18]
 8014af0:	4b21      	ldr	r3, [pc, #132]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014af2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2bff      	cmp	r3, #255	; 0xff
 8014afc:	d007      	beq.n	8014b0e <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	2b0e      	cmp	r3, #14
 8014b04:	bf28      	it	cs
 8014b06:	230e      	movcs	r3, #14
 8014b08:	b2da      	uxtb	r2, r3
 8014b0a:	4b1b      	ldr	r3, [pc, #108]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b0c:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	695b      	ldr	r3, [r3, #20]
 8014b12:	4a19      	ldr	r2, [pc, #100]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b14:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	699b      	ldr	r3, [r3, #24]
 8014b1a:	4a17      	ldr	r2, [pc, #92]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	8b9a      	ldrh	r2, [r3, #28]
 8014b22:	4b15      	ldr	r3, [pc, #84]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8014b28:	4b13      	ldr	r3, [pc, #76]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	d119      	bne.n	8014b64 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	891b      	ldrh	r3, [r3, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d010      	beq.n	8014b5a <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8014b38:	4b0f      	ldr	r3, [pc, #60]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b3a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8014b3e:	f083 0301 	eor.w	r3, r3, #1
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d004      	beq.n	8014b52 <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8014b48:	4b0b      	ldr	r3, [pc, #44]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b4a:	220f      	movs	r2, #15
 8014b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 8014b50:	e00e      	b.n	8014b70 <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 8014b52:	4b09      	ldr	r3, [pc, #36]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b54:	2201      	movs	r2, #1
 8014b56:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8014b5a:	4b07      	ldr	r3, [pc, #28]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b5c:	220d      	movs	r2, #13
 8014b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 8014b62:	e005      	b.n	8014b70 <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 8014b64:	f7fe fd1e 	bl	80135a4 <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8014b68:	4b03      	ldr	r3, [pc, #12]	; (8014b78 <nfcipSetDEPParams+0xcc>)
 8014b6a:	2205      	movs	r2, #5
 8014b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	20003828 	.word	0x20003828

08014b7c <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b086      	sub	sp, #24
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	460b      	mov	r3, r1
 8014b86:	607a      	str	r2, [r7, #4]
 8014b88:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 8014b8e:	897b      	ldrh	r3, [r7, #10]
 8014b90:	2b0f      	cmp	r3, #15
 8014b92:	d902      	bls.n	8014b9a <rfalNfcDepIsAtrReq+0x1e>
 8014b94:	897b      	ldrh	r3, [r7, #10]
 8014b96:	2b40      	cmp	r3, #64	; 0x40
 8014b98:	d901      	bls.n	8014b9e <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	e020      	b.n	8014be0 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 8014b9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ba0:	1c5a      	adds	r2, r3, #1
 8014ba2:	75fa      	strb	r2, [r7, #23]
 8014ba4:	461a      	mov	r2, r3
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	4413      	add	r3, r2
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	2bd4      	cmp	r3, #212	; 0xd4
 8014bae:	d001      	beq.n	8014bb4 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e015      	b.n	8014be0 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8014bb4:	7dfb      	ldrb	r3, [r7, #23]
 8014bb6:	1c5a      	adds	r2, r3, #1
 8014bb8:	75fa      	strb	r2, [r7, #23]
 8014bba:	461a      	mov	r2, r3
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	4413      	add	r3, r2
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d001      	beq.n	8014bca <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	e00a      	b.n	8014be0 <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d006      	beq.n	8014bde <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	3302      	adds	r3, #2
 8014bd4:	220a      	movs	r2, #10
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f006 fc6b 	bl	801b4b4 <memcpy>
    }
     
    return true;
 8014bde:	2301      	movs	r3, #1
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3718      	adds	r7, #24
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b088      	sub	sp, #32
 8014bec:	af02      	add	r7, sp, #8
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 8014bf2:	4b79      	ldr	r3, [pc, #484]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014bf8:	2b0b      	cmp	r3, #11
 8014bfa:	d001      	beq.n	8014c00 <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 8014bfc:	2321      	movs	r3, #33	; 0x21
 8014bfe:	e0e6      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d101      	bne.n	8014c0a <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 8014c06:	2307      	movs	r3, #7
 8014c08:	e0e1      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	f000 fbc8 	bl	80153a0 <nfcipDataRx>
 8014c10:	4603      	mov	r3, r0
 8014c12:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 8014c14:	8afb      	ldrh	r3, [r7, #22]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 8014c1a:	8afb      	ldrh	r3, [r7, #22]
 8014c1c:	e0d7      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	22c0      	movs	r2, #192	; 0xc0
 8014c26:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 8014c28:	7d7b      	ldrb	r3, [r7, #21]
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 8014c2e:	4b6a      	ldr	r3, [pc, #424]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c32:	7d7b      	ldrb	r3, [r7, #21]
 8014c34:	1c59      	adds	r1, r3, #1
 8014c36:	7579      	strb	r1, [r7, #21]
 8014c38:	4413      	add	r3, r2
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	2bd4      	cmp	r3, #212	; 0xd4
 8014c3e:	d001      	beq.n	8014c44 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 8014c40:	230b      	movs	r3, #11
 8014c42:	e0c4      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 8014c44:	4b64      	ldr	r3, [pc, #400]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c48:	7d7b      	ldrb	r3, [r7, #21]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	2b04      	cmp	r3, #4
 8014c50:	f040 8082 	bne.w	8014d58 <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 8014c54:	7d7b      	ldrb	r3, [r7, #21]
 8014c56:	3301      	adds	r3, #1
 8014c58:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 8014c5a:	4b5f      	ldr	r3, [pc, #380]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c5e:	7d7b      	ldrb	r3, [r7, #21]
 8014c60:	1c59      	adds	r1, r3, #1
 8014c62:	7579      	strb	r1, [r7, #21]
 8014c64:	4413      	add	r3, r2
 8014c66:	781a      	ldrb	r2, [r3, #0]
 8014c68:	4b5b      	ldr	r3, [pc, #364]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c6a:	78db      	ldrb	r3, [r3, #3]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d001      	beq.n	8014c74 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 8014c70:	230b      	movs	r3, #11
 8014c72:	e0ac      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 8014c74:	4b58      	ldr	r3, [pc, #352]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c78:	7d7b      	ldrb	r3, [r7, #21]
 8014c7a:	1c59      	adds	r1, r3, #1
 8014c7c:	7579      	strb	r1, [r7, #21]
 8014c7e:	4413      	add	r3, r2
 8014c80:	781a      	ldrb	r2, [r3, #0]
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 8014c86:	4b54      	ldr	r3, [pc, #336]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c8a:	7d7b      	ldrb	r3, [r7, #21]
 8014c8c:	1c59      	adds	r1, r3, #1
 8014c8e:	7579      	strb	r1, [r7, #21]
 8014c90:	4413      	add	r3, r2
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f003 0303 	and.w	r3, r3, #3
 8014c98:	b2da      	uxtb	r2, r3
 8014c9a:	4b4f      	ldr	r3, [pc, #316]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8014ca0:	4b4d      	ldr	r3, [pc, #308]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014ca2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	019b      	lsls	r3, r3, #6
 8014caa:	2bfd      	cmp	r3, #253	; 0xfd
 8014cac:	d807      	bhi.n	8014cbe <nfcipTargetHandleActivation+0xd6>
 8014cae:	4b4a      	ldr	r3, [pc, #296]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	019b      	lsls	r3, r3, #6
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	e000      	b.n	8014cc0 <nfcipTargetHandleActivation+0xd8>
 8014cbe:	23fe      	movs	r3, #254	; 0xfe
 8014cc0:	4a45      	ldr	r2, [pc, #276]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014cc2:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d032      	beq.n	8014d32 <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	08db      	lsrs	r3, r3, #3
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	f003 0307 	and.w	r3, r3, #7
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	f003 0307 	and.w	r3, r3, #7
 8014ce8:	b2da      	uxtb	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 8014cf0:	4b39      	ldr	r3, [pc, #228]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014cf2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 8014cfc:	4b36      	ldr	r3, [pc, #216]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014cfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	7bdb      	ldrb	r3, [r3, #15]
 8014d0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8014d10:	b2da      	uxtb	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	7bda      	ldrb	r2, [r3, #15]
 8014d1a:	4b2f      	ldr	r3, [pc, #188]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d20:	011b      	lsls	r3, r3, #4
 8014d22:	b2db      	uxtb	r3, r3
 8014d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8014d32:	f107 010c 	add.w	r1, r7, #12
 8014d36:	f04f 33ff 	mov.w	r3, #4294967295
 8014d3a:	9301      	str	r3, [sp, #4]
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	2300      	movs	r3, #0
 8014d42:	2200      	movs	r2, #0
 8014d44:	2005      	movs	r0, #5
 8014d46:	f7ff fb5b 	bl	8014400 <nfcipTx>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	82fb      	strh	r3, [r7, #22]
 8014d4e:	8afb      	ldrh	r3, [r7, #22]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d037      	beq.n	8014dc4 <nfcipTargetHandleActivation+0x1dc>
 8014d54:	8afb      	ldrh	r3, [r7, #22]
 8014d56:	e03a      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 8014d58:	4b1f      	ldr	r3, [pc, #124]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014d5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014d5c:	7d7b      	ldrb	r3, [r7, #21]
 8014d5e:	4413      	add	r3, r2
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	2b06      	cmp	r3, #6
 8014d64:	d12a      	bne.n	8014dbc <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 8014d66:	7d7b      	ldrb	r3, [r7, #21]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 8014d6c:	4b1a      	ldr	r3, [pc, #104]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014d6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014d70:	7d7b      	ldrb	r3, [r7, #21]
 8014d72:	4413      	add	r3, r2
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	f003 0303 	and.w	r3, r3, #3
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d001      	beq.n	8014d82 <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 8014d7e:	230b      	movs	r3, #11
 8014d80:	e025      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 8014d82:	4b15      	ldr	r3, [pc, #84]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014d84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014d86:	7d7b      	ldrb	r3, [r7, #21]
 8014d88:	4413      	add	r3, r2
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	f003 0304 	and.w	r3, r3, #4
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d00d      	beq.n	8014db0 <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 8014d94:	4b10      	ldr	r3, [pc, #64]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014d96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014d98:	7d7b      	ldrb	r3, [r7, #21]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	757b      	strb	r3, [r7, #21]
 8014d9e:	7d7b      	ldrb	r3, [r7, #21]
 8014da0:	4413      	add	r3, r2
 8014da2:	781a      	ldrb	r2, [r3, #0]
 8014da4:	4b0c      	ldr	r3, [pc, #48]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014da6:	78db      	ldrb	r3, [r3, #3]
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d007      	beq.n	8014dbc <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 8014dac:	230b      	movs	r3, #11
 8014dae:	e00e      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 8014db0:	4b09      	ldr	r3, [pc, #36]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014db2:	78db      	ldrb	r3, [r3, #3]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d001      	beq.n	8014dbc <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 8014db8:	230b      	movs	r3, #11
 8014dba:	e008      	b.n	8014dce <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8014dbc:	4b06      	ldr	r3, [pc, #24]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8014dc4:	4b04      	ldr	r3, [pc, #16]	; (8014dd8 <nfcipTargetHandleActivation+0x1f0>)
 8014dc6:	220d      	movs	r2, #13
 8014dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	20003828 	.word	0x20003828

08014ddc <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b0c0      	sub	sp, #256	; 0x100
 8014de0:	af04      	add	r7, sp, #16
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d005      	beq.n	8014dfa <rfalNfcDepATR+0x1e>
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d002      	beq.n	8014dfa <rfalNfcDepATR+0x1e>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d101      	bne.n	8014dfe <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8014dfa:	2307      	movs	r3, #7
 8014dfc:	e0bb      	b.n	8014f76 <rfalNfcDepATR+0x19a>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	7a5b      	ldrb	r3, [r3, #9]
 8014e02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	7a9b      	ldrb	r3, [r3, #10]
 8014e0a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8014e0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8014e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	7b1b      	ldrb	r3, [r3, #12]
 8014e22:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	7adb      	ldrb	r3, [r3, #11]
 8014e2a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	7b5b      	ldrb	r3, [r3, #13]
 8014e32:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8014e36:	230e      	movs	r3, #14
 8014e38:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	7d1b      	ldrb	r3, [r3, #20]
 8014e40:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8014e44:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00a      	beq.n	8014e62 <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	6919      	ldr	r1, [r3, #16]
 8014e50:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014e54:	461a      	mov	r2, r3
 8014e56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014e5a:	3312      	adds	r3, #18
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f006 fb29 	bl	801b4b4 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	7a1b      	ldrb	r3, [r3, #8]
 8014e66:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8014e6a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d00a      	beq.n	8014e88 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	6859      	ldr	r1, [r3, #4]
 8014e76:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014e80:	3307      	adds	r3, #7
 8014e82:	4618      	mov	r0, r3
 8014e84:	f006 fb16 	bl	801b4b4 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	785b      	ldrb	r3, [r3, #1]
 8014e92:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 8014e9e:	f7ff fdaf 	bl	8014a00 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8014ea2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7ff fc38 	bl	801471c <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8014eac:	4b34      	ldr	r3, [pc, #208]	; (8014f80 <rfalNfcDepATR+0x1a4>)
 8014eae:	785b      	ldrb	r3, [r3, #1]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d101      	bne.n	8014eb8 <rfalNfcDepATR+0xdc>
 8014eb4:	4a33      	ldr	r2, [pc, #204]	; (8014f84 <rfalNfcDepATR+0x1a8>)
 8014eb6:	e000      	b.n	8014eba <rfalNfcDepATR+0xde>
 8014eb8:	4a33      	ldr	r2, [pc, #204]	; (8014f88 <rfalNfcDepATR+0x1ac>)
 8014eba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014ebe:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8014ec2:	9303      	str	r3, [sp, #12]
 8014ec4:	2341      	movs	r3, #65	; 0x41
 8014ec6:	9302      	str	r3, [sp, #8]
 8014ec8:	f107 0314 	add.w	r3, r7, #20
 8014ecc:	9301      	str	r3, [sp, #4]
 8014ece:	2300      	movs	r3, #0
 8014ed0:	9300      	str	r3, [sp, #0]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	f7fe fabd 	bl	8013454 <nfcipTxRx>
 8014eda:	4603      	mov	r3, r0
 8014edc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8014ee0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d002      	beq.n	8014eee <rfalNfcDepATR+0x112>
 8014ee8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8014eec:	e043      	b.n	8014f76 <rfalNfcDepATR+0x19a>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8014ef4:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014ef8:	1c5a      	adds	r2, r3, #1
 8014efa:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014efe:	33f0      	adds	r3, #240	; 0xf0
 8014f00:	443b      	add	r3, r7
 8014f02:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014f06:	b29b      	uxth	r3, r3
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8014f10:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014f14:	2b10      	cmp	r3, #16
 8014f16:	d903      	bls.n	8014f20 <rfalNfcDepATR+0x144>
 8014f18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014f1c:	2b40      	cmp	r3, #64	; 0x40
 8014f1e:	d901      	bls.n	8014f24 <rfalNfcDepATR+0x148>
    {
        return ERR_PROTO;
 8014f20:	230b      	movs	r3, #11
 8014f22:	e028      	b.n	8014f76 <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8014f24:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014f2e:	33f0      	adds	r3, #240	; 0xf0
 8014f30:	443b      	add	r3, r7
 8014f32:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014f36:	2bd5      	cmp	r3, #213	; 0xd5
 8014f38:	d001      	beq.n	8014f3e <rfalNfcDepATR+0x162>
    {
        return ERR_PROTO;
 8014f3a:	230b      	movs	r3, #11
 8014f3c:	e01b      	b.n	8014f76 <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 8014f3e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014f42:	1c5a      	adds	r2, r3, #1
 8014f44:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014f48:	33f0      	adds	r3, #240	; 0xf0
 8014f4a:	443b      	add	r3, r7
 8014f4c:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d001      	beq.n	8014f58 <rfalNfcDepATR+0x17c>
    {
        return ERR_PROTO;
 8014f54:	230b      	movs	r3, #11
 8014f56:	e00e      	b.n	8014f76 <rfalNfcDepATR+0x19a>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 8014f58:	f107 0314 	add.w	r3, r7, #20
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8014f62:	4619      	mov	r1, r3
 8014f64:	68b8      	ldr	r0, [r7, #8]
 8014f66:	f006 faa5 	bl	801b4b4 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 8014f6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014f6e:	b2da      	uxtb	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8014f74:	2300      	movs	r3, #0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	37f0      	adds	r7, #240	; 0xf0
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	20003828 	.word	0x20003828
 8014f84:	00200201 	.word	0x00200201
 8014f88:	01000201 	.word	0x01000201

08014f8c <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 8014f8c:	b590      	push	{r4, r7, lr}
 8014f8e:	b08b      	sub	sp, #44	; 0x2c
 8014f90:	af04      	add	r7, sp, #16
 8014f92:	4603      	mov	r3, r0
 8014f94:	460a      	mov	r2, r1
 8014f96:	71fb      	strb	r3, [r7, #7]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 8014f9c:	2304      	movs	r3, #4
 8014f9e:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8014fa0:	7dfb      	ldrb	r3, [r7, #23]
 8014fa2:	1c5a      	adds	r2, r3, #1
 8014fa4:	75fa      	strb	r2, [r7, #23]
 8014fa6:	3318      	adds	r3, #24
 8014fa8:	443b      	add	r3, r7
 8014faa:	79fa      	ldrb	r2, [r7, #7]
 8014fac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8014fb0:	7dfb      	ldrb	r3, [r7, #23]
 8014fb2:	1c5a      	adds	r2, r3, #1
 8014fb4:	75fa      	strb	r2, [r7, #23]
 8014fb6:	3318      	adds	r3, #24
 8014fb8:	443b      	add	r3, r7
 8014fba:	79ba      	ldrb	r2, [r7, #6]
 8014fbc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8014fc0:	4b2d      	ldr	r3, [pc, #180]	; (8015078 <rfalNfcDepPSL+0xec>)
 8014fc2:	785b      	ldrb	r3, [r3, #1]
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d101      	bne.n	8014fcc <rfalNfcDepPSL+0x40>
 8014fc8:	482c      	ldr	r0, [pc, #176]	; (801507c <rfalNfcDepPSL+0xf0>)
 8014fca:	e000      	b.n	8014fce <rfalNfcDepPSL+0x42>
 8014fcc:	482c      	ldr	r0, [pc, #176]	; (8015080 <rfalNfcDepPSL+0xf4>)
 8014fce:	7dfb      	ldrb	r3, [r7, #23]
 8014fd0:	3b04      	subs	r3, #4
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	f107 020c 	add.w	r2, r7, #12
 8014fd8:	1d14      	adds	r4, r2, #4
 8014fda:	f107 010c 	add.w	r1, r7, #12
 8014fde:	f107 0212 	add.w	r2, r7, #18
 8014fe2:	9203      	str	r2, [sp, #12]
 8014fe4:	2204      	movs	r2, #4
 8014fe6:	9202      	str	r2, [sp, #8]
 8014fe8:	f107 0208 	add.w	r2, r7, #8
 8014fec:	9201      	str	r2, [sp, #4]
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	4623      	mov	r3, r4
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	2004      	movs	r0, #4
 8014ff6:	f7fe fa2d 	bl	8013454 <nfcipTxRx>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	82bb      	strh	r3, [r7, #20]
 8014ffe:	8abb      	ldrh	r3, [r7, #20]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d001      	beq.n	8015008 <rfalNfcDepPSL+0x7c>
 8015004:	8abb      	ldrh	r3, [r7, #20]
 8015006:	e033      	b.n	8015070 <rfalNfcDepPSL+0xe4>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8015008:	2300      	movs	r3, #0
 801500a:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 801500c:	7dfb      	ldrb	r3, [r7, #23]
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	75fa      	strb	r2, [r7, #23]
 8015012:	3318      	adds	r3, #24
 8015014:	443b      	add	r3, r7
 8015016:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801501a:	b29b      	uxth	r3, r3
 801501c:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 801501e:	8a7b      	ldrh	r3, [r7, #18]
 8015020:	2b03      	cmp	r3, #3
 8015022:	d801      	bhi.n	8015028 <rfalNfcDepPSL+0x9c>
    {
        return ERR_PROTO;
 8015024:	230b      	movs	r3, #11
 8015026:	e023      	b.n	8015070 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 8015028:	7dfb      	ldrb	r3, [r7, #23]
 801502a:	1c5a      	adds	r2, r3, #1
 801502c:	75fa      	strb	r2, [r7, #23]
 801502e:	3318      	adds	r3, #24
 8015030:	443b      	add	r3, r7
 8015032:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8015036:	2bd5      	cmp	r3, #213	; 0xd5
 8015038:	d001      	beq.n	801503e <rfalNfcDepPSL+0xb2>
    {
        return ERR_PROTO;
 801503a:	230b      	movs	r3, #11
 801503c:	e018      	b.n	8015070 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 801503e:	7dfb      	ldrb	r3, [r7, #23]
 8015040:	1c5a      	adds	r2, r3, #1
 8015042:	75fa      	strb	r2, [r7, #23]
 8015044:	3318      	adds	r3, #24
 8015046:	443b      	add	r3, r7
 8015048:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801504c:	2b05      	cmp	r3, #5
 801504e:	d001      	beq.n	8015054 <rfalNfcDepPSL+0xc8>
    {
        return ERR_PROTO;
 8015050:	230b      	movs	r3, #11
 8015052:	e00d      	b.n	8015070 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 8015054:	7dfb      	ldrb	r3, [r7, #23]
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	75fa      	strb	r2, [r7, #23]
 801505a:	3318      	adds	r3, #24
 801505c:	443b      	add	r3, r7
 801505e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8015062:	4b05      	ldr	r3, [pc, #20]	; (8015078 <rfalNfcDepPSL+0xec>)
 8015064:	78db      	ldrb	r3, [r3, #3]
 8015066:	429a      	cmp	r2, r3
 8015068:	d001      	beq.n	801506e <rfalNfcDepPSL+0xe2>
    {
        return ERR_PROTO;
 801506a:	230b      	movs	r3, #11
 801506c:	e000      	b.n	8015070 <rfalNfcDepPSL+0xe4>
    }
    
    return ERR_NONE;
 801506e:	2300      	movs	r3, #0
}
 8015070:	4618      	mov	r0, r3
 8015072:	371c      	adds	r7, #28
 8015074:	46bd      	mov	sp, r7
 8015076:	bd90      	pop	{r4, r7, pc}
 8015078:	20003828 	.word	0x20003828
 801507c:	00200201 	.word	0x00200201
 8015080:	01000201 	.word	0x01000201

08015084 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 8015084:	b580      	push	{r7, lr}
 8015086:	b08a      	sub	sp, #40	; 0x28
 8015088:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 801508e:	4b2e      	ldr	r3, [pc, #184]	; (8015148 <rfalNfcDepRLS+0xc4>)
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d101      	bne.n	801509a <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 8015096:	2300      	movs	r3, #0
 8015098:	e051      	b.n	801513e <rfalNfcDepRLS+0xba>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 801509a:	4b2b      	ldr	r3, [pc, #172]	; (8015148 <rfalNfcDepRLS+0xc4>)
 801509c:	785b      	ldrb	r3, [r3, #1]
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d101      	bne.n	80150a6 <rfalNfcDepRLS+0x22>
 80150a2:	4a2a      	ldr	r2, [pc, #168]	; (801514c <rfalNfcDepRLS+0xc8>)
 80150a4:	e000      	b.n	80150a8 <rfalNfcDepRLS+0x24>
 80150a6:	4a2a      	ldr	r2, [pc, #168]	; (8015150 <rfalNfcDepRLS+0xcc>)
 80150a8:	f107 010c 	add.w	r1, r7, #12
 80150ac:	1dbb      	adds	r3, r7, #6
 80150ae:	9303      	str	r3, [sp, #12]
 80150b0:	2340      	movs	r3, #64	; 0x40
 80150b2:	9302      	str	r3, [sp, #8]
 80150b4:	f107 0308 	add.w	r3, r7, #8
 80150b8:	9301      	str	r3, [sp, #4]
 80150ba:	2300      	movs	r3, #0
 80150bc:	9300      	str	r3, [sp, #0]
 80150be:	2300      	movs	r3, #0
 80150c0:	200a      	movs	r0, #10
 80150c2:	f7fe f9c7 	bl	8013454 <nfcipTxRx>
 80150c6:	4603      	mov	r3, r0
 80150c8:	82fb      	strh	r3, [r7, #22]
 80150ca:	8afb      	ldrh	r3, [r7, #22]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d001      	beq.n	80150d4 <rfalNfcDepRLS+0x50>
 80150d0:	8afb      	ldrh	r3, [r7, #22]
 80150d2:	e034      	b.n	801513e <rfalNfcDepRLS+0xba>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 80150d4:	2300      	movs	r3, #0
 80150d6:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 80150d8:	7d7b      	ldrb	r3, [r7, #21]
 80150da:	1c5a      	adds	r2, r3, #1
 80150dc:	757a      	strb	r2, [r7, #21]
 80150de:	3318      	adds	r3, #24
 80150e0:	443b      	add	r3, r7
 80150e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80150e6:	2b02      	cmp	r3, #2
 80150e8:	d801      	bhi.n	80150ee <rfalNfcDepRLS+0x6a>
    {
        return ERR_PROTO;
 80150ea:	230b      	movs	r3, #11
 80150ec:	e027      	b.n	801513e <rfalNfcDepRLS+0xba>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 80150ee:	7d7b      	ldrb	r3, [r7, #21]
 80150f0:	1c5a      	adds	r2, r3, #1
 80150f2:	757a      	strb	r2, [r7, #21]
 80150f4:	3318      	adds	r3, #24
 80150f6:	443b      	add	r3, r7
 80150f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80150fc:	2bd5      	cmp	r3, #213	; 0xd5
 80150fe:	d001      	beq.n	8015104 <rfalNfcDepRLS+0x80>
    {
        return ERR_PROTO;
 8015100:	230b      	movs	r3, #11
 8015102:	e01c      	b.n	801513e <rfalNfcDepRLS+0xba>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 8015104:	7d7b      	ldrb	r3, [r7, #21]
 8015106:	1c5a      	adds	r2, r3, #1
 8015108:	757a      	strb	r2, [r7, #21]
 801510a:	3318      	adds	r3, #24
 801510c:	443b      	add	r3, r7
 801510e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8015112:	2b0b      	cmp	r3, #11
 8015114:	d001      	beq.n	801511a <rfalNfcDepRLS+0x96>
    {
        return ERR_PROTO;
 8015116:	230b      	movs	r3, #11
 8015118:	e011      	b.n	801513e <rfalNfcDepRLS+0xba>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 801511a:	4b0b      	ldr	r3, [pc, #44]	; (8015148 <rfalNfcDepRLS+0xc4>)
 801511c:	78db      	ldrb	r3, [r3, #3]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00c      	beq.n	801513c <rfalNfcDepRLS+0xb8>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8015122:	7d7b      	ldrb	r3, [r7, #21]
 8015124:	1c5a      	adds	r2, r3, #1
 8015126:	757a      	strb	r2, [r7, #21]
 8015128:	3318      	adds	r3, #24
 801512a:	443b      	add	r3, r7
 801512c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8015130:	4b05      	ldr	r3, [pc, #20]	; (8015148 <rfalNfcDepRLS+0xc4>)
 8015132:	78db      	ldrb	r3, [r3, #3]
 8015134:	429a      	cmp	r2, r3
 8015136:	d001      	beq.n	801513c <rfalNfcDepRLS+0xb8>
        {
            return ERR_PROTO;
 8015138:	230b      	movs	r3, #11
 801513a:	e000      	b.n	801513e <rfalNfcDepRLS+0xba>
        }
    }
    
    return ERR_NONE;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	20003828 	.word	0x20003828
 801514c:	00200201 	.word	0x00200201
 8015150:	01000201 	.word	0x01000201

08015154 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	460b      	mov	r3, r1
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d002      	beq.n	801516e <rfalNfcDepInitiatorHandleActivation+0x1a>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d101      	bne.n	8015172 <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 801516e:	2307      	movs	r3, #7
 8015170:	e0da      	b.n	8015328 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 8015178:	2302      	movs	r3, #2
 801517a:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	3341      	adds	r3, #65	; 0x41
 8015182:	461a      	mov	r2, r3
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f7ff fe29 	bl	8014ddc <rfalNfcDepATR>
 801518a:	4603      	mov	r3, r0
 801518c:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 801518e:	8a7b      	ldrh	r3, [r7, #18]
 8015190:	2b15      	cmp	r3, #21
 8015192:	d005      	beq.n	80151a0 <rfalNfcDepInitiatorHandleActivation+0x4c>
 8015194:	8a7b      	ldrh	r3, [r7, #18]
 8015196:	2b09      	cmp	r3, #9
 8015198:	d002      	beq.n	80151a0 <rfalNfcDepInitiatorHandleActivation+0x4c>
 801519a:	8a7b      	ldrh	r3, [r7, #18]
 801519c:	2b1b      	cmp	r3, #27
 801519e:	d105      	bne.n	80151ac <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 80151a0:	7dfb      	ldrb	r3, [r7, #23]
 80151a2:	1e5a      	subs	r2, r3, #1
 80151a4:	75fa      	strb	r2, [r7, #23]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d1e8      	bne.n	801517c <rfalNfcDepInitiatorHandleActivation+0x28>
 80151aa:	e000      	b.n	80151ae <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 80151ac:	bf00      	nop
    
    if( ret != ERR_NONE )
 80151ae:	8a7b      	ldrh	r3, [r7, #18]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d001      	beq.n	80151b8 <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 80151b4:	8a7b      	ldrh	r3, [r7, #18]
 80151b6:	e0b7      	b.n	8015328 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80151be:	3b11      	subs	r3, #17
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	7b1a      	ldrb	r2, [r3, #12]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	7c1b      	ldrb	r3, [r3, #16]
 80151de:	091b      	lsrs	r3, r3, #4
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	f003 0303 	and.w	r3, r3, #3
 80151e6:	b2da      	uxtb	r2, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80151f4:	3301      	adds	r3, #1
 80151f6:	019b      	lsls	r3, r3, #6
 80151f8:	2bfd      	cmp	r3, #253	; 0xfd
 80151fa:	d807      	bhi.n	801520c <rfalNfcDepInitiatorHandleActivation+0xb8>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015202:	3301      	adds	r3, #1
 8015204:	b29b      	uxth	r3, r3
 8015206:	019b      	lsls	r3, r3, #6
 8015208:	b29a      	uxth	r2, r3
 801520a:	e000      	b.n	801520e <rfalNfcDepInitiatorHandleActivation+0xba>
 801520c:	22fe      	movs	r2, #254	; 0xfe
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	7bdb      	ldrb	r3, [r3, #15]
 8015218:	f003 030f 	and.w	r3, r3, #15
 801521c:	b2da      	uxtb	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801522a:	4618      	mov	r0, r3
 801522c:	f000 f882 	bl	8015334 <rfalNfcDepCalculateRWT>
 8015230:	4602      	mov	r2, r0
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	220c      	movs	r2, #12
 801523a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	3355      	adds	r3, #85	; 0x55
 8015246:	4619      	mov	r1, r3
 8015248:	4610      	mov	r0, r2
 801524a:	f002 ff6f 	bl	801812c <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 801524e:	2300      	movs	r3, #0
 8015250:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	b2db      	uxtb	r3, r3
 801525c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015260:	b2da      	uxtb	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015268:	f003 0307 	and.w	r3, r3, #7
 801526c:	b2db      	uxtb	r3, r3
 801526e:	4313      	orrs	r3, r2
 8015270:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015278:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015280:	7afa      	ldrb	r2, [r7, #11]
 8015282:	429a      	cmp	r2, r3
 8015284:	d018      	beq.n	80152b8 <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	7b99      	ldrb	r1, [r3, #14]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	7b5a      	ldrb	r2, [r3, #13]
 801528e:	7afb      	ldrb	r3, [r7, #11]
 8015290:	4618      	mov	r0, r3
 8015292:	f7fe f8bd 	bl	8013410 <nfcipDxIsSupported>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00d      	beq.n	80152b8 <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 801529c:	2301      	movs	r3, #1
 801529e:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 80152a0:	7afb      	ldrb	r3, [r7, #11]
 80152a2:	00db      	lsls	r3, r3, #3
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152aa:	b2da      	uxtb	r2, r3
 80152ac:	7afb      	ldrb	r3, [r7, #11]
 80152ae:	f003 0307 	and.w	r3, r3, #7
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	4313      	orrs	r3, r2
 80152b6:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 80152b8:	7d7b      	ldrb	r3, [r7, #21]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d033      	beq.n	8015326 <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 80152be:	7c7a      	ldrb	r2, [r7, #17]
 80152c0:	7dbb      	ldrb	r3, [r7, #22]
 80152c2:	4611      	mov	r1, r2
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7ff fe61 	bl	8014f8c <rfalNfcDepPSL>
 80152ca:	4603      	mov	r3, r0
 80152cc:	827b      	strh	r3, [r7, #18]
 80152ce:	8a7b      	ldrh	r3, [r7, #18]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d001      	beq.n	80152d8 <rfalNfcDepInitiatorHandleActivation+0x184>
 80152d4:	8a7b      	ldrh	r3, [r7, #18]
 80152d6:	e027      	b.n	8015328 <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80152de:	7afa      	ldrb	r2, [r7, #11]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d01e      	beq.n	8015322 <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d107      	bne.n	80152fe <rfalNfcDepInitiatorHandleActivation+0x1aa>
 80152ee:	4b10      	ldr	r3, [pc, #64]	; (8015330 <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 80152f0:	785b      	ldrb	r3, [r3, #1]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d103      	bne.n	80152fe <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 80152f6:	7afb      	ldrb	r3, [r7, #11]
 80152f8:	4618      	mov	r0, r3
 80152fa:	f001 fa63 	bl	80167c4 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	7afa      	ldrb	r2, [r7, #11]
 8015302:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	7afa      	ldrb	r2, [r7, #11]
 801530a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801531a:	4619      	mov	r1, r3
 801531c:	4610      	mov	r0, r2
 801531e:	f002 fca1 	bl	8017c64 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8015322:	2300      	movs	r3, #0
 8015324:	e000      	b.n	8015328 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 8015326:	2300      	movs	r3, #0
}
 8015328:	4618      	mov	r0, r3
 801532a:	3718      	adds	r7, #24
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	20003828 	.word	0x20003828

08015334 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 801533e:	79fb      	ldrb	r3, [r7, #7]
 8015340:	2b0e      	cmp	r3, #14
 8015342:	bf28      	it	cs
 8015344:	230e      	movcs	r3, #14
 8015346:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 8015348:	7bfb      	ldrb	r3, [r7, #15]
 801534a:	f003 030f 	and.w	r3, r3, #15
 801534e:	330c      	adds	r3, #12
 8015350:	2201      	movs	r2, #1
 8015352:	fa02 f303 	lsl.w	r3, r2, r3
}
 8015356:	4618      	mov	r0, r3
 8015358:	3714      	adds	r7, #20
 801535a:	46bd      	mov	sp, r7
 801535c:	bc80      	pop	{r7}
 801535e:	4770      	bx	lr

08015360 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 8015360:	b590      	push	{r4, r7, lr}
 8015362:	b089      	sub	sp, #36	; 0x24
 8015364:	af04      	add	r7, sp, #16
 8015366:	60f8      	str	r0, [r7, #12]
 8015368:	460b      	mov	r3, r1
 801536a:	607a      	str	r2, [r7, #4]
 801536c:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 801536e:	4b0b      	ldr	r3, [pc, #44]	; (801539c <nfcipDataTx+0x3c>)
 8015370:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015372:	4b0a      	ldr	r3, [pc, #40]	; (801539c <nfcipDataTx+0x3c>)
 8015374:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 8015378:	4b08      	ldr	r3, [pc, #32]	; (801539c <nfcipDataTx+0x3c>)
 801537a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801537c:	8979      	ldrh	r1, [r7, #10]
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	9202      	str	r2, [sp, #8]
 8015382:	2204      	movs	r2, #4
 8015384:	9201      	str	r2, [sp, #4]
 8015386:	9300      	str	r3, [sp, #0]
 8015388:	4623      	mov	r3, r4
 801538a:	4602      	mov	r2, r0
 801538c:	68f8      	ldr	r0, [r7, #12]
 801538e:	f003 f925 	bl	80185dc <rfalTransceiveBlockingTx>
 8015392:	4603      	mov	r3, r0
}
 8015394:	4618      	mov	r0, r3
 8015396:	3714      	adds	r7, #20
 8015398:	46bd      	mov	sp, r7
 801539a:	bd90      	pop	{r4, r7, pc}
 801539c:	20003828 	.word	0x20003828

080153a0 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	4603      	mov	r3, r0
 80153a8:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 80153aa:	79fb      	ldrb	r3, [r7, #7]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d004      	beq.n	80153ba <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 80153b0:	f003 f960 	bl	8018674 <rfalTransceiveBlockingRx>
 80153b4:	4603      	mov	r3, r0
 80153b6:	81fb      	strh	r3, [r7, #14]
 80153b8:	e003      	b.n	80153c2 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 80153ba:	f003 f9c5 	bl	8018748 <rfalGetTransceiveStatus>
 80153be:	4603      	mov	r3, r0
 80153c0:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 80153c2:	89fb      	ldrh	r3, [r7, #14]
 80153c4:	2b02      	cmp	r3, #2
 80153c6:	d028      	beq.n	801541a <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 80153c8:	4b16      	ldr	r3, [pc, #88]	; (8015424 <nfcipDataRx+0x84>)
 80153ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d024      	beq.n	801541a <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 80153d0:	4b14      	ldr	r3, [pc, #80]	; (8015424 <nfcipDataRx+0x84>)
 80153d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153d4:	881b      	ldrh	r3, [r3, #0]
 80153d6:	3307      	adds	r3, #7
 80153d8:	08da      	lsrs	r2, r3, #3
 80153da:	4b12      	ldr	r3, [pc, #72]	; (8015424 <nfcipDataRx+0x84>)
 80153dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153de:	b292      	uxth	r2, r2
 80153e0:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 80153e2:	89fb      	ldrh	r3, [r7, #14]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d118      	bne.n	801541a <nfcipDataRx+0x7a>
 80153e8:	4b0e      	ldr	r3, [pc, #56]	; (8015424 <nfcipDataRx+0x84>)
 80153ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d014      	beq.n	801541a <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 80153f0:	4b0c      	ldr	r3, [pc, #48]	; (8015424 <nfcipDataRx+0x84>)
 80153f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153f4:	881a      	ldrh	r2, [r3, #0]
 80153f6:	4b0b      	ldr	r3, [pc, #44]	; (8015424 <nfcipDataRx+0x84>)
 80153f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	429a      	cmp	r2, r3
 8015400:	d109      	bne.n	8015416 <nfcipDataRx+0x76>
 8015402:	4b08      	ldr	r3, [pc, #32]	; (8015424 <nfcipDataRx+0x84>)
 8015404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	2b02      	cmp	r3, #2
 801540a:	d904      	bls.n	8015416 <nfcipDataRx+0x76>
 801540c:	4b05      	ldr	r3, [pc, #20]	; (8015424 <nfcipDataRx+0x84>)
 801540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015410:	881b      	ldrh	r3, [r3, #0]
 8015412:	2bff      	cmp	r3, #255	; 0xff
 8015414:	d901      	bls.n	801541a <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 8015416:	2309      	movs	r3, #9
 8015418:	e000      	b.n	801541c <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 801541a:	89fb      	ldrh	r3, [r7, #14]
}
 801541c:	4618      	mov	r0, r3
 801541e:	3710      	adds	r7, #16
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}
 8015424:	20003828 	.word	0x20003828

08015428 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 8015428:	b082      	sub	sp, #8
 801542a:	b580      	push	{r7, lr}
 801542c:	b09c      	sub	sp, #112	; 0x70
 801542e:	af02      	add	r7, sp, #8
 8015430:	60f8      	str	r0, [r7, #12]
 8015432:	60b9      	str	r1, [r7, #8]
 8015434:	677b      	str	r3, [r7, #116]	; 0x74
 8015436:	4613      	mov	r3, r2
 8015438:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d005      	beq.n	801544c <rfalNfcDepListenStartActivation+0x24>
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d002      	beq.n	801544c <rfalNfcDepListenStartActivation+0x24>
 8015446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 801544c:	2307      	movs	r3, #7
 801544e:	e0f4      	b.n	801563a <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 8015450:	88fb      	ldrh	r3, [r7, #6]
 8015452:	2200      	movs	r2, #0
 8015454:	4619      	mov	r1, r3
 8015456:	68b8      	ldr	r0, [r7, #8]
 8015458:	f7ff fb90 	bl	8014b7c <rfalNfcDepIsAtrReq>
 801545c:	4603      	mov	r3, r0
 801545e:	f083 0301 	eor.w	r3, r3, #1
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b00      	cmp	r3, #0
 8015466:	d001      	beq.n	801546c <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 8015468:	2307      	movs	r3, #7
 801546a:	e0e6      	b.n	801563a <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 801546c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015470:	88fa      	ldrh	r2, [r7, #6]
 8015472:	b2d2      	uxtb	r2, r2
 8015474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 8015478:	88fb      	ldrh	r3, [r7, #6]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d007      	beq.n	801548e <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 801547e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015482:	4618      	mov	r0, r3
 8015484:	88fb      	ldrh	r3, [r7, #6]
 8015486:	461a      	mov	r2, r3
 8015488:	68b9      	ldr	r1, [r7, #8]
 801548a:	f006 f813 	bl	801b4b4 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 801548e:	88fb      	ldrh	r3, [r7, #6]
 8015490:	b2da      	uxtb	r2, r3
 8015492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015496:	3a10      	subs	r2, #16
 8015498:	b2d2      	uxtb	r2, r2
 801549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 801549e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80154a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154a6:	7b12      	ldrb	r2, [r2, #12]
 80154a8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80154ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154b0:	2200      	movs	r2, #0
 80154b2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 80154b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154ba:	7bdb      	ldrb	r3, [r3, #15]
 80154bc:	091b      	lsrs	r3, r3, #4
 80154be:	b2da      	uxtb	r2, r3
 80154c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154c4:	f002 0203 	and.w	r2, r2, #3
 80154c8:	b2d2      	uxtb	r2, r2
 80154ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 80154ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80154d6:	3301      	adds	r3, #1
 80154d8:	019b      	lsls	r3, r3, #6
 80154da:	2bfd      	cmp	r3, #253	; 0xfd
 80154dc:	d808      	bhi.n	80154f0 <rfalNfcDepListenStartActivation+0xc8>
 80154de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80154e6:	3301      	adds	r3, #1
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	019b      	lsls	r3, r3, #6
 80154ec:	b29a      	uxth	r2, r3
 80154ee:	e000      	b.n	80154f2 <rfalNfcDepListenStartActivation+0xca>
 80154f0:	22fe      	movs	r2, #254	; 0xfe
 80154f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 80154fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154fe:	2200      	movs	r2, #0
 8015500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 8015504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015508:	f04f 32ff 	mov.w	r2, #4294967295
 801550c:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 801550e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015512:	f04f 32ff 	mov.w	r2, #4294967295
 8015516:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 8015518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801551c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8015520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015524:	3355      	adds	r3, #85	; 0x55
 8015526:	4619      	mov	r1, r3
 8015528:	4610      	mov	r0, r2
 801552a:	f002 fdff 	bl	801812c <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 801552e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015532:	4a45      	ldr	r2, [pc, #276]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 8015534:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8015536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801553a:	7b1b      	ldrb	r3, [r3, #12]
 801553c:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 801553e:	2300      	movs	r3, #0
 8015540:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8015542:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8015546:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8015548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801554c:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	7b1b      	ldrb	r3, [r3, #12]
 8015552:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	7adb      	ldrb	r3, [r3, #11]
 8015558:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	7b9b      	ldrb	r3, [r3, #14]
 801555e:	091b      	lsrs	r3, r3, #4
 8015560:	b2db      	uxtb	r3, r3
 8015562:	f003 0303 	and.w	r3, r3, #3
 8015566:	b2db      	uxtb	r3, r3
 8015568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015572:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 8015576:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801557a:	2b00      	cmp	r3, #0
 801557c:	d00b      	beq.n	8015596 <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	f103 010f 	add.w	r1, r3, #15
 8015584:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8015588:	461a      	mov	r2, r3
 801558a:	f107 0314 	add.w	r3, r7, #20
 801558e:	3312      	adds	r3, #18
 8015590:	4618      	mov	r0, r3
 8015592:	f005 ff8f 	bl	801b4b4 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8015596:	230a      	movs	r3, #10
 8015598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	1c5a      	adds	r2, r3, #1
 80155a0:	f107 031b 	add.w	r3, r7, #27
 80155a4:	6810      	ldr	r0, [r2, #0]
 80155a6:	6851      	ldr	r1, [r2, #4]
 80155a8:	6018      	str	r0, [r3, #0]
 80155aa:	6059      	str	r1, [r3, #4]
 80155ac:	8912      	ldrh	r2, [r2, #8]
 80155ae:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	7b5b      	ldrb	r3, [r3, #13]
 80155b4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 80155b8:	2301      	movs	r3, #1
 80155ba:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155c2:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 80155ca:	f7ff fa19 	bl	8014a00 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 80155ce:	f107 0314 	add.w	r3, r7, #20
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7ff f8a2 	bl	801471c <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 80155d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155da:	4a1b      	ldr	r2, [pc, #108]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155dc:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 80155de:	4b1a      	ldr	r3, [pc, #104]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155e0:	f240 1203 	movw	r2, #259	; 0x103
 80155e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 80155e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80155ea:	4a17      	ldr	r2, [pc, #92]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155ec:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 80155ee:	4b16      	ldr	r3, [pc, #88]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155f0:	2205      	movs	r2, #5
 80155f2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 80155f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80155f8:	4a13      	ldr	r2, [pc, #76]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155fa:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 80155fc:	4b12      	ldr	r3, [pc, #72]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 80155fe:	2205      	movs	r2, #5
 8015600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8015604:	4b10      	ldr	r3, [pc, #64]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 8015606:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8015608:	f04f 33ff 	mov.w	r3, #4294967295
 801560c:	9301      	str	r3, [sp, #4]
 801560e:	2300      	movs	r3, #0
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	2300      	movs	r3, #0
 8015614:	2200      	movs	r2, #0
 8015616:	2001      	movs	r0, #1
 8015618:	f7fe fef2 	bl	8014400 <nfcipTx>
 801561c:	4603      	mov	r3, r0
 801561e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8015622:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8015626:	2b00      	cmp	r3, #0
 8015628:	d002      	beq.n	8015630 <rfalNfcDepListenStartActivation+0x208>
 801562a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801562e:	e004      	b.n	801563a <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 8015630:	4b05      	ldr	r3, [pc, #20]	; (8015648 <rfalNfcDepListenStartActivation+0x220>)
 8015632:	220b      	movs	r2, #11
 8015634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 8015638:	2300      	movs	r3, #0
}
 801563a:	4618      	mov	r0, r3
 801563c:	3768      	adds	r7, #104	; 0x68
 801563e:	46bd      	mov	sp, r7
 8015640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015644:	b002      	add	sp, #8
 8015646:	4770      	bx	lr
 8015648:	20003828 	.word	0x20003828

0801564c <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b086      	sub	sp, #24
 8015650:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 8015652:	23c0      	movs	r3, #192	; 0xc0
 8015654:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 8015656:	4b2f      	ldr	r3, [pc, #188]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8015658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801565a:	1d7a      	adds	r2, r7, #5
 801565c:	4611      	mov	r1, r2
 801565e:	4618      	mov	r0, r3
 8015660:	f7ff fac2 	bl	8014be8 <nfcipTargetHandleActivation>
 8015664:	4603      	mov	r3, r0
 8015666:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 8015668:	88fb      	ldrh	r3, [r7, #6]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d002      	beq.n	8015674 <rfalNfcDepListenGetActivationStatus+0x28>
 801566e:	2b02      	cmp	r3, #2
 8015670:	d048      	beq.n	8015704 <rfalNfcDepListenGetActivationStatus+0xb8>
 8015672:	e034      	b.n	80156de <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 8015674:	797b      	ldrb	r3, [r7, #5]
 8015676:	2bc0      	cmp	r3, #192	; 0xc0
 8015678:	d046      	beq.n	8015708 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 801567a:	4b26      	ldr	r3, [pc, #152]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801567c:	785b      	ldrb	r3, [r3, #1]
 801567e:	2b01      	cmp	r3, #1
 8015680:	d112      	bne.n	80156a8 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8015682:	4b24      	ldr	r3, [pc, #144]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8015684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015686:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 801568a:	4b22      	ldr	r3, [pc, #136]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801568e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015692:	461a      	mov	r2, r3
 8015694:	200d      	movs	r0, #13
 8015696:	f002 f9d3 	bl	8017a40 <rfalSetMode>
 801569a:	4603      	mov	r3, r0
 801569c:	80fb      	strh	r3, [r7, #6]
 801569e:	88fb      	ldrh	r3, [r7, #6]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d031      	beq.n	8015708 <rfalNfcDepListenGetActivationStatus+0xbc>
 80156a4:	88fb      	ldrh	r3, [r7, #6]
 80156a6:	e031      	b.n	801570c <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 80156a8:	4b1a      	ldr	r3, [pc, #104]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d101      	bne.n	80156b8 <rfalNfcDepListenGetActivationStatus+0x6c>
 80156b4:	200a      	movs	r0, #10
 80156b6:	e000      	b.n	80156ba <rfalNfcDepListenGetActivationStatus+0x6e>
 80156b8:	200c      	movs	r0, #12
 80156ba:	4b16      	ldr	r3, [pc, #88]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156be:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80156c2:	4b14      	ldr	r3, [pc, #80]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80156ca:	461a      	mov	r2, r3
 80156cc:	f002 f9b8 	bl	8017a40 <rfalSetMode>
 80156d0:	4603      	mov	r3, r0
 80156d2:	80fb      	strh	r3, [r7, #6]
 80156d4:	88fb      	ldrh	r3, [r7, #6]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d016      	beq.n	8015708 <rfalNfcDepListenGetActivationStatus+0xbc>
 80156da:	88fb      	ldrh	r3, [r7, #6]
 80156dc:	e016      	b.n	801570c <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80156de:	4b0d      	ldr	r3, [pc, #52]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80156e2:	4b0c      	ldr	r3, [pc, #48]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156e4:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80156e8:	4b0a      	ldr	r3, [pc, #40]	; (8015714 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80156ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156ec:	f04f 30ff 	mov.w	r0, #4294967295
 80156f0:	9002      	str	r0, [sp, #8]
 80156f2:	2004      	movs	r0, #4
 80156f4:	9001      	str	r0, [sp, #4]
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	460b      	mov	r3, r1
 80156fa:	2100      	movs	r1, #0
 80156fc:	2000      	movs	r0, #0
 80156fe:	f002 ff6d 	bl	80185dc <rfalTransceiveBlockingTx>
            break;
 8015702:	e002      	b.n	801570a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8015704:	bf00      	nop
 8015706:	e000      	b.n	801570a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8015708:	bf00      	nop
    } // if (no err)
    
    return err;
 801570a:	88fb      	ldrh	r3, [r7, #6]
}
 801570c:	4618      	mov	r0, r3
 801570e:	3708      	adds	r7, #8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	20003828 	.word	0x20003828

08015718 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b08a      	sub	sp, #40	; 0x28
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	889b      	ldrh	r3, [r3, #4]
 801572a:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	799b      	ldrb	r3, [r3, #6]
 8015730:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 8015732:	2305      	movs	r3, #5
 8015734:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 8015736:	23ff      	movs	r3, #255	; 0xff
 8015738:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 801573a:	2305      	movs	r3, #5
 801573c:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	689b      	ldr	r3, [r3, #8]
 8015742:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8015744:	f240 1303 	movw	r3, #259	; 0x103
 8015748:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	8b9b      	ldrh	r3, [r3, #28]
 801574e:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	695b      	ldr	r3, [r3, #20]
 8015754:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	699b      	ldr	r3, [r3, #24]
 801575a:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	4a07      	ldr	r2, [pc, #28]	; (8015780 <rfalNfcDepStartTransceive+0x68>)
 8015762:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	691b      	ldr	r3, [r3, #16]
 8015768:	4a05      	ldr	r2, [pc, #20]	; (8015780 <rfalNfcDepStartTransceive+0x68>)
 801576a:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 801576c:	f107 0308 	add.w	r3, r7, #8
 8015770:	4618      	mov	r0, r3
 8015772:	f7ff f99b 	bl	8014aac <nfcipSetDEPParams>
    
    return ERR_NONE;
 8015776:	2300      	movs	r3, #0
}
 8015778:	4618      	mov	r0, r3
 801577a:	3728      	adds	r7, #40	; 0x28
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	20003828 	.word	0x20003828

08015784 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 8015784:	b580      	push	{r7, lr}
 8015786:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 8015788:	4b05      	ldr	r3, [pc, #20]	; (80157a0 <rfalNfcDepGetTransceiveStatus+0x1c>)
 801578a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801578c:	4a04      	ldr	r2, [pc, #16]	; (80157a0 <rfalNfcDepGetTransceiveStatus+0x1c>)
 801578e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff f804 	bl	80147a0 <nfcipRun>
 8015798:	4603      	mov	r3, r0
}
 801579a:	4618      	mov	r0, r3
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	20003828 	.word	0x20003828

080157a4 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 80157a4:	b480      	push	{r7}
 80157a6:	b085      	sub	sp, #20
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	460b      	mov	r3, r1
 80157ae:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 80157b0:	2300      	movs	r3, #0
 80157b2:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 80157b4:	2300      	movs	r3, #0
 80157b6:	73fb      	strb	r3, [r7, #15]
 80157b8:	e009      	b.n	80157ce <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 80157ba:	7bfb      	ldrb	r3, [r7, #15]
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	4413      	add	r3, r2
 80157c0:	781a      	ldrb	r2, [r3, #0]
 80157c2:	7bbb      	ldrb	r3, [r7, #14]
 80157c4:	4053      	eors	r3, r2
 80157c6:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 80157c8:	7bfb      	ldrb	r3, [r7, #15]
 80157ca:	3301      	adds	r3, #1
 80157cc:	73fb      	strb	r3, [r7, #15]
 80157ce:	7bfa      	ldrb	r2, [r7, #15]
 80157d0:	78fb      	ldrb	r3, [r7, #3]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d3f1      	bcc.n	80157ba <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 80157d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3714      	adds	r7, #20
 80157dc:	46bd      	mov	sp, r7
 80157de:	bc80      	pop	{r7}
 80157e0:	4770      	bx	lr
	...

080157e4 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 80157ea:	2200      	movs	r2, #0
 80157ec:	2100      	movs	r1, #0
 80157ee:	2001      	movs	r0, #1
 80157f0:	f002 f926 	bl	8017a40 <rfalSetMode>
 80157f4:	4603      	mov	r3, r0
 80157f6:	80fb      	strh	r3, [r7, #6]
 80157f8:	88fb      	ldrh	r3, [r7, #6]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d001      	beq.n	8015802 <rfalNfcaPollerInitialize+0x1e>
 80157fe:	88fb      	ldrh	r3, [r7, #6]
 8015800:	e00e      	b.n	8015820 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8015802:	2001      	movs	r0, #1
 8015804:	f002 fcb8 	bl	8018178 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 8015808:	4807      	ldr	r0, [pc, #28]	; (8015828 <rfalNfcaPollerInitialize+0x44>)
 801580a:	f002 fced 	bl	80181e8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 801580e:	f240 4094 	movw	r0, #1172	; 0x494
 8015812:	f002 fcd5 	bl	80181c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 8015816:	f641 207c 	movw	r0, #6780	; 0x1a7c
 801581a:	f002 fcbd 	bl	8018198 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801581e:	2300      	movs	r3, #0
}
 8015820:	4618      	mov	r0, r3
 8015822:	3708      	adds	r7, #8
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}
 8015828:	000108d8 	.word	0x000108d8

0801582c <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b086      	sub	sp, #24
 8015830:	af02      	add	r7, sp, #8
 8015832:	4603      	mov	r3, r0
 8015834:	6039      	str	r1, [r7, #0]
 8015836:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8015838:	f107 030c 	add.w	r3, r7, #12
 801583c:	79f8      	ldrb	r0, [r7, #7]
 801583e:	f240 6254 	movw	r2, #1620	; 0x654
 8015842:	9200      	str	r2, [sp, #0]
 8015844:	2210      	movs	r2, #16
 8015846:	6839      	ldr	r1, [r7, #0]
 8015848:	f003 fece 	bl	80195e8 <rfalISO14443ATransceiveShortFrame>
 801584c:	4603      	mov	r3, r0
 801584e:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8015850:	89fb      	ldrh	r3, [r7, #14]
 8015852:	2b1d      	cmp	r3, #29
 8015854:	d00b      	beq.n	801586e <rfalNfcaPollerCheckPresence+0x42>
 8015856:	89fb      	ldrh	r3, [r7, #14]
 8015858:	2b15      	cmp	r3, #21
 801585a:	d008      	beq.n	801586e <rfalNfcaPollerCheckPresence+0x42>
 801585c:	89fb      	ldrh	r3, [r7, #14]
 801585e:	2b01      	cmp	r3, #1
 8015860:	d005      	beq.n	801586e <rfalNfcaPollerCheckPresence+0x42>
 8015862:	89fb      	ldrh	r3, [r7, #14]
 8015864:	2b09      	cmp	r3, #9
 8015866:	d002      	beq.n	801586e <rfalNfcaPollerCheckPresence+0x42>
 8015868:	89fb      	ldrh	r3, [r7, #14]
 801586a:	2b1b      	cmp	r3, #27
 801586c:	d101      	bne.n	8015872 <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 801586e:	2300      	movs	r3, #0
 8015870:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8015872:	89fb      	ldrh	r3, [r7, #14]
}
 8015874:	4618      	mov	r0, r3
 8015876:	3710      	adds	r7, #16
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b084      	sub	sp, #16
 8015880:	af00      	add	r7, sp, #0
 8015882:	4603      	mov	r3, r0
 8015884:	6039      	str	r1, [r7, #0]
 8015886:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 8015888:	79fb      	ldrb	r3, [r7, #7]
 801588a:	2b01      	cmp	r3, #1
 801588c:	d101      	bne.n	8015892 <rfalNfcaPollerTechnologyDetection+0x16>
 801588e:	2352      	movs	r3, #82	; 0x52
 8015890:	e000      	b.n	8015894 <rfalNfcaPollerTechnologyDetection+0x18>
 8015892:	2326      	movs	r3, #38	; 0x26
 8015894:	6839      	ldr	r1, [r7, #0]
 8015896:	4618      	mov	r0, r3
 8015898:	f7ff ffc8 	bl	801582c <rfalNfcaPollerCheckPresence>
 801589c:	4603      	mov	r3, r0
 801589e:	81fb      	strh	r3, [r7, #14]
 80158a0:	89fb      	ldrh	r3, [r7, #14]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <rfalNfcaPollerTechnologyDetection+0x2e>
 80158a6:	89fb      	ldrh	r3, [r7, #14]
 80158a8:	e005      	b.n	80158b6 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 80158aa:	79fb      	ldrb	r3, [r7, #7]
 80158ac:	2b02      	cmp	r3, #2
 80158ae:	d001      	beq.n	80158b4 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 80158b0:	f000 fb60 	bl	8015f74 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 80158b4:	2300      	movs	r3, #0
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3710      	adds	r7, #16
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}

080158be <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 80158be:	b590      	push	{r4, r7, lr}
 80158c0:	b08f      	sub	sp, #60	; 0x3c
 80158c2:	af04      	add	r7, sp, #16
 80158c4:	60b9      	str	r1, [r7, #8]
 80158c6:	607a      	str	r2, [r7, #4]
 80158c8:	603b      	str	r3, [r7, #0]
 80158ca:	4603      	mov	r3, r0
 80158cc:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 80158ce:	2300      	movs	r3, #0
 80158d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 80158d4:	2303      	movs	r3, #3
 80158d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d008      	beq.n	80158f2 <rfalNfcaPollerSingleCollisionResolution+0x34>
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d005      	beq.n	80158f2 <rfalNfcaPollerSingleCollisionResolution+0x34>
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d002      	beq.n	80158f2 <rfalNfcaPollerSingleCollisionResolution+0x34>
 80158ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d101      	bne.n	80158f6 <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 80158f2:	2307      	movs	r3, #7
 80158f4:	e1ad      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	2200      	movs	r2, #0
 80158fa:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 80158fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fe:	2200      	movs	r2, #0
 8015900:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 8015902:	220a      	movs	r2, #10
 8015904:	2100      	movs	r1, #0
 8015906:	6838      	ldr	r0, [r7, #0]
 8015908:	f005 fdfc 	bl	801b504 <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 801590c:	2300      	movs	r3, #0
 801590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015912:	e198      	b.n	8015c46 <rfalNfcaPollerSingleCollisionResolution+0x388>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 8015914:	f107 0318 	add.w	r3, r7, #24
 8015918:	2207      	movs	r2, #7
 801591a:	2100      	movs	r1, #0
 801591c:	4618      	mov	r0, r3
 801591e:	f005 fdf1 	bl	801b504 <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8015922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015926:	005b      	lsls	r3, r3, #1
 8015928:	b2db      	uxtb	r3, r3
 801592a:	3b6d      	subs	r3, #109	; 0x6d
 801592c:	b2db      	uxtb	r3, r3
 801592e:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 8015930:	2302      	movs	r3, #2
 8015932:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 8015934:	2300      	movs	r3, #0
 8015936:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 8015938:	2301      	movs	r3, #1
 801593a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 801593e:	7d7b      	ldrb	r3, [r7, #21]
 8015940:	011b      	lsls	r3, r3, #4
 8015942:	b2da      	uxtb	r2, r3
 8015944:	7d3b      	ldrb	r3, [r7, #20]
 8015946:	f003 030f 	and.w	r3, r3, #15
 801594a:	b2db      	uxtb	r3, r3
 801594c:	4313      	orrs	r3, r2
 801594e:	b2db      	uxtb	r3, r3
 8015950:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8015952:	7bfb      	ldrb	r3, [r7, #15]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d101      	bne.n	801595c <rfalNfcaPollerSingleCollisionResolution+0x9e>
 8015958:	2302      	movs	r3, #2
 801595a:	e000      	b.n	801595e <rfalNfcaPollerSingleCollisionResolution+0xa0>
 801595c:	2300      	movs	r3, #0
 801595e:	f887 3020 	strb.w	r3, [r7, #32]
 8015962:	f107 0316 	add.w	r3, r7, #22
 8015966:	f107 0214 	add.w	r2, r7, #20
 801596a:	f107 0115 	add.w	r1, r7, #21
 801596e:	f107 0018 	add.w	r0, r7, #24
 8015972:	f240 6454 	movw	r4, #1620	; 0x654
 8015976:	9400      	str	r4, [sp, #0]
 8015978:	f003 ff32 	bl	80197e0 <rfalISO14443ATransceiveAnticollisionFrame>
 801597c:	4603      	mov	r3, r0
 801597e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015980:	7bfb      	ldrb	r3, [r7, #15]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d102      	bne.n	801598c <rfalNfcaPollerSingleCollisionResolution+0xce>
 8015986:	2005      	movs	r0, #5
 8015988:	f7ee ff10 	bl	80047ac <HAL_Delay>
 801598c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015990:	1e5a      	subs	r2, r3, #1
 8015992:	f887 2020 	strb.w	r2, [r7, #32]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d002      	beq.n	80159a0 <rfalNfcaPollerSingleCollisionResolution+0xe2>
 801599a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801599c:	2b04      	cmp	r3, #4
 801599e:	d0e0      	beq.n	8015962 <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 80159a0:	8afb      	ldrh	r3, [r7, #22]
 80159a2:	3307      	adds	r3, #7
 80159a4:	08db      	lsrs	r3, r3, #3
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 80159aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80159ac:	2b04      	cmp	r3, #4
 80159ae:	d146      	bne.n	8015a3e <rfalNfcaPollerSingleCollisionResolution+0x180>
                && (backtrackCnt != 0U) && !doBacktrack
 80159b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d042      	beq.n	8015a3e <rfalNfcaPollerSingleCollisionResolution+0x180>
 80159b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159bc:	f083 0301 	eor.w	r3, r3, #1
 80159c0:	b2db      	uxtb	r3, r3
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d03b      	beq.n	8015a3e <rfalNfcaPollerSingleCollisionResolution+0x180>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 80159c6:	7d7b      	ldrb	r3, [r7, #21]
 80159c8:	2b02      	cmp	r3, #2
 80159ca:	d102      	bne.n	80159d2 <rfalNfcaPollerSingleCollisionResolution+0x114>
 80159cc:	7d3b      	ldrb	r3, [r7, #20]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d035      	beq.n	8015a3e <rfalNfcaPollerSingleCollisionResolution+0x180>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 80159d2:	231d      	movs	r3, #29
 80159d4:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 80159d6:	f107 0310 	add.w	r3, r7, #16
 80159da:	4619      	mov	r1, r3
 80159dc:	2026      	movs	r0, #38	; 0x26
 80159de:	f7ff ff25 	bl	801582c <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 80159e2:	7d3b      	ldrb	r3, [r7, #20]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d106      	bne.n	80159f6 <rfalNfcaPollerSingleCollisionResolution+0x138>
                {
                    bitsTxRx = 7;
 80159e8:	2307      	movs	r3, #7
 80159ea:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 80159ec:	7d7b      	ldrb	r3, [r7, #21]
 80159ee:	3b01      	subs	r3, #1
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	757b      	strb	r3, [r7, #21]
 80159f4:	e003      	b.n	80159fe <rfalNfcaPollerSingleCollisionResolution+0x140>
                }
                else
                {
                    bitsTxRx--;
 80159f6:	7d3b      	ldrb	r3, [r7, #20]
 80159f8:	3b01      	subs	r3, #1
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 80159fe:	7d7b      	ldrb	r3, [r7, #21]
 8015a00:	461a      	mov	r2, r3
 8015a02:	f107 0318 	add.w	r3, r7, #24
 8015a06:	4413      	add	r3, r2
 8015a08:	781a      	ldrb	r2, [r3, #0]
 8015a0a:	7d3b      	ldrb	r3, [r7, #20]
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	2301      	movs	r3, #1
 8015a10:	408b      	lsls	r3, r1
 8015a12:	b2db      	uxtb	r3, r3
 8015a14:	4013      	ands	r3, r2
 8015a16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8015a1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <rfalNfcaPollerSingleCollisionResolution+0x168>
 8015a22:	2301      	movs	r3, #1
 8015a24:	e000      	b.n	8015a28 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 8015a26:	2300      	movs	r3, #0
 8015a28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 8015a32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a36:	3b01      	subs	r3, #1
 8015a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 8015a3c:	e002      	b.n	8015a44 <rfalNfcaPollerSingleCollisionResolution+0x186>
            }
            else
            {
                doBacktrack = false;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 8015a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a46:	2b1d      	cmp	r3, #29
 8015a48:	d17e      	bne.n	8015b48 <rfalNfcaPollerSingleCollisionResolution+0x28a>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8015a4a:	7d7b      	ldrb	r3, [r7, #21]
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	7d3b      	ldrb	r3, [r7, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d001      	beq.n	8015a58 <rfalNfcaPollerSingleCollisionResolution+0x19a>
 8015a54:	2301      	movs	r3, #1
 8015a56:	e000      	b.n	8015a5a <rfalNfcaPollerSingleCollisionResolution+0x19c>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	4413      	add	r3, r2
 8015a5c:	2b07      	cmp	r3, #7
 8015a5e:	d901      	bls.n	8015a64 <rfalNfcaPollerSingleCollisionResolution+0x1a6>
                {
                    return ERR_PROTO;
 8015a60:	230b      	movs	r3, #11
 8015a62:	e0f6      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 8015a64:	7d7b      	ldrb	r3, [r7, #21]
 8015a66:	461a      	mov	r2, r3
 8015a68:	7d3b      	ldrb	r3, [r7, #20]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d001      	beq.n	8015a72 <rfalNfcaPollerSingleCollisionResolution+0x1b4>
 8015a6e:	2301      	movs	r3, #1
 8015a70:	e000      	b.n	8015a74 <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 8015a72:	2300      	movs	r3, #0
 8015a74:	4413      	add	r3, r2
 8015a76:	2b06      	cmp	r3, #6
 8015a78:	d91a      	bls.n	8015ab0 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
 8015a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d016      	beq.n	8015ab0 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 8015a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a86:	3b01      	subs	r3, #1
 8015a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 8015a8c:	2305      	movs	r3, #5
 8015a8e:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 8015a90:	2307      	movs	r3, #7
 8015a92:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 8015a94:	7d7b      	ldrb	r3, [r7, #21]
 8015a96:	461a      	mov	r2, r3
 8015a98:	f107 0318 	add.w	r3, r7, #24
 8015a9c:	4413      	add	r3, r2
 8015a9e:	781a      	ldrb	r2, [r3, #0]
 8015aa0:	7d3b      	ldrb	r3, [r7, #20]
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	408b      	lsls	r3, r1
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	4013      	ands	r3, r2
 8015aac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 8015ab0:	7bfb      	ldrb	r3, [r7, #15]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d10b      	bne.n	8015ace <rfalNfcaPollerSingleCollisionResolution+0x210>
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	f083 0301 	eor.w	r3, r3, #1
 8015abe:	b2db      	uxtb	r3, r3
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d004      	beq.n	8015ace <rfalNfcaPollerSingleCollisionResolution+0x210>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 8015aca:	2312      	movs	r3, #18
 8015acc:	e0c1      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }
                
                *collPending = true;
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8015ad4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d013      	beq.n	8015b04 <rfalNfcaPollerSingleCollisionResolution+0x246>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 8015adc:	7d7b      	ldrb	r3, [r7, #21]
 8015ade:	461a      	mov	r2, r3
 8015ae0:	f107 0318 	add.w	r3, r7, #24
 8015ae4:	4413      	add	r3, r2
 8015ae6:	7819      	ldrb	r1, [r3, #0]
 8015ae8:	7d3b      	ldrb	r3, [r7, #20]
 8015aea:	461a      	mov	r2, r3
 8015aec:	2301      	movs	r3, #1
 8015aee:	4093      	lsls	r3, r2
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	7d7b      	ldrb	r3, [r7, #21]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f107 0318 	add.w	r3, r7, #24
 8015afa:	4403      	add	r3, r0
 8015afc:	430a      	orrs	r2, r1
 8015afe:	b2d2      	uxtb	r2, r2
 8015b00:	701a      	strb	r2, [r3, #0]
 8015b02:	e014      	b.n	8015b2e <rfalNfcaPollerSingleCollisionResolution+0x270>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 8015b04:	7d7b      	ldrb	r3, [r7, #21]
 8015b06:	461a      	mov	r2, r3
 8015b08:	f107 0318 	add.w	r3, r7, #24
 8015b0c:	4413      	add	r3, r2
 8015b0e:	7819      	ldrb	r1, [r3, #0]
 8015b10:	7d3b      	ldrb	r3, [r7, #20]
 8015b12:	461a      	mov	r2, r3
 8015b14:	2301      	movs	r3, #1
 8015b16:	4093      	lsls	r3, r2
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	43db      	mvns	r3, r3
 8015b1c:	b2da      	uxtb	r2, r3
 8015b1e:	7d7b      	ldrb	r3, [r7, #21]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f107 0318 	add.w	r3, r7, #24
 8015b26:	4403      	add	r3, r0
 8015b28:	400a      	ands	r2, r1
 8015b2a:	b2d2      	uxtb	r2, r2
 8015b2c:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 8015b2e:	7d3b      	ldrb	r3, [r7, #20]
 8015b30:	3301      	adds	r3, #1
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8015b36:	7d3b      	ldrb	r3, [r7, #20]
 8015b38:	2b08      	cmp	r3, #8
 8015b3a:	d105      	bne.n	8015b48 <rfalNfcaPollerSingleCollisionResolution+0x28a>
                {
                    bitsTxRx = 0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 8015b40:	7d7b      	ldrb	r3, [r7, #21]
 8015b42:	3301      	adds	r3, #1
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 8015b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b4a:	2b1d      	cmp	r3, #29
 8015b4c:	f43f aef4 	beq.w	8015938 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 8015b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <rfalNfcaPollerSingleCollisionResolution+0x29c>
        {
            return ret;
 8015b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b58:	e07b      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 8015b5a:	7bfb      	ldrb	r3, [r7, #15]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d104      	bne.n	8015b6a <rfalNfcaPollerSingleCollisionResolution+0x2ac>
 8015b60:	8afb      	ldrh	r3, [r7, #22]
 8015b62:	2b05      	cmp	r3, #5
 8015b64:	d001      	beq.n	8015b6a <rfalNfcaPollerSingleCollisionResolution+0x2ac>
        {
            return ERR_PROTO;
 8015b66:	230b      	movs	r3, #11
 8015b68:	e073      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8015b6a:	7fbc      	ldrb	r4, [r7, #30]
 8015b6c:	f107 0318 	add.w	r3, r7, #24
 8015b70:	3302      	adds	r3, #2
 8015b72:	2104      	movs	r1, #4
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ff fe15 	bl	80157a4 <rfalNfcaCalculateBcc>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	429c      	cmp	r4, r3
 8015b7e:	d001      	beq.n	8015b84 <rfalNfcaPollerSingleCollisionResolution+0x2c6>
        {
            return ERR_PROTO;
 8015b80:	230b      	movs	r3, #11
 8015b82:	e066      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8015b84:	2370      	movs	r3, #112	; 0x70
 8015b86:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8015b88:	7bfb      	ldrb	r3, [r7, #15]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d101      	bne.n	8015b92 <rfalNfcaPollerSingleCollisionResolution+0x2d4>
 8015b8e:	2302      	movs	r3, #2
 8015b90:	e000      	b.n	8015b94 <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 8015b92:	2300      	movs	r3, #0
 8015b94:	77fb      	strb	r3, [r7, #31]
 8015b96:	f107 0018 	add.w	r0, r7, #24
 8015b9a:	f240 6354 	movw	r3, #1620	; 0x654
 8015b9e:	9302      	str	r3, [sp, #8]
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	9301      	str	r3, [sp, #4]
 8015ba4:	f107 0316 	add.w	r3, r7, #22
 8015ba8:	9300      	str	r3, [sp, #0]
 8015baa:	2301      	movs	r3, #1
 8015bac:	687a      	ldr	r2, [r7, #4]
 8015bae:	2107      	movs	r1, #7
 8015bb0:	f002 fd76 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015bb8:	7bfb      	ldrb	r3, [r7, #15]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d102      	bne.n	8015bc4 <rfalNfcaPollerSingleCollisionResolution+0x306>
 8015bbe:	2005      	movs	r0, #5
 8015bc0:	f7ee fdf4 	bl	80047ac <HAL_Delay>
 8015bc4:	7ffb      	ldrb	r3, [r7, #31]
 8015bc6:	1e5a      	subs	r2, r3, #1
 8015bc8:	77fa      	strb	r2, [r7, #31]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d002      	beq.n	8015bd4 <rfalNfcaPollerSingleCollisionResolution+0x316>
 8015bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bd0:	2b04      	cmp	r3, #4
 8015bd2:	d0e0      	beq.n	8015b96 <rfalNfcaPollerSingleCollisionResolution+0x2d8>
        
        if( ret != ERR_NONE )
 8015bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d001      	beq.n	8015bde <rfalNfcaPollerSingleCollisionResolution+0x320>
        {
            return ret;
 8015bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bdc:	e039      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 8015bde:	8afb      	ldrh	r3, [r7, #22]
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d001      	beq.n	8015be8 <rfalNfcaPollerSingleCollisionResolution+0x32a>
        {
            return ERR_PROTO;
 8015be4:	230b      	movs	r3, #11
 8015be6:	e034      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8015be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d11b      	bne.n	8015c26 <rfalNfcaPollerSingleCollisionResolution+0x368>
 8015bee:	7ebb      	ldrb	r3, [r7, #26]
 8015bf0:	2b88      	cmp	r3, #136	; 0x88
 8015bf2:	d118      	bne.n	8015c26 <rfalNfcaPollerSingleCollisionResolution+0x368>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8015bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	1898      	adds	r0, r3, r2
 8015bfe:	f107 0318 	add.w	r3, r7, #24
 8015c02:	3302      	adds	r3, #2
 8015c04:	3301      	adds	r3, #1
 8015c06:	2203      	movs	r2, #3
 8015c08:	4619      	mov	r1, r3
 8015c0a:	f005 fc53 	bl	801b4b4 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8015c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	3303      	adds	r3, #3
 8015c14:	b2da      	uxtb	r2, r3
 8015c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c18:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8015c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c1e:	3301      	adds	r3, #1
 8015c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c24:	e00f      	b.n	8015c46 <rfalNfcaPollerSingleCollisionResolution+0x388>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8015c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	4413      	add	r3, r2
 8015c30:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8015c34:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8015c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c38:	781b      	ldrb	r3, [r3, #0]
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	b2da      	uxtb	r2, r3
 8015c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c40:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8015c42:	2300      	movs	r3, #0
 8015c44:	e005      	b.n	8015c52 <rfalNfcaPollerSingleCollisionResolution+0x394>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8015c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c4a:	2b02      	cmp	r3, #2
 8015c4c:	f67f ae62 	bls.w	8015914 <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 8015c50:	230c      	movs	r3, #12
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	372c      	adds	r7, #44	; 0x2c
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd90      	pop	{r4, r7, pc}

08015c5a <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 8015c5a:	b5b0      	push	{r4, r5, r7, lr}
 8015c5c:	b08a      	sub	sp, #40	; 0x28
 8015c5e:	af02      	add	r7, sp, #8
 8015c60:	60ba      	str	r2, [r7, #8]
 8015c62:	607b      	str	r3, [r7, #4]
 8015c64:	4603      	mov	r3, r0
 8015c66:	73fb      	strb	r3, [r7, #15]
 8015c68:	460b      	mov	r3, r1
 8015c6a:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <rfalNfcaPollerFullCollisionResolution+0x1e>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d101      	bne.n	8015c7c <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8015c78:	2307      	movs	r3, #7
 8015c7a:	e105      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }
    
    *devCnt = 0;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 8015c82:	2300      	movs	r3, #0
 8015c84:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8015c86:	7bfb      	ldrb	r3, [r7, #15]
 8015c88:	2b02      	cmp	r3, #2
 8015c8a:	d028      	beq.n	8015cde <rfalNfcaPollerFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	1c59      	adds	r1, r3, #1
 8015c90:	f107 0316 	add.w	r3, r7, #22
 8015c94:	f240 6254 	movw	r2, #1620	; 0x654
 8015c98:	9200      	str	r2, [sp, #0]
 8015c9a:	2210      	movs	r2, #16
 8015c9c:	2052      	movs	r0, #82	; 0x52
 8015c9e:	f003 fca3 	bl	80195e8 <rfalISO14443ATransceiveShortFrame>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8015ca6:	8bfb      	ldrh	r3, [r7, #30]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d010      	beq.n	8015cce <rfalNfcaPollerFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
 8015cae:	2b01      	cmp	r3, #1
 8015cb0:	d00b      	beq.n	8015cca <rfalNfcaPollerFullCollisionResolution+0x70>
 8015cb2:	8bfb      	ldrh	r3, [r7, #30]
 8015cb4:	2b1d      	cmp	r3, #29
 8015cb6:	d00a      	beq.n	8015cce <rfalNfcaPollerFullCollisionResolution+0x74>
 8015cb8:	8bfb      	ldrh	r3, [r7, #30]
 8015cba:	2b15      	cmp	r3, #21
 8015cbc:	d007      	beq.n	8015cce <rfalNfcaPollerFullCollisionResolution+0x74>
 8015cbe:	8bfb      	ldrh	r3, [r7, #30]
 8015cc0:	2b09      	cmp	r3, #9
 8015cc2:	d004      	beq.n	8015cce <rfalNfcaPollerFullCollisionResolution+0x74>
 8015cc4:	8bfb      	ldrh	r3, [r7, #30]
 8015cc6:	2b1b      	cmp	r3, #27
 8015cc8:	d001      	beq.n	8015cce <rfalNfcaPollerFullCollisionResolution+0x74>
            {
                return ret;
 8015cca:	8bfb      	ldrh	r3, [r7, #30]
 8015ccc:	e0dc      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 8015cce:	8bfb      	ldrh	r3, [r7, #30]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d104      	bne.n	8015cde <rfalNfcaPollerFullCollisionResolution+0x84>
 8015cd4:	8afb      	ldrh	r3, [r7, #22]
 8015cd6:	2b10      	cmp	r3, #16
 8015cd8:	d001      	beq.n	8015cde <rfalNfcaPollerFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 8015cda:	230b      	movs	r3, #11
 8015cdc:	e0d4      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	789b      	ldrb	r3, [r3, #2]
 8015ce2:	f003 030f 	and.w	r3, r3, #15
 8015ce6:	2b0c      	cmp	r3, #12
 8015ce8:	d12a      	bne.n	8015d40 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015cea:	7bbb      	ldrb	r3, [r7, #14]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d027      	beq.n	8015d40 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015cf0:	8bfb      	ldrh	r3, [r7, #30]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d124      	bne.n	8015d40 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015cf6:	7bfb      	ldrb	r3, [r7, #15]
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d021      	beq.n	8015d40 <rfalNfcaPollerFullCollisionResolution+0xe6>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 8015cfc:	f004 ffba 	bl	801ac74 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	330f      	adds	r3, #15
 8015d04:	4618      	mov	r0, r3
 8015d06:	f004 ffd7 	bl	801acb8 <rfalT1TPollerRid>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	83fb      	strh	r3, [r7, #30]
 8015d0e:	8bfb      	ldrh	r3, [r7, #30]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d001      	beq.n	8015d18 <rfalNfcaPollerFullCollisionResolution+0xbe>
 8015d14:	8bfb      	ldrh	r3, [r7, #30]
 8015d16:	e0b7      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	2200      	movs	r2, #0
 8015d22:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	2201      	movs	r2, #1
 8015d28:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2204      	movs	r2, #4
 8015d2e:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	3305      	adds	r3, #5
 8015d34:	68ba      	ldr	r2, [r7, #8]
 8015d36:	3211      	adds	r2, #17
 8015d38:	6812      	ldr	r2, [r2, #0]
 8015d3a:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e0a3      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 8015d40:	68ba      	ldr	r2, [r7, #8]
 8015d42:	f107 0318 	add.w	r3, r7, #24
 8015d46:	3201      	adds	r2, #1
 8015d48:	8812      	ldrh	r2, [r2, #0]
 8015d4a:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 8015d4c:	7bbb      	ldrb	r3, [r7, #14]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d008      	beq.n	8015d64 <rfalNfcaPollerFullCollisionResolution+0x10a>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 8015d52:	7bbb      	ldrb	r3, [r7, #14]
 8015d54:	2216      	movs	r2, #22
 8015d56:	fb02 f303 	mul.w	r3, r2, r3
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	68b8      	ldr	r0, [r7, #8]
 8015d60:	f005 fbd0 	bl	801b504 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	3301      	adds	r3, #1
 8015d68:	f107 0218 	add.w	r2, r7, #24
 8015d6c:	8812      	ldrh	r2, [r2, #0]
 8015d6e:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	461a      	mov	r2, r3
 8015d76:	2316      	movs	r3, #22
 8015d78:	fb02 f303 	mul.w	r3, r2, r3
 8015d7c:	68ba      	ldr	r2, [r7, #8]
 8015d7e:	4413      	add	r3, r2
 8015d80:	1cdc      	adds	r4, r3, #3
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	781b      	ldrb	r3, [r3, #0]
 8015d86:	461a      	mov	r2, r3
 8015d88:	2316      	movs	r3, #22
 8015d8a:	fb02 f303 	mul.w	r3, r2, r3
 8015d8e:	68ba      	ldr	r2, [r7, #8]
 8015d90:	4413      	add	r3, r2
 8015d92:	1d5d      	adds	r5, r3, #5
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	461a      	mov	r2, r3
 8015d9a:	2316      	movs	r3, #22
 8015d9c:	fb02 f303 	mul.w	r3, r2, r3
 8015da0:	68ba      	ldr	r2, [r7, #8]
 8015da2:	4413      	add	r3, r2
 8015da4:	3304      	adds	r3, #4
 8015da6:	f107 011c 	add.w	r1, r7, #28
 8015daa:	7bb8      	ldrb	r0, [r7, #14]
 8015dac:	9300      	str	r3, [sp, #0]
 8015dae:	462b      	mov	r3, r5
 8015db0:	4622      	mov	r2, r4
 8015db2:	f7ff fd84 	bl	80158be <rfalNfcaPollerSingleCollisionResolution>
 8015db6:	4603      	mov	r3, r0
 8015db8:	83fb      	strh	r3, [r7, #30]
 8015dba:	8bfb      	ldrh	r3, [r7, #30]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <rfalNfcaPollerFullCollisionResolution+0x16a>
 8015dc0:	8bfb      	ldrh	r3, [r7, #30]
 8015dc2:	e061      	b.n	8015e88 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	461a      	mov	r2, r3
 8015dca:	2316      	movs	r3, #22
 8015dcc:	fb02 f303 	mul.w	r3, r2, r3
 8015dd0:	68ba      	ldr	r2, [r7, #8]
 8015dd2:	4413      	add	r3, r2
 8015dd4:	78db      	ldrb	r3, [r3, #3]
 8015dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015dda:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	461a      	mov	r2, r3
 8015de2:	2316      	movs	r3, #22
 8015de4:	fb02 f303 	mul.w	r3, r2, r3
 8015de8:	68ba      	ldr	r2, [r7, #8]
 8015dea:	4413      	add	r3, r2
 8015dec:	7f7a      	ldrb	r2, [r7, #29]
 8015dee:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	461a      	mov	r2, r3
 8015df6:	2316      	movs	r3, #22
 8015df8:	fb02 f303 	mul.w	r3, r2, r3
 8015dfc:	68ba      	ldr	r2, [r7, #8]
 8015dfe:	4413      	add	r3, r2
 8015e00:	2200      	movs	r2, #0
 8015e02:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	b2da      	uxtb	r2, r3
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	7bba      	ldrb	r2, [r7, #14]
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d92a      	bls.n	8015e70 <rfalNfcaPollerFullCollisionResolution+0x216>
 8015e1a:	7f3b      	ldrb	r3, [r7, #28]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d102      	bne.n	8015e26 <rfalNfcaPollerFullCollisionResolution+0x1cc>
 8015e20:	7bfb      	ldrb	r3, [r7, #15]
 8015e22:	2b02      	cmp	r3, #2
 8015e24:	d024      	beq.n	8015e70 <rfalNfcaPollerFullCollisionResolution+0x216>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8015e26:	f000 f8a5 	bl	8015f74 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	461a      	mov	r2, r3
 8015e30:	2316      	movs	r3, #22
 8015e32:	fb02 f303 	mul.w	r3, r2, r3
 8015e36:	3b16      	subs	r3, #22
 8015e38:	68ba      	ldr	r2, [r7, #8]
 8015e3a:	4413      	add	r3, r2
 8015e3c:	2201      	movs	r2, #1
 8015e3e:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	461a      	mov	r2, r3
 8015e46:	2316      	movs	r3, #22
 8015e48:	fb02 f303 	mul.w	r3, r2, r3
 8015e4c:	68ba      	ldr	r2, [r7, #8]
 8015e4e:	4413      	add	r3, r2
 8015e50:	3301      	adds	r3, #1
 8015e52:	4619      	mov	r1, r3
 8015e54:	2026      	movs	r0, #38	; 0x26
 8015e56:	f7ff fce9 	bl	801582c <rfalNfcaPollerCheckPresence>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8015e5e:	8bfb      	ldrh	r3, [r7, #30]
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	d102      	bne.n	8015e6a <rfalNfcaPollerFullCollisionResolution+0x210>
            {
                /* No more devices found, exit */
                collPending = false;
 8015e64:	2300      	movs	r3, #0
 8015e66:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8015e68:	e004      	b.n	8015e74 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8015e6e:	e001      	b.n	8015e74 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 8015e70:	2300      	movs	r3, #0
 8015e72:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	7bba      	ldrb	r2, [r7, #14]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d903      	bls.n	8015e86 <rfalNfcaPollerFullCollisionResolution+0x22c>
 8015e7e:	7f3b      	ldrb	r3, [r7, #28]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	f47f af75 	bne.w	8015d70 <rfalNfcaPollerFullCollisionResolution+0x116>
    
    return ERR_NONE;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3720      	adds	r7, #32
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bdb0      	pop	{r4, r5, r7, pc}

08015e90 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b08c      	sub	sp, #48	; 0x30
 8015e94:	af04      	add	r7, sp, #16
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	460b      	mov	r3, r1
 8015e9a:	607a      	str	r2, [r7, #4]
 8015e9c:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d005      	beq.n	8015eb0 <rfalNfcaPollerSelect+0x20>
 8015ea4:	7afb      	ldrb	r3, [r7, #11]
 8015ea6:	2b0a      	cmp	r3, #10
 8015ea8:	d802      	bhi.n	8015eb0 <rfalNfcaPollerSelect+0x20>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d101      	bne.n	8015eb4 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 8015eb0:	2307      	movs	r3, #7
 8015eb2:	e058      	b.n	8015f66 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 8015eb4:	7afb      	ldrb	r3, [r7, #11]
 8015eb6:	4a2e      	ldr	r2, [pc, #184]	; (8015f70 <rfalNfcaPollerSelect+0xe0>)
 8015eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8015ebc:	089b      	lsrs	r3, r3, #2
 8015ebe:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	77fb      	strb	r3, [r7, #31]
 8015ec8:	e048      	b.n	8015f5c <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8015eca:	7ffb      	ldrb	r3, [r7, #31]
 8015ecc:	005b      	lsls	r3, r3, #1
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	3b6d      	subs	r3, #109	; 0x6d
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8015ed6:	2370      	movs	r3, #112	; 0x70
 8015ed8:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8015eda:	7f7a      	ldrb	r2, [r7, #29]
 8015edc:	7ffb      	ldrb	r3, [r7, #31]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d00f      	beq.n	8015f02 <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 8015ee2:	2388      	movs	r3, #136	; 0x88
 8015ee4:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8015ee6:	7fbb      	ldrb	r3, [r7, #30]
 8015ee8:	68fa      	ldr	r2, [r7, #12]
 8015eea:	18d1      	adds	r1, r2, r3
 8015eec:	f107 0310 	add.w	r3, r7, #16
 8015ef0:	3303      	adds	r3, #3
 8015ef2:	2203      	movs	r2, #3
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f005 fadd 	bl	801b4b4 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8015efa:	7fbb      	ldrb	r3, [r7, #30]
 8015efc:	3303      	adds	r3, #3
 8015efe:	77bb      	strb	r3, [r7, #30]
 8015f00:	e005      	b.n	8015f0e <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 8015f02:	7fbb      	ldrb	r3, [r7, #30]
 8015f04:	68fa      	ldr	r2, [r7, #12]
 8015f06:	4413      	add	r3, r2
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 8015f0e:	f107 0310 	add.w	r3, r7, #16
 8015f12:	3302      	adds	r3, #2
 8015f14:	2104      	movs	r1, #4
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7ff fc44 	bl	80157a4 <rfalNfcaCalculateBcc>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8015f20:	f107 0010 	add.w	r0, r7, #16
 8015f24:	f240 6354 	movw	r3, #1620	; 0x654
 8015f28:	9302      	str	r3, [sp, #8]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	9301      	str	r3, [sp, #4]
 8015f2e:	f107 0318 	add.w	r3, r7, #24
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	2301      	movs	r3, #1
 8015f36:	687a      	ldr	r2, [r7, #4]
 8015f38:	2107      	movs	r1, #7
 8015f3a:	f002 fbb1 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	837b      	strh	r3, [r7, #26]
 8015f42:	8b7b      	ldrh	r3, [r7, #26]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d001      	beq.n	8015f4c <rfalNfcaPollerSelect+0xbc>
 8015f48:	8b7b      	ldrh	r3, [r7, #26]
 8015f4a:	e00c      	b.n	8015f66 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 8015f4c:	8b3b      	ldrh	r3, [r7, #24]
 8015f4e:	2b01      	cmp	r3, #1
 8015f50:	d001      	beq.n	8015f56 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 8015f52:	230b      	movs	r3, #11
 8015f54:	e007      	b.n	8015f66 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8015f56:	7ffb      	ldrb	r3, [r7, #31]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	77fb      	strb	r3, [r7, #31]
 8015f5c:	7ffa      	ldrb	r2, [r7, #31]
 8015f5e:	7f7b      	ldrb	r3, [r7, #29]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d9b2      	bls.n	8015eca <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8015f64:	2300      	movs	r3, #0
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3720      	adds	r7, #32
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	cccccccd 	.word	0xcccccccd

08015f74 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8015f7a:	2350      	movs	r3, #80	; 0x50
 8015f7c:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8015f82:	1cfa      	adds	r2, r7, #3
 8015f84:	1d38      	adds	r0, r7, #4
 8015f86:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8015f8a:	9302      	str	r3, [sp, #8]
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	9301      	str	r3, [sp, #4]
 8015f90:	2300      	movs	r3, #0
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	2301      	movs	r3, #1
 8015f96:	2102      	movs	r1, #2
 8015f98:	f002 fb82 	bl	80186a0 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3708      	adds	r7, #8
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 8015fa6:	b480      	push	{r7}
 8015fa8:	b083      	sub	sp, #12
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
 8015fae:	460b      	mov	r3, r1
 8015fb0:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 8015fb2:	887b      	ldrh	r3, [r7, #2]
 8015fb4:	2b02      	cmp	r3, #2
 8015fb6:	d108      	bne.n	8015fca <rfalNfcaListenerIsSleepReq+0x24>
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	2b50      	cmp	r3, #80	; 0x50
 8015fbe:	d104      	bne.n	8015fca <rfalNfcaListenerIsSleepReq+0x24>
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d001      	beq.n	8015fce <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	e000      	b.n	8015fd0 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 8015fce:	2301      	movs	r3, #1
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	370c      	adds	r7, #12
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bc80      	pop	{r7}
 8015fd8:	4770      	bx	lr

08015fda <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 8015fda:	b480      	push	{r7}
 8015fdc:	b083      	sub	sp, #12
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8015fe6:	78fb      	ldrb	r3, [r7, #3]
 8015fe8:	2b0c      	cmp	r3, #12
 8015fea:	d004      	beq.n	8015ff6 <rfalNfcbCheckSensbRes+0x1c>
 8015fec:	78fb      	ldrb	r3, [r7, #3]
 8015fee:	2b0d      	cmp	r3, #13
 8015ff0:	d001      	beq.n	8015ff6 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 8015ff2:	230b      	movs	r3, #11
 8015ff4:	e00c      	b.n	8016010 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	7a9b      	ldrb	r3, [r3, #10]
 8015ffa:	f003 0308 	and.w	r3, r3, #8
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d103      	bne.n	801600a <rfalNfcbCheckSensbRes+0x30>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b50      	cmp	r3, #80	; 0x50
 8016008:	d001      	beq.n	801600e <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 801600a:	230b      	movs	r3, #11
 801600c:	e000      	b.n	8016010 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 801600e:	2300      	movs	r3, #0
}
 8016010:	4618      	mov	r0, r3
 8016012:	370c      	adds	r7, #12
 8016014:	46bd      	mov	sp, r7
 8016016:	bc80      	pop	{r7}
 8016018:	4770      	bx	lr
	...

0801601c <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 8016022:	2200      	movs	r2, #0
 8016024:	2100      	movs	r1, #0
 8016026:	2003      	movs	r0, #3
 8016028:	f001 fd0a 	bl	8017a40 <rfalSetMode>
 801602c:	4603      	mov	r3, r0
 801602e:	80fb      	strh	r3, [r7, #6]
 8016030:	88fb      	ldrh	r3, [r7, #6]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d001      	beq.n	801603a <rfalNfcbPollerInitialize+0x1e>
 8016036:	88fb      	ldrh	r3, [r7, #6]
 8016038:	e014      	b.n	8016064 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801603a:	2001      	movs	r0, #1
 801603c:	f002 f89c 	bl	8018178 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 8016040:	480a      	ldr	r0, [pc, #40]	; (801606c <rfalNfcbPollerInitialize+0x50>)
 8016042:	f002 f8d1 	bl	80181e8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 8016046:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 801604a:	f002 f8b9 	bl	80181c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 801604e:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8016052:	f002 f8a1 	bl	8018198 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 8016056:	4b06      	ldr	r3, [pc, #24]	; (8016070 <rfalNfcbPollerInitialize+0x54>)
 8016058:	2200      	movs	r2, #0
 801605a:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 801605c:	4b04      	ldr	r3, [pc, #16]	; (8016070 <rfalNfcbPollerInitialize+0x54>)
 801605e:	2200      	movs	r2, #0
 8016060:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 8016062:	2300      	movs	r3, #0
}
 8016064:	4618      	mov	r0, r3
 8016066:	3708      	adds	r7, #8
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	000108d8 	.word	0x000108d8
 8016070:	200038b0 	.word	0x200038b0

08016074 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b08a      	sub	sp, #40	; 0x28
 8016078:	af04      	add	r7, sp, #16
 801607a:	60ba      	str	r2, [r7, #8]
 801607c:	607b      	str	r3, [r7, #4]
 801607e:	4603      	mov	r3, r0
 8016080:	73fb      	strb	r3, [r7, #15]
 8016082:	460b      	mov	r3, r1
 8016084:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8016086:	7bfb      	ldrb	r3, [r7, #15]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d002      	beq.n	8016092 <rfalNfcbPollerCheckPresence+0x1e>
 801608c:	7bfb      	ldrb	r3, [r7, #15]
 801608e:	2b08      	cmp	r3, #8
 8016090:	d108      	bne.n	80160a4 <rfalNfcbPollerCheckPresence+0x30>
 8016092:	7bbb      	ldrb	r3, [r7, #14]
 8016094:	2b04      	cmp	r3, #4
 8016096:	d805      	bhi.n	80160a4 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d002      	beq.n	80160a4 <rfalNfcbPollerCheckPresence+0x30>
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d101      	bne.n	80160a8 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 80160a4:	2307      	movs	r3, #7
 80160a6:	e044      	b.n	8016132 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2200      	movs	r2, #0
 80160ac:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 80160ae:	220d      	movs	r2, #13
 80160b0:	2100      	movs	r1, #0
 80160b2:	68b8      	ldr	r0, [r7, #8]
 80160b4:	f005 fa26 	bl	801b504 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 80160b8:	2305      	movs	r3, #5
 80160ba:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80160bc:	4b1f      	ldr	r3, [pc, #124]	; (801613c <rfalNfcbPollerCheckPresence+0xc8>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80160c2:	4b1e      	ldr	r3, [pc, #120]	; (801613c <rfalNfcbPollerCheckPresence+0xc8>)
 80160c4:	785b      	ldrb	r3, [r3, #1]
 80160c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80160ca:	b2da      	uxtb	r2, r3
 80160cc:	7bfb      	ldrb	r3, [r7, #15]
 80160ce:	4313      	orrs	r3, r2
 80160d0:	b2da      	uxtb	r2, r3
 80160d2:	7bbb      	ldrb	r3, [r7, #14]
 80160d4:	4313      	orrs	r3, r2
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 80160da:	f107 0010 	add.w	r0, r7, #16
 80160de:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80160e2:	9302      	str	r3, [sp, #8]
 80160e4:	2300      	movs	r3, #0
 80160e6:	9301      	str	r3, [sp, #4]
 80160e8:	f107 0314 	add.w	r3, r7, #20
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	230d      	movs	r3, #13
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	2103      	movs	r1, #3
 80160f4:	f002 fad4 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 80160f8:	4603      	mov	r3, r0
 80160fa:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 80160fc:	8abb      	ldrh	r3, [r7, #20]
 80160fe:	b2da      	uxtb	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8016104:	8afb      	ldrh	r3, [r7, #22]
 8016106:	2b15      	cmp	r3, #21
 8016108:	d002      	beq.n	8016110 <rfalNfcbPollerCheckPresence+0x9c>
 801610a:	8afb      	ldrh	r3, [r7, #22]
 801610c:	2b09      	cmp	r3, #9
 801610e:	d104      	bne.n	801611a <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8016116:	2300      	movs	r3, #0
 8016118:	e00b      	b.n	8016132 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 801611a:	8afb      	ldrh	r3, [r7, #22]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d107      	bne.n	8016130 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	4619      	mov	r1, r3
 8016126:	68b8      	ldr	r0, [r7, #8]
 8016128:	f7ff ff57 	bl	8015fda <rfalNfcbCheckSensbRes>
 801612c:	4603      	mov	r3, r0
 801612e:	e000      	b.n	8016132 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 8016130:	8afb      	ldrh	r3, [r7, #22]
}
 8016132:	4618      	mov	r0, r3
 8016134:	3718      	adds	r7, #24
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}
 801613a:	bf00      	nop
 801613c:	200038b0 	.word	0x200038b0

08016140 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b08a      	sub	sp, #40	; 0x28
 8016144:	af04      	add	r7, sp, #16
 8016146:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d101      	bne.n	8016152 <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 801614e:	2307      	movs	r3, #7
 8016150:	e024      	b.n	801619c <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 8016152:	2350      	movs	r3, #80	; 0x50
 8016154:	733b      	strb	r3, [r7, #12]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 801615a:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 801615e:	f107 0208 	add.w	r2, r7, #8
 8016162:	f107 000c 	add.w	r0, r7, #12
 8016166:	4b0f      	ldr	r3, [pc, #60]	; (80161a4 <rfalNfcbPollerSleep+0x64>)
 8016168:	9302      	str	r3, [sp, #8]
 801616a:	2300      	movs	r3, #0
 801616c:	9301      	str	r3, [sp, #4]
 801616e:	f107 0314 	add.w	r3, r7, #20
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	2301      	movs	r3, #1
 8016176:	2105      	movs	r1, #5
 8016178:	f002 fa92 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801617c:	4603      	mov	r3, r0
 801617e:	82fb      	strh	r3, [r7, #22]
 8016180:	8afb      	ldrh	r3, [r7, #22]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d001      	beq.n	801618a <rfalNfcbPollerSleep+0x4a>
 8016186:	8afb      	ldrh	r3, [r7, #22]
 8016188:	e008      	b.n	801619c <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 801618a:	8abb      	ldrh	r3, [r7, #20]
 801618c:	2b01      	cmp	r3, #1
 801618e:	d102      	bne.n	8016196 <rfalNfcbPollerSleep+0x56>
 8016190:	7a3b      	ldrb	r3, [r7, #8]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d001      	beq.n	801619a <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 8016196:	230b      	movs	r3, #11
 8016198:	e000      	b.n	801619c <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 801619a:	2300      	movs	r3, #0
}
 801619c:	4618      	mov	r0, r3
 801619e:	3718      	adds	r7, #24
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	0003a278 	.word	0x0003a278

080161a8 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b08a      	sub	sp, #40	; 0x28
 80161ac:	af04      	add	r7, sp, #16
 80161ae:	4603      	mov	r3, r0
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
 80161b4:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d008      	beq.n	80161ce <rfalNfcbPollerSlotMarker+0x26>
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d005      	beq.n	80161ce <rfalNfcbPollerSlotMarker+0x26>
 80161c2:	7bfb      	ldrb	r3, [r7, #15]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d002      	beq.n	80161ce <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 80161c8:	7bfb      	ldrb	r3, [r7, #15]
 80161ca:	2b10      	cmp	r3, #16
 80161cc:	d901      	bls.n	80161d2 <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 80161ce:	2307      	movs	r3, #7
 80161d0:	e02f      	b.n	8016232 <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 80161d2:	7bfb      	ldrb	r3, [r7, #15]
 80161d4:	011b      	lsls	r3, r3, #4
 80161d6:	b25b      	sxtb	r3, r3
 80161d8:	f043 0305 	orr.w	r3, r3, #5
 80161dc:	b25b      	sxtb	r3, r3
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 80161e2:	f107 0014 	add.w	r0, r7, #20
 80161e6:	4b15      	ldr	r3, [pc, #84]	; (801623c <rfalNfcbPollerSlotMarker+0x94>)
 80161e8:	9302      	str	r3, [sp, #8]
 80161ea:	2300      	movs	r3, #0
 80161ec:	9301      	str	r3, [sp, #4]
 80161ee:	f107 0312 	add.w	r3, r7, #18
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	230d      	movs	r3, #13
 80161f6:	68ba      	ldr	r2, [r7, #8]
 80161f8:	2101      	movs	r1, #1
 80161fa:	f002 fa51 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 80161fe:	4603      	mov	r3, r0
 8016200:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8016202:	8a7b      	ldrh	r3, [r7, #18]
 8016204:	b2da      	uxtb	r2, r3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801620a:	8afb      	ldrh	r3, [r7, #22]
 801620c:	2b15      	cmp	r3, #21
 801620e:	d002      	beq.n	8016216 <rfalNfcbPollerSlotMarker+0x6e>
 8016210:	8afb      	ldrh	r3, [r7, #22]
 8016212:	2b09      	cmp	r3, #9
 8016214:	d101      	bne.n	801621a <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 8016216:	231d      	movs	r3, #29
 8016218:	e00b      	b.n	8016232 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 801621a:	8afb      	ldrh	r3, [r7, #22]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d107      	bne.n	8016230 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	4619      	mov	r1, r3
 8016226:	68b8      	ldr	r0, [r7, #8]
 8016228:	f7ff fed7 	bl	8015fda <rfalNfcbCheckSensbRes>
 801622c:	4603      	mov	r3, r0
 801622e:	e000      	b.n	8016232 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 8016230:	8afb      	ldrh	r3, [r7, #22]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3718      	adds	r7, #24
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	0003a278 	.word	0x0003a278

08016240 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b084      	sub	sp, #16
 8016244:	af00      	add	r7, sp, #0
 8016246:	4603      	mov	r3, r0
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	68ba      	ldr	r2, [r7, #8]
 8016252:	2100      	movs	r1, #0
 8016254:	2000      	movs	r0, #0
 8016256:	f7ff ff0d 	bl	8016074 <rfalNfcbPollerCheckPresence>
 801625a:	4603      	mov	r3, r0
}
 801625c:	4618      	mov	r0, r3
 801625e:	3710      	adds	r7, #16
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b08a      	sub	sp, #40	; 0x28
 8016268:	af04      	add	r7, sp, #16
 801626a:	60ba      	str	r2, [r7, #8]
 801626c:	607b      	str	r3, [r7, #4]
 801626e:	4603      	mov	r3, r0
 8016270:	73fb      	strb	r3, [r7, #15]
 8016272:	460b      	mov	r3, r1
 8016274:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 8016276:	7bb9      	ldrb	r1, [r7, #14]
 8016278:	7bf8      	ldrb	r0, [r7, #15]
 801627a:	f107 0317 	add.w	r3, r7, #23
 801627e:	9302      	str	r3, [sp, #8]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	9301      	str	r3, [sp, #4]
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	2304      	movs	r3, #4
 801628a:	2200      	movs	r2, #0
 801628c:	f000 f805 	bl	801629a <rfalNfcbPollerSlottedCollisionResolution>
 8016290:	4603      	mov	r3, r0
}
 8016292:	4618      	mov	r0, r3
 8016294:	3718      	adds	r7, #24
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 801629a:	b590      	push	{r4, r7, lr}
 801629c:	b085      	sub	sp, #20
 801629e:	af00      	add	r7, sp, #0
 80162a0:	4604      	mov	r4, r0
 80162a2:	4608      	mov	r0, r1
 80162a4:	4611      	mov	r1, r2
 80162a6:	461a      	mov	r2, r3
 80162a8:	4623      	mov	r3, r4
 80162aa:	71fb      	strb	r3, [r7, #7]
 80162ac:	4603      	mov	r3, r0
 80162ae:	71bb      	strb	r3, [r7, #6]
 80162b0:	460b      	mov	r3, r1
 80162b2:	717b      	strb	r3, [r7, #5]
 80162b4:	4613      	mov	r3, r2
 80162b6:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 80162b8:	6a3b      	ldr	r3, [r7, #32]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d011      	beq.n	80162e2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80162be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00e      	beq.n	80162e2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80162c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d00b      	beq.n	80162e2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80162ca:	797b      	ldrb	r3, [r7, #5]
 80162cc:	2b04      	cmp	r3, #4
 80162ce:	d808      	bhi.n	80162e2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80162d0:	793b      	ldrb	r3, [r7, #4]
 80162d2:	2b04      	cmp	r3, #4
 80162d4:	d805      	bhi.n	80162e2 <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 80162d6:	79fb      	ldrb	r3, [r7, #7]
 80162d8:	2b02      	cmp	r3, #2
 80162da:	d104      	bne.n	80162e6 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 80162dc:	797b      	ldrb	r3, [r7, #5]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d001      	beq.n	80162e6 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 80162e2:	2307      	movs	r3, #7
 80162e4:	e14c      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 80162e6:	2300      	movs	r3, #0
 80162e8:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 80162ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ec:	2200      	movs	r2, #0
 80162ee:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 80162f0:	2300      	movs	r3, #0
 80162f2:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 80162f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f6:	2200      	movs	r2, #0
 80162f8:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80162fa:	79fb      	ldrb	r3, [r7, #7]
 80162fc:	2b02      	cmp	r3, #2
 80162fe:	d010      	beq.n	8016322 <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 8016300:	6a3b      	ldr	r3, [r7, #32]
 8016302:	1c5a      	adds	r2, r3, #1
 8016304:	6a3b      	ldr	r3, [r7, #32]
 8016306:	7979      	ldrb	r1, [r7, #5]
 8016308:	2008      	movs	r0, #8
 801630a:	f7ff feb3 	bl	8016074 <rfalNfcbPollerCheckPresence>
 801630e:	4603      	mov	r3, r0
 8016310:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 8016312:	89fb      	ldrh	r3, [r7, #14]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d004      	beq.n	8016322 <rfalNfcbPollerSlottedCollisionResolution+0x88>
 8016318:	797b      	ldrb	r3, [r7, #5]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d101      	bne.n	8016322 <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 801631e:	89fb      	ldrh	r3, [r7, #14]
 8016320:	e12e      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 8016322:	79fb      	ldrb	r3, [r7, #7]
 8016324:	2b01      	cmp	r3, #1
 8016326:	d105      	bne.n	8016334 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 8016328:	6a3b      	ldr	r3, [r7, #32]
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d101      	bne.n	8016334 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 8016330:	2309      	movs	r3, #9
 8016332:	e125      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8016334:	797b      	ldrb	r3, [r7, #5]
 8016336:	737b      	strb	r3, [r7, #13]
 8016338:	e11c      	b.n	8016574 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 801633a:	79fb      	ldrb	r3, [r7, #7]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d11a      	bne.n	8016376 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 8016340:	7afb      	ldrb	r3, [r7, #11]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d017      	beq.n	8016376 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	4613      	mov	r3, r2
 801634e:	011b      	lsls	r3, r3, #4
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	3b0f      	subs	r3, #15
 8016354:	6a3a      	ldr	r2, [r7, #32]
 8016356:	4413      	add	r3, r2
 8016358:	3302      	adds	r3, #2
 801635a:	4618      	mov	r0, r3
 801635c:	f7ff fef0 	bl	8016140 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 8016360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	461a      	mov	r2, r3
 8016366:	4613      	mov	r3, r2
 8016368:	011b      	lsls	r3, r3, #4
 801636a:	1a9b      	subs	r3, r3, r2
 801636c:	3b0f      	subs	r3, #15
 801636e:	6a3a      	ldr	r2, [r7, #32]
 8016370:	4413      	add	r3, r2
 8016372:	2201      	movs	r2, #1
 8016374:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 8016376:	7b7a      	ldrb	r2, [r7, #13]
 8016378:	797b      	ldrb	r3, [r7, #5]
 801637a:	429a      	cmp	r2, r3
 801637c:	d103      	bne.n	8016386 <rfalNfcbPollerSlottedCollisionResolution+0xec>
 801637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016380:	781b      	ldrb	r3, [r3, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d017      	beq.n	80163b6 <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	461a      	mov	r2, r3
 801638c:	4613      	mov	r3, r2
 801638e:	011b      	lsls	r3, r3, #4
 8016390:	1a9b      	subs	r3, r3, r2
 8016392:	6a3a      	ldr	r2, [r7, #32]
 8016394:	4413      	add	r3, r2
 8016396:	1c58      	adds	r0, r3, #1
 8016398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639a:	781b      	ldrb	r3, [r3, #0]
 801639c:	461a      	mov	r2, r3
 801639e:	4613      	mov	r3, r2
 80163a0:	011b      	lsls	r3, r3, #4
 80163a2:	1a9b      	subs	r3, r3, r2
 80163a4:	6a3a      	ldr	r2, [r7, #32]
 80163a6:	4413      	add	r3, r2
 80163a8:	7b79      	ldrb	r1, [r7, #13]
 80163aa:	4602      	mov	r2, r0
 80163ac:	2000      	movs	r0, #0
 80163ae:	f7ff fe61 	bl	8016074 <rfalNfcbPollerCheckPresence>
 80163b2:	4603      	mov	r3, r0
 80163b4:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 80163be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c0:	2200      	movs	r2, #0
 80163c2:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 80163c4:	7b3b      	ldrb	r3, [r7, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d017      	beq.n	80163fa <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80163ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	461a      	mov	r2, r3
 80163d0:	4613      	mov	r3, r2
 80163d2:	011b      	lsls	r3, r3, #4
 80163d4:	1a9b      	subs	r3, r3, r2
 80163d6:	6a3a      	ldr	r2, [r7, #32]
 80163d8:	4413      	add	r3, r2
 80163da:	1c59      	adds	r1, r3, #1
 80163dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	461a      	mov	r2, r3
 80163e2:	4613      	mov	r3, r2
 80163e4:	011b      	lsls	r3, r3, #4
 80163e6:	1a9b      	subs	r3, r3, r2
 80163e8:	6a3a      	ldr	r2, [r7, #32]
 80163ea:	4413      	add	r3, r2
 80163ec:	461a      	mov	r2, r3
 80163ee:	7b3b      	ldrb	r3, [r7, #12]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7ff fed9 	bl	80161a8 <rfalNfcbPollerSlotMarker>
 80163f6:	4603      	mov	r3, r0
 80163f8:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 80163fa:	89fb      	ldrh	r3, [r7, #14]
 80163fc:	2b04      	cmp	r3, #4
 80163fe:	f000 809d 	beq.w	801653c <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	461a      	mov	r2, r3
 8016408:	4613      	mov	r3, r2
 801640a:	011b      	lsls	r3, r3, #4
 801640c:	1a9b      	subs	r3, r3, r2
 801640e:	6a3a      	ldr	r2, [r7, #32]
 8016410:	4413      	add	r3, r2
 8016412:	1c58      	adds	r0, r3, #1
 8016414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	461a      	mov	r2, r3
 801641a:	4613      	mov	r3, r2
 801641c:	011b      	lsls	r3, r3, #4
 801641e:	1a9b      	subs	r3, r3, r2
 8016420:	6a3a      	ldr	r2, [r7, #32]
 8016422:	4413      	add	r3, r2
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	4619      	mov	r1, r3
 8016428:	f7ff fdd7 	bl	8015fda <rfalNfcbCheckSensbRes>
 801642c:	4603      	mov	r3, r0
 801642e:	2b00      	cmp	r3, #0
 8016430:	d177      	bne.n	8016522 <rfalNfcbPollerSlottedCollisionResolution+0x288>
 8016432:	89fb      	ldrh	r3, [r7, #14]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d174      	bne.n	8016522 <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 8016438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	461a      	mov	r2, r3
 801643e:	4613      	mov	r3, r2
 8016440:	011b      	lsls	r3, r3, #4
 8016442:	1a9b      	subs	r3, r3, r2
 8016444:	6a3a      	ldr	r2, [r7, #32]
 8016446:	4413      	add	r3, r2
 8016448:	2200      	movs	r2, #0
 801644a:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 801644c:	79fb      	ldrb	r3, [r7, #7]
 801644e:	2b01      	cmp	r3, #1
 8016450:	d107      	bne.n	8016462 <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 8016452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	3301      	adds	r3, #1
 8016458:	b2da      	uxtb	r2, r3
 801645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645c:	701a      	strb	r2, [r3, #0]
                                return ret;
 801645e:	89fb      	ldrh	r3, [r7, #14]
 8016460:	e08e      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 8016462:	79fb      	ldrb	r3, [r7, #7]
 8016464:	2b02      	cmp	r3, #2
 8016466:	d12b      	bne.n	80164c0 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 8016468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	3301      	adds	r3, #1
 801646e:	b2da      	uxtb	r2, r3
 8016470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016472:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8016474:	7afb      	ldrb	r3, [r7, #11]
 8016476:	3301      	adds	r3, #1
 8016478:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 801647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647c:	781b      	ldrb	r3, [r3, #0]
 801647e:	79ba      	ldrb	r2, [r7, #6]
 8016480:	429a      	cmp	r2, r3
 8016482:	d902      	bls.n	801648a <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 8016484:	7b7b      	ldrb	r3, [r7, #13]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d101      	bne.n	801648e <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 801648a:	89fb      	ldrh	r3, [r7, #14]
 801648c:	e078      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 801648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	461a      	mov	r2, r3
 8016494:	4613      	mov	r3, r2
 8016496:	011b      	lsls	r3, r3, #4
 8016498:	1a9b      	subs	r3, r3, r2
 801649a:	3b0f      	subs	r3, #15
 801649c:	6a3a      	ldr	r2, [r7, #32]
 801649e:	4413      	add	r3, r2
 80164a0:	3302      	adds	r3, #2
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7ff fe4c 	bl	8016140 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 80164a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	461a      	mov	r2, r3
 80164ae:	4613      	mov	r3, r2
 80164b0:	011b      	lsls	r3, r3, #4
 80164b2:	1a9b      	subs	r3, r3, r2
 80164b4:	3b0f      	subs	r3, #15
 80164b6:	6a3a      	ldr	r2, [r7, #32]
 80164b8:	4413      	add	r3, r2
 80164ba:	2201      	movs	r2, #1
 80164bc:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 80164be:	e03c      	b.n	801653a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80164c0:	79fb      	ldrb	r3, [r7, #7]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d139      	bne.n	801653a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 80164c6:	7afb      	ldrb	r3, [r7, #11]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d017      	beq.n	80164fc <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80164cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	461a      	mov	r2, r3
 80164d2:	4613      	mov	r3, r2
 80164d4:	011b      	lsls	r3, r3, #4
 80164d6:	1a9b      	subs	r3, r3, r2
 80164d8:	3b0f      	subs	r3, #15
 80164da:	6a3a      	ldr	r2, [r7, #32]
 80164dc:	4413      	add	r3, r2
 80164de:	3302      	adds	r3, #2
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7ff fe2d 	bl	8016140 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 80164e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	461a      	mov	r2, r3
 80164ec:	4613      	mov	r3, r2
 80164ee:	011b      	lsls	r3, r3, #4
 80164f0:	1a9b      	subs	r3, r3, r2
 80164f2:	3b0f      	subs	r3, #15
 80164f4:	6a3a      	ldr	r2, [r7, #32]
 80164f6:	4413      	add	r3, r2
 80164f8:	2201      	movs	r2, #1
 80164fa:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	3301      	adds	r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016506:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8016508:	7afb      	ldrb	r3, [r7, #11]
 801650a:	3301      	adds	r3, #1
 801650c:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 801650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	79ba      	ldrb	r2, [r7, #6]
 8016514:	429a      	cmp	r2, r3
 8016516:	d902      	bls.n	801651e <rfalNfcbPollerSlottedCollisionResolution+0x284>
 8016518:	7b7b      	ldrb	r3, [r7, #13]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d10d      	bne.n	801653a <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 801651e:	89fb      	ldrh	r3, [r7, #14]
 8016520:	e02e      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8016522:	79bb      	ldrb	r3, [r7, #6]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d104      	bne.n	8016532 <rfalNfcbPollerSlottedCollisionResolution+0x298>
 8016528:	7b7b      	ldrb	r3, [r7, #13]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d101      	bne.n	8016532 <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 801652e:	231d      	movs	r3, #29
 8016530:	e026      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 8016532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016534:	2201      	movs	r2, #1
 8016536:	701a      	strb	r2, [r3, #0]
 8016538:	e000      	b.n	801653c <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 801653a:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 801653c:	7b3b      	ldrb	r3, [r7, #12]
 801653e:	3301      	adds	r3, #1
 8016540:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 8016542:	7b7b      	ldrb	r3, [r7, #13]
 8016544:	2201      	movs	r2, #1
 8016546:	fa02 f303 	lsl.w	r3, r2, r3
 801654a:	b2db      	uxtb	r3, r3
 801654c:	7b3a      	ldrb	r2, [r7, #12]
 801654e:	429a      	cmp	r2, r3
 8016550:	f4ff af38 	bcc.w	80163c4 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 8016554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	f083 0301 	eor.w	r3, r3, #1
 801655c:	b2db      	uxtb	r3, r3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d001      	beq.n	8016566 <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 8016562:	2300      	movs	r3, #0
 8016564:	e00c      	b.n	8016580 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 8016566:	7afb      	ldrb	r3, [r7, #11]
 8016568:	2b00      	cmp	r3, #0
 801656a:	f47f aee6 	bne.w	801633a <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 801656e:	7b7b      	ldrb	r3, [r7, #13]
 8016570:	3301      	adds	r3, #1
 8016572:	737b      	strb	r3, [r7, #13]
 8016574:	7b7a      	ldrb	r2, [r7, #13]
 8016576:	793b      	ldrb	r3, [r7, #4]
 8016578:	429a      	cmp	r2, r3
 801657a:	f67f aede 	bls.w	801633a <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 801657e:	2300      	movs	r3, #0
}
 8016580:	4618      	mov	r0, r3
 8016582:	3714      	adds	r7, #20
 8016584:	46bd      	mov	sp, r7
 8016586:	bd90      	pop	{r4, r7, pc}

08016588 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	4603      	mov	r3, r0
 8016590:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8016592:	4a0a      	ldr	r2, [pc, #40]	; (80165bc <rfalNfcbTR2ToFDT+0x34>)
 8016594:	f107 0308 	add.w	r3, r7, #8
 8016598:	e892 0003 	ldmia.w	r2, {r0, r1}
 801659c:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 80165a0:	79fb      	ldrb	r3, [r7, #7]
 80165a2:	f003 0303 	and.w	r3, r3, #3
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	3310      	adds	r3, #16
 80165aa:	443b      	add	r3, r7
 80165ac:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3714      	adds	r7, #20
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bc80      	pop	{r7}
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	0801d0d0 	.word	0x0801d0d0

080165c0 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 80165c0:	b5b0      	push	{r4, r5, r7, lr}
 80165c2:	b08c      	sub	sp, #48	; 0x30
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	4611      	mov	r1, r2
 80165cc:	461a      	mov	r2, r3
 80165ce:	460b      	mov	r3, r1
 80165d0:	71fb      	strb	r3, [r7, #7]
 80165d2:	4613      	mov	r3, r2
 80165d4:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 80165d6:	e0e5      	b.n	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 80165d8:	2300      	movs	r3, #0
 80165da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 80165de:	4b78      	ldr	r3, [pc, #480]	; (80167c0 <rfalNfcfComputeValidSENF+0x200>)
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	3b01      	subs	r3, #1
 80165e4:	b2da      	uxtb	r2, r3
 80165e6:	4b76      	ldr	r3, [pc, #472]	; (80167c0 <rfalNfcfComputeValidSENF+0x200>)
 80165e8:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 80165ea:	4b75      	ldr	r3, [pc, #468]	; (80167c0 <rfalNfcfComputeValidSENF+0x200>)
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	4613      	mov	r3, r2
 80165f2:	009b      	lsls	r3, r3, #2
 80165f4:	4413      	add	r3, r2
 80165f6:	009b      	lsls	r3, r3, #2
 80165f8:	4a71      	ldr	r2, [pc, #452]	; (80167c0 <rfalNfcfComputeValidSENF+0x200>)
 80165fa:	4413      	add	r3, r2
 80165fc:	3302      	adds	r3, #2
 80165fe:	f107 0414 	add.w	r4, r7, #20
 8016602:	461d      	mov	r5, r3
 8016604:	6828      	ldr	r0, [r5, #0]
 8016606:	6869      	ldr	r1, [r5, #4]
 8016608:	68aa      	ldr	r2, [r5, #8]
 801660a:	68eb      	ldr	r3, [r5, #12]
 801660c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801660e:	8a2b      	ldrh	r3, [r5, #16]
 8016610:	7caa      	ldrb	r2, [r5, #18]
 8016612:	8023      	strh	r3, [r4, #0]
 8016614:	4613      	mov	r3, r2
 8016616:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 8016618:	f107 0314 	add.w	r3, r7, #20
 801661c:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 801661e:	2300      	movs	r3, #0
 8016620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016624:	e01b      	b.n	801665e <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 8016626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016628:	1c98      	adds	r0, r3, #2
 801662a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801662e:	4613      	mov	r3, r2
 8016630:	00db      	lsls	r3, r3, #3
 8016632:	4413      	add	r3, r2
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	4413      	add	r3, r2
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	4413      	add	r3, r2
 801663c:	3302      	adds	r3, #2
 801663e:	2208      	movs	r2, #8
 8016640:	4619      	mov	r1, r3
 8016642:	f004 ff27 	bl	801b494 <memcmp>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d103      	bne.n	8016654 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 801664c:	2301      	movs	r3, #1
 801664e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 8016652:	e00a      	b.n	801666a <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8016654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016658:	3301      	adds	r3, #1
 801665a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	781b      	ldrb	r3, [r3, #0]
 8016662:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016666:	429a      	cmp	r2, r3
 8016668:	d3dd      	bcc.n	8016626 <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 801666a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801666e:	2b00      	cmp	r3, #0
 8016670:	d006      	beq.n	8016680 <rfalNfcfComputeValidSENF+0xc0>
 8016672:	79bb      	ldrb	r3, [r7, #6]
 8016674:	f083 0301 	eor.w	r3, r3, #1
 8016678:	b2db      	uxtb	r3, r3
 801667a:	2b00      	cmp	r3, #0
 801667c:	d000      	beq.n	8016680 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 801667e:	e091      	b.n	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 8016680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	3b02      	subs	r3, #2
 8016686:	2b0f      	cmp	r3, #15
 8016688:	f240 808c 	bls.w	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	3b02      	subs	r3, #2
 8016692:	2b12      	cmp	r3, #18
 8016694:	d900      	bls.n	8016698 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 8016696:	e085      	b.n	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8016698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669a:	785b      	ldrb	r3, [r3, #1]
 801669c:	2b01      	cmp	r3, #1
 801669e:	d000      	beq.n	80166a2 <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 80166a0:	e080      	b.n	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 80166a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d02a      	beq.n	8016700 <rfalNfcfComputeValidSENF+0x140>
 80166aa:	79bb      	ldrb	r3, [r7, #6]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d027      	beq.n	8016700 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 80166b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b2:	7819      	ldrb	r1, [r3, #0]
 80166b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80166b8:	4613      	mov	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	4413      	add	r3, r2
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	4413      	add	r3, r2
 80166c2:	68fa      	ldr	r2, [r7, #12]
 80166c4:	4413      	add	r3, r2
 80166c6:	1e4a      	subs	r2, r1, #1
 80166c8:	b2d2      	uxtb	r2, r2
 80166ca:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 80166cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80166d0:	4613      	mov	r3, r2
 80166d2:	00db      	lsls	r3, r3, #3
 80166d4:	4413      	add	r3, r2
 80166d6:	005b      	lsls	r3, r3, #1
 80166d8:	4413      	add	r3, r2
 80166da:	68fa      	ldr	r2, [r7, #12]
 80166dc:	4413      	add	r3, r2
 80166de:	1c58      	adds	r0, r3, #1
 80166e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e2:	1c59      	adds	r1, r3, #1
 80166e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80166e8:	4613      	mov	r3, r2
 80166ea:	00db      	lsls	r3, r3, #3
 80166ec:	4413      	add	r3, r2
 80166ee:	005b      	lsls	r3, r3, #1
 80166f0:	4413      	add	r3, r2
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	4413      	add	r3, r2
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	461a      	mov	r2, r3
 80166fa:	f004 fedb 	bl	801b4b4 <memcpy>
            continue;
 80166fe:	e051      	b.n	80167a4 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8016700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016702:	7819      	ldrb	r1, [r3, #0]
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	461a      	mov	r2, r3
 801670a:	4613      	mov	r3, r2
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	4413      	add	r3, r2
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	4413      	add	r3, r2
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	4413      	add	r3, r2
 8016718:	1e4a      	subs	r2, r1, #1
 801671a:	b2d2      	uxtb	r2, r2
 801671c:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	461a      	mov	r2, r3
 8016724:	4613      	mov	r3, r2
 8016726:	00db      	lsls	r3, r3, #3
 8016728:	4413      	add	r3, r2
 801672a:	005b      	lsls	r3, r3, #1
 801672c:	4413      	add	r3, r2
 801672e:	68fa      	ldr	r2, [r7, #12]
 8016730:	4413      	add	r3, r2
 8016732:	1c58      	adds	r0, r3, #1
 8016734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016736:	1c59      	adds	r1, r3, #1
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	461a      	mov	r2, r3
 801673e:	4613      	mov	r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	4413      	add	r3, r2
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	4413      	add	r3, r2
 8016748:	68fa      	ldr	r2, [r7, #12]
 801674a:	4413      	add	r3, r2
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	461a      	mov	r2, r3
 8016750:	f004 feb0 	bl	801b4b4 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	461a      	mov	r2, r3
 801675a:	4613      	mov	r3, r2
 801675c:	00db      	lsls	r3, r3, #3
 801675e:	4413      	add	r3, r2
 8016760:	005b      	lsls	r3, r3, #1
 8016762:	4413      	add	r3, r2
 8016764:	68fa      	ldr	r2, [r7, #12]
 8016766:	4413      	add	r3, r2
 8016768:	789b      	ldrb	r3, [r3, #2]
 801676a:	2b01      	cmp	r3, #1
 801676c:	d10e      	bne.n	801678c <rfalNfcfComputeValidSENF+0x1cc>
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	461a      	mov	r2, r3
 8016774:	4613      	mov	r3, r2
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	4413      	add	r3, r2
 801677a:	005b      	lsls	r3, r3, #1
 801677c:	4413      	add	r3, r2
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	4413      	add	r3, r2
 8016782:	78db      	ldrb	r3, [r3, #3]
 8016784:	2bfe      	cmp	r3, #254	; 0xfe
 8016786:	d101      	bne.n	801678c <rfalNfcfComputeValidSENF+0x1cc>
 8016788:	2301      	movs	r3, #1
 801678a:	e000      	b.n	801678e <rfalNfcfComputeValidSENF+0x1ce>
 801678c:	2300      	movs	r3, #0
 801678e:	f003 0301 	and.w	r3, r3, #1
 8016792:	b2da      	uxtb	r2, r3
 8016794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016796:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	3301      	adds	r3, #1
 801679e:	b2da      	uxtb	r2, r3
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 80167a4:	4b06      	ldr	r3, [pc, #24]	; (80167c0 <rfalNfcfComputeValidSENF+0x200>)
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d005      	beq.n	80167b8 <rfalNfcfComputeValidSENF+0x1f8>
 80167ac:	68bb      	ldr	r3, [r7, #8]
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	79fa      	ldrb	r2, [r7, #7]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	f63f af10 	bhi.w	80165d8 <rfalNfcfComputeValidSENF+0x18>
    }
}
 80167b8:	bf00      	nop
 80167ba:	3730      	adds	r7, #48	; 0x30
 80167bc:	46bd      	mov	sp, r7
 80167be:	bdb0      	pop	{r4, r5, r7, pc}
 80167c0:	200038b4 	.word	0x200038b4

080167c4 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 80167ce:	79fb      	ldrb	r3, [r7, #7]
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d004      	beq.n	80167de <rfalNfcfPollerInitialize+0x1a>
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b02      	cmp	r3, #2
 80167d8:	d001      	beq.n	80167de <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 80167da:	2307      	movs	r3, #7
 80167dc:	e01b      	b.n	8016816 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 80167de:	79fa      	ldrb	r2, [r7, #7]
 80167e0:	79fb      	ldrb	r3, [r7, #7]
 80167e2:	4619      	mov	r1, r3
 80167e4:	2006      	movs	r0, #6
 80167e6:	f001 f92b 	bl	8017a40 <rfalSetMode>
 80167ea:	4603      	mov	r3, r0
 80167ec:	81fb      	strh	r3, [r7, #14]
 80167ee:	89fb      	ldrh	r3, [r7, #14]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d001      	beq.n	80167f8 <rfalNfcfPollerInitialize+0x34>
 80167f4:	89fb      	ldrh	r3, [r7, #14]
 80167f6:	e00e      	b.n	8016816 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80167f8:	2001      	movs	r0, #1
 80167fa:	f001 fcbd 	bl	8018178 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 80167fe:	4808      	ldr	r0, [pc, #32]	; (8016820 <rfalNfcfPollerInitialize+0x5c>)
 8016800:	f001 fcf2 	bl	80181e8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 8016804:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8016808:	f001 fcda 	bl	80181c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 801680c:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8016810:	f001 fcc2 	bl	8018198 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	00042360 	.word	0x00042360

08016824 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 8016824:	b590      	push	{r4, r7, lr}
 8016826:	b087      	sub	sp, #28
 8016828:	af04      	add	r7, sp, #16
 801682a:	603b      	str	r3, [r7, #0]
 801682c:	4603      	mov	r3, r0
 801682e:	71fb      	strb	r3, [r7, #7]
 8016830:	460b      	mov	r3, r1
 8016832:	80bb      	strh	r3, [r7, #4]
 8016834:	4613      	mov	r3, r2
 8016836:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8016838:	79fb      	ldrb	r3, [r7, #7]
 801683a:	3301      	adds	r3, #1
 801683c:	b2db      	uxtb	r3, r3
 801683e:	79bc      	ldrb	r4, [r7, #6]
 8016840:	88b9      	ldrh	r1, [r7, #4]
 8016842:	79f8      	ldrb	r0, [r7, #7]
 8016844:	69fa      	ldr	r2, [r7, #28]
 8016846:	9202      	str	r2, [sp, #8]
 8016848:	69ba      	ldr	r2, [r7, #24]
 801684a:	9201      	str	r2, [sp, #4]
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	4622      	mov	r2, r4
 8016852:	f003 f95d 	bl	8019b10 <rfalFeliCaPoll>
 8016856:	4603      	mov	r3, r0
}
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	bd90      	pop	{r4, r7, pc}

08016860 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 8016866:	4b0b      	ldr	r3, [pc, #44]	; (8016894 <rfalNfcfPollerCheckPresence+0x34>)
 8016868:	2200      	movs	r2, #0
 801686a:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 801686c:	4b09      	ldr	r3, [pc, #36]	; (8016894 <rfalNfcfPollerCheckPresence+0x34>)
 801686e:	2200      	movs	r2, #0
 8016870:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8016872:	4b09      	ldr	r3, [pc, #36]	; (8016898 <rfalNfcfPollerCheckPresence+0x38>)
 8016874:	9302      	str	r3, [sp, #8]
 8016876:	4b07      	ldr	r3, [pc, #28]	; (8016894 <rfalNfcfPollerCheckPresence+0x34>)
 8016878:	9301      	str	r3, [sp, #4]
 801687a:	2304      	movs	r3, #4
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	4b07      	ldr	r3, [pc, #28]	; (801689c <rfalNfcfPollerCheckPresence+0x3c>)
 8016880:	2200      	movs	r2, #0
 8016882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016886:	2003      	movs	r0, #3
 8016888:	f003 f942 	bl	8019b10 <rfalFeliCaPoll>
 801688c:	4603      	mov	r3, r0
}
 801688e:	4618      	mov	r0, r3
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	200038b4 	.word	0x200038b4
 8016898:	200038b5 	.word	0x200038b5
 801689c:	200038b6 	.word	0x200038b6

080168a0 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b088      	sub	sp, #32
 80168a4:	af02      	add	r7, sp, #8
 80168a6:	60ba      	str	r2, [r7, #8]
 80168a8:	607b      	str	r3, [r7, #4]
 80168aa:	4603      	mov	r3, r0
 80168ac:	73fb      	strb	r3, [r7, #15]
 80168ae:	460b      	mov	r3, r1
 80168b0:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d002      	beq.n	80168be <rfalNfcfPollerCollisionResolution+0x1e>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d101      	bne.n	80168c2 <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 80168be:	2307      	movs	r3, #7
 80168c0:	e053      	b.n	801696a <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2200      	movs	r2, #0
 80168c6:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 80168c8:	2300      	movs	r3, #0
 80168ca:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 80168cc:	7bbb      	ldrb	r3, [r7, #14]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d001      	beq.n	80168d6 <rfalNfcfPollerCollisionResolution+0x36>
 80168d2:	7bba      	ldrb	r2, [r7, #14]
 80168d4:	e000      	b.n	80168d8 <rfalNfcfPollerCollisionResolution+0x38>
 80168d6:	2204      	movs	r2, #4
 80168d8:	f107 0315 	add.w	r3, r7, #21
 80168dc:	9300      	str	r3, [sp, #0]
 80168de:	2300      	movs	r3, #0
 80168e0:	6879      	ldr	r1, [r7, #4]
 80168e2:	68b8      	ldr	r0, [r7, #8]
 80168e4:	f7ff fe6c 	bl	80165c0 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	7bba      	ldrb	r2, [r7, #14]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d93a      	bls.n	8016968 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80168f8:	4b1e      	ldr	r3, [pc, #120]	; (8016974 <rfalNfcfPollerCollisionResolution+0xd4>)
 80168fa:	9301      	str	r3, [sp, #4]
 80168fc:	4b1e      	ldr	r3, [pc, #120]	; (8016978 <rfalNfcfPollerCollisionResolution+0xd8>)
 80168fe:	9300      	str	r3, [sp, #0]
 8016900:	4b1e      	ldr	r3, [pc, #120]	; (801697c <rfalNfcfPollerCollisionResolution+0xdc>)
 8016902:	2200      	movs	r2, #0
 8016904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016908:	200f      	movs	r0, #15
 801690a:	f7ff ff8b 	bl	8016824 <rfalNfcfPollerPoll>
 801690e:	4603      	mov	r3, r0
 8016910:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 8016912:	8afb      	ldrh	r3, [r7, #22]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d108      	bne.n	801692a <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8016918:	7bba      	ldrb	r2, [r7, #14]
 801691a:	f107 0315 	add.w	r3, r7, #21
 801691e:	9300      	str	r3, [sp, #0]
 8016920:	2300      	movs	r3, #0
 8016922:	6879      	ldr	r1, [r7, #4]
 8016924:	68b8      	ldr	r0, [r7, #8]
 8016926:	f7ff fe4b 	bl	80165c0 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 801692a:	7d7b      	ldrb	r3, [r7, #21]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d01b      	beq.n	8016968 <rfalNfcfPollerCollisionResolution+0xc8>
 8016930:	7bfb      	ldrb	r3, [r7, #15]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d118      	bne.n	8016968 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8016936:	4b0f      	ldr	r3, [pc, #60]	; (8016974 <rfalNfcfPollerCollisionResolution+0xd4>)
 8016938:	9301      	str	r3, [sp, #4]
 801693a:	4b0f      	ldr	r3, [pc, #60]	; (8016978 <rfalNfcfPollerCollisionResolution+0xd8>)
 801693c:	9300      	str	r3, [sp, #0]
 801693e:	4b0f      	ldr	r3, [pc, #60]	; (801697c <rfalNfcfPollerCollisionResolution+0xdc>)
 8016940:	2201      	movs	r2, #1
 8016942:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016946:	200f      	movs	r0, #15
 8016948:	f7ff ff6c 	bl	8016824 <rfalNfcfPollerPoll>
 801694c:	4603      	mov	r3, r0
 801694e:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 8016950:	8afb      	ldrh	r3, [r7, #22]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d108      	bne.n	8016968 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 8016956:	7bba      	ldrb	r2, [r7, #14]
 8016958:	f107 0315 	add.w	r3, r7, #21
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	2301      	movs	r3, #1
 8016960:	6879      	ldr	r1, [r7, #4]
 8016962:	68b8      	ldr	r0, [r7, #8]
 8016964:	f7ff fe2c 	bl	80165c0 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3718      	adds	r7, #24
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	200038b5 	.word	0x200038b5
 8016978:	200038b4 	.word	0x200038b4
 801697c:	200038b6 	.word	0x200038b6

08016980 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b0a0      	sub	sp, #128	; 0x80
 8016984:	af04      	add	r7, sp, #16
 8016986:	60f8      	str	r0, [r7, #12]
 8016988:	60b9      	str	r1, [r7, #8]
 801698a:	607a      	str	r2, [r7, #4]
 801698c:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d018      	beq.n	80169c6 <rfalNfcfPollerCheck+0x46>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d015      	beq.n	80169c6 <rfalNfcfPollerCheck+0x46>
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d012      	beq.n	80169c6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d00e      	beq.n	80169c6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	7a1b      	ldrb	r3, [r3, #8]
 80169ac:	2b0f      	cmp	r3, #15
 80169ae:	d80a      	bhi.n	80169c6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d006      	beq.n	80169c6 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	2b0f      	cmp	r3, #15
 80169be:	d802      	bhi.n	80169c6 <rfalNfcfPollerCheck+0x46>
 80169c0:	887b      	ldrh	r3, [r7, #2]
 80169c2:	2b0b      	cmp	r3, #11
 80169c4:	d801      	bhi.n	80169ca <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 80169c6:	2307      	movs	r3, #7
 80169c8:	e110      	b.n	8016bec <rfalNfcfPollerCheck+0x26c>
    }
    
    msgIt = 0;
 80169ca:	2300      	movs	r3, #0
 80169cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 80169d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80169d4:	1c5a      	adds	r2, r3, #1
 80169d6:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80169da:	3370      	adds	r3, #112	; 0x70
 80169dc:	443b      	add	r3, r7
 80169de:	2206      	movs	r2, #6
 80169e0:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 80169e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80169e8:	f107 0210 	add.w	r2, r7, #16
 80169ec:	4413      	add	r3, r2
 80169ee:	2208      	movs	r2, #8
 80169f0:	68f9      	ldr	r1, [r7, #12]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f004 fd5e 	bl	801b4b4 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 80169f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80169fc:	3308      	adds	r3, #8
 80169fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8016a02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a06:	1c5a      	adds	r2, r3, #1
 8016a08:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8016a0c:	4619      	mov	r1, r3
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	781a      	ldrb	r2, [r3, #0]
 8016a12:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8016a16:	443b      	add	r3, r7
 8016a18:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8016a22:	e028      	b.n	8016a76 <rfalNfcfPollerCheck+0xf6>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8016a24:	68bb      	ldr	r3, [r7, #8]
 8016a26:	685a      	ldr	r2, [r3, #4]
 8016a28:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4413      	add	r3, r2
 8016a30:	881a      	ldrh	r2, [r3, #0]
 8016a32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a36:	1c59      	adds	r1, r3, #1
 8016a38:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016a3c:	b2d2      	uxtb	r2, r2
 8016a3e:	3370      	adds	r3, #112	; 0x70
 8016a40:	443b      	add	r3, r7
 8016a42:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	685a      	ldr	r2, [r3, #4]
 8016a4a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a4e:	005b      	lsls	r3, r3, #1
 8016a50:	4413      	add	r3, r2
 8016a52:	881b      	ldrh	r3, [r3, #0]
 8016a54:	0a1b      	lsrs	r3, r3, #8
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a5c:	1c59      	adds	r1, r3, #1
 8016a5e:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016a62:	b2d2      	uxtb	r2, r2
 8016a64:	3370      	adds	r3, #112	; 0x70
 8016a66:	443b      	add	r3, r7
 8016a68:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8016a6c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a70:	3301      	adds	r3, #1
 8016a72:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d3d0      	bcc.n	8016a24 <rfalNfcfPollerCheck+0xa4>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8016a82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a86:	1c5a      	adds	r2, r3, #1
 8016a88:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	7a1a      	ldrb	r2, [r3, #8]
 8016a92:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8016a96:	443b      	add	r3, r7
 8016a98:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8016aa2:	e054      	b.n	8016b4e <rfalNfcfPollerCheck+0x1ce>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	68da      	ldr	r2, [r3, #12]
 8016aa8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	441a      	add	r2, r3
 8016ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016ab4:	1c59      	adds	r1, r3, #1
 8016ab6:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016aba:	7812      	ldrb	r2, [r2, #0]
 8016abc:	3370      	adds	r3, #112	; 0x70
 8016abe:	443b      	add	r3, r7
 8016ac0:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	68da      	ldr	r2, [r3, #12]
 8016ac8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	4413      	add	r3, r2
 8016ad0:	781b      	ldrb	r3, [r3, #0]
 8016ad2:	b25b      	sxtb	r3, r3
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	da11      	bge.n	8016afc <rfalNfcfPollerCheck+0x17c>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	68da      	ldr	r2, [r3, #12]
 8016adc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016ae0:	009b      	lsls	r3, r3, #2
 8016ae2:	4413      	add	r3, r2
 8016ae4:	885a      	ldrh	r2, [r3, #2]
 8016ae6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016aea:	1c59      	adds	r1, r3, #1
 8016aec:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016af0:	b2d2      	uxtb	r2, r2
 8016af2:	3370      	adds	r3, #112	; 0x70
 8016af4:	443b      	add	r3, r7
 8016af6:	f803 2c60 	strb.w	r2, [r3, #-96]
 8016afa:	e023      	b.n	8016b44 <rfalNfcfPollerCheck+0x1c4>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	68da      	ldr	r2, [r3, #12]
 8016b00:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	4413      	add	r3, r2
 8016b08:	885a      	ldrh	r2, [r3, #2]
 8016b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016b0e:	1c59      	adds	r1, r3, #1
 8016b10:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016b14:	b2d2      	uxtb	r2, r2
 8016b16:	3370      	adds	r3, #112	; 0x70
 8016b18:	443b      	add	r3, r7
 8016b1a:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	68da      	ldr	r2, [r3, #12]
 8016b22:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	4413      	add	r3, r2
 8016b2a:	885b      	ldrh	r3, [r3, #2]
 8016b2c:	0a1b      	lsrs	r3, r3, #8
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016b34:	1c59      	adds	r1, r3, #1
 8016b36:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016b3a:	b2d2      	uxtb	r2, r2
 8016b3c:	3370      	adds	r3, #112	; 0x70
 8016b3e:	443b      	add	r3, r7
 8016b40:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8016b44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016b48:	3301      	adds	r3, #1
 8016b4a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	7a1b      	ldrb	r3, [r3, #8]
 8016b52:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d3a4      	bcc.n	8016aa4 <rfalNfcfPollerCheck+0x124>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8016b5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016b5e:	b299      	uxth	r1, r3
 8016b60:	887a      	ldrh	r2, [r7, #2]
 8016b62:	f107 0010 	add.w	r0, r7, #16
 8016b66:	4b23      	ldr	r3, [pc, #140]	; (8016bf4 <rfalNfcfPollerCheck+0x274>)
 8016b68:	9302      	str	r3, [sp, #8]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	9301      	str	r3, [sp, #4]
 8016b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	4613      	mov	r3, r2
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	f001 fd93 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 8016b80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d12f      	bne.n	8016be8 <rfalNfcfPollerCheck+0x268>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8016b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b90:	881b      	ldrh	r3, [r3, #0]
 8016b92:	2b0a      	cmp	r3, #10
 8016b94:	d803      	bhi.n	8016b9e <rfalNfcfPollerCheck+0x21e>
        {
            ret = ERR_PROTO;
 8016b96:	230b      	movs	r3, #11
 8016b98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8016b9c:	e024      	b.n	8016be8 <rfalNfcfPollerCheck+0x268>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8016b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	2b07      	cmp	r3, #7
 8016ba4:	d109      	bne.n	8016bba <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8016ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ba8:	3309      	adds	r3, #9
 8016baa:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d104      	bne.n	8016bba <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 8016bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016bb2:	330a      	adds	r3, #10
 8016bb4:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d003      	beq.n	8016bc2 <rfalNfcfPollerCheck+0x242>
        {
            ret = ERR_REQUEST;
 8016bba:	2305      	movs	r3, #5
 8016bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8016bc0:	e012      	b.n	8016be8 <rfalNfcfPollerCheck+0x268>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 8016bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bc4:	881b      	ldrh	r3, [r3, #0]
 8016bc6:	3b0c      	subs	r3, #12
 8016bc8:	b29a      	uxth	r2, r3
 8016bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bcc:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 8016bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bd0:	881b      	ldrh	r3, [r3, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d008      	beq.n	8016be8 <rfalNfcfPollerCheck+0x268>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8016bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016bd8:	f103 010b 	add.w	r1, r3, #11
 8016bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016bde:	881b      	ldrh	r3, [r3, #0]
 8016be0:	461a      	mov	r2, r3
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f004 fc74 	bl	801b4d0 <memmove>
            }
        }
    }
    
    return ret;
 8016be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3770      	adds	r7, #112	; 0x70
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	02000010 	.word	0x02000010

08016bf8 <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b08c      	sub	sp, #48	; 0x30
 8016bfc:	af04      	add	r7, sp, #16
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
 8016c04:	807b      	strh	r3, [r7, #2]
    uint16_t   auxLen;
    uint8_t    *updateRes;
    ReturnCode ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d01b      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
 8016c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d018      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d015      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d012      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d00e      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	7a1b      	ldrb	r3, [r3, #8]
 8016c2a:	2b0d      	cmp	r3, #13
 8016c2c:	d80a      	bhi.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d006      	beq.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	2b0f      	cmp	r3, #15
 8016c3c:	d802      	bhi.n	8016c44 <rfalNfcfPollerUpdate+0x4c>
 8016c3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016c40:	2b0b      	cmp	r3, #11
 8016c42:	d801      	bhi.n	8016c48 <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8016c44:	2307      	movs	r3, #7
 8016c46:	e0f2      	b.n	8016e2e <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	7a1b      	ldrb	r3, [r3, #8]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	4619      	mov	r1, r3
 8016c56:	0089      	lsls	r1, r1, #2
 8016c58:	440b      	add	r3, r1
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	b29b      	uxth	r3, r3
 8016c5e:	4413      	add	r3, r2
 8016c60:	b29b      	uxth	r3, r3
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8016c66:	3309      	adds	r3, #9
 8016c68:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 8016c6a:	887a      	ldrh	r2, [r7, #2]
 8016c6c:	8b3b      	ldrh	r3, [r7, #24]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d201      	bcs.n	8016c76 <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 8016c72:	2307      	movs	r3, #7
 8016c74:	e0db      	b.n	8016e2e <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 8016c76:	2300      	movs	r3, #0
 8016c78:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 8016c7a:	8bbb      	ldrh	r3, [r7, #28]
 8016c7c:	1c5a      	adds	r2, r3, #1
 8016c7e:	83ba      	strh	r2, [r7, #28]
 8016c80:	461a      	mov	r2, r3
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4413      	add	r3, r2
 8016c86:	2208      	movs	r2, #8
 8016c88:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8016c8a:	8bbb      	ldrh	r3, [r7, #28]
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	4413      	add	r3, r2
 8016c90:	2208      	movs	r2, #8
 8016c92:	68f9      	ldr	r1, [r7, #12]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f004 fc0d 	bl	801b4b4 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8016c9a:	8bbb      	ldrh	r3, [r7, #28]
 8016c9c:	3308      	adds	r3, #8
 8016c9e:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8016ca0:	8bbb      	ldrh	r3, [r7, #28]
 8016ca2:	1c5a      	adds	r2, r3, #1
 8016ca4:	83ba      	strh	r2, [r7, #28]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	4413      	add	r3, r2
 8016cac:	68ba      	ldr	r2, [r7, #8]
 8016cae:	7812      	ldrb	r2, [r2, #0]
 8016cb0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	77fb      	strb	r3, [r7, #31]
 8016cb6:	e020      	b.n	8016cfa <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8016cb8:	68bb      	ldr	r3, [r7, #8]
 8016cba:	685a      	ldr	r2, [r3, #4]
 8016cbc:	7ffb      	ldrb	r3, [r7, #31]
 8016cbe:	005b      	lsls	r3, r3, #1
 8016cc0:	4413      	add	r3, r2
 8016cc2:	881a      	ldrh	r2, [r3, #0]
 8016cc4:	8bbb      	ldrh	r3, [r7, #28]
 8016cc6:	1c59      	adds	r1, r3, #1
 8016cc8:	83b9      	strh	r1, [r7, #28]
 8016cca:	4619      	mov	r1, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	440b      	add	r3, r1
 8016cd0:	b2d2      	uxtb	r2, r2
 8016cd2:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	685a      	ldr	r2, [r3, #4]
 8016cd8:	7ffb      	ldrb	r3, [r7, #31]
 8016cda:	005b      	lsls	r3, r3, #1
 8016cdc:	4413      	add	r3, r2
 8016cde:	881b      	ldrh	r3, [r3, #0]
 8016ce0:	0a1b      	lsrs	r3, r3, #8
 8016ce2:	b29a      	uxth	r2, r3
 8016ce4:	8bbb      	ldrh	r3, [r7, #28]
 8016ce6:	1c59      	adds	r1, r3, #1
 8016ce8:	83b9      	strh	r1, [r7, #28]
 8016cea:	4619      	mov	r1, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	440b      	add	r3, r1
 8016cf0:	b2d2      	uxtb	r2, r2
 8016cf2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8016cf4:	7ffb      	ldrb	r3, [r7, #31]
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	77fb      	strb	r3, [r7, #31]
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	7ffa      	ldrb	r2, [r7, #31]
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d3d9      	bcc.n	8016cb8 <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8016d04:	8bbb      	ldrh	r3, [r7, #28]
 8016d06:	1c5a      	adds	r2, r3, #1
 8016d08:	83ba      	strh	r2, [r7, #28]
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	4413      	add	r3, r2
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	7a12      	ldrb	r2, [r2, #8]
 8016d14:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8016d16:	2300      	movs	r3, #0
 8016d18:	77fb      	strb	r3, [r7, #31]
 8016d1a:	e045      	b.n	8016da8 <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	68da      	ldr	r2, [r3, #12]
 8016d20:	7ffb      	ldrb	r3, [r7, #31]
 8016d22:	009b      	lsls	r3, r3, #2
 8016d24:	441a      	add	r2, r3
 8016d26:	8bbb      	ldrh	r3, [r7, #28]
 8016d28:	1c59      	adds	r1, r3, #1
 8016d2a:	83b9      	strh	r1, [r7, #28]
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	440b      	add	r3, r1
 8016d32:	7812      	ldrb	r2, [r2, #0]
 8016d34:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	68da      	ldr	r2, [r3, #12]
 8016d3a:	7ffb      	ldrb	r3, [r7, #31]
 8016d3c:	009b      	lsls	r3, r3, #2
 8016d3e:	4413      	add	r3, r2
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	b25b      	sxtb	r3, r3
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	da0e      	bge.n	8016d66 <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	68da      	ldr	r2, [r3, #12]
 8016d4c:	7ffb      	ldrb	r3, [r7, #31]
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	4413      	add	r3, r2
 8016d52:	885a      	ldrh	r2, [r3, #2]
 8016d54:	8bbb      	ldrh	r3, [r7, #28]
 8016d56:	1c59      	adds	r1, r3, #1
 8016d58:	83b9      	strh	r1, [r7, #28]
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	440b      	add	r3, r1
 8016d60:	b2d2      	uxtb	r2, r2
 8016d62:	701a      	strb	r2, [r3, #0]
 8016d64:	e01d      	b.n	8016da2 <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	68da      	ldr	r2, [r3, #12]
 8016d6a:	7ffb      	ldrb	r3, [r7, #31]
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	4413      	add	r3, r2
 8016d70:	885a      	ldrh	r2, [r3, #2]
 8016d72:	8bbb      	ldrh	r3, [r7, #28]
 8016d74:	1c59      	adds	r1, r3, #1
 8016d76:	83b9      	strh	r1, [r7, #28]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	440b      	add	r3, r1
 8016d7e:	b2d2      	uxtb	r2, r2
 8016d80:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	68da      	ldr	r2, [r3, #12]
 8016d86:	7ffb      	ldrb	r3, [r7, #31]
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	4413      	add	r3, r2
 8016d8c:	885b      	ldrh	r3, [r3, #2]
 8016d8e:	0a1b      	lsrs	r3, r3, #8
 8016d90:	b29a      	uxth	r2, r3
 8016d92:	8bbb      	ldrh	r3, [r7, #28]
 8016d94:	1c59      	adds	r1, r3, #1
 8016d96:	83b9      	strh	r1, [r7, #28]
 8016d98:	4619      	mov	r1, r3
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	440b      	add	r3, r1
 8016d9e:	b2d2      	uxtb	r2, r2
 8016da0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8016da2:	7ffb      	ldrb	r3, [r7, #31]
 8016da4:	3301      	adds	r3, #1
 8016da6:	77fb      	strb	r3, [r7, #31]
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	7a1b      	ldrb	r3, [r3, #8]
 8016dac:	7ffa      	ldrb	r2, [r7, #31]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d3b4      	bcc.n	8016d1c <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	7a1b      	ldrb	r3, [r3, #8]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	011b      	lsls	r3, r3, #4
 8016dba:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 8016dbc:	8bbb      	ldrh	r3, [r7, #28]
 8016dbe:	687a      	ldr	r2, [r7, #4]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	8b3a      	ldrh	r2, [r7, #24]
 8016dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f004 fb74 	bl	801b4b4 <memcpy>
    msgIt += auxLen;
 8016dcc:	8bba      	ldrh	r2, [r7, #28]
 8016dce:	8b3b      	ldrh	r3, [r7, #24]
 8016dd0:	4413      	add	r3, r2
 8016dd2:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8016dd4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016dd6:	8bb9      	ldrh	r1, [r7, #28]
 8016dd8:	4b17      	ldr	r3, [pc, #92]	; (8016e38 <rfalNfcfPollerUpdate+0x240>)
 8016dda:	9302      	str	r3, [sp, #8]
 8016ddc:	2300      	movs	r3, #0
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	f107 0312 	add.w	r3, r7, #18
 8016de4:	9300      	str	r3, [sp, #0]
 8016de6:	4613      	mov	r3, r2
 8016de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f001 fc58 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8016df0:	4603      	mov	r3, r0
 8016df2:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 8016df4:	8b7b      	ldrh	r3, [r7, #26]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d118      	bne.n	8016e2c <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8016dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8016e00:	8a7b      	ldrh	r3, [r7, #18]
 8016e02:	2b0a      	cmp	r3, #10
 8016e04:	d802      	bhi.n	8016e0c <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8016e06:	230b      	movs	r3, #11
 8016e08:	837b      	strh	r3, [r7, #26]
 8016e0a:	e00f      	b.n	8016e2c <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8016e0c:	697b      	ldr	r3, [r7, #20]
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	2b09      	cmp	r3, #9
 8016e12:	d109      	bne.n	8016e28 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	3309      	adds	r3, #9
 8016e18:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d104      	bne.n	8016e28 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	330a      	adds	r3, #10
 8016e22:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d001      	beq.n	8016e2c <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8016e28:	2305      	movs	r3, #5
 8016e2a:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 8016e2c:	8b7b      	ldrh	r3, [r7, #26]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3720      	adds	r7, #32
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	02000010 	.word	0x02000010

08016e3c <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b083      	sub	sp, #12
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	4603      	mov	r3, r0
 8016e44:	71fb      	strb	r3, [r7, #7]
    switch(err)
 8016e46:	79fb      	ldrb	r3, [r7, #7]
 8016e48:	3b01      	subs	r3, #1
 8016e4a:	2b12      	cmp	r3, #18
 8016e4c:	d82e      	bhi.n	8016eac <rfalNfcvParseError+0x70>
 8016e4e:	a201      	add	r2, pc, #4	; (adr r2, 8016e54 <rfalNfcvParseError+0x18>)
 8016e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e54:	08016ea1 	.word	0x08016ea1
 8016e58:	08016ea5 	.word	0x08016ea5
 8016e5c:	08016ea1 	.word	0x08016ea1
 8016e60:	08016ead 	.word	0x08016ead
 8016e64:	08016ead 	.word	0x08016ead
 8016e68:	08016ead 	.word	0x08016ead
 8016e6c:	08016ead 	.word	0x08016ead
 8016e70:	08016ead 	.word	0x08016ead
 8016e74:	08016ead 	.word	0x08016ead
 8016e78:	08016ead 	.word	0x08016ead
 8016e7c:	08016ead 	.word	0x08016ead
 8016e80:	08016ead 	.word	0x08016ead
 8016e84:	08016ead 	.word	0x08016ead
 8016e88:	08016ead 	.word	0x08016ead
 8016e8c:	08016ead 	.word	0x08016ead
 8016e90:	08016ead 	.word	0x08016ead
 8016e94:	08016ead 	.word	0x08016ead
 8016e98:	08016ead 	.word	0x08016ead
 8016e9c:	08016ea9 	.word	0x08016ea9
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 8016ea0:	2318      	movs	r3, #24
 8016ea2:	e004      	b.n	8016eae <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 8016ea4:	230b      	movs	r3, #11
 8016ea6:	e002      	b.n	8016eae <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 8016ea8:	2319      	movs	r3, #25
 8016eaa:	e000      	b.n	8016eae <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 8016eac:	2305      	movs	r3, #5
    }
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	370c      	adds	r7, #12
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bc80      	pop	{r7}
 8016eb6:	4770      	bx	lr

08016eb8 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8016ebe:	22ec      	movs	r2, #236	; 0xec
 8016ec0:	21ec      	movs	r1, #236	; 0xec
 8016ec2:	2007      	movs	r0, #7
 8016ec4:	f000 fdbc 	bl	8017a40 <rfalSetMode>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	80fb      	strh	r3, [r7, #6]
 8016ecc:	88fb      	ldrh	r3, [r7, #6]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d001      	beq.n	8016ed6 <rfalNfcvPollerInitialize+0x1e>
 8016ed2:	88fb      	ldrh	r3, [r7, #6]
 8016ed4:	e00e      	b.n	8016ef4 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8016ed6:	2001      	movs	r0, #1
 8016ed8:	f001 f94e 	bl	8018178 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8016edc:	4807      	ldr	r0, [pc, #28]	; (8016efc <rfalNfcvPollerInitialize+0x44>)
 8016ede:	f001 f983 	bl	80181e8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 8016ee2:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8016ee6:	f001 f96b 	bl	80181c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8016eea:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8016eee:	f001 f953 	bl	8018198 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8016ef2:	2300      	movs	r3, #0
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	000108d8 	.word	0x000108d8

08016f00 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af02      	add	r7, sp, #8
 8016f06:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8016f08:	2300      	movs	r3, #0
 8016f0a:	9300      	str	r3, [sp, #0]
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	2100      	movs	r1, #0
 8016f12:	2020      	movs	r0, #32
 8016f14:	f000 f815 	bl	8016f42 <rfalNfcvPollerInventory>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8016f1c:	89fb      	ldrh	r3, [r7, #14]
 8016f1e:	2b1d      	cmp	r3, #29
 8016f20:	d008      	beq.n	8016f34 <rfalNfcvPollerCheckPresence+0x34>
 8016f22:	89fb      	ldrh	r3, [r7, #14]
 8016f24:	2b15      	cmp	r3, #21
 8016f26:	d005      	beq.n	8016f34 <rfalNfcvPollerCheckPresence+0x34>
 8016f28:	89fb      	ldrh	r3, [r7, #14]
 8016f2a:	2b09      	cmp	r3, #9
 8016f2c:	d002      	beq.n	8016f34 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 8016f2e:	89fb      	ldrh	r3, [r7, #14]
 8016f30:	2b0b      	cmp	r3, #11
 8016f32:	d101      	bne.n	8016f38 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8016f34:	2300      	movs	r3, #0
 8016f36:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8016f38:	89fb      	ldrh	r3, [r7, #14]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}

08016f42 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8016f42:	b580      	push	{r7, lr}
 8016f44:	b08c      	sub	sp, #48	; 0x30
 8016f46:	af02      	add	r7, sp, #8
 8016f48:	60ba      	str	r2, [r7, #8]
 8016f4a:	607b      	str	r3, [r7, #4]
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	73fb      	strb	r3, [r7, #15]
 8016f50:	460b      	mov	r3, r1
 8016f52:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d102      	bne.n	8016f60 <rfalNfcvPollerInventory+0x1e>
 8016f5a:	7bbb      	ldrb	r3, [r7, #14]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d102      	bne.n	8016f66 <rfalNfcvPollerInventory+0x24>
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d101      	bne.n	8016f6a <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 8016f66:	2307      	movs	r3, #7
 8016f68:	e04a      	b.n	8017000 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8016f6a:	7bfb      	ldrb	r3, [r7, #15]
 8016f6c:	f043 0306 	orr.w	r3, r3, #6
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 8016f74:	2301      	movs	r3, #1
 8016f76:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8016f78:	7bbb      	ldrb	r3, [r7, #14]
 8016f7a:	7bfa      	ldrb	r2, [r7, #15]
 8016f7c:	2a20      	cmp	r2, #32
 8016f7e:	d101      	bne.n	8016f84 <rfalNfcvPollerInventory+0x42>
 8016f80:	2240      	movs	r2, #64	; 0x40
 8016f82:	e000      	b.n	8016f86 <rfalNfcvPollerInventory+0x44>
 8016f84:	223c      	movs	r2, #60	; 0x3c
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d806      	bhi.n	8016f98 <rfalNfcvPollerInventory+0x56>
 8016f8a:	7bfb      	ldrb	r3, [r7, #15]
 8016f8c:	2b20      	cmp	r3, #32
 8016f8e:	d101      	bne.n	8016f94 <rfalNfcvPollerInventory+0x52>
 8016f90:	2340      	movs	r3, #64	; 0x40
 8016f92:	e002      	b.n	8016f9a <rfalNfcvPollerInventory+0x58>
 8016f94:	233c      	movs	r3, #60	; 0x3c
 8016f96:	e000      	b.n	8016f9a <rfalNfcvPollerInventory+0x58>
 8016f98:	7bbb      	ldrb	r3, [r7, #14]
 8016f9a:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 8016f9c:	7ebb      	ldrb	r3, [r7, #26]
 8016f9e:	3307      	adds	r3, #7
 8016fa0:	08db      	lsrs	r3, r3, #3
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d00b      	beq.n	8016fc0 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 8016fa8:	7ebb      	ldrb	r3, [r7, #26]
 8016faa:	3307      	adds	r3, #7
 8016fac:	08db      	lsrs	r3, r3, #3
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	f107 0318 	add.w	r3, r7, #24
 8016fb6:	3303      	adds	r3, #3
 8016fb8:	68b9      	ldr	r1, [r7, #8]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f004 fa7a 	bl	801b4b4 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8016fc0:	7ebb      	ldrb	r3, [r7, #26]
 8016fc2:	3307      	adds	r3, #7
 8016fc4:	08db      	lsrs	r3, r3, #3
 8016fc6:	b2db      	uxtb	r3, r3
 8016fc8:	3303      	adds	r3, #3
 8016fca:	b2d9      	uxtb	r1, r3
 8016fcc:	f107 0018 	add.w	r0, r7, #24
 8016fd0:	f107 0316 	add.w	r3, r7, #22
 8016fd4:	9300      	str	r3, [sp, #0]
 8016fd6:	230c      	movs	r3, #12
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	f002 fcf9 	bl	80199d0 <rfalISO15693TransceiveAnticollisionFrame>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 8016fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 8016fe8:	8afa      	ldrh	r2, [r7, #22]
 8016fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fec:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 8016fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d104      	bne.n	8016ffe <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8016ff4:	8afb      	ldrh	r3, [r7, #22]
 8016ff6:	2b60      	cmp	r3, #96	; 0x60
 8016ff8:	d001      	beq.n	8016ffe <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 8016ffa:	230b      	movs	r3, #11
 8016ffc:	e000      	b.n	8017000 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 8016ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8017000:	4618      	mov	r0, r3
 8017002:	3728      	adds	r7, #40	; 0x28
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b0ae      	sub	sp, #184	; 0xb8
 801700c:	af02      	add	r7, sp, #8
 801700e:	60ba      	str	r2, [r7, #8]
 8017010:	607b      	str	r3, [r7, #4]
 8017012:	4603      	mov	r3, r0
 8017014:	73fb      	strb	r3, [r7, #15]
 8017016:	460b      	mov	r3, r1
 8017018:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d002      	beq.n	8017026 <rfalNfcvPollerCollisionResolution+0x1e>
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d101      	bne.n	801702a <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8017026:	2307      	movs	r3, #7
 8017028:	e186      	b.n	8017338 <rfalNfcvPollerCollisionResolution+0x330>
    }

    /* Initialize parameters */
    *devCnt = 0;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2200      	movs	r2, #0
 801702e:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 8017030:	2300      	movs	r3, #0
 8017032:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8017036:	2300      	movs	r3, #0
 8017038:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 801703c:	2300      	movs	r3, #0
 801703e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8017042:	f107 0314 	add.w	r3, r7, #20
 8017046:	2290      	movs	r2, #144	; 0x90
 8017048:	2100      	movs	r1, #0
 801704a:	4618      	mov	r0, r3
 801704c:	f004 fa5a 	bl	801b504 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 8017050:	7bbb      	ldrb	r3, [r7, #14]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00a      	beq.n	801706c <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8017056:	7bba      	ldrb	r2, [r7, #14]
 8017058:	4613      	mov	r3, r2
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	4413      	add	r3, r2
 801705e:	009b      	lsls	r3, r3, #2
 8017060:	4413      	add	r3, r2
 8017062:	461a      	mov	r2, r3
 8017064:	2100      	movs	r1, #0
 8017066:	68b8      	ldr	r0, [r7, #8]
 8017068:	f004 fa4c 	bl	801b504 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 801706c:	7bfb      	ldrb	r3, [r7, #15]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d12b      	bne.n	80170ca <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	2200      	movs	r2, #0
 8017076:	9200      	str	r2, [sp, #0]
 8017078:	2200      	movs	r2, #0
 801707a:	2100      	movs	r1, #0
 801707c:	2020      	movs	r0, #32
 801707e:	f7ff ff60 	bl	8016f42 <rfalNfcvPollerInventory>
 8017082:	4603      	mov	r3, r0
 8017084:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 8017088:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801708c:	2b04      	cmp	r3, #4
 801708e:	d101      	bne.n	8017094 <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 8017090:	2300      	movs	r3, #0
 8017092:	e151      	b.n	8017338 <rfalNfcvPollerCollisionResolution+0x330>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 8017094:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017098:	2b00      	cmp	r3, #0
 801709a:	d107      	bne.n	80170ac <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	3301      	adds	r3, #1
 80170a2:	b2da      	uxtb	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 80170a8:	2300      	movs	r3, #0
 80170aa:	e145      	b.n	8017338 <rfalNfcvPollerCollisionResolution+0x330>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 80170ac:	2301      	movs	r3, #1
 80170ae:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 80170b2:	2301      	movs	r3, #1
 80170b4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 80170b8:	7bbb      	ldrb	r3, [r7, #14]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d101      	bne.n	80170c2 <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 80170be:	231d      	movs	r3, #29
 80170c0:	e13a      	b.n	8017338 <rfalNfcvPollerCollisionResolution+0x330>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80170c2:	2004      	movs	r0, #4
 80170c4:	f7ed fb72 	bl	80047ac <HAL_Delay>
 80170c8:	e005      	b.n	80170d6 <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 80170ca:	2301      	movs	r3, #1
 80170cc:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 80170d0:	2301      	movs	r3, #1
 80170d2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 80170d6:	2300      	movs	r3, #0
 80170d8:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 80170dc:	2300      	movs	r3, #0
 80170de:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 80170e2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d129      	bne.n	801713e <rfalNfcvPollerCollisionResolution+0x136>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 80170ea:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80170ee:	4613      	mov	r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	4413      	add	r3, r2
 80170f4:	33b0      	adds	r3, #176	; 0xb0
 80170f6:	443b      	add	r3, r7
 80170f8:	3b9c      	subs	r3, #156	; 0x9c
 80170fa:	7818      	ldrb	r0, [r3, #0]
 80170fc:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017100:	f107 0114 	add.w	r1, r7, #20
 8017104:	4613      	mov	r3, r2
 8017106:	00db      	lsls	r3, r3, #3
 8017108:	4413      	add	r3, r2
 801710a:	440b      	add	r3, r1
 801710c:	1c59      	adds	r1, r3, #1
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	461a      	mov	r2, r3
 8017114:	4613      	mov	r3, r2
 8017116:	005b      	lsls	r3, r3, #1
 8017118:	4413      	add	r3, r2
 801711a:	009b      	lsls	r3, r3, #2
 801711c:	4413      	add	r3, r2
 801711e:	68ba      	ldr	r2, [r7, #8]
 8017120:	4413      	add	r3, r2
 8017122:	461a      	mov	r2, r3
 8017124:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	4613      	mov	r3, r2
 801712c:	460a      	mov	r2, r1
 801712e:	4601      	mov	r1, r0
 8017130:	2000      	movs	r0, #0
 8017132:	f7ff ff06 	bl	8016f42 <rfalNfcvPollerInventory>
 8017136:	4603      	mov	r3, r0
 8017138:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801713c:	e013      	b.n	8017166 <rfalNfcvPollerCollisionResolution+0x15e>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	461a      	mov	r2, r3
 8017144:	4613      	mov	r3, r2
 8017146:	005b      	lsls	r3, r3, #1
 8017148:	4413      	add	r3, r2
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	4413      	add	r3, r2
 801714e:	68ba      	ldr	r2, [r7, #8]
 8017150:	4413      	add	r3, r2
 8017152:	4618      	mov	r0, r3
 8017154:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8017158:	461a      	mov	r2, r3
 801715a:	210c      	movs	r1, #12
 801715c:	f002 fc98 	bl	8019a90 <rfalISO15693TransceiveEOFAnticollision>
 8017160:	4603      	mov	r3, r0
 8017162:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 8017166:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801716a:	3301      	adds	r3, #1
 801716c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 8017170:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017174:	2b04      	cmp	r3, #4
 8017176:	f000 80c3 	beq.w	8017300 <rfalNfcvPollerCollisionResolution+0x2f8>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 801717a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801717e:	2b5f      	cmp	r3, #95	; 0x5f
 8017180:	d802      	bhi.n	8017188 <rfalNfcvPollerCollisionResolution+0x180>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8017182:	2004      	movs	r0, #4
 8017184:	f7ed fb12 	bl	80047ac <HAL_Delay>
                }

                if( ret == ERR_NONE )
 8017188:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801718c:	2b00      	cmp	r3, #0
 801718e:	d10b      	bne.n	80171a8 <rfalNfcvPollerCollisionResolution+0x1a0>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8017190:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8017194:	2b60      	cmp	r3, #96	; 0x60
 8017196:	f040 80b6 	bne.w	8017306 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	3301      	adds	r3, #1
 80171a0:	b2da      	uxtb	r2, r3
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	701a      	strb	r2, [r3, #0]
 80171a6:	e0ae      	b.n	8017306 <rfalNfcvPollerCollisionResolution+0x2fe>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 80171a8:	2301      	movs	r3, #1
 80171aa:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 80171ae:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80171b2:	2b0f      	cmp	r3, #15
 80171b4:	f200 80a7 	bhi.w	8017306 <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 80171b8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80171bc:	f107 0114 	add.w	r1, r7, #20
 80171c0:	4613      	mov	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	4413      	add	r3, r2
 80171c6:	440b      	add	r3, r1
 80171c8:	1c58      	adds	r0, r3, #1
 80171ca:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80171ce:	f107 0114 	add.w	r1, r7, #20
 80171d2:	4613      	mov	r3, r2
 80171d4:	00db      	lsls	r3, r3, #3
 80171d6:	4413      	add	r3, r2
 80171d8:	440b      	add	r3, r1
 80171da:	3301      	adds	r3, #1
 80171dc:	2208      	movs	r2, #8
 80171de:	4619      	mov	r1, r3
 80171e0:	f004 f968 	bl	801b4b4 <memcpy>
                        colPos = colFound[colIt].maskLen;
 80171e4:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80171e8:	4613      	mov	r3, r2
 80171ea:	00db      	lsls	r3, r3, #3
 80171ec:	4413      	add	r3, r2
 80171ee:	33b0      	adds	r3, #176	; 0xb0
 80171f0:	443b      	add	r3, r7
 80171f2:	3b9c      	subs	r3, #156	; 0x9c
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 80171fa:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80171fe:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8017202:	08db      	lsrs	r3, r3, #3
 8017204:	b2d8      	uxtb	r0, r3
 8017206:	4601      	mov	r1, r0
 8017208:	4613      	mov	r3, r2
 801720a:	00db      	lsls	r3, r3, #3
 801720c:	4413      	add	r3, r2
 801720e:	33b0      	adds	r3, #176	; 0xb0
 8017210:	443b      	add	r3, r7
 8017212:	440b      	add	r3, r1
 8017214:	3b9b      	subs	r3, #155	; 0x9b
 8017216:	7819      	ldrb	r1, [r3, #0]
 8017218:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801721c:	f003 0307 	and.w	r3, r3, #7
 8017220:	2201      	movs	r2, #1
 8017222:	fa02 f303 	lsl.w	r3, r2, r3
 8017226:	b2db      	uxtb	r3, r3
 8017228:	3b01      	subs	r3, #1
 801722a:	b2db      	uxtb	r3, r3
 801722c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8017230:	400b      	ands	r3, r1
 8017232:	b2d9      	uxtb	r1, r3
 8017234:	4613      	mov	r3, r2
 8017236:	00db      	lsls	r3, r3, #3
 8017238:	4413      	add	r3, r2
 801723a:	33b0      	adds	r3, #176	; 0xb0
 801723c:	443b      	add	r3, r7
 801723e:	4403      	add	r3, r0
 8017240:	3b9b      	subs	r3, #155	; 0x9b
 8017242:	460a      	mov	r2, r1
 8017244:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8017246:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 801724a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801724e:	08db      	lsrs	r3, r3, #3
 8017250:	b2d8      	uxtb	r0, r3
 8017252:	4601      	mov	r1, r0
 8017254:	4613      	mov	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	4413      	add	r3, r2
 801725a:	33b0      	adds	r3, #176	; 0xb0
 801725c:	443b      	add	r3, r7
 801725e:	440b      	add	r3, r1
 8017260:	3b9b      	subs	r3, #155	; 0x9b
 8017262:	7819      	ldrb	r1, [r3, #0]
 8017264:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8017268:	1e5a      	subs	r2, r3, #1
 801726a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801726e:	f003 0307 	and.w	r3, r3, #7
 8017272:	fa02 f303 	lsl.w	r3, r2, r3
 8017276:	b2db      	uxtb	r3, r3
 8017278:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 801727c:	430b      	orrs	r3, r1
 801727e:	b2d9      	uxtb	r1, r3
 8017280:	4613      	mov	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	4413      	add	r3, r2
 8017286:	33b0      	adds	r3, #176	; 0xb0
 8017288:	443b      	add	r3, r7
 801728a:	4403      	add	r3, r0
 801728c:	3b9b      	subs	r3, #155	; 0x9b
 801728e:	460a      	mov	r2, r1
 8017290:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 8017292:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8017296:	1e5a      	subs	r2, r3, #1
 8017298:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801729c:	f003 0307 	and.w	r3, r3, #7
 80172a0:	f1c3 0308 	rsb	r3, r3, #8
 80172a4:	fa22 f003 	lsr.w	r0, r2, r3
 80172a8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80172ac:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80172b0:	08db      	lsrs	r3, r3, #3
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	1c59      	adds	r1, r3, #1
 80172b6:	b2c0      	uxtb	r0, r0
 80172b8:	4613      	mov	r3, r2
 80172ba:	00db      	lsls	r3, r3, #3
 80172bc:	4413      	add	r3, r2
 80172be:	33b0      	adds	r3, #176	; 0xb0
 80172c0:	443b      	add	r3, r7
 80172c2:	440b      	add	r3, r1
 80172c4:	3b9b      	subs	r3, #155	; 0x9b
 80172c6:	4602      	mov	r2, r0
 80172c8:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 80172ca:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80172ce:	4613      	mov	r3, r2
 80172d0:	00db      	lsls	r3, r3, #3
 80172d2:	4413      	add	r3, r2
 80172d4:	33b0      	adds	r3, #176	; 0xb0
 80172d6:	443b      	add	r3, r7
 80172d8:	3b9c      	subs	r3, #156	; 0x9c
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80172e0:	3304      	adds	r3, #4
 80172e2:	b2d9      	uxtb	r1, r3
 80172e4:	4613      	mov	r3, r2
 80172e6:	00db      	lsls	r3, r3, #3
 80172e8:	4413      	add	r3, r2
 80172ea:	33b0      	adds	r3, #176	; 0xb0
 80172ec:	443b      	add	r3, r7
 80172ee:	3b9c      	subs	r3, #156	; 0x9c
 80172f0:	460a      	mov	r2, r1
 80172f2:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 80172f4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80172f8:	3301      	adds	r3, #1
 80172fa:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80172fe:	e002      	b.n	8017306 <rfalNfcvPollerCollisionResolution+0x2fe>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8017300:	2004      	movs	r0, #4
 8017302:	f7ed fa53 	bl	80047ac <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	7bba      	ldrb	r2, [r7, #14]
 801730c:	429a      	cmp	r2, r3
 801730e:	d801      	bhi.n	8017314 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                return ERR_NONE;
 8017310:	2300      	movs	r3, #0
 8017312:	e011      	b.n	8017338 <rfalNfcvPollerCollisionResolution+0x330>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8017314:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8017318:	2b0f      	cmp	r3, #15
 801731a:	f67f aee2 	bls.w	80170e2 <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 801731e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8017322:	3301      	adds	r3, #1
 8017324:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 8017328:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801732c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8017330:	429a      	cmp	r2, r3
 8017332:	f4ff aed0 	bcc.w	80170d6 <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 8017336:	2300      	movs	r3, #0
}
 8017338:	4618      	mov	r0, r3
 801733a:	37b0      	adds	r7, #176	; 0xb0
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}

08017340 <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b094      	sub	sp, #80	; 0x50
 8017344:	af06      	add	r7, sp, #24
 8017346:	4603      	mov	r3, r0
 8017348:	6039      	str	r1, [r7, #0]
 801734a:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d101      	bne.n	8017356 <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 8017352:	2307      	movs	r3, #7
 8017354:	e012      	b.n	801737c <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8017356:	79f9      	ldrb	r1, [r7, #7]
 8017358:	f107 0336 	add.w	r3, r7, #54	; 0x36
 801735c:	9304      	str	r3, [sp, #16]
 801735e:	232a      	movs	r3, #42	; 0x2a
 8017360:	9303      	str	r3, [sp, #12]
 8017362:	f107 030c 	add.w	r3, r7, #12
 8017366:	9302      	str	r3, [sp, #8]
 8017368:	2300      	movs	r3, #0
 801736a:	9301      	str	r3, [sp, #4]
 801736c:	2300      	movs	r3, #0
 801736e:	9300      	str	r3, [sp, #0]
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	2200      	movs	r2, #0
 8017374:	2025      	movs	r0, #37	; 0x25
 8017376:	f000 f9c5 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801737a:	4603      	mov	r3, r0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3738      	adds	r7, #56	; 0x38
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b08c      	sub	sp, #48	; 0x30
 8017388:	af06      	add	r7, sp, #24
 801738a:	60b9      	str	r1, [r7, #8]
 801738c:	607b      	str	r3, [r7, #4]
 801738e:	4603      	mov	r3, r0
 8017390:	73fb      	strb	r3, [r7, #15]
 8017392:	4613      	mov	r3, r2
 8017394:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 8017396:	7bbb      	ldrb	r3, [r7, #14]
 8017398:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 801739a:	7bf9      	ldrb	r1, [r7, #15]
 801739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801739e:	9304      	str	r3, [sp, #16]
 80173a0:	8c3b      	ldrh	r3, [r7, #32]
 80173a2:	9303      	str	r3, [sp, #12]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	9302      	str	r3, [sp, #8]
 80173a8:	2301      	movs	r3, #1
 80173aa:	9301      	str	r3, [sp, #4]
 80173ac:	f107 0317 	add.w	r3, r7, #23
 80173b0:	9300      	str	r3, [sp, #0]
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	2200      	movs	r2, #0
 80173b6:	2020      	movs	r0, #32
 80173b8:	f000 f9a4 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 80173bc:	4603      	mov	r3, r0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3718      	adds	r7, #24
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}

080173c6 <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 80173c6:	b580      	push	{r7, lr}
 80173c8:	b09e      	sub	sp, #120	; 0x78
 80173ca:	af06      	add	r7, sp, #24
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607b      	str	r3, [r7, #4]
 80173d0:	4603      	mov	r3, r0
 80173d2:	73fb      	strb	r3, [r7, #15]
 80173d4:	4613      	mov	r3, r2
 80173d6:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 80173d8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d006      	beq.n	80173ee <rfalNfcvPollerWriteSingleBlock+0x28>
 80173e0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80173e4:	2b20      	cmp	r3, #32
 80173e6:	d802      	bhi.n	80173ee <rfalNfcvPollerWriteSingleBlock+0x28>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d101      	bne.n	80173f2 <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 80173ee:	2307      	movs	r3, #7
 80173f0:	e034      	b.n	801745c <rfalNfcvPollerWriteSingleBlock+0x96>
    }
    
    dataLen = 0U;
 80173f2:	2300      	movs	r3, #0
 80173f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 80173f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173fc:	1c5a      	adds	r2, r3, #1
 80173fe:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8017402:	3360      	adds	r3, #96	; 0x60
 8017404:	443b      	add	r3, r7
 8017406:	7bba      	ldrb	r2, [r7, #14]
 8017408:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 801740c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017410:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017414:	4413      	add	r3, r2
 8017416:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801741a:	6879      	ldr	r1, [r7, #4]
 801741c:	4618      	mov	r0, r3
 801741e:	f004 f849 	bl	801b4b4 <memcpy>
    dataLen += blockLen;
 8017422:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8017426:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801742a:	4413      	add	r3, r2
 801742c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8017430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017434:	b29b      	uxth	r3, r3
 8017436:	7bf9      	ldrb	r1, [r7, #15]
 8017438:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801743c:	9204      	str	r2, [sp, #16]
 801743e:	222a      	movs	r2, #42	; 0x2a
 8017440:	9203      	str	r2, [sp, #12]
 8017442:	f107 0210 	add.w	r2, r7, #16
 8017446:	9202      	str	r2, [sp, #8]
 8017448:	9301      	str	r3, [sp, #4]
 801744a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801744e:	9300      	str	r3, [sp, #0]
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	2200      	movs	r2, #0
 8017454:	2021      	movs	r0, #33	; 0x21
 8017456:	f000 f955 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801745a:	4603      	mov	r3, r0
}
 801745c:	4618      	mov	r0, r3
 801745e:	3760      	adds	r7, #96	; 0x60
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b08a      	sub	sp, #40	; 0x28
 8017468:	af06      	add	r7, sp, #24
 801746a:	6039      	str	r1, [r7, #0]
 801746c:	4611      	mov	r1, r2
 801746e:	461a      	mov	r2, r3
 8017470:	4603      	mov	r3, r0
 8017472:	71fb      	strb	r3, [r7, #7]
 8017474:	460b      	mov	r3, r1
 8017476:	71bb      	strb	r3, [r7, #6]
 8017478:	4613      	mov	r3, r2
 801747a:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 801747c:	2300      	movs	r3, #0
 801747e:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 8017480:	7bfb      	ldrb	r3, [r7, #15]
 8017482:	1c5a      	adds	r2, r3, #1
 8017484:	73fa      	strb	r2, [r7, #15]
 8017486:	3310      	adds	r3, #16
 8017488:	443b      	add	r3, r7
 801748a:	79ba      	ldrb	r2, [r7, #6]
 801748c:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 8017490:	7bfb      	ldrb	r3, [r7, #15]
 8017492:	1c5a      	adds	r2, r3, #1
 8017494:	73fa      	strb	r2, [r7, #15]
 8017496:	3310      	adds	r3, #16
 8017498:	443b      	add	r3, r7
 801749a:	797a      	ldrb	r2, [r7, #5]
 801749c:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 80174a0:	7bfb      	ldrb	r3, [r7, #15]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	79f9      	ldrb	r1, [r7, #7]
 80174a6:	6a3a      	ldr	r2, [r7, #32]
 80174a8:	9204      	str	r2, [sp, #16]
 80174aa:	8bba      	ldrh	r2, [r7, #28]
 80174ac:	9203      	str	r2, [sp, #12]
 80174ae:	69ba      	ldr	r2, [r7, #24]
 80174b0:	9202      	str	r2, [sp, #8]
 80174b2:	9301      	str	r3, [sp, #4]
 80174b4:	f107 030c 	add.w	r3, r7, #12
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	2200      	movs	r2, #0
 80174be:	2023      	movs	r0, #35	; 0x23
 80174c0:	f000 f920 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 80174c4:	4603      	mov	r3, r0
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3710      	adds	r7, #16
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b08c      	sub	sp, #48	; 0x30
 80174d2:	af06      	add	r7, sp, #24
 80174d4:	60b9      	str	r1, [r7, #8]
 80174d6:	607b      	str	r3, [r7, #4]
 80174d8:	4603      	mov	r3, r0
 80174da:	73fb      	strb	r3, [r7, #15]
 80174dc:	4613      	mov	r3, r2
 80174de:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 80174e0:	2300      	movs	r3, #0
 80174e2:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 80174e4:	7dfb      	ldrb	r3, [r7, #23]
 80174e6:	1c5a      	adds	r2, r3, #1
 80174e8:	75fa      	strb	r2, [r7, #23]
 80174ea:	89ba      	ldrh	r2, [r7, #12]
 80174ec:	b2d2      	uxtb	r2, r2
 80174ee:	3318      	adds	r3, #24
 80174f0:	443b      	add	r3, r7
 80174f2:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 80174f6:	89bb      	ldrh	r3, [r7, #12]
 80174f8:	0a1b      	lsrs	r3, r3, #8
 80174fa:	b29a      	uxth	r2, r3
 80174fc:	7dfb      	ldrb	r3, [r7, #23]
 80174fe:	1c59      	adds	r1, r3, #1
 8017500:	75f9      	strb	r1, [r7, #23]
 8017502:	b2d2      	uxtb	r2, r2
 8017504:	3318      	adds	r3, #24
 8017506:	443b      	add	r3, r7
 8017508:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801750c:	7dfb      	ldrb	r3, [r7, #23]
 801750e:	b29b      	uxth	r3, r3
 8017510:	7bf9      	ldrb	r1, [r7, #15]
 8017512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017514:	9204      	str	r2, [sp, #16]
 8017516:	8c3a      	ldrh	r2, [r7, #32]
 8017518:	9203      	str	r2, [sp, #12]
 801751a:	687a      	ldr	r2, [r7, #4]
 801751c:	9202      	str	r2, [sp, #8]
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	f107 0314 	add.w	r3, r7, #20
 8017524:	9300      	str	r3, [sp, #0]
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	2200      	movs	r2, #0
 801752a:	2030      	movs	r0, #48	; 0x30
 801752c:	f000 f8ea 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 8017530:	4603      	mov	r3, r0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3718      	adds	r7, #24
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b09e      	sub	sp, #120	; 0x78
 801753e:	af06      	add	r7, sp, #24
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607b      	str	r3, [r7, #4]
 8017544:	4603      	mov	r3, r0
 8017546:	73fb      	strb	r3, [r7, #15]
 8017548:	4613      	mov	r3, r2
 801754a:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 801754c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017550:	2b00      	cmp	r3, #0
 8017552:	d003      	beq.n	801755c <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 8017554:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017558:	2b20      	cmp	r3, #32
 801755a:	d901      	bls.n	8017560 <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 801755c:	2307      	movs	r3, #7
 801755e:	e042      	b.n	80175e6 <rfalNfcvPollerExtendedWriteSingleBlock+0xac>
    }
    
    dataLen = 0U;
 8017560:	2300      	movs	r3, #0
 8017562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8017566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801756a:	1c5a      	adds	r2, r3, #1
 801756c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8017570:	89ba      	ldrh	r2, [r7, #12]
 8017572:	b2d2      	uxtb	r2, r2
 8017574:	3360      	adds	r3, #96	; 0x60
 8017576:	443b      	add	r3, r7
 8017578:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 801757c:	89bb      	ldrh	r3, [r7, #12]
 801757e:	0a1b      	lsrs	r3, r3, #8
 8017580:	b29a      	uxth	r2, r3
 8017582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017586:	1c59      	adds	r1, r3, #1
 8017588:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 801758c:	b2d2      	uxtb	r2, r2
 801758e:	3360      	adds	r3, #96	; 0x60
 8017590:	443b      	add	r3, r7
 8017592:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 8017596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801759a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801759e:	4413      	add	r3, r2
 80175a0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80175a4:	6879      	ldr	r1, [r7, #4]
 80175a6:	4618      	mov	r0, r3
 80175a8:	f003 ff84 	bl	801b4b4 <memcpy>
    dataLen += blockLen;
 80175ac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80175b0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80175b4:	4413      	add	r3, r2
 80175b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80175ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80175be:	b29b      	uxth	r3, r3
 80175c0:	7bf9      	ldrb	r1, [r7, #15]
 80175c2:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80175c6:	9204      	str	r2, [sp, #16]
 80175c8:	222a      	movs	r2, #42	; 0x2a
 80175ca:	9203      	str	r2, [sp, #12]
 80175cc:	f107 0210 	add.w	r2, r7, #16
 80175d0:	9202      	str	r2, [sp, #8]
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80175d8:	9300      	str	r3, [sp, #0]
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	2200      	movs	r2, #0
 80175de:	2031      	movs	r0, #49	; 0x31
 80175e0:	f000 f890 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 80175e4:	4603      	mov	r3, r0
}
 80175e6:	4618      	mov	r0, r3
 80175e8:	3760      	adds	r7, #96	; 0x60
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bd80      	pop	{r7, pc}

080175ee <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80175ee:	b580      	push	{r7, lr}
 80175f0:	b08c      	sub	sp, #48	; 0x30
 80175f2:	af06      	add	r7, sp, #24
 80175f4:	60b9      	str	r1, [r7, #8]
 80175f6:	4611      	mov	r1, r2
 80175f8:	461a      	mov	r2, r3
 80175fa:	4603      	mov	r3, r0
 80175fc:	73fb      	strb	r3, [r7, #15]
 80175fe:	460b      	mov	r3, r1
 8017600:	81bb      	strh	r3, [r7, #12]
 8017602:	4613      	mov	r3, r2
 8017604:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 8017606:	2300      	movs	r3, #0
 8017608:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 801760a:	7dfb      	ldrb	r3, [r7, #23]
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	75fa      	strb	r2, [r7, #23]
 8017610:	89ba      	ldrh	r2, [r7, #12]
 8017612:	b2d2      	uxtb	r2, r2
 8017614:	3318      	adds	r3, #24
 8017616:	443b      	add	r3, r7
 8017618:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 801761c:	89bb      	ldrh	r3, [r7, #12]
 801761e:	0a1b      	lsrs	r3, r3, #8
 8017620:	b29a      	uxth	r2, r3
 8017622:	7dfb      	ldrb	r3, [r7, #23]
 8017624:	1c59      	adds	r1, r3, #1
 8017626:	75f9      	strb	r1, [r7, #23]
 8017628:	b2d2      	uxtb	r2, r2
 801762a:	3318      	adds	r3, #24
 801762c:	443b      	add	r3, r7
 801762e:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 8017632:	7dfb      	ldrb	r3, [r7, #23]
 8017634:	1c5a      	adds	r2, r3, #1
 8017636:	75fa      	strb	r2, [r7, #23]
 8017638:	88fa      	ldrh	r2, [r7, #6]
 801763a:	b2d2      	uxtb	r2, r2
 801763c:	3318      	adds	r3, #24
 801763e:	443b      	add	r3, r7
 8017640:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 8017644:	88fb      	ldrh	r3, [r7, #6]
 8017646:	0a1b      	lsrs	r3, r3, #8
 8017648:	b29a      	uxth	r2, r3
 801764a:	7dfb      	ldrb	r3, [r7, #23]
 801764c:	1c59      	adds	r1, r3, #1
 801764e:	75f9      	strb	r1, [r7, #23]
 8017650:	b2d2      	uxtb	r2, r2
 8017652:	3318      	adds	r3, #24
 8017654:	443b      	add	r3, r7
 8017656:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801765a:	7dfb      	ldrb	r3, [r7, #23]
 801765c:	b29b      	uxth	r3, r3
 801765e:	7bf9      	ldrb	r1, [r7, #15]
 8017660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017662:	9204      	str	r2, [sp, #16]
 8017664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017666:	9203      	str	r2, [sp, #12]
 8017668:	6a3a      	ldr	r2, [r7, #32]
 801766a:	9202      	str	r2, [sp, #8]
 801766c:	9301      	str	r3, [sp, #4]
 801766e:	f107 0310 	add.w	r3, r7, #16
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	2200      	movs	r2, #0
 8017678:	2033      	movs	r0, #51	; 0x33
 801767a:	f000 f843 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801767e:	4603      	mov	r3, r0
}
 8017680:	4618      	mov	r0, r3
 8017682:	3718      	adds	r7, #24
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}

08017688 <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b08a      	sub	sp, #40	; 0x28
 801768c:	af06      	add	r7, sp, #24
 801768e:	60b9      	str	r1, [r7, #8]
 8017690:	607a      	str	r2, [r7, #4]
 8017692:	461a      	mov	r2, r3
 8017694:	4603      	mov	r3, r0
 8017696:	73fb      	strb	r3, [r7, #15]
 8017698:	4613      	mov	r3, r2
 801769a:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 801769c:	7bf9      	ldrb	r1, [r7, #15]
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	9304      	str	r3, [sp, #16]
 80176a2:	89bb      	ldrh	r3, [r7, #12]
 80176a4:	9303      	str	r3, [sp, #12]
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	9302      	str	r3, [sp, #8]
 80176aa:	2300      	movs	r3, #0
 80176ac:	9301      	str	r3, [sp, #4]
 80176ae:	2300      	movs	r3, #0
 80176b0:	9300      	str	r3, [sp, #0]
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	2200      	movs	r2, #0
 80176b6:	202b      	movs	r0, #43	; 0x2b
 80176b8:	f000 f824 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 80176bc:	4603      	mov	r3, r0
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3710      	adds	r7, #16
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}

080176c6 <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80176c6:	b580      	push	{r7, lr}
 80176c8:	b08a      	sub	sp, #40	; 0x28
 80176ca:	af06      	add	r7, sp, #24
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	607b      	str	r3, [r7, #4]
 80176d0:	4603      	mov	r3, r0
 80176d2:	73fb      	strb	r3, [r7, #15]
 80176d4:	4613      	mov	r3, r2
 80176d6:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 80176d8:	7bba      	ldrb	r2, [r7, #14]
 80176da:	7bf9      	ldrb	r1, [r7, #15]
 80176dc:	69fb      	ldr	r3, [r7, #28]
 80176de:	9304      	str	r3, [sp, #16]
 80176e0:	8b3b      	ldrh	r3, [r7, #24]
 80176e2:	9303      	str	r3, [sp, #12]
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	9302      	str	r3, [sp, #8]
 80176e8:	2300      	movs	r3, #0
 80176ea:	9301      	str	r3, [sp, #4]
 80176ec:	2300      	movs	r3, #0
 80176ee:	9300      	str	r3, [sp, #0]
 80176f0:	68bb      	ldr	r3, [r7, #8]
 80176f2:	203b      	movs	r0, #59	; 0x3b
 80176f4:	f000 f806 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 80176f8:	4603      	mov	r3, r0
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3710      	adds	r7, #16
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
	...

08017704 <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b094      	sub	sp, #80	; 0x50
 8017708:	af04      	add	r7, sp, #16
 801770a:	603b      	str	r3, [r7, #0]
 801770c:	4603      	mov	r3, r0
 801770e:	71fb      	strb	r3, [r7, #7]
 8017710:	460b      	mov	r3, r1
 8017712:	71bb      	strb	r3, [r7, #6]
 8017714:	4613      	mov	r3, r2
 8017716:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 8017718:	2300      	movs	r3, #0
 801771a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 801771e:	2300      	movs	r3, #0
 8017720:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8017724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017726:	2b00      	cmp	r3, #0
 8017728:	d013      	beq.n	8017752 <rfalNfcvPollerTransceiveReq+0x4e>
 801772a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801772c:	2b00      	cmp	r3, #0
 801772e:	d010      	beq.n	8017752 <rfalNfcvPollerTransceiveReq+0x4e>
 8017730:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8017734:	2b00      	cmp	r3, #0
 8017736:	d002      	beq.n	801773e <rfalNfcvPollerTransceiveReq+0x3a>
 8017738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801773a:	2b00      	cmp	r3, #0
 801773c:	d009      	beq.n	8017752 <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 801773e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8017742:	683a      	ldr	r2, [r7, #0]
 8017744:	2a00      	cmp	r2, #0
 8017746:	d001      	beq.n	801774c <rfalNfcvPollerTransceiveReq+0x48>
 8017748:	2229      	movs	r2, #41	; 0x29
 801774a:	e000      	b.n	801774e <rfalNfcvPollerTransceiveReq+0x4a>
 801774c:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 801774e:	429a      	cmp	r2, r3
 8017750:	d201      	bcs.n	8017756 <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 8017752:	2307      	movs	r3, #7
 8017754:	e0ca      	b.n	80178ec <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 8017756:	79fb      	ldrb	r3, [r7, #7]
 8017758:	2bc0      	cmp	r3, #192	; 0xc0
 801775a:	d017      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
 801775c:	79fb      	ldrb	r3, [r7, #7]
 801775e:	2bc4      	cmp	r3, #196	; 0xc4
 8017760:	d014      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
 8017762:	79fb      	ldrb	r3, [r7, #7]
 8017764:	2bc3      	cmp	r3, #195	; 0xc3
 8017766:	d011      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 8017768:	79fb      	ldrb	r3, [r7, #7]
 801776a:	2bc5      	cmp	r3, #197	; 0xc5
 801776c:	d00e      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
 801776e:	79fb      	ldrb	r3, [r7, #7]
 8017770:	2bca      	cmp	r3, #202	; 0xca
 8017772:	d00b      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 8017774:	79fb      	ldrb	r3, [r7, #7]
 8017776:	2bcb      	cmp	r3, #203	; 0xcb
 8017778:	d008      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
 801777a:	79fb      	ldrb	r3, [r7, #7]
 801777c:	2bcc      	cmp	r3, #204	; 0xcc
 801777e:	d005      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 8017780:	79fb      	ldrb	r3, [r7, #7]
 8017782:	2bcd      	cmp	r3, #205	; 0xcd
 8017784:	d002      	beq.n	801778c <rfalNfcvPollerTransceiveReq+0x88>
 8017786:	79fb      	ldrb	r3, [r7, #7]
 8017788:	2bce      	cmp	r3, #206	; 0xce
 801778a:	d10c      	bne.n	80177a6 <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 801778c:	f107 030f 	add.w	r3, r7, #15
 8017790:	4619      	mov	r1, r3
 8017792:	2000      	movs	r0, #0
 8017794:	f000 fcca 	bl	801812c <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 8017798:	21eb      	movs	r1, #235	; 0xeb
 801779a:	20ff      	movs	r0, #255	; 0xff
 801779c:	f000 fa62 	bl	8017c64 <rfalSetBitRate>
        
        fastMode = true;
 80177a0:	2301      	movs	r3, #1
 80177a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 80177a6:	79bb      	ldrb	r3, [r7, #6]
 80177a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 80177b0:	79fb      	ldrb	r3, [r7, #7]
 80177b2:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 80177b4:	797b      	ldrb	r3, [r7, #5]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d009      	beq.n	80177ce <rfalNfcvPollerTransceiveReq+0xca>
    {
        req.payload.data[msgIt++] = param;
 80177ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80177be:	1c5a      	adds	r2, r3, #1
 80177c0:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80177c4:	3340      	adds	r3, #64	; 0x40
 80177c6:	443b      	add	r3, r7
 80177c8:	797a      	ldrb	r2, [r7, #5]
 80177ca:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d015      	beq.n	8017800 <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 80177d4:	7c3b      	ldrb	r3, [r7, #16]
 80177d6:	f043 0320 	orr.w	r3, r3, #32
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 80177de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80177e2:	f107 0210 	add.w	r2, r7, #16
 80177e6:	4413      	add	r3, r2
 80177e8:	3302      	adds	r3, #2
 80177ea:	2208      	movs	r2, #8
 80177ec:	6839      	ldr	r1, [r7, #0]
 80177ee:	4618      	mov	r0, r3
 80177f0:	f003 fe60 	bl	801b4b4 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 80177f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80177f8:	3308      	adds	r3, #8
 80177fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80177fe:	e004      	b.n	801780a <rfalNfcvPollerTransceiveReq+0x106>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 8017800:	7c3b      	ldrb	r3, [r7, #16]
 8017802:	f043 0310 	orr.w	r3, r3, #16
 8017806:	b2db      	uxtb	r3, r3
 8017808:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 801780a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801780e:	2b00      	cmp	r3, #0
 8017810:	d013      	beq.n	801783a <rfalNfcvPollerTransceiveReq+0x136>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 8017812:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017816:	f107 0210 	add.w	r2, r7, #16
 801781a:	4413      	add	r3, r2
 801781c:	3302      	adds	r3, #2
 801781e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8017822:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017824:	4618      	mov	r0, r3
 8017826:	f003 fe45 	bl	801b4b4 <memcpy>
        msgIt += (uint8_t)dataLen;
 801782a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801782e:	b2da      	uxtb	r2, r3
 8017830:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017834:	4413      	add	r3, r2
 8017836:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 801783a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801783e:	b29b      	uxth	r3, r3
 8017840:	3302      	adds	r3, #2
 8017842:	b299      	uxth	r1, r3
 8017844:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8017848:	f107 0010 	add.w	r0, r7, #16
 801784c:	4b29      	ldr	r3, [pc, #164]	; (80178f4 <rfalNfcvPollerTransceiveReq+0x1f0>)
 801784e:	9302      	str	r3, [sp, #8]
 8017850:	2300      	movs	r3, #0
 8017852:	9301      	str	r3, [sp, #4]
 8017854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017856:	9300      	str	r3, [sp, #0]
 8017858:	4613      	mov	r3, r2
 801785a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801785c:	f000 ff20 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8017860:	4603      	mov	r3, r0
 8017862:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 8017864:	79bb      	ldrb	r3, [r7, #6]
 8017866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801786a:	2b00      	cmp	r3, #0
 801786c:	d01b      	beq.n	80178a6 <rfalNfcvPollerTransceiveReq+0x1a2>
 801786e:	79fb      	ldrb	r3, [r7, #7]
 8017870:	2b21      	cmp	r3, #33	; 0x21
 8017872:	d00e      	beq.n	8017892 <rfalNfcvPollerTransceiveReq+0x18e>
 8017874:	79fb      	ldrb	r3, [r7, #7]
 8017876:	2b24      	cmp	r3, #36	; 0x24
 8017878:	d00b      	beq.n	8017892 <rfalNfcvPollerTransceiveReq+0x18e>
 801787a:	79fb      	ldrb	r3, [r7, #7]
 801787c:	2b22      	cmp	r3, #34	; 0x22
 801787e:	d008      	beq.n	8017892 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 8017880:	79fb      	ldrb	r3, [r7, #7]
 8017882:	2b31      	cmp	r3, #49	; 0x31
 8017884:	d005      	beq.n	8017892 <rfalNfcvPollerTransceiveReq+0x18e>
 8017886:	79fb      	ldrb	r3, [r7, #7]
 8017888:	2b32      	cmp	r3, #50	; 0x32
 801788a:	d002      	beq.n	8017892 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 801788c:	79fb      	ldrb	r3, [r7, #7]
 801788e:	2b34      	cmp	r3, #52	; 0x34
 8017890:	d109      	bne.n	80178a6 <rfalNfcvPollerTransceiveReq+0x1a2>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 8017892:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017896:	b2db      	uxtb	r3, r3
 8017898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801789a:	4619      	mov	r1, r3
 801789c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801789e:	f002 f90d 	bl	8019abc <rfalISO15693TransceiveEOF>
 80178a2:	4603      	mov	r3, r0
 80178a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 80178a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d004      	beq.n	80178b8 <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 80178ae:	7bfb      	ldrb	r3, [r7, #15]
 80178b0:	4619      	mov	r1, r3
 80178b2:	20ff      	movs	r0, #255	; 0xff
 80178b4:	f000 f9d6 	bl	8017c64 <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 80178b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d001      	beq.n	80178c2 <rfalNfcvPollerTransceiveReq+0x1be>
    {
        return ret;
 80178be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80178c0:	e014      	b.n	80178ec <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 80178c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80178c4:	881b      	ldrh	r3, [r3, #0]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d101      	bne.n	80178ce <rfalNfcvPollerTransceiveReq+0x1ca>
    {
        return ERR_PROTO;
 80178ca:	230b      	movs	r3, #11
 80178cc:	e00e      	b.n	80178ec <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 80178ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	f003 0301 	and.w	r3, r3, #1
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d007      	beq.n	80178ea <rfalNfcvPollerTransceiveReq+0x1e6>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 80178da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178dc:	3301      	adds	r3, #1
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7ff faab 	bl	8016e3c <rfalNfcvParseError>
 80178e6:	4603      	mov	r3, r0
 80178e8:	e000      	b.n	80178ec <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    return ERR_NONE;
 80178ea:	2300      	movs	r3, #0
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	3740      	adds	r7, #64	; 0x40
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	00042360 	.word	0x00042360

080178f8 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 80178fc:	f7ec fd18 	bl	8004330 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 8017900:	f7eb fddc 	bl	80034bc <st25r3911Initialize>

    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 8017904:	2000      	movs	r0, #0
 8017906:	f7eb ff99 	bl	800383c <st25r3911CheckChipID>
 801790a:	4603      	mov	r3, r0
 801790c:	f083 0301 	eor.w	r3, r3, #1
 8017910:	b2db      	uxtb	r3, r3
 8017912:	2b00      	cmp	r3, #0
 8017914:	d001      	beq.n	801791a <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 8017916:	2324      	movs	r3, #36	; 0x24
 8017918:	e052      	b.n	80179c0 <rfalInitialize+0xc8>
    }

    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 801791a:	2100      	movs	r1, #0
 801791c:	2001      	movs	r0, #1
 801791e:	f7ec fa5f 	bl	8003de0 <st25r3911WriteTestRegister>

    /*******************************************************************************/
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 8017922:	2000      	movs	r0, #0
 8017924:	f7f7 ff7e 	bl	800f824 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 8017928:	2200      	movs	r2, #0
 801792a:	2130      	movs	r1, #48	; 0x30
 801792c:	2000      	movs	r0, #0
 801792e:	f7ec fb2c 	bl	8003f8a <st25r3911ChangeRegisterBits>

    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 8017932:	2140      	movs	r1, #64	; 0x40
 8017934:	2009      	movs	r0, #9
 8017936:	f7ec fb0a 	bl	8003f4e <st25r3911SetRegisterBits>

    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801793a:	2110      	movs	r1, #16
 801793c:	2009      	movs	r0, #9
 801793e:	f7ec fb06 	bl	8003f4e <st25r3911SetRegisterBits>

    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 8017942:	f001 fe05 	bl	8019550 <rfalFIFOStatusClear>

    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 8017946:	4b1f      	ldr	r3, [pc, #124]	; (80179c4 <rfalInitialize+0xcc>)
 8017948:	2201      	movs	r2, #1
 801794a:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 801794c:	4b1d      	ldr	r3, [pc, #116]	; (80179c4 <rfalInitialize+0xcc>)
 801794e:	2200      	movs	r2, #0
 8017950:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 8017952:	4b1c      	ldr	r3, [pc, #112]	; (80179c4 <rfalInitialize+0xcc>)
 8017954:	2200      	movs	r2, #0
 8017956:	711a      	strb	r2, [r3, #4]

    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 8017958:	4b1a      	ldr	r3, [pc, #104]	; (80179c4 <rfalInitialize+0xcc>)
 801795a:	2200      	movs	r2, #0
 801795c:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 801795e:	4b19      	ldr	r3, [pc, #100]	; (80179c4 <rfalInitialize+0xcc>)
 8017960:	2200      	movs	r2, #0
 8017962:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 8017964:	4b17      	ldr	r3, [pc, #92]	; (80179c4 <rfalInitialize+0xcc>)
 8017966:	2200      	movs	r2, #0
 8017968:	71da      	strb	r2, [r3, #7]

    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 801796a:	4b16      	ldr	r3, [pc, #88]	; (80179c4 <rfalInitialize+0xcc>)
 801796c:	2200      	movs	r2, #0
 801796e:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 8017970:	4b14      	ldr	r3, [pc, #80]	; (80179c4 <rfalInitialize+0xcc>)
 8017972:	2200      	movs	r2, #0
 8017974:	751a      	strb	r2, [r3, #20]

    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 8017976:	4b13      	ldr	r3, [pc, #76]	; (80179c4 <rfalInitialize+0xcc>)
 8017978:	2200      	movs	r2, #0
 801797a:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 801797c:	4b11      	ldr	r3, [pc, #68]	; (80179c4 <rfalInitialize+0xcc>)
 801797e:	2200      	movs	r2, #0
 8017980:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 8017982:	4b10      	ldr	r3, [pc, #64]	; (80179c4 <rfalInitialize+0xcc>)
 8017984:	2200      	movs	r2, #0
 8017986:	609a      	str	r2, [r3, #8]

    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 8017988:	4b0e      	ldr	r3, [pc, #56]	; (80179c4 <rfalInitialize+0xcc>)
 801798a:	2200      	movs	r2, #0
 801798c:	641a      	str	r2, [r3, #64]	; 0x40

    gRFAL.callbacks.preTxRx  = NULL;
 801798e:	4b0d      	ldr	r3, [pc, #52]	; (80179c4 <rfalInitialize+0xcc>)
 8017990:	2200      	movs	r2, #0
 8017992:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 8017994:	4b0b      	ldr	r3, [pc, #44]	; (80179c4 <rfalInitialize+0xcc>)
 8017996:	2200      	movs	r2, #0
 8017998:	651a      	str	r2, [r3, #80]	; 0x50

#if RFAL_FEATURE_NFCV
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 801799a:	4b0a      	ldr	r3, [pc, #40]	; (80179c4 <rfalInitialize+0xcc>)
 801799c:	2200      	movs	r2, #0
 801799e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
#endif /* RFAL_FEATURE_NFCV */

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 80179a2:	4b08      	ldr	r3, [pc, #32]	; (80179c4 <rfalInitialize+0xcc>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 80179aa:	4b06      	ldr	r3, [pc, #24]	; (80179c4 <rfalInitialize+0xcc>)
 80179ac:	22ff      	movs	r2, #255	; 0xff
 80179ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 80179b2:	4b04      	ldr	r3, [pc, #16]	; (80179c4 <rfalInitialize+0xcc>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


    /*******************************************************************************/
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 80179ba:	f000 f805 	bl	80179c8 <rfalCalibrate>
    
    return ERR_NONE;
 80179be:	2300      	movs	r3, #0
}
 80179c0:	4618      	mov	r0, r3
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	200039f8 	.word	0x200039f8

080179c8 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 80179ce:	4b1b      	ldr	r3, [pc, #108]	; (8017a3c <rfalCalibrate+0x74>)
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d101      	bne.n	80179da <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 80179d6:	2321      	movs	r3, #33	; 0x21
 80179d8:	e02b      	b.n	8017a32 <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 80179da:	2200      	movs	r2, #0
 80179dc:	2180      	movs	r1, #128	; 0x80
 80179de:	202a      	movs	r0, #42	; 0x2a
 80179e0:	f7eb ff0c 	bl	80037fc <st25r3911CheckReg>
 80179e4:	4603      	mov	r3, r0
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d003      	beq.n	80179f2 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 80179ea:	1dbb      	adds	r3, r7, #6
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7eb fd93 	bl	8003518 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 80179f2:	2200      	movs	r2, #0
 80179f4:	2180      	movs	r1, #128	; 0x80
 80179f6:	2021      	movs	r0, #33	; 0x21
 80179f8:	f7eb ff00 	bl	80037fc <st25r3911CheckReg>
 80179fc:	4603      	mov	r3, r0
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d010      	beq.n	8017a24 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 8017a02:	1dbb      	adds	r3, r7, #6
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7eb fe08 	bl	800361a <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 8017a0a:	1dbb      	adds	r3, r7, #6
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7eb fe04 	bl	800361a <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 8017a12:	2200      	movs	r2, #0
 8017a14:	2180      	movs	r1, #128	; 0x80
 8017a16:	202a      	movs	r0, #42	; 0x2a
 8017a18:	f7eb fef0 	bl	80037fc <st25r3911CheckReg>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d006      	beq.n	8017a30 <rfalCalibrate+0x68>
 8017a22:	e001      	b.n	8017a28 <rfalCalibrate+0x60>
        return ERR_NONE; 
 8017a24:	2300      	movs	r3, #0
 8017a26:	e004      	b.n	8017a32 <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 8017a28:	1dbb      	adds	r3, r7, #6
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7eb fd74 	bl	8003518 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 8017a30:	2300      	movs	r3, #0
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3708      	adds	r7, #8
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	200039f8 	.word	0x200039f8

08017a40 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	4603      	mov	r3, r0
 8017a48:	71fb      	strb	r3, [r7, #7]
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	71bb      	strb	r3, [r7, #6]
 8017a4e:	4613      	mov	r3, r2
 8017a50:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8017a52:	4b83      	ldr	r3, [pc, #524]	; (8017c60 <rfalSetMode+0x220>)
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d101      	bne.n	8017a5e <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8017a5a:	2321      	movs	r3, #33	; 0x21
 8017a5c:	e0fb      	b.n	8017c56 <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8017a5e:	79bb      	ldrb	r3, [r7, #6]
 8017a60:	2bff      	cmp	r3, #255	; 0xff
 8017a62:	d002      	beq.n	8017a6a <rfalSetMode+0x2a>
 8017a64:	797b      	ldrb	r3, [r7, #5]
 8017a66:	2bff      	cmp	r3, #255	; 0xff
 8017a68:	d101      	bne.n	8017a6e <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 8017a6a:	2307      	movs	r3, #7
 8017a6c:	e0f3      	b.n	8017c56 <rfalSetMode+0x216>
    }
   
    switch( mode )
 8017a6e:	79fb      	ldrb	r3, [r7, #7]
 8017a70:	3b01      	subs	r3, #1
 8017a72:	2b0c      	cmp	r3, #12
 8017a74:	f200 80db 	bhi.w	8017c2e <rfalSetMode+0x1ee>
 8017a78:	a201      	add	r2, pc, #4	; (adr r2, 8017a80 <rfalSetMode+0x40>)
 8017a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a7e:	bf00      	nop
 8017a80:	08017ab5 	.word	0x08017ab5
 8017a84:	08017ad7 	.word	0x08017ad7
 8017a88:	08017af9 	.word	0x08017af9
 8017a8c:	08017b2f 	.word	0x08017b2f
 8017a90:	08017b65 	.word	0x08017b65
 8017a94:	08017b9b 	.word	0x08017b9b
 8017a98:	08017bbd 	.word	0x08017bbd
 8017a9c:	08017bbd 	.word	0x08017bbd
 8017aa0:	08017bd7 	.word	0x08017bd7
 8017aa4:	08017c2b 	.word	0x08017c2b
 8017aa8:	08017c2b 	.word	0x08017c2b
 8017aac:	08017c2b 	.word	0x08017c2b
 8017ab0:	08017c01 	.word	0x08017c01
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017ab4:	2104      	movs	r1, #4
 8017ab6:	2002      	movs	r0, #2
 8017ab8:	f7ec fa26 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 8017abc:	2108      	movs	r1, #8
 8017abe:	2003      	movs	r0, #3
 8017ac0:	f7ec f9d6 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017ac4:	f240 1001 	movw	r0, #257	; 0x101
 8017ac8:	f7f7 feac 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017acc:	f44f 7081 	mov.w	r0, #258	; 0x102
 8017ad0:	f7f7 fea8 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017ad4:	e0ad      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017ad6:	2104      	movs	r1, #4
 8017ad8:	2002      	movs	r0, #2
 8017ada:	f7ec fa15 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 8017ade:	2120      	movs	r1, #32
 8017ae0:	2003      	movs	r0, #3
 8017ae2:	f7ec f9c5 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017ae6:	f240 1001 	movw	r0, #257	; 0x101
 8017aea:	f7f7 fe9b 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017aee:	f44f 7081 	mov.w	r0, #258	; 0x102
 8017af2:	f7f7 fe97 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017af6:	e09c      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017af8:	2104      	movs	r1, #4
 8017afa:	2002      	movs	r0, #2
 8017afc:	f7ec fa04 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017b00:	2110      	movs	r1, #16
 8017b02:	2003      	movs	r0, #3
 8017b04:	f7ec f9b4 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017b08:	2200      	movs	r2, #0
 8017b0a:	21fc      	movs	r1, #252	; 0xfc
 8017b0c:	2006      	movs	r0, #6
 8017b0e:	f7ec fa3c 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017b12:	2200      	movs	r2, #0
 8017b14:	21f8      	movs	r1, #248	; 0xf8
 8017b16:	2007      	movs	r0, #7
 8017b18:	f7ec fa37 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017b1c:	f240 2001 	movw	r0, #513	; 0x201
 8017b20:	f7f7 fe80 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b24:	f240 2002 	movw	r0, #514	; 0x202
 8017b28:	f7f7 fe7c 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017b2c:	e081      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017b2e:	2104      	movs	r1, #4
 8017b30:	2002      	movs	r0, #2
 8017b32:	f7ec f9e9 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017b36:	2110      	movs	r1, #16
 8017b38:	2003      	movs	r0, #3
 8017b3a:	f7ec f999 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017b3e:	2200      	movs	r2, #0
 8017b40:	21fc      	movs	r1, #252	; 0xfc
 8017b42:	2006      	movs	r0, #6
 8017b44:	f7ec fa21 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017b48:	2228      	movs	r2, #40	; 0x28
 8017b4a:	21f8      	movs	r1, #248	; 0xf8
 8017b4c:	2007      	movs	r0, #7
 8017b4e:	f7ec fa1c 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017b52:	f240 2001 	movw	r0, #513	; 0x201
 8017b56:	f7f7 fe65 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b5a:	f240 2002 	movw	r0, #514	; 0x202
 8017b5e:	f7f7 fe61 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017b62:	e066      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017b64:	2104      	movs	r1, #4
 8017b66:	2002      	movs	r0, #2
 8017b68:	f7ec f9ce 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017b6c:	2110      	movs	r1, #16
 8017b6e:	2003      	movs	r0, #3
 8017b70:	f7ec f97e 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017b74:	2200      	movs	r2, #0
 8017b76:	21fc      	movs	r1, #252	; 0xfc
 8017b78:	2006      	movs	r0, #6
 8017b7a:	f7ec fa06 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017b7e:	2230      	movs	r2, #48	; 0x30
 8017b80:	21f8      	movs	r1, #248	; 0xf8
 8017b82:	2007      	movs	r0, #7
 8017b84:	f7ec fa01 	bl	8003f8a <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017b88:	f240 2001 	movw	r0, #513	; 0x201
 8017b8c:	f7f7 fe4a 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b90:	f240 2002 	movw	r0, #514	; 0x202
 8017b94:	f7f7 fe46 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017b98:	e04b      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017b9a:	2104      	movs	r1, #4
 8017b9c:	2002      	movs	r0, #2
 8017b9e:	f7ec f9b3 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 8017ba2:	2118      	movs	r1, #24
 8017ba4:	2003      	movs	r0, #3
 8017ba6:	f7ec f963 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017baa:	f240 4001 	movw	r0, #1025	; 0x401
 8017bae:	f7f7 fe39 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017bb2:	f240 4002 	movw	r0, #1026	; 0x402
 8017bb6:	f7f7 fe35 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017bba:	e03a      	b.n	8017c32 <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017bbc:	2104      	movs	r1, #4
 8017bbe:	2002      	movs	r0, #2
 8017bc0:	f7ec f9a2 	bl	8003f08 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017bc4:	f241 0001 	movw	r0, #4097	; 0x1001
 8017bc8:	f7f7 fe2c 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017bcc:	f241 0002 	movw	r0, #4098	; 0x1002
 8017bd0:	f7f7 fe28 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017bd4:	e02d      	b.n	8017c32 <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 8017bd6:	2101      	movs	r1, #1
 8017bd8:	2003      	movs	r0, #3
 8017bda:	f7ec f949 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8017bde:	2160      	movs	r1, #96	; 0x60
 8017be0:	2040      	movs	r0, #64	; 0x40
 8017be2:	f7eb fdd7 	bl	8003794 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017be6:	2110      	movs	r1, #16
 8017be8:	2009      	movs	r0, #9
 8017bea:	f7ec f9b0 	bl	8003f4e <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017bee:	f640 0001 	movw	r0, #2049	; 0x801
 8017bf2:	f7f7 fe17 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017bf6:	f640 0002 	movw	r0, #2050	; 0x802
 8017bfa:	f7f7 fe13 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017bfe:	e018      	b.n	8017c32 <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 8017c00:	2189      	movs	r1, #137	; 0x89
 8017c02:	2003      	movs	r0, #3
 8017c04:	f7ec f934 	bl	8003e70 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8017c08:	2160      	movs	r1, #96	; 0x60
 8017c0a:	2040      	movs	r0, #64	; 0x40
 8017c0c:	f7eb fdc2 	bl	8003794 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017c10:	2110      	movs	r1, #16
 8017c12:	2009      	movs	r0, #9
 8017c14:	f7ec f99b 	bl	8003f4e <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017c18:	f648 0001 	movw	r0, #34817	; 0x8801
 8017c1c:	f7f7 fe02 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017c20:	f648 0002 	movw	r0, #34818	; 0x8802
 8017c24:	f7f7 fdfe 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017c28:	e003      	b.n	8017c32 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 8017c2a:	2318      	movs	r3, #24
 8017c2c:	e013      	b.n	8017c56 <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8017c2e:	230f      	movs	r3, #15
 8017c30:	e011      	b.n	8017c56 <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 8017c32:	4b0b      	ldr	r3, [pc, #44]	; (8017c60 <rfalSetMode+0x220>)
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	2b02      	cmp	r3, #2
 8017c38:	bf38      	it	cc
 8017c3a:	2302      	movcc	r3, #2
 8017c3c:	b2da      	uxtb	r2, r3
 8017c3e:	4b08      	ldr	r3, [pc, #32]	; (8017c60 <rfalSetMode+0x220>)
 8017c40:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 8017c42:	4a07      	ldr	r2, [pc, #28]	; (8017c60 <rfalSetMode+0x220>)
 8017c44:	79fb      	ldrb	r3, [r7, #7]
 8017c46:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 8017c48:	797a      	ldrb	r2, [r7, #5]
 8017c4a:	79bb      	ldrb	r3, [r7, #6]
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f000 f808 	bl	8017c64 <rfalSetBitRate>
 8017c54:	4603      	mov	r3, r0
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3708      	adds	r7, #8
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}
 8017c5e:	bf00      	nop
 8017c60:	200039f8 	.word	0x200039f8

08017c64 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b088      	sub	sp, #32
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	460a      	mov	r2, r1
 8017c6e:	71fb      	strb	r3, [r7, #7]
 8017c70:	4613      	mov	r3, r2
 8017c72:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8017c74:	4b93      	ldr	r3, [pc, #588]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d101      	bne.n	8017c80 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 8017c7c:	2321      	movs	r3, #33	; 0x21
 8017c7e:	e24a      	b.n	8018116 <rfalSetBitRate+0x4b2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8017c80:	79fb      	ldrb	r3, [r7, #7]
 8017c82:	2bff      	cmp	r3, #255	; 0xff
 8017c84:	d102      	bne.n	8017c8c <rfalSetBitRate+0x28>
 8017c86:	4b8f      	ldr	r3, [pc, #572]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017c88:	789b      	ldrb	r3, [r3, #2]
 8017c8a:	e000      	b.n	8017c8e <rfalSetBitRate+0x2a>
 8017c8c:	79fb      	ldrb	r3, [r7, #7]
 8017c8e:	4a8d      	ldr	r2, [pc, #564]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017c90:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8017c92:	79bb      	ldrb	r3, [r7, #6]
 8017c94:	2bff      	cmp	r3, #255	; 0xff
 8017c96:	d102      	bne.n	8017c9e <rfalSetBitRate+0x3a>
 8017c98:	4b8a      	ldr	r3, [pc, #552]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017c9a:	78db      	ldrb	r3, [r3, #3]
 8017c9c:	e000      	b.n	8017ca0 <rfalSetBitRate+0x3c>
 8017c9e:	79bb      	ldrb	r3, [r7, #6]
 8017ca0:	4a88      	ldr	r2, [pc, #544]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017ca2:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8017ca4:	4b87      	ldr	r3, [pc, #540]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017ca6:	785b      	ldrb	r3, [r3, #1]
 8017ca8:	2b07      	cmp	r3, #7
 8017caa:	d012      	beq.n	8017cd2 <rfalSetBitRate+0x6e>
 8017cac:	4b85      	ldr	r3, [pc, #532]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017cae:	785b      	ldrb	r3, [r3, #1]
 8017cb0:	2b08      	cmp	r3, #8
 8017cb2:	d00e      	beq.n	8017cd2 <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8017cb4:	4b83      	ldr	r3, [pc, #524]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017cb6:	789b      	ldrb	r3, [r3, #2]
 8017cb8:	4a82      	ldr	r2, [pc, #520]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017cba:	78d2      	ldrb	r2, [r2, #3]
 8017cbc:	4611      	mov	r1, r2
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7eb fce6 	bl	8003690 <st25r3911SetBitrate>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	83fb      	strh	r3, [r7, #30]
 8017cc8:	8bfb      	ldrh	r3, [r7, #30]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d001      	beq.n	8017cd2 <rfalSetBitRate+0x6e>
 8017cce:	8bfb      	ldrh	r3, [r7, #30]
 8017cd0:	e221      	b.n	8018116 <rfalSetBitRate+0x4b2>
    }
    
    
    switch( gRFAL.mode )
 8017cd2:	4b7c      	ldr	r3, [pc, #496]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017cd4:	785b      	ldrb	r3, [r3, #1]
 8017cd6:	2b0d      	cmp	r3, #13
 8017cd8:	f200 821a 	bhi.w	8018110 <rfalSetBitRate+0x4ac>
 8017cdc:	a201      	add	r2, pc, #4	; (adr r2, 8017ce4 <rfalSetBitRate+0x80>)
 8017cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ce2:	bf00      	nop
 8017ce4:	0801810d 	.word	0x0801810d
 8017ce8:	08017d1d 	.word	0x08017d1d
 8017cec:	08017d1d 	.word	0x08017d1d
 8017cf0:	08017da5 	.word	0x08017da5
 8017cf4:	08017da5 	.word	0x08017da5
 8017cf8:	08017da5 	.word	0x08017da5
 8017cfc:	08017e35 	.word	0x08017e35
 8017d00:	08017ec9 	.word	0x08017ec9
 8017d04:	08017ec9 	.word	0x08017ec9
 8017d08:	08017ffd 	.word	0x08017ffd
 8017d0c:	0801810d 	.word	0x0801810d
 8017d10:	0801810d 	.word	0x0801810d
 8017d14:	0801810d 	.word	0x0801810d
 8017d18:	0801808d 	.word	0x0801808d
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017d1c:	2008      	movs	r0, #8
 8017d1e:	f7f7 fd81 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017d22:	4b68      	ldr	r3, [pc, #416]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d24:	789b      	ldrb	r3, [r3, #2]
 8017d26:	2bea      	cmp	r3, #234	; 0xea
 8017d28:	d90c      	bls.n	8017d44 <rfalSetBitRate+0xe0>
 8017d2a:	4b66      	ldr	r3, [pc, #408]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d2c:	789b      	ldrb	r3, [r3, #2]
 8017d2e:	b29b      	uxth	r3, r3
 8017d30:	011b      	lsls	r3, r3, #4
 8017d32:	b29b      	uxth	r3, r3
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	b29b      	uxth	r3, r3
 8017d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d3c:	f043 0301 	orr.w	r3, r3, #1
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	e00d      	b.n	8017d60 <rfalSetBitRate+0xfc>
 8017d44:	4b5f      	ldr	r3, [pc, #380]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d46:	789b      	ldrb	r3, [r3, #2]
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	3301      	adds	r3, #1
 8017d4c:	b29b      	uxth	r3, r3
 8017d4e:	011b      	lsls	r3, r3, #4
 8017d50:	b29b      	uxth	r3, r3
 8017d52:	b2db      	uxtb	r3, r3
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d5a:	f043 0301 	orr.w	r3, r3, #1
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7f7 fd5f 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017d66:	4b57      	ldr	r3, [pc, #348]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d68:	78db      	ldrb	r3, [r3, #3]
 8017d6a:	2bea      	cmp	r3, #234	; 0xea
 8017d6c:	d90a      	bls.n	8017d84 <rfalSetBitRate+0x120>
 8017d6e:	4b55      	ldr	r3, [pc, #340]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d70:	78db      	ldrb	r3, [r3, #3]
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	011b      	lsls	r3, r3, #4
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	b29b      	uxth	r3, r3
 8017d7c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8017d80:	b29b      	uxth	r3, r3
 8017d82:	e00b      	b.n	8017d9c <rfalSetBitRate+0x138>
 8017d84:	4b4f      	ldr	r3, [pc, #316]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017d86:	78db      	ldrb	r3, [r3, #3]
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	011b      	lsls	r3, r3, #4
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f7f7 fd41 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017da2:	e1b7      	b.n	8018114 <rfalSetBitRate+0x4b0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017da4:	2008      	movs	r0, #8
 8017da6:	f7f7 fd3d 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017daa:	4b46      	ldr	r3, [pc, #280]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017dac:	789b      	ldrb	r3, [r3, #2]
 8017dae:	2bea      	cmp	r3, #234	; 0xea
 8017db0:	d90c      	bls.n	8017dcc <rfalSetBitRate+0x168>
 8017db2:	4b44      	ldr	r3, [pc, #272]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017db4:	789b      	ldrb	r3, [r3, #2]
 8017db6:	b29b      	uxth	r3, r3
 8017db8:	011b      	lsls	r3, r3, #4
 8017dba:	b29b      	uxth	r3, r3
 8017dbc:	b2db      	uxtb	r3, r3
 8017dbe:	b29b      	uxth	r3, r3
 8017dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017dc4:	f043 0301 	orr.w	r3, r3, #1
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	e00d      	b.n	8017de8 <rfalSetBitRate+0x184>
 8017dcc:	4b3d      	ldr	r3, [pc, #244]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017dce:	789b      	ldrb	r3, [r3, #2]
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	011b      	lsls	r3, r3, #4
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017de2:	f043 0301 	orr.w	r3, r3, #1
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7f7 fd1b 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017dee:	4b35      	ldr	r3, [pc, #212]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017df0:	78db      	ldrb	r3, [r3, #3]
 8017df2:	2bea      	cmp	r3, #234	; 0xea
 8017df4:	d90c      	bls.n	8017e10 <rfalSetBitRate+0x1ac>
 8017df6:	4b33      	ldr	r3, [pc, #204]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017df8:	78db      	ldrb	r3, [r3, #3]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	011b      	lsls	r3, r3, #4
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017e08:	f043 0302 	orr.w	r3, r3, #2
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	e00d      	b.n	8017e2c <rfalSetBitRate+0x1c8>
 8017e10:	4b2c      	ldr	r3, [pc, #176]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e12:	78db      	ldrb	r3, [r3, #3]
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	3301      	adds	r3, #1
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	011b      	lsls	r3, r3, #4
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017e26:	f043 0302 	orr.w	r3, r3, #2
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7f7 fcf9 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017e32:	e16f      	b.n	8018114 <rfalSetBitRate+0x4b0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017e34:	2008      	movs	r0, #8
 8017e36:	f7f7 fcf5 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017e3a:	4b22      	ldr	r3, [pc, #136]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e3c:	789b      	ldrb	r3, [r3, #2]
 8017e3e:	2bea      	cmp	r3, #234	; 0xea
 8017e40:	d90c      	bls.n	8017e5c <rfalSetBitRate+0x1f8>
 8017e42:	4b20      	ldr	r3, [pc, #128]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e44:	789b      	ldrb	r3, [r3, #2]
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	011b      	lsls	r3, r3, #4
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	b2db      	uxtb	r3, r3
 8017e4e:	b29b      	uxth	r3, r3
 8017e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017e54:	f043 0301 	orr.w	r3, r3, #1
 8017e58:	b29b      	uxth	r3, r3
 8017e5a:	e00d      	b.n	8017e78 <rfalSetBitRate+0x214>
 8017e5c:	4b19      	ldr	r3, [pc, #100]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e5e:	789b      	ldrb	r3, [r3, #2]
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	3301      	adds	r3, #1
 8017e64:	b29b      	uxth	r3, r3
 8017e66:	011b      	lsls	r3, r3, #4
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017e72:	f043 0301 	orr.w	r3, r3, #1
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7f7 fcd3 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017e7e:	4b11      	ldr	r3, [pc, #68]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e80:	78db      	ldrb	r3, [r3, #3]
 8017e82:	2bea      	cmp	r3, #234	; 0xea
 8017e84:	d90c      	bls.n	8017ea0 <rfalSetBitRate+0x23c>
 8017e86:	4b0f      	ldr	r3, [pc, #60]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017e88:	78db      	ldrb	r3, [r3, #3]
 8017e8a:	b29b      	uxth	r3, r3
 8017e8c:	011b      	lsls	r3, r3, #4
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017e98:	f043 0302 	orr.w	r3, r3, #2
 8017e9c:	b29b      	uxth	r3, r3
 8017e9e:	e00d      	b.n	8017ebc <rfalSetBitRate+0x258>
 8017ea0:	4b08      	ldr	r3, [pc, #32]	; (8017ec4 <rfalSetBitRate+0x260>)
 8017ea2:	78db      	ldrb	r3, [r3, #3]
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	b29b      	uxth	r3, r3
 8017eaa:	011b      	lsls	r3, r3, #4
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017eb6:	f043 0302 	orr.w	r3, r3, #2
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7f7 fcb1 	bl	800f824 <rfalSetAnalogConfig>
            break;
 8017ec2:	e127      	b.n	8018114 <rfalSetBitRate+0x4b0>
 8017ec4:	200039f8 	.word	0x200039f8
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 8017ec8:	4b95      	ldr	r3, [pc, #596]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017eca:	78db      	ldrb	r3, [r3, #3]
 8017ecc:	2bec      	cmp	r3, #236	; 0xec
 8017ece:	d00b      	beq.n	8017ee8 <rfalSetBitRate+0x284>
 8017ed0:	4b93      	ldr	r3, [pc, #588]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017ed2:	78db      	ldrb	r3, [r3, #3]
 8017ed4:	2beb      	cmp	r3, #235	; 0xeb
 8017ed6:	d007      	beq.n	8017ee8 <rfalSetBitRate+0x284>
 8017ed8:	4b91      	ldr	r3, [pc, #580]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017eda:	78db      	ldrb	r3, [r3, #3]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d003      	beq.n	8017ee8 <rfalSetBitRate+0x284>
 8017ee0:	4b8f      	ldr	r3, [pc, #572]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017ee2:	78db      	ldrb	r3, [r3, #3]
 8017ee4:	2b01      	cmp	r3, #1
 8017ee6:	d107      	bne.n	8017ef8 <rfalSetBitRate+0x294>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8017ee8:	4b8d      	ldr	r3, [pc, #564]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017eea:	789b      	ldrb	r3, [r3, #2]
 8017eec:	2bed      	cmp	r3, #237	; 0xed
 8017eee:	d005      	beq.n	8017efc <rfalSetBitRate+0x298>
 8017ef0:	4b8b      	ldr	r3, [pc, #556]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017ef2:	789b      	ldrb	r3, [r3, #2]
 8017ef4:	2bec      	cmp	r3, #236	; 0xec
 8017ef6:	d001      	beq.n	8017efc <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8017ef8:	2307      	movs	r3, #7
 8017efa:	e10c      	b.n	8018116 <rfalSetBitRate+0x4b2>
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8017efc:	4b88      	ldr	r3, [pc, #544]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017efe:	789b      	ldrb	r3, [r3, #2]
 8017f00:	2bed      	cmp	r3, #237	; 0xed
 8017f02:	bf0c      	ite	eq
 8017f04:	2301      	moveq	r3, #1
 8017f06:	2300      	movne	r3, #0
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8017f0c:	4b84      	ldr	r3, [pc, #528]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017f0e:	78db      	ldrb	r3, [r3, #3]
 8017f10:	2beb      	cmp	r3, #235	; 0xeb
 8017f12:	d006      	beq.n	8017f22 <rfalSetBitRate+0x2be>
 8017f14:	2beb      	cmp	r3, #235	; 0xeb
 8017f16:	dc0d      	bgt.n	8017f34 <rfalSetBitRate+0x2d0>
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d005      	beq.n	8017f28 <rfalSetBitRate+0x2c4>
 8017f1c:	2b01      	cmp	r3, #1
 8017f1e:	d006      	beq.n	8017f2e <rfalSetBitRate+0x2ca>
 8017f20:	e008      	b.n	8017f34 <rfalSetBitRate+0x2d0>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 8017f22:	2301      	movs	r3, #1
 8017f24:	613b      	str	r3, [r7, #16]
                            break;
 8017f26:	e008      	b.n	8017f3a <rfalSetBitRate+0x2d6>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 8017f28:	2302      	movs	r3, #2
 8017f2a:	613b      	str	r3, [r7, #16]
                            break;
 8017f2c:	e005      	b.n	8017f3a <rfalSetBitRate+0x2d6>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 8017f2e:	2303      	movs	r3, #3
 8017f30:	613b      	str	r3, [r7, #16]
                            break;
 8017f32:	e002      	b.n	8017f3a <rfalSetBitRate+0x2d6>
                        default:
                            config.speedMode = 0;
 8017f34:	2300      	movs	r3, #0
 8017f36:	613b      	str	r3, [r7, #16]
                            break;
 8017f38:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 8017f3a:	f107 0218 	add.w	r2, r7, #24
 8017f3e:	f107 030c 	add.w	r3, r7, #12
 8017f42:	4611      	mov	r1, r2
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7f7 fdc9 	bl	800fadc <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	785b      	ldrb	r3, [r3, #1]
 8017f4e:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	789b      	ldrb	r3, [r3, #2]
 8017f54:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 8017f56:	69bb      	ldr	r3, [r7, #24]
 8017f58:	78db      	ldrb	r3, [r3, #3]
 8017f5a:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 8017f62:	f107 0314 	add.w	r3, r7, #20
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7eb fd52 	bl	8003a10 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017f6c:	2008      	movs	r0, #8
 8017f6e:	f7f7 fc59 	bl	800f824 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017f72:	4b6b      	ldr	r3, [pc, #428]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017f74:	789b      	ldrb	r3, [r3, #2]
 8017f76:	2bea      	cmp	r3, #234	; 0xea
 8017f78:	d90c      	bls.n	8017f94 <rfalSetBitRate+0x330>
 8017f7a:	4b69      	ldr	r3, [pc, #420]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017f7c:	789b      	ldrb	r3, [r3, #2]
 8017f7e:	b29b      	uxth	r3, r3
 8017f80:	011b      	lsls	r3, r3, #4
 8017f82:	b29b      	uxth	r3, r3
 8017f84:	b2db      	uxtb	r3, r3
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017f8c:	f043 0301 	orr.w	r3, r3, #1
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	e00d      	b.n	8017fb0 <rfalSetBitRate+0x34c>
 8017f94:	4b62      	ldr	r3, [pc, #392]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017f96:	789b      	ldrb	r3, [r3, #2]
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	011b      	lsls	r3, r3, #4
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017faa:	f043 0301 	orr.w	r3, r3, #1
 8017fae:	b29b      	uxth	r3, r3
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7f7 fc37 	bl	800f824 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017fb6:	4b5a      	ldr	r3, [pc, #360]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017fb8:	78db      	ldrb	r3, [r3, #3]
 8017fba:	2bea      	cmp	r3, #234	; 0xea
 8017fbc:	d90c      	bls.n	8017fd8 <rfalSetBitRate+0x374>
 8017fbe:	4b58      	ldr	r3, [pc, #352]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017fc0:	78db      	ldrb	r3, [r3, #3]
 8017fc2:	b29b      	uxth	r3, r3
 8017fc4:	011b      	lsls	r3, r3, #4
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	b2db      	uxtb	r3, r3
 8017fca:	b29b      	uxth	r3, r3
 8017fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017fd0:	f043 0302 	orr.w	r3, r3, #2
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	e00d      	b.n	8017ff4 <rfalSetBitRate+0x390>
 8017fd8:	4b51      	ldr	r3, [pc, #324]	; (8018120 <rfalSetBitRate+0x4bc>)
 8017fda:	78db      	ldrb	r3, [r3, #3]
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	3301      	adds	r3, #1
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	011b      	lsls	r3, r3, #4
 8017fe4:	b29b      	uxth	r3, r3
 8017fe6:	b2db      	uxtb	r3, r3
 8017fe8:	b29b      	uxth	r3, r3
 8017fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017fee:	f043 0302 	orr.w	r3, r3, #2
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f7 fc15 	bl	800f824 <rfalSetAnalogConfig>
                break;
 8017ffa:	e08b      	b.n	8018114 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017ffc:	2008      	movs	r0, #8
 8017ffe:	f7f7 fc11 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8018002:	4b47      	ldr	r3, [pc, #284]	; (8018120 <rfalSetBitRate+0x4bc>)
 8018004:	789b      	ldrb	r3, [r3, #2]
 8018006:	2bea      	cmp	r3, #234	; 0xea
 8018008:	d90c      	bls.n	8018024 <rfalSetBitRate+0x3c0>
 801800a:	4b45      	ldr	r3, [pc, #276]	; (8018120 <rfalSetBitRate+0x4bc>)
 801800c:	789b      	ldrb	r3, [r3, #2]
 801800e:	b29b      	uxth	r3, r3
 8018010:	011b      	lsls	r3, r3, #4
 8018012:	b29b      	uxth	r3, r3
 8018014:	b2db      	uxtb	r3, r3
 8018016:	b29b      	uxth	r3, r3
 8018018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801801c:	f043 0301 	orr.w	r3, r3, #1
 8018020:	b29b      	uxth	r3, r3
 8018022:	e00d      	b.n	8018040 <rfalSetBitRate+0x3dc>
 8018024:	4b3e      	ldr	r3, [pc, #248]	; (8018120 <rfalSetBitRate+0x4bc>)
 8018026:	789b      	ldrb	r3, [r3, #2]
 8018028:	b29b      	uxth	r3, r3
 801802a:	3301      	adds	r3, #1
 801802c:	b29b      	uxth	r3, r3
 801802e:	011b      	lsls	r3, r3, #4
 8018030:	b29b      	uxth	r3, r3
 8018032:	b2db      	uxtb	r3, r3
 8018034:	b29b      	uxth	r3, r3
 8018036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801803a:	f043 0301 	orr.w	r3, r3, #1
 801803e:	b29b      	uxth	r3, r3
 8018040:	4618      	mov	r0, r3
 8018042:	f7f7 fbef 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8018046:	4b36      	ldr	r3, [pc, #216]	; (8018120 <rfalSetBitRate+0x4bc>)
 8018048:	78db      	ldrb	r3, [r3, #3]
 801804a:	2bea      	cmp	r3, #234	; 0xea
 801804c:	d90c      	bls.n	8018068 <rfalSetBitRate+0x404>
 801804e:	4b34      	ldr	r3, [pc, #208]	; (8018120 <rfalSetBitRate+0x4bc>)
 8018050:	78db      	ldrb	r3, [r3, #3]
 8018052:	b29b      	uxth	r3, r3
 8018054:	011b      	lsls	r3, r3, #4
 8018056:	b29b      	uxth	r3, r3
 8018058:	b2db      	uxtb	r3, r3
 801805a:	b29b      	uxth	r3, r3
 801805c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018060:	f043 0302 	orr.w	r3, r3, #2
 8018064:	b29b      	uxth	r3, r3
 8018066:	e00d      	b.n	8018084 <rfalSetBitRate+0x420>
 8018068:	4b2d      	ldr	r3, [pc, #180]	; (8018120 <rfalSetBitRate+0x4bc>)
 801806a:	78db      	ldrb	r3, [r3, #3]
 801806c:	b29b      	uxth	r3, r3
 801806e:	3301      	adds	r3, #1
 8018070:	b29b      	uxth	r3, r3
 8018072:	011b      	lsls	r3, r3, #4
 8018074:	b29b      	uxth	r3, r3
 8018076:	b2db      	uxtb	r3, r3
 8018078:	b29b      	uxth	r3, r3
 801807a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801807e:	f043 0302 	orr.w	r3, r3, #2
 8018082:	b29b      	uxth	r3, r3
 8018084:	4618      	mov	r0, r3
 8018086:	f7f7 fbcd 	bl	800f824 <rfalSetAnalogConfig>
            break;
 801808a:	e043      	b.n	8018114 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 801808c:	2009      	movs	r0, #9
 801808e:	f7f7 fbc9 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8018092:	4b23      	ldr	r3, [pc, #140]	; (8018120 <rfalSetBitRate+0x4bc>)
 8018094:	789b      	ldrb	r3, [r3, #2]
 8018096:	2bea      	cmp	r3, #234	; 0xea
 8018098:	d90a      	bls.n	80180b0 <rfalSetBitRate+0x44c>
 801809a:	4b21      	ldr	r3, [pc, #132]	; (8018120 <rfalSetBitRate+0x4bc>)
 801809c:	789b      	ldrb	r3, [r3, #2]
 801809e:	b29b      	uxth	r3, r3
 80180a0:	011b      	lsls	r3, r3, #4
 80180a2:	b29b      	uxth	r3, r3
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	b29a      	uxth	r2, r3
 80180a8:	4b1e      	ldr	r3, [pc, #120]	; (8018124 <rfalSetBitRate+0x4c0>)
 80180aa:	4313      	orrs	r3, r2
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	e00b      	b.n	80180c8 <rfalSetBitRate+0x464>
 80180b0:	4b1b      	ldr	r3, [pc, #108]	; (8018120 <rfalSetBitRate+0x4bc>)
 80180b2:	789b      	ldrb	r3, [r3, #2]
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	3301      	adds	r3, #1
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	011b      	lsls	r3, r3, #4
 80180bc:	b29b      	uxth	r3, r3
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	4b18      	ldr	r3, [pc, #96]	; (8018124 <rfalSetBitRate+0x4c0>)
 80180c4:	4313      	orrs	r3, r2
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7f7 fbab 	bl	800f824 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80180ce:	4b14      	ldr	r3, [pc, #80]	; (8018120 <rfalSetBitRate+0x4bc>)
 80180d0:	78db      	ldrb	r3, [r3, #3]
 80180d2:	2bea      	cmp	r3, #234	; 0xea
 80180d4:	d90a      	bls.n	80180ec <rfalSetBitRate+0x488>
 80180d6:	4b12      	ldr	r3, [pc, #72]	; (8018120 <rfalSetBitRate+0x4bc>)
 80180d8:	78db      	ldrb	r3, [r3, #3]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	011b      	lsls	r3, r3, #4
 80180de:	b29b      	uxth	r3, r3
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	4b10      	ldr	r3, [pc, #64]	; (8018128 <rfalSetBitRate+0x4c4>)
 80180e6:	4313      	orrs	r3, r2
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	e00b      	b.n	8018104 <rfalSetBitRate+0x4a0>
 80180ec:	4b0c      	ldr	r3, [pc, #48]	; (8018120 <rfalSetBitRate+0x4bc>)
 80180ee:	78db      	ldrb	r3, [r3, #3]
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	3301      	adds	r3, #1
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	011b      	lsls	r3, r3, #4
 80180f8:	b29b      	uxth	r3, r3
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	4b0a      	ldr	r3, [pc, #40]	; (8018128 <rfalSetBitRate+0x4c4>)
 8018100:	4313      	orrs	r3, r2
 8018102:	b29b      	uxth	r3, r3
 8018104:	4618      	mov	r0, r3
 8018106:	f7f7 fb8d 	bl	800f824 <rfalSetAnalogConfig>
            break;
 801810a:	e003      	b.n	8018114 <rfalSetBitRate+0x4b0>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 801810c:	2321      	movs	r3, #33	; 0x21
 801810e:	e002      	b.n	8018116 <rfalSetBitRate+0x4b2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8018110:	230f      	movs	r3, #15
 8018112:	e000      	b.n	8018116 <rfalSetBitRate+0x4b2>
    }
    
    return ERR_NONE;
 8018114:	2300      	movs	r3, #0
}
 8018116:	4618      	mov	r0, r3
 8018118:	3720      	adds	r7, #32
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	200039f8 	.word	0x200039f8
 8018124:	ffff8801 	.word	0xffff8801
 8018128:	ffff8802 	.word	0xffff8802

0801812c <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 801812c:	b480      	push	{r7}
 801812e:	b083      	sub	sp, #12
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8018136:	4b0f      	ldr	r3, [pc, #60]	; (8018174 <rfalGetBitRate+0x48>)
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d003      	beq.n	8018146 <rfalGetBitRate+0x1a>
 801813e:	4b0d      	ldr	r3, [pc, #52]	; (8018174 <rfalGetBitRate+0x48>)
 8018140:	785b      	ldrb	r3, [r3, #1]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d101      	bne.n	801814a <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 8018146:	2321      	movs	r3, #33	; 0x21
 8018148:	e00e      	b.n	8018168 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d003      	beq.n	8018158 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 8018150:	4b08      	ldr	r3, [pc, #32]	; (8018174 <rfalGetBitRate+0x48>)
 8018152:	789a      	ldrb	r2, [r3, #2]
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d003      	beq.n	8018166 <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 801815e:	4b05      	ldr	r3, [pc, #20]	; (8018174 <rfalGetBitRate+0x48>)
 8018160:	78da      	ldrb	r2, [r3, #3]
 8018162:	683b      	ldr	r3, [r7, #0]
 8018164:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8018166:	2300      	movs	r3, #0
}
 8018168:	4618      	mov	r0, r3
 801816a:	370c      	adds	r7, #12
 801816c:	46bd      	mov	sp, r7
 801816e:	bc80      	pop	{r7}
 8018170:	4770      	bx	lr
 8018172:	bf00      	nop
 8018174:	200039f8 	.word	0x200039f8

08018178 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 8018178:	b480      	push	{r7}
 801817a:	b083      	sub	sp, #12
 801817c:	af00      	add	r7, sp, #0
 801817e:	4603      	mov	r3, r0
 8018180:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 8018182:	4a04      	ldr	r2, [pc, #16]	; (8018194 <rfalSetErrorHandling+0x1c>)
 8018184:	79fb      	ldrb	r3, [r7, #7]
 8018186:	71d3      	strb	r3, [r2, #7]
}
 8018188:	bf00      	nop
 801818a:	370c      	adds	r7, #12
 801818c:	46bd      	mov	sp, r7
 801818e:	bc80      	pop	{r7}
 8018190:	4770      	bx	lr
 8018192:	bf00      	nop
 8018194:	200039f8 	.word	0x200039f8

08018198 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 8018198:	b480      	push	{r7}
 801819a:	b083      	sub	sp, #12
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	4a05      	ldr	r2, [pc, #20]	; (80181b8 <rfalSetFDTPoll+0x20>)
 80181a4:	4293      	cmp	r3, r2
 80181a6:	bf28      	it	cs
 80181a8:	4613      	movcs	r3, r2
 80181aa:	4a04      	ldr	r2, [pc, #16]	; (80181bc <rfalSetFDTPoll+0x24>)
 80181ac:	6113      	str	r3, [r2, #16]
}
 80181ae:	bf00      	nop
 80181b0:	370c      	adds	r7, #12
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bc80      	pop	{r7}
 80181b6:	4770      	bx	lr
 80181b8:	0007fff8 	.word	0x0007fff8
 80181bc:	200039f8 	.word	0x200039f8

080181c0 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 80181ce:	bf28      	it	cs
 80181d0:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 80181d4:	4a03      	ldr	r2, [pc, #12]	; (80181e4 <rfalSetFDTListen+0x24>)
 80181d6:	60d3      	str	r3, [r2, #12]
}
 80181d8:	bf00      	nop
 80181da:	370c      	adds	r7, #12
 80181dc:	46bd      	mov	sp, r7
 80181de:	bc80      	pop	{r7}
 80181e0:	4770      	bx	lr
 80181e2:	bf00      	nop
 80181e4:	200039f8 	.word	0x200039f8

080181e8 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 80181e8:	b480      	push	{r7}
 80181ea:	b083      	sub	sp, #12
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	4a05      	ldr	r2, [pc, #20]	; (8018208 <rfalSetGT+0x20>)
 80181f4:	4293      	cmp	r3, r2
 80181f6:	bf28      	it	cs
 80181f8:	4613      	movcs	r3, r2
 80181fa:	4a04      	ldr	r2, [pc, #16]	; (801820c <rfalSetGT+0x24>)
 80181fc:	6093      	str	r3, [r2, #8]
}
 80181fe:	bf00      	nop
 8018200:	370c      	adds	r7, #12
 8018202:	46bd      	mov	sp, r7
 8018204:	bc80      	pop	{r7}
 8018206:	4770      	bx	lr
 8018208:	040a8bc0 	.word	0x040a8bc0
 801820c:	200039f8 	.word	0x200039f8

08018210 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 8018210:	b580      	push	{r7, lr}
 8018212:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8018214:	4b09      	ldr	r3, [pc, #36]	; (801823c <rfalIsGTExpired+0x2c>)
 8018216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00c      	beq.n	8018236 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 801821c:	4b07      	ldr	r3, [pc, #28]	; (801823c <rfalIsGTExpired+0x2c>)
 801821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018220:	4618      	mov	r0, r3
 8018222:	f7ec fa3f 	bl	80046a4 <timerIsExpired>
 8018226:	4603      	mov	r3, r0
 8018228:	f083 0301 	eor.w	r3, r3, #1
 801822c:	b2db      	uxtb	r3, r3
 801822e:	2b00      	cmp	r3, #0
 8018230:	d001      	beq.n	8018236 <rfalIsGTExpired+0x26>
        {
            return false;
 8018232:	2300      	movs	r3, #0
 8018234:	e000      	b.n	8018238 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 8018236:	2301      	movs	r3, #1
}
 8018238:	4618      	mov	r0, r3
 801823a:	bd80      	pop	{r7, pc}
 801823c:	200039f8 	.word	0x200039f8

08018240 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 8018246:	2280      	movs	r2, #128	; 0x80
 8018248:	2180      	movs	r1, #128	; 0x80
 801824a:	2002      	movs	r0, #2
 801824c:	f7eb fad6 	bl	80037fc <st25r3911CheckReg>
 8018250:	4603      	mov	r3, r0
 8018252:	f083 0301 	eor.w	r3, r3, #1
 8018256:	b2db      	uxtb	r3, r3
 8018258:	2b00      	cmp	r3, #0
 801825a:	d103      	bne.n	8018264 <rfalFieldOnAndStartGT+0x24>
 801825c:	4b27      	ldr	r3, [pc, #156]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 801825e:	781b      	ldrb	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d101      	bne.n	8018268 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 8018264:	2321      	movs	r3, #33	; 0x21
 8018266:	e044      	b.n	80182f2 <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 8018268:	2300      	movs	r3, #0
 801826a:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 801826c:	2002      	movs	r0, #2
 801826e:	f7f7 fad9 	bl	800f824 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 8018272:	2208      	movs	r2, #8
 8018274:	2108      	movs	r1, #8
 8018276:	2002      	movs	r0, #2
 8018278:	f7eb fac0 	bl	80037fc <st25r3911CheckReg>
 801827c:	4603      	mov	r3, r0
 801827e:	f083 0301 	eor.w	r3, r3, #1
 8018282:	b2db      	uxtb	r3, r3
 8018284:	2b00      	cmp	r3, #0
 8018286:	d106      	bne.n	8018296 <rfalFieldOnAndStartGT+0x56>
 8018288:	4b1c      	ldr	r3, [pc, #112]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 801828a:	791b      	ldrb	r3, [r3, #4]
 801828c:	f083 0301 	eor.w	r3, r3, #1
 8018290:	b2db      	uxtb	r3, r3
 8018292:	2b00      	cmp	r3, #0
 8018294:	d016      	beq.n	80182c4 <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 8018296:	2300      	movs	r3, #0
 8018298:	22ff      	movs	r2, #255	; 0xff
 801829a:	21ff      	movs	r1, #255	; 0xff
 801829c:	20ca      	movs	r0, #202	; 0xca
 801829e:	f7eb fb2d 	bl	80038fc <st25r3911PerformCollisionAvoidance>
 80182a2:	4603      	mov	r3, r0
 80182a4:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 80182a6:	2208      	movs	r2, #8
 80182a8:	2108      	movs	r1, #8
 80182aa:	2002      	movs	r0, #2
 80182ac:	f7eb faa6 	bl	80037fc <st25r3911CheckReg>
 80182b0:	4603      	mov	r3, r0
 80182b2:	461a      	mov	r2, r3
 80182b4:	4b11      	ldr	r3, [pc, #68]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 80182b6:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 80182b8:	4b10      	ldr	r3, [pc, #64]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 80182ba:	791b      	ldrb	r3, [r3, #4]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d001      	beq.n	80182c4 <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 80182c0:	f7eb f8cb 	bl	800345a <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 80182c4:	4b0d      	ldr	r3, [pc, #52]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 80182c6:	689b      	ldr	r3, [r3, #8]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d011      	beq.n	80182f0 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 80182cc:	4b0b      	ldr	r3, [pc, #44]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 80182ce:	689b      	ldr	r3, [r3, #8]
 80182d0:	f243 42f8 	movw	r2, #13560	; 0x34f8
 80182d4:	4293      	cmp	r3, r2
 80182d6:	bf38      	it	cc
 80182d8:	4613      	movcc	r3, r2
 80182da:	4a09      	ldr	r2, [pc, #36]	; (8018300 <rfalFieldOnAndStartGT+0xc0>)
 80182dc:	fba2 2303 	umull	r2, r3, r2, r3
 80182e0:	0b1b      	lsrs	r3, r3, #12
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7ec f9cf 	bl	8004688 <timerCalculateTimer>
 80182ea:	4603      	mov	r3, r0
 80182ec:	4a03      	ldr	r2, [pc, #12]	; (80182fc <rfalFieldOnAndStartGT+0xbc>)
 80182ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 80182f0:	88fb      	ldrh	r3, [r7, #6]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3708      	adds	r7, #8
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	200039f8 	.word	0x200039f8
 8018300:	4d542005 	.word	0x4d542005

08018304 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 8018304:	b580      	push	{r7, lr}
 8018306:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8018308:	4b08      	ldr	r3, [pc, #32]	; (801832c <rfalFieldOff+0x28>)
 801830a:	7d1b      	ldrb	r3, [r3, #20]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d001      	beq.n	8018314 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8018310:	f000 faca 	bl	80188a8 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 8018314:	f7eb f8a9 	bl	800346a <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8018318:	2003      	movs	r0, #3
 801831a:	f7f7 fa83 	bl	800f824 <rfalSetAnalogConfig>
    gRFAL.field = false;
 801831e:	4b03      	ldr	r3, [pc, #12]	; (801832c <rfalFieldOff+0x28>)
 8018320:	2200      	movs	r2, #0
 8018322:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 8018324:	2300      	movs	r3, #0
}
 8018326:	4618      	mov	r0, r3
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	200039f8 	.word	0x200039f8

08018330 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8018330:	b5b0      	push	{r4, r5, r7, lr}
 8018332:	b084      	sub	sp, #16
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d101      	bne.n	8018342 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 801833e:	2307      	movs	r3, #7
 8018340:	e11c      	b.n	801857c <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 8018342:	4b90      	ldr	r3, [pc, #576]	; (8018584 <rfalStartTransceive+0x254>)
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	2b01      	cmp	r3, #1
 8018348:	f240 8117 	bls.w	801857a <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 801834c:	2208      	movs	r2, #8
 801834e:	2108      	movs	r1, #8
 8018350:	2002      	movs	r0, #2
 8018352:	f7eb fa53 	bl	80037fc <st25r3911CheckReg>
 8018356:	4603      	mov	r3, r0
 8018358:	f083 0301 	eor.w	r3, r3, #1
 801835c:	b2db      	uxtb	r3, r3
 801835e:	2b00      	cmp	r3, #0
 8018360:	d011      	beq.n	8018386 <rfalStartTransceive+0x56>
 8018362:	4b88      	ldr	r3, [pc, #544]	; (8018584 <rfalStartTransceive+0x254>)
 8018364:	785b      	ldrb	r3, [r3, #1]
 8018366:	2b0a      	cmp	r3, #10
 8018368:	d00d      	beq.n	8018386 <rfalStartTransceive+0x56>
 801836a:	4b86      	ldr	r3, [pc, #536]	; (8018584 <rfalStartTransceive+0x254>)
 801836c:	785b      	ldrb	r3, [r3, #1]
 801836e:	2b0b      	cmp	r3, #11
 8018370:	d009      	beq.n	8018386 <rfalStartTransceive+0x56>
 8018372:	4b84      	ldr	r3, [pc, #528]	; (8018584 <rfalStartTransceive+0x254>)
 8018374:	785b      	ldrb	r3, [r3, #1]
 8018376:	2b0c      	cmp	r3, #12
 8018378:	d005      	beq.n	8018386 <rfalStartTransceive+0x56>
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d001      	beq.n	8018386 <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 8018382:	2321      	movs	r3, #33	; 0x21
 8018384:	e0fa      	b.n	801857c <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 8018386:	4b7f      	ldr	r3, [pc, #508]	; (8018584 <rfalStartTransceive+0x254>)
 8018388:	687a      	ldr	r2, [r7, #4]
 801838a:	f103 041c 	add.w	r4, r3, #28
 801838e:	4615      	mov	r5, r2
 8018390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 801839c:	4b79      	ldr	r3, [pc, #484]	; (8018584 <rfalStartTransceive+0x254>)
 801839e:	68db      	ldr	r3, [r3, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d031      	beq.n	8018408 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 80183a4:	2340      	movs	r3, #64	; 0x40
 80183a6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 80183a8:	4b76      	ldr	r3, [pc, #472]	; (8018584 <rfalStartTransceive+0x254>)
 80183aa:	785b      	ldrb	r3, [r3, #1]
 80183ac:	2b01      	cmp	r3, #1
 80183ae:	d103      	bne.n	80183b8 <rfalStartTransceive+0x88>
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80183b6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 80183b8:	4b72      	ldr	r3, [pc, #456]	; (8018584 <rfalStartTransceive+0x254>)
 80183ba:	785b      	ldrb	r3, [r3, #1]
 80183bc:	2b02      	cmp	r3, #2
 80183be:	d103      	bne.n	80183c8 <rfalStartTransceive+0x98>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80183c6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 80183c8:	4b6e      	ldr	r3, [pc, #440]	; (8018584 <rfalStartTransceive+0x254>)
 80183ca:	785b      	ldrb	r3, [r3, #1]
 80183cc:	2b03      	cmp	r3, #3
 80183ce:	d103      	bne.n	80183d8 <rfalStartTransceive+0xa8>
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80183d6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 80183d8:	4b6a      	ldr	r3, [pc, #424]	; (8018584 <rfalStartTransceive+0x254>)
 80183da:	785b      	ldrb	r3, [r3, #1]
 80183dc:	2b07      	cmp	r3, #7
 80183de:	d102      	bne.n	80183e6 <rfalStartTransceive+0xb6>
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	3380      	adds	r3, #128	; 0x80
 80183e4:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 80183e6:	4b67      	ldr	r3, [pc, #412]	; (8018584 <rfalStartTransceive+0x254>)
 80183e8:	68db      	ldr	r3, [r3, #12]
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d806      	bhi.n	80183fe <rfalStartTransceive+0xce>
 80183f0:	4b64      	ldr	r3, [pc, #400]	; (8018584 <rfalStartTransceive+0x254>)
 80183f2:	68da      	ldr	r2, [r3, #12]
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	1ad3      	subs	r3, r2, r3
 80183f8:	099b      	lsrs	r3, r3, #6
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	e000      	b.n	8018400 <rfalStartTransceive+0xd0>
 80183fe:	2304      	movs	r3, #4
 8018400:	4619      	mov	r1, r3
 8018402:	200e      	movs	r0, #14
 8018404:	f7eb fd34 	bl	8003e70 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8018408:	4b5e      	ldr	r3, [pc, #376]	; (8018584 <rfalStartTransceive+0x254>)
 801840a:	785b      	ldrb	r3, [r3, #1]
 801840c:	2b09      	cmp	r3, #9
 801840e:	d053      	beq.n	80184b8 <rfalStartTransceive+0x188>
 8018410:	4b5c      	ldr	r3, [pc, #368]	; (8018584 <rfalStartTransceive+0x254>)
 8018412:	785b      	ldrb	r3, [r3, #1]
 8018414:	2b0d      	cmp	r3, #13
 8018416:	d04f      	beq.n	80184b8 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8018418:	4b5a      	ldr	r3, [pc, #360]	; (8018584 <rfalStartTransceive+0x254>)
 801841a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018420:	d046      	beq.n	80184b0 <rfalStartTransceive+0x180>
 8018422:	4b58      	ldr	r3, [pc, #352]	; (8018584 <rfalStartTransceive+0x254>)
 8018424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018426:	2b00      	cmp	r3, #0
 8018428:	d042      	beq.n	80184b0 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 801842a:	4b56      	ldr	r3, [pc, #344]	; (8018584 <rfalStartTransceive+0x254>)
 801842c:	68da      	ldr	r2, [r3, #12]
 801842e:	4b55      	ldr	r3, [pc, #340]	; (8018584 <rfalStartTransceive+0x254>)
 8018430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018432:	429a      	cmp	r2, r3
 8018434:	d301      	bcc.n	801843a <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 8018436:	2307      	movs	r3, #7
 8018438:	e0a0      	b.n	801857c <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 801843a:	2340      	movs	r3, #64	; 0x40
 801843c:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 801843e:	4b51      	ldr	r3, [pc, #324]	; (8018584 <rfalStartTransceive+0x254>)
 8018440:	785b      	ldrb	r3, [r3, #1]
 8018442:	2b01      	cmp	r3, #1
 8018444:	d103      	bne.n	801844e <rfalStartTransceive+0x11e>
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801844c:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 801844e:	4b4d      	ldr	r3, [pc, #308]	; (8018584 <rfalStartTransceive+0x254>)
 8018450:	785b      	ldrb	r3, [r3, #1]
 8018452:	2b02      	cmp	r3, #2
 8018454:	d103      	bne.n	801845e <rfalStartTransceive+0x12e>
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801845c:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 801845e:	4b49      	ldr	r3, [pc, #292]	; (8018584 <rfalStartTransceive+0x254>)
 8018460:	785b      	ldrb	r3, [r3, #1]
 8018462:	2b03      	cmp	r3, #3
 8018464:	d103      	bne.n	801846e <rfalStartTransceive+0x13e>
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 801846c:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 801846e:	4b45      	ldr	r3, [pc, #276]	; (8018584 <rfalStartTransceive+0x254>)
 8018470:	785b      	ldrb	r3, [r3, #1]
 8018472:	2b06      	cmp	r3, #6
 8018474:	d10b      	bne.n	801848e <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8018476:	4b43      	ldr	r3, [pc, #268]	; (8018584 <rfalStartTransceive+0x254>)
 8018478:	789b      	ldrb	r3, [r3, #2]
 801847a:	2b01      	cmp	r3, #1
 801847c:	d102      	bne.n	8018484 <rfalStartTransceive+0x154>
 801847e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018482:	e001      	b.n	8018488 <rfalStartTransceive+0x158>
 8018484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018488:	68fa      	ldr	r2, [r7, #12]
 801848a:	4413      	add	r3, r2
 801848c:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 801848e:	4b3d      	ldr	r3, [pc, #244]	; (8018584 <rfalStartTransceive+0x254>)
 8018490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	4413      	add	r3, r2
 8018496:	4a3c      	ldr	r2, [pc, #240]	; (8018588 <rfalStartTransceive+0x258>)
 8018498:	4293      	cmp	r3, r2
 801849a:	bf28      	it	cs
 801849c:	4613      	movcs	r3, r2
 801849e:	4a39      	ldr	r2, [pc, #228]	; (8018584 <rfalStartTransceive+0x254>)
 80184a0:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80184a2:	4b38      	ldr	r3, [pc, #224]	; (8018584 <rfalStartTransceive+0x254>)
 80184a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184a6:	099b      	lsrs	r3, r3, #6
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7eb f9e9 	bl	8003880 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80184ae:	e006      	b.n	80184be <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 80184b0:	2000      	movs	r0, #0
 80184b2:	f7eb f9e5 	bl	8003880 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80184b6:	e002      	b.n	80184be <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 80184b8:	2080      	movs	r0, #128	; 0x80
 80184ba:	f7eb f9e1 	bl	8003880 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 80184be:	4b31      	ldr	r3, [pc, #196]	; (8018584 <rfalStartTransceive+0x254>)
 80184c0:	2203      	movs	r2, #3
 80184c2:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80184c4:	4b2f      	ldr	r3, [pc, #188]	; (8018584 <rfalStartTransceive+0x254>)
 80184c6:	220b      	movs	r2, #11
 80184c8:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 80184ca:	4b2e      	ldr	r3, [pc, #184]	; (8018584 <rfalStartTransceive+0x254>)
 80184cc:	2202      	movs	r2, #2
 80184ce:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 80184d0:	4b2c      	ldr	r3, [pc, #176]	; (8018584 <rfalStartTransceive+0x254>)
 80184d2:	2200      	movs	r2, #0
 80184d4:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80184d6:	4b2b      	ldr	r3, [pc, #172]	; (8018584 <rfalStartTransceive+0x254>)
 80184d8:	785b      	ldrb	r3, [r3, #1]
 80184da:	2b07      	cmp	r3, #7
 80184dc:	d003      	beq.n	80184e6 <rfalStartTransceive+0x1b6>
 80184de:	4b29      	ldr	r3, [pc, #164]	; (8018584 <rfalStartTransceive+0x254>)
 80184e0:	785b      	ldrb	r3, [r3, #1]
 80184e2:	2b08      	cmp	r3, #8
 80184e4:	d128      	bne.n	8018538 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 80184e6:	4a27      	ldr	r2, [pc, #156]	; (8018584 <rfalStartTransceive+0x254>)
 80184e8:	4b26      	ldr	r3, [pc, #152]	; (8018584 <rfalStartTransceive+0x254>)
 80184ea:	f502 7473 	add.w	r4, r2, #972	; 0x3cc
 80184ee:	f103 051c 	add.w	r5, r3, #28
 80184f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80184fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 80184fe:	4b21      	ldr	r3, [pc, #132]	; (8018584 <rfalStartTransceive+0x254>)
 8018500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <rfalStartTransceive+0x1dc>
 8018508:	4b20      	ldr	r3, [pc, #128]	; (801858c <rfalStartTransceive+0x25c>)
 801850a:	e000      	b.n	801850e <rfalStartTransceive+0x1de>
 801850c:	2300      	movs	r3, #0
 801850e:	4a1d      	ldr	r2, [pc, #116]	; (8018584 <rfalStartTransceive+0x254>)
 8018510:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8018512:	4b1c      	ldr	r3, [pc, #112]	; (8018584 <rfalStartTransceive+0x254>)
 8018514:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8018518:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 801851a:	4b1a      	ldr	r3, [pc, #104]	; (8018584 <rfalStartTransceive+0x254>)
 801851c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018520:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8018524:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8018528:	4a16      	ldr	r2, [pc, #88]	; (8018584 <rfalStartTransceive+0x254>)
 801852a:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 801852c:	4b15      	ldr	r3, [pc, #84]	; (8018584 <rfalStartTransceive+0x254>)
 801852e:	69db      	ldr	r3, [r3, #28]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d001      	beq.n	8018538 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 8018534:	2300      	movs	r3, #0
 8018536:	e021      	b.n	801857c <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8018538:	4b12      	ldr	r3, [pc, #72]	; (8018584 <rfalStartTransceive+0x254>)
 801853a:	69db      	ldr	r3, [r3, #28]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d003      	beq.n	8018548 <rfalStartTransceive+0x218>
 8018540:	4b10      	ldr	r3, [pc, #64]	; (8018584 <rfalStartTransceive+0x254>)
 8018542:	8c1b      	ldrh	r3, [r3, #32]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d116      	bne.n	8018576 <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8018548:	f000 f9c4 	bl	80188d4 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 801854c:	4b0d      	ldr	r3, [pc, #52]	; (8018584 <rfalStartTransceive+0x254>)
 801854e:	785b      	ldrb	r3, [r3, #1]
 8018550:	2b09      	cmp	r3, #9
 8018552:	d003      	beq.n	801855c <rfalStartTransceive+0x22c>
 8018554:	4b0b      	ldr	r3, [pc, #44]	; (8018584 <rfalStartTransceive+0x254>)
 8018556:	785b      	ldrb	r3, [r3, #1]
 8018558:	2b0d      	cmp	r3, #13
 801855a:	d103      	bne.n	8018564 <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 801855c:	2108      	movs	r1, #8
 801855e:	2002      	movs	r0, #2
 8018560:	f7eb fcd2 	bl	8003f08 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8018564:	20d1      	movs	r0, #209	; 0xd1
 8018566:	f7eb fe11 	bl	800418c <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 801856a:	20e3      	movs	r0, #227	; 0xe3
 801856c:	f7eb fe0e 	bl	800418c <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8018570:	4b04      	ldr	r3, [pc, #16]	; (8018584 <rfalStartTransceive+0x254>)
 8018572:	2251      	movs	r2, #81	; 0x51
 8018574:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 8018576:	2300      	movs	r3, #0
 8018578:	e000      	b.n	801857c <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 801857a:	2321      	movs	r3, #33	; 0x21
}
 801857c:	4618      	mov	r0, r3
 801857e:	3710      	adds	r7, #16
 8018580:	46bd      	mov	sp, r7
 8018582:	bdb0      	pop	{r4, r5, r7, pc}
 8018584:	200039f8 	.word	0x200039f8
 8018588:	0ffff000 	.word	0x0ffff000
 801858c:	20003bb8 	.word	0x20003bb8

08018590 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 8018590:	b480      	push	{r7}
 8018592:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8018594:	4b08      	ldr	r3, [pc, #32]	; (80185b8 <rfalIsTransceiveInTx+0x28>)
 8018596:	7d1b      	ldrb	r3, [r3, #20]
 8018598:	2b0a      	cmp	r3, #10
 801859a:	d905      	bls.n	80185a8 <rfalIsTransceiveInTx+0x18>
 801859c:	4b06      	ldr	r3, [pc, #24]	; (80185b8 <rfalIsTransceiveInTx+0x28>)
 801859e:	7d1b      	ldrb	r3, [r3, #20]
 80185a0:	2b50      	cmp	r3, #80	; 0x50
 80185a2:	d801      	bhi.n	80185a8 <rfalIsTransceiveInTx+0x18>
 80185a4:	2301      	movs	r3, #1
 80185a6:	e000      	b.n	80185aa <rfalIsTransceiveInTx+0x1a>
 80185a8:	2300      	movs	r3, #0
 80185aa:	f003 0301 	and.w	r3, r3, #1
 80185ae:	b2db      	uxtb	r3, r3
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bc80      	pop	{r7}
 80185b6:	4770      	bx	lr
 80185b8:	200039f8 	.word	0x200039f8

080185bc <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 80185bc:	b480      	push	{r7}
 80185be:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 80185c0:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <rfalIsTransceiveInRx+0x1c>)
 80185c2:	7d1b      	ldrb	r3, [r3, #20]
 80185c4:	2b50      	cmp	r3, #80	; 0x50
 80185c6:	bf8c      	ite	hi
 80185c8:	2301      	movhi	r3, #1
 80185ca:	2300      	movls	r3, #0
 80185cc:	b2db      	uxtb	r3, r3
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bc80      	pop	{r7}
 80185d4:	4770      	bx	lr
 80185d6:	bf00      	nop
 80185d8:	200039f8 	.word	0x200039f8

080185dc <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b08c      	sub	sp, #48	; 0x30
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	60f8      	str	r0, [r7, #12]
 80185e4:	607a      	str	r2, [r7, #4]
 80185e6:	461a      	mov	r2, r3
 80185e8:	460b      	mov	r3, r1
 80185ea:	817b      	strh	r3, [r7, #10]
 80185ec:	4613      	mov	r3, r2
 80185ee:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	613b      	str	r3, [r7, #16]
 80185f4:	897b      	ldrh	r3, [r7, #10]
 80185f6:	00db      	lsls	r3, r3, #3
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	82bb      	strh	r3, [r7, #20]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	61bb      	str	r3, [r7, #24]
 8018600:	893b      	ldrh	r3, [r7, #8]
 8018602:	00db      	lsls	r3, r3, #3
 8018604:	b29b      	uxth	r3, r3
 8018606:	83bb      	strh	r3, [r7, #28]
 8018608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860a:	623b      	str	r3, [r7, #32]
 801860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801860e:	627b      	str	r3, [r7, #36]	; 0x24
 8018610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018612:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8018614:	f107 0310 	add.w	r3, r7, #16
 8018618:	4618      	mov	r0, r3
 801861a:	f7ff fe89 	bl	8018330 <rfalStartTransceive>
 801861e:	4603      	mov	r3, r0
 8018620:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8018622:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <rfalTransceiveBlockingTx+0x50>
 8018628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801862a:	e002      	b.n	8018632 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 801862c:	f000 f805 	bl	801863a <rfalTransceiveRunBlockingTx>
 8018630:	4603      	mov	r3, r0
}
 8018632:	4618      	mov	r0, r3
 8018634:	3730      	adds	r7, #48	; 0x30
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}

0801863a <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 801863a:	b580      	push	{r7, lr}
 801863c:	b082      	sub	sp, #8
 801863e:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 8018640:	f000 f892 	bl	8018768 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8018644:	f000 f880 	bl	8018748 <rfalGetTransceiveStatus>
 8018648:	4603      	mov	r3, r0
 801864a:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 801864c:	f7ff ffa0 	bl	8018590 <rfalIsTransceiveInTx>
 8018650:	4603      	mov	r3, r0
 8018652:	2b00      	cmp	r3, #0
 8018654:	d002      	beq.n	801865c <rfalTransceiveRunBlockingTx+0x22>
 8018656:	88fb      	ldrh	r3, [r7, #6]
 8018658:	2b02      	cmp	r3, #2
 801865a:	d0f1      	beq.n	8018640 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 801865c:	f7ff ffae 	bl	80185bc <rfalIsTransceiveInRx>
 8018660:	4603      	mov	r3, r0
 8018662:	2b00      	cmp	r3, #0
 8018664:	d001      	beq.n	801866a <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 8018666:	2300      	movs	r3, #0
 8018668:	e000      	b.n	801866c <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 801866a:	88fb      	ldrh	r3, [r7, #6]
}
 801866c:	4618      	mov	r0, r3
 801866e:	3708      	adds	r7, #8
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b082      	sub	sp, #8
 8018678:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 801867a:	f000 f875 	bl	8018768 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 801867e:	f000 f863 	bl	8018748 <rfalGetTransceiveStatus>
 8018682:	4603      	mov	r3, r0
 8018684:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 8018686:	f7ff ff99 	bl	80185bc <rfalIsTransceiveInRx>
 801868a:	4603      	mov	r3, r0
 801868c:	2b00      	cmp	r3, #0
 801868e:	d002      	beq.n	8018696 <rfalTransceiveBlockingRx+0x22>
 8018690:	88fb      	ldrh	r3, [r7, #6]
 8018692:	2b02      	cmp	r3, #2
 8018694:	d0f1      	beq.n	801867a <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 8018696:	88fb      	ldrh	r3, [r7, #6]
}
 8018698:	4618      	mov	r0, r3
 801869a:	3708      	adds	r7, #8
 801869c:	46bd      	mov	sp, r7
 801869e:	bd80      	pop	{r7, pc}

080186a0 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b08a      	sub	sp, #40	; 0x28
 80186a4:	af04      	add	r7, sp, #16
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	607a      	str	r2, [r7, #4]
 80186aa:	461a      	mov	r2, r3
 80186ac:	460b      	mov	r3, r1
 80186ae:	817b      	strh	r3, [r7, #10]
 80186b0:	4613      	mov	r3, r2
 80186b2:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 80186b4:	893a      	ldrh	r2, [r7, #8]
 80186b6:	8979      	ldrh	r1, [r7, #10]
 80186b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ba:	9302      	str	r3, [sp, #8]
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	9301      	str	r3, [sp, #4]
 80186c0:	6a3b      	ldr	r3, [r7, #32]
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	4613      	mov	r3, r2
 80186c6:	687a      	ldr	r2, [r7, #4]
 80186c8:	68f8      	ldr	r0, [r7, #12]
 80186ca:	f7ff ff87 	bl	80185dc <rfalTransceiveBlockingTx>
 80186ce:	4603      	mov	r3, r0
 80186d0:	82fb      	strh	r3, [r7, #22]
 80186d2:	8afb      	ldrh	r3, [r7, #22]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d001      	beq.n	80186dc <rfalTransceiveBlockingTxRx+0x3c>
 80186d8:	8afb      	ldrh	r3, [r7, #22]
 80186da:	e00e      	b.n	80186fa <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 80186dc:	f7ff ffca 	bl	8018674 <rfalTransceiveBlockingRx>
 80186e0:	4603      	mov	r3, r0
 80186e2:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 80186e4:	6a3b      	ldr	r3, [r7, #32]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d006      	beq.n	80186f8 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 80186ea:	6a3b      	ldr	r3, [r7, #32]
 80186ec:	881b      	ldrh	r3, [r3, #0]
 80186ee:	3307      	adds	r3, #7
 80186f0:	08db      	lsrs	r3, r3, #3
 80186f2:	b29a      	uxth	r2, r3
 80186f4:	6a3b      	ldr	r3, [r7, #32]
 80186f6:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 80186f8:	8afb      	ldrh	r3, [r7, #22]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3718      	adds	r7, #24
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
	...

08018704 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 8018704:	b580      	push	{r7, lr}
 8018706:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 8018708:	4b0e      	ldr	r3, [pc, #56]	; (8018744 <rfalRunTransceiveWorker+0x40>)
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	2b03      	cmp	r3, #3
 801870e:	d115      	bne.n	801873c <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8018710:	f7ff ff3e 	bl	8018590 <rfalIsTransceiveInTx>
 8018714:	4603      	mov	r3, r0
 8018716:	2b00      	cmp	r3, #0
 8018718:	d005      	beq.n	8018726 <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 801871a:	f000 f971 	bl	8018a00 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 801871e:	f000 f813 	bl	8018748 <rfalGetTransceiveStatus>
 8018722:	4603      	mov	r3, r0
 8018724:	e00b      	b.n	801873e <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 8018726:	f7ff ff49 	bl	80185bc <rfalIsTransceiveInRx>
 801872a:	4603      	mov	r3, r0
 801872c:	2b00      	cmp	r3, #0
 801872e:	d005      	beq.n	801873c <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 8018730:	f000 fbb2 	bl	8018e98 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 8018734:	f000 f808 	bl	8018748 <rfalGetTransceiveStatus>
 8018738:	4603      	mov	r3, r0
 801873a:	e000      	b.n	801873e <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 801873c:	2321      	movs	r3, #33	; 0x21
}
 801873e:	4618      	mov	r0, r3
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	200039f8 	.word	0x200039f8

08018748 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 8018748:	b480      	push	{r7}
 801874a:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 801874c:	4b05      	ldr	r3, [pc, #20]	; (8018764 <rfalGetTransceiveStatus+0x1c>)
 801874e:	7d1b      	ldrb	r3, [r3, #20]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d102      	bne.n	801875a <rfalGetTransceiveStatus+0x12>
 8018754:	4b03      	ldr	r3, [pc, #12]	; (8018764 <rfalGetTransceiveStatus+0x1c>)
 8018756:	8adb      	ldrh	r3, [r3, #22]
 8018758:	e000      	b.n	801875c <rfalGetTransceiveStatus+0x14>
 801875a:	2302      	movs	r3, #2
}
 801875c:	4618      	mov	r0, r3
 801875e:	46bd      	mov	sp, r7
 8018760:	bc80      	pop	{r7}
 8018762:	4770      	bx	lr
 8018764:	200039f8 	.word	0x200039f8

08018768 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 8018768:	b580      	push	{r7, lr}
 801876a:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 801876c:	4b0b      	ldr	r3, [pc, #44]	; (801879c <rfalWorker+0x34>)
 801876e:	781b      	ldrb	r3, [r3, #0]
 8018770:	2b05      	cmp	r3, #5
 8018772:	d00c      	beq.n	801878e <rfalWorker+0x26>
 8018774:	2b05      	cmp	r3, #5
 8018776:	dc0d      	bgt.n	8018794 <rfalWorker+0x2c>
 8018778:	2b03      	cmp	r3, #3
 801877a:	d002      	beq.n	8018782 <rfalWorker+0x1a>
 801877c:	2b04      	cmp	r3, #4
 801877e:	d003      	beq.n	8018788 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8018780:	e008      	b.n	8018794 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 8018782:	f7ff ffbf 	bl	8018704 <rfalRunTransceiveWorker>
            break;
 8018786:	e006      	b.n	8018796 <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 8018788:	f001 fb0e 	bl	8019da8 <rfalRunListenModeWorker>
            break;
 801878c:	e003      	b.n	8018796 <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 801878e:	f001 ff0f 	bl	801a5b0 <rfalRunWakeUpModeWorker>
            break;
 8018792:	e000      	b.n	8018796 <rfalWorker+0x2e>
            break;
 8018794:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 8018796:	bf00      	nop
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	200039f8 	.word	0x200039f8

080187a0 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 80187a6:	f24d 13c2 	movw	r3, #53698	; 0xd1c2
 80187aa:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 80187ac:	f000 fedc 	bl	8019568 <rfalFIFOStatusGetNumBytes>
 80187b0:	4603      	mov	r3, r0
 80187b2:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80187b4:	4b3b      	ldr	r3, [pc, #236]	; (80188a4 <rfalErrorHandling+0x104>)
 80187b6:	79db      	ldrb	r3, [r3, #7]
 80187b8:	2b02      	cmp	r3, #2
 80187ba:	d141      	bne.n	8018840 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 80187bc:	f000 fee0 	bl	8019580 <rfalFIFOStatusIsIncompleteByte>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d104      	bne.n	80187d0 <rfalErrorHandling+0x30>
 80187c6:	f000 feed 	bl	80195a4 <rfalFIFOStatusIsMissingPar>
 80187ca:	4603      	mov	r3, r0
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d001      	beq.n	80187d4 <rfalErrorHandling+0x34>
 80187d0:	2301      	movs	r3, #1
 80187d2:	e000      	b.n	80187d6 <rfalErrorHandling+0x36>
 80187d4:	2300      	movs	r3, #0
 80187d6:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 80187d8:	79fb      	ldrb	r3, [r7, #7]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d005      	beq.n	80187ea <rfalErrorHandling+0x4a>
 80187de:	79bb      	ldrb	r3, [r7, #6]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d002      	beq.n	80187ea <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 80187e4:	79fb      	ldrb	r3, [r7, #7]
 80187e6:	3b01      	subs	r3, #1
 80187e8:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 80187ea:	4b2e      	ldr	r3, [pc, #184]	; (80188a4 <rfalErrorHandling+0x104>)
 80187ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80187ee:	461a      	mov	r2, r3
 80187f0:	79fb      	ldrb	r3, [r7, #7]
 80187f2:	4413      	add	r3, r2
 80187f4:	2b03      	cmp	r3, #3
 80187f6:	dc51      	bgt.n	801889c <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 80187f8:	4b2a      	ldr	r3, [pc, #168]	; (80188a4 <rfalErrorHandling+0x104>)
 80187fa:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 80187fc:	2b1d      	cmp	r3, #29
 80187fe:	d00e      	beq.n	801881e <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8018800:	4b28      	ldr	r3, [pc, #160]	; (80188a4 <rfalErrorHandling+0x104>)
 8018802:	8adb      	ldrh	r3, [r3, #22]
 8018804:	2b09      	cmp	r3, #9
 8018806:	d00a      	beq.n	801881e <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8018808:	4b26      	ldr	r3, [pc, #152]	; (80188a4 <rfalErrorHandling+0x104>)
 801880a:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801880c:	2b1b      	cmp	r3, #27
 801880e:	d006      	beq.n	801881e <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8018810:	4b24      	ldr	r3, [pc, #144]	; (80188a4 <rfalErrorHandling+0x104>)
 8018812:	8adb      	ldrh	r3, [r3, #22]
 8018814:	2b15      	cmp	r3, #21
 8018816:	d002      	beq.n	801881e <rfalErrorHandling+0x7e>
 8018818:	79bb      	ldrb	r3, [r7, #6]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d03e      	beq.n	801889c <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 801881e:	1d3b      	adds	r3, r7, #4
 8018820:	2102      	movs	r1, #2
 8018822:	4618      	mov	r0, r3
 8018824:	f7eb fd04 	bl	8004230 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 8018828:	f000 fe92 	bl	8019550 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 801882c:	4b1d      	ldr	r3, [pc, #116]	; (80188a4 <rfalErrorHandling+0x104>)
 801882e:	2200      	movs	r2, #0
 8018830:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 8018832:	4b1c      	ldr	r3, [pc, #112]	; (80188a4 <rfalErrorHandling+0x104>)
 8018834:	2202      	movs	r2, #2
 8018836:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8018838:	4b1a      	ldr	r3, [pc, #104]	; (80188a4 <rfalErrorHandling+0x104>)
 801883a:	2253      	movs	r2, #83	; 0x53
 801883c:	751a      	strb	r2, [r3, #20]
 801883e:	e02e      	b.n	801889e <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8018840:	4b18      	ldr	r3, [pc, #96]	; (80188a4 <rfalErrorHandling+0x104>)
 8018842:	785b      	ldrb	r3, [r3, #1]
 8018844:	2b01      	cmp	r3, #1
 8018846:	d12a      	bne.n	801889e <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 8018848:	4b16      	ldr	r3, [pc, #88]	; (80188a4 <rfalErrorHandling+0x104>)
 801884a:	8adb      	ldrh	r3, [r3, #22]
 801884c:	2b1b      	cmp	r3, #27
 801884e:	d003      	beq.n	8018858 <rfalErrorHandling+0xb8>
 8018850:	4b14      	ldr	r3, [pc, #80]	; (80188a4 <rfalErrorHandling+0x104>)
 8018852:	8adb      	ldrh	r3, [r3, #22]
 8018854:	2b15      	cmp	r3, #21
 8018856:	d122      	bne.n	801889e <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 8018858:	f000 fe92 	bl	8019580 <rfalFIFOStatusIsIncompleteByte>
 801885c:	4603      	mov	r3, r0
 801885e:	2b00      	cmp	r3, #0
 8018860:	d01d      	beq.n	801889e <rfalErrorHandling+0xfe>
 8018862:	79fb      	ldrb	r3, [r7, #7]
 8018864:	2b01      	cmp	r3, #1
 8018866:	d11a      	bne.n	801889e <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8018868:	4b0e      	ldr	r3, [pc, #56]	; (80188a4 <rfalErrorHandling+0x104>)
 801886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801886c:	79fa      	ldrb	r2, [r7, #7]
 801886e:	4611      	mov	r1, r2
 8018870:	4618      	mov	r0, r3
 8018872:	f7eb fc3f 	bl	80040f4 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 8018876:	4b0b      	ldr	r3, [pc, #44]	; (80188a4 <rfalErrorHandling+0x104>)
 8018878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801887a:	2b00      	cmp	r3, #0
 801887c:	d007      	beq.n	801888e <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 801887e:	f000 fea3 	bl	80195c8 <rfalFIFOGetNumIncompleteBits>
 8018882:	4603      	mov	r3, r0
 8018884:	461a      	mov	r2, r3
 8018886:	4b07      	ldr	r3, [pc, #28]	; (80188a4 <rfalErrorHandling+0x104>)
 8018888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801888a:	b292      	uxth	r2, r2
 801888c:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 801888e:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <rfalErrorHandling+0x104>)
 8018890:	2228      	movs	r2, #40	; 0x28
 8018892:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018894:	4b03      	ldr	r3, [pc, #12]	; (80188a4 <rfalErrorHandling+0x104>)
 8018896:	225a      	movs	r2, #90	; 0x5a
 8018898:	751a      	strb	r2, [r3, #20]
 801889a:	e000      	b.n	801889e <rfalErrorHandling+0xfe>
        return;
 801889c:	bf00      	nop
            }
        }
    }
    
}
 801889e:	3708      	adds	r7, #8
 80188a0:	46bd      	mov	sp, r7
 80188a2:	bd80      	pop	{r7, pc}
 80188a4:	200039f8 	.word	0x200039f8

080188a8 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 80188ac:	21e0      	movs	r1, #224	; 0xe0
 80188ae:	2005      	movs	r0, #5
 80188b0:	f7eb fb2a 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80188b4:	2110      	movs	r1, #16
 80188b6:	200b      	movs	r0, #11
 80188b8:	f7eb fb49 	bl	8003f4e <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 80188bc:	4b04      	ldr	r3, [pc, #16]	; (80188d0 <rfalCleanupTransceive+0x28>)
 80188be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d002      	beq.n	80188ca <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 80188c4:	4b02      	ldr	r3, [pc, #8]	; (80188d0 <rfalCleanupTransceive+0x28>)
 80188c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188c8:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 80188ca:	bf00      	nop
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	200039f8 	.word	0x200039f8

080188d4 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80188da:	2102      	movs	r1, #2
 80188dc:	2011      	movs	r0, #17
 80188de:	f7eb fb13 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 80188e2:	20c2      	movs	r0, #194	; 0xc2
 80188e4:	f7eb fc52 	bl	800418c <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 80188e8:	20d5      	movs	r0, #213	; 0xd5
 80188ea:	f7eb fc4f 	bl	800418c <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 80188ee:	4b42      	ldr	r3, [pc, #264]	; (80189f8 <rfalPrepareTransceive+0x124>)
 80188f0:	785b      	ldrb	r3, [r3, #1]
 80188f2:	2b09      	cmp	r3, #9
 80188f4:	d01c      	beq.n	8018930 <rfalPrepareTransceive+0x5c>
 80188f6:	4b40      	ldr	r3, [pc, #256]	; (80189f8 <rfalPrepareTransceive+0x124>)
 80188f8:	785b      	ldrb	r3, [r3, #1]
 80188fa:	2b0d      	cmp	r3, #13
 80188fc:	d018      	beq.n	8018930 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 80188fe:	4b3e      	ldr	r3, [pc, #248]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018900:	691b      	ldr	r3, [r3, #16]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d014      	beq.n	8018930 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 8018906:	4b3c      	ldr	r3, [pc, #240]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018908:	691b      	ldr	r3, [r3, #16]
 801890a:	f240 423b 	movw	r2, #1083	; 0x43b
 801890e:	4293      	cmp	r3, r2
 8018910:	d804      	bhi.n	801891c <rfalPrepareTransceive+0x48>
 8018912:	4b39      	ldr	r3, [pc, #228]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018914:	691b      	ldr	r3, [r3, #16]
 8018916:	08db      	lsrs	r3, r3, #3
 8018918:	b29b      	uxth	r3, r3
 801891a:	e005      	b.n	8018928 <rfalPrepareTransceive+0x54>
 801891c:	4b36      	ldr	r3, [pc, #216]	; (80189f8 <rfalPrepareTransceive+0x124>)
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8018924:	08db      	lsrs	r3, r3, #3
 8018926:	b29b      	uxth	r3, r3
 8018928:	2120      	movs	r1, #32
 801892a:	4618      	mov	r0, r3
 801892c:	f7ea ff32 	bl	8003794 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8018930:	4b31      	ldr	r3, [pc, #196]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018934:	2b00      	cmp	r3, #0
 8018936:	d002      	beq.n	801893e <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 8018938:	4b2f      	ldr	r3, [pc, #188]	; (80189f8 <rfalPrepareTransceive+0x124>)
 801893a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801893c:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 801893e:	4b2f      	ldr	r3, [pc, #188]	; (80189fc <rfalPrepareTransceive+0x128>)
 8018940:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 8018942:	2300      	movs	r3, #0
 8018944:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 8018946:	4b2c      	ldr	r3, [pc, #176]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801894a:	f003 0304 	and.w	r3, r3, #4
 801894e:	2b00      	cmp	r3, #0
 8018950:	d003      	beq.n	801895a <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 8018952:	78fb      	ldrb	r3, [r7, #3]
 8018954:	f043 0320 	orr.w	r3, r3, #32
 8018958:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 801895a:	4b27      	ldr	r3, [pc, #156]	; (80189f8 <rfalPrepareTransceive+0x124>)
 801895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801895e:	f003 0310 	and.w	r3, r3, #16
 8018962:	2b00      	cmp	r3, #0
 8018964:	d003      	beq.n	801896e <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 8018966:	78fb      	ldrb	r3, [r7, #3]
 8018968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801896c:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 801896e:	4b22      	ldr	r3, [pc, #136]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018972:	f003 0320 	and.w	r3, r3, #32
 8018976:	2b00      	cmp	r3, #0
 8018978:	d003      	beq.n	8018982 <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 801897a:	78fb      	ldrb	r3, [r7, #3]
 801897c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018980:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 8018982:	78fb      	ldrb	r3, [r7, #3]
 8018984:	461a      	mov	r2, r3
 8018986:	21e0      	movs	r1, #224	; 0xe0
 8018988:	2005      	movs	r0, #5
 801898a:	f7eb fafe 	bl	8003f8a <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 801898e:	4b1a      	ldr	r3, [pc, #104]	; (80189f8 <rfalPrepareTransceive+0x124>)
 8018990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018992:	f003 0308 	and.w	r3, r3, #8
 8018996:	2b00      	cmp	r3, #0
 8018998:	d004      	beq.n	80189a4 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 801899a:	2110      	movs	r1, #16
 801899c:	200b      	movs	r0, #11
 801899e:	f7eb fab3 	bl	8003f08 <st25r3911ClrRegisterBits>
 80189a2:	e003      	b.n	80189ac <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80189a4:	2110      	movs	r1, #16
 80189a6:	200b      	movs	r0, #11
 80189a8:	f7eb fad1 	bl	8003f4e <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80189ac:	4b12      	ldr	r3, [pc, #72]	; (80189f8 <rfalPrepareTransceive+0x124>)
 80189ae:	79db      	ldrb	r3, [r3, #7]
 80189b0:	2b02      	cmp	r3, #2
 80189b2:	d104      	bne.n	80189be <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80189b4:	2102      	movs	r1, #2
 80189b6:	2011      	movs	r0, #17
 80189b8:	f7eb fac9 	bl	8003f4e <st25r3911SetRegisterBits>
 80189bc:	e003      	b.n	80189c6 <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80189be:	2102      	movs	r1, #2
 80189c0:	2011      	movs	r0, #17
 80189c2:	f7eb faa1 	bl	8003f08 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80189c6:	4b0c      	ldr	r3, [pc, #48]	; (80189f8 <rfalPrepareTransceive+0x124>)
 80189c8:	785b      	ldrb	r3, [r3, #1]
 80189ca:	2b09      	cmp	r3, #9
 80189cc:	d003      	beq.n	80189d6 <rfalPrepareTransceive+0x102>
 80189ce:	4b0a      	ldr	r3, [pc, #40]	; (80189f8 <rfalPrepareTransceive+0x124>)
 80189d0:	785b      	ldrb	r3, [r3, #1]
 80189d2:	2b0d      	cmp	r3, #13
 80189d4:	d103      	bne.n	80189de <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80189dc:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f7eb fdca 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f7eb fe03 	bl	80045f0 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 80189ea:	f000 fdb1 	bl	8019550 <rfalFIFOStatusClear>
}
 80189ee:	bf00      	nop
 80189f0:	3708      	adds	r7, #8
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	200039f8 	.word	0x200039f8
 80189fc:	00f04078 	.word	0x00f04078

08018a00 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 8018a00:	b5b0      	push	{r4, r5, r7, lr}
 8018a02:	b08a      	sub	sp, #40	; 0x28
 8018a04:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 8018a06:	2300      	movs	r3, #0
 8018a08:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8018a0e:	4b95      	ldr	r3, [pc, #596]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a10:	7d1a      	ldrb	r2, [r3, #20]
 8018a12:	4b94      	ldr	r3, [pc, #592]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a14:	7d5b      	ldrb	r3, [r3, #21]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d003      	beq.n	8018a22 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8018a1a:	4b92      	ldr	r3, [pc, #584]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a1c:	7d1a      	ldrb	r2, [r3, #20]
 8018a1e:	4b91      	ldr	r3, [pc, #580]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a20:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 8018a22:	4b90      	ldr	r3, [pc, #576]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a24:	7d1b      	ldrb	r3, [r3, #20]
 8018a26:	3b0b      	subs	r3, #11
 8018a28:	2b08      	cmp	r3, #8
 8018a2a:	f200 8217 	bhi.w	8018e5c <rfalTransceiveTx+0x45c>
 8018a2e:	a201      	add	r2, pc, #4	; (adr r2, 8018a34 <rfalTransceiveTx+0x34>)
 8018a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a34:	08018a59 	.word	0x08018a59
 8018a38:	08018a5f 	.word	0x08018a5f
 8018a3c:	08018a7d 	.word	0x08018a7d
 8018a40:	08018aa5 	.word	0x08018aa5
 8018a44:	08018bf5 	.word	0x08018bf5
 8018a48:	08018c31 	.word	0x08018c31
 8018a4c:	08018d77 	.word	0x08018d77
 8018a50:	08018ded 	.word	0x08018ded
 8018a54:	08018e33 	.word	0x08018e33
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 8018a58:	4b82      	ldr	r3, [pc, #520]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a5a:	220c      	movs	r2, #12
 8018a5c:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 8018a5e:	f7ff fbd7 	bl	8018210 <rfalIsGTExpired>
 8018a62:	4603      	mov	r3, r0
 8018a64:	f083 0301 	eor.w	r3, r3, #1
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	f040 81fd 	bne.w	8018e6a <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8018a70:	4b7c      	ldr	r3, [pc, #496]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a72:	2200      	movs	r2, #0
 8018a74:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 8018a76:	4b7b      	ldr	r3, [pc, #492]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a78:	220d      	movs	r2, #13
 8018a7a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 8018a7c:	4b79      	ldr	r3, [pc, #484]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a7e:	785b      	ldrb	r3, [r3, #1]
 8018a80:	2b09      	cmp	r3, #9
 8018a82:	d00c      	beq.n	8018a9e <rfalTransceiveTx+0x9e>
 8018a84:	4b77      	ldr	r3, [pc, #476]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018a86:	785b      	ldrb	r3, [r3, #1]
 8018a88:	2b0d      	cmp	r3, #13
 8018a8a:	d008      	beq.n	8018a9e <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 8018a8c:	2204      	movs	r2, #4
 8018a8e:	2104      	movs	r1, #4
 8018a90:	202b      	movs	r0, #43	; 0x2b
 8018a92:	f7ea feb3 	bl	80037fc <st25r3911CheckReg>
 8018a96:	4603      	mov	r3, r0
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	f040 81e8 	bne.w	8018e6e <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 8018a9e:	4b71      	ldr	r3, [pc, #452]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018aa0:	220e      	movs	r2, #14
 8018aa2:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8018aa4:	f7ff ff16 	bl	80188d4 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 8018aa8:	2210      	movs	r2, #16
 8018aaa:	2110      	movs	r1, #16
 8018aac:	2000      	movs	r0, #0
 8018aae:	f7ea fea5 	bl	80037fc <st25r3911CheckReg>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d001      	beq.n	8018abc <rfalTransceiveTx+0xbc>
 8018ab8:	2250      	movs	r2, #80	; 0x50
 8018aba:	e000      	b.n	8018abe <rfalTransceiveTx+0xbe>
 8018abc:	2240      	movs	r2, #64	; 0x40
 8018abe:	4b69      	ldr	r3, [pc, #420]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018ac0:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8018ac2:	4b68      	ldr	r3, [pc, #416]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018ac4:	785b      	ldrb	r3, [r3, #1]
 8018ac6:	2b07      	cmp	r3, #7
 8018ac8:	d003      	beq.n	8018ad2 <rfalTransceiveTx+0xd2>
 8018aca:	4b66      	ldr	r3, [pc, #408]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018acc:	785b      	ldrb	r3, [r3, #1]
 8018ace:	2b08      	cmp	r3, #8
 8018ad0:	d150      	bne.n	8018b74 <rfalTransceiveTx+0x174>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 8018ad2:	4b64      	ldr	r3, [pc, #400]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8018ada:	4b62      	ldr	r3, [pc, #392]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018adc:	69d8      	ldr	r0, [r3, #28]
 8018ade:	4b61      	ldr	r3, [pc, #388]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018ae0:	8c1b      	ldrh	r3, [r3, #32]
 8018ae2:	3307      	adds	r3, #7
 8018ae4:	08db      	lsrs	r3, r3, #3
 8018ae6:	b299      	uxth	r1, r3
 8018ae8:	4b5e      	ldr	r3, [pc, #376]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018aea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018aee:	f003 0301 	and.w	r3, r3, #1
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	bf0c      	ite	eq
 8018af6:	2301      	moveq	r3, #1
 8018af8:	2300      	movne	r3, #0
 8018afa:	b2da      	uxtb	r2, r3
 8018afc:	4b59      	ldr	r3, [pc, #356]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018afe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	bf0c      	ite	eq
 8018b0a:	2301      	moveq	r3, #1
 8018b0c:	2300      	movne	r3, #0
 8018b0e:	b2dc      	uxtb	r4, r3
 8018b10:	4b54      	ldr	r3, [pc, #336]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b12:	785b      	ldrb	r3, [r3, #1]
 8018b14:	2b08      	cmp	r3, #8
 8018b16:	bf0c      	ite	eq
 8018b18:	2301      	moveq	r3, #1
 8018b1a:	2300      	movne	r3, #0
 8018b1c:	b2db      	uxtb	r3, r3
 8018b1e:	4d52      	ldr	r5, [pc, #328]	; (8018c68 <rfalTransceiveTx+0x268>)
 8018b20:	9505      	str	r5, [sp, #20]
 8018b22:	2560      	movs	r5, #96	; 0x60
 8018b24:	9504      	str	r5, [sp, #16]
 8018b26:	4d51      	ldr	r5, [pc, #324]	; (8018c6c <rfalTransceiveTx+0x26c>)
 8018b28:	9503      	str	r5, [sp, #12]
 8018b2a:	4d51      	ldr	r5, [pc, #324]	; (8018c70 <rfalTransceiveTx+0x270>)
 8018b2c:	9502      	str	r5, [sp, #8]
 8018b2e:	4d51      	ldr	r5, [pc, #324]	; (8018c74 <rfalTransceiveTx+0x274>)
 8018b30:	9501      	str	r5, [sp, #4]
 8018b32:	9300      	str	r3, [sp, #0]
 8018b34:	4623      	mov	r3, r4
 8018b36:	f7f6 fff7 	bl	800fb28 <iso15693VCDCode>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8018b3e:	89fb      	ldrh	r3, [r7, #14]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d009      	beq.n	8018b58 <rfalTransceiveTx+0x158>
 8018b44:	89fb      	ldrh	r3, [r7, #14]
 8018b46:	2b0d      	cmp	r3, #13
 8018b48:	d006      	beq.n	8018b58 <rfalTransceiveTx+0x158>
                {
                    gRFAL.TxRx.status = ret;
 8018b4a:	4a46      	ldr	r2, [pc, #280]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b4c:	89fb      	ldrh	r3, [r7, #14]
 8018b4e:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018b50:	4b44      	ldr	r3, [pc, #272]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b52:	2213      	movs	r2, #19
 8018b54:	751a      	strb	r2, [r3, #20]
                    break;
 8018b56:	e191      	b.n	8018e7c <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 8018b58:	4b42      	ldr	r3, [pc, #264]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b5a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018b5c:	00db      	lsls	r3, r3, #3
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7ea ff41 	bl	80039e6 <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 8018b64:	4b3f      	ldr	r3, [pc, #252]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	483f      	ldr	r0, [pc, #252]	; (8018c6c <rfalTransceiveTx+0x26c>)
 8018b6e:	f7eb fa75 	bl	800405c <st25r3911WriteFifo>
 8018b72:	e01c      	b.n	8018bae <rfalTransceiveTx+0x1ae>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 8018b74:	4b3b      	ldr	r3, [pc, #236]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b76:	8c1b      	ldrh	r3, [r3, #32]
 8018b78:	3307      	adds	r3, #7
 8018b7a:	08db      	lsrs	r3, r3, #3
 8018b7c:	b29a      	uxth	r2, r3
 8018b7e:	4b39      	ldr	r3, [pc, #228]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b80:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 8018b82:	4b38      	ldr	r3, [pc, #224]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b84:	8c1b      	ldrh	r3, [r3, #32]
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7ea ff2d 	bl	80039e6 <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 8018b8c:	4b35      	ldr	r3, [pc, #212]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b8e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018b90:	2b60      	cmp	r3, #96	; 0x60
 8018b92:	bf28      	it	cs
 8018b94:	2360      	movcs	r3, #96	; 0x60
 8018b96:	b29a      	uxth	r2, r3
 8018b98:	4b32      	ldr	r3, [pc, #200]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 8018b9c:	4b31      	ldr	r3, [pc, #196]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018b9e:	69db      	ldr	r3, [r3, #28]
 8018ba0:	4a30      	ldr	r2, [pc, #192]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018ba2:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8018ba4:	b2d2      	uxtb	r2, r2
 8018ba6:	4611      	mov	r1, r2
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7eb fa57 	bl	800405c <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 8018bae:	4b2d      	ldr	r3, [pc, #180]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018bb0:	795b      	ldrb	r3, [r3, #5]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d005      	beq.n	8018bc2 <rfalTransceiveTx+0x1c2>
 8018bb6:	4b2b      	ldr	r3, [pc, #172]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018bb8:	795b      	ldrb	r3, [r3, #5]
 8018bba:	4619      	mov	r1, r3
 8018bbc:	2001      	movs	r0, #1
 8018bbe:	f7eb f90f 	bl	8003de0 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8018bc2:	4b28      	ldr	r3, [pc, #160]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bc6:	f003 0301 	and.w	r3, r3, #1
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d003      	beq.n	8018bd6 <rfalTransceiveTx+0x1d6>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 8018bce:	20c5      	movs	r0, #197	; 0xc5
 8018bd0:	f7eb fadc 	bl	800418c <st25r3911ExecuteCommand>
 8018bd4:	e002      	b.n	8018bdc <rfalTransceiveTx+0x1dc>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 8018bd6:	20c4      	movs	r0, #196	; 0xc4
 8018bd8:	f7eb fad8 	bl	800418c <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8018bdc:	4b21      	ldr	r3, [pc, #132]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018bde:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018be0:	4b20      	ldr	r3, [pc, #128]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018be2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018be4:	429a      	cmp	r2, r3
 8018be6:	d201      	bcs.n	8018bec <rfalTransceiveTx+0x1ec>
 8018be8:	220f      	movs	r2, #15
 8018bea:	e000      	b.n	8018bee <rfalTransceiveTx+0x1ee>
 8018bec:	2211      	movs	r2, #17
 8018bee:	4b1d      	ldr	r3, [pc, #116]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018bf0:	751a      	strb	r2, [r3, #20]
            break;
 8018bf2:	e143      	b.n	8018e7c <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 8018bf4:	2048      	movs	r0, #72	; 0x48
 8018bf6:	f7eb fcbf 	bl	8004578 <st25r3911GetInterrupt>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	f000 8136 	beq.w	8018e72 <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d008      	beq.n	8018c22 <rfalTransceiveTx+0x222>
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	f003 0308 	and.w	r3, r3, #8
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d103      	bne.n	8018c22 <rfalTransceiveTx+0x222>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8018c1a:	4b12      	ldr	r3, [pc, #72]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c1c:	2210      	movs	r2, #16
 8018c1e:	751a      	strb	r2, [r3, #20]
 8018c20:	e006      	b.n	8018c30 <rfalTransceiveTx+0x230>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8018c22:	4b10      	ldr	r3, [pc, #64]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c24:	2203      	movs	r2, #3
 8018c26:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018c28:	4b0e      	ldr	r3, [pc, #56]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c2a:	2213      	movs	r2, #19
 8018c2c:	751a      	strb	r2, [r3, #20]
                break;
 8018c2e:	e125      	b.n	8018e7c <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8018c30:	4b0c      	ldr	r3, [pc, #48]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c32:	785b      	ldrb	r3, [r3, #1]
 8018c34:	2b07      	cmp	r3, #7
 8018c36:	d003      	beq.n	8018c40 <rfalTransceiveTx+0x240>
 8018c38:	4b0a      	ldr	r3, [pc, #40]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c3a:	785b      	ldrb	r3, [r3, #1]
 8018c3c:	2b08      	cmp	r3, #8
 8018c3e:	d16e      	bne.n	8018d1e <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8018c40:	4b08      	ldr	r3, [pc, #32]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c42:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018c44:	461a      	mov	r2, r3
 8018c46:	4b07      	ldr	r3, [pc, #28]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c48:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018c4a:	1ad3      	subs	r3, r2, r3
 8018c4c:	4a05      	ldr	r2, [pc, #20]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c4e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8018c50:	4293      	cmp	r3, r2
 8018c52:	da11      	bge.n	8018c78 <rfalTransceiveTx+0x278>
 8018c54:	4b03      	ldr	r3, [pc, #12]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c56:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8018c58:	4b02      	ldr	r3, [pc, #8]	; (8018c64 <rfalTransceiveTx+0x264>)
 8018c5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018c5c:	1ad3      	subs	r3, r2, r3
 8018c5e:	b29b      	uxth	r3, r3
 8018c60:	e00c      	b.n	8018c7c <rfalTransceiveTx+0x27c>
 8018c62:	bf00      	nop
 8018c64:	200039f8 	.word	0x200039f8
 8018c68:	20003a34 	.word	0x20003a34
 8018c6c:	20003bb8 	.word	0x20003bb8
 8018c70:	20003dc0 	.word	0x20003dc0
 8018c74:	20003a32 	.word	0x20003a32
 8018c78:	4b82      	ldr	r3, [pc, #520]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018c7a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8018c7c:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8018c7e:	89bb      	ldrh	r3, [r7, #12]
 8018c80:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8018c84:	bf28      	it	cs
 8018c86:	f44f 7302 	movcs.w	r3, #520	; 0x208
 8018c8a:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8018c90:	4b7c      	ldr	r3, [pc, #496]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018c92:	69d8      	ldr	r0, [r3, #28]
 8018c94:	4b7b      	ldr	r3, [pc, #492]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018c96:	8c1b      	ldrh	r3, [r3, #32]
 8018c98:	3307      	adds	r3, #7
 8018c9a:	08db      	lsrs	r3, r3, #3
 8018c9c:	b299      	uxth	r1, r3
 8018c9e:	4b79      	ldr	r3, [pc, #484]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018ca0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018ca4:	f003 0301 	and.w	r3, r3, #1
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	bf0c      	ite	eq
 8018cac:	2301      	moveq	r3, #1
 8018cae:	2300      	movne	r3, #0
 8018cb0:	b2dc      	uxtb	r4, r3
 8018cb2:	4b74      	ldr	r3, [pc, #464]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018cb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	bf0c      	ite	eq
 8018cc0:	2301      	moveq	r3, #1
 8018cc2:	2300      	movne	r3, #0
 8018cc4:	b2dd      	uxtb	r5, r3
 8018cc6:	4b6f      	ldr	r3, [pc, #444]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018cc8:	785b      	ldrb	r3, [r3, #1]
 8018cca:	2b08      	cmp	r3, #8
 8018ccc:	bf0c      	ite	eq
 8018cce:	2301      	moveq	r3, #1
 8018cd0:	2300      	movne	r3, #0
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	1dba      	adds	r2, r7, #6
 8018cd6:	9205      	str	r2, [sp, #20]
 8018cd8:	89ba      	ldrh	r2, [r7, #12]
 8018cda:	9204      	str	r2, [sp, #16]
 8018cdc:	4a6a      	ldr	r2, [pc, #424]	; (8018e88 <rfalTransceiveTx+0x488>)
 8018cde:	9203      	str	r2, [sp, #12]
 8018ce0:	4a6a      	ldr	r2, [pc, #424]	; (8018e8c <rfalTransceiveTx+0x48c>)
 8018ce2:	9202      	str	r2, [sp, #8]
 8018ce4:	4a6a      	ldr	r2, [pc, #424]	; (8018e90 <rfalTransceiveTx+0x490>)
 8018ce6:	9201      	str	r2, [sp, #4]
 8018ce8:	9300      	str	r3, [sp, #0]
 8018cea:	462b      	mov	r3, r5
 8018cec:	4622      	mov	r2, r4
 8018cee:	f7f6 ff1b 	bl	800fb28 <iso15693VCDCode>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8018cf6:	89fb      	ldrh	r3, [r7, #14]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d009      	beq.n	8018d10 <rfalTransceiveTx+0x310>
 8018cfc:	89fb      	ldrh	r3, [r7, #14]
 8018cfe:	2b0d      	cmp	r3, #13
 8018d00:	d006      	beq.n	8018d10 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 8018d02:	4a60      	ldr	r2, [pc, #384]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d04:	89fb      	ldrh	r3, [r7, #14]
 8018d06:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018d08:	4b5e      	ldr	r3, [pc, #376]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d0a:	2213      	movs	r2, #19
 8018d0c:	751a      	strb	r2, [r3, #20]
                    break;
 8018d0e:	e0b5      	b.n	8018e7c <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 8018d10:	88fb      	ldrh	r3, [r7, #6]
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	4619      	mov	r1, r3
 8018d16:	485c      	ldr	r0, [pc, #368]	; (8018e88 <rfalTransceiveTx+0x488>)
 8018d18:	f7eb f9a0 	bl	800405c <st25r3911WriteFifo>
            {
 8018d1c:	e018      	b.n	8018d50 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8018d1e:	4b59      	ldr	r3, [pc, #356]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d20:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8018d22:	461a      	mov	r2, r3
 8018d24:	4b57      	ldr	r3, [pc, #348]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d26:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018d28:	4619      	mov	r1, r3
 8018d2a:	4b56      	ldr	r3, [pc, #344]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018d2e:	1acb      	subs	r3, r1, r3
 8018d30:	4293      	cmp	r3, r2
 8018d32:	bfa8      	it	ge
 8018d34:	4613      	movge	r3, r2
 8018d36:	b29b      	uxth	r3, r3
 8018d38:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8018d3a:	4b52      	ldr	r3, [pc, #328]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d3c:	69db      	ldr	r3, [r3, #28]
 8018d3e:	4a51      	ldr	r2, [pc, #324]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d40:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8018d42:	4413      	add	r3, r2
 8018d44:	88fa      	ldrh	r2, [r7, #6]
 8018d46:	b2d2      	uxtb	r2, r2
 8018d48:	4611      	mov	r1, r2
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7eb f986 	bl	800405c <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 8018d50:	4b4c      	ldr	r3, [pc, #304]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d52:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018d54:	88fb      	ldrh	r3, [r7, #6]
 8018d56:	4413      	add	r3, r2
 8018d58:	b29a      	uxth	r2, r3
 8018d5a:	4b4a      	ldr	r3, [pc, #296]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8018d5e:	4b49      	ldr	r3, [pc, #292]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d60:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018d62:	4b48      	ldr	r3, [pc, #288]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018d66:	429a      	cmp	r2, r3
 8018d68:	d201      	bcs.n	8018d6e <rfalTransceiveTx+0x36e>
 8018d6a:	220f      	movs	r2, #15
 8018d6c:	e000      	b.n	8018d70 <rfalTransceiveTx+0x370>
 8018d6e:	2211      	movs	r2, #17
 8018d70:	4b44      	ldr	r3, [pc, #272]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d72:	751a      	strb	r2, [r3, #20]
            break;
 8018d74:	e082      	b.n	8018e7c <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 8018d76:	2048      	movs	r0, #72	; 0x48
 8018d78:	f7eb fbfe 	bl	8004578 <st25r3911GetInterrupt>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d077      	beq.n	8018e76 <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 8018d86:	68bb      	ldr	r3, [r7, #8]
 8018d88:	f003 0308 	and.w	r3, r3, #8
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d021      	beq.n	8018dd4 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 8018d90:	4b3c      	ldr	r3, [pc, #240]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d92:	785b      	ldrb	r3, [r3, #1]
 8018d94:	2b09      	cmp	r3, #9
 8018d96:	d003      	beq.n	8018da0 <rfalTransceiveTx+0x3a0>
 8018d98:	4b3a      	ldr	r3, [pc, #232]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018d9a:	785b      	ldrb	r3, [r3, #1]
 8018d9c:	2b0d      	cmp	r3, #13
 8018d9e:	d115      	bne.n	8018dcc <rfalTransceiveTx+0x3cc>
 8018da0:	4b38      	ldr	r3, [pc, #224]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018da8:	d010      	beq.n	8018dcc <rfalTransceiveTx+0x3cc>
 8018daa:	4b36      	ldr	r3, [pc, #216]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d00c      	beq.n	8018dcc <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 8018db2:	4b34      	ldr	r3, [pc, #208]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018db6:	4a37      	ldr	r2, [pc, #220]	; (8018e94 <rfalTransceiveTx+0x494>)
 8018db8:	fba2 2303 	umull	r2, r3, r2, r3
 8018dbc:	0b1b      	lsrs	r3, r3, #12
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7eb fc61 	bl	8004688 <timerCalculateTimer>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	4a2e      	ldr	r2, [pc, #184]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018dca:	6453      	str	r3, [r2, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8018dcc:	4b2d      	ldr	r3, [pc, #180]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018dce:	2212      	movs	r2, #18
 8018dd0:	751a      	strb	r2, [r3, #20]
 8018dd2:	e00b      	b.n	8018dec <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d14d      	bne.n	8018e7a <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8018dde:	4b29      	ldr	r3, [pc, #164]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018de0:	2203      	movs	r2, #3
 8018de2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018de4:	4b27      	ldr	r3, [pc, #156]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018de6:	2213      	movs	r2, #19
 8018de8:	751a      	strb	r2, [r3, #20]
               break;
 8018dea:	e047      	b.n	8018e7c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8018dec:	4b25      	ldr	r3, [pc, #148]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d110      	bne.n	8018e16 <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8018df4:	4b23      	ldr	r3, [pc, #140]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018df6:	799b      	ldrb	r3, [r3, #6]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d003      	beq.n	8018e04 <rfalTransceiveTx+0x404>
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	2001      	movs	r0, #1
 8018e00:	f7ea ffee 	bl	8003de0 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 8018e04:	f7ff fd50 	bl	80188a8 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 8018e08:	4b1e      	ldr	r3, [pc, #120]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 8018e0e:	4b1d      	ldr	r3, [pc, #116]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e10:	2200      	movs	r2, #0
 8018e12:	751a      	strb	r2, [r3, #20]
                break;
 8018e14:	e032      	b.n	8018e7c <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 8018e16:	4b1b      	ldr	r3, [pc, #108]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e18:	799b      	ldrb	r3, [r3, #6]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d005      	beq.n	8018e2a <rfalTransceiveTx+0x42a>
 8018e1e:	4b19      	ldr	r3, [pc, #100]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e20:	799b      	ldrb	r3, [r3, #6]
 8018e22:	4619      	mov	r1, r3
 8018e24:	2001      	movs	r0, #1
 8018e26:	f7ea ffdb 	bl	8003de0 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8018e2a:	4b16      	ldr	r3, [pc, #88]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e2c:	2251      	movs	r2, #81	; 0x51
 8018e2e:	751a      	strb	r2, [r3, #20]
            break;
 8018e30:	e024      	b.n	8018e7c <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8018e32:	4b14      	ldr	r3, [pc, #80]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e34:	8adb      	ldrh	r3, [r3, #22]
 8018e36:	2b02      	cmp	r3, #2
 8018e38:	d102      	bne.n	8018e40 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 8018e3a:	4b12      	ldr	r3, [pc, #72]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e3c:	2208      	movs	r2, #8
 8018e3e:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8018e40:	4b10      	ldr	r3, [pc, #64]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e42:	799b      	ldrb	r3, [r3, #6]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d003      	beq.n	8018e50 <rfalTransceiveTx+0x450>
 8018e48:	2100      	movs	r1, #0
 8018e4a:	2001      	movs	r0, #1
 8018e4c:	f7ea ffc8 	bl	8003de0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8018e50:	f7ff fd2a 	bl	80188a8 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8018e54:	4b0b      	ldr	r3, [pc, #44]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e56:	2200      	movs	r2, #0
 8018e58:	751a      	strb	r2, [r3, #20]
            break;
 8018e5a:	e00f      	b.n	8018e7c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8018e5c:	4b09      	ldr	r3, [pc, #36]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e5e:	2208      	movs	r2, #8
 8018e60:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018e62:	4b08      	ldr	r3, [pc, #32]	; (8018e84 <rfalTransceiveTx+0x484>)
 8018e64:	2213      	movs	r2, #19
 8018e66:	751a      	strb	r2, [r3, #20]
            break;
 8018e68:	e008      	b.n	8018e7c <rfalTransceiveTx+0x47c>
                break;
 8018e6a:	bf00      	nop
 8018e6c:	e006      	b.n	8018e7c <rfalTransceiveTx+0x47c>
                   break;
 8018e6e:	bf00      	nop
 8018e70:	e004      	b.n	8018e7c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 8018e72:	bf00      	nop
 8018e74:	e002      	b.n	8018e7c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 8018e76:	bf00      	nop
 8018e78:	e000      	b.n	8018e7c <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 8018e7a:	bf00      	nop
    }
}
 8018e7c:	bf00      	nop
 8018e7e:	3710      	adds	r7, #16
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bdb0      	pop	{r4, r5, r7, pc}
 8018e84:	200039f8 	.word	0x200039f8
 8018e88:	20003bb8 	.word	0x20003bb8
 8018e8c:	20003dc0 	.word	0x20003dc0
 8018e90:	20003a32 	.word	0x20003a32
 8018e94:	4d542005 	.word	0x4d542005

08018e98 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 8018e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e9a:	b089      	sub	sp, #36	; 0x24
 8018e9c:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8018ea2:	4ba2      	ldr	r3, [pc, #648]	; (801912c <rfalTransceiveRx+0x294>)
 8018ea4:	7d1a      	ldrb	r2, [r3, #20]
 8018ea6:	4ba1      	ldr	r3, [pc, #644]	; (801912c <rfalTransceiveRx+0x294>)
 8018ea8:	7d5b      	ldrb	r3, [r3, #21]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d003      	beq.n	8018eb6 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8018eae:	4b9f      	ldr	r3, [pc, #636]	; (801912c <rfalTransceiveRx+0x294>)
 8018eb0:	7d1a      	ldrb	r2, [r3, #20]
 8018eb2:	4b9e      	ldr	r3, [pc, #632]	; (801912c <rfalTransceiveRx+0x294>)
 8018eb4:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 8018eb6:	4b9d      	ldr	r3, [pc, #628]	; (801912c <rfalTransceiveRx+0x294>)
 8018eb8:	7d1b      	ldrb	r3, [r3, #20]
 8018eba:	3b51      	subs	r3, #81	; 0x51
 8018ebc:	2b09      	cmp	r3, #9
 8018ebe:	f200 831e 	bhi.w	80194fe <rfalTransceiveRx+0x666>
 8018ec2:	a201      	add	r2, pc, #4	; (adr r2, 8018ec8 <rfalTransceiveRx+0x30>)
 8018ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec8:	08018ef1 	.word	0x08018ef1
 8018ecc:	0801947b 	.word	0x0801947b
 8018ed0:	08018f29 	.word	0x08018f29
 8018ed4:	08019035 	.word	0x08019035
 8018ed8:	080193b9 	.word	0x080193b9
 8018edc:	08019089 	.word	0x08019089
 8018ee0:	080191a1 	.word	0x080191a1
 8018ee4:	080194b5 	.word	0x080194b5
 8018ee8:	08019391 	.word	0x08019391
 8018eec:	08019451 	.word	0x08019451
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 8018ef0:	4b8e      	ldr	r3, [pc, #568]	; (801912c <rfalTransceiveRx+0x294>)
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 8018ef6:	4b8d      	ldr	r3, [pc, #564]	; (801912c <rfalTransceiveRx+0x294>)
 8018ef8:	2200      	movs	r2, #0
 8018efa:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8018efc:	4b8b      	ldr	r3, [pc, #556]	; (801912c <rfalTransceiveRx+0x294>)
 8018efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d003      	beq.n	8018f0c <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8018f04:	4b89      	ldr	r3, [pc, #548]	; (801912c <rfalTransceiveRx+0x294>)
 8018f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f08:	2200      	movs	r2, #0
 8018f0a:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8018f0c:	4b87      	ldr	r3, [pc, #540]	; (801912c <rfalTransceiveRx+0x294>)
 8018f0e:	785b      	ldrb	r3, [r3, #1]
 8018f10:	2b09      	cmp	r3, #9
 8018f12:	d003      	beq.n	8018f1c <rfalTransceiveRx+0x84>
 8018f14:	4b85      	ldr	r3, [pc, #532]	; (801912c <rfalTransceiveRx+0x294>)
 8018f16:	785b      	ldrb	r3, [r3, #1]
 8018f18:	2b0d      	cmp	r3, #13
 8018f1a:	d101      	bne.n	8018f20 <rfalTransceiveRx+0x88>
 8018f1c:	2252      	movs	r2, #82	; 0x52
 8018f1e:	e000      	b.n	8018f22 <rfalTransceiveRx+0x8a>
 8018f20:	2253      	movs	r2, #83	; 0x53
 8018f22:	4b82      	ldr	r3, [pc, #520]	; (801912c <rfalTransceiveRx+0x294>)
 8018f24:	751a      	strb	r2, [r3, #20]
            break;
 8018f26:	e2fa      	b.n	801951e <rfalTransceiveRx+0x686>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8018f28:	4b80      	ldr	r3, [pc, #512]	; (801912c <rfalTransceiveRx+0x294>)
 8018f2a:	785b      	ldrb	r3, [r3, #1]
 8018f2c:	2b09      	cmp	r3, #9
 8018f2e:	d003      	beq.n	8018f38 <rfalTransceiveRx+0xa0>
 8018f30:	4b7e      	ldr	r3, [pc, #504]	; (801912c <rfalTransceiveRx+0x294>)
 8018f32:	785b      	ldrb	r3, [r3, #1]
 8018f34:	2b0d      	cmp	r3, #13
 8018f36:	d117      	bne.n	8018f68 <rfalTransceiveRx+0xd0>
 8018f38:	4b7c      	ldr	r3, [pc, #496]	; (801912c <rfalTransceiveRx+0x294>)
 8018f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f40:	d012      	beq.n	8018f68 <rfalTransceiveRx+0xd0>
 8018f42:	4b7a      	ldr	r3, [pc, #488]	; (801912c <rfalTransceiveRx+0x294>)
 8018f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d00e      	beq.n	8018f68 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 8018f4a:	4b78      	ldr	r3, [pc, #480]	; (801912c <rfalTransceiveRx+0x294>)
 8018f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7eb fba8 	bl	80046a4 <timerIsExpired>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d006      	beq.n	8018f68 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 8018f5a:	4b74      	ldr	r3, [pc, #464]	; (801912c <rfalTransceiveRx+0x294>)
 8018f5c:	2204      	movs	r2, #4
 8018f5e:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f60:	4b72      	ldr	r3, [pc, #456]	; (801912c <rfalTransceiveRx+0x294>)
 8018f62:	225a      	movs	r2, #90	; 0x5a
 8018f64:	751a      	strb	r2, [r3, #20]
                    break;
 8018f66:	e2da      	b.n	801951e <rfalTransceiveRx+0x686>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 8018f68:	f644 0030 	movw	r0, #18480	; 0x4830
 8018f6c:	f7eb fb04 	bl	8004578 <st25r3911GetInterrupt>
 8018f70:	4603      	mov	r3, r0
 8018f72:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	f000 82c8 	beq.w	801950c <rfalTransceiveRx+0x674>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 8018f7c:	68bb      	ldr	r3, [r7, #8]
 8018f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d00b      	beq.n	8018f9e <rfalTransceiveRx+0x106>
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	f003 0320 	and.w	r3, r3, #32
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d106      	bne.n	8018f9e <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8018f90:	4b66      	ldr	r3, [pc, #408]	; (801912c <rfalTransceiveRx+0x294>)
 8018f92:	2204      	movs	r2, #4
 8018f94:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f96:	4b65      	ldr	r3, [pc, #404]	; (801912c <rfalTransceiveRx+0x294>)
 8018f98:	225a      	movs	r2, #90	; 0x5a
 8018f9a:	751a      	strb	r2, [r3, #20]
                break;
 8018f9c:	e2bf      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d015      	beq.n	8018fd4 <rfalTransceiveRx+0x13c>
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	f003 0320 	and.w	r3, r3, #32
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d110      	bne.n	8018fd4 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 8018fb2:	4b5e      	ldr	r3, [pc, #376]	; (801912c <rfalTransceiveRx+0x294>)
 8018fb4:	785b      	ldrb	r3, [r3, #1]
 8018fb6:	2b09      	cmp	r3, #9
 8018fb8:	d003      	beq.n	8018fc2 <rfalTransceiveRx+0x12a>
 8018fba:	4b5c      	ldr	r3, [pc, #368]	; (801912c <rfalTransceiveRx+0x294>)
 8018fbc:	785b      	ldrb	r3, [r3, #1]
 8018fbe:	2b0d      	cmp	r3, #13
 8018fc0:	d101      	bne.n	8018fc6 <rfalTransceiveRx+0x12e>
 8018fc2:	2204      	movs	r2, #4
 8018fc4:	e000      	b.n	8018fc8 <rfalTransceiveRx+0x130>
 8018fc6:	2225      	movs	r2, #37	; 0x25
 8018fc8:	4b58      	ldr	r3, [pc, #352]	; (801912c <rfalTransceiveRx+0x294>)
 8018fca:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018fcc:	4b57      	ldr	r3, [pc, #348]	; (801912c <rfalTransceiveRx+0x294>)
 8018fce:	225a      	movs	r2, #90	; 0x5a
 8018fd0:	751a      	strb	r2, [r3, #20]
                break;
 8018fd2:	e2a4      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	f003 0320 	and.w	r3, r3, #32
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d015      	beq.n	801900a <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	f003 0310 	and.w	r3, r3, #16
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d006      	beq.n	8018ff6 <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 8018fe8:	4b50      	ldr	r3, [pc, #320]	; (801912c <rfalTransceiveRx+0x294>)
 8018fea:	2201      	movs	r2, #1
 8018fec:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8018fee:	4b4f      	ldr	r3, [pc, #316]	; (801912c <rfalTransceiveRx+0x294>)
 8018ff0:	2256      	movs	r2, #86	; 0x56
 8018ff2:	751a      	strb	r2, [r3, #20]
                    break;
 8018ff4:	e293      	b.n	801951e <rfalTransceiveRx+0x686>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8018ff6:	200a      	movs	r0, #10
 8018ff8:	f7eb fb46 	bl	8004688 <timerCalculateTimer>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	4a4b      	ldr	r2, [pc, #300]	; (801912c <rfalTransceiveRx+0x294>)
 8019000:	6493      	str	r3, [r2, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8019002:	4b4a      	ldr	r3, [pc, #296]	; (801912c <rfalTransceiveRx+0x294>)
 8019004:	2254      	movs	r2, #84	; 0x54
 8019006:	751a      	strb	r2, [r3, #20]
 8019008:	e014      	b.n	8019034 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 801900a:	68bb      	ldr	r3, [r7, #8]
 801900c:	f003 0310 	and.w	r3, r3, #16
 8019010:	2b00      	cmp	r3, #0
 8019012:	d008      	beq.n	8019026 <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 8019014:	4b45      	ldr	r3, [pc, #276]	; (801912c <rfalTransceiveRx+0x294>)
 8019016:	2203      	movs	r2, #3
 8019018:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801901a:	4b44      	ldr	r3, [pc, #272]	; (801912c <rfalTransceiveRx+0x294>)
 801901c:	225a      	movs	r2, #90	; 0x5a
 801901e:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 8019020:	f7ff fbbe 	bl	80187a0 <rfalErrorHandling>
                break;
 8019024:	e27b      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8019026:	4b41      	ldr	r3, [pc, #260]	; (801912c <rfalTransceiveRx+0x294>)
 8019028:	2203      	movs	r2, #3
 801902a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801902c:	4b3f      	ldr	r3, [pc, #252]	; (801912c <rfalTransceiveRx+0x294>)
 801902e:	225a      	movs	r2, #90	; 0x5a
 8019030:	751a      	strb	r2, [r3, #20]
               break;
 8019032:	e274      	b.n	801951e <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 8019034:	f44f 6005 	mov.w	r0, #2128	; 0x850
 8019038:	f7eb fa9e 	bl	8004578 <st25r3911GetInterrupt>
 801903c:	4603      	mov	r3, r0
 801903e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019040:	68bb      	ldr	r3, [r7, #8]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d10f      	bne.n	8019066 <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8019046:	4b39      	ldr	r3, [pc, #228]	; (801912c <rfalTransceiveRx+0x294>)
 8019048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801904a:	4618      	mov	r0, r3
 801904c:	f7eb fb2a 	bl	80046a4 <timerIsExpired>
 8019050:	4603      	mov	r3, r0
 8019052:	2b00      	cmp	r3, #0
 8019054:	f000 825c 	beq.w	8019510 <rfalTransceiveRx+0x678>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 8019058:	4b34      	ldr	r3, [pc, #208]	; (801912c <rfalTransceiveRx+0x294>)
 801905a:	2209      	movs	r2, #9
 801905c:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801905e:	4b33      	ldr	r3, [pc, #204]	; (801912c <rfalTransceiveRx+0x294>)
 8019060:	225a      	movs	r2, #90	; 0x5a
 8019062:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 8019064:	e254      	b.n	8019510 <rfalTransceiveRx+0x678>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801906c:	2b00      	cmp	r3, #0
 801906e:	d008      	beq.n	8019082 <rfalTransceiveRx+0x1ea>
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	f003 0310 	and.w	r3, r3, #16
 8019076:	2b00      	cmp	r3, #0
 8019078:	d103      	bne.n	8019082 <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 801907a:	4b2c      	ldr	r3, [pc, #176]	; (801912c <rfalTransceiveRx+0x294>)
 801907c:	2255      	movs	r2, #85	; 0x55
 801907e:	751a      	strb	r2, [r3, #20]
                break;
 8019080:	e24d      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8019082:	4b2a      	ldr	r3, [pc, #168]	; (801912c <rfalTransceiveRx+0x294>)
 8019084:	2256      	movs	r2, #86	; 0x56
 8019086:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 8019088:	4829      	ldr	r0, [pc, #164]	; (8019130 <rfalTransceiveRx+0x298>)
 801908a:	f7eb fa75 	bl	8004578 <st25r3911GetInterrupt>
 801908e:	4602      	mov	r2, r0
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	4313      	orrs	r3, r2
 8019094:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801909c:	2b00      	cmp	r3, #0
 801909e:	d008      	beq.n	80190b2 <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80190a0:	4b22      	ldr	r3, [pc, #136]	; (801912c <rfalTransceiveRx+0x294>)
 80190a2:	2209      	movs	r2, #9
 80190a4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80190a6:	4b21      	ldr	r3, [pc, #132]	; (801912c <rfalTransceiveRx+0x294>)
 80190a8:	2257      	movs	r2, #87	; 0x57
 80190aa:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80190ac:	f7ff fb78 	bl	80187a0 <rfalErrorHandling>
                break;
 80190b0:	e235      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d00c      	beq.n	80190d6 <rfalTransceiveRx+0x23e>
 80190bc:	4b1b      	ldr	r3, [pc, #108]	; (801912c <rfalTransceiveRx+0x294>)
 80190be:	79db      	ldrb	r3, [r3, #7]
 80190c0:	2b02      	cmp	r3, #2
 80190c2:	d108      	bne.n	80190d6 <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80190c4:	4b19      	ldr	r3, [pc, #100]	; (801912c <rfalTransceiveRx+0x294>)
 80190c6:	2209      	movs	r2, #9
 80190c8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80190ca:	4b18      	ldr	r3, [pc, #96]	; (801912c <rfalTransceiveRx+0x294>)
 80190cc:	2257      	movs	r2, #87	; 0x57
 80190ce:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80190d0:	f7ff fb66 	bl	80187a0 <rfalErrorHandling>
                break;
 80190d4:	e223      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d008      	beq.n	80190f2 <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 80190e0:	4b12      	ldr	r3, [pc, #72]	; (801912c <rfalTransceiveRx+0x294>)
 80190e2:	221b      	movs	r2, #27
 80190e4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80190e6:	4b11      	ldr	r3, [pc, #68]	; (801912c <rfalTransceiveRx+0x294>)
 80190e8:	2257      	movs	r2, #87	; 0x57
 80190ea:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80190ec:	f7ff fb58 	bl	80187a0 <rfalErrorHandling>
                break;
 80190f0:	e215      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d008      	beq.n	801910e <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 80190fc:	4b0b      	ldr	r3, [pc, #44]	; (801912c <rfalTransceiveRx+0x294>)
 80190fe:	2215      	movs	r2, #21
 8019100:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8019102:	4b0a      	ldr	r3, [pc, #40]	; (801912c <rfalTransceiveRx+0x294>)
 8019104:	2257      	movs	r2, #87	; 0x57
 8019106:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8019108:	f7ff fb4a 	bl	80187a0 <rfalErrorHandling>
                break;
 801910c:	e207      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	f003 0304 	and.w	r3, r3, #4
 8019114:	2b00      	cmp	r3, #0
 8019116:	d00d      	beq.n	8019134 <rfalTransceiveRx+0x29c>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8019118:	4b04      	ldr	r3, [pc, #16]	; (801912c <rfalTransceiveRx+0x294>)
 801911a:	221d      	movs	r2, #29
 801911c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801911e:	4b03      	ldr	r3, [pc, #12]	; (801912c <rfalTransceiveRx+0x294>)
 8019120:	2257      	movs	r2, #87	; 0x57
 8019122:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8019124:	f7ff fb3c 	bl	80187a0 <rfalErrorHandling>
                break;
 8019128:	e1f9      	b.n	801951e <rfalTransceiveRx+0x686>
 801912a:	bf00      	nop
 801912c:	200039f8 	.word	0x200039f8
 8019130:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801913a:	2b00      	cmp	r3, #0
 801913c:	d00b      	beq.n	8019156 <rfalTransceiveRx+0x2be>
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	f003 0310 	and.w	r3, r3, #16
 8019144:	2b00      	cmp	r3, #0
 8019146:	d106      	bne.n	8019156 <rfalTransceiveRx+0x2be>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 8019148:	4b9a      	ldr	r3, [pc, #616]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801914a:	2225      	movs	r2, #37	; 0x25
 801914c:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801914e:	4b99      	ldr	r3, [pc, #612]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019150:	225a      	movs	r2, #90	; 0x5a
 8019152:	751a      	strb	r2, [r3, #20]
                 break;
 8019154:	e1e3      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 8019156:	68bb      	ldr	r3, [r7, #8]
 8019158:	f003 0310 	and.w	r3, r3, #16
 801915c:	2b00      	cmp	r3, #0
 801915e:	d103      	bne.n	8019168 <rfalTransceiveRx+0x2d0>
 8019160:	4b94      	ldr	r3, [pc, #592]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019162:	7e1b      	ldrb	r3, [r3, #24]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d014      	beq.n	8019192 <rfalTransceiveRx+0x2fa>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 8019168:	f000 fa0a 	bl	8019580 <rfalFIFOStatusIsIncompleteByte>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d003      	beq.n	801917a <rfalTransceiveRx+0x2e2>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8019172:	4b90      	ldr	r3, [pc, #576]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019174:	2228      	movs	r2, #40	; 0x28
 8019176:	82da      	strh	r2, [r3, #22]
 8019178:	e007      	b.n	801918a <rfalTransceiveRx+0x2f2>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 801917a:	f000 fa13 	bl	80195a4 <rfalFIFOStatusIsMissingPar>
 801917e:	4603      	mov	r3, r0
 8019180:	2b00      	cmp	r3, #0
 8019182:	d002      	beq.n	801918a <rfalTransceiveRx+0x2f2>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 8019184:	4b8b      	ldr	r3, [pc, #556]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019186:	2209      	movs	r2, #9
 8019188:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 801918a:	4b8a      	ldr	r3, [pc, #552]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801918c:	2257      	movs	r2, #87	; 0x57
 801918e:	751a      	strb	r2, [r3, #20]
 8019190:	e006      	b.n	80191a0 <rfalTransceiveRx+0x308>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8019192:	4b88      	ldr	r3, [pc, #544]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019194:	2203      	movs	r2, #3
 8019196:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019198:	4b86      	ldr	r3, [pc, #536]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801919a:	225a      	movs	r2, #90	; 0x5a
 801919c:	751a      	strb	r2, [r3, #20]
                break;
 801919e:	e1be      	b.n	801951e <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 80191a0:	f000 f9e2 	bl	8019568 <rfalFIFOStatusGetNumBytes>
 80191a4:	4603      	mov	r3, r0
 80191a6:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 80191a8:	4b82      	ldr	r3, [pc, #520]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191ac:	f003 0302 	and.w	r3, r3, #2
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d11f      	bne.n	80191f4 <rfalTransceiveRx+0x35c>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 80191b4:	2240      	movs	r2, #64	; 0x40
 80191b6:	2140      	movs	r1, #64	; 0x40
 80191b8:	2009      	movs	r0, #9
 80191ba:	f7ea fb1f 	bl	80037fc <st25r3911CheckReg>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d017      	beq.n	80191f4 <rfalTransceiveRx+0x35c>
 80191c4:	4b7b      	ldr	r3, [pc, #492]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80191c8:	461a      	mov	r2, r3
 80191ca:	7bfb      	ldrb	r3, [r7, #15]
 80191cc:	4413      	add	r3, r2
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d010      	beq.n	80191f4 <rfalTransceiveRx+0x35c>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 80191d2:	7bfb      	ldrb	r3, [r7, #15]
 80191d4:	2b02      	cmp	r3, #2
 80191d6:	d903      	bls.n	80191e0 <rfalTransceiveRx+0x348>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 80191d8:	7bfb      	ldrb	r3, [r7, #15]
 80191da:	3b02      	subs	r3, #2
 80191dc:	73fb      	strb	r3, [r7, #15]
 80191de:	e009      	b.n	80191f4 <rfalTransceiveRx+0x35c>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 80191e0:	4b74      	ldr	r3, [pc, #464]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80191e4:	2b02      	cmp	r3, #2
 80191e6:	d905      	bls.n	80191f4 <rfalTransceiveRx+0x35c>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 80191e8:	4b72      	ldr	r3, [pc, #456]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80191ec:	3b02      	subs	r3, #2
 80191ee:	b29a      	uxth	r2, r3
 80191f0:	4b70      	ldr	r3, [pc, #448]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191f2:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 80191f4:	4b6f      	ldr	r3, [pc, #444]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80191f6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80191f8:	7bfb      	ldrb	r3, [r7, #15]
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	4413      	add	r3, r2
 80191fe:	b29a      	uxth	r2, r3
 8019200:	4b6c      	ldr	r3, [pc, #432]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019202:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8019204:	4b6b      	ldr	r3, [pc, #428]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019206:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019208:	4b6a      	ldr	r3, [pc, #424]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801920a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801920c:	3307      	adds	r3, #7
 801920e:	08db      	lsrs	r3, r3, #3
 8019210:	b29b      	uxth	r3, r3
 8019212:	429a      	cmp	r2, r3
 8019214:	d90f      	bls.n	8019236 <rfalTransceiveRx+0x39e>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8019216:	4b67      	ldr	r3, [pc, #412]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801921a:	3307      	adds	r3, #7
 801921c:	08db      	lsrs	r3, r3, #3
 801921e:	b2da      	uxtb	r2, r3
 8019220:	4b64      	ldr	r3, [pc, #400]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019222:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8019224:	b2db      	uxtb	r3, r3
 8019226:	1ad3      	subs	r3, r2, r3
 8019228:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 801922a:	4b62      	ldr	r3, [pc, #392]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801922c:	2201      	movs	r2, #1
 801922e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019230:	4b60      	ldr	r3, [pc, #384]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019232:	225a      	movs	r2, #90	; 0x5a
 8019234:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8019236:	4b5f      	ldr	r3, [pc, #380]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801923a:	4a5e      	ldr	r2, [pc, #376]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801923c:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801923e:	4413      	add	r3, r2
 8019240:	7bfa      	ldrb	r2, [r7, #15]
 8019242:	4611      	mov	r1, r2
 8019244:	4618      	mov	r0, r3
 8019246:	f7ea ff55 	bl	80040f4 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 801924a:	4b5a      	ldr	r3, [pc, #360]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801924e:	2b00      	cmp	r3, #0
 8019250:	d019      	beq.n	8019286 <rfalTransceiveRx+0x3ee>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8019252:	4b58      	ldr	r3, [pc, #352]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019254:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019256:	4b57      	ldr	r3, [pc, #348]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801925a:	00d2      	lsls	r2, r2, #3
 801925c:	b292      	uxth	r2, r2
 801925e:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 8019260:	f000 f98e 	bl	8019580 <rfalFIFOStatusIsIncompleteByte>
 8019264:	4603      	mov	r3, r0
 8019266:	2b00      	cmp	r3, #0
 8019268:	d00d      	beq.n	8019286 <rfalTransceiveRx+0x3ee>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 801926a:	f000 f9ad 	bl	80195c8 <rfalFIFOGetNumIncompleteBits>
 801926e:	4603      	mov	r3, r0
 8019270:	f1c3 0208 	rsb	r2, r3, #8
 8019274:	4b4f      	ldr	r3, [pc, #316]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019278:	8819      	ldrh	r1, [r3, #0]
 801927a:	b292      	uxth	r2, r2
 801927c:	4b4d      	ldr	r3, [pc, #308]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019280:	1a8a      	subs	r2, r1, r2
 8019282:	b292      	uxth	r2, r2
 8019284:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 8019286:	4b4b      	ldr	r3, [pc, #300]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019288:	785b      	ldrb	r3, [r3, #1]
 801928a:	2b07      	cmp	r3, #7
 801928c:	d003      	beq.n	8019296 <rfalTransceiveRx+0x3fe>
 801928e:	4b49      	ldr	r3, [pc, #292]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019290:	785b      	ldrb	r3, [r3, #1]
 8019292:	2b08      	cmp	r3, #8
 8019294:	d165      	bne.n	8019362 <rfalTransceiveRx+0x4ca>
 8019296:	4b47      	ldr	r3, [pc, #284]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019298:	8adb      	ldrh	r3, [r3, #22]
 801929a:	2b02      	cmp	r3, #2
 801929c:	d161      	bne.n	8019362 <rfalTransceiveRx+0x4ca>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 801929e:	2300      	movs	r3, #0
 80192a0:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80192a2:	4b44      	ldr	r3, [pc, #272]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80192a6:	4b43      	ldr	r3, [pc, #268]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192a8:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 80192aa:	4b42      	ldr	r3, [pc, #264]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192ac:	f8d3 53d4 	ldr.w	r5, [r3, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 80192b0:	4b40      	ldr	r3, [pc, #256]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192b2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80192b6:	3307      	adds	r3, #7
 80192b8:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80192ba:	b29e      	uxth	r6, r3
 80192bc:	4b3d      	ldr	r3, [pc, #244]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80192c2:	4a3c      	ldr	r2, [pc, #240]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192c4:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 80192c8:	493a      	ldr	r1, [pc, #232]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192ca:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80192cc:	2908      	cmp	r1, #8
 80192ce:	bf0c      	ite	eq
 80192d0:	2101      	moveq	r1, #1
 80192d2:	2100      	movne	r1, #0
 80192d4:	b2c9      	uxtb	r1, r1
 80192d6:	9103      	str	r1, [sp, #12]
 80192d8:	9202      	str	r2, [sp, #8]
 80192da:	9301      	str	r3, [sp, #4]
 80192dc:	1dbb      	adds	r3, r7, #6
 80192de:	9300      	str	r3, [sp, #0]
 80192e0:	4633      	mov	r3, r6
 80192e2:	462a      	mov	r2, r5
 80192e4:	4621      	mov	r1, r4
 80192e6:	f7f6 fd93 	bl	800fe10 <iso15693VICCDecode>
 80192ea:	4603      	mov	r3, r0
 80192ec:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 80192ee:	89bb      	ldrh	r3, [r7, #12]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d002      	beq.n	80192fa <rfalTransceiveRx+0x462>
 80192f4:	89bb      	ldrh	r3, [r7, #12]
 80192f6:	2b15      	cmp	r3, #21
 80192f8:	d11f      	bne.n	801933a <rfalTransceiveRx+0x4a2>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 80192fa:	4b2e      	ldr	r3, [pc, #184]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80192fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019300:	f003 0302 	and.w	r3, r3, #2
 8019304:	2b00      	cmp	r3, #0
 8019306:	d118      	bne.n	801933a <rfalTransceiveRx+0x4a2>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8019308:	4b2a      	ldr	r3, [pc, #168]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801930a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801930e:	881b      	ldrh	r3, [r3, #0]
 8019310:	f003 0307 	and.w	r3, r3, #7
 8019314:	b29b      	uxth	r3, r3
 8019316:	2b00      	cmp	r3, #0
 8019318:	d10f      	bne.n	801933a <rfalTransceiveRx+0x4a2>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 801931a:	4b26      	ldr	r3, [pc, #152]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801931c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8019320:	881b      	ldrh	r3, [r3, #0]
 8019322:	2b0f      	cmp	r3, #15
 8019324:	d909      	bls.n	801933a <rfalTransceiveRx+0x4a2>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8019326:	4b23      	ldr	r3, [pc, #140]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019328:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801932c:	881a      	ldrh	r2, [r3, #0]
 801932e:	4b21      	ldr	r3, [pc, #132]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019330:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8019334:	3a10      	subs	r2, #16
 8019336:	b292      	uxth	r2, r2
 8019338:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 801933a:	4a1e      	ldr	r2, [pc, #120]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801933c:	4b1d      	ldr	r3, [pc, #116]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801933e:	f102 041c 	add.w	r4, r2, #28
 8019342:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8019346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801934a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801934e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 8019352:	89bb      	ldrh	r3, [r7, #12]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d001      	beq.n	801935c <rfalTransceiveRx+0x4c4>
 8019358:	89bb      	ldrh	r3, [r7, #12]
 801935a:	e000      	b.n	801935e <rfalTransceiveRx+0x4c6>
 801935c:	2302      	movs	r3, #2
 801935e:	4a15      	ldr	r2, [pc, #84]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019360:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 8019362:	4b14      	ldr	r3, [pc, #80]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019364:	8adb      	ldrh	r3, [r3, #22]
 8019366:	2b02      	cmp	r3, #2
 8019368:	d003      	beq.n	8019372 <rfalTransceiveRx+0x4da>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 801936a:	4b12      	ldr	r3, [pc, #72]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801936c:	225a      	movs	r2, #90	; 0x5a
 801936e:	751a      	strb	r2, [r3, #20]
                break;
 8019370:	e0d5      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8019372:	4b10      	ldr	r3, [pc, #64]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019374:	785b      	ldrb	r3, [r3, #1]
 8019376:	2b09      	cmp	r3, #9
 8019378:	d003      	beq.n	8019382 <rfalTransceiveRx+0x4ea>
 801937a:	4b0e      	ldr	r3, [pc, #56]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801937c:	785b      	ldrb	r3, [r3, #1]
 801937e:	2b0d      	cmp	r3, #13
 8019380:	d103      	bne.n	801938a <rfalTransceiveRx+0x4f2>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8019382:	4b0c      	ldr	r3, [pc, #48]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019384:	2258      	movs	r2, #88	; 0x58
 8019386:	751a      	strb	r2, [r3, #20]
                break;
 8019388:	e0c9      	b.n	801951e <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 801938a:	4b0a      	ldr	r3, [pc, #40]	; (80193b4 <rfalTransceiveRx+0x51c>)
 801938c:	2259      	movs	r2, #89	; 0x59
 801938e:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8019390:	4b08      	ldr	r3, [pc, #32]	; (80193b4 <rfalTransceiveRx+0x51c>)
 8019392:	799b      	ldrb	r3, [r3, #6]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d003      	beq.n	80193a0 <rfalTransceiveRx+0x508>
 8019398:	2100      	movs	r1, #0
 801939a:	2001      	movs	r0, #1
 801939c:	f7ea fd20 	bl	8003de0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 80193a0:	f7ff fa82 	bl	80188a8 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 80193a4:	4b03      	ldr	r3, [pc, #12]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80193a6:	2200      	movs	r2, #0
 80193a8:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 80193aa:	4b02      	ldr	r3, [pc, #8]	; (80193b4 <rfalTransceiveRx+0x51c>)
 80193ac:	2200      	movs	r2, #0
 80193ae:	751a      	strb	r2, [r3, #20]
            break;
 80193b0:	e0b5      	b.n	801951e <rfalTransceiveRx+0x686>
 80193b2:	bf00      	nop
 80193b4:	200039f8 	.word	0x200039f8
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 80193b8:	200a      	movs	r0, #10
 80193ba:	f7eb f965 	bl	8004688 <timerCalculateTimer>
 80193be:	4603      	mov	r3, r0
 80193c0:	4a59      	ldr	r2, [pc, #356]	; (8019528 <rfalTransceiveRx+0x690>)
 80193c2:	6493      	str	r3, [r2, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 80193c4:	f000 f8d0 	bl	8019568 <rfalFIFOStatusGetNumBytes>
 80193c8:	4603      	mov	r3, r0
 80193ca:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 80193cc:	4b56      	ldr	r3, [pc, #344]	; (8019528 <rfalTransceiveRx+0x690>)
 80193ce:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80193d0:	7bfb      	ldrb	r3, [r7, #15]
 80193d2:	b29b      	uxth	r3, r3
 80193d4:	4413      	add	r3, r2
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	4b53      	ldr	r3, [pc, #332]	; (8019528 <rfalTransceiveRx+0x690>)
 80193da:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 80193dc:	4b52      	ldr	r3, [pc, #328]	; (8019528 <rfalTransceiveRx+0x690>)
 80193de:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80193e0:	4b51      	ldr	r3, [pc, #324]	; (8019528 <rfalTransceiveRx+0x690>)
 80193e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193e4:	3307      	adds	r3, #7
 80193e6:	08db      	lsrs	r3, r3, #3
 80193e8:	b29b      	uxth	r3, r3
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d90a      	bls.n	8019404 <rfalTransceiveRx+0x56c>
 80193ee:	4b4e      	ldr	r3, [pc, #312]	; (8019528 <rfalTransceiveRx+0x690>)
 80193f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193f2:	3307      	adds	r3, #7
 80193f4:	08db      	lsrs	r3, r3, #3
 80193f6:	b2da      	uxtb	r2, r3
 80193f8:	4b4b      	ldr	r3, [pc, #300]	; (8019528 <rfalTransceiveRx+0x690>)
 80193fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	1ad3      	subs	r3, r2, r3
 8019400:	b2db      	uxtb	r3, r3
 8019402:	e000      	b.n	8019406 <rfalTransceiveRx+0x56e>
 8019404:	7bfb      	ldrb	r3, [r7, #15]
 8019406:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8019408:	4b47      	ldr	r3, [pc, #284]	; (8019528 <rfalTransceiveRx+0x690>)
 801940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801940c:	4a46      	ldr	r2, [pc, #280]	; (8019528 <rfalTransceiveRx+0x690>)
 801940e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8019410:	4413      	add	r3, r2
 8019412:	7bba      	ldrb	r2, [r7, #14]
 8019414:	4611      	mov	r1, r2
 8019416:	4618      	mov	r0, r3
 8019418:	f7ea fe6c 	bl	80040f4 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 801941c:	4b42      	ldr	r3, [pc, #264]	; (8019528 <rfalTransceiveRx+0x690>)
 801941e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8019420:	7bbb      	ldrb	r3, [r7, #14]
 8019422:	b29b      	uxth	r3, r3
 8019424:	4413      	add	r3, r2
 8019426:	b29a      	uxth	r2, r3
 8019428:	4b3f      	ldr	r3, [pc, #252]	; (8019528 <rfalTransceiveRx+0x690>)
 801942a:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 801942c:	7bba      	ldrb	r2, [r7, #14]
 801942e:	7bfb      	ldrb	r3, [r7, #15]
 8019430:	429a      	cmp	r2, r3
 8019432:	d207      	bcs.n	8019444 <rfalTransceiveRx+0x5ac>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 8019434:	7bfa      	ldrb	r2, [r7, #15]
 8019436:	7bbb      	ldrb	r3, [r7, #14]
 8019438:	1ad3      	subs	r3, r2, r3
 801943a:	b2db      	uxtb	r3, r3
 801943c:	4619      	mov	r1, r3
 801943e:	2000      	movs	r0, #0
 8019440:	f7ea fe58 	bl	80040f4 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 8019444:	f000 f884 	bl	8019550 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8019448:	4b37      	ldr	r3, [pc, #220]	; (8019528 <rfalTransceiveRx+0x690>)
 801944a:	2254      	movs	r2, #84	; 0x54
 801944c:	751a      	strb	r2, [r3, #20]
            break;
 801944e:	e066      	b.n	801951e <rfalTransceiveRx+0x686>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8019450:	4b35      	ldr	r3, [pc, #212]	; (8019528 <rfalTransceiveRx+0x690>)
 8019452:	799b      	ldrb	r3, [r3, #6]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d003      	beq.n	8019460 <rfalTransceiveRx+0x5c8>
 8019458:	2100      	movs	r1, #0
 801945a:	2001      	movs	r0, #1
 801945c:	f7ea fcc0 	bl	8003de0 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8019460:	f7ff fa22 	bl	80188a8 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8019464:	4b30      	ldr	r3, [pc, #192]	; (8019528 <rfalTransceiveRx+0x690>)
 8019466:	8adb      	ldrh	r3, [r3, #22]
 8019468:	2b02      	cmp	r3, #2
 801946a:	d102      	bne.n	8019472 <rfalTransceiveRx+0x5da>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 801946c:	4b2e      	ldr	r3, [pc, #184]	; (8019528 <rfalTransceiveRx+0x690>)
 801946e:	2208      	movs	r2, #8
 8019470:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8019472:	4b2d      	ldr	r3, [pc, #180]	; (8019528 <rfalTransceiveRx+0x690>)
 8019474:	2200      	movs	r2, #0
 8019476:	751a      	strb	r2, [r3, #20]
            break;
 8019478:	e051      	b.n	801951e <rfalTransceiveRx+0x686>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 801947a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 801947e:	f7eb f87b 	bl	8004578 <st25r3911GetInterrupt>
 8019482:	4603      	mov	r3, r0
 8019484:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d043      	beq.n	8019514 <rfalTransceiveRx+0x67c>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 801948c:	68bb      	ldr	r3, [r7, #8]
 801948e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019492:	2b00      	cmp	r3, #0
 8019494:	d002      	beq.n	801949c <rfalTransceiveRx+0x604>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8019496:	4b24      	ldr	r3, [pc, #144]	; (8019528 <rfalTransceiveRx+0x690>)
 8019498:	2253      	movs	r2, #83	; 0x53
 801949a:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d038      	beq.n	8019518 <rfalTransceiveRx+0x680>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 80194a6:	4b20      	ldr	r3, [pc, #128]	; (8019528 <rfalTransceiveRx+0x690>)
 80194a8:	2225      	movs	r2, #37	; 0x25
 80194aa:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80194ac:	4b1e      	ldr	r3, [pc, #120]	; (8019528 <rfalTransceiveRx+0x690>)
 80194ae:	225a      	movs	r2, #90	; 0x5a
 80194b0:	751a      	strb	r2, [r3, #20]
            }
            break;
 80194b2:	e031      	b.n	8019518 <rfalTransceiveRx+0x680>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 80194b4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80194b8:	f7eb f85e 	bl	8004578 <st25r3911GetInterrupt>
 80194bc:	4603      	mov	r3, r0
 80194be:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d02a      	beq.n	801951c <rfalTransceiveRx+0x684>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d003      	beq.n	80194d8 <rfalTransceiveRx+0x640>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 80194d0:	4b15      	ldr	r3, [pc, #84]	; (8019528 <rfalTransceiveRx+0x690>)
 80194d2:	2259      	movs	r2, #89	; 0x59
 80194d4:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 80194d6:	e022      	b.n	801951e <rfalTransceiveRx+0x686>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d006      	beq.n	80194f0 <rfalTransceiveRx+0x658>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 80194e2:	4b11      	ldr	r3, [pc, #68]	; (8019528 <rfalTransceiveRx+0x690>)
 80194e4:	221d      	movs	r2, #29
 80194e6:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80194e8:	4b0f      	ldr	r3, [pc, #60]	; (8019528 <rfalTransceiveRx+0x690>)
 80194ea:	225a      	movs	r2, #90	; 0x5a
 80194ec:	751a      	strb	r2, [r3, #20]
            break;
 80194ee:	e016      	b.n	801951e <rfalTransceiveRx+0x686>
               gRFAL.TxRx.status = ERR_IO;
 80194f0:	4b0d      	ldr	r3, [pc, #52]	; (8019528 <rfalTransceiveRx+0x690>)
 80194f2:	2203      	movs	r2, #3
 80194f4:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80194f6:	4b0c      	ldr	r3, [pc, #48]	; (8019528 <rfalTransceiveRx+0x690>)
 80194f8:	225a      	movs	r2, #90	; 0x5a
 80194fa:	751a      	strb	r2, [r3, #20]
            break;
 80194fc:	e00f      	b.n	801951e <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 80194fe:	4b0a      	ldr	r3, [pc, #40]	; (8019528 <rfalTransceiveRx+0x690>)
 8019500:	2208      	movs	r2, #8
 8019502:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019504:	4b08      	ldr	r3, [pc, #32]	; (8019528 <rfalTransceiveRx+0x690>)
 8019506:	225a      	movs	r2, #90	; 0x5a
 8019508:	751a      	strb	r2, [r3, #20]
            break;           
 801950a:	e008      	b.n	801951e <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 801950c:	bf00      	nop
 801950e:	e006      	b.n	801951e <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8019510:	bf00      	nop
 8019512:	e004      	b.n	801951e <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8019514:	bf00      	nop
 8019516:	e002      	b.n	801951e <rfalTransceiveRx+0x686>
            break;
 8019518:	bf00      	nop
 801951a:	e000      	b.n	801951e <rfalTransceiveRx+0x686>
               break;  /* No interrupt to process */
 801951c:	bf00      	nop
    }    
}
 801951e:	bf00      	nop
 8019520:	3714      	adds	r7, #20
 8019522:	46bd      	mov	sp, r7
 8019524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019526:	bf00      	nop
 8019528:	200039f8 	.word	0x200039f8

0801952c <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 801952c:	b580      	push	{r7, lr}
 801952e:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8019530:	4b05      	ldr	r3, [pc, #20]	; (8019548 <rfalFIFOStatusUpdate+0x1c>)
 8019532:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019536:	2bff      	cmp	r3, #255	; 0xff
 8019538:	d104      	bne.n	8019544 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 801953a:	2202      	movs	r2, #2
 801953c:	4903      	ldr	r1, [pc, #12]	; (801954c <rfalFIFOStatusUpdate+0x20>)
 801953e:	201a      	movs	r0, #26
 8019540:	f7ea fbae 	bl	8003ca0 <st25r3911ReadMultipleRegisters>
    }
}
 8019544:	bf00      	nop
 8019546:	bd80      	pop	{r7, pc}
 8019548:	200039f8 	.word	0x200039f8
 801954c:	20003a36 	.word	0x20003a36

08019550 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8019550:	b480      	push	{r7}
 8019552:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8019554:	4b03      	ldr	r3, [pc, #12]	; (8019564 <rfalFIFOStatusClear+0x14>)
 8019556:	22ff      	movs	r2, #255	; 0xff
 8019558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 801955c:	bf00      	nop
 801955e:	46bd      	mov	sp, r7
 8019560:	bc80      	pop	{r7}
 8019562:	4770      	bx	lr
 8019564:	200039f8 	.word	0x200039f8

08019568 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 8019568:	b580      	push	{r7, lr}
 801956a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 801956c:	f7ff ffde 	bl	801952c <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 8019570:	4b02      	ldr	r3, [pc, #8]	; (801957c <rfalFIFOStatusGetNumBytes+0x14>)
 8019572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 8019576:	4618      	mov	r0, r3
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	200039f8 	.word	0x200039f8

08019580 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 8019580:	b580      	push	{r7, lr}
 8019582:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8019584:	f7ff ffd2 	bl	801952c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 8019588:	4b05      	ldr	r3, [pc, #20]	; (80195a0 <rfalFIFOStatusIsIncompleteByte+0x20>)
 801958a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801958e:	f003 031e 	and.w	r3, r3, #30
 8019592:	2b00      	cmp	r3, #0
 8019594:	bf14      	ite	ne
 8019596:	2301      	movne	r3, #1
 8019598:	2300      	moveq	r3, #0
 801959a:	b2db      	uxtb	r3, r3
}
 801959c:	4618      	mov	r0, r3
 801959e:	bd80      	pop	{r7, pc}
 80195a0:	200039f8 	.word	0x200039f8

080195a4 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 80195a8:	f7ff ffc0 	bl	801952c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 80195ac:	4b05      	ldr	r3, [pc, #20]	; (80195c4 <rfalFIFOStatusIsMissingPar+0x20>)
 80195ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80195b2:	f003 0301 	and.w	r3, r3, #1
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	bf14      	ite	ne
 80195ba:	2301      	movne	r3, #1
 80195bc:	2300      	moveq	r3, #0
 80195be:	b2db      	uxtb	r3, r3
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	bd80      	pop	{r7, pc}
 80195c4:	200039f8 	.word	0x200039f8

080195c8 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 80195cc:	f7ff ffae 	bl	801952c <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 80195d0:	4b04      	ldr	r3, [pc, #16]	; (80195e4 <rfalFIFOGetNumIncompleteBits+0x1c>)
 80195d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80195d6:	085b      	lsrs	r3, r3, #1
 80195d8:	b2db      	uxtb	r3, r3
 80195da:	f003 0307 	and.w	r3, r3, #7
 80195de:	b2db      	uxtb	r3, r3
}
 80195e0:	4618      	mov	r0, r3
 80195e2:	bd80      	pop	{r7, pc}
 80195e4:	200039f8 	.word	0x200039f8

080195e8 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b086      	sub	sp, #24
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	60b9      	str	r1, [r7, #8]
 80195f0:	607b      	str	r3, [r7, #4]
 80195f2:	4603      	mov	r3, r0
 80195f4:	73fb      	strb	r3, [r7, #15]
 80195f6:	4613      	mov	r3, r2
 80195f8:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 80195fa:	2208      	movs	r2, #8
 80195fc:	2108      	movs	r1, #8
 80195fe:	2002      	movs	r0, #2
 8019600:	f7ea f8fc 	bl	80037fc <st25r3911CheckReg>
 8019604:	4603      	mov	r3, r0
 8019606:	f083 0301 	eor.w	r3, r3, #1
 801960a:	b2db      	uxtb	r3, r3
 801960c:	2b00      	cmp	r3, #0
 801960e:	d10b      	bne.n	8019628 <rfalISO14443ATransceiveShortFrame+0x40>
 8019610:	4b70      	ldr	r3, [pc, #448]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	2b01      	cmp	r3, #1
 8019616:	d907      	bls.n	8019628 <rfalISO14443ATransceiveShortFrame+0x40>
 8019618:	4b6e      	ldr	r3, [pc, #440]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801961a:	785b      	ldrb	r3, [r3, #1]
 801961c:	2b01      	cmp	r3, #1
 801961e:	d005      	beq.n	801962c <rfalISO14443ATransceiveShortFrame+0x44>
 8019620:	4b6c      	ldr	r3, [pc, #432]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019622:	785b      	ldrb	r3, [r3, #1]
 8019624:	2b02      	cmp	r3, #2
 8019626:	d001      	beq.n	801962c <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 8019628:	2321      	movs	r3, #33	; 0x21
 801962a:	e0cf      	b.n	80197cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d006      	beq.n	8019640 <rfalISO14443ATransceiveShortFrame+0x58>
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d003      	beq.n	8019640 <rfalISO14443ATransceiveShortFrame+0x58>
 8019638:	6a3b      	ldr	r3, [r7, #32]
 801963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801963e:	d101      	bne.n	8019644 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 8019640:	2307      	movs	r3, #7
 8019642:	e0c3      	b.n	80197cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 8019644:	7bfb      	ldrb	r3, [r7, #15]
 8019646:	2b26      	cmp	r3, #38	; 0x26
 8019648:	d004      	beq.n	8019654 <rfalISO14443ATransceiveShortFrame+0x6c>
 801964a:	2b52      	cmp	r3, #82	; 0x52
 801964c:	d105      	bne.n	801965a <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 801964e:	23c7      	movs	r3, #199	; 0xc7
 8019650:	757b      	strb	r3, [r7, #21]
            break;
 8019652:	e004      	b.n	801965e <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 8019654:	23c6      	movs	r3, #198	; 0xc6
 8019656:	757b      	strb	r3, [r7, #21]
            break;
 8019658:	e001      	b.n	801965e <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 801965a:	2307      	movs	r3, #7
 801965c:	e0b6      	b.n	80197cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 801965e:	2101      	movs	r1, #1
 8019660:	2005      	movs	r0, #5
 8019662:	f7ea fc74 	bl	8003f4e <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8019666:	2180      	movs	r1, #128	; 0x80
 8019668:	2009      	movs	r0, #9
 801966a:	f7ea fc70 	bl	8003f4e <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 801966e:	bf00      	nop
 8019670:	f7fe fdce 	bl	8018210 <rfalIsGTExpired>
 8019674:	4603      	mov	r3, r0
 8019676:	f083 0301 	eor.w	r3, r3, #1
 801967a:	b2db      	uxtb	r3, r3
 801967c:	2b00      	cmp	r3, #0
 801967e:	d1f7      	bne.n	8019670 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 8019680:	bf00      	nop
 8019682:	2204      	movs	r2, #4
 8019684:	2104      	movs	r1, #4
 8019686:	202b      	movs	r0, #43	; 0x2b
 8019688:	f7ea f8b8 	bl	80037fc <st25r3911CheckReg>
 801968c:	4603      	mov	r3, r0
 801968e:	2b00      	cmp	r3, #0
 8019690:	d1f7      	bne.n	8019682 <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8019692:	4b50      	ldr	r3, [pc, #320]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019694:	2200      	movs	r2, #0
 8019696:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 8019698:	4b4e      	ldr	r3, [pc, #312]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801969a:	2203      	movs	r2, #3
 801969c:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 801969e:	4a4d      	ldr	r2, [pc, #308]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 80196a4:	7bbb      	ldrb	r3, [r7, #14]
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	4b4a      	ldr	r3, [pc, #296]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196aa:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 80196ac:	4a49      	ldr	r2, [pc, #292]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 80196b2:	6a3b      	ldr	r3, [r7, #32]
 80196b4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80196b8:	4a47      	ldr	r2, [pc, #284]	; (80197d8 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 80196ba:	4293      	cmp	r3, r2
 80196bc:	bf28      	it	cs
 80196be:	4613      	movcs	r3, r2
 80196c0:	099b      	lsrs	r3, r3, #6
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7ea f8dc 	bl	8003880 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 80196c8:	4b42      	ldr	r3, [pc, #264]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196ca:	68db      	ldr	r3, [r3, #12]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d010      	beq.n	80196f2 <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 80196d0:	4b40      	ldr	r3, [pc, #256]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196d2:	68db      	ldr	r3, [r3, #12]
 80196d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80196d8:	d306      	bcc.n	80196e8 <rfalISO14443ATransceiveShortFrame+0x100>
 80196da:	4b3e      	ldr	r3, [pc, #248]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196dc:	68db      	ldr	r3, [r3, #12]
 80196de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80196e2:	099b      	lsrs	r3, r3, #6
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	e000      	b.n	80196ea <rfalISO14443ATransceiveShortFrame+0x102>
 80196e8:	2304      	movs	r3, #4
 80196ea:	4619      	mov	r1, r3
 80196ec:	200e      	movs	r0, #14
 80196ee:	f7ea fbbf 	bl	8003e70 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 80196f2:	4b38      	ldr	r3, [pc, #224]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196f4:	691b      	ldr	r3, [r3, #16]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d014      	beq.n	8019724 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 80196fa:	4b36      	ldr	r3, [pc, #216]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196fc:	691b      	ldr	r3, [r3, #16]
 80196fe:	f240 423b 	movw	r2, #1083	; 0x43b
 8019702:	4293      	cmp	r3, r2
 8019704:	d804      	bhi.n	8019710 <rfalISO14443ATransceiveShortFrame+0x128>
 8019706:	4b33      	ldr	r3, [pc, #204]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019708:	691b      	ldr	r3, [r3, #16]
 801970a:	08db      	lsrs	r3, r3, #3
 801970c:	b29b      	uxth	r3, r3
 801970e:	e005      	b.n	801971c <rfalISO14443ATransceiveShortFrame+0x134>
 8019710:	4b30      	ldr	r3, [pc, #192]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019712:	691b      	ldr	r3, [r3, #16]
 8019714:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8019718:	08db      	lsrs	r3, r3, #3
 801971a:	b29b      	uxth	r3, r3
 801971c:	2120      	movs	r1, #32
 801971e:	4618      	mov	r0, r3
 8019720:	f7ea f838 	bl	8003794 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 8019724:	f7ff f8d6 	bl	80188d4 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8019728:	2004      	movs	r0, #4
 801972a:	f7ea ff25 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801972e:	2004      	movs	r0, #4
 8019730:	f7ea ff5e 	bl	80045f0 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 8019734:	4b27      	ldr	r3, [pc, #156]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019736:	795b      	ldrb	r3, [r3, #5]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d005      	beq.n	8019748 <rfalISO14443ATransceiveShortFrame+0x160>
 801973c:	4b25      	ldr	r3, [pc, #148]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801973e:	795b      	ldrb	r3, [r3, #5]
 8019740:	4619      	mov	r1, r3
 8019742:	2001      	movs	r0, #1
 8019744:	f7ea fb4c 	bl	8003de0 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 8019748:	2100      	movs	r1, #0
 801974a:	201e      	movs	r0, #30
 801974c:	f7ea fb90 	bl	8003e70 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 8019750:	7d7b      	ldrb	r3, [r7, #21]
 8019752:	4618      	mov	r0, r3
 8019754:	f7ea fd1a 	bl	800418c <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 8019758:	6a3b      	ldr	r3, [r7, #32]
 801975a:	f646 12ef 	movw	r2, #27119	; 0x69ef
 801975e:	4293      	cmp	r3, r2
 8019760:	d906      	bls.n	8019770 <rfalISO14443ATransceiveShortFrame+0x188>
 8019762:	6a3b      	ldr	r3, [r7, #32]
 8019764:	4a1d      	ldr	r2, [pc, #116]	; (80197dc <rfalISO14443ATransceiveShortFrame+0x1f4>)
 8019766:	fba2 2303 	umull	r2, r3, r2, r3
 801976a:	0b1b      	lsrs	r3, r3, #12
 801976c:	b29b      	uxth	r3, r3
 801976e:	e000      	b.n	8019772 <rfalISO14443ATransceiveShortFrame+0x18a>
 8019770:	2301      	movs	r3, #1
 8019772:	4619      	mov	r1, r3
 8019774:	2008      	movs	r0, #8
 8019776:	f7ea feab 	bl	80044d0 <st25r3911WaitForInterruptsTimed>
 801977a:	4603      	mov	r3, r0
 801977c:	2b00      	cmp	r3, #0
 801977e:	d102      	bne.n	8019786 <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 8019780:	2303      	movs	r3, #3
 8019782:	82fb      	strh	r3, [r7, #22]
 8019784:	e016      	b.n	80197b4 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 8019786:	4b13      	ldr	r3, [pc, #76]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019788:	799b      	ldrb	r3, [r3, #6]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d005      	beq.n	801979a <rfalISO14443ATransceiveShortFrame+0x1b2>
 801978e:	4b11      	ldr	r3, [pc, #68]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019790:	799b      	ldrb	r3, [r3, #6]
 8019792:	4619      	mov	r1, r3
 8019794:	2001      	movs	r0, #1
 8019796:	f7ea fb23 	bl	8003de0 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 801979a:	4b0e      	ldr	r3, [pc, #56]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801979c:	2203      	movs	r2, #3
 801979e:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80197a0:	4b0c      	ldr	r3, [pc, #48]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80197a2:	2251      	movs	r2, #81	; 0x51
 80197a4:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 80197a6:	4b0b      	ldr	r3, [pc, #44]	; (80197d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80197a8:	2202      	movs	r2, #2
 80197aa:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 80197ac:	f7fe ff62 	bl	8018674 <rfalTransceiveBlockingRx>
 80197b0:	4603      	mov	r3, r0
 80197b2:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80197b4:	2004      	movs	r0, #4
 80197b6:	f7ea ff27 	bl	8004608 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80197ba:	2101      	movs	r1, #1
 80197bc:	2005      	movs	r0, #5
 80197be:	f7ea fba3 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80197c2:	2180      	movs	r1, #128	; 0x80
 80197c4:	2009      	movs	r0, #9
 80197c6:	f7ea fb9f 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    return ret;
 80197ca:	8afb      	ldrh	r3, [r7, #22]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3718      	adds	r7, #24
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	200039f8 	.word	0x200039f8
 80197d8:	0ffff000 	.word	0x0ffff000
 80197dc:	4d542005 	.word	0x4d542005

080197e0 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b08e      	sub	sp, #56	; 0x38
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	60b9      	str	r1, [r7, #8]
 80197ea:	607a      	str	r2, [r7, #4]
 80197ec:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 80197ee:	4b77      	ldr	r3, [pc, #476]	; (80199cc <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d903      	bls.n	80197fe <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 80197f6:	4b75      	ldr	r3, [pc, #468]	; (80199cc <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 80197f8:	785b      	ldrb	r3, [r3, #1]
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d001      	beq.n	8019802 <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 80197fe:	2321      	movs	r3, #33	; 0x21
 8019800:	e0df      	b.n	80199c2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d008      	beq.n	801981a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d005      	beq.n	801981a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d002      	beq.n	801981a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d101      	bne.n	801981e <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 801981a:	2307      	movs	r3, #7
 801981c:	e0d1      	b.n	80199c2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801981e:	f240 1003 	movw	r0, #259	; 0x103
 8019822:	f7f5 ffff 	bl	800f824 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 8019826:	2101      	movs	r1, #1
 8019828:	2005      	movs	r0, #5
 801982a:	f7ea fb90 	bl	8003f4e <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801982e:	2180      	movs	r1, #128	; 0x80
 8019830:	2009      	movs	r0, #9
 8019832:	f7ea fb8c 	bl	8003f4e <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8019836:	230b      	movs	r3, #11
 8019838:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 801983e:	68bb      	ldr	r3, [r7, #8]
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	b29b      	uxth	r3, r3
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	b29a      	uxth	r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	781b      	ldrb	r3, [r3, #0]
 801984c:	b29b      	uxth	r3, r3
 801984e:	4413      	add	r3, r2
 8019850:	b29b      	uxth	r3, r3
 8019852:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	461a      	mov	r2, r3
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	4413      	add	r3, r2
 801985e:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8019860:	2328      	movs	r3, #40	; 0x28
 8019862:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 8019868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801986a:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 801986c:	f107 0318 	add.w	r3, r7, #24
 8019870:	4618      	mov	r0, r3
 8019872:	f7fe fd5d 	bl	8018330 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8019876:	2004      	movs	r0, #4
 8019878:	f7ea fe7e 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801987c:	2004      	movs	r0, #4
 801987e:	f7ea feb7 	bl	80045f0 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 8019882:	2300      	movs	r3, #0
 8019884:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d02d      	beq.n	80198ec <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	461a      	mov	r2, r3
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	4413      	add	r3, r2
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	461a      	mov	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	f1c3 0308 	rsb	r3, r3, #8
 80198a6:	409a      	lsls	r2, r3
 80198a8:	68bb      	ldr	r3, [r7, #8]
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	4619      	mov	r1, r3
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	440b      	add	r3, r1
 80198b2:	b2d2      	uxtb	r2, r2
 80198b4:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80198b6:	68bb      	ldr	r3, [r7, #8]
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	461a      	mov	r2, r3
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	4413      	add	r3, r2
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	461a      	mov	r2, r3
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	f1c3 0308 	rsb	r3, r3, #8
 80198cc:	411a      	asrs	r2, r3
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	4619      	mov	r1, r3
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	440b      	add	r3, r1
 80198d8:	b2d2      	uxtb	r2, r2
 80198da:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	461a      	mov	r2, r3
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	4413      	add	r3, r2
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 80198ec:	f7fe fea5 	bl	801863a <rfalTransceiveRunBlockingTx>
 80198f0:	4603      	mov	r3, r0
 80198f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 80198f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d14f      	bne.n	801999a <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 80198fa:	f7fe febb 	bl	8018674 <rfalTransceiveBlockingRx>
 80198fe:	4603      	mov	r3, r0
 8019900:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d031      	beq.n	801996e <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	461a      	mov	r2, r3
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	4413      	add	r3, r2
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	461a      	mov	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	411a      	asrs	r2, r3
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	4619      	mov	r1, r3
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	440b      	add	r3, r1
 8019928:	b2d2      	uxtb	r2, r2
 801992a:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	461a      	mov	r2, r3
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	4413      	add	r3, r2
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	461a      	mov	r2, r3
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	781b      	ldrb	r3, [r3, #0]
 801993e:	409a      	lsls	r2, r3
 8019940:	68bb      	ldr	r3, [r7, #8]
 8019942:	781b      	ldrb	r3, [r3, #0]
 8019944:	4619      	mov	r1, r3
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	440b      	add	r3, r1
 801994a:	b2d2      	uxtb	r2, r2
 801994c:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	461a      	mov	r2, r3
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	4413      	add	r3, r2
 8019958:	7819      	ldrb	r1, [r3, #0]
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	461a      	mov	r2, r3
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	4413      	add	r3, r2
 8019964:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8019968:	430a      	orrs	r2, r1
 801996a:	b2d2      	uxtb	r2, r2
 801996c:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 801996e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019970:	2b1d      	cmp	r3, #29
 8019972:	d112      	bne.n	801999a <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 8019974:	f107 0317 	add.w	r3, r7, #23
 8019978:	4619      	mov	r1, r3
 801997a:	201c      	movs	r0, #28
 801997c:	f7ea f942 	bl	8003c04 <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 8019980:	7dfb      	ldrb	r3, [r7, #23]
 8019982:	091b      	lsrs	r3, r3, #4
 8019984:	b2da      	uxtb	r2, r3
 8019986:	68bb      	ldr	r3, [r7, #8]
 8019988:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 801998a:	7dfb      	ldrb	r3, [r7, #23]
 801998c:	085b      	lsrs	r3, r3, #1
 801998e:	b2db      	uxtb	r3, r3
 8019990:	f003 0307 	and.w	r3, r3, #7
 8019994:	b2da      	uxtb	r2, r3
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 801999a:	2004      	movs	r0, #4
 801999c:	f7ea fe34 	bl	8004608 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80199a0:	2101      	movs	r1, #1
 80199a2:	2005      	movs	r0, #5
 80199a4:	f7ea fab0 	bl	8003f08 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80199a8:	2180      	movs	r1, #128	; 0x80
 80199aa:	2009      	movs	r0, #9
 80199ac:	f7ea faac 	bl	8003f08 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80199b0:	f240 1001 	movw	r0, #257	; 0x101
 80199b4:	f7f5 ff36 	bl	800f824 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80199b8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80199bc:	f7f5 ff32 	bl	800f824 <rfalSetAnalogConfig>
    
    return ret;
 80199c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80199c2:	4618      	mov	r0, r3
 80199c4:	3738      	adds	r7, #56	; 0x38
 80199c6:	46bd      	mov	sp, r7
 80199c8:	bd80      	pop	{r7, pc}
 80199ca:	bf00      	nop
 80199cc:	200039f8 	.word	0x200039f8

080199d0 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b08c      	sub	sp, #48	; 0x30
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	607a      	str	r2, [r7, #4]
 80199da:	461a      	mov	r2, r3
 80199dc:	460b      	mov	r3, r1
 80199de:	72fb      	strb	r3, [r7, #11]
 80199e0:	4613      	mov	r3, r2
 80199e2:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 80199e4:	4b29      	ldr	r3, [pc, #164]	; (8019a8c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 80199e6:	781b      	ldrb	r3, [r3, #0]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d903      	bls.n	80199f4 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 80199ec:	4b27      	ldr	r3, [pc, #156]	; (8019a8c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 80199ee:	785b      	ldrb	r3, [r3, #1]
 80199f0:	2b07      	cmp	r3, #7
 80199f2:	d001      	beq.n	80199f8 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 80199f4:	2321      	movs	r3, #33	; 0x21
 80199f6:	e045      	b.n	8019a84 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 80199f8:	f241 0003 	movw	r0, #4099	; 0x1003
 80199fc:	f7f5 ff12 	bl	800f824 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 8019a00:	4b22      	ldr	r3, [pc, #136]	; (8019a8c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8019a02:	2210      	movs	r2, #16
 8019a04:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8019a08:	7afb      	ldrb	r3, [r7, #11]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d101      	bne.n	8019a12 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 8019a0e:	220b      	movs	r2, #11
 8019a10:	e000      	b.n	8019a14 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 8019a12:	220a      	movs	r2, #10
 8019a14:	7afb      	ldrb	r3, [r7, #11]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d101      	bne.n	8019a1e <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 8019a1a:	2340      	movs	r3, #64	; 0x40
 8019a1c:	e000      	b.n	8019a20 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 8019a1e:	2300      	movs	r3, #0
 8019a20:	4313      	orrs	r3, r2
 8019a22:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8019a28:	7afb      	ldrb	r3, [r7, #11]
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	00db      	lsls	r3, r3, #3
 8019a2e:	b29b      	uxth	r3, r3
 8019a30:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8019a36:	7abb      	ldrb	r3, [r7, #10]
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	b29b      	uxth	r3, r3
 8019a3e:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 8019a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a42:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 8019a44:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8019a48:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 8019a4a:	f107 0310 	add.w	r3, r7, #16
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7fe fc6e 	bl	8018330 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8019a54:	f7fe fdf1 	bl	801863a <rfalTransceiveRunBlockingTx>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 8019a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d103      	bne.n	8019a6a <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 8019a62:	f7fe fe07 	bl	8018674 <rfalTransceiveBlockingRx>
 8019a66:	4603      	mov	r3, r0
 8019a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019a6a:	f241 0001 	movw	r0, #4097	; 0x1001
 8019a6e:	f7f5 fed9 	bl	800f824 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019a72:	f241 0002 	movw	r0, #4098	; 0x1002
 8019a76:	f7f5 fed5 	bl	800f824 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 8019a7a:	4b04      	ldr	r3, [pc, #16]	; (8019a8c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    return ret;
 8019a82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3730      	adds	r7, #48	; 0x30
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}
 8019a8c:	200039f8 	.word	0x200039f8

08019a90 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b088      	sub	sp, #32
 8019a94:	af02      	add	r7, sp, #8
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	460b      	mov	r3, r1
 8019a9a:	607a      	str	r2, [r7, #4]
 8019a9c:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 8019a9e:	7afa      	ldrb	r2, [r7, #11]
 8019aa0:	f107 0017 	add.w	r0, r7, #23
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	4613      	mov	r3, r2
 8019aaa:	68fa      	ldr	r2, [r7, #12]
 8019aac:	2100      	movs	r1, #0
 8019aae:	f7ff ff8f 	bl	80199d0 <rfalISO15693TransceiveAnticollisionFrame>
 8019ab2:	4603      	mov	r3, r0
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3718      	adds	r7, #24
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b08a      	sub	sp, #40	; 0x28
 8019ac0:	af04      	add	r7, sp, #16
 8019ac2:	60f8      	str	r0, [r7, #12]
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	607a      	str	r2, [r7, #4]
 8019ac8:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8019aca:	4b10      	ldr	r3, [pc, #64]	; (8019b0c <rfalISO15693TransceiveEOF+0x50>)
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	2b01      	cmp	r3, #1
 8019ad0:	d903      	bls.n	8019ada <rfalISO15693TransceiveEOF+0x1e>
 8019ad2:	4b0e      	ldr	r3, [pc, #56]	; (8019b0c <rfalISO15693TransceiveEOF+0x50>)
 8019ad4:	785b      	ldrb	r3, [r3, #1]
 8019ad6:	2b07      	cmp	r3, #7
 8019ad8:	d001      	beq.n	8019ade <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 8019ada:	2321      	movs	r3, #33	; 0x21
 8019adc:	e012      	b.n	8019b04 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 8019ade:	7afb      	ldrb	r3, [r7, #11]
 8019ae0:	b29a      	uxth	r2, r3
 8019ae2:	f107 0015 	add.w	r0, r7, #21
 8019ae6:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8019aea:	9302      	str	r3, [sp, #8]
 8019aec:	2303      	movs	r3, #3
 8019aee:	9301      	str	r3, [sp, #4]
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	9300      	str	r3, [sp, #0]
 8019af4:	4613      	mov	r3, r2
 8019af6:	68fa      	ldr	r2, [r7, #12]
 8019af8:	2100      	movs	r1, #0
 8019afa:	f7fe fdd1 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 8019afe:	4603      	mov	r3, r0
 8019b00:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 8019b02:	8afb      	ldrh	r3, [r7, #22]
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	3718      	adds	r7, #24
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	200039f8 	.word	0x200039f8

08019b10 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b08c      	sub	sp, #48	; 0x30
 8019b14:	af04      	add	r7, sp, #16
 8019b16:	603b      	str	r3, [r7, #0]
 8019b18:	4603      	mov	r3, r0
 8019b1a:	71fb      	strb	r3, [r7, #7]
 8019b1c:	460b      	mov	r3, r1
 8019b1e:	80bb      	strh	r3, [r7, #4]
 8019b20:	4613      	mov	r3, r2
 8019b22:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8019b24:	4b6b      	ldr	r3, [pc, #428]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	2b01      	cmp	r3, #1
 8019b2a:	d903      	bls.n	8019b34 <rfalFeliCaPoll+0x24>
 8019b2c:	4b69      	ldr	r3, [pc, #420]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019b2e:	785b      	ldrb	r3, [r3, #1]
 8019b30:	2b06      	cmp	r3, #6
 8019b32:	d001      	beq.n	8019b38 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 8019b34:	2321      	movs	r3, #33	; 0x21
 8019b36:	e0c9      	b.n	8019ccc <rfalFeliCaPoll+0x1bc>
    }
    
    frameIdx    = 0;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 8019b40:	2300      	movs	r3, #0
 8019b42:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 8019b44:	79fb      	ldrb	r3, [r7, #7]
 8019b46:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 8019b48:	7e7b      	ldrb	r3, [r7, #25]
 8019b4a:	1c5a      	adds	r2, r3, #1
 8019b4c:	767a      	strb	r2, [r7, #25]
 8019b4e:	3320      	adds	r3, #32
 8019b50:	443b      	add	r3, r7
 8019b52:	2200      	movs	r2, #0
 8019b54:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8019b58:	88bb      	ldrh	r3, [r7, #4]
 8019b5a:	0a1b      	lsrs	r3, r3, #8
 8019b5c:	b29a      	uxth	r2, r3
 8019b5e:	7e7b      	ldrb	r3, [r7, #25]
 8019b60:	1c59      	adds	r1, r3, #1
 8019b62:	7679      	strb	r1, [r7, #25]
 8019b64:	b2d2      	uxtb	r2, r2
 8019b66:	3320      	adds	r3, #32
 8019b68:	443b      	add	r3, r7
 8019b6a:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8019b6e:	7e7b      	ldrb	r3, [r7, #25]
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	767a      	strb	r2, [r7, #25]
 8019b74:	88ba      	ldrh	r2, [r7, #4]
 8019b76:	b2d2      	uxtb	r2, r2
 8019b78:	3320      	adds	r3, #32
 8019b7a:	443b      	add	r3, r7
 8019b7c:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 8019b80:	7e7b      	ldrb	r3, [r7, #25]
 8019b82:	1c5a      	adds	r2, r3, #1
 8019b84:	767a      	strb	r2, [r7, #25]
 8019b86:	3320      	adds	r3, #32
 8019b88:	443b      	add	r3, r7
 8019b8a:	79ba      	ldrb	r2, [r7, #6]
 8019b8c:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 8019b90:	7e7b      	ldrb	r3, [r7, #25]
 8019b92:	1c5a      	adds	r2, r3, #1
 8019b94:	767a      	strb	r2, [r7, #25]
 8019b96:	3320      	adds	r3, #32
 8019b98:	443b      	add	r3, r7
 8019b9a:	7efa      	ldrb	r2, [r7, #27]
 8019b9c:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 8019ba0:	4b4c      	ldr	r3, [pc, #304]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019ba2:	79db      	ldrb	r3, [r3, #7]
 8019ba4:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8019ba6:	2002      	movs	r0, #2
 8019ba8:	f7fe fae6 	bl	8018178 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 8019bac:	7e7b      	ldrb	r3, [r7, #25]
 8019bae:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 8019bb0:	7efb      	ldrb	r3, [r7, #27]
 8019bb2:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 8019bb4:	039b      	lsls	r3, r3, #14
 8019bb6:	f107 0010 	add.w	r0, r7, #16
 8019bba:	9302      	str	r3, [sp, #8]
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	9301      	str	r3, [sp, #4]
 8019bc0:	f107 030e 	add.w	r3, r7, #14
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	2314      	movs	r3, #20
 8019bc8:	4a43      	ldr	r2, [pc, #268]	; (8019cd8 <rfalFeliCaPoll+0x1c8>)
 8019bca:	f7fe fd07 	bl	80185dc <rfalTransceiveBlockingTx>
 8019bce:	4603      	mov	r3, r0
 8019bd0:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 8019bd2:	8bfb      	ldrh	r3, [r7, #30]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d145      	bne.n	8019c64 <rfalFeliCaPoll+0x154>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 8019bd8:	f7fe fd4c 	bl	8018674 <rfalTransceiveBlockingRx>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8019be0:	8bfb      	ldrh	r3, [r7, #30]
 8019be2:	2b04      	cmp	r3, #4
 8019be4:	d102      	bne.n	8019bec <rfalFeliCaPoll+0xdc>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 8019be6:	2301      	movs	r3, #1
 8019be8:	76bb      	strb	r3, [r7, #26]
 8019bea:	e030      	b.n	8019c4e <rfalFeliCaPoll+0x13e>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8019bec:	20d1      	movs	r0, #209	; 0xd1
 8019bee:	f7ea facd 	bl	800418c <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 8019bf2:	20d5      	movs	r0, #213	; 0xd5
 8019bf4:	f7ea faca 	bl	800418c <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 8019bf8:	8bfb      	ldrh	r3, [r7, #30]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d10e      	bne.n	8019c1c <rfalFeliCaPoll+0x10c>
                {
                   devDetected++;
 8019bfe:	7f7b      	ldrb	r3, [r7, #29]
 8019c00:	3301      	adds	r3, #1
 8019c02:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 8019c04:	7f7a      	ldrb	r2, [r7, #29]
 8019c06:	4613      	mov	r3, r2
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	4413      	add	r3, r2
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	3378      	adds	r3, #120	; 0x78
 8019c10:	4a30      	ldr	r2, [pc, #192]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019c12:	4413      	add	r3, r2
 8019c14:	3306      	adds	r3, #6
 8019c16:	4a2f      	ldr	r2, [pc, #188]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019c18:	6253      	str	r3, [r2, #36]	; 0x24
 8019c1a:	e002      	b.n	8019c22 <rfalFeliCaPoll+0x112>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 8019c1c:	7f3b      	ldrb	r3, [r7, #28]
 8019c1e:	3301      	adds	r3, #1
 8019c20:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 8019c22:	2200      	movs	r2, #0
 8019c24:	2102      	movs	r1, #2
 8019c26:	202b      	movs	r0, #43	; 0x2b
 8019c28:	f7e9 fde8 	bl	80037fc <st25r3911CheckReg>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 8019c30:	7ebb      	ldrb	r3, [r7, #26]
 8019c32:	f083 0301 	eor.w	r3, r3, #1
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d008      	beq.n	8019c4e <rfalFeliCaPoll+0x13e>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 8019c3c:	4b25      	ldr	r3, [pc, #148]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019c3e:	2202      	movs	r2, #2
 8019c40:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 8019c42:	4b24      	ldr	r3, [pc, #144]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019c44:	2203      	movs	r2, #3
 8019c46:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8019c48:	4b22      	ldr	r3, [pc, #136]	; (8019cd4 <rfalFeliCaPoll+0x1c4>)
 8019c4a:	2251      	movs	r2, #81	; 0x51
 8019c4c:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 8019c4e:	7efb      	ldrb	r3, [r7, #27]
 8019c50:	1e5a      	subs	r2, r3, #1
 8019c52:	76fa      	strb	r2, [r7, #27]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d005      	beq.n	8019c64 <rfalFeliCaPoll+0x154>
 8019c58:	7ebb      	ldrb	r3, [r7, #26]
 8019c5a:	f083 0301 	eor.w	r3, r3, #1
 8019c5e:	b2db      	uxtb	r3, r3
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d1b9      	bne.n	8019bd8 <rfalFeliCaPoll+0xc8>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 8019c64:	7e3b      	ldrb	r3, [r7, #24]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7fe fa86 	bl	8018178 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d017      	beq.n	8019ca2 <rfalFeliCaPoll+0x192>
 8019c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d013      	beq.n	8019ca2 <rfalFeliCaPoll+0x192>
 8019c7a:	7f7b      	ldrb	r3, [r7, #29]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d010      	beq.n	8019ca2 <rfalFeliCaPoll+0x192>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 8019c80:	7f7a      	ldrb	r2, [r7, #29]
 8019c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019c86:	4293      	cmp	r3, r2
 8019c88:	bf28      	it	cs
 8019c8a:	4613      	movcs	r3, r2
 8019c8c:	b2db      	uxtb	r3, r3
 8019c8e:	461a      	mov	r2, r3
 8019c90:	4613      	mov	r3, r2
 8019c92:	009b      	lsls	r3, r3, #2
 8019c94:	4413      	add	r3, r2
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	461a      	mov	r2, r3
 8019c9a:	490f      	ldr	r1, [pc, #60]	; (8019cd8 <rfalFeliCaPoll+0x1c8>)
 8019c9c:	6838      	ldr	r0, [r7, #0]
 8019c9e:	f001 fc09 	bl	801b4b4 <memcpy>
    }
    
    if( devicesDetected != NULL )
 8019ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d002      	beq.n	8019cae <rfalFeliCaPoll+0x19e>
    {
        *devicesDetected = devDetected;
 8019ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019caa:	7f7a      	ldrb	r2, [r7, #29]
 8019cac:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 8019cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d002      	beq.n	8019cba <rfalFeliCaPoll+0x1aa>
    {
        *collisionsDetected = colDetected;
 8019cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cb6:	7f3a      	ldrb	r2, [r7, #28]
 8019cb8:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 8019cba:	7f3b      	ldrb	r3, [r7, #28]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d104      	bne.n	8019cca <rfalFeliCaPoll+0x1ba>
 8019cc0:	7f7b      	ldrb	r3, [r7, #29]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d101      	bne.n	8019cca <rfalFeliCaPoll+0x1ba>
 8019cc6:	8bfb      	ldrh	r3, [r7, #30]
 8019cc8:	e000      	b.n	8019ccc <rfalFeliCaPoll+0x1bc>
 8019cca:	2300      	movs	r3, #0
}
 8019ccc:	4618      	mov	r0, r3
 8019cce:	3720      	adds	r7, #32
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	200039f8 	.word	0x200039f8
 8019cd8:	20003a76 	.word	0x20003a76

08019cdc <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 8019ce0:	2240      	movs	r2, #64	; 0x40
 8019ce2:	2140      	movs	r1, #64	; 0x40
 8019ce4:	2030      	movs	r0, #48	; 0x30
 8019ce6:	f7e9 fd89 	bl	80037fc <st25r3911CheckReg>
 8019cea:	4603      	mov	r3, r0
}
 8019cec:	4618      	mov	r0, r3
 8019cee:	bd80      	pop	{r7, pc}

08019cf0 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b084      	sub	sp, #16
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	60f8      	str	r0, [r7, #12]
 8019cf8:	60b9      	str	r1, [r7, #8]
 8019cfa:	607a      	str	r2, [r7, #4]
 8019cfc:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8019cfe:	4b29      	ldr	r3, [pc, #164]	; (8019da4 <rfalListenStart+0xb4>)
 8019d00:	2200      	movs	r2, #0
 8019d02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d109      	bne.n	8019d24 <rfalListenStart+0x34>
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d104      	bne.n	8019d24 <rfalListenStart+0x34>
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d001      	beq.n	8019d28 <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 8019d24:	2318      	movs	r3, #24
 8019d26:	e038      	b.n	8019d9a <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d032      	beq.n	8019d98 <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 8019d32:	4b1c      	ldr	r3, [pc, #112]	; (8019da4 <rfalListenStart+0xb4>)
 8019d34:	2204      	movs	r2, #4
 8019d36:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 8019d38:	4a1a      	ldr	r2, [pc, #104]	; (8019da4 <rfalListenStart+0xb4>)
 8019d3a:	69bb      	ldr	r3, [r7, #24]
 8019d3c:	6593      	str	r3, [r2, #88]	; 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 8019d3e:	4a19      	ldr	r2, [pc, #100]	; (8019da4 <rfalListenStart+0xb4>)
 8019d40:	8bbb      	ldrh	r3, [r7, #28]
 8019d42:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 8019d46:	4a17      	ldr	r2, [pc, #92]	; (8019da4 <rfalListenStart+0xb4>)
 8019d48:	6a3b      	ldr	r3, [r7, #32]
 8019d4a:	6613      	str	r3, [r2, #96]	; 0x60
        *gRFAL.Lm.rxLen   = 0;
 8019d4c:	4b15      	ldr	r3, [pc, #84]	; (8019da4 <rfalListenStart+0xb4>)
 8019d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019d50:	2200      	movs	r2, #0
 8019d52:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 8019d54:	4b13      	ldr	r3, [pc, #76]	; (8019da4 <rfalListenStart+0xb4>)
 8019d56:	2200      	movs	r2, #0
 8019d58:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	21e0      	movs	r1, #224	; 0xe0
 8019d60:	2011      	movs	r0, #17
 8019d62:	f7ea f912 	bl	8003f8a <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 8019d66:	2102      	movs	r1, #2
 8019d68:	200e      	movs	r0, #14
 8019d6a:	f7ea f881 	bl	8003e70 <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 8019d6e:	21e0      	movs	r1, #224	; 0xe0
 8019d70:	2005      	movs	r0, #5
 8019d72:	f7ea f8c9 	bl	8003f08 <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8019d76:	2110      	movs	r1, #16
 8019d78:	2009      	movs	r0, #9
 8019d7a:	f7ea f8e8 	bl	8003f4e <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 8019d7e:	2240      	movs	r2, #64	; 0x40
 8019d80:	2140      	movs	r1, #64	; 0x40
 8019d82:	2002      	movs	r0, #2
 8019d84:	f7ea f901 	bl	8003f8a <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 8019d88:	2006      	movs	r0, #6
 8019d8a:	f7f5 fd4b 	bl	800f824 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8019d8e:	2001      	movs	r0, #1
 8019d90:	f000 f960 	bl	801a054 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 8019d94:	2300      	movs	r3, #0
 8019d96:	e000      	b.n	8019d9a <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 8019d98:	2305      	movs	r3, #5
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3710      	adds	r7, #16
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	200039f8 	.word	0x200039f8

08019da8 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b082      	sub	sp, #8
 8019dac:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 8019dae:	4b81      	ldr	r3, [pc, #516]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	2b04      	cmp	r3, #4
 8019db4:	d001      	beq.n	8019dba <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 8019db6:	2321      	movs	r3, #33	; 0x21
 8019db8:	e0f8      	b.n	8019fac <rfalRunListenModeWorker+0x204>
    }
    
    switch( gRFAL.Lm.state )
 8019dba:	4b7e      	ldr	r3, [pc, #504]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019dbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019dc0:	3b01      	subs	r3, #1
 8019dc2:	2b0f      	cmp	r3, #15
 8019dc4:	f200 80e6 	bhi.w	8019f94 <rfalRunListenModeWorker+0x1ec>
 8019dc8:	a201      	add	r2, pc, #4	; (adr r2, 8019dd0 <rfalRunListenModeWorker+0x28>)
 8019dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dce:	bf00      	nop
 8019dd0:	08019e11 	.word	0x08019e11
 8019dd4:	08019e37 	.word	0x08019e37
 8019dd8:	08019f91 	.word	0x08019f91
 8019ddc:	08019f95 	.word	0x08019f95
 8019de0:	08019f91 	.word	0x08019f91
 8019de4:	08019f91 	.word	0x08019f91
 8019de8:	08019f91 	.word	0x08019f91
 8019dec:	08019f91 	.word	0x08019f91
 8019df0:	08019f91 	.word	0x08019f91
 8019df4:	08019f99 	.word	0x08019f99
 8019df8:	08019f99 	.word	0x08019f99
 8019dfc:	08019f91 	.word	0x08019f91
 8019e00:	08019f91 	.word	0x08019f91
 8019e04:	08019f91 	.word	0x08019f91
 8019e08:	08019f91 	.word	0x08019f91
 8019e0c:	08019f91 	.word	0x08019f91
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 8019e10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8019e14:	f7ea fbb0 	bl	8004578 <st25r3911GetInterrupt>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	f000 80bc 	beq.w	8019f9c <rfalRunListenModeWorker+0x1f4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	f000 80b8 	beq.w	8019fa0 <rfalRunListenModeWorker+0x1f8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 8019e30:	2002      	movs	r0, #2
 8019e32:	f000 f90f 	bl	801a054 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 8019e36:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019e3a:	f7ea fb9d 	bl	8004578 <st25r3911GetInterrupt>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f000 80ad 	beq.w	8019fa4 <rfalRunListenModeWorker+0x1fc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d011      	beq.n	8019e78 <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 8019e54:	1cbb      	adds	r3, r7, #2
 8019e56:	4619      	mov	r1, r3
 8019e58:	201f      	movs	r0, #31
 8019e5a:	f7e9 fed3 	bl	8003c04 <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8019e5e:	78bb      	ldrb	r3, [r7, #2]
 8019e60:	091b      	lsrs	r3, r3, #4
 8019e62:	b2db      	uxtb	r3, r3
 8019e64:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 8019e66:	78bb      	ldrb	r3, [r7, #2]
 8019e68:	2b02      	cmp	r3, #2
 8019e6a:	d901      	bls.n	8019e70 <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 8019e6c:	2302      	movs	r3, #2
 8019e6e:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8019e70:	78ba      	ldrb	r2, [r7, #2]
 8019e72:	4b50      	ldr	r3, [pc, #320]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019e74:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f003 0310 	and.w	r3, r3, #16
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d074      	beq.n	8019f6c <rfalRunListenModeWorker+0x1c4>
 8019e82:	4b4c      	ldr	r3, [pc, #304]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019e84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8019e88:	2bff      	cmp	r3, #255	; 0xff
 8019e8a:	d06f      	beq.n	8019f6c <rfalRunListenModeWorker+0x1c4>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 8019e8c:	484a      	ldr	r0, [pc, #296]	; (8019fb8 <rfalRunListenModeWorker+0x210>)
 8019e8e:	f7ea fb73 	bl	8004578 <st25r3911GetInterrupt>
 8019e92:	4603      	mov	r3, r0
 8019e94:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d109      	bne.n	8019eb4 <rfalRunListenModeWorker+0x10c>
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d104      	bne.n	8019eb4 <rfalRunListenModeWorker+0x10c>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d012      	beq.n	8019eda <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8019eb4:	2101      	movs	r1, #1
 8019eb6:	2003      	movs	r0, #3
 8019eb8:	f7ea f826 	bl	8003f08 <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8019ebc:	20c2      	movs	r0, #194	; 0xc2
 8019ebe:	f7ea f965 	bl	800418c <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8019ec2:	20d1      	movs	r0, #209	; 0xd1
 8019ec4:	f7ea f962 	bl	800418c <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8019ec8:	2101      	movs	r1, #1
 8019eca:	2003      	movs	r0, #3
 8019ecc:	f7ea f83f 	bl	8003f4e <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 8019ed0:	2108      	movs	r1, #8
 8019ed2:	2002      	movs	r0, #2
 8019ed4:	f7ea f818 	bl	8003f08 <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8019ed8:	e067      	b.n	8019faa <rfalRunListenModeWorker+0x202>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 8019eda:	1cfb      	adds	r3, r7, #3
 8019edc:	4619      	mov	r1, r3
 8019ede:	201a      	movs	r0, #26
 8019ee0:	f7e9 fe90 	bl	8003c04 <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 8019ee4:	78fa      	ldrb	r2, [r7, #3]
 8019ee6:	4b33      	ldr	r3, [pc, #204]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019eea:	b292      	uxth	r2, r2
 8019eec:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8019eee:	4b31      	ldr	r3, [pc, #196]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019ef0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019ef2:	4b30      	ldr	r3, [pc, #192]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ef6:	881a      	ldrh	r2, [r3, #0]
 8019ef8:	4b2e      	ldr	r3, [pc, #184]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019efe:	3307      	adds	r3, #7
 8019f00:	08db      	lsrs	r3, r3, #3
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d204      	bcs.n	8019f12 <rfalRunListenModeWorker+0x16a>
 8019f08:	4b2a      	ldr	r3, [pc, #168]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f0c:	881b      	ldrh	r3, [r3, #0]
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	e005      	b.n	8019f1e <rfalRunListenModeWorker+0x176>
 8019f12:	4b28      	ldr	r3, [pc, #160]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019f18:	3307      	adds	r3, #7
 8019f1a:	08db      	lsrs	r3, r3, #3
 8019f1c:	b2db      	uxtb	r3, r3
 8019f1e:	4619      	mov	r1, r3
 8019f20:	f7ea f8e8 	bl	80040f4 <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8019f24:	4b23      	ldr	r3, [pc, #140]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f28:	8819      	ldrh	r1, [r3, #0]
 8019f2a:	4b22      	ldr	r3, [pc, #136]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f2e:	881b      	ldrh	r3, [r3, #0]
 8019f30:	2b02      	cmp	r3, #2
 8019f32:	bf28      	it	cs
 8019f34:	2302      	movcs	r3, #2
 8019f36:	b29a      	uxth	r2, r3
 8019f38:	4b1e      	ldr	r3, [pc, #120]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f3c:	1a8a      	subs	r2, r1, r2
 8019f3e:	b292      	uxth	r2, r2
 8019f40:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8019f42:	4b1c      	ldr	r3, [pc, #112]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f46:	881a      	ldrh	r2, [r3, #0]
 8019f48:	4b1a      	ldr	r3, [pc, #104]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f4c:	00d2      	lsls	r2, r2, #3
 8019f4e:	b292      	uxth	r2, r2
 8019f50:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 8019f52:	4b18      	ldr	r3, [pc, #96]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f54:	2201      	movs	r2, #1
 8019f56:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8019f5a:	4b16      	ldr	r3, [pc, #88]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f5c:	799b      	ldrb	r3, [r3, #6]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d015      	beq.n	8019f8e <rfalRunListenModeWorker+0x1e6>
 8019f62:	2100      	movs	r1, #0
 8019f64:	2001      	movs	r0, #1
 8019f66:	f7e9 ff3b 	bl	8003de0 <st25r3911WriteTestRegister>
 8019f6a:	e010      	b.n	8019f8e <rfalRunListenModeWorker+0x1e6>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d018      	beq.n	8019fa8 <rfalRunListenModeWorker+0x200>
 8019f76:	4b0f      	ldr	r3, [pc, #60]	; (8019fb4 <rfalRunListenModeWorker+0x20c>)
 8019f78:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019f7c:	f083 0301 	eor.w	r3, r3, #1
 8019f80:	b2db      	uxtb	r3, r3
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d010      	beq.n	8019fa8 <rfalRunListenModeWorker+0x200>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8019f86:	2001      	movs	r0, #1
 8019f88:	f000 f864 	bl	801a054 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 8019f8c:	e00c      	b.n	8019fa8 <rfalRunListenModeWorker+0x200>
 8019f8e:	e00b      	b.n	8019fa8 <rfalRunListenModeWorker+0x200>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 8019f90:	230c      	movs	r3, #12
 8019f92:	e00b      	b.n	8019fac <rfalRunListenModeWorker+0x204>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8019f94:	2321      	movs	r3, #33	; 0x21
 8019f96:	e009      	b.n	8019fac <rfalRunListenModeWorker+0x204>
                break;
 8019f98:	bf00      	nop
 8019f9a:	e006      	b.n	8019faa <rfalRunListenModeWorker+0x202>
              break;  /* No interrupt to process */
 8019f9c:	bf00      	nop
 8019f9e:	e004      	b.n	8019faa <rfalRunListenModeWorker+0x202>
                break;
 8019fa0:	bf00      	nop
 8019fa2:	e002      	b.n	8019faa <rfalRunListenModeWorker+0x202>
                break;  /* No interrupt to process */
 8019fa4:	bf00      	nop
 8019fa6:	e000      	b.n	8019faa <rfalRunListenModeWorker+0x202>
            break;
 8019fa8:	bf00      	nop
    }
    return ERR_NONE;
 8019faa:	2300      	movs	r3, #0
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	3708      	adds	r7, #8
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bd80      	pop	{r7, pc}
 8019fb4:	200039f8 	.word	0x200039f8
 8019fb8:	00f00810 	.word	0x00f00810

08019fbc <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8019fc0:	4b0b      	ldr	r3, [pc, #44]	; (8019ff0 <rfalListenStop+0x34>)
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 8019fc8:	4b09      	ldr	r3, [pc, #36]	; (8019ff0 <rfalListenStop+0x34>)
 8019fca:	799b      	ldrb	r3, [r3, #6]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d003      	beq.n	8019fd8 <rfalListenStop+0x1c>
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	2001      	movs	r0, #1
 8019fd4:	f7e9 ff04 	bl	8003de0 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 8019fd8:	f7fe f994 	bl	8018304 <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 8019fdc:	2108      	movs	r1, #8
 8019fde:	2003      	movs	r0, #3
 8019fe0:	f7e9 ff46 	bl	8003e70 <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8019fe4:	2007      	movs	r0, #7
 8019fe6:	f7f5 fc1d 	bl	800f824 <rfalSetAnalogConfig>
        
    return ERR_NONE;
 8019fea:	2300      	movs	r3, #0
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	200039f8 	.word	0x200039f8

08019ff4 <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	b085      	sub	sp, #20
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	60b9      	str	r1, [r7, #8]
 8019ffc:	607b      	str	r3, [r7, #4]
 8019ffe:	4603      	mov	r3, r0
 801a000:	73fb      	strb	r3, [r7, #15]
 801a002:	4613      	mov	r3, r2
 801a004:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 801a006:	2318      	movs	r3, #24
}
 801a008:	4618      	mov	r0, r3
 801a00a:	3714      	adds	r7, #20
 801a00c:	46bd      	mov	sp, r7
 801a00e:	bc80      	pop	{r7}
 801a010:	4770      	bx	lr
	...

0801a014 <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 801a014:	b480      	push	{r7}
 801a016:	b083      	sub	sp, #12
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
 801a01c:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 801a01e:	683b      	ldr	r3, [r7, #0]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d004      	beq.n	801a02e <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 801a024:	4b0a      	ldr	r3, [pc, #40]	; (801a050 <rfalListenGetState+0x3c>)
 801a026:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d004      	beq.n	801a03e <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 801a034:	4b06      	ldr	r3, [pc, #24]	; (801a050 <rfalListenGetState+0x3c>)
 801a036:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 801a03e:	4b04      	ldr	r3, [pc, #16]	; (801a050 <rfalListenGetState+0x3c>)
 801a040:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 801a044:	4618      	mov	r0, r3
 801a046:	370c      	adds	r7, #12
 801a048:	46bd      	mov	sp, r7
 801a04a:	bc80      	pop	{r7}
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	200039f8 	.word	0x200039f8

0801a054 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b084      	sub	sp, #16
 801a058:	af00      	add	r7, sp, #0
 801a05a:	4603      	mov	r3, r0
 801a05c:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 801a05e:	4b62      	ldr	r3, [pc, #392]	; (801a1e8 <rfalListenSetState+0x194>)
 801a060:	2200      	movs	r2, #0
 801a062:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    newState          = newSt;
 801a066:	79fb      	ldrb	r3, [r7, #7]
 801a068:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 801a06a:	2300      	movs	r3, #0
 801a06c:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 801a06e:	2300      	movs	r3, #0
 801a070:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 801a072:	7bfb      	ldrb	r3, [r7, #15]
 801a074:	3b01      	subs	r3, #1
 801a076:	2b0f      	cmp	r3, #15
 801a078:	f200 80a2 	bhi.w	801a1c0 <rfalListenSetState+0x16c>
 801a07c:	a201      	add	r2, pc, #4	; (adr r2, 801a084 <rfalListenSetState+0x30>)
 801a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a082:	bf00      	nop
 801a084:	0801a0c5 	.word	0x0801a0c5
 801a088:	0801a123 	.word	0x0801a123
 801a08c:	0801a1bd 	.word	0x0801a1bd
 801a090:	0801a1c1 	.word	0x0801a1c1
 801a094:	0801a1bd 	.word	0x0801a1bd
 801a098:	0801a1bd 	.word	0x0801a1bd
 801a09c:	0801a1bd 	.word	0x0801a1bd
 801a0a0:	0801a1bd 	.word	0x0801a1bd
 801a0a4:	0801a1bd 	.word	0x0801a1bd
 801a0a8:	0801a1c5 	.word	0x0801a1c5
 801a0ac:	0801a1c5 	.word	0x0801a1c5
 801a0b0:	0801a1bd 	.word	0x0801a1bd
 801a0b4:	0801a1bd 	.word	0x0801a1bd
 801a0b8:	0801a1bd 	.word	0x0801a1bd
 801a0bc:	0801a1bd 	.word	0x0801a1bd
 801a0c0:	0801a1bd 	.word	0x0801a1bd
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801a0c4:	2101      	movs	r1, #1
 801a0c6:	2003      	movs	r0, #3
 801a0c8:	f7e9 ff1e 	bl	8003f08 <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801a0cc:	20c2      	movs	r0, #194	; 0xc2
 801a0ce:	f7ea f85d 	bl	800418c <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801a0d2:	2108      	movs	r1, #8
 801a0d4:	2002      	movs	r0, #2
 801a0d6:	f7e9 ff17 	bl	8003f08 <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 801a0da:	2120      	movs	r1, #32
 801a0dc:	2005      	movs	r0, #5
 801a0de:	f7e9 ff13 	bl	8003f08 <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801a0e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a0e6:	f7ea fa8f 	bl	8004608 <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801a0ea:	4840      	ldr	r0, [pc, #256]	; (801a1ec <rfalListenSetState+0x198>)
 801a0ec:	f7ea fa44 	bl	8004578 <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801a0f0:	483f      	ldr	r0, [pc, #252]	; (801a1f0 <rfalListenSetState+0x19c>)
 801a0f2:	f7ea fa7d 	bl	80045f0 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 801a0f6:	4b3c      	ldr	r3, [pc, #240]	; (801a1e8 <rfalListenSetState+0x194>)
 801a0f8:	22ff      	movs	r2, #255	; 0xff
 801a0fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 801a0fe:	2181      	movs	r1, #129	; 0x81
 801a100:	2003      	movs	r0, #3
 801a102:	f7e9 feb5 	bl	8003e70 <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 801a106:	2100      	movs	r1, #0
 801a108:	2004      	movs	r0, #4
 801a10a:	f7e9 feb1 	bl	8003e70 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 801a10e:	f7ff fde5 	bl	8019cdc <rfalIsExtFieldOn>
 801a112:	4603      	mov	r3, r0
 801a114:	2b00      	cmp	r3, #0
 801a116:	d057      	beq.n	801a1c8 <rfalListenSetState+0x174>
                {
                    reSetState = true;
 801a118:	2301      	movs	r3, #1
 801a11a:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 801a11c:	2302      	movs	r3, #2
 801a11e:	73fb      	strb	r3, [r7, #15]
                }
                break;
 801a120:	e052      	b.n	801a1c8 <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801a122:	2101      	movs	r1, #1
 801a124:	2003      	movs	r0, #3
 801a126:	f7e9 feef 	bl	8003f08 <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801a12a:	20c2      	movs	r0, #194	; 0xc2
 801a12c:	f7ea f82e 	bl	800418c <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801a130:	2101      	movs	r1, #1
 801a132:	2003      	movs	r0, #3
 801a134:	f7e9 ff0b 	bl	8003f4e <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801a138:	2108      	movs	r1, #8
 801a13a:	2002      	movs	r0, #2
 801a13c:	f7e9 fee4 	bl	8003f08 <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801a140:	20d5      	movs	r0, #213	; 0xd5
 801a142:	f7ea f823 	bl	800418c <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 801a146:	f107 030b 	add.w	r3, r7, #11
 801a14a:	4619      	mov	r1, r3
 801a14c:	200a      	movs	r0, #10
 801a14e:	f7e9 fd59 	bl	8003c04 <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801a152:	7afb      	ldrb	r3, [r7, #11]
 801a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	4619      	mov	r1, r3
 801a15c:	200a      	movs	r0, #10
 801a15e:	f7e9 fe87 	bl	8003e70 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 801a162:	7afb      	ldrb	r3, [r7, #11]
 801a164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	4619      	mov	r1, r3
 801a16c:	200a      	movs	r0, #10
 801a16e:	f7e9 fe7f 	bl	8003e70 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801a172:	7afb      	ldrb	r3, [r7, #11]
 801a174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a178:	b2db      	uxtb	r3, r3
 801a17a:	4619      	mov	r1, r3
 801a17c:	200a      	movs	r0, #10
 801a17e:	f7e9 fe77 	bl	8003e70 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801a182:	20d1      	movs	r0, #209	; 0xd1
 801a184:	f7ea f802 	bl	800418c <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 801a188:	2240      	movs	r2, #64	; 0x40
 801a18a:	2140      	movs	r1, #64	; 0x40
 801a18c:	2030      	movs	r0, #48	; 0x30
 801a18e:	f7e9 fb35 	bl	80037fc <st25r3911CheckReg>
 801a192:	4603      	mov	r3, r0
 801a194:	f083 0301 	eor.w	r3, r3, #1
 801a198:	b2db      	uxtb	r3, r3
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d003      	beq.n	801a1a6 <rfalListenSetState+0x152>
                {
                    reSetState = true;
 801a19e:	2301      	movs	r3, #1
 801a1a0:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 801a1a6:	4b10      	ldr	r3, [pc, #64]	; (801a1e8 <rfalListenSetState+0x194>)
 801a1a8:	799b      	ldrb	r3, [r3, #6]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d00e      	beq.n	801a1cc <rfalListenSetState+0x178>
 801a1ae:	4b0e      	ldr	r3, [pc, #56]	; (801a1e8 <rfalListenSetState+0x194>)
 801a1b0:	799b      	ldrb	r3, [r3, #6]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	2001      	movs	r0, #1
 801a1b6:	f7e9 fe13 	bl	8003de0 <st25r3911WriteTestRegister>
                break;
 801a1ba:	e007      	b.n	801a1cc <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 801a1bc:	2318      	movs	r3, #24
 801a1be:	e00f      	b.n	801a1e0 <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 801a1c0:	2321      	movs	r3, #33	; 0x21
 801a1c2:	e00d      	b.n	801a1e0 <rfalListenSetState+0x18c>
                break;
 801a1c4:	bf00      	nop
 801a1c6:	e002      	b.n	801a1ce <rfalListenSetState+0x17a>
                break;
 801a1c8:	bf00      	nop
 801a1ca:	e000      	b.n	801a1ce <rfalListenSetState+0x17a>
                break;
 801a1cc:	bf00      	nop
        }
    }
    while( reSetState );
 801a1ce:	7bbb      	ldrb	r3, [r7, #14]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	f47f af4c 	bne.w	801a06e <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 801a1d6:	4a04      	ldr	r2, [pc, #16]	; (801a1e8 <rfalListenSetState+0x194>)
 801a1d8:	7bfb      	ldrb	r3, [r7, #15]
 801a1da:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 801a1de:	89bb      	ldrh	r3, [r7, #12]
}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	3710      	adds	r7, #16
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	200039f8 	.word	0x200039f8
 801a1ec:	00f01930 	.word	0x00f01930
 801a1f0:	00f01910 	.word	0x00f01910

0801a1f4 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 801a1f4:	b5b0      	push	{r4, r5, r7, lr}
 801a1f6:	b086      	sub	sp, #24
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d130      	bne.n	801a264 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 801a202:	4bad      	ldr	r3, [pc, #692]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a204:	2214      	movs	r2, #20
 801a206:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gRFAL.wum.cfg.irqTout     = false;
 801a20a:	4bab      	ldr	r3, [pc, #684]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a20c:	2200      	movs	r2, #0
 801a20e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 801a212:	4ba9      	ldr	r3, [pc, #676]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a214:	2200      	movs	r2, #0
 801a216:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 801a21a:	4ba7      	ldr	r3, [pc, #668]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a21c:	2201      	movs	r2, #1
 801a21e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 801a222:	4ba5      	ldr	r3, [pc, #660]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a224:	2201      	movs	r2, #1
 801a226:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 801a22a:	4ba3      	ldr	r3, [pc, #652]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a22c:	2200      	movs	r2, #0
 801a22e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 801a232:	4ba1      	ldr	r3, [pc, #644]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a234:	2202      	movs	r2, #2
 801a236:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 801a23a:	4b9f      	ldr	r3, [pc, #636]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a23c:	22ff      	movs	r2, #255	; 0xff
 801a23e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 801a242:	4b9d      	ldr	r3, [pc, #628]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a244:	2200      	movs	r2, #0
 801a246:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 801a24a:	4b9b      	ldr	r3, [pc, #620]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a24c:	2202      	movs	r2, #2
 801a24e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 801a252:	4b99      	ldr	r3, [pc, #612]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a254:	22ff      	movs	r2, #255	; 0xff
 801a256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 801a25a:	4b97      	ldr	r3, [pc, #604]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a25c:	2200      	movs	r2, #0
 801a25e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801a262:	e00e      	b.n	801a282 <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 801a264:	4b94      	ldr	r3, [pc, #592]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a266:	687a      	ldr	r2, [r7, #4]
 801a268:	3369      	adds	r3, #105	; 0x69
 801a26a:	6811      	ldr	r1, [r2, #0]
 801a26c:	6855      	ldr	r5, [r2, #4]
 801a26e:	6894      	ldr	r4, [r2, #8]
 801a270:	68d0      	ldr	r0, [r2, #12]
 801a272:	6019      	str	r1, [r3, #0]
 801a274:	605d      	str	r5, [r3, #4]
 801a276:	609c      	str	r4, [r3, #8]
 801a278:	60d8      	str	r0, [r3, #12]
 801a27a:	6911      	ldr	r1, [r2, #16]
 801a27c:	6119      	str	r1, [r3, #16]
 801a27e:	7d12      	ldrb	r2, [r2, #20]
 801a280:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801a282:	4b8d      	ldr	r3, [pc, #564]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a284:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d009      	beq.n	801a2a0 <rfalWakeUpModeStart+0xac>
 801a28c:	4b8a      	ldr	r3, [pc, #552]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a28e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a292:	2b00      	cmp	r3, #0
 801a294:	d121      	bne.n	801a2da <rfalWakeUpModeStart+0xe6>
 801a296:	4b88      	ldr	r3, [pc, #544]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a298:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d11c      	bne.n	801a2da <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a2a0:	4b85      	ldr	r3, [pc, #532]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a2a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a2a6:	f083 0301 	eor.w	r3, r3, #1
 801a2aa:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d00f      	beq.n	801a2d0 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a2b0:	4b81      	ldr	r3, [pc, #516]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a2b2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a2b6:	f083 0301 	eor.w	r3, r3, #1
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d007      	beq.n	801a2d0 <rfalWakeUpModeStart+0xdc>
 801a2c0:	4b7d      	ldr	r3, [pc, #500]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a2c2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a2c6:	f083 0301 	eor.w	r3, r3, #1
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d104      	bne.n	801a2da <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 801a2d0:	4b79      	ldr	r3, [pc, #484]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a2d2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d001      	beq.n	801a2de <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 801a2da:	2307      	movs	r3, #7
 801a2dc:	e14f      	b.n	801a57e <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 801a2e2:	f7e9 f8c2 	bl	800346a <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801a2e6:	2110      	movs	r1, #16
 801a2e8:	2009      	movs	r0, #9
 801a2ea:	f7e9 fe0d 	bl	8003f08 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 801a2ee:	2208      	movs	r2, #8
 801a2f0:	21f8      	movs	r1, #248	; 0xf8
 801a2f2:	2003      	movs	r0, #3
 801a2f4:	f7e9 fe49 	bl	8003f8a <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 801a2f8:	2004      	movs	r0, #4
 801a2fa:	f7f5 fa93 	bl	800f824 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 801a2fe:	4b6e      	ldr	r3, [pc, #440]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a300:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801a304:	011b      	lsls	r3, r3, #4
 801a306:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 801a308:	4b6b      	ldr	r3, [pc, #428]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a30a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801a30e:	2b0f      	cmp	r3, #15
 801a310:	d802      	bhi.n	801a318 <rfalWakeUpModeStart+0x124>
 801a312:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801a316:	e000      	b.n	801a31a <rfalWakeUpModeStart+0x126>
 801a318:	2200      	movs	r2, #0
 801a31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a31e:	4313      	orrs	r3, r2
 801a320:	b25b      	sxtb	r3, r3
 801a322:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 801a324:	4b64      	ldr	r3, [pc, #400]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a326:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d007      	beq.n	801a33e <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 801a32e:	7dfb      	ldrb	r3, [r7, #23]
 801a330:	f043 0308 	orr.w	r3, r3, #8
 801a334:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a33c:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 801a33e:	4b5e      	ldr	r3, [pc, #376]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a340:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a344:	2b00      	cmp	r3, #0
 801a346:	d04c      	beq.n	801a3e2 <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 801a348:	4b5b      	ldr	r3, [pc, #364]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a34a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801a34e:	011b      	lsls	r3, r3, #4
 801a350:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 801a352:	4b59      	ldr	r3, [pc, #356]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a354:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d001      	beq.n	801a360 <rfalWakeUpModeStart+0x16c>
 801a35c:	2208      	movs	r2, #8
 801a35e:	e000      	b.n	801a362 <rfalWakeUpModeStart+0x16e>
 801a360:	2200      	movs	r2, #0
 801a362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a366:	4313      	orrs	r3, r2
 801a368:	b25b      	sxtb	r3, r3
 801a36a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 801a36c:	4b52      	ldr	r3, [pc, #328]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a36e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	b2db      	uxtb	r3, r3
 801a376:	b25b      	sxtb	r3, r3
 801a378:	f003 0306 	and.w	r3, r3, #6
 801a37c:	b25a      	sxtb	r2, r3
 801a37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a382:	4313      	orrs	r3, r2
 801a384:	b25b      	sxtb	r3, r3
 801a386:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 801a388:	4b4b      	ldr	r3, [pc, #300]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a38a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801a38e:	b25a      	sxtb	r2, r3
 801a390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a394:	4313      	orrs	r3, r2
 801a396:	b25b      	sxtb	r3, r3
 801a398:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 801a39a:	7bfb      	ldrb	r3, [r7, #15]
 801a39c:	4619      	mov	r1, r3
 801a39e:	2032      	movs	r0, #50	; 0x32
 801a3a0:	f7e9 fd66 	bl	8003e70 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 801a3a4:	4b44      	ldr	r3, [pc, #272]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3a6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801a3aa:	f083 0301 	eor.w	r3, r3, #1
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d00e      	beq.n	801a3d2 <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 801a3b4:	4b40      	ldr	r3, [pc, #256]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3b6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801a3ba:	2bff      	cmp	r3, #255	; 0xff
 801a3bc:	d102      	bne.n	801a3c4 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 801a3be:	483f      	ldr	r0, [pc, #252]	; (801a4bc <rfalWakeUpModeStart+0x2c8>)
 801a3c0:	f7e9 f901 	bl	80035c6 <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 801a3c4:	4b3c      	ldr	r3, [pc, #240]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3c6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801a3ca:	4619      	mov	r1, r3
 801a3cc:	2033      	movs	r0, #51	; 0x33
 801a3ce:	f7e9 fd4f 	bl	8003e70 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 801a3d2:	7dfb      	ldrb	r3, [r7, #23]
 801a3d4:	f043 0304 	orr.w	r3, r3, #4
 801a3d8:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 801a3da:	693b      	ldr	r3, [r7, #16]
 801a3dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a3e0:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 801a3e2:	4b35      	ldr	r3, [pc, #212]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3e4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d04c      	beq.n	801a486 <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 801a3ec:	4b32      	ldr	r3, [pc, #200]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3ee:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 801a3f2:	011b      	lsls	r3, r3, #4
 801a3f4:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 801a3f6:	4b30      	ldr	r3, [pc, #192]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a3f8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d001      	beq.n	801a404 <rfalWakeUpModeStart+0x210>
 801a400:	2208      	movs	r2, #8
 801a402:	e000      	b.n	801a406 <rfalWakeUpModeStart+0x212>
 801a404:	2200      	movs	r2, #0
 801a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a40a:	4313      	orrs	r3, r2
 801a40c:	b25b      	sxtb	r3, r3
 801a40e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 801a410:	4b29      	ldr	r3, [pc, #164]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a412:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801a416:	005b      	lsls	r3, r3, #1
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	b25b      	sxtb	r3, r3
 801a41c:	f003 0306 	and.w	r3, r3, #6
 801a420:	b25a      	sxtb	r2, r3
 801a422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a426:	4313      	orrs	r3, r2
 801a428:	b25b      	sxtb	r3, r3
 801a42a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 801a42c:	4b22      	ldr	r3, [pc, #136]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a42e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801a432:	b25a      	sxtb	r2, r3
 801a434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a438:	4313      	orrs	r3, r2
 801a43a:	b25b      	sxtb	r3, r3
 801a43c:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 801a43e:	7bfb      	ldrb	r3, [r7, #15]
 801a440:	4619      	mov	r1, r3
 801a442:	2036      	movs	r0, #54	; 0x36
 801a444:	f7e9 fd14 	bl	8003e70 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 801a448:	4b1b      	ldr	r3, [pc, #108]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a44a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801a44e:	f083 0301 	eor.w	r3, r3, #1
 801a452:	b2db      	uxtb	r3, r3
 801a454:	2b00      	cmp	r3, #0
 801a456:	d00e      	beq.n	801a476 <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801a458:	4b17      	ldr	r3, [pc, #92]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a45a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a45e:	2bff      	cmp	r3, #255	; 0xff
 801a460:	d102      	bne.n	801a468 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 801a462:	4817      	ldr	r0, [pc, #92]	; (801a4c0 <rfalWakeUpModeStart+0x2cc>)
 801a464:	f7e9 f8bd 	bl	80035e2 <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 801a468:	4b13      	ldr	r3, [pc, #76]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a46a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a46e:	4619      	mov	r1, r3
 801a470:	2037      	movs	r0, #55	; 0x37
 801a472:	f7e9 fcfd 	bl	8003e70 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 801a476:	7dfb      	ldrb	r3, [r7, #23]
 801a478:	f043 0302 	orr.w	r3, r3, #2
 801a47c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 801a47e:	693b      	ldr	r3, [r7, #16]
 801a480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a484:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 801a486:	4b0c      	ldr	r3, [pc, #48]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a488:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d05a      	beq.n	801a546 <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 801a490:	2188      	movs	r1, #136	; 0x88
 801a492:	2002      	movs	r0, #2
 801a494:	f7e9 fd38 	bl	8003f08 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 801a498:	2000      	movs	r0, #0
 801a49a:	f7e9 f8cc 	bl	8003636 <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 801a49e:	4b06      	ldr	r3, [pc, #24]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a4a0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801a4a4:	011b      	lsls	r3, r3, #4
 801a4a6:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 801a4a8:	4b03      	ldr	r3, [pc, #12]	; (801a4b8 <rfalWakeUpModeStart+0x2c4>)
 801a4aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d008      	beq.n	801a4c4 <rfalWakeUpModeStart+0x2d0>
 801a4b2:	2208      	movs	r2, #8
 801a4b4:	e007      	b.n	801a4c6 <rfalWakeUpModeStart+0x2d2>
 801a4b6:	bf00      	nop
 801a4b8:	200039f8 	.word	0x200039f8
 801a4bc:	20003a66 	.word	0x20003a66
 801a4c0:	20003a6c 	.word	0x20003a6c
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4ca:	4313      	orrs	r3, r2
 801a4cc:	b25b      	sxtb	r3, r3
 801a4ce:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 801a4d0:	4b2d      	ldr	r3, [pc, #180]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a4d2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801a4d6:	005b      	lsls	r3, r3, #1
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	b25b      	sxtb	r3, r3
 801a4dc:	f003 0306 	and.w	r3, r3, #6
 801a4e0:	b25a      	sxtb	r2, r3
 801a4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4e6:	4313      	orrs	r3, r2
 801a4e8:	b25b      	sxtb	r3, r3
 801a4ea:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 801a4ec:	4b26      	ldr	r3, [pc, #152]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a4ee:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801a4f2:	b25a      	sxtb	r2, r3
 801a4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4f8:	4313      	orrs	r3, r2
 801a4fa:	b25b      	sxtb	r3, r3
 801a4fc:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 801a4fe:	7bfb      	ldrb	r3, [r7, #15]
 801a500:	4619      	mov	r1, r3
 801a502:	203a      	movs	r0, #58	; 0x3a
 801a504:	f7e9 fcb4 	bl	8003e70 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 801a508:	4b1f      	ldr	r3, [pc, #124]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a50a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801a50e:	f083 0301 	eor.w	r3, r3, #1
 801a512:	b2db      	uxtb	r3, r3
 801a514:	2b00      	cmp	r3, #0
 801a516:	d00e      	beq.n	801a536 <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801a518:	4b1b      	ldr	r3, [pc, #108]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a51a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a51e:	2bff      	cmp	r3, #255	; 0xff
 801a520:	d102      	bne.n	801a528 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 801a522:	481a      	ldr	r0, [pc, #104]	; (801a58c <rfalWakeUpModeStart+0x398>)
 801a524:	f7e9 f86b 	bl	80035fe <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 801a528:	4b17      	ldr	r3, [pc, #92]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a52a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801a52e:	4619      	mov	r1, r3
 801a530:	203b      	movs	r0, #59	; 0x3b
 801a532:	f7e9 fc9d 	bl	8003e70 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 801a536:	7dfb      	ldrb	r3, [r7, #23]
 801a538:	f043 0301 	orr.w	r3, r3, #1
 801a53c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 801a53e:	693b      	ldr	r3, [r7, #16]
 801a540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a544:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801a546:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a54a:	f7ea f85d 	bl	8004608 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 801a54e:	6938      	ldr	r0, [r7, #16]
 801a550:	f7ea f812 	bl	8004578 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 801a554:	6938      	ldr	r0, [r7, #16]
 801a556:	f7ea f84b 	bl	80045f0 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 801a55a:	7dfb      	ldrb	r3, [r7, #23]
 801a55c:	4619      	mov	r1, r3
 801a55e:	2031      	movs	r0, #49	; 0x31
 801a560:	f7e9 fc86 	bl	8003e70 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 801a564:	2204      	movs	r2, #4
 801a566:	2184      	movs	r1, #132	; 0x84
 801a568:	2002      	movs	r0, #2
 801a56a:	f7e9 fd0e 	bl	8003f8a <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 801a56e:	4b06      	ldr	r3, [pc, #24]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a570:	2201      	movs	r2, #1
 801a572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 801a576:	4b04      	ldr	r3, [pc, #16]	; (801a588 <rfalWakeUpModeStart+0x394>)
 801a578:	2205      	movs	r2, #5
 801a57a:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 801a57c:	2300      	movs	r3, #0
}
 801a57e:	4618      	mov	r0, r3
 801a580:	3718      	adds	r7, #24
 801a582:	46bd      	mov	sp, r7
 801a584:	bdb0      	pop	{r4, r5, r7, pc}
 801a586:	bf00      	nop
 801a588:	200039f8 	.word	0x200039f8
 801a58c:	20003a72 	.word	0x20003a72

0801a590 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 801a590:	b480      	push	{r7}
 801a592:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 801a594:	4b05      	ldr	r3, [pc, #20]	; (801a5ac <rfalWakeUpModeHasWoke+0x1c>)
 801a596:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a59a:	2b01      	cmp	r3, #1
 801a59c:	bf8c      	ite	hi
 801a59e:	2301      	movhi	r3, #1
 801a5a0:	2300      	movls	r3, #0
 801a5a2:	b2db      	uxtb	r3, r3
}
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bc80      	pop	{r7}
 801a5aa:	4770      	bx	lr
 801a5ac:	200039f8 	.word	0x200039f8

0801a5b0 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 801a5b6:	4b1c      	ldr	r3, [pc, #112]	; (801a628 <rfalRunWakeUpModeWorker+0x78>)
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	2b05      	cmp	r3, #5
 801a5bc:	d129      	bne.n	801a612 <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 801a5be:	4b1a      	ldr	r3, [pc, #104]	; (801a628 <rfalRunWakeUpModeWorker+0x78>)
 801a5c0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a5c4:	3b01      	subs	r3, #1
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	d825      	bhi.n	801a616 <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 801a5ca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801a5ce:	f7e9 ffd3 	bl	8004578 <st25r3911GetInterrupt>
 801a5d2:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d01f      	beq.n	801a61a <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d003      	beq.n	801a5ec <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a5e4:	4b10      	ldr	r3, [pc, #64]	; (801a628 <rfalRunWakeUpModeWorker+0x78>)
 801a5e6:	2202      	movs	r2, #2
 801a5e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d003      	beq.n	801a5fe <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a5f6:	4b0c      	ldr	r3, [pc, #48]	; (801a628 <rfalRunWakeUpModeWorker+0x78>)
 801a5f8:	2202      	movs	r2, #2
 801a5fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a604:	2b00      	cmp	r3, #0
 801a606:	d00a      	beq.n	801a61e <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a608:	4b07      	ldr	r3, [pc, #28]	; (801a628 <rfalRunWakeUpModeWorker+0x78>)
 801a60a:	2202      	movs	r2, #2
 801a60c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            break;
 801a610:	e005      	b.n	801a61e <rfalRunWakeUpModeWorker+0x6e>
        return;
 801a612:	bf00      	nop
 801a614:	e004      	b.n	801a620 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 801a616:	bf00      	nop
 801a618:	e002      	b.n	801a620 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 801a61a:	bf00      	nop
 801a61c:	e000      	b.n	801a620 <rfalRunWakeUpModeWorker+0x70>
            break;
 801a61e:	bf00      	nop
    }
}
 801a620:	3708      	adds	r7, #8
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
 801a626:	bf00      	nop
 801a628:	200039f8 	.word	0x200039f8

0801a62c <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 801a630:	4b0f      	ldr	r3, [pc, #60]	; (801a670 <rfalWakeUpModeStop+0x44>)
 801a632:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a636:	2b00      	cmp	r3, #0
 801a638:	d101      	bne.n	801a63e <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 801a63a:	2321      	movs	r3, #33	; 0x21
 801a63c:	e015      	b.n	801a66a <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 801a63e:	4b0c      	ldr	r3, [pc, #48]	; (801a670 <rfalWakeUpModeStop+0x44>)
 801a640:	2200      	movs	r2, #0
 801a642:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801a646:	2110      	movs	r1, #16
 801a648:	2009      	movs	r0, #9
 801a64a:	f7e9 fc80 	bl	8003f4e <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 801a64e:	2104      	movs	r1, #4
 801a650:	2002      	movs	r0, #2
 801a652:	f7e9 fc59 	bl	8003f08 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 801a656:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801a65a:	f7e9 ffd5 	bl	8004608 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 801a65e:	f7e8 ff0c 	bl	800347a <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 801a662:	2005      	movs	r0, #5
 801a664:	f7f5 f8de 	bl	800f824 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 801a668:	2300      	movs	r3, #0
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	bd80      	pop	{r7, pc}
 801a66e:	bf00      	nop
 801a670:	200039f8 	.word	0x200039f8

0801a674 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b082      	sub	sp, #8
 801a678:	af00      	add	r7, sp, #0
 801a67a:	4603      	mov	r3, r0
 801a67c:	80fb      	strh	r3, [r7, #6]
 801a67e:	460b      	mov	r3, r1
 801a680:	717b      	strb	r3, [r7, #5]
 801a682:	4613      	mov	r3, r2
 801a684:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 801a686:	88fb      	ldrh	r3, [r7, #6]
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	793a      	ldrb	r2, [r7, #4]
 801a68c:	7979      	ldrb	r1, [r7, #5]
 801a68e:	4618      	mov	r0, r3
 801a690:	f7e9 fc7b 	bl	8003f8a <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 801a694:	2300      	movs	r3, #0
}
 801a696:	4618      	mov	r0, r3
 801a698:	3708      	adds	r7, #8
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}

0801a69e <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801a69e:	b580      	push	{r7, lr}
 801a6a0:	b082      	sub	sp, #8
 801a6a2:	af00      	add	r7, sp, #0
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	80fb      	strh	r3, [r7, #6]
 801a6a8:	460b      	mov	r3, r1
 801a6aa:	717b      	strb	r3, [r7, #5]
 801a6ac:	4613      	mov	r3, r2
 801a6ae:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 801a6b0:	88fb      	ldrh	r3, [r7, #6]
 801a6b2:	b2db      	uxtb	r3, r3
 801a6b4:	793a      	ldrb	r2, [r7, #4]
 801a6b6:	7979      	ldrb	r1, [r7, #5]
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7e9 fca5 	bl	8004008 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 801a6be:	2300      	movs	r3, #0
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3708      	adds	r7, #8
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}

0801a6c8 <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b086      	sub	sp, #24
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	60b9      	str	r1, [r7, #8]
 801a6d2:	607a      	str	r2, [r7, #4]
 801a6d4:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801a6da:	2300      	movs	r3, #0
 801a6dc:	75fb      	strb	r3, [r7, #23]
 801a6de:	e072      	b.n	801a7c6 <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 801a6e0:	2001      	movs	r0, #1
 801a6e2:	f7ea f863 	bl	80047ac <HAL_Delay>
        
        if( i==0U )
 801a6e6:	7dfb      	ldrb	r3, [r7, #23]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d107      	bne.n	801a6fc <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 801a6ec:	f107 0312 	add.w	r3, r7, #18
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f000 f8c6 	bl	801a882 <rfalSt25tbPollerPcall>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	82bb      	strh	r3, [r7, #20]
 801a6fa:	e008      	b.n	801a70e <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 801a6fc:	f107 0212 	add.w	r2, r7, #18
 801a700:	7dfb      	ldrb	r3, [r7, #23]
 801a702:	4611      	mov	r1, r2
 801a704:	4618      	mov	r0, r3
 801a706:	f000 f8e2 	bl	801a8ce <rfalSt25tbPollerSlotMarker>
 801a70a:	4603      	mov	r3, r0
 801a70c:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 801a70e:	8abb      	ldrh	r3, [r7, #20]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d148      	bne.n	801a7a6 <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	461a      	mov	r2, r3
 801a71a:	4613      	mov	r3, r2
 801a71c:	009b      	lsls	r3, r3, #2
 801a71e:	4413      	add	r3, r2
 801a720:	005b      	lsls	r3, r3, #1
 801a722:	461a      	mov	r2, r3
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	4413      	add	r3, r2
 801a728:	7cba      	ldrb	r2, [r7, #18]
 801a72a:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	461a      	mov	r2, r3
 801a732:	4613      	mov	r3, r2
 801a734:	009b      	lsls	r3, r3, #2
 801a736:	4413      	add	r3, r2
 801a738:	005b      	lsls	r3, r3, #1
 801a73a:	461a      	mov	r2, r3
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	4413      	add	r3, r2
 801a740:	2200      	movs	r2, #0
 801a742:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 801a744:	7cbb      	ldrb	r3, [r7, #18]
 801a746:	4618      	mov	r0, r3
 801a748:	f000 f8f4 	bl	801a934 <rfalSt25tbPollerSelect>
 801a74c:	4603      	mov	r3, r0
 801a74e:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	781b      	ldrb	r3, [r3, #0]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d00b      	beq.n	801a770 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	461a      	mov	r2, r3
 801a75e:	4613      	mov	r3, r2
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	4413      	add	r3, r2
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	3b0a      	subs	r3, #10
 801a768:	68ba      	ldr	r2, [r7, #8]
 801a76a:	4413      	add	r3, r2
 801a76c:	2201      	movs	r2, #1
 801a76e:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 801a770:	8abb      	ldrh	r3, [r7, #20]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d10d      	bne.n	801a792 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	461a      	mov	r2, r3
 801a77c:	4613      	mov	r3, r2
 801a77e:	009b      	lsls	r3, r3, #2
 801a780:	4413      	add	r3, r2
 801a782:	005b      	lsls	r3, r3, #1
 801a784:	461a      	mov	r2, r3
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	4413      	add	r3, r2
 801a78a:	3301      	adds	r3, #1
 801a78c:	4618      	mov	r0, r3
 801a78e:	f000 f8fd 	bl	801a98c <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 801a792:	8abb      	ldrh	r3, [r7, #20]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d10e      	bne.n	801a7b6 <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	781b      	ldrb	r3, [r3, #0]
 801a79c:	3301      	adds	r3, #1
 801a79e:	b2da      	uxtb	r2, r3
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	701a      	strb	r2, [r3, #0]
 801a7a4:	e007      	b.n	801a7b6 <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801a7a6:	8abb      	ldrh	r3, [r7, #20]
 801a7a8:	2b15      	cmp	r3, #21
 801a7aa:	d002      	beq.n	801a7b2 <rfalSt25tbPollerDoCollisionResolution+0xea>
 801a7ac:	8abb      	ldrh	r3, [r7, #20]
 801a7ae:	2b09      	cmp	r3, #9
 801a7b0:	d101      	bne.n	801a7b6 <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	7bfa      	ldrb	r2, [r7, #15]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d906      	bls.n	801a7ce <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801a7c0:	7dfb      	ldrb	r3, [r7, #23]
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	75fb      	strb	r3, [r7, #23]
 801a7c6:	7dfb      	ldrb	r3, [r7, #23]
 801a7c8:	2b0f      	cmp	r3, #15
 801a7ca:	d989      	bls.n	801a6e0 <rfalSt25tbPollerDoCollisionResolution+0x18>
 801a7cc:	e000      	b.n	801a7d0 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 801a7ce:	bf00      	nop
        }
    }
    return col;
 801a7d0:	7cfb      	ldrb	r3, [r7, #19]
}
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	3718      	adds	r7, #24
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	bd80      	pop	{r7, pc}

0801a7da <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 801a7da:	b580      	push	{r7, lr}
 801a7dc:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 801a7de:	f7fb fc1d 	bl	801601c <rfalNfcbPollerInitialize>
 801a7e2:	4603      	mov	r3, r0
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	bd80      	pop	{r7, pc}

0801a7e8 <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b084      	sub	sp, #16
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 801a7f4:	f107 030d 	add.w	r3, r7, #13
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f000 f815 	bl	801a828 <rfalSt25tbPollerInitiate>
 801a7fe:	4603      	mov	r3, r0
 801a800:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801a802:	89fb      	ldrh	r3, [r7, #14]
 801a804:	2b15      	cmp	r3, #21
 801a806:	d002      	beq.n	801a80e <rfalSt25tbPollerCheckPresence+0x26>
 801a808:	89fb      	ldrh	r3, [r7, #14]
 801a80a:	2b09      	cmp	r3, #9
 801a80c:	d101      	bne.n	801a812 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 801a80e:	2300      	movs	r3, #0
 801a810:	e006      	b.n	801a820 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d002      	beq.n	801a81e <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 801a818:	7b7a      	ldrb	r2, [r7, #13]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801a81e:	89fb      	ldrh	r3, [r7, #14]
}
 801a820:	4618      	mov	r0, r3
 801a822:	3710      	adds	r7, #16
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}

0801a828 <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b08a      	sub	sp, #40	; 0x28
 801a82c:	af04      	add	r7, sp, #16
 801a82e:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 801a830:	2306      	movs	r3, #6
 801a832:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 801a834:	2300      	movs	r3, #0
 801a836:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a838:	f107 020c 	add.w	r2, r7, #12
 801a83c:	f107 0010 	add.w	r0, r7, #16
 801a840:	f241 036d 	movw	r3, #4205	; 0x106d
 801a844:	9302      	str	r3, [sp, #8]
 801a846:	2300      	movs	r3, #0
 801a848:	9301      	str	r3, [sp, #4]
 801a84a:	f107 0314 	add.w	r3, r7, #20
 801a84e:	9300      	str	r3, [sp, #0]
 801a850:	2303      	movs	r3, #3
 801a852:	2102      	movs	r1, #2
 801a854:	f7fd ff24 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801a858:	4603      	mov	r3, r0
 801a85a:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a85c:	8afb      	ldrh	r3, [r7, #22]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d104      	bne.n	801a86c <rfalSt25tbPollerInitiate+0x44>
 801a862:	8abb      	ldrh	r3, [r7, #20]
 801a864:	2b01      	cmp	r3, #1
 801a866:	d001      	beq.n	801a86c <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 801a868:	230b      	movs	r3, #11
 801a86a:	e006      	b.n	801a87a <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d002      	beq.n	801a878 <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 801a872:	7b3a      	ldrb	r2, [r7, #12]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801a878:	8afb      	ldrh	r3, [r7, #22]
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	3718      	adds	r7, #24
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}

0801a882 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 801a882:	b580      	push	{r7, lr}
 801a884:	b088      	sub	sp, #32
 801a886:	af04      	add	r7, sp, #16
 801a888:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 801a88a:	2306      	movs	r3, #6
 801a88c:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 801a88e:	2304      	movs	r3, #4
 801a890:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a892:	f107 0008 	add.w	r0, r7, #8
 801a896:	f241 036d 	movw	r3, #4205	; 0x106d
 801a89a:	9302      	str	r3, [sp, #8]
 801a89c:	2300      	movs	r3, #0
 801a89e:	9301      	str	r3, [sp, #4]
 801a8a0:	f107 030c 	add.w	r3, r7, #12
 801a8a4:	9300      	str	r3, [sp, #0]
 801a8a6:	2301      	movs	r3, #1
 801a8a8:	687a      	ldr	r2, [r7, #4]
 801a8aa:	2102      	movs	r1, #2
 801a8ac:	f7fd fef8 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a8b4:	89fb      	ldrh	r3, [r7, #14]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d104      	bne.n	801a8c4 <rfalSt25tbPollerPcall+0x42>
 801a8ba:	89bb      	ldrh	r3, [r7, #12]
 801a8bc:	2b01      	cmp	r3, #1
 801a8be:	d001      	beq.n	801a8c4 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 801a8c0:	230b      	movs	r3, #11
 801a8c2:	e000      	b.n	801a8c6 <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 801a8c4:	89fb      	ldrh	r3, [r7, #14]
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3710      	adds	r7, #16
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}

0801a8ce <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 801a8ce:	b580      	push	{r7, lr}
 801a8d0:	b088      	sub	sp, #32
 801a8d2:	af04      	add	r7, sp, #16
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	6039      	str	r1, [r7, #0]
 801a8d8:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 801a8da:	79fb      	ldrb	r3, [r7, #7]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d002      	beq.n	801a8e6 <rfalSt25tbPollerSlotMarker+0x18>
 801a8e0:	79fb      	ldrb	r3, [r7, #7]
 801a8e2:	2b0f      	cmp	r3, #15
 801a8e4:	d901      	bls.n	801a8ea <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 801a8e6:	2307      	movs	r3, #7
 801a8e8:	e020      	b.n	801a92c <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 801a8ea:	79fb      	ldrb	r3, [r7, #7]
 801a8ec:	011b      	lsls	r3, r3, #4
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	f043 0306 	orr.w	r3, r3, #6
 801a8f4:	b2db      	uxtb	r3, r3
 801a8f6:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a8f8:	f107 000b 	add.w	r0, r7, #11
 801a8fc:	f241 036d 	movw	r3, #4205	; 0x106d
 801a900:	9302      	str	r3, [sp, #8]
 801a902:	2300      	movs	r3, #0
 801a904:	9301      	str	r3, [sp, #4]
 801a906:	f107 030c 	add.w	r3, r7, #12
 801a90a:	9300      	str	r3, [sp, #0]
 801a90c:	2301      	movs	r3, #1
 801a90e:	683a      	ldr	r2, [r7, #0]
 801a910:	2101      	movs	r1, #1
 801a912:	f7fd fec5 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801a916:	4603      	mov	r3, r0
 801a918:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a91a:	89fb      	ldrh	r3, [r7, #14]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d104      	bne.n	801a92a <rfalSt25tbPollerSlotMarker+0x5c>
 801a920:	89bb      	ldrh	r3, [r7, #12]
 801a922:	2b01      	cmp	r3, #1
 801a924:	d001      	beq.n	801a92a <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 801a926:	230b      	movs	r3, #11
 801a928:	e000      	b.n	801a92c <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 801a92a:	89fb      	ldrh	r3, [r7, #14]
}
 801a92c:	4618      	mov	r0, r3
 801a92e:	3710      	adds	r7, #16
 801a930:	46bd      	mov	sp, r7
 801a932:	bd80      	pop	{r7, pc}

0801a934 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b08a      	sub	sp, #40	; 0x28
 801a938:	af04      	add	r7, sp, #16
 801a93a:	4603      	mov	r3, r0
 801a93c:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 801a93e:	230e      	movs	r3, #14
 801a940:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 801a942:	79fb      	ldrb	r3, [r7, #7]
 801a944:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a946:	f107 020f 	add.w	r2, r7, #15
 801a94a:	f107 0010 	add.w	r0, r7, #16
 801a94e:	f241 036d 	movw	r3, #4205	; 0x106d
 801a952:	9302      	str	r3, [sp, #8]
 801a954:	2300      	movs	r3, #0
 801a956:	9301      	str	r3, [sp, #4]
 801a958:	f107 0314 	add.w	r3, r7, #20
 801a95c:	9300      	str	r3, [sp, #0]
 801a95e:	2301      	movs	r3, #1
 801a960:	2102      	movs	r1, #2
 801a962:	f7fd fe9d 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801a966:	4603      	mov	r3, r0
 801a968:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 801a96a:	8afb      	ldrh	r3, [r7, #22]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d108      	bne.n	801a982 <rfalSt25tbPollerSelect+0x4e>
 801a970:	8abb      	ldrh	r3, [r7, #20]
 801a972:	2b01      	cmp	r3, #1
 801a974:	d103      	bne.n	801a97e <rfalSt25tbPollerSelect+0x4a>
 801a976:	7bfb      	ldrb	r3, [r7, #15]
 801a978:	79fa      	ldrb	r2, [r7, #7]
 801a97a:	429a      	cmp	r2, r3
 801a97c:	d001      	beq.n	801a982 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 801a97e:	230b      	movs	r3, #11
 801a980:	e000      	b.n	801a984 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 801a982:	8afb      	ldrh	r3, [r7, #22]
}
 801a984:	4618      	mov	r0, r3
 801a986:	3718      	adds	r7, #24
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}

0801a98c <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b088      	sub	sp, #32
 801a990:	af04      	add	r7, sp, #16
 801a992:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 801a994:	230b      	movs	r3, #11
 801a996:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a998:	f107 000b 	add.w	r0, r7, #11
 801a99c:	f241 036d 	movw	r3, #4205	; 0x106d
 801a9a0:	9302      	str	r3, [sp, #8]
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	9301      	str	r3, [sp, #4]
 801a9a6:	f107 030c 	add.w	r3, r7, #12
 801a9aa:	9300      	str	r3, [sp, #0]
 801a9ac:	2308      	movs	r3, #8
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	2101      	movs	r1, #1
 801a9b2:	f7fd fe75 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 801a9ba:	89fb      	ldrh	r3, [r7, #14]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d104      	bne.n	801a9ca <rfalSt25tbPollerGetUID+0x3e>
 801a9c0:	89bb      	ldrh	r3, [r7, #12]
 801a9c2:	2b08      	cmp	r3, #8
 801a9c4:	d001      	beq.n	801a9ca <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 801a9c6:	230b      	movs	r3, #11
 801a9c8:	e000      	b.n	801a9cc <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 801a9ca:	89fb      	ldrh	r3, [r7, #14]
}
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	3710      	adds	r7, #16
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}

0801a9d4 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b086      	sub	sp, #24
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	4603      	mov	r3, r0
 801a9dc:	60b9      	str	r1, [r7, #8]
 801a9de:	607a      	str	r2, [r7, #4]
 801a9e0:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d005      	beq.n	801a9f4 <rfalSt25tbPollerCollisionResolution+0x20>
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d002      	beq.n	801a9f4 <rfalSt25tbPollerCollisionResolution+0x20>
 801a9ee:	7bfb      	ldrb	r3, [r7, #15]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d101      	bne.n	801a9f8 <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 801a9f4:	2307      	movs	r3, #7
 801a9f6:	e05c      	b.n	801aab2 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 801a9fe:	f107 0314 	add.w	r3, r7, #20
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7ff ff10 	bl	801a828 <rfalSt25tbPollerInitiate>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 801aa0c:	8afb      	ldrh	r3, [r7, #22]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d139      	bne.n	801aa86 <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	781b      	ldrb	r3, [r3, #0]
 801aa16:	461a      	mov	r2, r3
 801aa18:	4613      	mov	r3, r2
 801aa1a:	009b      	lsls	r3, r3, #2
 801aa1c:	4413      	add	r3, r2
 801aa1e:	005b      	lsls	r3, r3, #1
 801aa20:	461a      	mov	r2, r3
 801aa22:	68bb      	ldr	r3, [r7, #8]
 801aa24:	4413      	add	r3, r2
 801aa26:	7d3a      	ldrb	r2, [r7, #20]
 801aa28:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	781b      	ldrb	r3, [r3, #0]
 801aa2e:	461a      	mov	r2, r3
 801aa30:	4613      	mov	r3, r2
 801aa32:	009b      	lsls	r3, r3, #2
 801aa34:	4413      	add	r3, r2
 801aa36:	005b      	lsls	r3, r3, #1
 801aa38:	461a      	mov	r2, r3
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	4413      	add	r3, r2
 801aa3e:	2200      	movs	r2, #0
 801aa40:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 801aa42:	7d3b      	ldrb	r3, [r7, #20]
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7ff ff75 	bl	801a934 <rfalSt25tbPollerSelect>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 801aa4e:	8afb      	ldrh	r3, [r7, #22]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d10f      	bne.n	801aa74 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	781b      	ldrb	r3, [r3, #0]
 801aa58:	461a      	mov	r2, r3
 801aa5a:	4613      	mov	r3, r2
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	4413      	add	r3, r2
 801aa60:	005b      	lsls	r3, r3, #1
 801aa62:	461a      	mov	r2, r3
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	4413      	add	r3, r2
 801aa68:	3301      	adds	r3, #1
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7ff ff8e 	bl	801a98c <rfalSt25tbPollerGetUID>
 801aa70:	4603      	mov	r3, r0
 801aa72:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 801aa74:	8afb      	ldrh	r3, [r7, #22]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d105      	bne.n	801aa86 <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	3301      	adds	r3, #1
 801aa80:	b2da      	uxtb	r2, r3
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	781b      	ldrb	r3, [r3, #0]
 801aa8a:	7bfa      	ldrb	r2, [r7, #15]
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d90f      	bls.n	801aab0 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 801aa90:	7bfb      	ldrb	r3, [r7, #15]
 801aa92:	687a      	ldr	r2, [r7, #4]
 801aa94:	68b9      	ldr	r1, [r7, #8]
 801aa96:	4618      	mov	r0, r3
 801aa98:	f7ff fe16 	bl	801a6c8 <rfalSt25tbPollerDoCollisionResolution>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 801aaa0:	7d7b      	ldrb	r3, [r7, #21]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d004      	beq.n	801aab0 <rfalSt25tbPollerCollisionResolution+0xdc>
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	7bfa      	ldrb	r2, [r7, #15]
 801aaac:	429a      	cmp	r2, r3
 801aaae:	d8ef      	bhi.n	801aa90 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 801aab0:	2300      	movs	r3, #0
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3718      	adds	r7, #24
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}

0801aaba <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801aaba:	b580      	push	{r7, lr}
 801aabc:	b08c      	sub	sp, #48	; 0x30
 801aabe:	af06      	add	r7, sp, #24
 801aac0:	60b9      	str	r1, [r7, #8]
 801aac2:	607b      	str	r3, [r7, #4]
 801aac4:	4603      	mov	r3, r0
 801aac6:	73fb      	strb	r3, [r7, #15]
 801aac8:	4613      	mov	r3, r2
 801aaca:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 801aacc:	2300      	movs	r3, #0
 801aace:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801aad0:	7dfb      	ldrb	r3, [r7, #23]
 801aad2:	1c5a      	adds	r2, r3, #1
 801aad4:	75fa      	strb	r2, [r7, #23]
 801aad6:	89ba      	ldrh	r2, [r7, #12]
 801aad8:	b2d2      	uxtb	r2, r2
 801aada:	3318      	adds	r3, #24
 801aadc:	443b      	add	r3, r7
 801aade:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801aae2:	89bb      	ldrh	r3, [r7, #12]
 801aae4:	0a1b      	lsrs	r3, r3, #8
 801aae6:	b29a      	uxth	r2, r3
 801aae8:	7dfb      	ldrb	r3, [r7, #23]
 801aaea:	1c59      	adds	r1, r3, #1
 801aaec:	75f9      	strb	r1, [r7, #23]
 801aaee:	b2d2      	uxtb	r2, r2
 801aaf0:	3318      	adds	r3, #24
 801aaf2:	443b      	add	r3, r7
 801aaf4:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801aaf8:	7bfb      	ldrb	r3, [r7, #15]
 801aafa:	f043 0308 	orr.w	r3, r3, #8
 801aafe:	b2d9      	uxtb	r1, r3
 801ab00:	7dfb      	ldrb	r3, [r7, #23]
 801ab02:	b29b      	uxth	r3, r3
 801ab04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab06:	9204      	str	r2, [sp, #16]
 801ab08:	8c3a      	ldrh	r2, [r7, #32]
 801ab0a:	9203      	str	r2, [sp, #12]
 801ab0c:	687a      	ldr	r2, [r7, #4]
 801ab0e:	9202      	str	r2, [sp, #8]
 801ab10:	9301      	str	r3, [sp, #4]
 801ab12:	f107 0314 	add.w	r3, r7, #20
 801ab16:	9300      	str	r3, [sp, #0]
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	2020      	movs	r0, #32
 801ab1e:	f7fc fdf1 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801ab22:	4603      	mov	r3, r0
}
 801ab24:	4618      	mov	r0, r3
 801ab26:	3718      	adds	r7, #24
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}

0801ab2c <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b09e      	sub	sp, #120	; 0x78
 801ab30:	af06      	add	r7, sp, #24
 801ab32:	60b9      	str	r1, [r7, #8]
 801ab34:	607b      	str	r3, [r7, #4]
 801ab36:	4603      	mov	r3, r0
 801ab38:	73fb      	strb	r3, [r7, #15]
 801ab3a:	4613      	mov	r3, r2
 801ab3c:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801ab3e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d006      	beq.n	801ab54 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801ab46:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801ab4a:	2b20      	cmp	r3, #32
 801ab4c:	d802      	bhi.n	801ab54 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d101      	bne.n	801ab58 <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 801ab54:	2307      	movs	r3, #7
 801ab56:	e045      	b.n	801abe4 <rfalST25xVPollerM24LRWriteSingleBlock+0xb8>
    }
    
    dataLen = 0U;
 801ab58:	2300      	movs	r3, #0
 801ab5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801ab5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ab62:	1c5a      	adds	r2, r3, #1
 801ab64:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 801ab68:	89ba      	ldrh	r2, [r7, #12]
 801ab6a:	b2d2      	uxtb	r2, r2
 801ab6c:	3360      	adds	r3, #96	; 0x60
 801ab6e:	443b      	add	r3, r7
 801ab70:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801ab74:	89bb      	ldrh	r3, [r7, #12]
 801ab76:	0a1b      	lsrs	r3, r3, #8
 801ab78:	b29a      	uxth	r2, r3
 801ab7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ab7e:	1c59      	adds	r1, r3, #1
 801ab80:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 801ab84:	b2d2      	uxtb	r2, r2
 801ab86:	3360      	adds	r3, #96	; 0x60
 801ab88:	443b      	add	r3, r7
 801ab8a:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 801ab8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ab92:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801ab96:	4413      	add	r3, r2
 801ab98:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801ab9c:	6879      	ldr	r1, [r7, #4]
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f000 fc88 	bl	801b4b4 <memcpy>
    dataLen += blockLen;
 801aba4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801aba8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801abac:	4413      	add	r3, r2
 801abae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801abb2:	7bfb      	ldrb	r3, [r7, #15]
 801abb4:	f043 0308 	orr.w	r3, r3, #8
 801abb8:	b2d9      	uxtb	r1, r3
 801abba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801abbe:	b29b      	uxth	r3, r3
 801abc0:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801abc4:	9204      	str	r2, [sp, #16]
 801abc6:	222a      	movs	r2, #42	; 0x2a
 801abc8:	9203      	str	r2, [sp, #12]
 801abca:	f107 0210 	add.w	r2, r7, #16
 801abce:	9202      	str	r2, [sp, #8]
 801abd0:	9301      	str	r3, [sp, #4]
 801abd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801abd6:	9300      	str	r3, [sp, #0]
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2200      	movs	r2, #0
 801abdc:	2021      	movs	r0, #33	; 0x21
 801abde:	f7fc fd91 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801abe2:	4603      	mov	r3, r0
}
 801abe4:	4618      	mov	r0, r3
 801abe6:	3760      	adds	r7, #96	; 0x60
 801abe8:	46bd      	mov	sp, r7
 801abea:	bd80      	pop	{r7, pc}

0801abec <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b08a      	sub	sp, #40	; 0x28
 801abf0:	af06      	add	r7, sp, #24
 801abf2:	6039      	str	r1, [r7, #0]
 801abf4:	4611      	mov	r1, r2
 801abf6:	461a      	mov	r2, r3
 801abf8:	4603      	mov	r3, r0
 801abfa:	71fb      	strb	r3, [r7, #7]
 801abfc:	460b      	mov	r3, r1
 801abfe:	80bb      	strh	r3, [r7, #4]
 801ac00:	4613      	mov	r3, r2
 801ac02:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 801ac04:	2300      	movs	r3, #0
 801ac06:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801ac08:	7bfb      	ldrb	r3, [r7, #15]
 801ac0a:	1c5a      	adds	r2, r3, #1
 801ac0c:	73fa      	strb	r2, [r7, #15]
 801ac0e:	88ba      	ldrh	r2, [r7, #4]
 801ac10:	b2d2      	uxtb	r2, r2
 801ac12:	3310      	adds	r3, #16
 801ac14:	443b      	add	r3, r7
 801ac16:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801ac1a:	88bb      	ldrh	r3, [r7, #4]
 801ac1c:	0a1b      	lsrs	r3, r3, #8
 801ac1e:	b29a      	uxth	r2, r3
 801ac20:	7bfb      	ldrb	r3, [r7, #15]
 801ac22:	1c59      	adds	r1, r3, #1
 801ac24:	73f9      	strb	r1, [r7, #15]
 801ac26:	b2d2      	uxtb	r2, r2
 801ac28:	3310      	adds	r3, #16
 801ac2a:	443b      	add	r3, r7
 801ac2c:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 801ac30:	7bfb      	ldrb	r3, [r7, #15]
 801ac32:	1c5a      	adds	r2, r3, #1
 801ac34:	73fa      	strb	r2, [r7, #15]
 801ac36:	3310      	adds	r3, #16
 801ac38:	443b      	add	r3, r7
 801ac3a:	79ba      	ldrb	r2, [r7, #6]
 801ac3c:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801ac40:	79fb      	ldrb	r3, [r7, #7]
 801ac42:	f043 0308 	orr.w	r3, r3, #8
 801ac46:	b2d9      	uxtb	r1, r3
 801ac48:	7bfb      	ldrb	r3, [r7, #15]
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	6a3a      	ldr	r2, [r7, #32]
 801ac4e:	9204      	str	r2, [sp, #16]
 801ac50:	8bba      	ldrh	r2, [r7, #28]
 801ac52:	9203      	str	r2, [sp, #12]
 801ac54:	69ba      	ldr	r2, [r7, #24]
 801ac56:	9202      	str	r2, [sp, #8]
 801ac58:	9301      	str	r3, [sp, #4]
 801ac5a:	f107 0308 	add.w	r3, r7, #8
 801ac5e:	9300      	str	r3, [sp, #0]
 801ac60:	683b      	ldr	r3, [r7, #0]
 801ac62:	2200      	movs	r2, #0
 801ac64:	2023      	movs	r0, #35	; 0x23
 801ac66:	f7fc fd4d 	bl	8017704 <rfalNfcvPollerTransceiveReq>
 801ac6a:	4603      	mov	r3, r0
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3710      	adds	r7, #16
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}

0801ac74 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b082      	sub	sp, #8
 801ac78:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	2100      	movs	r1, #0
 801ac7e:	2002      	movs	r0, #2
 801ac80:	f7fc fede 	bl	8017a40 <rfalSetMode>
 801ac84:	4603      	mov	r3, r0
 801ac86:	80fb      	strh	r3, [r7, #6]
 801ac88:	88fb      	ldrh	r3, [r7, #6]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d001      	beq.n	801ac92 <rfalT1TPollerInitialize+0x1e>
 801ac8e:	88fb      	ldrh	r3, [r7, #6]
 801ac90:	e00e      	b.n	801acb0 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801ac92:	2001      	movs	r0, #1
 801ac94:	f7fd fa70 	bl	8018178 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 801ac98:	2000      	movs	r0, #0
 801ac9a:	f7fd faa5 	bl	80181e8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 801ac9e:	f240 4094 	movw	r0, #1172	; 0x494
 801aca2:	f7fd fa8d 	bl	80181c0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 801aca6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801acaa:	f7fd fa75 	bl	8018198 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801acae:	2300      	movs	r3, #0
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3708      	adds	r7, #8
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b08a      	sub	sp, #40	; 0x28
 801acbc:	af04      	add	r7, sp, #16
 801acbe:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d101      	bne.n	801acca <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 801acc6:	2307      	movs	r3, #7
 801acc8:	e02a      	b.n	801ad20 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 801acca:	f107 030c 	add.w	r3, r7, #12
 801acce:	2207      	movs	r2, #7
 801acd0:	2100      	movs	r1, #0
 801acd2:	4618      	mov	r0, r3
 801acd4:	f000 fc16 	bl	801b504 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 801acd8:	2378      	movs	r3, #120	; 0x78
 801acda:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 801acdc:	f107 000c 	add.w	r0, r7, #12
 801ace0:	f640 13a8 	movw	r3, #2472	; 0x9a8
 801ace4:	9302      	str	r3, [sp, #8]
 801ace6:	2300      	movs	r3, #0
 801ace8:	9301      	str	r3, [sp, #4]
 801acea:	f107 030a 	add.w	r3, r7, #10
 801acee:	9300      	str	r3, [sp, #0]
 801acf0:	2306      	movs	r3, #6
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	2107      	movs	r1, #7
 801acf6:	f7fd fcd3 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801acfa:	4603      	mov	r3, r0
 801acfc:	82fb      	strh	r3, [r7, #22]
 801acfe:	8afb      	ldrh	r3, [r7, #22]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d001      	beq.n	801ad08 <rfalT1TPollerRid+0x50>
 801ad04:	8afb      	ldrh	r3, [r7, #22]
 801ad06:	e00b      	b.n	801ad20 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 801ad08:	897b      	ldrh	r3, [r7, #10]
 801ad0a:	2b06      	cmp	r3, #6
 801ad0c:	d105      	bne.n	801ad1a <rfalT1TPollerRid+0x62>
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ad16:	2b10      	cmp	r3, #16
 801ad18:	d001      	beq.n	801ad1e <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801ad1a:	230b      	movs	r3, #11
 801ad1c:	e000      	b.n	801ad20 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 801ad1e:	2300      	movs	r3, #0
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3718      	adds	r7, #24
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}

0801ad28 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b08a      	sub	sp, #40	; 0x28
 801ad2c:	af04      	add	r7, sp, #16
 801ad2e:	60b9      	str	r1, [r7, #8]
 801ad30:	607b      	str	r3, [r7, #4]
 801ad32:	4603      	mov	r3, r0
 801ad34:	73fb      	strb	r3, [r7, #15]
 801ad36:	4613      	mov	r3, r2
 801ad38:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 801ad3a:	68bb      	ldr	r3, [r7, #8]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d002      	beq.n	801ad46 <rfalT2TPollerRead+0x1e>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d101      	bne.n	801ad4a <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 801ad46:	2307      	movs	r3, #7
 801ad48:	e023      	b.n	801ad92 <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 801ad4a:	2330      	movs	r3, #48	; 0x30
 801ad4c:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 801ad4e:	7bfb      	ldrb	r3, [r7, #15]
 801ad50:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801ad52:	89ba      	ldrh	r2, [r7, #12]
 801ad54:	f107 0014 	add.w	r0, r7, #20
 801ad58:	4b10      	ldr	r3, [pc, #64]	; (801ad9c <rfalT2TPollerRead+0x74>)
 801ad5a:	9302      	str	r3, [sp, #8]
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9301      	str	r3, [sp, #4]
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	4613      	mov	r3, r2
 801ad66:	68ba      	ldr	r2, [r7, #8]
 801ad68:	2102      	movs	r1, #2
 801ad6a:	f7fd fc99 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801ad72:	8afb      	ldrh	r3, [r7, #22]
 801ad74:	2b28      	cmp	r3, #40	; 0x28
 801ad76:	d10b      	bne.n	801ad90 <rfalT2TPollerRead+0x68>
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	881b      	ldrh	r3, [r3, #0]
 801ad7c:	2b01      	cmp	r3, #1
 801ad7e:	d107      	bne.n	801ad90 <rfalT2TPollerRead+0x68>
 801ad80:	68bb      	ldr	r3, [r7, #8]
 801ad82:	781b      	ldrb	r3, [r3, #0]
 801ad84:	f003 030f 	and.w	r3, r3, #15
 801ad88:	2b0a      	cmp	r3, #10
 801ad8a:	d001      	beq.n	801ad90 <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 801ad8c:	230b      	movs	r3, #11
 801ad8e:	e000      	b.n	801ad92 <rfalT2TPollerRead+0x6a>
    }
    return ret;
 801ad90:	8afb      	ldrh	r3, [r7, #22]
 }
 801ad92:	4618      	mov	r0, r3
 801ad94:	3718      	adds	r7, #24
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd80      	pop	{r7, pc}
 801ad9a:	bf00      	nop
 801ad9c:	000108d8 	.word	0x000108d8

0801ada0 <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b08a      	sub	sp, #40	; 0x28
 801ada4:	af04      	add	r7, sp, #16
 801ada6:	4603      	mov	r3, r0
 801ada8:	6039      	str	r1, [r7, #0]
 801adaa:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 801adac:	23a2      	movs	r3, #162	; 0xa2
 801adae:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 801adb0:	79fb      	ldrb	r3, [r7, #7]
 801adb2:	747b      	strb	r3, [r7, #17]
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 801adb8:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801adbc:	f107 020f 	add.w	r2, r7, #15
 801adc0:	f107 0010 	add.w	r0, r7, #16
 801adc4:	4b11      	ldr	r3, [pc, #68]	; (801ae0c <rfalT2TPollerWrite+0x6c>)
 801adc6:	9302      	str	r3, [sp, #8]
 801adc8:	2300      	movs	r3, #0
 801adca:	9301      	str	r3, [sp, #4]
 801adcc:	f107 030c 	add.w	r3, r7, #12
 801add0:	9300      	str	r3, [sp, #0]
 801add2:	2301      	movs	r3, #1
 801add4:	2106      	movs	r1, #6
 801add6:	f7fd fc63 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801adda:	4603      	mov	r3, r0
 801addc:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 801adde:	8afb      	ldrh	r3, [r7, #22]
 801ade0:	2b28      	cmp	r3, #40	; 0x28
 801ade2:	d002      	beq.n	801adea <rfalT2TPollerWrite+0x4a>
 801ade4:	8afb      	ldrh	r3, [r7, #22]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d10b      	bne.n	801ae02 <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 801adea:	230b      	movs	r3, #11
 801adec:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 801adee:	89bb      	ldrh	r3, [r7, #12]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d106      	bne.n	801ae02 <rfalT2TPollerWrite+0x62>
 801adf4:	7bfb      	ldrb	r3, [r7, #15]
 801adf6:	f003 030f 	and.w	r3, r3, #15
 801adfa:	2b0a      	cmp	r3, #10
 801adfc:	d101      	bne.n	801ae02 <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 801adfe:	2300      	movs	r3, #0
 801ae00:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 801ae02:	8afb      	ldrh	r3, [r7, #22]
 }
 801ae04:	4618      	mov	r0, r3
 801ae06:	3718      	adds	r7, #24
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bd80      	pop	{r7, pc}
 801ae0c:	000108d8 	.word	0x000108d8

0801ae10 <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b08a      	sub	sp, #40	; 0x28
 801ae14:	af04      	add	r7, sp, #16
 801ae16:	4603      	mov	r3, r0
 801ae18:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 801ae1a:	23c2      	movs	r3, #194	; 0xc2
 801ae1c:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 801ae1e:	23ff      	movs	r3, #255	; 0xff
 801ae20:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801ae22:	f107 020f 	add.w	r2, r7, #15
 801ae26:	f107 0014 	add.w	r0, r7, #20
 801ae2a:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801ae2e:	9302      	str	r3, [sp, #8]
 801ae30:	2300      	movs	r3, #0
 801ae32:	9301      	str	r3, [sp, #4]
 801ae34:	f107 030c 	add.w	r3, r7, #12
 801ae38:	9300      	str	r3, [sp, #0]
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	2102      	movs	r1, #2
 801ae3e:	f7fd fc2f 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801ae42:	4603      	mov	r3, r0
 801ae44:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 801ae46:	8afb      	ldrh	r3, [r7, #22]
 801ae48:	2b28      	cmp	r3, #40	; 0x28
 801ae4a:	d004      	beq.n	801ae56 <rfalT2TPollerSectorSelect+0x46>
 801ae4c:	8afb      	ldrh	r3, [r7, #22]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d001      	beq.n	801ae56 <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 801ae52:	8afb      	ldrh	r3, [r7, #22]
 801ae54:	e036      	b.n	801aec4 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801ae56:	8afb      	ldrh	r3, [r7, #22]
 801ae58:	2b28      	cmp	r3, #40	; 0x28
 801ae5a:	d107      	bne.n	801ae6c <rfalT2TPollerSectorSelect+0x5c>
 801ae5c:	89bb      	ldrh	r3, [r7, #12]
 801ae5e:	2b01      	cmp	r3, #1
 801ae60:	d104      	bne.n	801ae6c <rfalT2TPollerSectorSelect+0x5c>
 801ae62:	7bfb      	ldrb	r3, [r7, #15]
 801ae64:	f003 030f 	and.w	r3, r3, #15
 801ae68:	2b0a      	cmp	r3, #10
 801ae6a:	d001      	beq.n	801ae70 <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 801ae6c:	230b      	movs	r3, #11
 801ae6e:	e029      	b.n	801aec4 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 801ae70:	79fb      	ldrb	r3, [r7, #7]
 801ae72:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 801ae74:	f107 0310 	add.w	r3, r7, #16
 801ae78:	3301      	adds	r3, #1
 801ae7a:	2203      	movs	r2, #3
 801ae7c:	2100      	movs	r1, #0
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f000 fb40 	bl	801b504 <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801ae84:	f107 020f 	add.w	r2, r7, #15
 801ae88:	f107 0010 	add.w	r0, r7, #16
 801ae8c:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801ae90:	9302      	str	r3, [sp, #8]
 801ae92:	2300      	movs	r3, #0
 801ae94:	9301      	str	r3, [sp, #4]
 801ae96:	f107 030c 	add.w	r3, r7, #12
 801ae9a:	9300      	str	r3, [sp, #0]
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	2104      	movs	r1, #4
 801aea0:	f7fd fbfe 	bl	80186a0 <rfalTransceiveBlockingTxRx>
 801aea4:	4603      	mov	r3, r0
 801aea6:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 801aea8:	8afb      	ldrh	r3, [r7, #22]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d002      	beq.n	801aeb4 <rfalT2TPollerSectorSelect+0xa4>
 801aeae:	8afb      	ldrh	r3, [r7, #22]
 801aeb0:	2b28      	cmp	r3, #40	; 0x28
 801aeb2:	d101      	bne.n	801aeb8 <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 801aeb4:	230b      	movs	r3, #11
 801aeb6:	e005      	b.n	801aec4 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 801aeb8:	8afb      	ldrh	r3, [r7, #22]
 801aeba:	2b04      	cmp	r3, #4
 801aebc:	d101      	bne.n	801aec2 <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 801aebe:	2300      	movs	r3, #0
 801aec0:	e000      	b.n	801aec4 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 801aec2:	8afb      	ldrh	r3, [r7, #22]
 }
 801aec4:	4618      	mov	r0, r3
 801aec6:	3718      	adds	r7, #24
 801aec8:	46bd      	mov	sp, r7
 801aeca:	bd80      	pop	{r7, pc}

0801aecc <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( rfalT4tCApduParam *apduParam )
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b084      	sub	sp, #16
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d007      	beq.n	801aeea <rfalT4TPollerComposeCAPDU+0x1e>
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	689b      	ldr	r3, [r3, #8]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d003      	beq.n	801aeea <rfalT4TPollerComposeCAPDU+0x1e>
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	68db      	ldr	r3, [r3, #12]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d101      	bne.n	801aeee <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 801aeea:	2307      	movs	r3, #7
 801aeec:	e085      	b.n	801affa <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 801aeee:	2300      	movs	r3, #0
 801aef0:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	68db      	ldr	r3, [r3, #12]
 801aef6:	2200      	movs	r2, #0
 801aef8:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	795b      	ldrb	r3, [r3, #5]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d026      	beq.n	801af50 <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	791b      	ldrb	r3, [r3, #4]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d101      	bne.n	801af0e <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 801af0a:	2307      	movs	r3, #7
 801af0c:	e075      	b.n	801affa <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 801af0e:	2305      	movs	r3, #5
 801af10:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 801af12:	7b7b      	ldrb	r3, [r7, #13]
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	7912      	ldrb	r2, [r2, #4]
 801af18:	4413      	add	r3, r2
 801af1a:	461a      	mov	r2, r3
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	79db      	ldrb	r3, [r3, #7]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d001      	beq.n	801af28 <rfalT4TPollerComposeCAPDU+0x5c>
 801af24:	2301      	movs	r3, #1
 801af26:	e000      	b.n	801af2a <rfalT4TPollerComposeCAPDU+0x5e>
 801af28:	2300      	movs	r3, #0
 801af2a:	4413      	add	r3, r2
 801af2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af30:	d901      	bls.n	801af36 <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 801af32:	2301      	movs	r3, #1
 801af34:	e061      	b.n	801affa <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	689a      	ldr	r2, [r3, #8]
 801af3a:	7b7b      	ldrb	r3, [r7, #13]
 801af3c:	4413      	add	r3, r2
 801af3e:	1cd8      	adds	r0, r3, #3
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	689b      	ldr	r3, [r3, #8]
 801af44:	1cd9      	adds	r1, r3, #3
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	791b      	ldrb	r3, [r3, #4]
 801af4a:	461a      	mov	r2, r3
 801af4c:	f000 fac0 	bl	801b4d0 <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	689a      	ldr	r2, [r3, #8]
 801af54:	89fb      	ldrh	r3, [r7, #14]
 801af56:	1c59      	adds	r1, r3, #1
 801af58:	81f9      	strh	r1, [r7, #14]
 801af5a:	4618      	mov	r0, r3
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	7819      	ldrb	r1, [r3, #0]
 801af60:	1813      	adds	r3, r2, r0
 801af62:	460a      	mov	r2, r1
 801af64:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	689a      	ldr	r2, [r3, #8]
 801af6a:	89fb      	ldrh	r3, [r7, #14]
 801af6c:	1c59      	adds	r1, r3, #1
 801af6e:	81f9      	strh	r1, [r7, #14]
 801af70:	4618      	mov	r0, r3
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	7859      	ldrb	r1, [r3, #1]
 801af76:	1813      	adds	r3, r2, r0
 801af78:	460a      	mov	r2, r1
 801af7a:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	689a      	ldr	r2, [r3, #8]
 801af80:	89fb      	ldrh	r3, [r7, #14]
 801af82:	1c59      	adds	r1, r3, #1
 801af84:	81f9      	strh	r1, [r7, #14]
 801af86:	4618      	mov	r0, r3
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	7899      	ldrb	r1, [r3, #2]
 801af8c:	1813      	adds	r3, r2, r0
 801af8e:	460a      	mov	r2, r1
 801af90:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	689a      	ldr	r2, [r3, #8]
 801af96:	89fb      	ldrh	r3, [r7, #14]
 801af98:	1c59      	adds	r1, r3, #1
 801af9a:	81f9      	strh	r1, [r7, #14]
 801af9c:	4618      	mov	r0, r3
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	78d9      	ldrb	r1, [r3, #3]
 801afa2:	1813      	adds	r3, r2, r0
 801afa4:	460a      	mov	r2, r1
 801afa6:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	795b      	ldrb	r3, [r3, #5]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d010      	beq.n	801afd2 <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	689a      	ldr	r2, [r3, #8]
 801afb4:	89fb      	ldrh	r3, [r7, #14]
 801afb6:	1c59      	adds	r1, r3, #1
 801afb8:	81f9      	strh	r1, [r7, #14]
 801afba:	4618      	mov	r0, r3
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	7919      	ldrb	r1, [r3, #4]
 801afc0:	1813      	adds	r3, r2, r0
 801afc2:	460a      	mov	r2, r1
 801afc4:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	791b      	ldrb	r3, [r3, #4]
 801afca:	b29a      	uxth	r2, r3
 801afcc:	89fb      	ldrh	r3, [r7, #14]
 801afce:	4413      	add	r3, r2
 801afd0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	79db      	ldrb	r3, [r3, #7]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d00a      	beq.n	801aff0 <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	689a      	ldr	r2, [r3, #8]
 801afde:	89fb      	ldrh	r3, [r7, #14]
 801afe0:	1c59      	adds	r1, r3, #1
 801afe2:	81f9      	strh	r1, [r7, #14]
 801afe4:	4618      	mov	r0, r3
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	7999      	ldrb	r1, [r3, #6]
 801afea:	1813      	adds	r3, r2, r0
 801afec:	460a      	mov	r2, r1
 801afee:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	68db      	ldr	r3, [r3, #12]
 801aff4:	89fa      	ldrh	r2, [r7, #14]
 801aff6:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 801aff8:	2300      	movs	r3, #0
}
 801affa:	4618      	mov	r0, r3
 801affc:	3710      	adds	r7, #16
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}

0801b002 <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 801b002:	b480      	push	{r7}
 801b004:	b083      	sub	sp, #12
 801b006:	af00      	add	r7, sp, #0
 801b008:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d003      	beq.n	801b018 <rfalT4TPollerParseRAPDU+0x16>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d101      	bne.n	801b01c <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 801b018:	2307      	movs	r3, #7
 801b01a:	e029      	b.n	801b070 <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	889b      	ldrh	r3, [r3, #4]
 801b020:	2b01      	cmp	r3, #1
 801b022:	d801      	bhi.n	801b028 <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 801b024:	230b      	movs	r3, #11
 801b026:	e023      	b.n	801b070 <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	889b      	ldrh	r3, [r3, #4]
 801b02c:	3b02      	subs	r3, #2
 801b02e:	b29a      	uxth	r2, r3
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	687a      	ldr	r2, [r7, #4]
 801b03a:	88d2      	ldrh	r2, [r2, #6]
 801b03c:	4413      	add	r3, r2
 801b03e:	78db      	ldrb	r3, [r3, #3]
 801b040:	021b      	lsls	r3, r3, #8
 801b042:	b21a      	sxth	r2, r3
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	6879      	ldr	r1, [r7, #4]
 801b04a:	88c9      	ldrh	r1, [r1, #6]
 801b04c:	440b      	add	r3, r1
 801b04e:	3303      	adds	r3, #3
 801b050:	3301      	adds	r3, #1
 801b052:	781b      	ldrb	r3, [r3, #0]
 801b054:	b21b      	sxth	r3, r3
 801b056:	4313      	orrs	r3, r2
 801b058:	b21b      	sxth	r3, r3
 801b05a:	b29a      	uxth	r2, r3
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	891b      	ldrh	r3, [r3, #8]
 801b064:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 801b068:	d101      	bne.n	801b06e <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 801b06a:	2300      	movs	r3, #0
 801b06c:	e000      	b.n	801b070 <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 801b06e:	2305      	movs	r3, #5
}
 801b070:	4618      	mov	r0, r3
 801b072:	370c      	adds	r7, #12
 801b074:	46bd      	mov	sp, r7
 801b076:	bc80      	pop	{r7}
 801b078:	4770      	bx	lr

0801b07a <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 801b07a:	b580      	push	{r7, lr}
 801b07c:	b088      	sub	sp, #32
 801b07e:	af00      	add	r7, sp, #0
 801b080:	60f8      	str	r0, [r7, #12]
 801b082:	60b9      	str	r1, [r7, #8]
 801b084:	603b      	str	r3, [r7, #0]
 801b086:	4613      	mov	r3, r2
 801b088:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b08a:	2300      	movs	r3, #0
 801b08c:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801b08e:	23a4      	movs	r3, #164	; 0xa4
 801b090:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 801b092:	2304      	movs	r3, #4
 801b094:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801b096:	2300      	movs	r3, #0
 801b098:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 801b09a:	79fb      	ldrb	r3, [r7, #7]
 801b09c:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801b0a2:	2301      	movs	r3, #1
 801b0a4:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 801b0b2:	79fb      	ldrb	r3, [r7, #7]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d006      	beq.n	801b0c6 <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 801b0b8:	69bb      	ldr	r3, [r7, #24]
 801b0ba:	3303      	adds	r3, #3
 801b0bc:	79fa      	ldrb	r2, [r7, #7]
 801b0be:	68b9      	ldr	r1, [r7, #8]
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f000 f9f7 	bl	801b4b4 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b0c6:	f107 0310 	add.w	r3, r7, #16
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f7ff fefe 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b0d0:	4603      	mov	r3, r0
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3720      	adds	r7, #32
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}

0801b0da <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801b0da:	b580      	push	{r7, lr}
 801b0dc:	b088      	sub	sp, #32
 801b0de:	af00      	add	r7, sp, #0
 801b0e0:	60f8      	str	r0, [r7, #12]
 801b0e2:	60b9      	str	r1, [r7, #8]
 801b0e4:	603b      	str	r3, [r7, #0]
 801b0e6:	4613      	mov	r3, r2
 801b0e8:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801b0ee:	23a4      	movs	r3, #164	; 0xa4
 801b0f0:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 801b0f6:	230c      	movs	r3, #12
 801b0f8:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801b0fa:	79fb      	ldrb	r3, [r7, #7]
 801b0fc:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801b0fe:	2300      	movs	r3, #0
 801b100:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801b102:	2301      	movs	r3, #1
 801b104:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b106:	2300      	movs	r3, #0
 801b108:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b10e:	683b      	ldr	r3, [r7, #0]
 801b110:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801b112:	79fb      	ldrb	r3, [r7, #7]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d006      	beq.n	801b126 <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801b118:	69bb      	ldr	r3, [r7, #24]
 801b11a:	3303      	adds	r3, #3
 801b11c:	79fa      	ldrb	r2, [r7, #7]
 801b11e:	68b9      	ldr	r1, [r7, #8]
 801b120:	4618      	mov	r0, r3
 801b122:	f000 f9c7 	bl	801b4b4 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b126:	f107 0310 	add.w	r3, r7, #16
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7ff fece 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b130:	4603      	mov	r3, r0
}
 801b132:	4618      	mov	r0, r3
 801b134:	3720      	adds	r7, #32
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}

0801b13a <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801b13a:	b580      	push	{r7, lr}
 801b13c:	b088      	sub	sp, #32
 801b13e:	af00      	add	r7, sp, #0
 801b140:	60f8      	str	r0, [r7, #12]
 801b142:	60b9      	str	r1, [r7, #8]
 801b144:	603b      	str	r3, [r7, #0]
 801b146:	4613      	mov	r3, r2
 801b148:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b14a:	2300      	movs	r3, #0
 801b14c:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801b14e:	23a4      	movs	r3, #164	; 0xa4
 801b150:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801b152:	2300      	movs	r3, #0
 801b154:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801b156:	2300      	movs	r3, #0
 801b158:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801b15a:	79fb      	ldrb	r3, [r7, #7]
 801b15c:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801b15e:	2300      	movs	r3, #0
 801b160:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801b162:	2301      	movs	r3, #1
 801b164:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b166:	2300      	movs	r3, #0
 801b168:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b16e:	683b      	ldr	r3, [r7, #0]
 801b170:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801b172:	79fb      	ldrb	r3, [r7, #7]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d006      	beq.n	801b186 <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801b178:	69bb      	ldr	r3, [r7, #24]
 801b17a:	3303      	adds	r3, #3
 801b17c:	79fa      	ldrb	r2, [r7, #7]
 801b17e:	68b9      	ldr	r1, [r7, #8]
 801b180:	4618      	mov	r0, r3
 801b182:	f000 f997 	bl	801b4b4 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b186:	f107 0310 	add.w	r3, r7, #16
 801b18a:	4618      	mov	r0, r3
 801b18c:	f7ff fe9e 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b190:	4603      	mov	r3, r0
}
 801b192:	4618      	mov	r0, r3
 801b194:	3720      	adds	r7, #32
 801b196:	46bd      	mov	sp, r7
 801b198:	bd80      	pop	{r7, pc}

0801b19a <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801b19a:	b580      	push	{r7, lr}
 801b19c:	b088      	sub	sp, #32
 801b19e:	af00      	add	r7, sp, #0
 801b1a0:	60f8      	str	r0, [r7, #12]
 801b1a2:	607b      	str	r3, [r7, #4]
 801b1a4:	460b      	mov	r3, r1
 801b1a6:	817b      	strh	r3, [r7, #10]
 801b1a8:	4613      	mov	r3, r2
 801b1aa:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 801b1b0:	23b0      	movs	r3, #176	; 0xb0
 801b1b2:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801b1b4:	897b      	ldrh	r3, [r7, #10]
 801b1b6:	0a1b      	lsrs	r3, r3, #8
 801b1b8:	b29b      	uxth	r3, r3
 801b1ba:	b2db      	uxtb	r3, r3
 801b1bc:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801b1be:	897b      	ldrh	r3, [r7, #10]
 801b1c0:	b2db      	uxtb	r3, r3
 801b1c2:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 801b1c4:	7a7b      	ldrb	r3, [r7, #9]
 801b1c6:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b1d8:	f107 0310 	add.w	r3, r7, #16
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f7ff fe75 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b1e2:	4603      	mov	r3, r0
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3720      	adds	r7, #32
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b08a      	sub	sp, #40	; 0x28
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	60f8      	str	r0, [r7, #12]
 801b1f4:	60b9      	str	r1, [r7, #8]
 801b1f6:	603b      	str	r3, [r7, #0]
 801b1f8:	4613      	mov	r3, r2
 801b1fa:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 801b200:	23b1      	movs	r3, #177	; 0xb1
 801b202:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801b204:	2300      	movs	r3, #0
 801b206:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801b208:	2300      	movs	r3, #0
 801b20a:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 801b20c:	79fb      	ldrb	r3, [r7, #7]
 801b20e:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 801b210:	2301      	movs	r3, #1
 801b212:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 801b214:	2301      	movs	r3, #1
 801b216:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 801b220:	2300      	movs	r3, #0
 801b222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801b226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b22a:	1c5a      	adds	r2, r3, #1
 801b22c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b230:	461a      	mov	r2, r3
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	4413      	add	r3, r2
 801b236:	2254      	movs	r2, #84	; 0x54
 801b238:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801b23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b23e:	1c5a      	adds	r2, r3, #1
 801b240:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b244:	461a      	mov	r2, r3
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	4413      	add	r3, r2
 801b24a:	2203      	movs	r2, #3
 801b24c:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801b24e:	68bb      	ldr	r3, [r7, #8]
 801b250:	0c1a      	lsrs	r2, r3, #16
 801b252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b256:	1c59      	adds	r1, r3, #1
 801b258:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b25c:	4619      	mov	r1, r3
 801b25e:	b2d2      	uxtb	r2, r2
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	440b      	add	r3, r1
 801b264:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	0a1a      	lsrs	r2, r3, #8
 801b26a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b26e:	1c59      	adds	r1, r3, #1
 801b270:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b274:	4619      	mov	r1, r3
 801b276:	b2d2      	uxtb	r2, r2
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	440b      	add	r3, r1
 801b27c:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801b27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b282:	1c5a      	adds	r2, r3, #1
 801b284:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b288:	4619      	mov	r1, r3
 801b28a:	68bb      	ldr	r3, [r7, #8]
 801b28c:	b2da      	uxtb	r2, r3
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	440b      	add	r3, r1
 801b292:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 801b294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b298:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b29a:	f107 0314 	add.w	r3, r7, #20
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f7ff fe14 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b2a4:	4603      	mov	r3, r0
}
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	3728      	adds	r7, #40	; 0x28
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	bd80      	pop	{r7, pc}

0801b2ae <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801b2ae:	b580      	push	{r7, lr}
 801b2b0:	b088      	sub	sp, #32
 801b2b2:	af00      	add	r7, sp, #0
 801b2b4:	60f8      	str	r0, [r7, #12]
 801b2b6:	607a      	str	r2, [r7, #4]
 801b2b8:	461a      	mov	r2, r3
 801b2ba:	460b      	mov	r3, r1
 801b2bc:	817b      	strh	r3, [r7, #10]
 801b2be:	4613      	mov	r3, r2
 801b2c0:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 801b2c6:	23d6      	movs	r3, #214	; 0xd6
 801b2c8:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801b2ca:	897b      	ldrh	r3, [r7, #10]
 801b2cc:	0a1b      	lsrs	r3, r3, #8
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801b2d4:	897b      	ldrh	r3, [r7, #10]
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 801b2da:	7a7b      	ldrb	r3, [r7, #9]
 801b2dc:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 801b2de:	2301      	movs	r3, #1
 801b2e0:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b2e2:	2300      	movs	r3, #0
 801b2e4:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ec:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 801b2ee:	7a7b      	ldrb	r3, [r7, #9]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d006      	beq.n	801b302 <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 801b2f4:	69bb      	ldr	r3, [r7, #24]
 801b2f6:	3303      	adds	r3, #3
 801b2f8:	7a7a      	ldrb	r2, [r7, #9]
 801b2fa:	6879      	ldr	r1, [r7, #4]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	f000 f8d9 	bl	801b4b4 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b302:	f107 0310 	add.w	r3, r7, #16
 801b306:	4618      	mov	r0, r3
 801b308:	f7ff fde0 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b30c:	4603      	mov	r3, r0
}
 801b30e:	4618      	mov	r0, r3
 801b310:	3720      	adds	r7, #32
 801b312:	46bd      	mov	sp, r7
 801b314:	bd80      	pop	{r7, pc}

0801b316 <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801b316:	b580      	push	{r7, lr}
 801b318:	b08a      	sub	sp, #40	; 0x28
 801b31a:	af00      	add	r7, sp, #0
 801b31c:	60f8      	str	r0, [r7, #12]
 801b31e:	60b9      	str	r1, [r7, #8]
 801b320:	607a      	str	r2, [r7, #4]
 801b322:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b324:	2300      	movs	r3, #0
 801b326:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 801b328:	23d7      	movs	r3, #215	; 0xd7
 801b32a:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801b32c:	2300      	movs	r3, #0
 801b32e:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801b330:	2300      	movs	r3, #0
 801b332:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 801b334:	2301      	movs	r3, #1
 801b336:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 801b338:	2300      	movs	r3, #0
 801b33a:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b342:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 801b344:	2300      	movs	r3, #0
 801b346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801b34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b34e:	1c5a      	adds	r2, r3, #1
 801b350:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b354:	461a      	mov	r2, r3
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	4413      	add	r3, r2
 801b35a:	2254      	movs	r2, #84	; 0x54
 801b35c:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801b35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b362:	1c5a      	adds	r2, r3, #1
 801b364:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b368:	461a      	mov	r2, r3
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	4413      	add	r3, r2
 801b36e:	2203      	movs	r2, #3
 801b370:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801b372:	68bb      	ldr	r3, [r7, #8]
 801b374:	0c1a      	lsrs	r2, r3, #16
 801b376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b37a:	1c59      	adds	r1, r3, #1
 801b37c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b380:	4619      	mov	r1, r3
 801b382:	b2d2      	uxtb	r2, r2
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	440b      	add	r3, r1
 801b388:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801b38a:	68bb      	ldr	r3, [r7, #8]
 801b38c:	0a1a      	lsrs	r2, r3, #8
 801b38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b392:	1c59      	adds	r1, r3, #1
 801b394:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b398:	4619      	mov	r1, r3
 801b39a:	b2d2      	uxtb	r2, r2
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	440b      	add	r3, r1
 801b3a0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3a6:	1c5a      	adds	r2, r3, #1
 801b3a8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b3ac:	4619      	mov	r1, r3
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	b2da      	uxtb	r2, r3
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	440b      	add	r3, r1
 801b3b6:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 801b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3bc:	1c5a      	adds	r2, r3, #1
 801b3be:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b3c2:	461a      	mov	r2, r3
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	4413      	add	r3, r2
 801b3c8:	2253      	movs	r2, #83	; 0x53
 801b3ca:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 801b3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3d0:	1c5a      	adds	r2, r3, #1
 801b3d2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b3d6:	461a      	mov	r2, r3
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	4413      	add	r3, r2
 801b3dc:	78fa      	ldrb	r2, [r7, #3]
 801b3de:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 801b3e0:	78fa      	ldrb	r2, [r7, #3]
 801b3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3e6:	4413      	add	r3, r2
 801b3e8:	2bfe      	cmp	r3, #254	; 0xfe
 801b3ea:	d806      	bhi.n	801b3fa <rfalT4TPollerComposeWriteDataODO+0xe4>
 801b3ec:	78fa      	ldrb	r2, [r7, #3]
 801b3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3f2:	4413      	add	r3, r2
 801b3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b3f8:	d301      	bcc.n	801b3fe <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	e01b      	b.n	801b436 <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 801b3fe:	78fb      	ldrb	r3, [r7, #3]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d009      	beq.n	801b418 <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 801b404:	69fa      	ldr	r2, [r7, #28]
 801b406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b40a:	4413      	add	r3, r2
 801b40c:	3303      	adds	r3, #3
 801b40e:	78fa      	ldrb	r2, [r7, #3]
 801b410:	6879      	ldr	r1, [r7, #4]
 801b412:	4618      	mov	r0, r3
 801b414:	f000 f84e 	bl	801b4b4 <memcpy>
    }
    dataIt += dataLen;
 801b418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b41c:	78fb      	ldrb	r3, [r7, #3]
 801b41e:	4413      	add	r3, r2
 801b420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 801b424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b428:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b42a:	f107 0314 	add.w	r3, r7, #20
 801b42e:	4618      	mov	r0, r3
 801b430:	f7ff fd4c 	bl	801aecc <rfalT4TPollerComposeCAPDU>
 801b434:	4603      	mov	r3, r0
}
 801b436:	4618      	mov	r0, r3
 801b438:	3728      	adds	r7, #40	; 0x28
 801b43a:	46bd      	mov	sp, r7
 801b43c:	bd80      	pop	{r7, pc}
	...

0801b440 <__errno>:
 801b440:	4b01      	ldr	r3, [pc, #4]	; (801b448 <__errno+0x8>)
 801b442:	6818      	ldr	r0, [r3, #0]
 801b444:	4770      	bx	lr
 801b446:	bf00      	nop
 801b448:	20000134 	.word	0x20000134

0801b44c <__libc_init_array>:
 801b44c:	b570      	push	{r4, r5, r6, lr}
 801b44e:	2600      	movs	r6, #0
 801b450:	4d0c      	ldr	r5, [pc, #48]	; (801b484 <__libc_init_array+0x38>)
 801b452:	4c0d      	ldr	r4, [pc, #52]	; (801b488 <__libc_init_array+0x3c>)
 801b454:	1b64      	subs	r4, r4, r5
 801b456:	10a4      	asrs	r4, r4, #2
 801b458:	42a6      	cmp	r6, r4
 801b45a:	d109      	bne.n	801b470 <__libc_init_array+0x24>
 801b45c:	f000 fcc6 	bl	801bdec <_init>
 801b460:	2600      	movs	r6, #0
 801b462:	4d0a      	ldr	r5, [pc, #40]	; (801b48c <__libc_init_array+0x40>)
 801b464:	4c0a      	ldr	r4, [pc, #40]	; (801b490 <__libc_init_array+0x44>)
 801b466:	1b64      	subs	r4, r4, r5
 801b468:	10a4      	asrs	r4, r4, #2
 801b46a:	42a6      	cmp	r6, r4
 801b46c:	d105      	bne.n	801b47a <__libc_init_array+0x2e>
 801b46e:	bd70      	pop	{r4, r5, r6, pc}
 801b470:	f855 3b04 	ldr.w	r3, [r5], #4
 801b474:	4798      	blx	r3
 801b476:	3601      	adds	r6, #1
 801b478:	e7ee      	b.n	801b458 <__libc_init_array+0xc>
 801b47a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b47e:	4798      	blx	r3
 801b480:	3601      	adds	r6, #1
 801b482:	e7f2      	b.n	801b46a <__libc_init_array+0x1e>
 801b484:	0801d820 	.word	0x0801d820
 801b488:	0801d820 	.word	0x0801d820
 801b48c:	0801d820 	.word	0x0801d820
 801b490:	0801d824 	.word	0x0801d824

0801b494 <memcmp>:
 801b494:	b510      	push	{r4, lr}
 801b496:	3901      	subs	r1, #1
 801b498:	4402      	add	r2, r0
 801b49a:	4290      	cmp	r0, r2
 801b49c:	d101      	bne.n	801b4a2 <memcmp+0xe>
 801b49e:	2000      	movs	r0, #0
 801b4a0:	e005      	b.n	801b4ae <memcmp+0x1a>
 801b4a2:	7803      	ldrb	r3, [r0, #0]
 801b4a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b4a8:	42a3      	cmp	r3, r4
 801b4aa:	d001      	beq.n	801b4b0 <memcmp+0x1c>
 801b4ac:	1b18      	subs	r0, r3, r4
 801b4ae:	bd10      	pop	{r4, pc}
 801b4b0:	3001      	adds	r0, #1
 801b4b2:	e7f2      	b.n	801b49a <memcmp+0x6>

0801b4b4 <memcpy>:
 801b4b4:	440a      	add	r2, r1
 801b4b6:	4291      	cmp	r1, r2
 801b4b8:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4bc:	d100      	bne.n	801b4c0 <memcpy+0xc>
 801b4be:	4770      	bx	lr
 801b4c0:	b510      	push	{r4, lr}
 801b4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4c6:	4291      	cmp	r1, r2
 801b4c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4cc:	d1f9      	bne.n	801b4c2 <memcpy+0xe>
 801b4ce:	bd10      	pop	{r4, pc}

0801b4d0 <memmove>:
 801b4d0:	4288      	cmp	r0, r1
 801b4d2:	b510      	push	{r4, lr}
 801b4d4:	eb01 0402 	add.w	r4, r1, r2
 801b4d8:	d902      	bls.n	801b4e0 <memmove+0x10>
 801b4da:	4284      	cmp	r4, r0
 801b4dc:	4623      	mov	r3, r4
 801b4de:	d807      	bhi.n	801b4f0 <memmove+0x20>
 801b4e0:	1e43      	subs	r3, r0, #1
 801b4e2:	42a1      	cmp	r1, r4
 801b4e4:	d008      	beq.n	801b4f8 <memmove+0x28>
 801b4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b4ee:	e7f8      	b.n	801b4e2 <memmove+0x12>
 801b4f0:	4601      	mov	r1, r0
 801b4f2:	4402      	add	r2, r0
 801b4f4:	428a      	cmp	r2, r1
 801b4f6:	d100      	bne.n	801b4fa <memmove+0x2a>
 801b4f8:	bd10      	pop	{r4, pc}
 801b4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b502:	e7f7      	b.n	801b4f4 <memmove+0x24>

0801b504 <memset>:
 801b504:	4603      	mov	r3, r0
 801b506:	4402      	add	r2, r0
 801b508:	4293      	cmp	r3, r2
 801b50a:	d100      	bne.n	801b50e <memset+0xa>
 801b50c:	4770      	bx	lr
 801b50e:	f803 1b01 	strb.w	r1, [r3], #1
 801b512:	e7f9      	b.n	801b508 <memset+0x4>

0801b514 <_vsniprintf_r>:
 801b514:	b530      	push	{r4, r5, lr}
 801b516:	4614      	mov	r4, r2
 801b518:	2c00      	cmp	r4, #0
 801b51a:	4605      	mov	r5, r0
 801b51c:	461a      	mov	r2, r3
 801b51e:	b09b      	sub	sp, #108	; 0x6c
 801b520:	da05      	bge.n	801b52e <_vsniprintf_r+0x1a>
 801b522:	238b      	movs	r3, #139	; 0x8b
 801b524:	6003      	str	r3, [r0, #0]
 801b526:	f04f 30ff 	mov.w	r0, #4294967295
 801b52a:	b01b      	add	sp, #108	; 0x6c
 801b52c:	bd30      	pop	{r4, r5, pc}
 801b52e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b532:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b536:	bf0c      	ite	eq
 801b538:	4623      	moveq	r3, r4
 801b53a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b53e:	9302      	str	r3, [sp, #8]
 801b540:	9305      	str	r3, [sp, #20]
 801b542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b546:	9100      	str	r1, [sp, #0]
 801b548:	9104      	str	r1, [sp, #16]
 801b54a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b54e:	4669      	mov	r1, sp
 801b550:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b552:	f000 f875 	bl	801b640 <_svfiprintf_r>
 801b556:	1c43      	adds	r3, r0, #1
 801b558:	bfbc      	itt	lt
 801b55a:	238b      	movlt	r3, #139	; 0x8b
 801b55c:	602b      	strlt	r3, [r5, #0]
 801b55e:	2c00      	cmp	r4, #0
 801b560:	d0e3      	beq.n	801b52a <_vsniprintf_r+0x16>
 801b562:	2200      	movs	r2, #0
 801b564:	9b00      	ldr	r3, [sp, #0]
 801b566:	701a      	strb	r2, [r3, #0]
 801b568:	e7df      	b.n	801b52a <_vsniprintf_r+0x16>
	...

0801b56c <vsniprintf>:
 801b56c:	b507      	push	{r0, r1, r2, lr}
 801b56e:	9300      	str	r3, [sp, #0]
 801b570:	4613      	mov	r3, r2
 801b572:	460a      	mov	r2, r1
 801b574:	4601      	mov	r1, r0
 801b576:	4803      	ldr	r0, [pc, #12]	; (801b584 <vsniprintf+0x18>)
 801b578:	6800      	ldr	r0, [r0, #0]
 801b57a:	f7ff ffcb 	bl	801b514 <_vsniprintf_r>
 801b57e:	b003      	add	sp, #12
 801b580:	f85d fb04 	ldr.w	pc, [sp], #4
 801b584:	20000134 	.word	0x20000134

0801b588 <__ssputs_r>:
 801b588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b58c:	688e      	ldr	r6, [r1, #8]
 801b58e:	4682      	mov	sl, r0
 801b590:	429e      	cmp	r6, r3
 801b592:	460c      	mov	r4, r1
 801b594:	4690      	mov	r8, r2
 801b596:	461f      	mov	r7, r3
 801b598:	d838      	bhi.n	801b60c <__ssputs_r+0x84>
 801b59a:	898a      	ldrh	r2, [r1, #12]
 801b59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b5a0:	d032      	beq.n	801b608 <__ssputs_r+0x80>
 801b5a2:	6825      	ldr	r5, [r4, #0]
 801b5a4:	6909      	ldr	r1, [r1, #16]
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	eba5 0901 	sub.w	r9, r5, r1
 801b5ac:	6965      	ldr	r5, [r4, #20]
 801b5ae:	444b      	add	r3, r9
 801b5b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5b8:	106d      	asrs	r5, r5, #1
 801b5ba:	429d      	cmp	r5, r3
 801b5bc:	bf38      	it	cc
 801b5be:	461d      	movcc	r5, r3
 801b5c0:	0553      	lsls	r3, r2, #21
 801b5c2:	d531      	bpl.n	801b628 <__ssputs_r+0xa0>
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	f000 fb47 	bl	801bc58 <_malloc_r>
 801b5ca:	4606      	mov	r6, r0
 801b5cc:	b950      	cbnz	r0, 801b5e4 <__ssputs_r+0x5c>
 801b5ce:	230c      	movs	r3, #12
 801b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5d4:	f8ca 3000 	str.w	r3, [sl]
 801b5d8:	89a3      	ldrh	r3, [r4, #12]
 801b5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5de:	81a3      	strh	r3, [r4, #12]
 801b5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5e4:	464a      	mov	r2, r9
 801b5e6:	6921      	ldr	r1, [r4, #16]
 801b5e8:	f7ff ff64 	bl	801b4b4 <memcpy>
 801b5ec:	89a3      	ldrh	r3, [r4, #12]
 801b5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5f6:	81a3      	strh	r3, [r4, #12]
 801b5f8:	6126      	str	r6, [r4, #16]
 801b5fa:	444e      	add	r6, r9
 801b5fc:	6026      	str	r6, [r4, #0]
 801b5fe:	463e      	mov	r6, r7
 801b600:	6165      	str	r5, [r4, #20]
 801b602:	eba5 0509 	sub.w	r5, r5, r9
 801b606:	60a5      	str	r5, [r4, #8]
 801b608:	42be      	cmp	r6, r7
 801b60a:	d900      	bls.n	801b60e <__ssputs_r+0x86>
 801b60c:	463e      	mov	r6, r7
 801b60e:	4632      	mov	r2, r6
 801b610:	4641      	mov	r1, r8
 801b612:	6820      	ldr	r0, [r4, #0]
 801b614:	f7ff ff5c 	bl	801b4d0 <memmove>
 801b618:	68a3      	ldr	r3, [r4, #8]
 801b61a:	2000      	movs	r0, #0
 801b61c:	1b9b      	subs	r3, r3, r6
 801b61e:	60a3      	str	r3, [r4, #8]
 801b620:	6823      	ldr	r3, [r4, #0]
 801b622:	4433      	add	r3, r6
 801b624:	6023      	str	r3, [r4, #0]
 801b626:	e7db      	b.n	801b5e0 <__ssputs_r+0x58>
 801b628:	462a      	mov	r2, r5
 801b62a:	f000 fb89 	bl	801bd40 <_realloc_r>
 801b62e:	4606      	mov	r6, r0
 801b630:	2800      	cmp	r0, #0
 801b632:	d1e1      	bne.n	801b5f8 <__ssputs_r+0x70>
 801b634:	4650      	mov	r0, sl
 801b636:	6921      	ldr	r1, [r4, #16]
 801b638:	f000 faa6 	bl	801bb88 <_free_r>
 801b63c:	e7c7      	b.n	801b5ce <__ssputs_r+0x46>
	...

0801b640 <_svfiprintf_r>:
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	4698      	mov	r8, r3
 801b646:	898b      	ldrh	r3, [r1, #12]
 801b648:	4607      	mov	r7, r0
 801b64a:	061b      	lsls	r3, r3, #24
 801b64c:	460d      	mov	r5, r1
 801b64e:	4614      	mov	r4, r2
 801b650:	b09d      	sub	sp, #116	; 0x74
 801b652:	d50e      	bpl.n	801b672 <_svfiprintf_r+0x32>
 801b654:	690b      	ldr	r3, [r1, #16]
 801b656:	b963      	cbnz	r3, 801b672 <_svfiprintf_r+0x32>
 801b658:	2140      	movs	r1, #64	; 0x40
 801b65a:	f000 fafd 	bl	801bc58 <_malloc_r>
 801b65e:	6028      	str	r0, [r5, #0]
 801b660:	6128      	str	r0, [r5, #16]
 801b662:	b920      	cbnz	r0, 801b66e <_svfiprintf_r+0x2e>
 801b664:	230c      	movs	r3, #12
 801b666:	603b      	str	r3, [r7, #0]
 801b668:	f04f 30ff 	mov.w	r0, #4294967295
 801b66c:	e0d1      	b.n	801b812 <_svfiprintf_r+0x1d2>
 801b66e:	2340      	movs	r3, #64	; 0x40
 801b670:	616b      	str	r3, [r5, #20]
 801b672:	2300      	movs	r3, #0
 801b674:	9309      	str	r3, [sp, #36]	; 0x24
 801b676:	2320      	movs	r3, #32
 801b678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b67c:	2330      	movs	r3, #48	; 0x30
 801b67e:	f04f 0901 	mov.w	r9, #1
 801b682:	f8cd 800c 	str.w	r8, [sp, #12]
 801b686:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b82c <_svfiprintf_r+0x1ec>
 801b68a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b68e:	4623      	mov	r3, r4
 801b690:	469a      	mov	sl, r3
 801b692:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b696:	b10a      	cbz	r2, 801b69c <_svfiprintf_r+0x5c>
 801b698:	2a25      	cmp	r2, #37	; 0x25
 801b69a:	d1f9      	bne.n	801b690 <_svfiprintf_r+0x50>
 801b69c:	ebba 0b04 	subs.w	fp, sl, r4
 801b6a0:	d00b      	beq.n	801b6ba <_svfiprintf_r+0x7a>
 801b6a2:	465b      	mov	r3, fp
 801b6a4:	4622      	mov	r2, r4
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	4638      	mov	r0, r7
 801b6aa:	f7ff ff6d 	bl	801b588 <__ssputs_r>
 801b6ae:	3001      	adds	r0, #1
 801b6b0:	f000 80aa 	beq.w	801b808 <_svfiprintf_r+0x1c8>
 801b6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6b6:	445a      	add	r2, fp
 801b6b8:	9209      	str	r2, [sp, #36]	; 0x24
 801b6ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f000 80a2 	beq.w	801b808 <_svfiprintf_r+0x1c8>
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6ce:	f10a 0a01 	add.w	sl, sl, #1
 801b6d2:	9304      	str	r3, [sp, #16]
 801b6d4:	9307      	str	r3, [sp, #28]
 801b6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6da:	931a      	str	r3, [sp, #104]	; 0x68
 801b6dc:	4654      	mov	r4, sl
 801b6de:	2205      	movs	r2, #5
 801b6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6e4:	4851      	ldr	r0, [pc, #324]	; (801b82c <_svfiprintf_r+0x1ec>)
 801b6e6:	f000 fa41 	bl	801bb6c <memchr>
 801b6ea:	9a04      	ldr	r2, [sp, #16]
 801b6ec:	b9d8      	cbnz	r0, 801b726 <_svfiprintf_r+0xe6>
 801b6ee:	06d0      	lsls	r0, r2, #27
 801b6f0:	bf44      	itt	mi
 801b6f2:	2320      	movmi	r3, #32
 801b6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6f8:	0711      	lsls	r1, r2, #28
 801b6fa:	bf44      	itt	mi
 801b6fc:	232b      	movmi	r3, #43	; 0x2b
 801b6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b702:	f89a 3000 	ldrb.w	r3, [sl]
 801b706:	2b2a      	cmp	r3, #42	; 0x2a
 801b708:	d015      	beq.n	801b736 <_svfiprintf_r+0xf6>
 801b70a:	4654      	mov	r4, sl
 801b70c:	2000      	movs	r0, #0
 801b70e:	f04f 0c0a 	mov.w	ip, #10
 801b712:	9a07      	ldr	r2, [sp, #28]
 801b714:	4621      	mov	r1, r4
 801b716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b71a:	3b30      	subs	r3, #48	; 0x30
 801b71c:	2b09      	cmp	r3, #9
 801b71e:	d94e      	bls.n	801b7be <_svfiprintf_r+0x17e>
 801b720:	b1b0      	cbz	r0, 801b750 <_svfiprintf_r+0x110>
 801b722:	9207      	str	r2, [sp, #28]
 801b724:	e014      	b.n	801b750 <_svfiprintf_r+0x110>
 801b726:	eba0 0308 	sub.w	r3, r0, r8
 801b72a:	fa09 f303 	lsl.w	r3, r9, r3
 801b72e:	4313      	orrs	r3, r2
 801b730:	46a2      	mov	sl, r4
 801b732:	9304      	str	r3, [sp, #16]
 801b734:	e7d2      	b.n	801b6dc <_svfiprintf_r+0x9c>
 801b736:	9b03      	ldr	r3, [sp, #12]
 801b738:	1d19      	adds	r1, r3, #4
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	9103      	str	r1, [sp, #12]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	bfbb      	ittet	lt
 801b742:	425b      	neglt	r3, r3
 801b744:	f042 0202 	orrlt.w	r2, r2, #2
 801b748:	9307      	strge	r3, [sp, #28]
 801b74a:	9307      	strlt	r3, [sp, #28]
 801b74c:	bfb8      	it	lt
 801b74e:	9204      	strlt	r2, [sp, #16]
 801b750:	7823      	ldrb	r3, [r4, #0]
 801b752:	2b2e      	cmp	r3, #46	; 0x2e
 801b754:	d10c      	bne.n	801b770 <_svfiprintf_r+0x130>
 801b756:	7863      	ldrb	r3, [r4, #1]
 801b758:	2b2a      	cmp	r3, #42	; 0x2a
 801b75a:	d135      	bne.n	801b7c8 <_svfiprintf_r+0x188>
 801b75c:	9b03      	ldr	r3, [sp, #12]
 801b75e:	3402      	adds	r4, #2
 801b760:	1d1a      	adds	r2, r3, #4
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	9203      	str	r2, [sp, #12]
 801b766:	2b00      	cmp	r3, #0
 801b768:	bfb8      	it	lt
 801b76a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b76e:	9305      	str	r3, [sp, #20]
 801b770:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801b830 <_svfiprintf_r+0x1f0>
 801b774:	2203      	movs	r2, #3
 801b776:	4650      	mov	r0, sl
 801b778:	7821      	ldrb	r1, [r4, #0]
 801b77a:	f000 f9f7 	bl	801bb6c <memchr>
 801b77e:	b140      	cbz	r0, 801b792 <_svfiprintf_r+0x152>
 801b780:	2340      	movs	r3, #64	; 0x40
 801b782:	eba0 000a 	sub.w	r0, r0, sl
 801b786:	fa03 f000 	lsl.w	r0, r3, r0
 801b78a:	9b04      	ldr	r3, [sp, #16]
 801b78c:	3401      	adds	r4, #1
 801b78e:	4303      	orrs	r3, r0
 801b790:	9304      	str	r3, [sp, #16]
 801b792:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b796:	2206      	movs	r2, #6
 801b798:	4826      	ldr	r0, [pc, #152]	; (801b834 <_svfiprintf_r+0x1f4>)
 801b79a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b79e:	f000 f9e5 	bl	801bb6c <memchr>
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d038      	beq.n	801b818 <_svfiprintf_r+0x1d8>
 801b7a6:	4b24      	ldr	r3, [pc, #144]	; (801b838 <_svfiprintf_r+0x1f8>)
 801b7a8:	bb1b      	cbnz	r3, 801b7f2 <_svfiprintf_r+0x1b2>
 801b7aa:	9b03      	ldr	r3, [sp, #12]
 801b7ac:	3307      	adds	r3, #7
 801b7ae:	f023 0307 	bic.w	r3, r3, #7
 801b7b2:	3308      	adds	r3, #8
 801b7b4:	9303      	str	r3, [sp, #12]
 801b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7b8:	4433      	add	r3, r6
 801b7ba:	9309      	str	r3, [sp, #36]	; 0x24
 801b7bc:	e767      	b.n	801b68e <_svfiprintf_r+0x4e>
 801b7be:	460c      	mov	r4, r1
 801b7c0:	2001      	movs	r0, #1
 801b7c2:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7c6:	e7a5      	b.n	801b714 <_svfiprintf_r+0xd4>
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	f04f 0c0a 	mov.w	ip, #10
 801b7ce:	4619      	mov	r1, r3
 801b7d0:	3401      	adds	r4, #1
 801b7d2:	9305      	str	r3, [sp, #20]
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7da:	3a30      	subs	r2, #48	; 0x30
 801b7dc:	2a09      	cmp	r2, #9
 801b7de:	d903      	bls.n	801b7e8 <_svfiprintf_r+0x1a8>
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d0c5      	beq.n	801b770 <_svfiprintf_r+0x130>
 801b7e4:	9105      	str	r1, [sp, #20]
 801b7e6:	e7c3      	b.n	801b770 <_svfiprintf_r+0x130>
 801b7e8:	4604      	mov	r4, r0
 801b7ea:	2301      	movs	r3, #1
 801b7ec:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7f0:	e7f0      	b.n	801b7d4 <_svfiprintf_r+0x194>
 801b7f2:	ab03      	add	r3, sp, #12
 801b7f4:	9300      	str	r3, [sp, #0]
 801b7f6:	462a      	mov	r2, r5
 801b7f8:	4638      	mov	r0, r7
 801b7fa:	4b10      	ldr	r3, [pc, #64]	; (801b83c <_svfiprintf_r+0x1fc>)
 801b7fc:	a904      	add	r1, sp, #16
 801b7fe:	f3af 8000 	nop.w
 801b802:	1c42      	adds	r2, r0, #1
 801b804:	4606      	mov	r6, r0
 801b806:	d1d6      	bne.n	801b7b6 <_svfiprintf_r+0x176>
 801b808:	89ab      	ldrh	r3, [r5, #12]
 801b80a:	065b      	lsls	r3, r3, #25
 801b80c:	f53f af2c 	bmi.w	801b668 <_svfiprintf_r+0x28>
 801b810:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b812:	b01d      	add	sp, #116	; 0x74
 801b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b818:	ab03      	add	r3, sp, #12
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	462a      	mov	r2, r5
 801b81e:	4638      	mov	r0, r7
 801b820:	4b06      	ldr	r3, [pc, #24]	; (801b83c <_svfiprintf_r+0x1fc>)
 801b822:	a904      	add	r1, sp, #16
 801b824:	f000 f87c 	bl	801b920 <_printf_i>
 801b828:	e7eb      	b.n	801b802 <_svfiprintf_r+0x1c2>
 801b82a:	bf00      	nop
 801b82c:	0801d7e2 	.word	0x0801d7e2
 801b830:	0801d7e8 	.word	0x0801d7e8
 801b834:	0801d7ec 	.word	0x0801d7ec
 801b838:	00000000 	.word	0x00000000
 801b83c:	0801b589 	.word	0x0801b589

0801b840 <_printf_common>:
 801b840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b844:	4616      	mov	r6, r2
 801b846:	4699      	mov	r9, r3
 801b848:	688a      	ldr	r2, [r1, #8]
 801b84a:	690b      	ldr	r3, [r1, #16]
 801b84c:	4607      	mov	r7, r0
 801b84e:	4293      	cmp	r3, r2
 801b850:	bfb8      	it	lt
 801b852:	4613      	movlt	r3, r2
 801b854:	6033      	str	r3, [r6, #0]
 801b856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b85a:	460c      	mov	r4, r1
 801b85c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b860:	b10a      	cbz	r2, 801b866 <_printf_common+0x26>
 801b862:	3301      	adds	r3, #1
 801b864:	6033      	str	r3, [r6, #0]
 801b866:	6823      	ldr	r3, [r4, #0]
 801b868:	0699      	lsls	r1, r3, #26
 801b86a:	bf42      	ittt	mi
 801b86c:	6833      	ldrmi	r3, [r6, #0]
 801b86e:	3302      	addmi	r3, #2
 801b870:	6033      	strmi	r3, [r6, #0]
 801b872:	6825      	ldr	r5, [r4, #0]
 801b874:	f015 0506 	ands.w	r5, r5, #6
 801b878:	d106      	bne.n	801b888 <_printf_common+0x48>
 801b87a:	f104 0a19 	add.w	sl, r4, #25
 801b87e:	68e3      	ldr	r3, [r4, #12]
 801b880:	6832      	ldr	r2, [r6, #0]
 801b882:	1a9b      	subs	r3, r3, r2
 801b884:	42ab      	cmp	r3, r5
 801b886:	dc28      	bgt.n	801b8da <_printf_common+0x9a>
 801b888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b88c:	1e13      	subs	r3, r2, #0
 801b88e:	6822      	ldr	r2, [r4, #0]
 801b890:	bf18      	it	ne
 801b892:	2301      	movne	r3, #1
 801b894:	0692      	lsls	r2, r2, #26
 801b896:	d42d      	bmi.n	801b8f4 <_printf_common+0xb4>
 801b898:	4649      	mov	r1, r9
 801b89a:	4638      	mov	r0, r7
 801b89c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b8a0:	47c0      	blx	r8
 801b8a2:	3001      	adds	r0, #1
 801b8a4:	d020      	beq.n	801b8e8 <_printf_common+0xa8>
 801b8a6:	6823      	ldr	r3, [r4, #0]
 801b8a8:	68e5      	ldr	r5, [r4, #12]
 801b8aa:	f003 0306 	and.w	r3, r3, #6
 801b8ae:	2b04      	cmp	r3, #4
 801b8b0:	bf18      	it	ne
 801b8b2:	2500      	movne	r5, #0
 801b8b4:	6832      	ldr	r2, [r6, #0]
 801b8b6:	f04f 0600 	mov.w	r6, #0
 801b8ba:	68a3      	ldr	r3, [r4, #8]
 801b8bc:	bf08      	it	eq
 801b8be:	1aad      	subeq	r5, r5, r2
 801b8c0:	6922      	ldr	r2, [r4, #16]
 801b8c2:	bf08      	it	eq
 801b8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	bfc4      	itt	gt
 801b8cc:	1a9b      	subgt	r3, r3, r2
 801b8ce:	18ed      	addgt	r5, r5, r3
 801b8d0:	341a      	adds	r4, #26
 801b8d2:	42b5      	cmp	r5, r6
 801b8d4:	d11a      	bne.n	801b90c <_printf_common+0xcc>
 801b8d6:	2000      	movs	r0, #0
 801b8d8:	e008      	b.n	801b8ec <_printf_common+0xac>
 801b8da:	2301      	movs	r3, #1
 801b8dc:	4652      	mov	r2, sl
 801b8de:	4649      	mov	r1, r9
 801b8e0:	4638      	mov	r0, r7
 801b8e2:	47c0      	blx	r8
 801b8e4:	3001      	adds	r0, #1
 801b8e6:	d103      	bne.n	801b8f0 <_printf_common+0xb0>
 801b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 801b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8f0:	3501      	adds	r5, #1
 801b8f2:	e7c4      	b.n	801b87e <_printf_common+0x3e>
 801b8f4:	2030      	movs	r0, #48	; 0x30
 801b8f6:	18e1      	adds	r1, r4, r3
 801b8f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b8fc:	1c5a      	adds	r2, r3, #1
 801b8fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b902:	4422      	add	r2, r4
 801b904:	3302      	adds	r3, #2
 801b906:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b90a:	e7c5      	b.n	801b898 <_printf_common+0x58>
 801b90c:	2301      	movs	r3, #1
 801b90e:	4622      	mov	r2, r4
 801b910:	4649      	mov	r1, r9
 801b912:	4638      	mov	r0, r7
 801b914:	47c0      	blx	r8
 801b916:	3001      	adds	r0, #1
 801b918:	d0e6      	beq.n	801b8e8 <_printf_common+0xa8>
 801b91a:	3601      	adds	r6, #1
 801b91c:	e7d9      	b.n	801b8d2 <_printf_common+0x92>
	...

0801b920 <_printf_i>:
 801b920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b924:	7e0f      	ldrb	r7, [r1, #24]
 801b926:	4691      	mov	r9, r2
 801b928:	2f78      	cmp	r7, #120	; 0x78
 801b92a:	4680      	mov	r8, r0
 801b92c:	460c      	mov	r4, r1
 801b92e:	469a      	mov	sl, r3
 801b930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b936:	d807      	bhi.n	801b948 <_printf_i+0x28>
 801b938:	2f62      	cmp	r7, #98	; 0x62
 801b93a:	d80a      	bhi.n	801b952 <_printf_i+0x32>
 801b93c:	2f00      	cmp	r7, #0
 801b93e:	f000 80d9 	beq.w	801baf4 <_printf_i+0x1d4>
 801b942:	2f58      	cmp	r7, #88	; 0x58
 801b944:	f000 80a4 	beq.w	801ba90 <_printf_i+0x170>
 801b948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b94c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b950:	e03a      	b.n	801b9c8 <_printf_i+0xa8>
 801b952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b956:	2b15      	cmp	r3, #21
 801b958:	d8f6      	bhi.n	801b948 <_printf_i+0x28>
 801b95a:	a101      	add	r1, pc, #4	; (adr r1, 801b960 <_printf_i+0x40>)
 801b95c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b960:	0801b9b9 	.word	0x0801b9b9
 801b964:	0801b9cd 	.word	0x0801b9cd
 801b968:	0801b949 	.word	0x0801b949
 801b96c:	0801b949 	.word	0x0801b949
 801b970:	0801b949 	.word	0x0801b949
 801b974:	0801b949 	.word	0x0801b949
 801b978:	0801b9cd 	.word	0x0801b9cd
 801b97c:	0801b949 	.word	0x0801b949
 801b980:	0801b949 	.word	0x0801b949
 801b984:	0801b949 	.word	0x0801b949
 801b988:	0801b949 	.word	0x0801b949
 801b98c:	0801badb 	.word	0x0801badb
 801b990:	0801b9fd 	.word	0x0801b9fd
 801b994:	0801babd 	.word	0x0801babd
 801b998:	0801b949 	.word	0x0801b949
 801b99c:	0801b949 	.word	0x0801b949
 801b9a0:	0801bafd 	.word	0x0801bafd
 801b9a4:	0801b949 	.word	0x0801b949
 801b9a8:	0801b9fd 	.word	0x0801b9fd
 801b9ac:	0801b949 	.word	0x0801b949
 801b9b0:	0801b949 	.word	0x0801b949
 801b9b4:	0801bac5 	.word	0x0801bac5
 801b9b8:	682b      	ldr	r3, [r5, #0]
 801b9ba:	1d1a      	adds	r2, r3, #4
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	602a      	str	r2, [r5, #0]
 801b9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b9c8:	2301      	movs	r3, #1
 801b9ca:	e0a4      	b.n	801bb16 <_printf_i+0x1f6>
 801b9cc:	6820      	ldr	r0, [r4, #0]
 801b9ce:	6829      	ldr	r1, [r5, #0]
 801b9d0:	0606      	lsls	r6, r0, #24
 801b9d2:	f101 0304 	add.w	r3, r1, #4
 801b9d6:	d50a      	bpl.n	801b9ee <_printf_i+0xce>
 801b9d8:	680e      	ldr	r6, [r1, #0]
 801b9da:	602b      	str	r3, [r5, #0]
 801b9dc:	2e00      	cmp	r6, #0
 801b9de:	da03      	bge.n	801b9e8 <_printf_i+0xc8>
 801b9e0:	232d      	movs	r3, #45	; 0x2d
 801b9e2:	4276      	negs	r6, r6
 801b9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9e8:	230a      	movs	r3, #10
 801b9ea:	485e      	ldr	r0, [pc, #376]	; (801bb64 <_printf_i+0x244>)
 801b9ec:	e019      	b.n	801ba22 <_printf_i+0x102>
 801b9ee:	680e      	ldr	r6, [r1, #0]
 801b9f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b9f4:	602b      	str	r3, [r5, #0]
 801b9f6:	bf18      	it	ne
 801b9f8:	b236      	sxthne	r6, r6
 801b9fa:	e7ef      	b.n	801b9dc <_printf_i+0xbc>
 801b9fc:	682b      	ldr	r3, [r5, #0]
 801b9fe:	6820      	ldr	r0, [r4, #0]
 801ba00:	1d19      	adds	r1, r3, #4
 801ba02:	6029      	str	r1, [r5, #0]
 801ba04:	0601      	lsls	r1, r0, #24
 801ba06:	d501      	bpl.n	801ba0c <_printf_i+0xec>
 801ba08:	681e      	ldr	r6, [r3, #0]
 801ba0a:	e002      	b.n	801ba12 <_printf_i+0xf2>
 801ba0c:	0646      	lsls	r6, r0, #25
 801ba0e:	d5fb      	bpl.n	801ba08 <_printf_i+0xe8>
 801ba10:	881e      	ldrh	r6, [r3, #0]
 801ba12:	2f6f      	cmp	r7, #111	; 0x6f
 801ba14:	bf0c      	ite	eq
 801ba16:	2308      	moveq	r3, #8
 801ba18:	230a      	movne	r3, #10
 801ba1a:	4852      	ldr	r0, [pc, #328]	; (801bb64 <_printf_i+0x244>)
 801ba1c:	2100      	movs	r1, #0
 801ba1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ba22:	6865      	ldr	r5, [r4, #4]
 801ba24:	2d00      	cmp	r5, #0
 801ba26:	bfa8      	it	ge
 801ba28:	6821      	ldrge	r1, [r4, #0]
 801ba2a:	60a5      	str	r5, [r4, #8]
 801ba2c:	bfa4      	itt	ge
 801ba2e:	f021 0104 	bicge.w	r1, r1, #4
 801ba32:	6021      	strge	r1, [r4, #0]
 801ba34:	b90e      	cbnz	r6, 801ba3a <_printf_i+0x11a>
 801ba36:	2d00      	cmp	r5, #0
 801ba38:	d04d      	beq.n	801bad6 <_printf_i+0x1b6>
 801ba3a:	4615      	mov	r5, r2
 801ba3c:	fbb6 f1f3 	udiv	r1, r6, r3
 801ba40:	fb03 6711 	mls	r7, r3, r1, r6
 801ba44:	5dc7      	ldrb	r7, [r0, r7]
 801ba46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ba4a:	4637      	mov	r7, r6
 801ba4c:	42bb      	cmp	r3, r7
 801ba4e:	460e      	mov	r6, r1
 801ba50:	d9f4      	bls.n	801ba3c <_printf_i+0x11c>
 801ba52:	2b08      	cmp	r3, #8
 801ba54:	d10b      	bne.n	801ba6e <_printf_i+0x14e>
 801ba56:	6823      	ldr	r3, [r4, #0]
 801ba58:	07de      	lsls	r6, r3, #31
 801ba5a:	d508      	bpl.n	801ba6e <_printf_i+0x14e>
 801ba5c:	6923      	ldr	r3, [r4, #16]
 801ba5e:	6861      	ldr	r1, [r4, #4]
 801ba60:	4299      	cmp	r1, r3
 801ba62:	bfde      	ittt	le
 801ba64:	2330      	movle	r3, #48	; 0x30
 801ba66:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ba6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ba6e:	1b52      	subs	r2, r2, r5
 801ba70:	6122      	str	r2, [r4, #16]
 801ba72:	464b      	mov	r3, r9
 801ba74:	4621      	mov	r1, r4
 801ba76:	4640      	mov	r0, r8
 801ba78:	f8cd a000 	str.w	sl, [sp]
 801ba7c:	aa03      	add	r2, sp, #12
 801ba7e:	f7ff fedf 	bl	801b840 <_printf_common>
 801ba82:	3001      	adds	r0, #1
 801ba84:	d14c      	bne.n	801bb20 <_printf_i+0x200>
 801ba86:	f04f 30ff 	mov.w	r0, #4294967295
 801ba8a:	b004      	add	sp, #16
 801ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba90:	4834      	ldr	r0, [pc, #208]	; (801bb64 <_printf_i+0x244>)
 801ba92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ba96:	6829      	ldr	r1, [r5, #0]
 801ba98:	6823      	ldr	r3, [r4, #0]
 801ba9a:	f851 6b04 	ldr.w	r6, [r1], #4
 801ba9e:	6029      	str	r1, [r5, #0]
 801baa0:	061d      	lsls	r5, r3, #24
 801baa2:	d514      	bpl.n	801bace <_printf_i+0x1ae>
 801baa4:	07df      	lsls	r7, r3, #31
 801baa6:	bf44      	itt	mi
 801baa8:	f043 0320 	orrmi.w	r3, r3, #32
 801baac:	6023      	strmi	r3, [r4, #0]
 801baae:	b91e      	cbnz	r6, 801bab8 <_printf_i+0x198>
 801bab0:	6823      	ldr	r3, [r4, #0]
 801bab2:	f023 0320 	bic.w	r3, r3, #32
 801bab6:	6023      	str	r3, [r4, #0]
 801bab8:	2310      	movs	r3, #16
 801baba:	e7af      	b.n	801ba1c <_printf_i+0xfc>
 801babc:	6823      	ldr	r3, [r4, #0]
 801babe:	f043 0320 	orr.w	r3, r3, #32
 801bac2:	6023      	str	r3, [r4, #0]
 801bac4:	2378      	movs	r3, #120	; 0x78
 801bac6:	4828      	ldr	r0, [pc, #160]	; (801bb68 <_printf_i+0x248>)
 801bac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bacc:	e7e3      	b.n	801ba96 <_printf_i+0x176>
 801bace:	0659      	lsls	r1, r3, #25
 801bad0:	bf48      	it	mi
 801bad2:	b2b6      	uxthmi	r6, r6
 801bad4:	e7e6      	b.n	801baa4 <_printf_i+0x184>
 801bad6:	4615      	mov	r5, r2
 801bad8:	e7bb      	b.n	801ba52 <_printf_i+0x132>
 801bada:	682b      	ldr	r3, [r5, #0]
 801badc:	6826      	ldr	r6, [r4, #0]
 801bade:	1d18      	adds	r0, r3, #4
 801bae0:	6961      	ldr	r1, [r4, #20]
 801bae2:	6028      	str	r0, [r5, #0]
 801bae4:	0635      	lsls	r5, r6, #24
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	d501      	bpl.n	801baee <_printf_i+0x1ce>
 801baea:	6019      	str	r1, [r3, #0]
 801baec:	e002      	b.n	801baf4 <_printf_i+0x1d4>
 801baee:	0670      	lsls	r0, r6, #25
 801baf0:	d5fb      	bpl.n	801baea <_printf_i+0x1ca>
 801baf2:	8019      	strh	r1, [r3, #0]
 801baf4:	2300      	movs	r3, #0
 801baf6:	4615      	mov	r5, r2
 801baf8:	6123      	str	r3, [r4, #16]
 801bafa:	e7ba      	b.n	801ba72 <_printf_i+0x152>
 801bafc:	682b      	ldr	r3, [r5, #0]
 801bafe:	2100      	movs	r1, #0
 801bb00:	1d1a      	adds	r2, r3, #4
 801bb02:	602a      	str	r2, [r5, #0]
 801bb04:	681d      	ldr	r5, [r3, #0]
 801bb06:	6862      	ldr	r2, [r4, #4]
 801bb08:	4628      	mov	r0, r5
 801bb0a:	f000 f82f 	bl	801bb6c <memchr>
 801bb0e:	b108      	cbz	r0, 801bb14 <_printf_i+0x1f4>
 801bb10:	1b40      	subs	r0, r0, r5
 801bb12:	6060      	str	r0, [r4, #4]
 801bb14:	6863      	ldr	r3, [r4, #4]
 801bb16:	6123      	str	r3, [r4, #16]
 801bb18:	2300      	movs	r3, #0
 801bb1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb1e:	e7a8      	b.n	801ba72 <_printf_i+0x152>
 801bb20:	462a      	mov	r2, r5
 801bb22:	4649      	mov	r1, r9
 801bb24:	4640      	mov	r0, r8
 801bb26:	6923      	ldr	r3, [r4, #16]
 801bb28:	47d0      	blx	sl
 801bb2a:	3001      	adds	r0, #1
 801bb2c:	d0ab      	beq.n	801ba86 <_printf_i+0x166>
 801bb2e:	6823      	ldr	r3, [r4, #0]
 801bb30:	079b      	lsls	r3, r3, #30
 801bb32:	d413      	bmi.n	801bb5c <_printf_i+0x23c>
 801bb34:	68e0      	ldr	r0, [r4, #12]
 801bb36:	9b03      	ldr	r3, [sp, #12]
 801bb38:	4298      	cmp	r0, r3
 801bb3a:	bfb8      	it	lt
 801bb3c:	4618      	movlt	r0, r3
 801bb3e:	e7a4      	b.n	801ba8a <_printf_i+0x16a>
 801bb40:	2301      	movs	r3, #1
 801bb42:	4632      	mov	r2, r6
 801bb44:	4649      	mov	r1, r9
 801bb46:	4640      	mov	r0, r8
 801bb48:	47d0      	blx	sl
 801bb4a:	3001      	adds	r0, #1
 801bb4c:	d09b      	beq.n	801ba86 <_printf_i+0x166>
 801bb4e:	3501      	adds	r5, #1
 801bb50:	68e3      	ldr	r3, [r4, #12]
 801bb52:	9903      	ldr	r1, [sp, #12]
 801bb54:	1a5b      	subs	r3, r3, r1
 801bb56:	42ab      	cmp	r3, r5
 801bb58:	dcf2      	bgt.n	801bb40 <_printf_i+0x220>
 801bb5a:	e7eb      	b.n	801bb34 <_printf_i+0x214>
 801bb5c:	2500      	movs	r5, #0
 801bb5e:	f104 0619 	add.w	r6, r4, #25
 801bb62:	e7f5      	b.n	801bb50 <_printf_i+0x230>
 801bb64:	0801d7f3 	.word	0x0801d7f3
 801bb68:	0801d804 	.word	0x0801d804

0801bb6c <memchr>:
 801bb6c:	4603      	mov	r3, r0
 801bb6e:	b510      	push	{r4, lr}
 801bb70:	b2c9      	uxtb	r1, r1
 801bb72:	4402      	add	r2, r0
 801bb74:	4293      	cmp	r3, r2
 801bb76:	4618      	mov	r0, r3
 801bb78:	d101      	bne.n	801bb7e <memchr+0x12>
 801bb7a:	2000      	movs	r0, #0
 801bb7c:	e003      	b.n	801bb86 <memchr+0x1a>
 801bb7e:	7804      	ldrb	r4, [r0, #0]
 801bb80:	3301      	adds	r3, #1
 801bb82:	428c      	cmp	r4, r1
 801bb84:	d1f6      	bne.n	801bb74 <memchr+0x8>
 801bb86:	bd10      	pop	{r4, pc}

0801bb88 <_free_r>:
 801bb88:	b538      	push	{r3, r4, r5, lr}
 801bb8a:	4605      	mov	r5, r0
 801bb8c:	2900      	cmp	r1, #0
 801bb8e:	d040      	beq.n	801bc12 <_free_r+0x8a>
 801bb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb94:	1f0c      	subs	r4, r1, #4
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	bfb8      	it	lt
 801bb9a:	18e4      	addlt	r4, r4, r3
 801bb9c:	f000 f910 	bl	801bdc0 <__malloc_lock>
 801bba0:	4a1c      	ldr	r2, [pc, #112]	; (801bc14 <_free_r+0x8c>)
 801bba2:	6813      	ldr	r3, [r2, #0]
 801bba4:	b933      	cbnz	r3, 801bbb4 <_free_r+0x2c>
 801bba6:	6063      	str	r3, [r4, #4]
 801bba8:	6014      	str	r4, [r2, #0]
 801bbaa:	4628      	mov	r0, r5
 801bbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbb0:	f000 b90c 	b.w	801bdcc <__malloc_unlock>
 801bbb4:	42a3      	cmp	r3, r4
 801bbb6:	d908      	bls.n	801bbca <_free_r+0x42>
 801bbb8:	6820      	ldr	r0, [r4, #0]
 801bbba:	1821      	adds	r1, r4, r0
 801bbbc:	428b      	cmp	r3, r1
 801bbbe:	bf01      	itttt	eq
 801bbc0:	6819      	ldreq	r1, [r3, #0]
 801bbc2:	685b      	ldreq	r3, [r3, #4]
 801bbc4:	1809      	addeq	r1, r1, r0
 801bbc6:	6021      	streq	r1, [r4, #0]
 801bbc8:	e7ed      	b.n	801bba6 <_free_r+0x1e>
 801bbca:	461a      	mov	r2, r3
 801bbcc:	685b      	ldr	r3, [r3, #4]
 801bbce:	b10b      	cbz	r3, 801bbd4 <_free_r+0x4c>
 801bbd0:	42a3      	cmp	r3, r4
 801bbd2:	d9fa      	bls.n	801bbca <_free_r+0x42>
 801bbd4:	6811      	ldr	r1, [r2, #0]
 801bbd6:	1850      	adds	r0, r2, r1
 801bbd8:	42a0      	cmp	r0, r4
 801bbda:	d10b      	bne.n	801bbf4 <_free_r+0x6c>
 801bbdc:	6820      	ldr	r0, [r4, #0]
 801bbde:	4401      	add	r1, r0
 801bbe0:	1850      	adds	r0, r2, r1
 801bbe2:	4283      	cmp	r3, r0
 801bbe4:	6011      	str	r1, [r2, #0]
 801bbe6:	d1e0      	bne.n	801bbaa <_free_r+0x22>
 801bbe8:	6818      	ldr	r0, [r3, #0]
 801bbea:	685b      	ldr	r3, [r3, #4]
 801bbec:	4401      	add	r1, r0
 801bbee:	6011      	str	r1, [r2, #0]
 801bbf0:	6053      	str	r3, [r2, #4]
 801bbf2:	e7da      	b.n	801bbaa <_free_r+0x22>
 801bbf4:	d902      	bls.n	801bbfc <_free_r+0x74>
 801bbf6:	230c      	movs	r3, #12
 801bbf8:	602b      	str	r3, [r5, #0]
 801bbfa:	e7d6      	b.n	801bbaa <_free_r+0x22>
 801bbfc:	6820      	ldr	r0, [r4, #0]
 801bbfe:	1821      	adds	r1, r4, r0
 801bc00:	428b      	cmp	r3, r1
 801bc02:	bf01      	itttt	eq
 801bc04:	6819      	ldreq	r1, [r3, #0]
 801bc06:	685b      	ldreq	r3, [r3, #4]
 801bc08:	1809      	addeq	r1, r1, r0
 801bc0a:	6021      	streq	r1, [r4, #0]
 801bc0c:	6063      	str	r3, [r4, #4]
 801bc0e:	6054      	str	r4, [r2, #4]
 801bc10:	e7cb      	b.n	801bbaa <_free_r+0x22>
 801bc12:	bd38      	pop	{r3, r4, r5, pc}
 801bc14:	20003de4 	.word	0x20003de4

0801bc18 <sbrk_aligned>:
 801bc18:	b570      	push	{r4, r5, r6, lr}
 801bc1a:	4e0e      	ldr	r6, [pc, #56]	; (801bc54 <sbrk_aligned+0x3c>)
 801bc1c:	460c      	mov	r4, r1
 801bc1e:	6831      	ldr	r1, [r6, #0]
 801bc20:	4605      	mov	r5, r0
 801bc22:	b911      	cbnz	r1, 801bc2a <sbrk_aligned+0x12>
 801bc24:	f000 f8bc 	bl	801bda0 <_sbrk_r>
 801bc28:	6030      	str	r0, [r6, #0]
 801bc2a:	4621      	mov	r1, r4
 801bc2c:	4628      	mov	r0, r5
 801bc2e:	f000 f8b7 	bl	801bda0 <_sbrk_r>
 801bc32:	1c43      	adds	r3, r0, #1
 801bc34:	d00a      	beq.n	801bc4c <sbrk_aligned+0x34>
 801bc36:	1cc4      	adds	r4, r0, #3
 801bc38:	f024 0403 	bic.w	r4, r4, #3
 801bc3c:	42a0      	cmp	r0, r4
 801bc3e:	d007      	beq.n	801bc50 <sbrk_aligned+0x38>
 801bc40:	1a21      	subs	r1, r4, r0
 801bc42:	4628      	mov	r0, r5
 801bc44:	f000 f8ac 	bl	801bda0 <_sbrk_r>
 801bc48:	3001      	adds	r0, #1
 801bc4a:	d101      	bne.n	801bc50 <sbrk_aligned+0x38>
 801bc4c:	f04f 34ff 	mov.w	r4, #4294967295
 801bc50:	4620      	mov	r0, r4
 801bc52:	bd70      	pop	{r4, r5, r6, pc}
 801bc54:	20003de8 	.word	0x20003de8

0801bc58 <_malloc_r>:
 801bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc5c:	1ccd      	adds	r5, r1, #3
 801bc5e:	f025 0503 	bic.w	r5, r5, #3
 801bc62:	3508      	adds	r5, #8
 801bc64:	2d0c      	cmp	r5, #12
 801bc66:	bf38      	it	cc
 801bc68:	250c      	movcc	r5, #12
 801bc6a:	2d00      	cmp	r5, #0
 801bc6c:	4607      	mov	r7, r0
 801bc6e:	db01      	blt.n	801bc74 <_malloc_r+0x1c>
 801bc70:	42a9      	cmp	r1, r5
 801bc72:	d905      	bls.n	801bc80 <_malloc_r+0x28>
 801bc74:	230c      	movs	r3, #12
 801bc76:	2600      	movs	r6, #0
 801bc78:	603b      	str	r3, [r7, #0]
 801bc7a:	4630      	mov	r0, r6
 801bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc80:	4e2e      	ldr	r6, [pc, #184]	; (801bd3c <_malloc_r+0xe4>)
 801bc82:	f000 f89d 	bl	801bdc0 <__malloc_lock>
 801bc86:	6833      	ldr	r3, [r6, #0]
 801bc88:	461c      	mov	r4, r3
 801bc8a:	bb34      	cbnz	r4, 801bcda <_malloc_r+0x82>
 801bc8c:	4629      	mov	r1, r5
 801bc8e:	4638      	mov	r0, r7
 801bc90:	f7ff ffc2 	bl	801bc18 <sbrk_aligned>
 801bc94:	1c43      	adds	r3, r0, #1
 801bc96:	4604      	mov	r4, r0
 801bc98:	d14d      	bne.n	801bd36 <_malloc_r+0xde>
 801bc9a:	6834      	ldr	r4, [r6, #0]
 801bc9c:	4626      	mov	r6, r4
 801bc9e:	2e00      	cmp	r6, #0
 801bca0:	d140      	bne.n	801bd24 <_malloc_r+0xcc>
 801bca2:	6823      	ldr	r3, [r4, #0]
 801bca4:	4631      	mov	r1, r6
 801bca6:	4638      	mov	r0, r7
 801bca8:	eb04 0803 	add.w	r8, r4, r3
 801bcac:	f000 f878 	bl	801bda0 <_sbrk_r>
 801bcb0:	4580      	cmp	r8, r0
 801bcb2:	d13a      	bne.n	801bd2a <_malloc_r+0xd2>
 801bcb4:	6821      	ldr	r1, [r4, #0]
 801bcb6:	3503      	adds	r5, #3
 801bcb8:	1a6d      	subs	r5, r5, r1
 801bcba:	f025 0503 	bic.w	r5, r5, #3
 801bcbe:	3508      	adds	r5, #8
 801bcc0:	2d0c      	cmp	r5, #12
 801bcc2:	bf38      	it	cc
 801bcc4:	250c      	movcc	r5, #12
 801bcc6:	4638      	mov	r0, r7
 801bcc8:	4629      	mov	r1, r5
 801bcca:	f7ff ffa5 	bl	801bc18 <sbrk_aligned>
 801bcce:	3001      	adds	r0, #1
 801bcd0:	d02b      	beq.n	801bd2a <_malloc_r+0xd2>
 801bcd2:	6823      	ldr	r3, [r4, #0]
 801bcd4:	442b      	add	r3, r5
 801bcd6:	6023      	str	r3, [r4, #0]
 801bcd8:	e00e      	b.n	801bcf8 <_malloc_r+0xa0>
 801bcda:	6822      	ldr	r2, [r4, #0]
 801bcdc:	1b52      	subs	r2, r2, r5
 801bcde:	d41e      	bmi.n	801bd1e <_malloc_r+0xc6>
 801bce0:	2a0b      	cmp	r2, #11
 801bce2:	d916      	bls.n	801bd12 <_malloc_r+0xba>
 801bce4:	1961      	adds	r1, r4, r5
 801bce6:	42a3      	cmp	r3, r4
 801bce8:	6025      	str	r5, [r4, #0]
 801bcea:	bf18      	it	ne
 801bcec:	6059      	strne	r1, [r3, #4]
 801bcee:	6863      	ldr	r3, [r4, #4]
 801bcf0:	bf08      	it	eq
 801bcf2:	6031      	streq	r1, [r6, #0]
 801bcf4:	5162      	str	r2, [r4, r5]
 801bcf6:	604b      	str	r3, [r1, #4]
 801bcf8:	4638      	mov	r0, r7
 801bcfa:	f104 060b 	add.w	r6, r4, #11
 801bcfe:	f000 f865 	bl	801bdcc <__malloc_unlock>
 801bd02:	f026 0607 	bic.w	r6, r6, #7
 801bd06:	1d23      	adds	r3, r4, #4
 801bd08:	1af2      	subs	r2, r6, r3
 801bd0a:	d0b6      	beq.n	801bc7a <_malloc_r+0x22>
 801bd0c:	1b9b      	subs	r3, r3, r6
 801bd0e:	50a3      	str	r3, [r4, r2]
 801bd10:	e7b3      	b.n	801bc7a <_malloc_r+0x22>
 801bd12:	6862      	ldr	r2, [r4, #4]
 801bd14:	42a3      	cmp	r3, r4
 801bd16:	bf0c      	ite	eq
 801bd18:	6032      	streq	r2, [r6, #0]
 801bd1a:	605a      	strne	r2, [r3, #4]
 801bd1c:	e7ec      	b.n	801bcf8 <_malloc_r+0xa0>
 801bd1e:	4623      	mov	r3, r4
 801bd20:	6864      	ldr	r4, [r4, #4]
 801bd22:	e7b2      	b.n	801bc8a <_malloc_r+0x32>
 801bd24:	4634      	mov	r4, r6
 801bd26:	6876      	ldr	r6, [r6, #4]
 801bd28:	e7b9      	b.n	801bc9e <_malloc_r+0x46>
 801bd2a:	230c      	movs	r3, #12
 801bd2c:	4638      	mov	r0, r7
 801bd2e:	603b      	str	r3, [r7, #0]
 801bd30:	f000 f84c 	bl	801bdcc <__malloc_unlock>
 801bd34:	e7a1      	b.n	801bc7a <_malloc_r+0x22>
 801bd36:	6025      	str	r5, [r4, #0]
 801bd38:	e7de      	b.n	801bcf8 <_malloc_r+0xa0>
 801bd3a:	bf00      	nop
 801bd3c:	20003de4 	.word	0x20003de4

0801bd40 <_realloc_r>:
 801bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd44:	4680      	mov	r8, r0
 801bd46:	4614      	mov	r4, r2
 801bd48:	460e      	mov	r6, r1
 801bd4a:	b921      	cbnz	r1, 801bd56 <_realloc_r+0x16>
 801bd4c:	4611      	mov	r1, r2
 801bd4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd52:	f7ff bf81 	b.w	801bc58 <_malloc_r>
 801bd56:	b92a      	cbnz	r2, 801bd64 <_realloc_r+0x24>
 801bd58:	f7ff ff16 	bl	801bb88 <_free_r>
 801bd5c:	4625      	mov	r5, r4
 801bd5e:	4628      	mov	r0, r5
 801bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd64:	f000 f838 	bl	801bdd8 <_malloc_usable_size_r>
 801bd68:	4284      	cmp	r4, r0
 801bd6a:	4607      	mov	r7, r0
 801bd6c:	d802      	bhi.n	801bd74 <_realloc_r+0x34>
 801bd6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bd72:	d812      	bhi.n	801bd9a <_realloc_r+0x5a>
 801bd74:	4621      	mov	r1, r4
 801bd76:	4640      	mov	r0, r8
 801bd78:	f7ff ff6e 	bl	801bc58 <_malloc_r>
 801bd7c:	4605      	mov	r5, r0
 801bd7e:	2800      	cmp	r0, #0
 801bd80:	d0ed      	beq.n	801bd5e <_realloc_r+0x1e>
 801bd82:	42bc      	cmp	r4, r7
 801bd84:	4622      	mov	r2, r4
 801bd86:	4631      	mov	r1, r6
 801bd88:	bf28      	it	cs
 801bd8a:	463a      	movcs	r2, r7
 801bd8c:	f7ff fb92 	bl	801b4b4 <memcpy>
 801bd90:	4631      	mov	r1, r6
 801bd92:	4640      	mov	r0, r8
 801bd94:	f7ff fef8 	bl	801bb88 <_free_r>
 801bd98:	e7e1      	b.n	801bd5e <_realloc_r+0x1e>
 801bd9a:	4635      	mov	r5, r6
 801bd9c:	e7df      	b.n	801bd5e <_realloc_r+0x1e>
	...

0801bda0 <_sbrk_r>:
 801bda0:	b538      	push	{r3, r4, r5, lr}
 801bda2:	2300      	movs	r3, #0
 801bda4:	4d05      	ldr	r5, [pc, #20]	; (801bdbc <_sbrk_r+0x1c>)
 801bda6:	4604      	mov	r4, r0
 801bda8:	4608      	mov	r0, r1
 801bdaa:	602b      	str	r3, [r5, #0]
 801bdac:	f7e7 faf4 	bl	8003398 <_sbrk>
 801bdb0:	1c43      	adds	r3, r0, #1
 801bdb2:	d102      	bne.n	801bdba <_sbrk_r+0x1a>
 801bdb4:	682b      	ldr	r3, [r5, #0]
 801bdb6:	b103      	cbz	r3, 801bdba <_sbrk_r+0x1a>
 801bdb8:	6023      	str	r3, [r4, #0]
 801bdba:	bd38      	pop	{r3, r4, r5, pc}
 801bdbc:	20003dec 	.word	0x20003dec

0801bdc0 <__malloc_lock>:
 801bdc0:	4801      	ldr	r0, [pc, #4]	; (801bdc8 <__malloc_lock+0x8>)
 801bdc2:	f000 b811 	b.w	801bde8 <__retarget_lock_acquire_recursive>
 801bdc6:	bf00      	nop
 801bdc8:	20003df0 	.word	0x20003df0

0801bdcc <__malloc_unlock>:
 801bdcc:	4801      	ldr	r0, [pc, #4]	; (801bdd4 <__malloc_unlock+0x8>)
 801bdce:	f000 b80c 	b.w	801bdea <__retarget_lock_release_recursive>
 801bdd2:	bf00      	nop
 801bdd4:	20003df0 	.word	0x20003df0

0801bdd8 <_malloc_usable_size_r>:
 801bdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bddc:	1f18      	subs	r0, r3, #4
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	bfbc      	itt	lt
 801bde2:	580b      	ldrlt	r3, [r1, r0]
 801bde4:	18c0      	addlt	r0, r0, r3
 801bde6:	4770      	bx	lr

0801bde8 <__retarget_lock_acquire_recursive>:
 801bde8:	4770      	bx	lr

0801bdea <__retarget_lock_release_recursive>:
 801bdea:	4770      	bx	lr

0801bdec <_init>:
 801bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdee:	bf00      	nop
 801bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdf2:	bc08      	pop	{r3}
 801bdf4:	469e      	mov	lr, r3
 801bdf6:	4770      	bx	lr

0801bdf8 <_fini>:
 801bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdfa:	bf00      	nop
 801bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdfe:	bc08      	pop	{r3}
 801be00:	469e      	mov	lr, r3
 801be02:	4770      	bx	lr
