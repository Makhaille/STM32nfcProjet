
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc00  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0801bd3c  0801bd3c  0002bd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d750  0801d750  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  0801d750  0801d750  0002d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d758  0801d758  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d758  0801d758  0002d758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d75c  0801d75c  0002d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0801d760  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c5c  20000184  0801d8e4  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003de0  0801d8e4  00033de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000300a9  00000000  00000000  000301ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070ec  00000000  00000000  00060256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  00067348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d18  00000000  00000000  00069320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002295c  00000000  00000000  0006b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033564  00000000  00000000  0008d994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a93e4  00000000  00000000  000c0ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008534  00000000  00000000  0016a32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0801bd24 	.word	0x0801bd24

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0801bd24 	.word	0x0801bd24

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x40 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f023 030f 	bic.w	r3, r3, #15
 80004a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	f043 030c 	orr.w	r3, r3, #12
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004c0:	7bbb      	ldrb	r3, [r7, #14]
 80004c2:	f043 030c 	orr.w	r3, r3, #12
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d4:	f107 0208 	add.w	r2, r7, #8
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2304      	movs	r3, #4
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_cmd+0x5c>)
 80004e2:	f004 fdbb 	bl	800505c <HAL_I2C_Master_Transmit>
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200003a8 	.word	0x200003a8

080004f4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f023 030f 	bic.w	r3, r3, #15
 8000504:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	f043 030d 	orr.w	r3, r3, #13
 8000512:	b2db      	uxtb	r3, r3
 8000514:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f043 0309 	orr.w	r3, r3, #9
 800051c:	b2db      	uxtb	r3, r3
 800051e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	f043 030d 	orr.w	r3, r3, #13
 8000526:	b2db      	uxtb	r3, r3
 8000528:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f043 0309 	orr.w	r3, r3, #9
 8000530:	b2db      	uxtb	r3, r3
 8000532:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000534:	f107 0208 	add.w	r2, r7, #8
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2304      	movs	r3, #4
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <lcd_send_data+0x5c>)
 8000542:	f004 fd8b 	bl	800505c <HAL_I2C_Master_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200003a8 	.word	0x200003a8

08000554 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
    switch (row)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d003      	beq.n	800056c <lcd_put_cur+0x18>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d005      	beq.n	8000576 <lcd_put_cur+0x22>
 800056a:	e009      	b.n	8000580 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000572:	603b      	str	r3, [r7, #0]
            break;
 8000574:	e004      	b.n	8000580 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800057c:	603b      	str	r3, [r7, #0]
            break;
 800057e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff85 	bl	8000494 <lcd_send_cmd>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <lcd_init>:


void lcd_init (void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	//HAL_Delay(50);  // wait for >40ms
	lcd_send_cmd (0x30);
 8000596:	2030      	movs	r0, #48	; 0x30
 8000598:	f7ff ff7c 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800059c:	2005      	movs	r0, #5
 800059e:	f004 f8a1 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005a2:	2030      	movs	r0, #48	; 0x30
 80005a4:	f7ff ff76 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005a8:	2001      	movs	r0, #1
 80005aa:	f004 f89b 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ae:	2030      	movs	r0, #48	; 0x30
 80005b0:	f7ff ff70 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f004 f895 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005ba:	2020      	movs	r0, #32
 80005bc:	f7ff ff6a 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f004 f88f 	bl	80046e4 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005c6:	2028      	movs	r0, #40	; 0x28
 80005c8:	f7ff ff64 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f004 f889 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005d2:	2008      	movs	r0, #8
 80005d4:	f7ff ff5e 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f004 f883 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff ff58 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f004 f87d 	bl	80046e4 <HAL_Delay>
	HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 f87a 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005f0:	2006      	movs	r0, #6
 80005f2:	f7ff ff4f 	bl	8000494 <lcd_send_cmd>
	HAL_Delay(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f004 f874 	bl	80046e4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005fc:	200c      	movs	r0, #12
 80005fe:	f7ff ff49 	bl	8000494 <lcd_send_cmd>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}

08000606 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800060e:	e006      	b.n	800061e <lcd_send_string+0x18>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff6b 	bl	80004f4 <lcd_send_data>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f4      	bne.n	8000610 <lcd_send_string+0xa>
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <logUsartInit+0x18>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200003a4 	.word	0x200003a4

0800064c <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <logUsartTx+0x34>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 8000660:	2326      	movs	r3, #38	; 0x26
 8000662:	e008      	b.n	8000676 <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <logUsartTx+0x34>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	887a      	ldrh	r2, [r7, #2]
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f007 fdf5 	bl	800825e <HAL_UART_Transmit>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003a4 	.word	0x200003a4

08000684 <logUsart>:

int logUsart(const char* format, ...)
{
 8000684:	b40f      	push	{r0, r1, r2, r3}
 8000686:	b580      	push	{r7, lr}
 8000688:	b0c2      	sub	sp, #264	; 0x108
 800068a:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 800068c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000690:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 8000694:	4638      	mov	r0, r7
 8000696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800069a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	f01a feff 	bl	801b4a4 <vsniprintf>
 80006a6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd65 	bl	800017c <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	463b      	mov	r3, r7
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffc6 	bl	800064c <logUsartTx>
    return cnt;
 80006c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr

080006d4 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <hex2Str+0xe8>)
 80006e4:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <hex2Str+0xec>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	01db      	lsls	r3, r3, #7
 80006ec:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <hex2Str+0xf0>)
 80006ee:	4413      	add	r3, r2
 80006f0:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <hex2Str+0xec>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d103      	bne.n	800070a <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	e042      	b.n	8000790 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2b40      	cmp	r3, #64	; 0x40
 800070e:	bf28      	it	cs
 8000710:	2340      	movcs	r3, #64	; 0x40
 8000712:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8000714:	e01c      	b.n	8000750 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	091b      	lsrs	r3, r3, #4
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	441a      	add	r2, r3
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	1c59      	adds	r1, r3, #1
 800072a:	61b9      	str	r1, [r7, #24]
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	61fa      	str	r2, [r7, #28]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	441a      	add	r2, r3
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	1c59      	adds	r1, r3, #1
 8000744:	61b9      	str	r1, [r7, #24]
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	3301      	adds	r3, #1
 800074e:	75fb      	strb	r3, [r7, #23]
 8000750:	7dfa      	ldrb	r2, [r7, #23]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3b01      	subs	r3, #1
 8000756:	429a      	cmp	r2, r3
 8000758:	d3dd      	bcc.n	8000716 <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	091b      	lsrs	r3, r3, #4
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	441a      	add	r2, r3
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	1c59      	adds	r1, r3, #1
 800076e:	61b9      	str	r1, [r7, #24]
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	441a      	add	r2, r3
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	1c59      	adds	r1, r3, #1
 8000784:	61b9      	str	r1, [r7, #24]
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <hex2Str+0xec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <hex2Str+0xec>)
 800079a:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <hex2Str+0xec>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f003 0303 	and.w	r3, r3, #3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <hex2Str+0xec>)
 80007a8:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <hex2Str+0xf0>)
 80007b0:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	0801bd3c 	.word	0x0801bd3c
 80007c0:	200003a0 	.word	0x200003a0
 80007c4:	200001a0 	.word	0x200001a0

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f003 ff1b 	bl	8004608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f8a7 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f9ab 	bl	8000b30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f97f 	bl	8000adc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007de:	f000 f91d 	bl	8000a1c <MX_SPI1_Init>
  MX_UART4_Init();
 80007e2:	f000 f951 	bl	8000a88 <MX_UART4_Init>
  MX_I2C1_Init();
 80007e6:	f000 f8eb 	bl	80009c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize LCD*/
  lcd_init ();
 80007ea:	f7ff fed2 	bl	8000592 <lcd_init>
  lcd_put_cur(0, 0);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff feaf 	bl	8000554 <lcd_put_cur>
  lcd_send_string(strLcdLine1);
 80007f6:	4842      	ldr	r0, [pc, #264]	; (8000900 <main+0x138>)
 80007f8:	f7ff ff05 	bl	8000606 <lcd_send_string>
  lcd_put_cur(1, 0);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff fea8 	bl	8000554 <lcd_put_cur>
  lcd_send_string(strLcdLine2);
 8000804:	483f      	ldr	r0, [pc, #252]	; (8000904 <main+0x13c>)
 8000806:	f7ff fefe 	bl	8000606 <lcd_send_string>

  /* Initialize driver*/
  spiInit(&hspi1);
 800080a:	483f      	ldr	r0, [pc, #252]	; (8000908 <main+0x140>)
 800080c:	f002 fb8c 	bl	8002f28 <spiInit>

  /* Initialize log module */
  logUsartInit(&huart2);
 8000810:	483e      	ldr	r0, [pc, #248]	; (800090c <main+0x144>)
 8000812:	f7ff ff0d 	bl	8000630 <logUsartInit>

  platformLog("Welcome to the NFC enabler application\r\n");
 8000816:	483e      	ldr	r0, [pc, #248]	; (8000910 <main+0x148>)
 8000818:	f7ff ff34 	bl	8000684 <logUsart>

  if( !demoIni() )
 800081c:	f000 faba 	bl	8000d94 <demoIni>
 8000820:	4603      	mov	r3, r0
 8000822:	f083 0301 	eor.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d01f      	beq.n	800086c <main+0xa4>
    {
      /*
      * in case the rfal initalization failed signal it by flashing all LED
      * and stoping all operations
      */
      platformLog("Initialization failed..\r\n");
 800082c:	4839      	ldr	r0, [pc, #228]	; (8000914 <main+0x14c>)
 800082e:	f7ff ff29 	bl	8000684 <logUsart>
      while(1)
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	4838      	ldr	r0, [pc, #224]	; (8000918 <main+0x150>)
 8000838:	f004 fa91 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800083c:	2101      	movs	r1, #1
 800083e:	4837      	ldr	r0, [pc, #220]	; (800091c <main+0x154>)
 8000840:	f004 fa8d 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8000844:	2110      	movs	r1, #16
 8000846:	4834      	ldr	r0, [pc, #208]	; (8000918 <main+0x150>)
 8000848:	f004 fa89 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800084c:	2102      	movs	r1, #2
 800084e:	4832      	ldr	r0, [pc, #200]	; (8000918 <main+0x150>)
 8000850:	f004 fa85 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000854:	2110      	movs	r1, #16
 8000856:	4831      	ldr	r0, [pc, #196]	; (800091c <main+0x154>)
 8000858:	f004 fa81 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800085c:	2120      	movs	r1, #32
 800085e:	482f      	ldr	r0, [pc, #188]	; (800091c <main+0x154>)
 8000860:	f004 fa7d 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformDelay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f003 ff3d 	bl	80046e4 <HAL_Delay>
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800086a:	e7e2      	b.n	8000832 <main+0x6a>
      }
    }
    else
    {
      platformLog("Initialization succeeded..\r\n");
 800086c:	482c      	ldr	r0, [pc, #176]	; (8000920 <main+0x158>)
 800086e:	f7ff ff09 	bl	8000684 <logUsart>
      for (int i = 0; i < 6; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e01e      	b.n	80008b6 <main+0xee>
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	4826      	ldr	r0, [pc, #152]	; (8000918 <main+0x150>)
 800087e:	f004 fa6e 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000882:	2101      	movs	r1, #1
 8000884:	4825      	ldr	r0, [pc, #148]	; (800091c <main+0x154>)
 8000886:	f004 fa6a 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800088a:	2110      	movs	r1, #16
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <main+0x150>)
 800088e:	f004 fa66 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000892:	2102      	movs	r1, #2
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <main+0x150>)
 8000896:	f004 fa62 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800089a:	2110      	movs	r1, #16
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <main+0x154>)
 800089e:	f004 fa5e 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80008a2:	2120      	movs	r1, #32
 80008a4:	481d      	ldr	r0, [pc, #116]	; (800091c <main+0x154>)
 80008a6:	f004 fa5a 	bl	8004d5e <HAL_GPIO_TogglePin>
        platformDelay(200);
 80008aa:	20c8      	movs	r0, #200	; 0xc8
 80008ac:	f003 ff1a 	bl	80046e4 <HAL_Delay>
      for (int i = 0; i < 6; i++)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3301      	adds	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	dddd      	ble.n	8000878 <main+0xb0>
      }

      platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <main+0x154>)
 80008c2:	f004 fa34 	bl	8004d2e <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <main+0x150>)
 80008cc:	f004 fa2f 	bl	8004d2e <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2102      	movs	r1, #2
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <main+0x150>)
 80008d6:	f004 fa2a 	bl	8004d2e <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <main+0x154>)
 80008e0:	f004 fa25 	bl	8004d2e <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <main+0x154>)
 80008ea:	f004 fa20 	bl	8004d2e <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <main+0x150>)
 80008f6:	f004 fa1a 	bl	8004d2e <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 /* Run Demo Application */
	 demoCycle();
 80008fa:	f000 faa5 	bl	8000e48 <demoCycle>
 80008fe:	e7fc      	b.n	80008fa <main+0x132>
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	200003fc 	.word	0x200003fc
 800090c:	20000498 	.word	0x20000498
 8000910:	0801bd50 	.word	0x0801bd50
 8000914:	0801bd7c 	.word	0x0801bd7c
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400
 8000920:	0801bd98 	.word	0x0801bd98

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b092      	sub	sp, #72	; 0x48
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2234      	movs	r2, #52	; 0x34
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f01a fd82 	bl	801b43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <SystemClock_Config+0x98>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <SystemClock_Config+0x98>)
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2310      	movs	r3, #16
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800096a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000970:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4618      	mov	r0, r3
 800097c:	f006 fb36 	bl	8006fec <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000986:	f000 f99f 	bl	8000cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 fe52 	bl	800764c <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009ae:	f000 f98b 	bl	8000cc8 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3748      	adds	r7, #72	; 0x48
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40007000 	.word	0x40007000

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <MX_I2C1_Init+0x54>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x58>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009fe:	f004 f9e9 	bl	8004dd4 <HAL_I2C_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a08:	f000 f95e 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200003a8 	.word	0x200003a8
 8000a14:	40005400 	.word	0x40005400
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a50:	2218      	movs	r2, #24
 8000a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI1_Init+0x64>)
 8000a6e:	f007 f8b3 	bl	8007bd8 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 f926 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200003fc 	.word	0x200003fc
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_UART4_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_UART4_Init+0x4c>)
 8000ac0:	f007 fb80 	bl	80081c4 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f8fd 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000454 	.word	0x20000454
 8000ad8:	40004c00 	.word	0x40004c00

08000adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART2_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f007 fb56 	bl	80081c4 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 f8d3 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000498 	.word	0x20000498
 8000b2c:	40004400 	.word	0x40004400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a3e      	ldr	r2, [pc, #248]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a2c      	ldr	r2, [pc, #176]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_GPIO_Init+0x114>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000bac:	4826      	ldr	r0, [pc, #152]	; (8000c48 <MX_GPIO_Init+0x118>)
 8000bae:	f004 f8be 	bl	8004d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2171      	movs	r1, #113	; 0x71
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <MX_GPIO_Init+0x11c>)
 8000bb8:	f004 f8b9 	bl	8004d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <MX_GPIO_Init+0x120>)
 8000bd4:	f003 ff04 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_3911_Pin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <MX_GPIO_Init+0x118>)
 8000bee:	f003 fef7 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_F_Pin LED_B_Pin LED_FIELD_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8000bf2:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480f      	ldr	r0, [pc, #60]	; (8000c48 <MX_GPIO_Init+0x118>)
 8000c0c:	f003 fee8 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_V_Pin LED_AP2P_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8000c10:	2371      	movs	r3, #113	; 0x71
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_GPIO_Init+0x11c>)
 8000c28:	f003 feda 	bl	80049e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2006      	movs	r0, #6
 8000c32:	f003 fe50 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c36:	2006      	movs	r0, #6
 8000c38:	f003 fe69 	bl	800490e <HAL_NVIC_EnableIRQ>

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40020800 	.word	0x40020800

08000c54 <ringbell>:
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}

void ringbell(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
	uint8_t Track2 = 0x11;
 8000c5a:	2311      	movs	r3, #17
 8000c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t volume = 0x1E;
 8000c5e:	231e      	movs	r3, #30
 8000c60:	73bb      	strb	r3, [r7, #14]
	uint8_t play2[6] = {0xAA,0x07,0x02,0x00,Track2,Track2+0xB3};
 8000c62:	23aa      	movs	r3, #170	; 0xaa
 8000c64:	723b      	strb	r3, [r7, #8]
 8000c66:	2307      	movs	r3, #7
 8000c68:	727b      	strb	r3, [r7, #9]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	72bb      	strb	r3, [r7, #10]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	72fb      	strb	r3, [r7, #11]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	733b      	strb	r3, [r7, #12]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	3b4d      	subs	r3, #77	; 0x4d
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	737b      	strb	r3, [r7, #13]
	uint8_t soundlvl[5] = {0xAA,0x13,0x01,volume,volume+0xBE};
 8000c7e:	23aa      	movs	r3, #170	; 0xaa
 8000c80:	703b      	strb	r3, [r7, #0]
 8000c82:	2313      	movs	r3, #19
 8000c84:	707b      	strb	r3, [r7, #1]
 8000c86:	2301      	movs	r3, #1
 8000c88:	70bb      	strb	r3, [r7, #2]
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3b42      	subs	r3, #66	; 0x42
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart4, play2, 6, 500);
 8000c96:	f107 0108 	add.w	r1, r7, #8
 8000c9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <ringbell+0x70>)
 8000ca2:	f007 fadc 	bl	800825e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, soundlvl, 5, 500);
 8000ca6:	4639      	mov	r1, r7
 8000ca8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cac:	2205      	movs	r2, #5
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <ringbell+0x70>)
 8000cb0:	f007 fad5 	bl	800825e <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb8:	f003 fd14 	bl	80046e4 <HAL_Delay>
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000454 	.word	0x20000454

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <checkUserButton+0x88>)
 8000cde:	f004 f80f 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d036      	beq.n	8000d56 <checkUserButton+0x82>
    {
        ndefDemoFeature++;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <checkUserButton+0x8c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <checkUserButton+0x8c>)
 8000cf2:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <checkUserButton+0x8c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <checkUserButton+0x8c>)
 8000d00:	701a      	strb	r2, [r3, #0]

        ledsOff();
 8000d02:	f001 fb33 	bl	800236c <ledsOff>
        ndefDemoPrevFeature = ndefDemoFeature;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <checkUserButton+0x8c>)
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <checkUserButton+0x90>)
 8000d0c:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <checkUserButton+0x8c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <checkUserButton+0x94>)
 8000d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <checkUserButton+0x98>)
 8000d1e:	f7ff fcb1 	bl	8000684 <logUsart>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8000d22:	bf00      	nop
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <checkUserButton+0x88>)
 8000d2a:	f003 ffe9 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d1f7      	bne.n	8000d24 <checkUserButton+0x50>
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <checkUserButton+0x8c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00c      	beq.n	8000d56 <checkUserButton+0x82>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8000d3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d40:	f003 fc3e 	bl	80045c0 <timerCalculateTimer>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <checkUserButton+0x9c>)
 8000d48:	6013      	str	r3, [r2, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000d4a:	20fa      	movs	r0, #250	; 0xfa
 8000d4c:	f003 fc38 	bl	80045c0 <timerCalculateTimer>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <checkUserButton+0xa0>)
 8000d54:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	20001040 	.word	0x20001040
 8000d64:	200000a7 	.word	0x200000a7
 8000d68:	20000064 	.word	0x20000064
 8000d6c:	0801be08 	.word	0x0801be08
 8000d70:	20003044 	.word	0x20003044
 8000d74:	20003048 	.word	0x20003048

08000d78 <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    //uint32_t i;
    
    //platformLog("Use the User button to cycle among the different modes:\r\n");

    platformLog("%s\r\n", ndefDemoFeatureDescription[0]);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <ndefShowDemoUsage+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <ndefShowDemoUsage+0x18>)
 8000d84:	f7ff fc7e 	bl	8000684 <logUsart>
//    {
//        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
//    }
    //platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
#endif /* NDEF_FEATURE_ALL */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000064 	.word	0x20000064
 8000d90:	0801be08 	.word	0x0801be08

08000d94 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
//        verbose = true;
//    }
//#endif
    ndefShowDemoUsage();
 8000d9a:	f7ff ffed 	bl	8000d78 <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8000d9e:	f010 fd29 	bl	80117f4 <rfalNfcInitialize>
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d140      	bne.n	8000e2e <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <demoIni+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <demoIni+0xa4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <demoIni+0xa4>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <demoIni+0xa4>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <demoIni+0xa4>)
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <demoIni+0xa8>)
 8000dca:	3308      	adds	r3, #8
 8000dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dce:	c303      	stmia	r3!, {r0, r1}
 8000dd0:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <demoIni+0xa4>)
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <demoIni+0xac>)
 8000dd6:	f103 0512 	add.w	r5, r3, #18
 8000dda:	4614      	mov	r4, r2
 8000ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dde:	6028      	str	r0, [r5, #0]
 8000de0:	6069      	str	r1, [r5, #4]
 8000de2:	60aa      	str	r2, [r5, #8]
 8000de4:	60eb      	str	r3, [r5, #12]
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <demoIni+0xa4>)
 8000dec:	2214      	movs	r2, #20
 8000dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <demoIni+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <demoIni+0xa4>)
 8000dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dfe:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <demoIni+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <demoIni+0xa4>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <demoIni+0xa4>)
 8000e12:	222f      	movs	r2, #47	; 0x2f
 8000e14:	805a      	strh	r2, [r3, #2]
#if defined(ST25R3911) || defined(ST25R3916)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <demoIni+0xa4>)
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <demoIni+0xa4>)
 8000e22:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <demoIni+0xb0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
        return true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <demoIni+0x9c>
    }
    return false;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	200005e4 	.word	0x200005e4
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	2000001c 	.word	0x2000001c
 8000e44:	20000668 	.word	0x20000668

08000e48 <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09a      	sub	sp, #104	; 0x68
 8000e4c:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000e58:	f010 fdc6 	bl	80119e8 <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8000e5c:	4ba8      	ldr	r3, [pc, #672]	; (8001100 <demoCycle+0x2b8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00d      	beq.n	8000e80 <demoCycle+0x38>
 8000e64:	4ba7      	ldr	r3, [pc, #668]	; (8001104 <demoCycle+0x2bc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fbb7 	bl	80045dc <timerIsExpired>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8000e74:	48a4      	ldr	r0, [pc, #656]	; (8001108 <demoCycle+0x2c0>)
 8000e76:	f7ff fc05 	bl	8000684 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8000e7a:	4ba1      	ldr	r3, [pc, #644]	; (8001100 <demoCycle+0x2b8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8000e80:	4b9f      	ldr	r3, [pc, #636]	; (8001100 <demoCycle+0x2b8>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4ba1      	ldr	r3, [pc, #644]	; (800110c <demoCycle+0x2c4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d00d      	beq.n	8000ea8 <demoCycle+0x60>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8000e8c:	4b9c      	ldr	r3, [pc, #624]	; (8001100 <demoCycle+0x2b8>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	4b9e      	ldr	r3, [pc, #632]	; (800110c <demoCycle+0x2c4>)
 8000e92:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000e94:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <demoCycle+0x2b8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b9d      	ldr	r3, [pc, #628]	; (8001110 <demoCycle+0x2c8>)
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	489c      	ldr	r0, [pc, #624]	; (8001114 <demoCycle+0x2cc>)
 8000ea4:	f7ff fbee 	bl	8000684 <logUsart>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8000ea8:	4b95      	ldr	r3, [pc, #596]	; (8001100 <demoCycle+0x2b8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d025      	beq.n	8000efc <demoCycle+0xb4>
    {
        if( platformTimerIsExpired(timerLed) )
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <demoCycle+0x2d0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fb91 	bl	80045dc <timerIsExpired>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d014      	beq.n	8000eea <demoCycle+0xa2>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000ec0:	20fa      	movs	r0, #250	; 0xfa
 8000ec2:	f003 fb7d 	bl	80045c0 <timerCalculateTimer>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a93      	ldr	r2, [pc, #588]	; (8001118 <demoCycle+0x2d0>)
 8000eca:	6013      	str	r3, [r2, #0]
            ledOn = !ledOn;
 8000ecc:	4b93      	ldr	r3, [pc, #588]	; (800111c <demoCycle+0x2d4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b8d      	ldr	r3, [pc, #564]	; (800111c <demoCycle+0x2d4>)
 8000ee8:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8000eea:	4b8c      	ldr	r3, [pc, #560]	; (800111c <demoCycle+0x2d4>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <demoCycle+0xb0>
        {
            ledsOn();
 8000ef2:	f001 fa13 	bl	800231c <ledsOn>
 8000ef6:	e001      	b.n	8000efc <demoCycle+0xb4>
        }
        else
        {
            ledsOff();
 8000ef8:	f001 fa38 	bl	800236c <ledsOff>
        }
    }
    
    checkUserButton();
 8000efc:	f7ff feea 	bl	8000cd4 <checkUserButton>
    
    switch( state )
 8000f00:	4b87      	ldr	r3, [pc, #540]	; (8001120 <demoCycle+0x2d8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d002      	beq.n	8000f0e <demoCycle+0xc6>
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d00c      	beq.n	8000f26 <demoCycle+0xde>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8000f0c:	e23d      	b.n	800138a <demoCycle+0x542>
            ledsOff();
 8000f0e:	f001 fa2d 	bl	800236c <ledsOff>
            rfalNfcDeactivate( false );
 8000f12:	2000      	movs	r0, #0
 8000f14:	f010 fd16 	bl	8011944 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 8000f18:	4882      	ldr	r0, [pc, #520]	; (8001124 <demoCycle+0x2dc>)
 8000f1a:	f010 fc87 	bl	801182c <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8000f1e:	4b80      	ldr	r3, [pc, #512]	; (8001120 <demoCycle+0x2d8>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	701a      	strb	r2, [r3, #0]
            break;
 8000f24:	e231      	b.n	800138a <demoCycle+0x542>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8000f26:	f010 fd2f 	bl	8011988 <rfalNfcGetState>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b1d      	cmp	r3, #29
 8000f2e:	f240 822b 	bls.w	8001388 <demoCycle+0x540>
 8000f32:	f010 fd29 	bl	8011988 <rfalNfcGetState>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b21      	cmp	r3, #33	; 0x21
 8000f3a:	f200 8225 	bhi.w	8001388 <demoCycle+0x540>
                rfalNfcGetActiveDevice( &nfcDevice );
 8000f3e:	487a      	ldr	r0, [pc, #488]	; (8001128 <demoCycle+0x2e0>)
 8000f40:	f010 fd2c 	bl	801199c <rfalNfcGetActiveDevice>
                ledsOff();
 8000f44:	f001 fa12 	bl	800236c <ledsOff>
                platformDelay(50);
 8000f48:	2032      	movs	r0, #50	; 0x32
 8000f4a:	f003 fbcb 	bl	80046e4 <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8000f4e:	4b6f      	ldr	r3, [pc, #444]	; (800110c <demoCycle+0x2c4>)
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8000f54:	4b74      	ldr	r3, [pc, #464]	; (8001128 <demoCycle+0x2e0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	f200 8207 	bhi.w	800136e <demoCycle+0x526>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <demoCycle+0x120>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	080010b9 	.word	0x080010b9
 8000f70:	080011ad 	.word	0x080011ad
 8000f74:	0800127b 	.word	0x0800127b
 8000f78:	08001317 	.word	0x08001317
 8000f7c:	08001341 	.word	0x08001341
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	4869      	ldr	r0, [pc, #420]	; (800112c <demoCycle+0x2e4>)
 8000f86:	f003 fed2 	bl	8004d2e <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <demoCycle+0x2e0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b60      	cmp	r3, #96	; 0x60
 8000f92:	d033      	beq.n	8000ffc <demoCycle+0x1b4>
 8000f94:	2b60      	cmp	r3, #96	; 0x60
 8000f96:	dc43      	bgt.n	8001020 <demoCycle+0x1d8>
 8000f98:	2b40      	cmp	r3, #64	; 0x40
 8000f9a:	d02f      	beq.n	8000ffc <demoCycle+0x1b4>
 8000f9c:	2b40      	cmp	r3, #64	; 0x40
 8000f9e:	dc3f      	bgt.n	8001020 <demoCycle+0x1d8>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d002      	beq.n	8000faa <demoCycle+0x162>
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d012      	beq.n	8000fce <demoCycle+0x186>
 8000fa8:	e03a      	b.n	8001020 <demoCycle+0x1d8>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000faa:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <demoCycle+0x2e0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <demoCycle+0x2e0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7f1b      	ldrb	r3, [r3, #28]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f7ff fb8b 	bl	80006d4 <hex2Str>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	485b      	ldr	r0, [pc, #364]	; (8001130 <demoCycle+0x2e8>)
 8000fc4:	f7ff fb5e 	bl	8000684 <logUsart>
                                rfalNfcaPollerSleep();
 8000fc8:	f014 ff70 	bl	8015eac <rfalNfcaPollerSleep>
                                break;
 8000fcc:	e03f      	b.n	800104e <demoCycle+0x206>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <demoCycle+0x2e0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	699a      	ldr	r2, [r3, #24]
 8000fd4:	4b54      	ldr	r3, [pc, #336]	; (8001128 <demoCycle+0x2e0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	7f1b      	ldrb	r3, [r3, #28]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f7ff fb79 	bl	80006d4 <hex2Str>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4853      	ldr	r0, [pc, #332]	; (8001134 <demoCycle+0x2ec>)
 8000fe8:	f7ff fb4c 	bl	8000684 <logUsart>
                                demoNdef(nfcDevice);
 8000fec:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <demoCycle+0x2e0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 faf3 	bl	80015dc <demoNdef>
                                rfalIsoDepDeselect(); 
 8000ff6:	f00f fcc7 	bl	8010988 <rfalIsoDepDeselect>
                                break;
 8000ffa:	e028      	b.n	800104e <demoCycle+0x206>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <demoCycle+0x2e0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <demoCycle+0x2e0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	7f1b      	ldrb	r3, [r3, #28]
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f7ff fb62 	bl	80006d4 <hex2Str>
 8001010:	4603      	mov	r3, r0
 8001012:	4619      	mov	r1, r3
 8001014:	4848      	ldr	r0, [pc, #288]	; (8001138 <demoCycle+0x2f0>)
 8001016:	f7ff fb35 	bl	8000684 <logUsart>
                                demoP2P();
 800101a:	f000 f9cf 	bl	80013bc <demoP2P>
                                break;
 800101e:	e016      	b.n	800104e <demoCycle+0x206>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <demoCycle+0x2e0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <demoCycle+0x2e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	7f1b      	ldrb	r3, [r3, #28]
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f7ff fb50 	bl	80006d4 <hex2Str>
 8001034:	4603      	mov	r3, r0
 8001036:	4619      	mov	r1, r3
 8001038:	4840      	ldr	r0, [pc, #256]	; (800113c <demoCycle+0x2f4>)
 800103a:	f7ff fb23 	bl	8000684 <logUsart>
                                demoNdef(nfcDevice);
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <demoCycle+0x2e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 faca 	bl	80015dc <demoNdef>
                                rfalNfcaPollerSleep();
 8001048:	f014 ff30 	bl	8015eac <rfalNfcaPollerSleep>
                                break;
 800104c:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 800104e:	483c      	ldr	r0, [pc, #240]	; (8001140 <demoCycle+0x2f8>)
 8001050:	f7ff fb18 	bl	8000684 <logUsart>
                        rfalNfcaPollerInitialize();
 8001054:	f014 fb62 	bl	801571c <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8001058:	e024      	b.n	80010a4 <demoCycle+0x25c>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <demoCycle+0x2e0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d106      	bne.n	8001072 <demoCycle+0x22a>
 8001064:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	2b0c      	cmp	r3, #12
 800106e:	f040 8180 	bne.w	8001372 <demoCycle+0x52a>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <demoCycle+0x2e0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8001078:	2b01      	cmp	r3, #1
 800107a:	d00e      	beq.n	800109a <demoCycle+0x252>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <demoCycle+0x2e0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1d98      	adds	r0, r3, #6
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <demoCycle+0x2e0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800108c:	4619      	mov	r1, r3
 800108e:	f014 fe9b 	bl	8015dc8 <rfalNfcaPollerSelect>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f040 816c 	bne.w	8001372 <demoCycle+0x52a>
                            rfalNfcaPollerSleep();
 800109a:	f014 ff07 	bl	8015eac <rfalNfcaPollerSleep>
                            platformDelay(130);
 800109e:	2082      	movs	r0, #130	; 0x82
 80010a0:	f003 fb20 	bl	80046e4 <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 80010a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a8:	4619      	mov	r1, r3
 80010aa:	2052      	movs	r0, #82	; 0x52
 80010ac:	f014 fb5a 	bl	8015764 <rfalNfcaPollerCheckPresence>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0d1      	beq.n	800105a <demoCycle+0x212>
                        break;
 80010b6:	e15c      	b.n	8001372 <demoCycle+0x52a>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <demoCycle+0x2e0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <demoCycle+0x2e0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	7f1b      	ldrb	r3, [r3, #28]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f7ff fb04 	bl	80006d4 <hex2Str>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <demoCycle+0x2fc>)
 80010d2:	f7ff fad7 	bl	8000684 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	481b      	ldr	r0, [pc, #108]	; (8001148 <demoCycle+0x300>)
 80010dc:	f003 fe27 	bl	8004d2e <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <demoCycle+0x2e0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7b1b      	ldrb	r3, [r3, #12]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d02e      	beq.n	800114c <demoCycle+0x304>
                            demoNdef(nfcDevice);
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <demoCycle+0x2e0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa72 	bl	80015dc <demoNdef>
                            rfalIsoDepDeselect();
 80010f8:	f00f fc46 	bl	8010988 <rfalIsoDepDeselect>
 80010fc:	e02c      	b.n	8001158 <demoCycle+0x310>
 80010fe:	bf00      	nop
 8001100:	20001040 	.word	0x20001040
 8001104:	20003044 	.word	0x20003044
 8001108:	0801be10 	.word	0x0801be10
 800110c:	200000a7 	.word	0x200000a7
 8001110:	20000064 	.word	0x20000064
 8001114:	0801be08 	.word	0x0801be08
 8001118:	20003048 	.word	0x20003048
 800111c:	2000304c 	.word	0x2000304c
 8001120:	20000668 	.word	0x20000668
 8001124:	200005e4 	.word	0x200005e4
 8001128:	20003050 	.word	0x20003050
 800112c:	40020400 	.word	0x40020400
 8001130:	0801be38 	.word	0x0801be38
 8001134:	0801be6c 	.word	0x0801be6c
 8001138:	0801be9c 	.word	0x0801be9c
 800113c:	0801bec8 	.word	0x0801bec8
 8001140:	0801bef0 	.word	0x0801bef0
 8001144:	0801bf2c 	.word	0x0801bf2c
 8001148:	40020000 	.word	0x40020000
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 800114c:	4b91      	ldr	r3, [pc, #580]	; (8001394 <demoCycle+0x54c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3303      	adds	r3, #3
 8001152:	4618      	mov	r0, r3
 8001154:	f014 ff90 	bl	8016078 <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001158:	488f      	ldr	r0, [pc, #572]	; (8001398 <demoCycle+0x550>)
 800115a:	f7ff fa93 	bl	8000684 <logUsart>
                        rfalNfcbPollerInitialize();
 800115e:	f014 fef9 	bl	8015f54 <rfalNfcbPollerInitialize>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8001162:	e015      	b.n	8001190 <demoCycle+0x348>
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8001164:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <demoCycle+0x54c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1cd9      	adds	r1, r3, #3
 800116a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800116e:	3301      	adds	r3, #1
 8001170:	2204      	movs	r2, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f01a f92a 	bl	801b3cc <memcmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <demoCycle+0x360>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 800117e:	4b85      	ldr	r3, [pc, #532]	; (8001394 <demoCycle+0x54c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3303      	adds	r3, #3
 8001184:	4618      	mov	r0, r3
 8001186:	f014 ff77 	bl	8016078 <rfalNfcbPollerSleep>
                            platformDelay(130);
 800118a:	2082      	movs	r0, #130	; 0x82
 800118c:	f003 faaa 	bl	80046e4 <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8001190:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001194:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001198:	2100      	movs	r1, #0
 800119a:	2008      	movs	r0, #8
 800119c:	f014 ff06 	bl	8015fac <rfalNfcbPollerCheckPresence>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0de      	beq.n	8001164 <demoCycle+0x31c>
                        break;
 80011a6:	e0e5      	b.n	8001374 <demoCycle+0x52c>
                                break;
 80011a8:	bf00      	nop
                        break;
 80011aa:	e0e3      	b.n	8001374 <demoCycle+0x52c>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 80011ac:	4b79      	ldr	r3, [pc, #484]	; (8001394 <demoCycle+0x54c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	78db      	ldrb	r3, [r3, #3]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d116      	bne.n	80011e4 <demoCycle+0x39c>
 80011b6:	4b77      	ldr	r3, [pc, #476]	; (8001394 <demoCycle+0x54c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	2bfe      	cmp	r3, #254	; 0xfe
 80011be:	d111      	bne.n	80011e4 <demoCycle+0x39c>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80011c0:	4b74      	ldr	r3, [pc, #464]	; (8001394 <demoCycle+0x54c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699a      	ldr	r2, [r3, #24]
 80011c6:	4b73      	ldr	r3, [pc, #460]	; (8001394 <demoCycle+0x54c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7f1b      	ldrb	r3, [r3, #28]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f7ff fa80 	bl	80006d4 <hex2Str>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4870      	ldr	r0, [pc, #448]	; (800139c <demoCycle+0x554>)
 80011da:	f7ff fa53 	bl	8000684 <logUsart>
                            demoP2P();
 80011de:	f000 f8ed 	bl	80013bc <demoP2P>
 80011e2:	e013      	b.n	800120c <demoCycle+0x3c4>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 80011e4:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <demoCycle+0x54c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <demoCycle+0x54c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	7f1b      	ldrb	r3, [r3, #28]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff fa6e 	bl	80006d4 <hex2Str>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4868      	ldr	r0, [pc, #416]	; (80013a0 <demoCycle+0x558>)
 80011fe:	f7ff fa41 	bl	8000684 <logUsart>
                            demoNdef(nfcDevice);
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <demoCycle+0x54c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9e8 	bl	80015dc <demoNdef>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	4864      	ldr	r0, [pc, #400]	; (80013a4 <demoCycle+0x55c>)
 8001212:	f003 fd8c 	bl	8004d2e <HAL_GPIO_WritePin>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001216:	4860      	ldr	r0, [pc, #384]	; (8001398 <demoCycle+0x550>)
 8001218:	f7ff fa34 	bl	8000684 <logUsart>
                        devCnt = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        rfalNfcfPollerInitialize( RFAL_BR_212 );
 8001222:	2001      	movs	r0, #1
 8001224:	f015 fa6a 	bl	80166fc <rfalNfcfPollerInitialize>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001228:	e012      	b.n	8001250 <demoCycle+0x408>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	3301      	adds	r3, #1
 8001230:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 8001232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001234:	1c58      	adds	r0, r3, #1
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <demoCycle+0x54c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3303      	adds	r3, #3
 800123c:	2208      	movs	r2, #8
 800123e:	4619      	mov	r1, r3
 8001240:	f01a f8c4 	bl	801b3cc <memcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <demoCycle+0x42e>
                            platformDelay(130);
 800124a:	2082      	movs	r0, #130	; 0x82
 800124c:	f003 fa4a 	bl	80046e4 <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001250:	f107 0220 	add.w	r2, r7, #32
 8001254:	f107 031f 	add.w	r3, r7, #31
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	2200      	movs	r2, #0
 8001264:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001268:	2000      	movs	r0, #0
 800126a:	f015 fa77 	bl	801675c <rfalNfcfPollerPoll>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0da      	beq.n	800122a <demoCycle+0x3e2>
                        break;
 8001274:	e07e      	b.n	8001374 <demoCycle+0x52c>
                                break;
 8001276:	bf00      	nop
                        break;
 8001278:	e07c      	b.n	8001374 <demoCycle+0x52c>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <demoCycle+0x54c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6999      	ldr	r1, [r3, #24]
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <demoCycle+0x54c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	7f1b      	ldrb	r3, [r3, #28]
 8001286:	461a      	mov	r2, r3
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4618      	mov	r0, r3
 800128c:	f01a f8ae 	bl	801b3ec <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	3307      	adds	r3, #7
 8001298:	65bb      	str	r3, [r7, #88]	; 0x58
 800129a:	e00f      	b.n	80012bc <demoCycle+0x474>
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80012a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80012aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80012b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3eb      	bcc.n	800129c <demoCycle+0x454>
                            platformLog(" test ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2108      	movs	r1, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa03 	bl	80006d4 <hex2Str>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <demoCycle+0x560>)
 80012d4:	f7ff f9d6 	bl	8000684 <logUsart>
                            demoNdef(nfcDevice);
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <demoCycle+0x54c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f97d 	bl	80015dc <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <demoCycle+0x550>)
 80012e4:	f7ff f9ce 	bl	8000684 <logUsart>
                            rfalNfcvPollerInitialize();
 80012e8:	f015 fd82 	bl	8016df0 <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80012ec:	e002      	b.n	80012f4 <demoCycle+0x4ac>
                                platformDelay(130);
 80012ee:	2082      	movs	r0, #130	; 0x82
 80012f0:	f003 f9f8 	bl	80046e4 <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <demoCycle+0x54c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1cda      	adds	r2, r3, #3
 80012fa:	f107 0110 	add.w	r1, r7, #16
 80012fe:	f107 030e 	add.w	r3, r7, #14
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	460b      	mov	r3, r1
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	2020      	movs	r0, #32
 800130a:	f015 fdb6 	bl	8016e7a <rfalNfcvPollerInventory>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ec      	beq.n	80012ee <demoCycle+0x4a6>
                        break;
 8001314:	e02e      	b.n	8001374 <demoCycle+0x52c>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <demoCycle+0x54c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <demoCycle+0x54c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	7f1b      	ldrb	r3, [r3, #28]
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff f9d5 	bl	80006d4 <hex2Str>
 800132a:	4603      	mov	r3, r0
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <demoCycle+0x564>)
 8001330:	f7ff f9a8 	bl	8000684 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001334:	2201      	movs	r2, #1
 8001336:	2110      	movs	r1, #16
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <demoCycle+0x55c>)
 800133a:	f003 fcf8 	bl	8004d2e <HAL_GPIO_WritePin>
                        break;
 800133e:	e019      	b.n	8001374 <demoCycle+0x52c>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <demoCycle+0x54c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <demoCycle+0x54c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f7ff f9c0 	bl	80006d4 <hex2Str>
 8001354:	4603      	mov	r3, r0
 8001356:	4619      	mov	r1, r3
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <demoCycle+0x568>)
 800135a:	f7ff f993 	bl	8000684 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800135e:	2201      	movs	r2, #1
 8001360:	2120      	movs	r1, #32
 8001362:	4814      	ldr	r0, [pc, #80]	; (80013b4 <demoCycle+0x56c>)
 8001364:	f003 fce3 	bl	8004d2e <HAL_GPIO_WritePin>
                        demoP2P();
 8001368:	f000 f828 	bl	80013bc <demoP2P>
                        break;
 800136c:	e002      	b.n	8001374 <demoCycle+0x52c>
                        break;
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <demoCycle+0x52c>
                        break;
 8001372:	bf00      	nop
                rfalNfcDeactivate( false );
 8001374:	2000      	movs	r0, #0
 8001376:	f010 fae5 	bl	8011944 <rfalNfcDeactivate>
                platformDelay( 500 );
 800137a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137e:	f003 f9b1 	bl	80046e4 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <demoCycle+0x570>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
            break;
 8001388:	bf00      	nop
    }
}
 800138a:	bf00      	nop
 800138c:	3760      	adds	r7, #96	; 0x60
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20003050 	.word	0x20003050
 8001398:	0801bef0 	.word	0x0801bef0
 800139c:	0801bf54 	.word	0x0801bf54
 80013a0:	0801bf80 	.word	0x0801bf80
 80013a4:	40020000 	.word	0x40020000
 80013a8:	0801bfa4 	.word	0x0801bfa4
 80013ac:	0801bfd0 	.word	0x0801bfd0
 80013b0:	0801bff0 	.word	0x0801bff0
 80013b4:	40020400 	.word	0x40020400
 80013b8:	20000668 	.word	0x20000668

080013bc <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b0d5      	sub	sp, #340	; 0x154
 80013c0:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 80013c2:	4865      	ldr	r0, [pc, #404]	; (8001558 <demoP2P+0x19c>)
 80013c4:	f7ff f95e 	bl	8000684 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 80013c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80013cc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	211a      	movs	r1, #26
 80013d8:	4860      	ldr	r0, [pc, #384]	; (800155c <demoP2P+0x1a0>)
 80013da:	f000 f8db 	bl	8001594 <demoTransceiveBlocking>
 80013de:	4603      	mov	r3, r0
 80013e0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80013e4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <demoP2P+0x38>
    {
        platformLog("failed.");
 80013ec:	485c      	ldr	r0, [pc, #368]	; (8001560 <demoP2P+0x1a4>)
 80013ee:	f7ff f949 	bl	8000684 <logUsart>
        return;
 80013f2:	e0ac      	b.n	800154e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 80013f4:	485b      	ldr	r0, [pc, #364]	; (8001564 <demoP2P+0x1a8>)
 80013f6:	f7ff f945 	bl	8000684 <logUsart>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 80013fa:	463b      	mov	r3, r7
 80013fc:	4a5a      	ldr	r2, [pc, #360]	; (8001568 <demoP2P+0x1ac>)
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f009 fc7b 	bl	800acfc <ndefRtdUri>
 8001406:	4603      	mov	r3, r0
 8001408:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 800140c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001410:	463b      	mov	r3, r7
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f009 fd5f 	bl	800aed8 <ndefRtdUriToRecord>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001422:	4313      	orrs	r3, r2
 8001424:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 8001428:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800142c:	4618      	mov	r0, r3
 800142e:	f007 f8f5 	bl	800861c <ndefMessageInit>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800143a:	4313      	orrs	r3, r2
 800143c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8001440:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001444:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f007 f934 	bl	80086b8 <ndefMessageAppend>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001458:	4313      	orrs	r3, r2
 800145a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <demoP2P+0x1b0>)
 8001460:	4a43      	ldr	r2, [pc, #268]	; (8001570 <demoP2P+0x1b4>)
 8001462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001466:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <demoP2P+0x1b8>)
 800146c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 8001470:	23f7      	movs	r3, #247	; 0xf7
 8001472:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 8001476:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800147a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f007 f9c7 	bl	8008814 <ndefMessageEncode>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800148e:	4313      	orrs	r3, r2
 8001490:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 8001494:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <demoP2P+0x1b0>)
 800149c:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <demoP2P+0x1b0>)
 80014a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 80014a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014a8:	3309      	adds	r3, #9
 80014aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 80014ae:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <demoP2P+0x108>
    {
        platformLog("NDEF message creation failed\r\n", err);
 80014b6:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014ba:	4619      	mov	r1, r3
 80014bc:	482e      	ldr	r0, [pc, #184]	; (8001578 <demoP2P+0x1bc>)
 80014be:	f7ff f8e1 	bl	8000684 <logUsart>
        return;
 80014c2:	e044      	b.n	800154e <demoP2P+0x192>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 80014c4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80014c8:	2201      	movs	r2, #1
 80014ca:	4619      	mov	r1, r3
 80014cc:	482b      	ldr	r0, [pc, #172]	; (800157c <demoP2P+0x1c0>)
 80014ce:	f001 fc57 	bl	8002d80 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.ST.com .. ");
 80014d2:	482b      	ldr	r0, [pc, #172]	; (8001580 <demoP2P+0x1c4>)
 80014d4:	f7ff f8d6 	bl	8000684 <logUsart>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 80014d8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80014dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014e0:	b299      	uxth	r1, r3
 80014e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014e6:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80014ea:	f04f 34ff 	mov.w	r4, #4294967295
 80014ee:	9400      	str	r4, [sp, #0]
 80014f0:	f000 f850 	bl	8001594 <demoTransceiveBlocking>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80014fa:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <demoP2P+0x14e>
    {
        platformLog("failed.");
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <demoP2P+0x1a4>)
 8001504:	f7ff f8be 	bl	8000684 <logUsart>
        return;
 8001508:	e021      	b.n	800154e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 800150a:	4816      	ldr	r0, [pc, #88]	; (8001564 <demoP2P+0x1a8>)
 800150c:	f7ff f8ba 	bl	8000684 <logUsart>


    platformLog(" Device present, maintaining connection ");
 8001510:	481c      	ldr	r0, [pc, #112]	; (8001584 <demoP2P+0x1c8>)
 8001512:	f7ff f8b7 	bl	8000684 <logUsart>
    while(err == ERR_NONE) 
 8001516:	e013      	b.n	8001540 <demoP2P+0x184>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 8001518:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800151c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	9100      	str	r1, [sp, #0]
 8001526:	2102      	movs	r1, #2
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <demoP2P+0x1cc>)
 800152a:	f000 f833 	bl	8001594 <demoTransceiveBlocking>
 800152e:	4603      	mov	r3, r0
 8001530:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <demoP2P+0x1d0>)
 8001536:	f7ff f8a5 	bl	8000684 <logUsart>
        platformDelay(50);
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f003 f8d2 	bl	80046e4 <HAL_Delay>
    while(err == ERR_NONE) 
 8001540:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0e7      	beq.n	8001518 <demoP2P+0x15c>
    }
    platformLog("\r\n Device removed.\r\n");
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <demoP2P+0x1d4>)
 800154a:	f7ff f89b 	bl	8000684 <logUsart>
}
 800154e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	0801c01c 	.word	0x0801c01c
 800155c:	20000030 	.word	0x20000030
 8001560:	0801c034 	.word	0x0801c034
 8001564:	0801c03c 	.word	0x0801c03c
 8001568:	2000004c 	.word	0x2000004c
 800156c:	200004e4 	.word	0x200004e4
 8001570:	0801d010 	.word	0x0801d010
 8001574:	200004ed 	.word	0x200004ed
 8001578:	0801c04c 	.word	0x0801c04c
 800157c:	0801c06c 	.word	0x0801c06c
 8001580:	0801c088 	.word	0x0801c088
 8001584:	0801c0a8 	.word	0x0801c0a8
 8001588:	200004e0 	.word	0x200004e0
 800158c:	0801c0d4 	.word	0x0801c0d4
 8001590:	0801c0d8 	.word	0x0801c0d8

08001594 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	460b      	mov	r3, r1
 80015a2:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80015a4:	8979      	ldrh	r1, [r7, #10]
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f010 fbfe 	bl	8011db0 <rfalNfcDataExchangeStart>
 80015b4:	4603      	mov	r3, r0
 80015b6:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 80015be:	f010 fa13 	bl	80119e8 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80015c2:	f010 fd0f 	bl	8011fe4 <rfalNfcDataExchangeGetStatus>
 80015c6:	4603      	mov	r3, r0
 80015c8:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 80015ca:	8afb      	ldrh	r3, [r7, #22]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d0f6      	beq.n	80015be <demoTransceiveBlocking+0x2a>
    }
    return err;
 80015d0:	8afb      	ldrh	r3, [r7, #22]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015e8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80015ec:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 80015ee:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015f2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	48b4      	ldr	r0, [pc, #720]	; (80018cc <demoNdef+0x2f0>)
 80015fa:	f009 fd3d 	bl	800b078 <ndefPollerContextInitialization>
 80015fe:	4603      	mov	r3, r0
 8001600:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001604:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <demoNdef+0x3e>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 800160c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001610:	4619      	mov	r1, r3
 8001612:	48af      	ldr	r0, [pc, #700]	; (80018d0 <demoNdef+0x2f4>)
 8001614:	f7ff f836 	bl	8000684 <logUsart>
        return;
 8001618:	e27a      	b.n	8001b10 <demoNdef+0x534>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 800161a:	4bae      	ldr	r3, [pc, #696]	; (80018d4 <demoNdef+0x2f8>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001624:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <demoNdef+0x66>
    {
        ndefDumpSysInfo(&ndefCtx);
 800163c:	48a3      	ldr	r0, [pc, #652]	; (80018cc <demoNdef+0x2f0>)
 800163e:	f000 fc25 	bl	8001e8c <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8001642:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001646:	4619      	mov	r1, r3
 8001648:	48a0      	ldr	r0, [pc, #640]	; (80018cc <demoNdef+0x2f0>)
 800164a:	f009 fd43 	bl	800b0d4 <ndefPollerNdefDetect>
 800164e:	4603      	mov	r3, r0
 8001650:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8001654:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00a      	beq.n	8001672 <demoNdef+0x96>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 800165c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001660:	4619      	mov	r1, r3
 8001662:	489d      	ldr	r0, [pc, #628]	; (80018d8 <demoNdef+0x2fc>)
 8001664:	f7ff f80e 	bl	8000684 <logUsart>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 8001668:	4b9c      	ldr	r3, [pc, #624]	; (80018dc <demoNdef+0x300>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d01b      	beq.n	80016a8 <demoNdef+0xcc>
        {
            return;
 8001670:	e24e      	b.n	8001b10 <demoNdef+0x534>
        }
    }
    else
    {
        platformLog("%s NDEF is detected.\r\n", ndefStates[info.state]);
 8001672:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8001676:	461a      	mov	r2, r3
 8001678:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <demoNdef+0x304>)
 800167a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167e:	4619      	mov	r1, r3
 8001680:	4898      	ldr	r0, [pc, #608]	; (80018e4 <demoNdef+0x308>)
 8001682:	f7fe ffff 	bl	8000684 <logUsart>
        ndefCCDump(&ndefCtx);
 8001686:	4891      	ldr	r0, [pc, #580]	; (80018cc <demoNdef+0x2f0>)
 8001688:	f000 fbae 	bl	8001de8 <ndefCCDump>

        if( verbose )
 800168c:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <demoNdef+0x2f8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <demoNdef+0xcc>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 8001694:	4b8d      	ldr	r3, [pc, #564]	; (80018cc <demoNdef+0x2f0>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4a8c      	ldr	r2, [pc, #560]	; (80018cc <demoNdef+0x2f0>)
 800169c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80016a0:	4619      	mov	r1, r3
 80016a2:	4891      	ldr	r0, [pc, #580]	; (80018e8 <demoNdef+0x30c>)
 80016a4:	f7fe ffee 	bl	8000684 <logUsart>
        }
    }

    switch( ndefDemoFeature )
 80016a8:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <demoNdef+0x300>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	f200 8228 	bhi.w	8001b02 <demoNdef+0x526>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <demoNdef+0xdc>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	0800178d 	.word	0x0800178d
 80016c0:	08001919 	.word	0x08001919
 80016c4:	08001aab 	.word	0x08001aab
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 80016c8:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	f000 821e 	beq.w	8001b0e <demoNdef+0x532>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 80016d2:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	4984      	ldr	r1, [pc, #528]	; (80018ec <demoNdef+0x310>)
 80016dc:	487b      	ldr	r0, [pc, #492]	; (80018cc <demoNdef+0x2f0>)
 80016de:	f009 fd16 	bl	800b10e <ndefPollerReadRawMessage>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80016e8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <demoNdef+0x122>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 80016f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80016f4:	4619      	mov	r1, r3
 80016f6:	487e      	ldr	r0, [pc, #504]	; (80018f0 <demoNdef+0x314>)
 80016f8:	f7fe ffc4 	bl	8000684 <logUsart>
                return;
 80016fc:	e208      	b.n	8001b10 <demoNdef+0x534>
            }
            if( verbose )
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <demoNdef+0x2f8>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00e      	beq.n	8001724 <demoNdef+0x148>
            {
                bufRawMessage.buffer = rawMessageBuf;
 8001706:	4b79      	ldr	r3, [pc, #484]	; (80018ec <demoNdef+0x310>)
 8001708:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 800170c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001710:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <demoNdef+0x2f8>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800171c:	4619      	mov	r1, r3
 800171e:	4875      	ldr	r0, [pc, #468]	; (80018f4 <demoNdef+0x318>)
 8001720:	f001 fb2e 	bl	8002d80 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <demoNdef+0x310>)
 8001726:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 800172a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800172e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 8001732:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001736:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f007 f810 	bl	8008762 <ndefMessageDecode>
 8001742:	4603      	mov	r3, r0
 8001744:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001748:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <demoNdef+0x182>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8001750:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001754:	4619      	mov	r1, r3
 8001756:	4868      	ldr	r0, [pc, #416]	; (80018f8 <demoNdef+0x31c>)
 8001758:	f7fe ff94 	bl	8000684 <logUsart>
                return;
 800175c:	e1d8      	b.n	8001b10 <demoNdef+0x534>
            }
            err = ndefMessageDump(&message, verbose);
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <demoNdef+0x2f8>)
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 ff35 	bl	80025d8 <ndefMessageDump>
 800176e:	4603      	mov	r3, r0
 8001770:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001774:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 81c6 	beq.w	8001b0a <demoNdef+0x52e>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 800177e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001782:	4619      	mov	r1, r3
 8001784:	485d      	ldr	r0, [pc, #372]	; (80018fc <demoNdef+0x320>)
 8001786:	f7fe ff7d 	bl	8000684 <logUsart>
                return;
 800178a:	e1c1      	b.n	8001b10 <demoNdef+0x534>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <demoNdef+0x300>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 8001792:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001796:	4618      	mov	r0, r3
 8001798:	f006 ff40 	bl	800861c <ndefMessageInit>
 800179c:	4603      	mov	r3, r0
 800179e:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 80017a2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017a6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80017aa:	4a55      	ldr	r2, [pc, #340]	; (8001900 <demoNdef+0x324>)
 80017ac:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 80017ae:	4854      	ldr	r0, [pc, #336]	; (8001900 <demoNdef+0x324>)
 80017b0:	f7fe fce4 	bl	800017c <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017bc:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80017c0:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 80017c2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017c6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <demoNdef+0x328>)
 80017cc:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 80017ce:	484d      	ldr	r0, [pc, #308]	; (8001904 <demoNdef+0x328>)
 80017d0:	f7fe fcd4 	bl	800017c <strlen>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80017da:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80017de:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80017e8:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80017ec:	2100      	movs	r1, #0
 80017ee:	f009 f887 	bl	800a900 <ndefRtdText>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80017fa:	4313      	orrs	r3, r2
 80017fc:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 8001800:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001804:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f009 f99c 	bl	800ab48 <ndefRtdTextToRecord>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001818:	4313      	orrs	r3, r2
 800181a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 800181e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001822:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f006 ff45 	bl	80086b8 <ndefMessageAppend>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001836:	4313      	orrs	r3, r2
 8001838:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800183c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <demoNdef+0x276>
            {
                platformLog("Message creation failed\r\n", err);
 8001844:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001848:	4619      	mov	r1, r3
 800184a:	482f      	ldr	r0, [pc, #188]	; (8001908 <demoNdef+0x32c>)
 800184c:	f7fe ff1a 	bl	8000684 <logUsart>
                return;
 8001850:	e15e      	b.n	8001b10 <demoNdef+0x534>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8001852:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001856:	4619      	mov	r1, r3
 8001858:	481c      	ldr	r0, [pc, #112]	; (80018cc <demoNdef+0x2f0>)
 800185a:	f009 fd2f 	bl	800b2bc <ndefPollerWriteMessage>
 800185e:	4603      	mov	r3, r0
 8001860:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001864:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <demoNdef+0x29e>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 800186c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001870:	4619      	mov	r1, r3
 8001872:	4826      	ldr	r0, [pc, #152]	; (800190c <demoNdef+0x330>)
 8001874:	f7fe ff06 	bl	8000684 <logUsart>
                return;
 8001878:	e14a      	b.n	8001b10 <demoNdef+0x534>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <demoNdef+0x334>)
 800187c:	f7fe ff02 	bl	8000684 <logUsart>
            if( verbose )
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <demoNdef+0x2f8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01d      	beq.n	80018c4 <demoNdef+0x2e8>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <demoNdef+0x310>)
 800188a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 8001896:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800189a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 ffb7 	bl	8008814 <ndefMessageEncode>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 80018ac:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <demoNdef+0x2e8>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <demoNdef+0x2f8>)
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80018bc:	4619      	mov	r1, r3
 80018be:	4815      	ldr	r0, [pc, #84]	; (8001914 <demoNdef+0x338>)
 80018c0:	f001 fa5e 	bl	8002d80 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 80018c4:	f000 fd0e 	bl	80022e4 <LedNotificationWriteDone>
            break;
 80018c8:	e120      	b.n	8001b0c <demoNdef+0x530>
 80018ca:	bf00      	nop
 80018cc:	2000066c 	.word	0x2000066c
 80018d0:	0801c0f0 	.word	0x0801c0f0
 80018d4:	20001041 	.word	0x20001041
 80018d8:	0801c134 	.word	0x0801c134
 80018dc:	20001040 	.word	0x20001040
 80018e0:	20000054 	.word	0x20000054
 80018e4:	0801c16c 	.word	0x0801c16c
 80018e8:	0801c184 	.word	0x0801c184
 80018ec:	20001044 	.word	0x20001044
 80018f0:	0801c1a0 	.word	0x0801c1a0
 80018f4:	0801c1e4 	.word	0x0801c1e4
 80018f8:	0801c1f4 	.word	0x0801c1f4
 80018fc:	0801c238 	.word	0x0801c238
 8001900:	20000094 	.word	0x20000094
 8001904:	2000007c 	.word	0x2000007c
 8001908:	0801c278 	.word	0x0801c278
 800190c:	0801c294 	.word	0x0801c294
 8001910:	0801c2d4 	.word	0x0801c2d4
 8001914:	0801c2f0 	.word	0x0801c2f0

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 8001918:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <demoNdef+0x53c>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 800191e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fe7a 	bl	800861c <ndefMessageInit>
 8001928:	4603      	mov	r3, r0
 800192a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 800192e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001932:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001936:	4a79      	ldr	r2, [pc, #484]	; (8001b1c <demoNdef+0x540>)
 8001938:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 800193a:	4878      	ldr	r0, [pc, #480]	; (8001b1c <demoNdef+0x540>)
 800193c:	f7fe fc1e 	bl	800017c <strlen>
 8001940:	4602      	mov	r2, r0
 8001942:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001946:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800194a:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 800194c:	f107 0214 	add.w	r2, r7, #20
 8001950:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001954:	2101      	movs	r1, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f009 f9d0 	bl	800acfc <ndefRtdUri>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001964:	4313      	orrs	r3, r2
 8001966:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 800196a:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800196e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f009 faaf 	bl	800aed8 <ndefRtdUriToRecord>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001982:	4313      	orrs	r3, r2
 8001984:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 8001988:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800198c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8001990:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <demoNdef+0x544>)
 8001992:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 8001994:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001998:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800199c:	220e      	movs	r2, #14
 800199e:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 80019a0:	f107 020c 	add.w	r2, r7, #12
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 fab8 	bl	800af20 <ndefRtdAar>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80019b8:	4313      	orrs	r3, r2
 80019ba:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 80019be:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f009 fb2b 	bl	800b024 <ndefRtdAarToRecord>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 80019dc:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80019e0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f006 fe66 	bl	80086b8 <ndefMessageAppend>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80019f4:	4313      	orrs	r3, r2
 80019f6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 80019fa:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80019fe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 fe57 	bl	80086b8 <ndefMessageAppend>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 8001a18:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <demoNdef+0x548>)
 8001a1a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 8001a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a22:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 8001a26:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8001a2a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f006 feef 	bl	8008814 <ndefMessageEncode>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001a44:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <demoNdef+0x47e>
            {
                platformLog("Raw message creation failed\r\n", err);
 8001a4c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a50:	4619      	mov	r1, r3
 8001a52:	4835      	ldr	r0, [pc, #212]	; (8001b28 <demoNdef+0x54c>)
 8001a54:	f7fe fe16 	bl	8000684 <logUsart>
                return;
 8001a58:	e05a      	b.n	8001b10 <demoNdef+0x534>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 8001a5a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001a5e:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001a62:	4619      	mov	r1, r3
 8001a64:	4831      	ldr	r0, [pc, #196]	; (8001b2c <demoNdef+0x550>)
 8001a66:	f009 fb73 	bl	800b150 <ndefPollerWriteRawMessage>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001a70:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <demoNdef+0x4aa>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 8001a78:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	482c      	ldr	r0, [pc, #176]	; (8001b30 <demoNdef+0x554>)
 8001a80:	f7fe fe00 	bl	8000684 <logUsart>
                return;
 8001a84:	e044      	b.n	8001b10 <demoNdef+0x534>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 8001a86:	482b      	ldr	r0, [pc, #172]	; (8001b34 <demoNdef+0x558>)
 8001a88:	f7fe fdfc 	bl	8000684 <logUsart>
            if( verbose )
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <demoNdef+0x55c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <demoNdef+0x4c8>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <demoNdef+0x55c>)
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <demoNdef+0x560>)
 8001aa0:	f001 f96e 	bl	8002d80 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 8001aa4:	f000 fc1e 	bl	80022e4 <LedNotificationWriteDone>
            break;
 8001aa8:	e030      	b.n	8001b0c <demoNdef+0x530>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <demoNdef+0x53c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 8001ab0:	481e      	ldr	r0, [pc, #120]	; (8001b2c <demoNdef+0x550>)
 8001ab2:	f000 fbdf 	bl	8002274 <ndefIsSTTag>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <demoNdef+0x4ee>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 8001ac2:	481f      	ldr	r0, [pc, #124]	; (8001b40 <demoNdef+0x564>)
 8001ac4:	f7fe fdde 	bl	8000684 <logUsart>
                return;
 8001ac8:	e022      	b.n	8001b10 <demoNdef+0x534>
            }
            platformLog("Formatting Tag...\r\n");
 8001aca:	481e      	ldr	r0, [pc, #120]	; (8001b44 <demoNdef+0x568>)
 8001acc:	f7fe fdda 	bl	8000684 <logUsart>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <demoNdef+0x550>)
 8001ad6:	f009 fb5a 	bl	800b18e <ndefPollerTagFormat>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8001ae0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <demoNdef+0x51a>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 8001ae8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001aec:	4619      	mov	r1, r3
 8001aee:	4816      	ldr	r0, [pc, #88]	; (8001b48 <demoNdef+0x56c>)
 8001af0:	f7fe fdc8 	bl	8000684 <logUsart>
                return;
 8001af4:	e00c      	b.n	8001b10 <demoNdef+0x534>
            }
            platformLog("Tag formatted\r\n");
 8001af6:	4815      	ldr	r0, [pc, #84]	; (8001b4c <demoNdef+0x570>)
 8001af8:	f7fe fdc4 	bl	8000684 <logUsart>
            LedNotificationWriteDone();
 8001afc:	f000 fbf2 	bl	80022e4 <LedNotificationWriteDone>
            break;
 8001b00:	e004      	b.n	8001b0c <demoNdef+0x530>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <demoNdef+0x53c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
            break;     
 8001b08:	e000      	b.n	8001b0c <demoNdef+0x530>
            break;
 8001b0a:	bf00      	nop
    }
    return;
 8001b0c:	e000      	b.n	8001b10 <demoNdef+0x534>
                return;
 8001b0e:	bf00      	nop
}
 8001b10:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001040 	.word	0x20001040
 8001b1c:	20000074 	.word	0x20000074
 8001b20:	20000098 	.word	0x20000098
 8001b24:	20001044 	.word	0x20001044
 8001b28:	0801c2fc 	.word	0x0801c2fc
 8001b2c:	2000066c 	.word	0x2000066c
 8001b30:	0801c31c 	.word	0x0801c31c
 8001b34:	0801c360 	.word	0x0801c360
 8001b38:	20001041 	.word	0x20001041
 8001b3c:	0801c2f0 	.word	0x0801c2f0
 8001b40:	0801c380 	.word	0x0801c380
 8001b44:	0801c3c0 	.word	0x0801c3c0
 8001b48:	0801c3d4 	.word	0x0801c3d4
 8001b4c:	0801c410 	.word	0x0801c410

08001b50 <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b5e:	461c      	mov	r4, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001b66:	461d      	mov	r5, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001b6e:	461e      	mov	r6, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b76:	4619      	mov	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001b86:	4610      	mov	r0, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001b8e:	9203      	str	r2, [sp, #12]
 8001b90:	9002      	str	r0, [sp, #8]
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	9100      	str	r1, [sp, #0]
 8001b96:	4633      	mov	r3, r6
 8001b98:	462a      	mov	r2, r5
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <ndefT2TCCDump+0x74>)
 8001b9e:	f7fe fd71 	bl	8000684 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	339c      	adds	r3, #156	; 0x9c
 8001ba6:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <ndefT2TCCDump+0x78>)
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <ndefT2TCCDump+0x7c>)
 8001bb8:	f001 f8e2 	bl	8002d80 <ndefBufferDump>
  
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc4:	0801c420 	.word	0x0801c420
 8001bc8:	20001041 	.word	0x20001041
 8001bcc:	0801c484 	.word	0x0801c484

08001bd0 <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	b08b      	sub	sp, #44	; 0x2c
 8001bd4:	af06      	add	r7, sp, #24
 8001bd6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001bde:	461d      	mov	r5, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001be6:	461e      	mov	r6, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001bee:	469c      	mov	ip, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8001bfe:	4611      	mov	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8001c06:	4610      	mov	r0, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 8001c0e:	4614      	mov	r4, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 8001c16:	9204      	str	r2, [sp, #16]
 8001c18:	9403      	str	r4, [sp, #12]
 8001c1a:	9002      	str	r0, [sp, #8]
 8001c1c:	9101      	str	r1, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4663      	mov	r3, ip
 8001c22:	4632      	mov	r2, r6
 8001c24:	4629      	mov	r1, r5
 8001c26:	480a      	ldr	r0, [pc, #40]	; (8001c50 <ndefT3TAIBDump+0x80>)
 8001c28:	f7fe fd2c 	bl	8000684 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	339c      	adds	r3, #156	; 0x9c
 8001c30:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 8001c32:	2310      	movs	r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <ndefT3TAIBDump+0x84>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <ndefT3TAIBDump+0x88>)
 8001c42:	f001 f89d 	bl	8002d80 <ndefBufferDump>
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	0801c494 	.word	0x0801c494
 8001c54:	20001041 	.word	0x20001041
 8001c58:	0801c484 	.word	0x0801c484

08001c5c <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b08b      	sub	sp, #44	; 0x2c
 8001c60:	af06      	add	r7, sp, #24
 8001c62:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001c6a:	461e      	mov	r6, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001c72:	469c      	mov	ip, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001c7a:	469e      	mov	lr, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001c82:	4619      	mov	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001c92:	461c      	mov	r4, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8001ca0:	4615      	mov	r5, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 8001ca8:	9205      	str	r2, [sp, #20]
 8001caa:	9504      	str	r5, [sp, #16]
 8001cac:	9303      	str	r3, [sp, #12]
 8001cae:	9402      	str	r4, [sp, #8]
 8001cb0:	9001      	str	r0, [sp, #4]
 8001cb2:	9100      	str	r1, [sp, #0]
 8001cb4:	4673      	mov	r3, lr
 8001cb6:	4662      	mov	r2, ip
 8001cb8:	4631      	mov	r1, r6
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <ndefT4TCCDump+0x8c>)
 8001cbc:	f7fe fce2 	bl	8000684 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	339c      	adds	r3, #156	; 0x9c
 8001cc4:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001ccc:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <ndefT4TCCDump+0x90>)
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <ndefT4TCCDump+0x94>)
 8001cda:	f001 f851 	bl	8002d80 <ndefBufferDump>
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0801c4f4 	.word	0x0801c4f4
 8001cec:	20001041 	.word	0x20001041
 8001cf0:	0801c56c 	.word	0x0801c56c

08001cf4 <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af06      	add	r7, sp, #24
 8001cfa:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d02:	4619      	mov	r1, r3
 8001d04:	4831      	ldr	r0, [pc, #196]	; (8001dcc <ndefT5TCCDump+0xd8>)
 8001d06:	f7fe fcbd 	bl	8000684 <logUsart>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001d10:	461d      	mov	r5, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001d18:	461e      	mov	r6, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d20:	469c      	mov	ip, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d28:	4619      	mov	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d30:	4618      	mov	r0, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001d40:	4614      	mov	r4, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001d48:	9204      	str	r2, [sp, #16]
 8001d4a:	9403      	str	r4, [sp, #12]
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	9001      	str	r0, [sp, #4]
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4663      	mov	r3, ip
 8001d54:	4632      	mov	r2, r6
 8001d56:	4629      	mov	r1, r5
 8001d58:	481d      	ldr	r0, [pc, #116]	; (8001dd0 <ndefT5TCCDump+0xdc>)
 8001d5a:	f7fe fc93 	bl	8000684 <logUsart>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <ndefT5TCCDump+0x78>
 8001d68:	2358      	movs	r3, #88	; 0x58
 8001d6a:	e000      	b.n	8001d6e <ndefT5TCCDump+0x7a>
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <ndefT5TCCDump+0xe0>)
 8001d72:	f7fe fc87 	bl	8000684 <logUsart>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <ndefT5TCCDump+0x90>
 8001d80:	2358      	movs	r3, #88	; 0x58
 8001d82:	e000      	b.n	8001d86 <ndefT5TCCDump+0x92>
 8001d84:	2320      	movs	r3, #32
 8001d86:	4619      	mov	r1, r3
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <ndefT5TCCDump+0xe4>)
 8001d8a:	f7fe fc7b 	bl	8000684 <logUsart>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <ndefT5TCCDump+0xa8>
 8001d98:	2358      	movs	r3, #88	; 0x58
 8001d9a:	e000      	b.n	8001d9e <ndefT5TCCDump+0xaa>
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <ndefT5TCCDump+0xe8>)
 8001da2:	f7fe fc6f 	bl	8000684 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	339c      	adds	r3, #156	; 0x9c
 8001daa:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001db2:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <ndefT5TCCDump+0xec>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <ndefT5TCCDump+0xf0>)
 8001dc0:	f000 ffde 	bl	8002d80 <ndefBufferDump>
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dcc:	0801c580 	.word	0x0801c580
 8001dd0:	0801c598 	.word	0x0801c598
 8001dd4:	0801c60c 	.word	0x0801c60c
 8001dd8:	0801c624 	.word	0x0801c624
 8001ddc:	0801c644 	.word	0x0801c644
 8001de0:	20001041 	.word	0x20001041
 8001de4:	0801c484 	.word	0x0801c484

08001de8 <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03c      	beq.n	8001e70 <ndefCCDump+0x88>
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <ndefCCDump+0x94>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d135      	bne.n	8001e70 <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d101      	bne.n	8001e10 <ndefCCDump+0x28>
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <ndefCCDump+0x98>)
 8001e0e:	e000      	b.n	8001e12 <ndefCCDump+0x2a>
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <ndefCCDump+0x9c>)
 8001e12:	4619      	mov	r1, r3
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <ndefCCDump+0xa0>)
 8001e16:	f7fe fc35 	bl	8000684 <logUsart>
    switch( ctx->device.type )
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d828      	bhi.n	8001e74 <ndefCCDump+0x8c>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <ndefCCDump+0x40>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e59 	.word	0x08001e59
 8001e30:	08001e61 	.word	0x08001e61
 8001e34:	08001e69 	.word	0x08001e69
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <ndefCCDump+0x5e>
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d004      	beq.n	8001e4e <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 8001e44:	e007      	b.n	8001e56 <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fe82 	bl	8001b50 <ndefT2TCCDump>
                    break;
 8001e4c:	e003      	b.n	8001e56 <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff04 	bl	8001c5c <ndefT4TCCDump>
                    break;
 8001e54:	bf00      	nop
            }
            break;
 8001e56:	e00e      	b.n	8001e76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff feff 	bl	8001c5c <ndefT4TCCDump>
            break;
 8001e5e:	e00a      	b.n	8001e76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff feb5 	bl	8001bd0 <ndefT3TAIBDump>
            break;
 8001e66:	e006      	b.n	8001e76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff43 	bl	8001cf4 <ndefT5TCCDump>
            break;
 8001e6e:	e002      	b.n	8001e76 <ndefCCDump+0x8e>
        return;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <ndefCCDump+0x8e>
        default:
            break;
 8001e74:	bf00      	nop
    }
}
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20001041 	.word	0x20001041
 8001e80:	0801c65c 	.word	0x0801c65c
 8001e84:	0801c680 	.word	0x0801c680
 8001e88:	0801c69c 	.word	0x0801c69c

08001e8c <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 81d6 	beq.w	8002248 <ndefDumpSysInfo+0x3bc>
 8001e9c:	4ba4      	ldr	r3, [pc, #656]	; (8002130 <ndefDumpSysInfo+0x2a4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 81ce 	bne.w	8002248 <ndefDumpSysInfo+0x3bc>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001eb2:	f083 0301 	eor.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 81c7 	bne.w	800224c <ndefDumpSysInfo+0x3c0>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	33be      	adds	r3, #190	; 0xbe
 8001ec2:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8001ec4:	489b      	ldr	r0, [pc, #620]	; (8002134 <ndefDumpSysInfo+0x2a8>)
 8001ec6:	f7fe fbdd 	bl	8000684 <logUsart>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7b9b      	ldrb	r3, [r3, #14]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4897      	ldr	r0, [pc, #604]	; (8002138 <ndefDumpSysInfo+0x2ac>)
 8001edc:	f7fe fbd2 	bl	8000684 <logUsart>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	7b9b      	ldrb	r3, [r3, #14]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	7bdb      	ldrb	r3, [r3, #15]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4892      	ldr	r0, [pc, #584]	; (800213c <ndefDumpSysInfo+0x2b0>)
 8001ef4:	f7fe fbc6 	bl	8000684 <logUsart>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	7b9b      	ldrb	r3, [r3, #14]
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	7c1b      	ldrb	r3, [r3, #16]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	488c      	ldr	r0, [pc, #560]	; (8002140 <ndefDumpSysInfo+0x2b4>)
 8001f10:	f7fe fbb8 	bl	8000684 <logUsart>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	7b9b      	ldrb	r3, [r3, #14]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	7c5b      	ldrb	r3, [r3, #17]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4884      	ldr	r0, [pc, #528]	; (8002144 <ndefDumpSysInfo+0x2b8>)
 8001f32:	f7fe fba7 	bl	8000684 <logUsart>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	7b9b      	ldrb	r3, [r3, #14]
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	7c9b      	ldrb	r3, [r3, #18]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	487e      	ldr	r0, [pc, #504]	; (8002148 <ndefDumpSysInfo+0x2bc>)
 8001f4e:	f7fe fb99 	bl	8000684 <logUsart>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	7b9b      	ldrb	r3, [r3, #14]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8176 	beq.w	8002250 <ndefDumpSysInfo+0x3c4>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7a9b      	ldrb	r3, [r3, #10]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <ndefDumpSysInfo+0xe8>
 8001f70:	2358      	movs	r3, #88	; 0x58
 8001f72:	e000      	b.n	8001f76 <ndefDumpSysInfo+0xea>
 8001f74:	2320      	movs	r3, #32
 8001f76:	4619      	mov	r1, r3
 8001f78:	4874      	ldr	r0, [pc, #464]	; (800214c <ndefDumpSysInfo+0x2c0>)
 8001f7a:	f7fe fb83 	bl	8000684 <logUsart>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	7a9b      	ldrb	r3, [r3, #10]
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <ndefDumpSysInfo+0x106>
 8001f8e:	2358      	movs	r3, #88	; 0x58
 8001f90:	e000      	b.n	8001f94 <ndefDumpSysInfo+0x108>
 8001f92:	2320      	movs	r3, #32
 8001f94:	4619      	mov	r1, r3
 8001f96:	486e      	ldr	r0, [pc, #440]	; (8002150 <ndefDumpSysInfo+0x2c4>)
 8001f98:	f7fe fb74 	bl	8000684 <logUsart>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <ndefDumpSysInfo+0x124>
 8001fac:	2358      	movs	r3, #88	; 0x58
 8001fae:	e000      	b.n	8001fb2 <ndefDumpSysInfo+0x126>
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4867      	ldr	r0, [pc, #412]	; (8002154 <ndefDumpSysInfo+0x2c8>)
 8001fb6:	f7fe fb65 	bl	8000684 <logUsart>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	7a9b      	ldrb	r3, [r3, #10]
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <ndefDumpSysInfo+0x142>
 8001fca:	2358      	movs	r3, #88	; 0x58
 8001fcc:	e000      	b.n	8001fd0 <ndefDumpSysInfo+0x144>
 8001fce:	2320      	movs	r3, #32
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4861      	ldr	r0, [pc, #388]	; (8002158 <ndefDumpSysInfo+0x2cc>)
 8001fd4:	f7fe fb56 	bl	8000684 <logUsart>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	7a9b      	ldrb	r3, [r3, #10]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <ndefDumpSysInfo+0x160>
 8001fe8:	2358      	movs	r3, #88	; 0x58
 8001fea:	e000      	b.n	8001fee <ndefDumpSysInfo+0x162>
 8001fec:	2320      	movs	r3, #32
 8001fee:	4619      	mov	r1, r3
 8001ff0:	485a      	ldr	r0, [pc, #360]	; (800215c <ndefDumpSysInfo+0x2d0>)
 8001ff2:	f7fe fb47 	bl	8000684 <logUsart>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	7a9b      	ldrb	r3, [r3, #10]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <ndefDumpSysInfo+0x17e>
 8002006:	2358      	movs	r3, #88	; 0x58
 8002008:	e000      	b.n	800200c <ndefDumpSysInfo+0x180>
 800200a:	2320      	movs	r3, #32
 800200c:	4619      	mov	r1, r3
 800200e:	4854      	ldr	r0, [pc, #336]	; (8002160 <ndefDumpSysInfo+0x2d4>)
 8002010:	f7fe fb38 	bl	8000684 <logUsart>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	7a9b      	ldrb	r3, [r3, #10]
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <ndefDumpSysInfo+0x19c>
 8002024:	2358      	movs	r3, #88	; 0x58
 8002026:	e000      	b.n	800202a <ndefDumpSysInfo+0x19e>
 8002028:	2320      	movs	r3, #32
 800202a:	4619      	mov	r1, r3
 800202c:	484d      	ldr	r0, [pc, #308]	; (8002164 <ndefDumpSysInfo+0x2d8>)
 800202e:	f7fe fb29 	bl	8000684 <logUsart>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	7a9b      	ldrb	r3, [r3, #10]
 8002036:	09db      	lsrs	r3, r3, #7
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <ndefDumpSysInfo+0x1ba>
 8002042:	2358      	movs	r3, #88	; 0x58
 8002044:	e000      	b.n	8002048 <ndefDumpSysInfo+0x1bc>
 8002046:	2320      	movs	r3, #32
 8002048:	4619      	mov	r1, r3
 800204a:	4847      	ldr	r0, [pc, #284]	; (8002168 <ndefDumpSysInfo+0x2dc>)
 800204c:	f7fe fb1a 	bl	8000684 <logUsart>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	7adb      	ldrb	r3, [r3, #11]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <ndefDumpSysInfo+0x1d4>
 800205c:	2358      	movs	r3, #88	; 0x58
 800205e:	e000      	b.n	8002062 <ndefDumpSysInfo+0x1d6>
 8002060:	2320      	movs	r3, #32
 8002062:	4619      	mov	r1, r3
 8002064:	4841      	ldr	r0, [pc, #260]	; (800216c <ndefDumpSysInfo+0x2e0>)
 8002066:	f7fe fb0d 	bl	8000684 <logUsart>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	7adb      	ldrb	r3, [r3, #11]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <ndefDumpSysInfo+0x1f2>
 800207a:	2358      	movs	r3, #88	; 0x58
 800207c:	e000      	b.n	8002080 <ndefDumpSysInfo+0x1f4>
 800207e:	2320      	movs	r3, #32
 8002080:	4619      	mov	r1, r3
 8002082:	483b      	ldr	r0, [pc, #236]	; (8002170 <ndefDumpSysInfo+0x2e4>)
 8002084:	f7fe fafe 	bl	8000684 <logUsart>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	7adb      	ldrb	r3, [r3, #11]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <ndefDumpSysInfo+0x210>
 8002098:	2358      	movs	r3, #88	; 0x58
 800209a:	e000      	b.n	800209e <ndefDumpSysInfo+0x212>
 800209c:	2320      	movs	r3, #32
 800209e:	4619      	mov	r1, r3
 80020a0:	4834      	ldr	r0, [pc, #208]	; (8002174 <ndefDumpSysInfo+0x2e8>)
 80020a2:	f7fe faef 	bl	8000684 <logUsart>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	7adb      	ldrb	r3, [r3, #11]
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <ndefDumpSysInfo+0x22e>
 80020b6:	2358      	movs	r3, #88	; 0x58
 80020b8:	e000      	b.n	80020bc <ndefDumpSysInfo+0x230>
 80020ba:	2320      	movs	r3, #32
 80020bc:	4619      	mov	r1, r3
 80020be:	482e      	ldr	r0, [pc, #184]	; (8002178 <ndefDumpSysInfo+0x2ec>)
 80020c0:	f7fe fae0 	bl	8000684 <logUsart>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7adb      	ldrb	r3, [r3, #11]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ndefDumpSysInfo+0x24c>
 80020d4:	2358      	movs	r3, #88	; 0x58
 80020d6:	e000      	b.n	80020da <ndefDumpSysInfo+0x24e>
 80020d8:	2320      	movs	r3, #32
 80020da:	4619      	mov	r1, r3
 80020dc:	4827      	ldr	r0, [pc, #156]	; (800217c <ndefDumpSysInfo+0x2f0>)
 80020de:	f7fe fad1 	bl	8000684 <logUsart>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	7adb      	ldrb	r3, [r3, #11]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <ndefDumpSysInfo+0x26a>
 80020f2:	2358      	movs	r3, #88	; 0x58
 80020f4:	e000      	b.n	80020f8 <ndefDumpSysInfo+0x26c>
 80020f6:	2320      	movs	r3, #32
 80020f8:	4619      	mov	r1, r3
 80020fa:	4821      	ldr	r0, [pc, #132]	; (8002180 <ndefDumpSysInfo+0x2f4>)
 80020fc:	f7fe fac2 	bl	8000684 <logUsart>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	7adb      	ldrb	r3, [r3, #11]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <ndefDumpSysInfo+0x288>
 8002110:	2358      	movs	r3, #88	; 0x58
 8002112:	e000      	b.n	8002116 <ndefDumpSysInfo+0x28a>
 8002114:	2320      	movs	r3, #32
 8002116:	4619      	mov	r1, r3
 8002118:	481a      	ldr	r0, [pc, #104]	; (8002184 <ndefDumpSysInfo+0x2f8>)
 800211a:	f7fe fab3 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	7b1b      	ldrb	r3, [r3, #12]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d02e      	beq.n	8002188 <ndefDumpSysInfo+0x2fc>
 800212a:	2358      	movs	r3, #88	; 0x58
 800212c:	e02d      	b.n	800218a <ndefDumpSysInfo+0x2fe>
 800212e:	bf00      	nop
 8002130:	20001041 	.word	0x20001041
 8002134:	0801c6a0 	.word	0x0801c6a0
 8002138:	0801c6b8 	.word	0x0801c6b8
 800213c:	0801c6dc 	.word	0x0801c6dc
 8002140:	0801c6f0 	.word	0x0801c6f0
 8002144:	0801c700 	.word	0x0801c700
 8002148:	0801c724 	.word	0x0801c724
 800214c:	0801c738 	.word	0x0801c738
 8002150:	0801c764 	.word	0x0801c764
 8002154:	0801c790 	.word	0x0801c790
 8002158:	0801c7bc 	.word	0x0801c7bc
 800215c:	0801c7e8 	.word	0x0801c7e8
 8002160:	0801c814 	.word	0x0801c814
 8002164:	0801c840 	.word	0x0801c840
 8002168:	0801c86c 	.word	0x0801c86c
 800216c:	0801c898 	.word	0x0801c898
 8002170:	0801c8c4 	.word	0x0801c8c4
 8002174:	0801c8f0 	.word	0x0801c8f0
 8002178:	0801c91c 	.word	0x0801c91c
 800217c:	0801c948 	.word	0x0801c948
 8002180:	0801c974 	.word	0x0801c974
 8002184:	0801c9a0 	.word	0x0801c9a0
 8002188:	2320      	movs	r3, #32
 800218a:	4619      	mov	r1, r3
 800218c:	4832      	ldr	r0, [pc, #200]	; (8002258 <ndefDumpSysInfo+0x3cc>)
 800218e:	f7fe fa79 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	7b1b      	ldrb	r3, [r3, #12]
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <ndefDumpSysInfo+0x31a>
 80021a2:	2358      	movs	r3, #88	; 0x58
 80021a4:	e000      	b.n	80021a8 <ndefDumpSysInfo+0x31c>
 80021a6:	2320      	movs	r3, #32
 80021a8:	4619      	mov	r1, r3
 80021aa:	482c      	ldr	r0, [pc, #176]	; (800225c <ndefDumpSysInfo+0x3d0>)
 80021ac:	f7fe fa6a 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	7b1b      	ldrb	r3, [r3, #12]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <ndefDumpSysInfo+0x338>
 80021c0:	2358      	movs	r3, #88	; 0x58
 80021c2:	e000      	b.n	80021c6 <ndefDumpSysInfo+0x33a>
 80021c4:	2320      	movs	r3, #32
 80021c6:	4619      	mov	r1, r3
 80021c8:	4825      	ldr	r0, [pc, #148]	; (8002260 <ndefDumpSysInfo+0x3d4>)
 80021ca:	f7fe fa5b 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <ndefDumpSysInfo+0x356>
 80021de:	2358      	movs	r3, #88	; 0x58
 80021e0:	e000      	b.n	80021e4 <ndefDumpSysInfo+0x358>
 80021e2:	2320      	movs	r3, #32
 80021e4:	4619      	mov	r1, r3
 80021e6:	481f      	ldr	r0, [pc, #124]	; (8002264 <ndefDumpSysInfo+0x3d8>)
 80021e8:	f7fe fa4c 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7b1b      	ldrb	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <ndefDumpSysInfo+0x374>
 80021fc:	2358      	movs	r3, #88	; 0x58
 80021fe:	e000      	b.n	8002202 <ndefDumpSysInfo+0x376>
 8002200:	2320      	movs	r3, #32
 8002202:	4619      	mov	r1, r3
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <ndefDumpSysInfo+0x3dc>)
 8002206:	f7fe fa3d 	bl	8000684 <logUsart>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <ndefDumpSysInfo+0x392>
 800221a:	2358      	movs	r3, #88	; 0x58
 800221c:	e000      	b.n	8002220 <ndefDumpSysInfo+0x394>
 800221e:	2320      	movs	r3, #32
 8002220:	4619      	mov	r1, r3
 8002222:	4812      	ldr	r0, [pc, #72]	; (800226c <ndefDumpSysInfo+0x3e0>)
 8002224:	f7fe fa2e 	bl	8000684 <logUsart>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	7b1b      	ldrb	r3, [r3, #12]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <ndefDumpSysInfo+0x3b0>
 8002238:	2358      	movs	r3, #88	; 0x58
 800223a:	e000      	b.n	800223e <ndefDumpSysInfo+0x3b2>
 800223c:	2320      	movs	r3, #32
 800223e:	4619      	mov	r1, r3
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <ndefDumpSysInfo+0x3e4>)
 8002242:	f7fe fa1f 	bl	8000684 <logUsart>
    }
    return;
 8002246:	e003      	b.n	8002250 <ndefDumpSysInfo+0x3c4>
        return;
 8002248:	bf00      	nop
 800224a:	e002      	b.n	8002252 <ndefDumpSysInfo+0x3c6>
        return;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <ndefDumpSysInfo+0x3c6>
    return;
 8002250:	bf00      	nop
}
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0801c9cc 	.word	0x0801c9cc
 800225c:	0801c9f8 	.word	0x0801c9f8
 8002260:	0801ca24 	.word	0x0801ca24
 8002264:	0801ca50 	.word	0x0801ca50
 8002268:	0801ca7c 	.word	0x0801ca7c
 800226c:	0801caa8 	.word	0x0801caa8
 8002270:	0801cad4 	.word	0x0801cad4

08002274 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    bool ret = false;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <ndefIsSTTag+0x16>
    {   
        return ret;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	e026      	b.n	80022d8 <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d81c      	bhi.n	80022cc <ndefIsSTTag+0x58>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <ndefIsSTTag+0x24>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022cd 	.word	0x080022cd
 80022a0:	080022cd 	.word	0x080022cd
 80022a4:	080022bf 	.word	0x080022bf
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	795b      	ldrb	r3, [r3, #5]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00f      	beq.n	80022d0 <ndefIsSTTag+0x5c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	799b      	ldrb	r3, [r3, #6]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d10b      	bne.n	80022d0 <ndefIsSTTag+0x5c>
            {  
                ret = true;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80022bc:	e008      	b.n	80022d0 <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7a5b      	ldrb	r3, [r3, #9]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d106      	bne.n	80022d4 <ndefIsSTTag+0x60>
            {  
                ret = true;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80022ca:	e003      	b.n	80022d4 <ndefIsSTTag+0x60>
        default:
            break;
 80022cc:	bf00      	nop
 80022ce:	e002      	b.n	80022d6 <ndefIsSTTag+0x62>
            break;
 80022d0:	bf00      	nop
 80022d2:	e000      	b.n	80022d6 <ndefIsSTTag+0x62>
            break;
 80022d4:	bf00      	nop
    }
    return (ret);
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	e00c      	b.n	800230a <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 80022f0:	f000 f814 	bl	800231c <ledsOn>
        platformDelay(100);
 80022f4:	2064      	movs	r0, #100	; 0x64
 80022f6:	f002 f9f5 	bl	80046e4 <HAL_Delay>

        ledsOff();
 80022fa:	f000 f837 	bl	800236c <ledsOff>
        platformDelay(100);
 80022fe:	2064      	movs	r0, #100	; 0x64
 8002300:	f002 f9f0 	bl	80046e4 <HAL_Delay>
    for (i = 0; i < 3; i++)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3301      	adds	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d9ef      	bls.n	80022f0 <LedNotificationWriteDone+0xc>
    }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <ledsOn>:

static void ledsOn(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002320:	2201      	movs	r2, #1
 8002322:	2101      	movs	r1, #1
 8002324:	480f      	ldr	r0, [pc, #60]	; (8002364 <ledsOn+0x48>)
 8002326:	f002 fd02 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800232a:	2201      	movs	r2, #1
 800232c:	2110      	movs	r1, #16
 800232e:	480e      	ldr	r0, [pc, #56]	; (8002368 <ledsOn+0x4c>)
 8002330:	f002 fcfd 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8002334:	2201      	movs	r2, #1
 8002336:	2102      	movs	r1, #2
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <ledsOn+0x4c>)
 800233a:	f002 fcf8 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800233e:	2201      	movs	r2, #1
 8002340:	2110      	movs	r1, #16
 8002342:	4808      	ldr	r0, [pc, #32]	; (8002364 <ledsOn+0x48>)
 8002344:	f002 fcf3 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8002348:	2201      	movs	r2, #1
 800234a:	2120      	movs	r1, #32
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <ledsOn+0x48>)
 800234e:	f002 fcee 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8002352:	2201      	movs	r2, #1
 8002354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <ledsOn+0x4c>)
 800235a:	f002 fce8 	bl	8004d2e <HAL_GPIO_WritePin>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40020400 	.word	0x40020400
 8002368:	40020000 	.word	0x40020000

0800236c <ledsOff>:

static void ledsOff(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8002370:	2200      	movs	r2, #0
 8002372:	2101      	movs	r1, #1
 8002374:	480f      	ldr	r0, [pc, #60]	; (80023b4 <ledsOff+0x48>)
 8002376:	f002 fcda 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800237a:	2200      	movs	r2, #0
 800237c:	2110      	movs	r1, #16
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <ledsOff+0x4c>)
 8002380:	f002 fcd5 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8002384:	2200      	movs	r2, #0
 8002386:	2102      	movs	r1, #2
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <ledsOff+0x4c>)
 800238a:	f002 fcd0 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800238e:	2200      	movs	r2, #0
 8002390:	2110      	movs	r1, #16
 8002392:	4808      	ldr	r0, [pc, #32]	; (80023b4 <ledsOff+0x48>)
 8002394:	f002 fccb 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <ledsOff+0x48>)
 800239e:	f002 fcc6 	bl	8004d2e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <ledsOff+0x4c>)
 80023aa:	f002 fcc0 	bl	8004d2e <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020000 	.word	0x40020000

080023bc <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <isPrintableASCII+0x16>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <isPrintableASCII+0x1a>
    {
        return false;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e018      	b.n	8002408 <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e010      	b.n	80023fe <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b1f      	cmp	r3, #31
 80023e6:	d905      	bls.n	80023f4 <isPrintableASCII+0x38>
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b7e      	cmp	r3, #126	; 0x7e
 80023f2:	d901      	bls.n	80023f8 <isPrintableASCII+0x3c>
        {
            return false;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e007      	b.n	8002408 <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3301      	adds	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3ea      	bcc.n	80023dc <isPrintableASCII+0x20>
        }
    }

    return true;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b098      	sub	sp, #96	; 0x60
 8002418:	af04      	add	r7, sp, #16
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 8002420:	4b5e      	ldr	r3, [pc, #376]	; (800259c <ndefRecordDump+0x188>)
 8002422:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002426:	461d      	mov	r5, r3
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <ndefRecordDump+0x18c>)
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 800243e:	4859      	ldr	r0, [pc, #356]	; (80025a4 <ndefRecordDump+0x190>)
 8002440:	f7fe f920 	bl	8000684 <logUsart>
        return ERR_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	e0a4      	b.n	8002592 <ndefRecordDump+0x17e>
    }

    if (ndefHeaderIsSetMB(record))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	09db      	lsrs	r3, r3, #7
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d103      	bne.n	800245c <ndefRecordDump+0x48>
    {
        index = 1U;
 8002454:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <ndefRecordDump+0x194>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e004      	b.n	8002466 <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <ndefRecordDump+0x194>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <ndefRecordDump+0x194>)
 8002464:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <ndefRecordDump+0x68>
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <ndefRecordDump+0x198>)
 800247a:	e000      	b.n	800247e <ndefRecordDump+0x6a>
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <ndefRecordDump+0x19c>)
 800247e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <ndefRecordDump+0x194>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002486:	4619      	mov	r1, r3
 8002488:	484a      	ldr	r0, [pc, #296]	; (80025b4 <ndefRecordDump+0x1a0>)
 800248a:	f7fe f8fb 	bl	8000684 <logUsart>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fba6 	bl	8002be0 <ndefRecordDumpType>
 8002494:	4603      	mov	r3, r0
 8002496:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d028      	beq.n	80024f2 <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 80024a0:	4845      	ldr	r0, [pc, #276]	; (80025b8 <ndefRecordDump+0x1a4>)
 80024a2:	f7fe f8ef 	bl	8000684 <logUsart>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	09db      	lsrs	r3, r3, #7
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461d      	mov	r5, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	f003 0001 	and.w	r0, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 0401 	and.w	r4, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	08d2      	lsrs	r2, r2, #3
 80024d4:	f002 0201 	and.w	r2, r2, #1
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	7809      	ldrb	r1, [r1, #0]
 80024dc:	f001 0107 	and.w	r1, r1, #7
 80024e0:	9102      	str	r1, [sp, #8]
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4623      	mov	r3, r4
 80024e8:	4602      	mov	r2, r0
 80024ea:	4629      	mov	r1, r5
 80024ec:	4833      	ldr	r0, [pc, #204]	; (80025bc <ndefRecordDump+0x1a8>)
 80024ee:	f7fe f8c9 	bl	8000684 <logUsart>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 80024f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <ndefRecordDump+0xec>
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d047      	beq.n	8002590 <ndefRecordDump+0x17c>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	443b      	add	r3, r7
 800250e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002512:	4619      	mov	r1, r3
 8002514:	482a      	ldr	r0, [pc, #168]	; (80025c0 <ndefRecordDump+0x1ac>)
 8002516:	f7fe f8b5 	bl	8000684 <logUsart>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 800251a:	f107 021c 	add.w	r2, r7, #28
 800251e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f006 fa8b 	bl	8008a40 <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 800252a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <ndefRecordDump+0x12e>
 8002532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <ndefRecordDump+0x12e>
        {
            platformLog(" Empty NDEF record\r\n");
 800253a:	4822      	ldr	r0, [pc, #136]	; (80025c4 <ndefRecordDump+0x1b0>)
 800253c:	f7fe f8a2 	bl	8000684 <logUsart>
 8002540:	e006      	b.n	8002550 <ndefRecordDump+0x13c>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <ndefRecordDump+0x1b4>)
 8002548:	4619      	mov	r1, r3
 800254a:	4820      	ldr	r0, [pc, #128]	; (80025cc <ndefRecordDump+0x1b8>)
 800254c:	f000 fcce 	bl	8002eec <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00c      	beq.n	8002576 <ndefRecordDump+0x162>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f006 faf7 	bl	8008b56 <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <ndefRecordDump+0x1b4>)
 800256e:	4619      	mov	r1, r3
 8002570:	4817      	ldr	r0, [pc, #92]	; (80025d0 <ndefRecordDump+0x1bc>)
 8002572:	f000 fcbb 	bl	8002eec <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f006 fb3c 	bl	8008bfa <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4812      	ldr	r0, [pc, #72]	; (80025d4 <ndefRecordDump+0x1c0>)
 800258c:	f000 fbf8 	bl	8002d80 <ndefBufferDump>
    }

    return ERR_NONE;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3750      	adds	r7, #80	; 0x50
 8002596:	46bd      	mov	sp, r7
 8002598:	bdb0      	pop	{r4, r5, r7, pc}
 800259a:	bf00      	nop
 800259c:	0801cd34 	.word	0x0801cd34
 80025a0:	0801cc68 	.word	0x0801cc68
 80025a4:	0801cc6c 	.word	0x0801cc6c
 80025a8:	20003054 	.word	0x20003054
 80025ac:	0801cc78 	.word	0x0801cc78
 80025b0:	0801cc88 	.word	0x0801cc88
 80025b4:	0801cc9c 	.word	0x0801cc9c
 80025b8:	0801ccac 	.word	0x0801ccac
 80025bc:	0801ccc4 	.word	0x0801ccc4
 80025c0:	0801cce0 	.word	0x0801cce0
 80025c4:	0801ccf8 	.word	0x0801ccf8
 80025c8:	0801cd10 	.word	0x0801cd10
 80025cc:	0801cd14 	.word	0x0801cd14
 80025d0:	0801cd20 	.word	0x0801cd20
 80025d4:	0801cd28 	.word	0x0801cd28

080025d8 <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 80025ea:	4816      	ldr	r0, [pc, #88]	; (8002644 <ndefMessageDump+0x6c>)
 80025ec:	f7fe f84a 	bl	8000684 <logUsart>
        return ERR_NONE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e023      	b.n	800263c <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <ndefMessageDump+0x70>)
 80025f6:	f7fe f845 	bl	8000684 <logUsart>
    }

    record = ndefMessageGetFirstRecord(message);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <ndefMessageDump+0x2e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e000      	b.n	8002608 <ndefMessageDump+0x30>
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 800260a:	e013      	b.n	8002634 <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	4619      	mov	r1, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff feff 	bl	8002414 <ndefRecordDump>
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <ndefMessageDump+0x4c>
        {
            return err;
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	e00b      	b.n	800263c <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <ndefMessageDump+0x58>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	e000      	b.n	8002632 <ndefMessageDump+0x5a>
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e8      	bne.n	800260c <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	0801cd54 	.word	0x0801cd54
 8002648:	0801cd6c 	.word	0x0801cd6c

0800264c <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 800265a:	2307      	movs	r3, #7
 800265c:	e009      	b.n	8002672 <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 8002666:	2307      	movs	r3, #7
 8002668:	e003      	b.n	8002672 <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 800266a:	4804      	ldr	r0, [pc, #16]	; (800267c <ndefEmptyTypeDump+0x30>)
 800266c:	f7fe f80a 	bl	8000684 <logUsart>

    return ERR_NONE;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	0801cd84 	.word	0x0801cd84

08002680 <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b094      	sub	sp, #80	; 0x50
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 8002688:	4b40      	ldr	r3, [pc, #256]	; (800278c <ndefRtdDeviceInfoDump+0x10c>)
 800268a:	f107 040c 	add.w	r4, r7, #12
 800268e:	461d      	mov	r5, r3
 8002690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 800269e:	2307      	movs	r3, #7
 80026a0:	e070      	b.n	8002784 <ndefRtdDeviceInfoDump+0x104>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 80026aa:	2307      	movs	r3, #7
 80026ac:	e06a      	b.n	8002784 <ndefRtdDeviceInfoDump+0x104>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 80026ae:	f107 0320 	add.w	r3, r7, #32
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f007 ff55 	bl	800a564 <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 80026ba:	4835      	ldr	r0, [pc, #212]	; (8002790 <ndefRtdDeviceInfoDump+0x110>)
 80026bc:	f7fd ffe2 	bl	8000684 <logUsart>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e05a      	b.n	800277c <ndefRtdDeviceInfoDump+0xfc>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 80026c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	3350      	adds	r3, #80	; 0x50
 80026cc:	443b      	add	r3, r7
 80026ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d04f      	beq.n	8002776 <ndefRtdDeviceInfoDump+0xf6>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3350      	adds	r3, #80	; 0x50
 80026dc:	443b      	add	r3, r7
 80026de:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3350      	adds	r3, #80	; 0x50
 80026e6:	443b      	add	r3, r7
 80026e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4829      	ldr	r0, [pc, #164]	; (8002794 <ndefRtdDeviceInfoDump+0x114>)
 80026f0:	f7fd ffc8 	bl	8000684 <logUsart>

            if (type != NDEF_DEVICE_INFO_UUID)
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d01d      	beq.n	8002736 <ndefRtdDeviceInfoDump+0xb6>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80026fe:	e00f      	b.n	8002720 <ndefRtdDeviceInfoDump+0xa0>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 8002700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	3350      	adds	r3, #80	; 0x50
 8002706:	443b      	add	r3, r7
 8002708:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800270c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	4820      	ldr	r0, [pc, #128]	; (8002798 <ndefRtdDeviceInfoDump+0x118>)
 8002716:	f7fd ffb5 	bl	8000684 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271c:	3301      	adds	r3, #1
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3350      	adds	r3, #80	; 0x50
 8002726:	443b      	add	r3, r7
 8002728:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 800272c:	461a      	mov	r2, r3
 800272e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002730:	4293      	cmp	r3, r2
 8002732:	d3e5      	bcc.n	8002700 <ndefRtdDeviceInfoDump+0x80>
 8002734:	e01c      	b.n	8002770 <ndefRtdDeviceInfoDump+0xf0>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8002736:	2300      	movs	r3, #0
 8002738:	64bb      	str	r3, [r7, #72]	; 0x48
 800273a:	e00f      	b.n	800275c <ndefRtdDeviceInfoDump+0xdc>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 800273c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	3350      	adds	r3, #80	; 0x50
 8002742:	443b      	add	r3, r7
 8002744:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	4812      	ldr	r0, [pc, #72]	; (800279c <ndefRtdDeviceInfoDump+0x11c>)
 8002752:	f7fd ff97 	bl	8000684 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	3301      	adds	r3, #1
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	3350      	adds	r3, #80	; 0x50
 8002762:	443b      	add	r3, r7
 8002764:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8002768:	461a      	mov	r2, r3
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276c:	4293      	cmp	r3, r2
 800276e:	d3e5      	bcc.n	800273c <ndefRtdDeviceInfoDump+0xbc>
                }
            }
            platformLog("\r\n");
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <ndefRtdDeviceInfoDump+0x120>)
 8002772:	f7fd ff87 	bl	8000684 <logUsart>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 8002776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002778:	3301      	adds	r3, #1
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277e:	2b04      	cmp	r3, #4
 8002780:	d9a1      	bls.n	80026c6 <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	0801cdc4 	.word	0x0801cdc4
 8002790:	0801cd94 	.word	0x0801cd94
 8002794:	0801cdac 	.word	0x0801cdac
 8002798:	0801cdb4 	.word	0x0801cdb4
 800279c:	0801cdb8 	.word	0x0801cdb8
 80027a0:	0801cdc0 	.word	0x0801cdc0

080027a4 <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 80027b2:	2307      	movs	r3, #7
 80027b4:	e027      	b.n	8002806 <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d001      	beq.n	80027c2 <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 80027be:	2307      	movs	r3, #7
 80027c0:	e021      	b.n	8002806 <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	f107 0214 	add.w	r2, r7, #20
 80027ca:	f107 011f 	add.w	r1, r7, #31
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f008 f8fa 	bl	800a9c8 <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <ndefRtdTextDump+0x6c>)
 80027da:	4619      	mov	r1, r3
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <ndefRtdTextDump+0x70>)
 80027de:	f000 fb33 	bl	8002e48 <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <ndefRtdTextDump+0x48>
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <ndefRtdTextDump+0x74>)
 80027ea:	e000      	b.n	80027ee <ndefRtdTextDump+0x4a>
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <ndefRtdTextDump+0x78>)
 80027ee:	4619      	mov	r1, r3
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <ndefRtdTextDump+0x7c>)
 80027f2:	f7fd ff47 	bl	8000684 <logUsart>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <ndefRtdTextDump+0x80>)
 80027fc:	4619      	mov	r1, r3
 80027fe:	480a      	ldr	r0, [pc, #40]	; (8002828 <ndefRtdTextDump+0x84>)
 8002800:	f000 fb74 	bl	8002eec <ndefBuffer8Print>

    return ERR_NONE;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0801cc68 	.word	0x0801cc68
 8002814:	0801cdd8 	.word	0x0801cdd8
 8002818:	0801cde4 	.word	0x0801cde4
 800281c:	0801cdec 	.word	0x0801cdec
 8002820:	0801cdf4 	.word	0x0801cdf4
 8002824:	0801cdfc 	.word	0x0801cdfc
 8002828:	0801ce04 	.word	0x0801ce04

0800282c <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 800283a:	2307      	movs	r3, #7
 800283c:	e01c      	b.n	8002878 <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d001      	beq.n	800284a <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 8002846:	2307      	movs	r3, #7
 8002848:	e016      	b.n	8002878 <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 800284a:	f107 0208 	add.w	r2, r7, #8
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f008 fa9d 	bl	800ad94 <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <ndefRtdUriDump+0x54>)
 8002860:	4619      	mov	r1, r3
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <ndefRtdUriDump+0x58>)
 8002864:	f000 faf0 	bl	8002e48 <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <ndefRtdUriDump+0x5c>)
 800286e:	4619      	mov	r1, r3
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <ndefRtdUriDump+0x60>)
 8002872:	f000 fae9 	bl	8002e48 <ndefBufferPrint>

    return ERR_NONE;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0801ce18 	.word	0x0801ce18
 8002884:	0801ce1c 	.word	0x0801ce1c
 8002888:	0801cdc0 	.word	0x0801cdc0
 800288c:	0801cc68 	.word	0x0801cc68

08002890 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 800289e:	2307      	movs	r3, #7
 80028a0:	e013      	b.n	80028ca <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d001      	beq.n	80028ae <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00d      	b.n	80028ca <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f008 fb6b 	bl	800af90 <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <ndefRtdAarDump+0x44>)
 80028c0:	4619      	mov	r1, r3
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <ndefRtdAarDump+0x48>)
 80028c4:	f000 fac0 	bl	8002e48 <ndefBufferPrint>

    return ERR_NONE;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	0801cdc0 	.word	0x0801cdc0
 80028d8:	0801ce24 	.word	0x0801ce24

080028dc <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b096      	sub	sp, #88	; 0x58
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 80028e6:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <ndefMediaVCardTranslate+0xb8>)
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4611      	mov	r1, r2
 80028ee:	2248      	movs	r2, #72	; 0x48
 80028f0:	4618      	mov	r0, r3
 80028f2:	f018 fd7b 	bl	801b3ec <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <ndefMediaVCardTranslate+0x26>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 8002902:	230b      	movs	r3, #11
 8002904:	e041      	b.n	800298a <ndefMediaVCardTranslate+0xae>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 8002906:	2300      	movs	r3, #0
 8002908:	657b      	str	r3, [r7, #84]	; 0x54
 800290a:	e032      	b.n	8002972 <ndefMediaVCardTranslate+0x96>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681c      	ldr	r4, [r3, #0]
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	3358      	adds	r3, #88	; 0x58
 8002916:	443b      	add	r3, r7
 8002918:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 800291c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	3358      	adds	r3, #88	; 0x58
 8002922:	443b      	add	r3, r7
 8002924:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fc27 	bl	800017c <strlen>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	4629      	mov	r1, r5
 8002934:	4620      	mov	r0, r4
 8002936:	f018 fd49 	bl	801b3cc <memcmp>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d115      	bne.n	800296c <ndefMediaVCardTranslate+0x90>
        {
            bufTranslation->buffer = translate[i].english;
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3358      	adds	r3, #88	; 0x58
 8002946:	443b      	add	r3, r7
 8002948:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3358      	adds	r3, #88	; 0x58
 8002956:	443b      	add	r3, r7
 8002958:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fc0d 	bl	800017c <strlen>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	e00e      	b.n	800298a <ndefMediaVCardTranslate+0xae>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	3301      	adds	r3, #1
 8002970:	657b      	str	r3, [r7, #84]	; 0x54
 8002972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002974:	2b08      	cmp	r3, #8
 8002976:	d9c9      	bls.n	800290c <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3758      	adds	r7, #88	; 0x58
 800298e:	46bd      	mov	sp, r7
 8002990:	bdb0      	pop	{r4, r5, r7, pc}
 8002992:	bf00      	nop
 8002994:	0801ce50 	.word	0x0801ce50

08002998 <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0a6      	sub	sp, #152	; 0x98
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 80029a0:	4a5e      	ldr	r2, [pc, #376]	; (8002b1c <ndefMediaVCardDump+0x184>)
 80029a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80029a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029aa:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 80029ae:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <ndefMediaVCardDump+0x188>)
 80029b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029b8:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 80029bc:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <ndefMediaVCardDump+0x18c>)
 80029be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029c6:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 80029ca:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <ndefMediaVCardDump+0x190>)
 80029cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029d4:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 80029d8:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <ndefMediaVCardDump+0x194>)
 80029da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e2:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 80029e6:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <ndefMediaVCardDump+0x198>)
 80029e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f0:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <ndefMediaVCardDump+0x19c>)
 80029f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029fe:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 8002a02:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <ndefMediaVCardDump+0x1a0>)
 8002a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a0c:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <ndefMediaVCardDump+0x1a4>)
 8002a12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a1a:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 8002a1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
 8002a36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	e059      	b.n	8002b12 <ndefMediaVCardDump+0x17a>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d001      	beq.n	8002a6a <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 8002a66:	2307      	movs	r3, #7
 8002a68:	e053      	b.n	8002b12 <ndefMediaVCardDump+0x17a>
    }

    platformLog(" vCard decoded: \r\n");
 8002a6a:	4835      	ldr	r0, [pc, #212]	; (8002b40 <ndefMediaVCardDump+0x1a8>)
 8002a6c:	f7fd fe0a 	bl	8000684 <logUsart>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a76:	e047      	b.n	8002b08 <ndefMediaVCardDump+0x170>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8002a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3398      	adds	r3, #152	; 0x98
 8002a80:	443b      	add	r3, r7
 8002a82:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	f107 021c 	add.w	r2, r7, #28
 8002a92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f007 f950 	bl	8009d3c <ndefGetVCard>

        if (bufValue.buffer != NULL)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02d      	beq.n	8002afe <ndefMediaVCardDump+0x166>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002aac:	f7ff ff16 	bl	80028dc <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <ndefMediaVCardDump+0x1ac>)
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4823      	ldr	r0, [pc, #140]	; (8002b48 <ndefMediaVCardDump+0x1b0>)
 8002aba:	f000 f9c5 	bl	8002e48 <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <ndefMediaVCardDump+0x13a>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <ndefMediaVCardDump+0x1b4>)
 8002aca:	4619      	mov	r1, r3
 8002acc:	4820      	ldr	r0, [pc, #128]	; (8002b50 <ndefMediaVCardDump+0x1b8>)
 8002ace:	f000 f9bb 	bl	8002e48 <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 8002ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002adc:	4618      	mov	r0, r3
 8002ade:	f018 fc75 	bl	801b3cc <memcmp>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <ndefMediaVCardDump+0x160>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <ndefMediaVCardDump+0x1bc>)
 8002aee:	4619      	mov	r1, r3
 8002af0:	4819      	ldr	r0, [pc, #100]	; (8002b58 <ndefMediaVCardDump+0x1c0>)
 8002af2:	f000 f9a9 	bl	8002e48 <ndefBufferPrint>
 8002af6:	e002      	b.n	8002afe <ndefMediaVCardDump+0x166>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 8002af8:	4818      	ldr	r0, [pc, #96]	; (8002b5c <ndefMediaVCardDump+0x1c4>)
 8002afa:	f7fd fdc3 	bl	8000684 <logUsart>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8002afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b02:	3301      	adds	r3, #1
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d9b3      	bls.n	8002a78 <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3798      	adds	r7, #152	; 0x98
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	0801ced4 	.word	0x0801ced4
 8002b20:	0801cedc 	.word	0x0801cedc
 8002b24:	0801cee4 	.word	0x0801cee4
 8002b28:	0801ceec 	.word	0x0801ceec
 8002b2c:	0801cef4 	.word	0x0801cef4
 8002b30:	0801cefc 	.word	0x0801cefc
 8002b34:	0801cf04 	.word	0x0801cf04
 8002b38:	0801cf0c 	.word	0x0801cf0c
 8002b3c:	0801cf14 	.word	0x0801cf14
 8002b40:	0801ce98 	.word	0x0801ce98
 8002b44:	0801cc68 	.word	0x0801cc68
 8002b48:	0801ceac 	.word	0x0801ceac
 8002b4c:	0801ce18 	.word	0x0801ce18
 8002b50:	0801ceb0 	.word	0x0801ceb0
 8002b54:	0801cdc0 	.word	0x0801cdc0
 8002b58:	0801ceb4 	.word	0x0801ceb4
 8002b5c:	0801ceb8 	.word	0x0801ceb8

08002b60 <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e028      	b.n	8002bc4 <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b07      	cmp	r3, #7
 8002b78:	d001      	beq.n	8002b7e <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e022      	b.n	8002bc4 <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f006 fc2d 	bl	80093e4 <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 8002b8a:	4810      	ldr	r0, [pc, #64]	; (8002bcc <ndefMediaWifiDump+0x6c>)
 8002b8c:	f7fd fd7a 	bl	8000684 <logUsart>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2200      	movs	r2, #0
 8002b96:	4619      	mov	r1, r3
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <ndefMediaWifiDump+0x70>)
 8002b9a:	f000 f8f1 	bl	8002d80 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <ndefMediaWifiDump+0x74>)
 8002baa:	f000 f8e9 	bl	8002d80 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 8002bae:	7f3b      	ldrb	r3, [r7, #28]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <ndefMediaWifiDump+0x78>)
 8002bb4:	f7fd fd66 	bl	8000684 <logUsart>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 8002bb8:	7f7b      	ldrb	r3, [r7, #29]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <ndefMediaWifiDump+0x7c>)
 8002bbe:	f7fd fd61 	bl	8000684 <logUsart>

    return ERR_NONE;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	0801cf1c 	.word	0x0801cf1c
 8002bd0:	0801cf30 	.word	0x0801cf30
 8002bd4:	0801cf40 	.word	0x0801cf40
 8002bd8:	0801cf50 	.word	0x0801cf50
 8002bdc:	0801cf68 	.word	0x0801cf68

08002be0 <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0c8      	sub	sp, #288	; 0x120
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bee:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 8002bf0:	f107 020c 	add.w	r2, r7, #12
 8002bf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002bf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	f006 fdc2 	bl	8009788 <ndefRecordToType>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 8002c0a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <ndefRecordDumpType+0x38>
    {
        return err;
 8002c12:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002c16:	e02d      	b.n	8002c74 <ndefRecordDumpType+0x94>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c1e:	e024      	b.n	8002c6a <ndefRecordDumpType+0x8a>
    {
        if (type.id == typeDumpTable[i].typeId)
 8002c20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	4915      	ldr	r1, [pc, #84]	; (8002c80 <ndefRecordDumpType+0xa0>)
 8002c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c30:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d113      	bne.n	8002c60 <ndefRecordDumpType+0x80>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <ndefRecordDumpType+0xa0>)
 8002c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <ndefRecordDumpType+0x80>
            {
                return typeDumpTable[i].dump(&type);
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <ndefRecordDumpType+0xa0>)
 8002c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e009      	b.n	8002c74 <ndefRecordDumpType+0x94>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8002c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c64:	3301      	adds	r3, #1
 8002c66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d9d6      	bls.n	8002c20 <ndefRecordDumpType+0x40>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8002c72:	230f      	movs	r3, #15
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	0801d020 	.word	0x0801d020

08002c84 <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	e05e      	b.n	8002d5a <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	4831      	ldr	r0, [pc, #196]	; (8002d64 <ndefBufferDumpLine+0xe0>)
 8002ca0:	f7fd fcf0 	bl	8000684 <logUsart>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e00c      	b.n	8002cc4 <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4413      	add	r3, r2
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482b      	ldr	r0, [pc, #172]	; (8002d68 <ndefBufferDumpLine+0xe4>)
 8002cba:	f7fd fce3 	bl	8000684 <logUsart>
    for (j = 0; j < remaining; j++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3ee      	bcc.n	8002caa <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e005      	b.n	8002cde <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 8002cd2:	4826      	ldr	r0, [pc, #152]	; (8002d6c <ndefBufferDumpLine+0xe8>)
 8002cd4:	f7fd fcd6 	bl	8000684 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3f3      	bcc.n	8002cd2 <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 8002cea:	4821      	ldr	r0, [pc, #132]	; (8002d70 <ndefBufferDumpLine+0xec>)
 8002cec:	f7fd fcca 	bl	8000684 <logUsart>
    for (j = 0; j < remaining; j++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e01a      	b.n	8002d2c <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fb5a 	bl	80023bc <isPrintableASCII>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <ndefBufferDumpLine+0x98>
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	e000      	b.n	8002d1e <ndefBufferDumpLine+0x9a>
 8002d1c:	232e      	movs	r3, #46	; 0x2e
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4814      	ldr	r0, [pc, #80]	; (8002d74 <ndefBufferDumpLine+0xf0>)
 8002d22:	f7fd fcaf 	bl	8000684 <logUsart>
    for (j = 0; j < remaining; j++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3e0      	bcc.n	8002cf6 <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e005      	b.n	8002d46 <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 8002d3a:	480f      	ldr	r0, [pc, #60]	; (8002d78 <ndefBufferDumpLine+0xf4>)
 8002d3c:	f7fd fca2 	bl	8000684 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f3      	bcc.n	8002d3a <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 8002d52:	480a      	ldr	r0, [pc, #40]	; (8002d7c <ndefBufferDumpLine+0xf8>)
 8002d54:	f7fd fc96 	bl	8000684 <logUsart>

    return ERR_NONE;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	0801cf7c 	.word	0x0801cf7c
 8002d68:	0801cf88 	.word	0x0801cf88
 8002d6c:	0801cf90 	.word	0x0801cf90
 8002d70:	0801cf94 	.word	0x0801cf94
 8002d74:	0801cf98 	.word	0x0801cf98
 8002d78:	0801cf9c 	.word	0x0801cf9c
 8002d7c:	0801cfa0 	.word	0x0801cfa0

08002d80 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 8002d92:	2308      	movs	r3, #8
 8002d94:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <ndefBufferDump+0x22>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 8002da2:	2307      	movs	r3, #7
 8002da4:	e045      	b.n	8002e32 <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	4820      	ldr	r0, [pc, #128]	; (8002e3c <ndefBufferDump+0xbc>)
 8002dbc:	f7fd fc62 	bl	8000684 <logUsart>
    if (bufPayload->buffer == NULL)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8002dc8:	481d      	ldr	r0, [pc, #116]	; (8002e40 <ndefBufferDump+0xc0>)
 8002dca:	f7fd fc5b 	bl	8000684 <logUsart>
        return ERR_NONE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e02f      	b.n	8002e32 <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8002dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d201      	bcs.n	8002dec <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e012      	b.n	8002e18 <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	bf28      	it	cs
 8002dfe:	4613      	movcs	r3, r2
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	f7ff ff3e 	bl	8002c84 <ndefBufferDumpLine>
        remaining -= lineLength;
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3e8      	bcc.n	8002df2 <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d202      	bcs.n	8002e30 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <ndefBufferDump+0xc4>)
 8002e2c:	f7fd fc2a 	bl	8000684 <logUsart>
    }

    return ERR_NONE;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0801cfa8 	.word	0x0801cfa8
 8002e40:	0801cfbc 	.word	0x0801cfbc
 8002e44:	0801cfdc 	.word	0x0801cfdc

08002e48 <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint8_t test = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	74fb      	strb	r3, [r7, #19]

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <ndefBufferPrint+0x2a>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <ndefBufferPrint+0x2a>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <ndefBufferPrint+0x2a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <ndefBufferPrint+0x2e>
    {
        return ERR_PARAM;
 8002e72:	2307      	movs	r3, #7
 8002e74:	e02e      	b.n	8002ed4 <ndefBufferPrint+0x8c>
    }

    platformLog("%s", prefix);
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	4818      	ldr	r0, [pc, #96]	; (8002edc <ndefBufferPrint+0x94>)
 8002e7a:	f7fd fc03 	bl	8000684 <logUsart>
    for (i = 0; i < bufString->length; i++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e00e      	b.n	8002ea2 <ndefBufferPrint+0x5a>
    {
        platformLog("%c", bufString->buffer[i]);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <ndefBufferPrint+0x98>)
 8002e92:	f7fd fbf7 	bl	8000684 <logUsart>
        test++;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < bufString->length; i++)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d3eb      	bcc.n	8002e84 <ndefBufferPrint+0x3c>
    }
    platformLog("%s", suffix);
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	480b      	ldr	r0, [pc, #44]	; (8002edc <ndefBufferPrint+0x94>)
 8002eb0:	f7fd fbe8 	bl	8000684 <logUsart>

    switch(test)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d107      	bne.n	8002eca <ndefBufferPrint+0x82>
            {

                case 4:
                	platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <ndefBufferPrint+0x9c>)
 8002ec0:	f001 ff35 	bl	8004d2e <HAL_GPIO_WritePin>
                	ringbell();
 8002ec4:	f7fd fec6 	bl	8000c54 <ringbell>
                    break;
 8002ec8:	e003      	b.n	8002ed2 <ndefBufferPrint+0x8a>
//                case NDEF_DEMO_FORMAT_TAG:
//
//                    break;

                default:
                	platformLog("Selection exit\r\n");
 8002eca:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <ndefBufferPrint+0xa0>)
 8002ecc:	f7fd fbda 	bl	8000684 <logUsart>
                    break;
 8002ed0:	bf00      	nop
            }

    //platformLog("%d\n\r", test);

    return ERR_NONE;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	0801cff0 	.word	0x0801cff0
 8002ee0:	0801cdb4 	.word	0x0801cdb4
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	0801cff4 	.word	0x0801cff4

08002eec <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8002efe:	2307      	movs	r3, #7
 8002f00:	e00d      	b.n	8002f1e <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4619      	mov	r1, r3
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff ff96 	bl	8002e48 <ndefBufferPrint>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <spiInit+0x28>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20003120 	.word	0x20003120

08002f54 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <spiTxRx+0x6c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <spiTxRx+0x1a>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e024      	b.n	8002fb8 <spiTxRx+0x64>
  
  if(length > SPI_BUF_LEN)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b61      	cmp	r3, #97	; 0x61
 8002f72:	d901      	bls.n	8002f78 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01f      	b.n	8002fb8 <spiTxRx+0x64>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	461a      	mov	r2, r3
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <spiTxRx+0x70>)
 8002f86:	f018 fa31 	bl	801b3ec <memcpy>
 8002f8a:	e005      	b.n	8002f98 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2100      	movs	r1, #0
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <spiTxRx+0x70>)
 8002f94:	f018 fa52 	bl	801b43c <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <spiTxRx+0x6c>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <spiTxRx+0x52>
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	e000      	b.n	8002fa8 <spiTxRx+0x54>
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <spiTxRx+0x74>)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fae:	9100      	str	r1, [sp, #0]
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <spiTxRx+0x70>)
 8002fb2:	f004 fe9a 	bl	8007cea <HAL_SPI_TransmitReceive>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20003120 	.word	0x20003120
 8002fc4:	20003058 	.word	0x20003058
 8002fc8:	200030bc 	.word	0x200030bc

08002fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_MspInit+0x5c>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_MspInit+0x5c>)
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	6253      	str	r3, [r2, #36]	; 0x24
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_MspInit+0x5c>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_MspInit+0x5c>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_MspInit+0x5c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_MspInit+0x5c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_MspInit+0x5c>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_MspInit+0x5c>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6253      	str	r3, [r2, #36]	; 0x24
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_MspInit+0x5c>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800301a:	2007      	movs	r0, #7
 800301c:	f001 fc50 	bl	80048c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800

0800302c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_I2C_MspInit+0x9c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d138      	bne.n	80030c0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	61d3      	str	r3, [r2, #28]
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800306a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306c:	2312      	movs	r3, #18
 800306e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003070:	2301      	movs	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003074:	2303      	movs	r3, #3
 8003076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003078:	2304      	movs	r3, #4
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4619      	mov	r1, r3
 8003082:	4813      	ldr	r0, [pc, #76]	; (80030d0 <HAL_I2C_MspInit+0xa4>)
 8003084:	f001 fcac 	bl	80049e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 800308e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003092:	6253      	str	r3, [r2, #36]	; 0x24
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_I2C_MspInit+0xa0>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	201f      	movs	r0, #31
 80030a6:	f001 fc16 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80030aa:	201f      	movs	r0, #31
 80030ac:	f001 fc2f 	bl	800490e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	2020      	movs	r0, #32
 80030b6:	f001 fc0e 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80030ba:	2020      	movs	r0, #32
 80030bc:	f001 fc27 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030c0:	bf00      	nop
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40005400 	.word	0x40005400
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020400 	.word	0x40020400

080030d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <HAL_SPI_MspInit+0x7c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d127      	bne.n	8003146 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_SPI_MspInit+0x80>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_SPI_MspInit+0x80>)
 80030fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_SPI_MspInit+0x80>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_SPI_MspInit+0x80>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_SPI_MspInit+0x80>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_SPI_MspInit+0x80>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003126:	23e0      	movs	r3, #224	; 0xe0
 8003128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003132:	2303      	movs	r3, #3
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003136:	2305      	movs	r3, #5
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	4805      	ldr	r0, [pc, #20]	; (8003158 <HAL_SPI_MspInit+0x84>)
 8003142:	f001 fc4d 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003146:	bf00      	nop
 8003148:	3728      	adds	r7, #40	; 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40013000 	.word	0x40013000
 8003154:	40023800 	.word	0x40023800
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <HAL_UART_MspInit+0xd8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d129      	bne.n	80031d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003188:	6253      	str	r3, [r2, #36]	; 0x24
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_UART_MspInit+0xdc>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_UART_MspInit+0xdc>)
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b8:	2301      	movs	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031c0:	2308      	movs	r3, #8
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	481c      	ldr	r0, [pc, #112]	; (800323c <HAL_UART_MspInit+0xe0>)
 80031cc:	f001 fc08 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031d0:	e02c      	b.n	800322c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <HAL_UART_MspInit+0xe4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d127      	bne.n	800322c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e6:	6253      	str	r3, [r2, #36]	; 0x24
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	61d3      	str	r3, [r2, #28]
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800320c:	230c      	movs	r3, #12
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800321c:	2307      	movs	r3, #7
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	4807      	ldr	r0, [pc, #28]	; (8003244 <HAL_UART_MspInit+0xe8>)
 8003228:	f001 fbda 	bl	80049e0 <HAL_GPIO_Init>
}
 800322c:	bf00      	nop
 800322e:	3730      	adds	r7, #48	; 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40004c00 	.word	0x40004c00
 8003238:	40023800 	.word	0x40023800
 800323c:	40020800 	.word	0x40020800
 8003240:	40004400 	.word	0x40004400
 8003244:	40020000 	.word	0x40020000

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800324c:	e7fe      	b.n	800324c <NMI_Handler+0x4>

0800324e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <HardFault_Handler+0x4>

08003254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <MemManage_Handler+0x4>

0800325a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800325e:	e7fe      	b.n	800325e <BusFault_Handler+0x4>

08003260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <UsageFault_Handler+0x4>

08003266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800328e:	f001 fa0d 	bl	80046ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}

08003296 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800329a:	2001      	movs	r0, #1
 800329c:	f001 fd78 	bl	8004d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 80032a0:	f000 fffc 	bl	800429c <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <I2C1_EV_IRQHandler+0x10>)
 80032ae:	f001 ffd3 	bl	8005258 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200003a8 	.word	0x200003a8

080032bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <I2C1_ER_IRQHandler+0x10>)
 80032c2:	f002 f93a 	bl	800553a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200003a8 	.word	0x200003a8

080032d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <_sbrk+0x5c>)
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <_sbrk+0x60>)
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <_sbrk+0x64>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <_sbrk+0x64>)
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <_sbrk+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d207      	bcs.n	8003310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003300:	f018 f83a 	bl	801b378 <__errno>
 8003304:	4603      	mov	r3, r0
 8003306:	220c      	movs	r2, #12
 8003308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e009      	b.n	8003324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <_sbrk+0x64>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	4a05      	ldr	r2, [pc, #20]	; (8003334 <_sbrk+0x64>)
 8003320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20014000 	.word	0x20014000
 8003330:	00000400 	.word	0x00000400
 8003334:	20003124 	.word	0x20003124
 8003338:	20003de0 	.word	0x20003de0

0800333c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003348:	480c      	ldr	r0, [pc, #48]	; (800337c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800334a:	490d      	ldr	r1, [pc, #52]	; (8003380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800334e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003350:	e002      	b.n	8003358 <LoopCopyDataInit>

08003352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003356:	3304      	adds	r3, #4

08003358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800335a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800335c:	d3f9      	bcc.n	8003352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003360:	4c0a      	ldr	r4, [pc, #40]	; (800338c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003364:	e001      	b.n	800336a <LoopFillZerobss>

08003366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003368:	3204      	adds	r2, #4

0800336a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800336a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800336c:	d3fb      	bcc.n	8003366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800336e:	f7ff ffe5 	bl	800333c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003372:	f018 f807 	bl	801b384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003376:	f7fd fa27 	bl	80007c8 <main>
  bx lr
 800337a:	4770      	bx	lr
  ldr r0, =_sdata
 800337c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003380:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8003384:	0801d760 	.word	0x0801d760
  ldr r2, =_sbss
 8003388:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800338c:	20003de0 	.word	0x20003de0

08003390 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003390:	e7fe      	b.n	8003390 <ADC1_IRQHandler>

08003392 <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 8003392:	b580      	push	{r7, lr}
 8003394:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 8003396:	2148      	movs	r1, #72	; 0x48
 8003398:	2002      	movs	r0, #2
 800339a:	f000 fd74 	bl	8003e86 <st25r3911SetRegisterBits>
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80033a6:	2148      	movs	r1, #72	; 0x48
 80033a8:	2002      	movs	r0, #2
 80033aa:	f000 fd49 	bl	8003e40 <st25r3911ClrRegisterBits>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	2002      	movs	r0, #2
 80033bc:	f000 f9ba 	bl	8003734 <st25r3911CheckReg>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f083 0301 	eor.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d011      	beq.n	80033f0 <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 80033cc:	2080      	movs	r0, #128	; 0x80
 80033ce:	f001 f86f 	bl	80044b0 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80033d2:	2080      	movs	r0, #128	; 0x80
 80033d4:	f001 f8a8 	bl	8004528 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	2100      	movs	r1, #0
 80033dc:	2002      	movs	r0, #2
 80033de:	f000 fd86 	bl	8003eee <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 80033e2:	210a      	movs	r1, #10
 80033e4:	2080      	movs	r0, #128	; 0x80
 80033e6:	f001 f80f 	bl	8004408 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80033ea:	2080      	movs	r0, #128	; 0x80
 80033ec:	f001 f8a8 	bl	8004540 <st25r3911DisableInterrupts>
    }
    
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 80033fa:	20c1      	movs	r0, #193	; 0xc1
 80033fc:	f000 fe62 	bl	80040c4 <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 8003400:	2100      	movs	r1, #0
 8003402:	2002      	movs	r0, #2
 8003404:	f000 fcd0 	bl	8003da8 <st25r3911WriteRegister>

    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0,
 8003408:	2218      	movs	r2, #24
 800340a:	2100      	movs	r1, #0
 800340c:	2001      	movs	r0, #1
 800340e:	f000 fd6e 	bl	8003eee <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 8003412:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003416:	f001 f893 	bl	8004540 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 800341a:	f001 f89d 	bl	8004558 <st25r3911ClearInterrupts>

    st25r3911OscOn();
 800341e:	f7ff ffc8 	bl	80033b2 <st25r3911OscOn>

    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 8003422:	2000      	movs	r0, #0
 8003424:	f000 f928 	bl	8003678 <st25r3911MeasureVoltage>
 8003428:	4603      	mov	r3, r0
 800342a:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003432:	d201      	bcs.n	8003438 <st25r3911Initialize+0x44>
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	e000      	b.n	800343a <st25r3911Initialize+0x46>
 8003438:	2300      	movs	r3, #0
 800343a:	461a      	mov	r2, r3
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	2001      	movs	r0, #1
 8003440:	f000 fd55 	bl	8003eee <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 8003444:	f7ff ffad 	bl	80033a2 <st25r3911TxRxOff>
    
    return;
 8003448:	bf00      	nop
}
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 8003458:	2300      	movs	r3, #0
 800345a:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	202a      	movs	r0, #42	; 0x2a
 8003460:	f000 fd11 	bl	8003e86 <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	202a      	movs	r0, #42	; 0x2a
 8003468:	f000 fcea 	bl	8003e40 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 800346c:	f107 030d 	add.w	r3, r7, #13
 8003470:	2205      	movs	r2, #5
 8003472:	212b      	movs	r1, #43	; 0x2b
 8003474:	20d6      	movs	r0, #214	; 0xd6
 8003476:	f000 fad5 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4619      	mov	r1, r3
 8003480:	2001      	movs	r0, #1
 8003482:	f000 fb5b 	bl	8003b3c <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 8003486:	7b7b      	ldrb	r3, [r7, #13]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	b2db      	uxtb	r3, r3
 800348c:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 800348e:	7b7b      	ldrb	r3, [r7, #13]
 8003490:	3b05      	subs	r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02b      	beq.n	80034f4 <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 800349c:	7b3b      	ldrb	r3, [r7, #12]
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da16      	bge.n	80034d2 <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80034aa:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	7b7b      	ldrb	r3, [r7, #13]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	0089      	lsls	r1, r1, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	4619      	mov	r1, r3
 80034bc:	0088      	lsls	r0, r1, #2
 80034be:	4619      	mov	r1, r3
 80034c0:	4603      	mov	r3, r0
 80034c2:	440b      	add	r3, r1
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	e010      	b.n	80034f4 <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f640 723c 	movw	r2, #3900	; 0xf3c
 80034d8:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	7b7b      	ldrb	r3, [r7, #13]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	0109      	lsls	r1, r1, #4
 80034e6:	1acb      	subs	r3, r1, r3
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 80034f4:	89fb      	ldrh	r3, [r7, #14]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	220a      	movs	r2, #10
 800350a:	2120      	movs	r1, #32
 800350c:	20d3      	movs	r0, #211	; 0xd3
 800350e:	f000 fa89 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	220a      	movs	r2, #10
 8003526:	2120      	movs	r1, #32
 8003528:	20d9      	movs	r0, #217	; 0xd9
 800352a:	f000 fa7b 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	220a      	movs	r2, #10
 8003542:	2120      	movs	r1, #32
 8003544:	20de      	movs	r0, #222	; 0xde
 8003546:	f000 fa6d 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	220a      	movs	r2, #10
 800355e:	2123      	movs	r1, #35	; 0x23
 8003560:	20d8      	movs	r0, #216	; 0xd8
 8003562:	f000 fa5f 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 8003576:	21f8      	movs	r1, #248	; 0xf8
 8003578:	202e      	movs	r0, #46	; 0x2e
 800357a:	f000 fc61 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 800357e:	f107 030d 	add.w	r3, r7, #13
 8003582:	2204      	movs	r2, #4
 8003584:	212f      	movs	r1, #47	; 0x2f
 8003586:	20dd      	movs	r0, #221	; 0xdd
 8003588:	f000 fa4c 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>
 800358c:	4603      	mov	r3, r0
 800358e:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003590:	7b7b      	ldrb	r3, [r7, #13]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 800359a:	7b7b      	ldrb	r3, [r7, #13]
 800359c:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e008      	b.n	80035c0 <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 80035b4:	7b7b      	ldrb	r3, [r7, #13]
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	460a      	mov	r2, r1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80035d8:	f107 030f 	add.w	r3, r7, #15
 80035dc:	4619      	mov	r1, r3
 80035de:	2004      	movs	r0, #4
 80035e0:	f000 faac 	bl	8003b3c <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d00e      	beq.n	8003608 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 80035ea:	79bb      	ldrb	r3, [r7, #6]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d901      	bls.n	80035f4 <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80035f0:	2307      	movs	r3, #7
 80035f2:	e025      	b.n	8003640 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	f023 030f 	bic.w	r3, r3, #15
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	4313      	orrs	r3, r2
 8003604:	b2db      	uxtb	r3, r3
 8003606:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2bff      	cmp	r3, #255	; 0xff
 800360c:	d012      	beq.n	8003634 <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d901      	bls.n	8003618 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 8003614:	2307      	movs	r3, #7
 8003616:	e013      	b.n	8003640 <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b2db      	uxtb	r3, r3
 8003620:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	b25a      	sxtb	r2, r3
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	b25b      	sxtb	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	b25b      	sxtb	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4619      	mov	r1, r3
 8003638:	2004      	movs	r0, #4
 800363a:	f000 fbb5 	bl	8003da8 <st25r3911WriteRegister>
    
    return ERR_NONE;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	461a      	mov	r2, r3
 8003656:	2106      	movs	r1, #6
 8003658:	202a      	movs	r0, #42	; 0x2a
 800365a:	f000 fc32 	bl	8003ec2 <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 800365e:	f107 030f 	add.w	r3, r7, #15
 8003662:	220a      	movs	r2, #10
 8003664:	2120      	movs	r1, #32
 8003666:	20df      	movs	r0, #223	; 0xdf
 8003668:	f000 f9dc 	bl	8003a24 <st25r3911ExecuteCommandAndGetResult>

    return result;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ffdf 	bl	8003648 <st25r3911MeasurePowerSupply>
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	0052      	lsls	r2, r2, #1
 8003696:	441a      	add	r2, r3
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <st25r3911MeasureVoltage+0x50>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	89bb      	ldrh	r3, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	81bb      	strh	r3, [r7, #12]

    return mV;
 80036bc:	89bb      	ldrh	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	10624dd3 	.word	0x10624dd3

080036cc <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	80fb      	strh	r3, [r7, #6]
 80036d8:	4613      	mov	r3, r2
 80036da:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f811 	bl	8003706 <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 80036e4:	797b      	ldrb	r3, [r7, #5]
 80036e6:	461a      	mov	r2, r3
 80036e8:	21e0      	movs	r1, #224	; 0xe0
 80036ea:	2011      	movs	r0, #17
 80036ec:	f000 fbff 	bl	8003eee <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 80036f0:	797b      	ldrb	r3, [r7, #5]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 80036f6:	20e0      	movs	r0, #224	; 0xe0
 80036f8:	f000 fce4 	bl	80040c4 <st25r3911ExecuteCommand>
    }

    return;
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
}
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	b29b      	uxth	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	2012      	movs	r0, #18
 800371c:	f000 fb44 	bl	8003da8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	2013      	movs	r0, #19
 8003728:	f000 fb3e 	bl	8003da8 <st25r3911WriteRegister>

    return;
 800372c:	bf00      	nop
}
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
 800373e:	460b      	mov	r3, r1
 8003740:	71bb      	strb	r3, [r7, #6]
 8003742:	4613      	mov	r3, r2
 8003744:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 800374a:	f107 020f 	add.w	r2, r7, #15
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f9f2 	bl	8003b3c <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	4013      	ands	r3, r2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	797a      	ldrb	r2, [r7, #5]
 8003762:	429a      	cmp	r2, r3
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8003780:	f107 030f 	add.w	r3, r7, #15
 8003784:	4619      	mov	r1, r3
 8003786:	203f      	movs	r0, #63	; 0x3f
 8003788:	f000 f9d8 	bl	8003b3c <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d001      	beq.n	800379a <st25r3911CheckChipID+0x26>
    {
        return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e009      	b.n	80037ae <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d312      	bcc.n	8003800 <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 80037da:	2301      	movs	r3, #1
 80037dc:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	333f      	adds	r3, #63	; 0x3f
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d304      	bcc.n	80037f8 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 80037ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f2:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 80037f4:	2307      	movs	r3, #7
 80037f6:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	019b      	lsls	r3, r3, #6
 80037fc:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <st25r3911SetNoResponseTime_64fcs+0x78>)
 80037fe:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 8003800:	7b7b      	ldrb	r3, [r7, #13]
 8003802:	461a      	mov	r2, r3
 8003804:	2101      	movs	r1, #1
 8003806:	2011      	movs	r0, #17
 8003808:	f000 fb71 	bl	8003eee <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	200f      	movs	r0, #15
 8003816:	f000 fac7 	bl	8003da8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	2010      	movs	r0, #16
 8003822:	f000 fac1 	bl	8003da8 <st25r3911WriteRegister>

    return err;
 8003826:	89fb      	ldrh	r3, [r7, #14]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20003128 	.word	0x20003128

08003834 <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4623      	mov	r3, r4
 8003844:	71fb      	strb	r3, [r7, #7]
 8003846:	4603      	mov	r3, r0
 8003848:	71bb      	strb	r3, [r7, #6]
 800384a:	460b      	mov	r3, r1
 800384c:	717b      	strb	r3, [r7, #5]
 800384e:	4613      	mov	r3, r2
 8003850:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	2bc8      	cmp	r3, #200	; 0xc8
 8003856:	d007      	beq.n	8003868 <st25r3911PerformCollisionAvoidance+0x34>
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2bca      	cmp	r3, #202	; 0xca
 800385c:	d004      	beq.n	8003868 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	2bc9      	cmp	r3, #201	; 0xc9
 8003862:	d001      	beq.n	8003868 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 8003864:	2307      	movs	r3, #7
 8003866:	e056      	b.n	8003916 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8003868:	79bb      	ldrb	r3, [r7, #6]
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	d102      	bne.n	8003874 <st25r3911PerformCollisionAvoidance+0x40>
 800386e:	797b      	ldrb	r3, [r7, #5]
 8003870:	2bff      	cmp	r3, #255	; 0xff
 8003872:	d01e      	beq.n	80038b2 <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8003878:	79bb      	ldrb	r3, [r7, #6]
 800387a:	2bff      	cmp	r3, #255	; 0xff
 800387c:	d003      	beq.n	8003886 <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003884:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8003886:	797b      	ldrb	r3, [r7, #5]
 8003888:	2bff      	cmp	r3, #255	; 0xff
 800388a:	d003      	beq.n	8003894 <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	f043 030f 	orr.w	r3, r3, #15
 8003892:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8003894:	79bb      	ldrb	r3, [r7, #6]
 8003896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389a:	b2da      	uxtb	r2, r3
 800389c:	797b      	ldrb	r3, [r7, #5]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4619      	mov	r1, r3
 80038ac:	2029      	movs	r0, #41	; 0x29
 80038ae:	f000 fb08 	bl	8003ec2 <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 80038b2:	793b      	ldrb	r3, [r7, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	2103      	movs	r1, #3
 80038be:	2009      	movs	r0, #9
 80038c0:	f000 fb15 	bl	8003eee <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80038c4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80038c8:	f000 fe2e 	bl	8004528 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80038cc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80038d0:	f000 fdee 	bl	80044b0 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fbf4 	bl	80040c4 <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 80038dc:	210a      	movs	r1, #10
 80038de:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80038e2:	f000 fd91 	bl	8004408 <st25r3911WaitForInterruptsTimed>
 80038e6:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 80038e8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80038ec:	f000 fde0 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 80038f0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80038f4:	f000 fe24 	bl	8004540 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 8003902:	231d      	movs	r3, #29
 8003904:	e007      	b.n	8003916 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 8003914:	230c      	movs	r3, #12
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}

0800391e <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	201e      	movs	r0, #30
 800392e:	f000 fa3b 	bl	8003da8 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	201d      	movs	r0, #29
 800393c:	f000 fa34 	bl	8003da8 <st25r3911WriteRegister>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 800395c:	2378      	movs	r3, #120	; 0x78
 800395e:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d903      	bls.n	8003970 <st25r3911StreamConfigure+0x28>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d901      	bls.n	8003974 <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8003970:	2307      	movs	r3, #7
 8003972:	e053      	b.n	8003a1c <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	f1c3 0304 	rsb	r3, r3, #4
 800397c:	b2db      	uxtb	r3, r3
 800397e:	015b      	lsls	r3, r3, #5
 8003980:	b2da      	uxtb	r2, r3
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	4313      	orrs	r3, r2
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e01b      	b.n	80039c2 <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 800398a:	2370      	movs	r3, #112	; 0x70
 800398c:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d903      	bls.n	800399e <st25r3911StreamConfigure+0x56>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d901      	bls.n	80039a2 <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 800399e:	2307      	movs	r3, #7
 80039a0:	e03c      	b.n	8003a1c <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	785b      	ldrb	r3, [r3, #1]
 80039a6:	f1c3 0306 	rsb	r3, r3, #6
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	015b      	lsls	r3, r3, #5
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	78db      	ldrb	r3, [r3, #3]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 80039be:	2307      	movs	r3, #7
 80039c0:	e02c      	b.n	8003a1c <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	789b      	ldrb	r3, [r3, #2]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <st25r3911StreamConfigure+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	789b      	ldrb	r3, [r3, #2]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	d901      	bls.n	80039d6 <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80039d2:	2307      	movs	r3, #7
 80039d4:	e022      	b.n	8003a1c <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	78db      	ldrb	r3, [r3, #3]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d901      	bls.n	80039f2 <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80039ee:	2307      	movs	r3, #7
 80039f0:	e014      	b.n	8003a1c <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	b25a      	sxtb	r2, r3
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	4619      	mov	r1, r3
 8003a08:	2008      	movs	r0, #8
 8003a0a:	f000 f9cd 	bl	8003da8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8003a0e:	7bbb      	ldrb	r3, [r7, #14]
 8003a10:	461a      	mov	r2, r3
 8003a12:	2178      	movs	r1, #120	; 0x78
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 fa54 	bl	8003ec2 <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	460b      	mov	r3, r1
 8003a32:	71bb      	strb	r3, [r7, #6]
 8003a34:	4613      	mov	r3, r2
 8003a36:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003a38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a3c:	f000 fd74 	bl	8004528 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8003a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a44:	f000 fd34 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fb3a 	bl	80040c4 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8003a50:	797b      	ldrb	r3, [r7, #5]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a5a:	f000 fcd5 	bl	8004408 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8003a5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a62:	f000 fd6d 	bl	8004540 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8003a6c:	79bb      	ldrb	r3, [r7, #6]
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f863 	bl	8003b3c <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	db0b      	blt.n	8003aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4906      	ldr	r1, [pc, #24]	; (8003ab4 <__NVIC_EnableIRQ+0x34>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db12      	blt.n	8003af0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	490a      	ldr	r1, [pc, #40]	; (8003afc <__NVIC_DisableIRQ+0x44>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	3320      	adds	r3, #32
 8003ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae4:	f3bf 8f4f 	dsb	sy
}
 8003ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aea:	f3bf 8f6f 	isb	sy
}
 8003aee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e100 	.word	0xe000e100

08003b00 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003b16:	2201      	movs	r2, #1
 8003b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b1c:	4806      	ldr	r0, [pc, #24]	; (8003b38 <st25r3911CheckFieldSetLED+0x38>)
 8003b1e:	f001 f906 	bl	8004d2e <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8003b22:	e005      	b.n	8003b30 <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b2a:	4803      	ldr	r0, [pc, #12]	; (8003b38 <st25r3911CheckFieldSetLED+0x38>)
 8003b2c:	f001 f8ff 	bl	8004d2e <HAL_GPIO_WritePin>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020000 	.word	0x40020000

08003b3c <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <st25r3911ReadRegister+0x94>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <st25r3911ReadRegister+0x94>)
 8003b52:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b54:	f3bf 8f4f 	dsb	sy
}
 8003b58:	bf00      	nop
 8003b5a:	2006      	movs	r0, #6
 8003b5c:	f7ff ffac 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b60:	f3bf 8f4f 	dsb	sy
}
 8003b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b66:	f3bf 8f6f 	isb	sy
}
 8003b6a:	bf00      	nop
    platformSpiSelect();
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	4818      	ldr	r0, [pc, #96]	; (8003bd4 <st25r3911ReadRegister+0x98>)
 8003b72:	f001 f8dc 	bl	8004d2e <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8003b84:	f107 010c 	add.w	r1, r7, #12
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f9e0 	bl	8002f54 <spiTxRx>
  
    if(value != NULL)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <st25r3911ReadRegister+0x64>
    {
      *value = buf[1];
 8003b9a:	7b7a      	ldrb	r2, [r7, #13]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2140      	movs	r1, #64	; 0x40
 8003ba4:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <st25r3911ReadRegister+0x98>)
 8003ba6:	f001 f8c2 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <st25r3911ReadRegister+0x94>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <st25r3911ReadRegister+0x94>)
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <st25r3911ReadRegister+0x94>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <st25r3911ReadRegister+0x8a>
 8003bbe:	2006      	movs	r0, #6
 8003bc0:	f7ff ff5e 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
}
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200004dc 	.word	0x200004dc
 8003bd4:	40020400 	.word	0x40020400

08003bd8 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8003bf2:	79bb      	ldrb	r3, [r7, #6]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d037      	beq.n	8003c68 <st25r3911ReadMultipleRegisters+0x90>
    {
        platformProtectST25R391xComm();
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <st25r3911ReadMultipleRegisters+0x98>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <st25r3911ReadMultipleRegisters+0x98>)
 8003c02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c04:	f3bf 8f4f 	dsb	sy
}
 8003c08:	bf00      	nop
 8003c0a:	2006      	movs	r0, #6
 8003c0c:	f7ff ff54 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c10:	f3bf 8f4f 	dsb	sy
}
 8003c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c16:	f3bf 8f6f 	isb	sy
}
 8003c1a:	bf00      	nop
        platformSpiSelect();
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	4814      	ldr	r0, [pc, #80]	; (8003c74 <st25r3911ReadMultipleRegisters+0x9c>)
 8003c22:	f001 f884 	bl	8004d2e <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8003c26:	f107 030f 	add.w	r3, r7, #15
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f990 	bl	8002f54 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f7ff f989 	bl	8002f54 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8003c42:	2201      	movs	r2, #1
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	480b      	ldr	r0, [pc, #44]	; (8003c74 <st25r3911ReadMultipleRegisters+0x9c>)
 8003c48:	f001 f871 	bl	8004d2e <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <st25r3911ReadMultipleRegisters+0x98>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <st25r3911ReadMultipleRegisters+0x98>)
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <st25r3911ReadMultipleRegisters+0x98>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <st25r3911ReadMultipleRegisters+0x90>
 8003c60:	2006      	movs	r0, #6
 8003c62:	f7ff ff0d 	bl	8003a80 <__NVIC_EnableIRQ>
    }
    
    return;
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
}
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200004dc 	.word	0x200004dc
 8003c74:	40020400 	.word	0x40020400

08003c78 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <st25r3911ReadTestRegister+0x98>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <st25r3911ReadTestRegister+0x98>)
 8003c8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c90:	f3bf 8f4f 	dsb	sy
}
 8003c94:	bf00      	nop
 8003c96:	2006      	movs	r0, #6
 8003c98:	f7ff ff0e 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c9c:	f3bf 8f4f 	dsb	sy
}
 8003ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ca2:	f3bf 8f6f 	isb	sy
}
 8003ca6:	bf00      	nop
    platformSpiSelect();
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	4819      	ldr	r0, [pc, #100]	; (8003d14 <st25r3911ReadTestRegister+0x9c>)
 8003cae:	f001 f83e 	bl	8004d2e <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003cb2:	23fc      	movs	r3, #252	; 0xfc
 8003cb4:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8003cc4:	f107 010c 	add.w	r1, r7, #12
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	2203      	movs	r2, #3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f940 	bl	8002f54 <spiTxRx>
    
    if(value != NULL)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <st25r3911ReadTestRegister+0x68>
    {
      *value = buf[2];
 8003cda:	7bba      	ldrb	r2, [r7, #14]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <st25r3911ReadTestRegister+0x9c>)
 8003ce6:	f001 f822 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <st25r3911ReadTestRegister+0x98>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <st25r3911ReadTestRegister+0x98>)
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <st25r3911ReadTestRegister+0x98>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <st25r3911ReadTestRegister+0x8e>
 8003cfe:	2006      	movs	r0, #6
 8003d00:	f7ff febe 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
}
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200004dc 	.word	0x200004dc
 8003d14:	40020400 	.word	0x40020400

08003d18 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <st25r3911WriteTestRegister+0x88>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <st25r3911WriteTestRegister+0x88>)
 8003d32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d34:	f3bf 8f4f 	dsb	sy
}
 8003d38:	bf00      	nop
 8003d3a:	2006      	movs	r0, #6
 8003d3c:	f7ff febc 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d40:	f3bf 8f4f 	dsb	sy
}
 8003d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d46:	f3bf 8f6f 	isb	sy
}
 8003d4a:	bf00      	nop
    platformSpiSelect();
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	4814      	ldr	r0, [pc, #80]	; (8003da4 <st25r3911WriteTestRegister+0x8c>)
 8003d52:	f000 ffec 	bl	8004d2e <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8003d56:	23fc      	movs	r3, #252	; 0xfc
 8003d58:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	2203      	movs	r2, #3
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f8f2 	bl	8002f54 <spiTxRx>
  
    platformSpiDeselect();
 8003d70:	2201      	movs	r2, #1
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	480b      	ldr	r0, [pc, #44]	; (8003da4 <st25r3911WriteTestRegister+0x8c>)
 8003d76:	f000 ffda 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <st25r3911WriteTestRegister+0x88>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <st25r3911WriteTestRegister+0x88>)
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <st25r3911WriteTestRegister+0x88>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <st25r3911WriteTestRegister+0x7e>
 8003d8e:	2006      	movs	r0, #6
 8003d90:	f7ff fe76 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
}
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200004dc 	.word	0x200004dc
 8003da4:	40020400 	.word	0x40020400

08003da8 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	460a      	mov	r2, r1
 8003db2:	71fb      	strb	r3, [r7, #7]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d103      	bne.n	8003dc6 <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8003dbe:	79bb      	ldrb	r3, [r7, #6]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fe9d 	bl	8003b00 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <st25r3911WriteRegister+0x90>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <st25r3911WriteRegister+0x90>)
 8003dd0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dd2:	f3bf 8f4f 	dsb	sy
}
 8003dd6:	bf00      	nop
 8003dd8:	2006      	movs	r0, #6
 8003dda:	f7ff fe6d 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003dde:	f3bf 8f4f 	dsb	sy
}
 8003de2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003de4:	f3bf 8f6f 	isb	sy
}
 8003de8:	bf00      	nop
    platformSpiSelect();
 8003dea:	2200      	movs	r2, #0
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	4813      	ldr	r0, [pc, #76]	; (8003e3c <st25r3911WriteRegister+0x94>)
 8003df0:	f000 ff9d 	bl	8004d2e <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8003df8:	79bb      	ldrb	r3, [r7, #6]
 8003dfa:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	2202      	movs	r2, #2
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f8a5 	bl	8002f54 <spiTxRx>
    
    platformSpiDeselect();
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	480b      	ldr	r0, [pc, #44]	; (8003e3c <st25r3911WriteRegister+0x94>)
 8003e10:	f000 ff8d 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <st25r3911WriteRegister+0x90>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <st25r3911WriteRegister+0x90>)
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <st25r3911WriteRegister+0x90>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d103      	bne.n	8003e30 <st25r3911WriteRegister+0x88>
 8003e28:	2006      	movs	r0, #6
 8003e2a:	f7ff fe29 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
}
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200004dc 	.word	0x200004dc
 8003e3c:	40020400 	.word	0x40020400

08003e40 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	460a      	mov	r2, r1
 8003e4a:	71fb      	strb	r3, [r7, #7]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003e50:	f107 020f 	add.w	r2, r7, #15
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fe6f 	bl	8003b3c <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8003e5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	b25a      	sxtb	r2, r3
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff95 	bl	8003da8 <st25r3911WriteRegister>
    
    return;
 8003e7e:	bf00      	nop
}
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	460a      	mov	r2, r1
 8003e90:	71fb      	strb	r3, [r7, #7]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003e96:	f107 020f 	add.w	r2, r7, #15
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fe4c 	bl	8003b3c <st25r3911ReadRegister>
    tmp |= set_mask;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	79bb      	ldrb	r3, [r7, #6]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff77 	bl	8003da8 <st25r3911WriteRegister>
    
    return;
 8003eba:	bf00      	nop
}
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	71bb      	strb	r3, [r7, #6]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8003ed4:	79ba      	ldrb	r2, [r7, #6]
 8003ed6:	797b      	ldrb	r3, [r7, #5]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	79b9      	ldrb	r1, [r7, #6]
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f804 	bl	8003eee <st25r3911ModifyRegister>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	71bb      	strb	r3, [r7, #6]
 8003efc:	4613      	mov	r3, r2
 8003efe:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8003f00:	f107 020f 	add.w	r2, r7, #15
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fe17 	bl	8003b3c <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8003f0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	b25a      	sxtb	r2, r3
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	797b      	ldrb	r3, [r7, #5]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff38 	bl	8003da8 <st25r3911WriteRegister>

    return;
 8003f38:	bf00      	nop
}
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	71bb      	strb	r3, [r7, #6]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8003f52:	f107 020e 	add.w	r2, r7, #14
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fe8c 	bl	8003c78 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8003f60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	b25a      	sxtb	r2, r3
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 8003f72:	797a      	ldrb	r2, [r7, #5]
 8003f74:	79bb      	ldrb	r3, [r7, #6]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fec6 	bl	8003d18 <st25r3911WriteTestRegister>
    
    return;
 8003f8c:	bf00      	nop
}
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d037      	beq.n	800401a <st25r3911WriteFifo+0x86>
    {  
        platformProtectST25R391xComm();
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <st25r3911WriteFifo+0x90>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <st25r3911WriteFifo+0x90>)
 8003fb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fb6:	f3bf 8f4f 	dsb	sy
}
 8003fba:	bf00      	nop
 8003fbc:	2006      	movs	r0, #6
 8003fbe:	f7ff fd7b 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc2:	f3bf 8f4f 	dsb	sy
}
 8003fc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fc8:	f3bf 8f6f 	isb	sy
}
 8003fcc:	bf00      	nop
        platformSpiSelect();
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	4815      	ldr	r0, [pc, #84]	; (8004028 <st25r3911WriteFifo+0x94>)
 8003fd4:	f000 feab 	bl	8004d2e <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8003fd8:	f107 030f 	add.w	r3, r7, #15
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe ffb7 	bl	8002f54 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	2100      	movs	r1, #0
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe ffb0 	bl	8002f54 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2140      	movs	r1, #64	; 0x40
 8003ff8:	480b      	ldr	r0, [pc, #44]	; (8004028 <st25r3911WriteFifo+0x94>)
 8003ffa:	f000 fe98 	bl	8004d2e <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <st25r3911WriteFifo+0x90>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <st25r3911WriteFifo+0x90>)
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <st25r3911WriteFifo+0x90>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <st25r3911WriteFifo+0x86>
 8004012:	2006      	movs	r0, #6
 8004014:	f7ff fd34 	bl	8003a80 <__NVIC_EnableIRQ>
    }

    return;
 8004018:	bf00      	nop
 800401a:	bf00      	nop
}
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	200004dc 	.word	0x200004dc
 8004028:	40020400 	.word	0x40020400

0800402c <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8004038:	23bf      	movs	r3, #191	; 0xbf
 800403a:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d037      	beq.n	80040b2 <st25r3911ReadFifo+0x86>
    {
        platformProtectST25R391xComm();
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <st25r3911ReadFifo+0x90>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <st25r3911ReadFifo+0x90>)
 800404c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800404e:	f3bf 8f4f 	dsb	sy
}
 8004052:	bf00      	nop
 8004054:	2006      	movs	r0, #6
 8004056:	f7ff fd2f 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800405a:	f3bf 8f4f 	dsb	sy
}
 800405e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004060:	f3bf 8f6f 	isb	sy
}
 8004064:	bf00      	nop
        platformSpiSelect();
 8004066:	2200      	movs	r2, #0
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	4815      	ldr	r0, [pc, #84]	; (80040c0 <st25r3911ReadFifo+0x94>)
 800406c:	f000 fe5f 	bl	8004d2e <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8004070:	f107 030f 	add.w	r3, r7, #15
 8004074:	2201      	movs	r2, #1
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe ff6b 	bl	8002f54 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	2000      	movs	r0, #0
 8004088:	f7fe ff64 	bl	8002f54 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 800408c:	2201      	movs	r2, #1
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <st25r3911ReadFifo+0x94>)
 8004092:	f000 fe4c 	bl	8004d2e <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <st25r3911ReadFifo+0x90>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	3b01      	subs	r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <st25r3911ReadFifo+0x90>)
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <st25r3911ReadFifo+0x90>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <st25r3911ReadFifo+0x86>
 80040aa:	2006      	movs	r0, #6
 80040ac:	f7ff fce8 	bl	8003a80 <__NVIC_EnableIRQ>
    }

    return;
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
}
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200004dc 	.word	0x200004dc
 80040c0:	40020400 	.word	0x40020400

080040c4 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2bc3      	cmp	r3, #195	; 0xc3
 80040d2:	d908      	bls.n	80040e6 <st25r3911ExecuteCommand+0x22>
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2bca      	cmp	r3, #202	; 0xca
 80040d8:	d805      	bhi.n	80040e6 <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e0:	481e      	ldr	r0, [pc, #120]	; (800415c <st25r3911ExecuteCommand+0x98>)
 80040e2:	f000 fe24 	bl	8004d2e <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <st25r3911ExecuteCommand+0x9c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <st25r3911ExecuteCommand+0x9c>)
 80040fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80040fc:	f3bf 8f4f 	dsb	sy
}
 8004100:	bf00      	nop
 8004102:	2006      	movs	r0, #6
 8004104:	f7ff fcd8 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004108:	f3bf 8f4f 	dsb	sy
}
 800410c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800410e:	f3bf 8f6f 	isb	sy
}
 8004112:	bf00      	nop
    platformSpiSelect();
 8004114:	2200      	movs	r2, #0
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	4812      	ldr	r0, [pc, #72]	; (8004164 <st25r3911ExecuteCommand+0xa0>)
 800411a:	f000 fe08 	bl	8004d2e <HAL_GPIO_WritePin>

    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 800411e:	f107 030f 	add.w	r3, r7, #15
 8004122:	2201      	movs	r2, #1
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe ff14 	bl	8002f54 <spiTxRx>

    platformSpiDeselect();
 800412c:	2201      	movs	r2, #1
 800412e:	2140      	movs	r1, #64	; 0x40
 8004130:	480c      	ldr	r0, [pc, #48]	; (8004164 <st25r3911ExecuteCommand+0xa0>)
 8004132:	f000 fdfc 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <st25r3911ExecuteCommand+0x9c>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	3b01      	subs	r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <st25r3911ExecuteCommand+0x9c>)
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <st25r3911ExecuteCommand+0x9c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <st25r3911ExecuteCommand+0x8e>
 800414a:	2006      	movs	r0, #6
 800414c:	f7ff fc98 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 8004150:	bf00      	nop
 8004152:	bf00      	nop
}
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40020000 	.word	0x40020000
 8004160:	200004dc 	.word	0x200004dc
 8004164:	40020400 	.word	0x40020400

08004168 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <st25r3911ExecuteCommands+0x78>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <st25r3911ExecuteCommands+0x78>)
 800417e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004180:	f3bf 8f4f 	dsb	sy
}
 8004184:	bf00      	nop
 8004186:	2006      	movs	r0, #6
 8004188:	f7ff fc96 	bl	8003ab8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800418c:	f3bf 8f4f 	dsb	sy
}
 8004190:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004192:	f3bf 8f6f 	isb	sy
}
 8004196:	bf00      	nop
    platformSpiSelect();
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	4811      	ldr	r0, [pc, #68]	; (80041e4 <st25r3911ExecuteCommands+0x7c>)
 800419e:	f000 fdc6 	bl	8004d2e <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	2100      	movs	r1, #0
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fed2 	bl	8002f54 <spiTxRx>
    
    platformSpiDeselect();
 80041b0:	2201      	movs	r2, #1
 80041b2:	2140      	movs	r1, #64	; 0x40
 80041b4:	480b      	ldr	r0, [pc, #44]	; (80041e4 <st25r3911ExecuteCommands+0x7c>)
 80041b6:	f000 fdba 	bl	8004d2e <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <st25r3911ExecuteCommands+0x78>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	3b01      	subs	r3, #1
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <st25r3911ExecuteCommands+0x78>)
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <st25r3911ExecuteCommands+0x78>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <st25r3911ExecuteCommands+0x6e>
 80041ce:	2006      	movs	r0, #6
 80041d0:	f7ff fc56 	bl	8003a80 <__NVIC_EnableIRQ>

    return;
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
}
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200004dc 	.word	0x200004dc
 80041e4:	40020400 	.word	0x40020400

080041e8 <__NVIC_EnableIRQ>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db0b      	blt.n	8004212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	4906      	ldr	r1, [pc, #24]	; (800421c <__NVIC_EnableIRQ+0x34>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100

08004220 <__NVIC_DisableIRQ>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db12      	blt.n	8004258 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	490a      	ldr	r1, [pc, #40]	; (8004264 <__NVIC_DisableIRQ+0x44>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	3320      	adds	r3, #32
 8004248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800424c:	f3bf 8f4f 	dsb	sy
}
 8004250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004252:	f3bf 8f6f 	isb	sy
}
 8004256:	bf00      	nop
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e100 	.word	0xe000e100

08004268 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <st25r3911InitInterrupts+0x2c>)
 800426e:	2200      	movs	r2, #0
 8004270:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <st25r3911InitInterrupts+0x2c>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <st25r3911InitInterrupts+0x2c>)
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <st25r3911InitInterrupts+0x2c>)
 8004280:	2200      	movs	r2, #0
 8004282:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428a:	4803      	ldr	r0, [pc, #12]	; (8004298 <st25r3911InitInterrupts+0x30>)
 800428c:	f000 fd4f 	bl	8004d2e <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	2000312c 	.word	0x2000312c
 8004298:	40020000 	.word	0x40020000

0800429c <st25r3911Isr>:

void st25r3911Isr( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 80042a0:	f000 f80c 	bl	80042bc <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <st25r3911Isr+0x1c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <st25r3911Isr+0x1c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4798      	blx	r3
    }
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000312c 	.word	0x2000312c

080042bc <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 80042c6:	463b      	mov	r3, r7
 80042c8:	2203      	movs	r2, #3
 80042ca:	21ff      	movs	r1, #255	; 0xff
 80042cc:	4618      	mov	r0, r3
 80042ce:	f017 f8b5 	bl	801b43c <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80042d2:	e01f      	b.n	8004314 <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 80042d4:	463b      	mov	r3, r7
 80042d6:	2203      	movs	r2, #3
 80042d8:	4619      	mov	r1, r3
 80042da:	2017      	movs	r0, #23
 80042dc:	f7ff fc7c 	bl	8003bd8 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 80042e0:	783b      	ldrb	r3, [r7, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80042ea:	2201      	movs	r2, #1
 80042ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f0:	4820      	ldr	r0, [pc, #128]	; (8004374 <st25r3911CheckForReceivedInterrupts+0xb8>)
 80042f2:	f000 fd1c 	bl	8004d2e <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 80042f6:	783b      	ldrb	r3, [r7, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 8004300:	787b      	ldrb	r3, [r7, #1]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4313      	orrs	r3, r2
 8004308:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8004314:	2101      	movs	r1, #1
 8004316:	4817      	ldr	r0, [pc, #92]	; (8004374 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8004318:	f000 fcf2 	bl	8004d00 <HAL_GPIO_ReadPin>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d0d8      	beq.n	80042d4 <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800432c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800432e:	f3bf 8f4f 	dsb	sy
}
 8004332:	bf00      	nop
 8004334:	2006      	movs	r0, #6
 8004336:	f7ff ff73 	bl	8004220 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800433a:	f3bf 8f4f 	dsb	sy
}
 800433e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004340:	f3bf 8f6f 	isb	sy
}
 8004344:	bf00      	nop
    st25r3911interrupt.status |= irqStatus;
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <st25r3911CheckForReceivedInterrupts+0xc0>)
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	4a0b      	ldr	r2, [pc, #44]	; (800437c <st25r3911CheckForReceivedInterrupts+0xc0>)
 8004350:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	3b01      	subs	r3, #1
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <st25r3911CheckForReceivedInterrupts+0xb0>
 8004366:	2006      	movs	r0, #6
 8004368:	f7ff ff3e 	bl	80041e8 <__NVIC_EnableIRQ>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40020000 	.word	0x40020000
 8004378:	200004dc 	.word	0x200004dc
 800437c:	2000312c 	.word	0x2000312c

08004380 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	43da      	mvns	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	401a      	ands	r2, r3
 8004398:	6939      	ldr	r1, [r7, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	400b      	ands	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	4013      	ands	r3, r2
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 80043ae:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 80043ba:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
 80043c0:	e019      	b.n	80043f6 <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	3314      	adds	r3, #20
 80043d6:	b2d8      	uxtb	r0, r3
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <st25r3911ModifyInterrupts+0x84>)
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7ff fcde 	bl	8003da8 <st25r3911WriteRegister>
 80043ec:	e000      	b.n	80043f0 <st25r3911ModifyInterrupts+0x70>
            continue;
 80043ee:	bf00      	nop
    for (i=0; i<3U ; i++)
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	3301      	adds	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d9e2      	bls.n	80043c2 <st25r3911ModifyInterrupts+0x42>
    }
    return;
 80043fc:	bf00      	nop
}
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000312c 	.word	0x2000312c

08004408 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8d2 	bl	80045c0 <timerCalculateTimer>
 800441c:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f8d7 	bl	80045dc <timerIsExpired>
 800442e:	4603      	mov	r3, r0
 8004430:	f083 0301 	eor.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <st25r3911WaitForInterruptsTimed+0x38>
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <st25r3911WaitForInterruptsTimed+0x3e>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0eb      	beq.n	800441e <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4013      	ands	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8004450:	4b16      	ldr	r3, [pc, #88]	; (80044ac <st25r3911WaitForInterruptsTimed+0xa4>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <st25r3911WaitForInterruptsTimed+0xa4>)
 800445a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800445c:	f3bf 8f4f 	dsb	sy
}
 8004460:	bf00      	nop
 8004462:	2006      	movs	r0, #6
 8004464:	f7ff fedc 	bl	8004220 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004468:	f3bf 8f4f 	dsb	sy
}
 800446c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800446e:	f3bf 8f6f 	isb	sy
}
 8004472:	bf00      	nop
    st25r3911interrupt.status &= ~status;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	43db      	mvns	r3, r3
 800447c:	4013      	ands	r3, r2
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <st25r3911WaitForInterruptsTimed+0xa0>)
 8004480:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <st25r3911WaitForInterruptsTimed+0xa4>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <st25r3911WaitForInterruptsTimed+0xa4>)
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <st25r3911WaitForInterruptsTimed+0xa4>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <st25r3911WaitForInterruptsTimed+0x94>
 8004496:	2006      	movs	r0, #6
 8004498:	f7ff fea6 	bl	80041e8 <__NVIC_EnableIRQ>
    
    return status;
 800449c:	68bb      	ldr	r3, [r7, #8]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000312c 	.word	0x2000312c
 80044ac:	200004dc 	.word	0x200004dc

080044b0 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <st25r3911GetInterrupt+0x70>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4013      	ands	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d025      	beq.n	8004514 <st25r3911GetInterrupt+0x64>
    {
        platformProtectST25R391xIrqStatus();
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <st25r3911GetInterrupt+0x74>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <st25r3911GetInterrupt+0x74>)
 80044d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80044d4:	f3bf 8f4f 	dsb	sy
}
 80044d8:	bf00      	nop
 80044da:	2006      	movs	r0, #6
 80044dc:	f7ff fea0 	bl	8004220 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80044e0:	f3bf 8f4f 	dsb	sy
}
 80044e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044e6:	f3bf 8f6f 	isb	sy
}
 80044ea:	bf00      	nop
        st25r3911interrupt.status &= ~irqs;
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <st25r3911GetInterrupt+0x70>)
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	4013      	ands	r3, r2
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <st25r3911GetInterrupt+0x70>)
 80044f8:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <st25r3911GetInterrupt+0x74>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <st25r3911GetInterrupt+0x74>)
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <st25r3911GetInterrupt+0x74>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <st25r3911GetInterrupt+0x64>
 800450e:	2006      	movs	r0, #6
 8004510:	f7ff fe6a 	bl	80041e8 <__NVIC_EnableIRQ>
    }
    return irqs;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000312c 	.word	0x2000312c
 8004524:	200004dc 	.word	0x200004dc

08004528 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 8004530:	2100      	movs	r1, #0
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff24 	bl	8004380 <st25r3911ModifyInterrupts>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	2000      	movs	r0, #0
 800454c:	f7ff ff18 	bl	8004380 <st25r3911ModifyInterrupts>
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2203      	movs	r2, #3
 8004562:	4619      	mov	r1, r3
 8004564:	2017      	movs	r0, #23
 8004566:	f7ff fb37 	bl	8003bd8 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <st25r3911ClearInterrupts+0x60>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <st25r3911ClearInterrupts+0x60>)
 8004574:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004576:	f3bf 8f4f 	dsb	sy
}
 800457a:	bf00      	nop
 800457c:	2006      	movs	r0, #6
 800457e:	f7ff fe4f 	bl	8004220 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004582:	f3bf 8f4f 	dsb	sy
}
 8004586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004588:	f3bf 8f6f 	isb	sy
}
 800458c:	bf00      	nop
    st25r3911interrupt.status = 0;
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <st25r3911ClearInterrupts+0x64>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <st25r3911ClearInterrupts+0x60>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <st25r3911ClearInterrupts+0x60>)
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <st25r3911ClearInterrupts+0x60>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d103      	bne.n	80045b0 <st25r3911ClearInterrupts+0x58>
 80045a8:	2006      	movs	r0, #6
 80045aa:	f7ff fe1d 	bl	80041e8 <__NVIC_EnableIRQ>
    return;
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
}
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200004dc 	.word	0x200004dc
 80045bc:	2000312c 	.word	0x2000312c

080045c0 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 80045ca:	f000 f881 	bl	80046d0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	4413      	add	r3, r2
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80045e4:	f000 f874 	bl	80046d0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da01      	bge.n	80045fe <timerIsExpired+0x22>
  {
    return true;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <timerIsExpired+0x24>
  }
  
  return false;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004612:	2003      	movs	r0, #3
 8004614:	f000 f954 	bl	80048c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004618:	2000      	movs	r0, #0
 800461a:	f000 f80d 	bl	8004638 <HAL_InitTick>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	71fb      	strb	r3, [r7, #7]
 8004628:	e001      	b.n	800462e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800462a:	f7fe fccf 	bl	8002fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800462e:	79fb      	ldrb	r3, [r7, #7]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_InitTick+0x68>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d022      	beq.n	8004692 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800464c:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_InitTick+0x6c>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_InitTick+0x68>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004658:	fbb1 f3f3 	udiv	r3, r1, r3
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f962 	bl	800492a <HAL_SYSTICK_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10f      	bne.n	800468c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d809      	bhi.n	8004686 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004672:	2200      	movs	r2, #0
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	f000 f92c 	bl	80048d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <HAL_InitTick+0x70>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e007      	b.n	8004696 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e004      	b.n	8004696 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e001      	b.n	8004696 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200000b0 	.word	0x200000b0
 80046a4:	200000a8 	.word	0x200000a8
 80046a8:	200000ac 	.word	0x200000ac

080046ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_IncTick+0x1c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_IncTick+0x20>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	4a03      	ldr	r2, [pc, #12]	; (80046c8 <HAL_IncTick+0x1c>)
 80046bc:	6013      	str	r3, [r2, #0]
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000313c 	.word	0x2000313c
 80046cc:	200000b0 	.word	0x200000b0

080046d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return uwTick;
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <HAL_GetTick+0x10>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	2000313c 	.word	0x2000313c

080046e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_GetTick>
 80046f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d004      	beq.n	8004708 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_Delay+0x40>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004708:	bf00      	nop
 800470a:	f7ff ffe1 	bl	80046d0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	429a      	cmp	r2, r3
 8004718:	d8f7      	bhi.n	800470a <HAL_Delay+0x26>
  {
  }
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200000b0 	.word	0x200000b0

08004728 <__NVIC_SetPriorityGrouping>:
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	60d3      	str	r3, [r2, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_GetPriorityGrouping>:
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__NVIC_GetPriorityGrouping+0x18>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0307 	and.w	r3, r3, #7
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <__NVIC_EnableIRQ>:
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0b      	blt.n	80047b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	f003 021f 	and.w	r2, r3, #31
 80047a4:	4906      	ldr	r1, [pc, #24]	; (80047c0 <__NVIC_EnableIRQ+0x34>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2001      	movs	r0, #1
 80047ae:	fa00 f202 	lsl.w	r2, r0, r2
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr
 80047c0:	e000e100 	.word	0xe000e100

080047c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db0a      	blt.n	80047ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	490c      	ldr	r1, [pc, #48]	; (8004810 <__NVIC_SetPriority+0x4c>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	440b      	add	r3, r1
 80047e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ec:	e00a      	b.n	8004804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4908      	ldr	r1, [pc, #32]	; (8004814 <__NVIC_SetPriority+0x50>)
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3b04      	subs	r3, #4
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	440b      	add	r3, r1
 8004802:	761a      	strb	r2, [r3, #24]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f1c3 0307 	rsb	r3, r3, #7
 8004832:	2b04      	cmp	r3, #4
 8004834:	bf28      	it	cs
 8004836:	2304      	movcs	r3, #4
 8004838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3304      	adds	r3, #4
 800483e:	2b06      	cmp	r3, #6
 8004840:	d902      	bls.n	8004848 <NVIC_EncodePriority+0x30>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b03      	subs	r3, #3
 8004846:	e000      	b.n	800484a <NVIC_EncodePriority+0x32>
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	401a      	ands	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	43d9      	mvns	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	4313      	orrs	r3, r2
         );
}
 8004872:	4618      	mov	r0, r3
 8004874:	3724      	adds	r7, #36	; 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800488c:	d301      	bcc.n	8004892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <SysTick_Config+0x40>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489a:	210f      	movs	r1, #15
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	f7ff ff90 	bl	80047c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <SysTick_Config+0x40>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <SysTick_Config+0x40>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010

080048c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff2d 	bl	8004728 <__NVIC_SetPriorityGrouping>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e8:	f7ff ff42 	bl	8004770 <__NVIC_GetPriorityGrouping>
 80048ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff90 	bl	8004818 <NVIC_EncodePriority>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5f 	bl	80047c4 <__NVIC_SetPriority>
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff35 	bl	800478c <__NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffa2 	bl	800487c <SysTick_Config>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d005      	beq.n	8004966 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2204      	movs	r2, #4
 800495e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e029      	b.n	80049ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 020e 	bic.w	r2, r2, #14
 8004974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 021c 	and.w	r2, r3, #28
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f202 	lsl.w	r2, r1, r2
 8004998:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
    }
  }
  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049d2:	b2db      	uxtb	r3, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80049f6:	e160      	b.n	8004cba <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8152 	beq.w	8004cb4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d130      	bne.n	8004a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0201 	and.w	r2, r3, #1
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d017      	beq.n	8004ac6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d123      	bne.n	8004b1a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	08da      	lsrs	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3208      	adds	r2, #8
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80ac 	beq.w	8004cb4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_GPIO_Init+0x2f8>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <HAL_GPIO_Init+0x2f8>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6213      	str	r3, [r2, #32]
 8004b68:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <HAL_GPIO_Init+0x2f8>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b74:	4a59      	ldr	r2, [pc, #356]	; (8004cdc <HAL_GPIO_Init+0x2fc>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_GPIO_Init+0x300>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d025      	beq.n	8004bec <HAL_GPIO_Init+0x20c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_GPIO_Init+0x304>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01f      	beq.n	8004be8 <HAL_GPIO_Init+0x208>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <HAL_GPIO_Init+0x308>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d019      	beq.n	8004be4 <HAL_GPIO_Init+0x204>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <HAL_GPIO_Init+0x30c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <HAL_GPIO_Init+0x200>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a4d      	ldr	r2, [pc, #308]	; (8004cf0 <HAL_GPIO_Init+0x310>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00d      	beq.n	8004bdc <HAL_GPIO_Init+0x1fc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <HAL_GPIO_Init+0x314>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <HAL_GPIO_Init+0x1f8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a4b      	ldr	r2, [pc, #300]	; (8004cf8 <HAL_GPIO_Init+0x318>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_GPIO_Init+0x1f4>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	e00c      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bd4:	2307      	movs	r3, #7
 8004bd6:	e00a      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bd8:	2305      	movs	r3, #5
 8004bda:	e008      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	e006      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004be0:	2303      	movs	r3, #3
 8004be2:	e004      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e002      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bec:	2300      	movs	r3, #0
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	f002 0203 	and.w	r2, r2, #3
 8004bf4:	0092      	lsls	r2, r2, #2
 8004bf6:	4093      	lsls	r3, r2
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bfe:	4937      	ldr	r1, [pc, #220]	; (8004cdc <HAL_GPIO_Init+0x2fc>)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	3302      	adds	r3, #2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c30:	4a32      	ldr	r2, [pc, #200]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c5a:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c60:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f ae97 	bne.w	80049f8 <HAL_GPIO_Init+0x18>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40020400 	.word	0x40020400
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020c00 	.word	0x40020c00
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40021400 	.word	0x40021400
 8004cf8:	40021800 	.word	0x40021800
 8004cfc:	40010400 	.word	0x40010400

08004d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e001      	b.n	8004d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	807b      	strh	r3, [r7, #2]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d3e:	787b      	ldrb	r3, [r7, #1]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d44:	887a      	ldrh	r2, [r7, #2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004d4a:	e003      	b.n	8004d54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	041a      	lsls	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4013      	ands	r3, r2
 8004d76:	041a      	lsls	r2, r3, #16
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	43d9      	mvns	r1, r3
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	400b      	ands	r3, r1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	619a      	str	r2, [r3, #24]
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f806 	bl	8004dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e12b      	b.n	800503e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fe f916 	bl	800302c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e38:	f002 fe46 	bl	8007ac8 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a81      	ldr	r2, [pc, #516]	; (8005048 <HAL_I2C_Init+0x274>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d807      	bhi.n	8004e58 <HAL_I2C_Init+0x84>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a80      	ldr	r2, [pc, #512]	; (800504c <HAL_I2C_Init+0x278>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bf94      	ite	ls
 8004e50:	2301      	movls	r3, #1
 8004e52:	2300      	movhi	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e006      	b.n	8004e66 <HAL_I2C_Init+0x92>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a7d      	ldr	r2, [pc, #500]	; (8005050 <HAL_I2C_Init+0x27c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bf94      	ite	ls
 8004e60:	2301      	movls	r3, #1
 8004e62:	2300      	movhi	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0e7      	b.n	800503e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a78      	ldr	r2, [pc, #480]	; (8005054 <HAL_I2C_Init+0x280>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0c9b      	lsrs	r3, r3, #18
 8004e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a6a      	ldr	r2, [pc, #424]	; (8005048 <HAL_I2C_Init+0x274>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d802      	bhi.n	8004ea8 <HAL_I2C_Init+0xd4>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	e009      	b.n	8004ebc <HAL_I2C_Init+0xe8>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	4a69      	ldr	r2, [pc, #420]	; (8005058 <HAL_I2C_Init+0x284>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	3301      	adds	r3, #1
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	495c      	ldr	r1, [pc, #368]	; (8005048 <HAL_I2C_Init+0x274>)
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d819      	bhi.n	8004f10 <HAL_I2C_Init+0x13c>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e59      	subs	r1, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ef0:	400b      	ands	r3, r1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_I2C_Init+0x138>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e59      	subs	r1, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0a:	e051      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e04f      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d111      	bne.n	8004f3c <HAL_I2C_Init+0x168>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	440b      	add	r3, r1
 8004f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e012      	b.n	8004f62 <HAL_I2C_Init+0x18e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e58      	subs	r0, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6859      	ldr	r1, [r3, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	0099      	lsls	r1, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Init+0x196>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e022      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10e      	bne.n	8004f90 <HAL_I2C_Init+0x1bc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1e58      	subs	r0, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	440b      	add	r3, r1
 8004f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8e:	e00f      	b.n	8004fb0 <HAL_I2C_Init+0x1dc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e58      	subs	r0, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	0099      	lsls	r1, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	6809      	ldr	r1, [r1, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6911      	ldr	r1, [r2, #16]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68d2      	ldr	r2, [r2, #12]
 8004fea:	4311      	orrs	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	000186a0 	.word	0x000186a0
 800504c:	001e847f 	.word	0x001e847f
 8005050:	003d08ff 	.word	0x003d08ff
 8005054:	431bde83 	.word	0x431bde83
 8005058:	10624dd3 	.word	0x10624dd3

0800505c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	460b      	mov	r3, r1
 800506a:	817b      	strh	r3, [r7, #10]
 800506c:	4613      	mov	r3, r2
 800506e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7ff fb2e 	bl	80046d0 <HAL_GetTick>
 8005074:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b20      	cmp	r3, #32
 8005080:	f040 80e0 	bne.w	8005244 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2319      	movs	r3, #25
 800508a:	2201      	movs	r2, #1
 800508c:	4970      	ldr	r1, [pc, #448]	; (8005250 <HAL_I2C_Master_Transmit+0x1f4>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f001 fdda 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
 800509c:	e0d3      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_I2C_Master_Transmit+0x50>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0cc      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d007      	beq.n	80050d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2221      	movs	r2, #33	; 0x21
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2210      	movs	r2, #16
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	893a      	ldrh	r2, [r7, #8]
 8005102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a50      	ldr	r2, [pc, #320]	; (8005254 <HAL_I2C_Master_Transmit+0x1f8>)
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f001 fc6a 	bl	80069f4 <I2C_MasterRequestWrite>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e08d      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005140:	e066      	b.n	8005210 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	6a39      	ldr	r1, [r7, #32]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f001 fe54 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00d      	beq.n	800516e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b04      	cmp	r3, #4
 8005158:	d107      	bne.n	800516a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06b      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d11b      	bne.n	80051e4 <HAL_I2C_Master_Transmit+0x188>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d017      	beq.n	80051e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	6a39      	ldr	r1, [r7, #32]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f001 fe44 	bl	8006e76 <I2C_WaitOnBTFFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d107      	bne.n	800520c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01a      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d194      	bne.n	8005142 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	00100002 	.word	0x00100002
 8005254:	ffff0000 	.word	0xffff0000

08005258 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005278:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b10      	cmp	r3, #16
 8005286:	d003      	beq.n	8005290 <HAL_I2C_EV_IRQHandler+0x38>
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	f040 80c1 	bne.w	8005412 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052b0:	d003      	beq.n	80052ba <HAL_I2C_EV_IRQHandler+0x62>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052b8:	d101      	bne.n	80052be <HAL_I2C_EV_IRQHandler+0x66>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x68>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f000 8132 	beq.w	800552a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <HAL_I2C_EV_IRQHandler+0x92>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fe6b 	bl	8006fb8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fd6f 	bl	8005dc6 <I2C_Master_SB>
 80052e8:	e092      	b.n	8005410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0xb2>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	0a5b      	lsrs	r3, r3, #9
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fde4 	bl	8005ed0 <I2C_Master_ADD10>
 8005308:	e082      	b.n	8005410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_I2C_EV_IRQHandler+0xd2>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	0a5b      	lsrs	r3, r3, #9
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fdfd 	bl	8005f22 <I2C_Master_ADDR>
 8005328:	e072      	b.n	8005410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d03b      	beq.n	80053ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	f000 80f3 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	09db      	lsrs	r3, r3, #7
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00f      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x11c>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	0a9b      	lsrs	r3, r3, #10
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x11c>
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	089b      	lsrs	r3, r3, #2
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f9e9 	bl	8005744 <I2C_MasterTransmit_TXE>
 8005372:	e04d      	b.n	8005410 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80d6 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80cf 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b21      	cmp	r3, #33	; 0x21
 8005394:	d103      	bne.n	800539e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa70 	bl	800587c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539c:	e0c7      	b.n	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	f040 80c4 	bne.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fade 	bl	8005968 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ac:	e0bf      	b.n	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	f000 80b7 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00f      	beq.n	80053ec <HAL_I2C_EV_IRQHandler+0x194>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	0a9b      	lsrs	r3, r3, #10
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_I2C_EV_IRQHandler+0x194>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb53 	bl	8005a90 <I2C_MasterReceive_RXNE>
 80053ea:	e011      	b.n	8005410 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	089b      	lsrs	r3, r3, #2
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 809a 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	0a5b      	lsrs	r3, r3, #9
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8093 	beq.w	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fbf2 	bl	8005bf2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800540e:	e08e      	b.n	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005410:	e08d      	b.n	800552e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e007      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d012      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0x20e>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	0a5b      	lsrs	r3, r3, #9
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 ffab 	bl	80063ba <I2C_Slave_ADDR>
 8005464:	e066      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_I2C_EV_IRQHandler+0x22e>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 ffe6 	bl	8006450 <I2C_Slave_STOPF>
 8005484:	e056      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005486:	7bbb      	ldrb	r3, [r7, #14]
 8005488:	2b21      	cmp	r3, #33	; 0x21
 800548a:	d002      	beq.n	8005492 <HAL_I2C_EV_IRQHandler+0x23a>
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	2b29      	cmp	r3, #41	; 0x29
 8005490:	d125      	bne.n	80054de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	09db      	lsrs	r3, r3, #7
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00f      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x266>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	0a9b      	lsrs	r3, r3, #10
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x266>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fec3 	bl	8006242 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054bc:	e039      	b.n	8005532 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d033      	beq.n	8005532 <HAL_I2C_EV_IRQHandler+0x2da>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02d      	beq.n	8005532 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fef0 	bl	80062bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054dc:	e029      	b.n	8005532 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <HAL_I2C_EV_IRQHandler+0x2b2>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	0a9b      	lsrs	r3, r3, #10
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_I2C_EV_IRQHandler+0x2b2>
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fefa 	bl	80062fc <I2C_SlaveReceive_RXNE>
 8005508:	e014      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00e      	beq.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	0a5b      	lsrs	r3, r3, #9
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff28 	bl	8006378 <I2C_SlaveReceive_BTF>
 8005528:	e004      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005532:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b08a      	sub	sp, #40	; 0x28
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_I2C_ER_IRQHandler+0x4e>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005586:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	0a5b      	lsrs	r3, r3, #9
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00e      	beq.n	80055b2 <HAL_I2C_ER_IRQHandler+0x78>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80055b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	0a9b      	lsrs	r3, r3, #10
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03f      	beq.n	800563e <HAL_I2C_ER_IRQHandler+0x104>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d039      	beq.n	800563e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80055ca:	7efb      	ldrb	r3, [r7, #27]
 80055cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80055e4:	7ebb      	ldrb	r3, [r7, #26]
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d112      	bne.n	8005610 <HAL_I2C_ER_IRQHandler+0xd6>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <HAL_I2C_ER_IRQHandler+0xd6>
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b21      	cmp	r3, #33	; 0x21
 80055f4:	d008      	beq.n	8005608 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b29      	cmp	r3, #41	; 0x29
 80055fa:	d005      	beq.n	8005608 <HAL_I2C_ER_IRQHandler+0xce>
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	2b28      	cmp	r3, #40	; 0x28
 8005600:	d106      	bne.n	8005610 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b21      	cmp	r3, #33	; 0x21
 8005606:	d103      	bne.n	8005610 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f001 f851 	bl	80066b0 <I2C_Slave_AF>
 800560e:	e016      	b.n	800563e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005618:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005622:	7efb      	ldrb	r3, [r7, #27]
 8005624:	2b10      	cmp	r3, #16
 8005626:	d002      	beq.n	800562e <HAL_I2C_ER_IRQHandler+0xf4>
 8005628:	7efb      	ldrb	r3, [r7, #27]
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d107      	bne.n	800563e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	0adb      	lsrs	r3, r3, #11
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <HAL_I2C_ER_IRQHandler+0x12e>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	f043 0308 	orr.w	r3, r3, #8
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005666:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 f888 	bl	8006790 <I2C_ITError>
  }
}
 8005680:	bf00      	nop
 8005682:	3728      	adds	r7, #40	; 0x28
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
 80056dc:	4613      	mov	r3, r2
 80056de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800575a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d150      	bne.n	800580c <I2C_MasterTransmit_TXE+0xc8>
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b21      	cmp	r3, #33	; 0x21
 800576e:	d14d      	bne.n	800580c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d01d      	beq.n	80057b2 <I2C_MasterTransmit_TXE+0x6e>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b20      	cmp	r3, #32
 800577a:	d01a      	beq.n	80057b2 <I2C_MasterTransmit_TXE+0x6e>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005782:	d016      	beq.n	80057b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005792:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2211      	movs	r2, #17
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ff6c 	bl	8005688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057b0:	e060      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d107      	bne.n	80057fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff81 	bl	80056fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057fa:	e03b      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff3f 	bl	8005688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800580a:	e033      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b21      	cmp	r3, #33	; 0x21
 8005810:	d005      	beq.n	800581e <I2C_MasterTransmit_TXE+0xda>
 8005812:	7bbb      	ldrb	r3, [r7, #14]
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d12d      	bne.n	8005874 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b22      	cmp	r3, #34	; 0x22
 800581c:	d12a      	bne.n	8005874 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005836:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005838:	e01c      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d103      	bne.n	800584e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f88e 	bl	8005968 <I2C_MemoryTransmit_TXE_BTF>
}
 800584c:	e012      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005872:	e7ff      	b.n	8005874 <I2C_MasterTransmit_TXE+0x130>
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b21      	cmp	r3, #33	; 0x21
 8005894:	d164      	bne.n	8005960 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d012      	beq.n	80058c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058c4:	e04c      	b.n	8005960 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d01d      	beq.n	8005908 <I2C_MasterTransmit_BTF+0x8c>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d01a      	beq.n	8005908 <I2C_MasterTransmit_BTF+0x8c>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d8:	d016      	beq.n	8005908 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2211      	movs	r2, #17
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fec1 	bl	8005688 <HAL_I2C_MasterTxCpltCallback>
}
 8005906:	e02b      	b.n	8005960 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005916:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d107      	bne.n	8005952 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fed6 	bl	80056fc <HAL_I2C_MemTxCpltCallback>
}
 8005950:	e006      	b.n	8005960 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fe94 	bl	8005688 <HAL_I2C_MasterTxCpltCallback>
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11d      	bne.n	80059bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10b      	bne.n	80059a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	b2da      	uxtb	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	1c9a      	adds	r2, r3, #2
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800599e:	e073      	b.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	121b      	asrs	r3, r3, #8
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059ba:	e065      	b.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10b      	bne.n	80059dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059da:	e055      	b.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d151      	bne.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b22      	cmp	r3, #34	; 0x22
 80059e8:	d10d      	bne.n	8005a06 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a04:	e040      	b.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b21      	cmp	r3, #33	; 0x21
 8005a14:	d112      	bne.n	8005a3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	781a      	ldrb	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a3a:	e025      	b.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d120      	bne.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b21      	cmp	r3, #33	; 0x21
 8005a4a:	d11d      	bne.n	8005a88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe3a 	bl	80056fc <HAL_I2C_MemTxCpltCallback>
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b22      	cmp	r3, #34	; 0x22
 8005aa2:	f040 80a2 	bne.w	8005bea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d921      	bls.n	8005af8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	f040 8082 	bne.w	8005bea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005af6:	e078      	b.n	8005bea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d074      	beq.n	8005bea <I2C_MasterReceive_RXNE+0x15a>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d002      	beq.n	8005b0c <I2C_MasterReceive_RXNE+0x7c>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d16e      	bne.n	8005bea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f9f3 	bl	8006ef8 <I2C_WaitOnSTOPRequestThroughIT>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d142      	bne.n	8005b9e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d10a      	bne.n	8005b88 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fdc4 	bl	800570e <HAL_I2C_MemRxCpltCallback>
}
 8005b86:	e030      	b.n	8005bea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2212      	movs	r2, #18
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff fd7f 	bl	800569a <HAL_I2C_MasterRxCpltCallback>
}
 8005b9c:	e025      	b.n	8005bea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff fd9b 	bl	8005720 <HAL_I2C_ErrorCallback>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d11b      	bne.n	8005c42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c40:	e0bd      	b.n	8005dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d129      	bne.n	8005ca0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00a      	beq.n	8005c78 <I2C_MasterReceive_BTF+0x86>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d007      	beq.n	8005c78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c9e:	e08e      	b.n	8005dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d176      	bne.n	8005d98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d002      	beq.n	8005cb6 <I2C_MasterReceive_BTF+0xc4>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d108      	bne.n	8005cc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e019      	b.n	8005cfc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d002      	beq.n	8005cd4 <I2C_MasterReceive_BTF+0xe2>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d108      	bne.n	8005ce6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e00a      	b.n	8005cfc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d007      	beq.n	8005cfc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d10a      	bne.n	8005d82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fcc7 	bl	800570e <HAL_I2C_MemRxCpltCallback>
}
 8005d80:	e01d      	b.n	8005dbe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2212      	movs	r2, #18
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fc82 	bl	800569a <HAL_I2C_MasterRxCpltCallback>
}
 8005d96:	e012      	b.n	8005dbe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d117      	bne.n	8005e0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005df4:	e067      	b.n	8005ec6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	611a      	str	r2, [r3, #16]
}
 8005e08:	e05d      	b.n	8005ec6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e12:	d133      	bne.n	8005e7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b21      	cmp	r3, #33	; 0x21
 8005e1e:	d109      	bne.n	8005e34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e30:	611a      	str	r2, [r3, #16]
 8005e32:	e008      	b.n	8005e46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <I2C_Master_SB+0x92>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d032      	beq.n	8005ec6 <I2C_Master_SB+0x100>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02d      	beq.n	8005ec6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e78:	605a      	str	r2, [r3, #4]
}
 8005e7a:	e024      	b.n	8005ec6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10e      	bne.n	8005ea2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	11db      	asrs	r3, r3, #7
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0306 	and.w	r3, r3, #6
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f063 030f 	orn	r3, r3, #15
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
}
 8005ea0:	e011      	b.n	8005ec6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10d      	bne.n	8005ec6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	11db      	asrs	r3, r3, #7
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0306 	and.w	r3, r3, #6
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f063 030e 	orn	r3, r3, #14
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	611a      	str	r2, [r3, #16]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <I2C_Master_ADD10+0x26>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <I2C_Master_ADD10+0x48>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f16:	605a      	str	r2, [r3, #4]
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b091      	sub	sp, #68	; 0x44
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b22      	cmp	r3, #34	; 0x22
 8005f4a:	f040 8169 	bne.w	8006220 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <I2C_Master_ADDR+0x54>
 8005f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d10b      	bne.n	8005f76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	e160      	b.n	8006238 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11d      	bne.n	8005fba <I2C_Master_ADDR+0x98>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f86:	d118      	bne.n	8005fba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8005fb8:	e13e      	b.n	8006238 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d113      	bne.n	8005fec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e115      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	f040 808a 	bne.w	800610c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ffe:	d137      	bne.n	8006070 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601e:	d113      	bne.n	8006048 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006030:	2300      	movs	r3, #0
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	e0e7      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	623b      	str	r3, [r7, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e0d3      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	2b08      	cmp	r3, #8
 8006074:	d02e      	beq.n	80060d4 <I2C_Master_ADDR+0x1b2>
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	2b20      	cmp	r3, #32
 800607a:	d02b      	beq.n	80060d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	2b12      	cmp	r3, #18
 8006080:	d102      	bne.n	8006088 <I2C_Master_ADDR+0x166>
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b01      	cmp	r3, #1
 8006086:	d125      	bne.n	80060d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	2b04      	cmp	r3, #4
 800608c:	d00e      	beq.n	80060ac <I2C_Master_ADDR+0x18a>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2b02      	cmp	r3, #2
 8006092:	d00b      	beq.n	80060ac <I2C_Master_ADDR+0x18a>
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	2b10      	cmp	r3, #16
 8006098:	d008      	beq.n	80060ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e007      	b.n	80060bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	e0a1      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e085      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d14d      	bne.n	80061b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b04      	cmp	r3, #4
 800611a:	d016      	beq.n	800614a <I2C_Master_ADDR+0x228>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2b02      	cmp	r3, #2
 8006120:	d013      	beq.n	800614a <I2C_Master_ADDR+0x228>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	2b10      	cmp	r3, #16
 8006126:	d010      	beq.n	800614a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006136:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e007      	b.n	800615a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006158:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	d117      	bne.n	800619a <I2C_Master_ADDR+0x278>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006170:	d00b      	beq.n	800618a <I2C_Master_ADDR+0x268>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b01      	cmp	r3, #1
 8006176:	d008      	beq.n	800618a <I2C_Master_ADDR+0x268>
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b08      	cmp	r3, #8
 800617c:	d005      	beq.n	800618a <I2C_Master_ADDR+0x268>
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b10      	cmp	r3, #16
 8006182:	d002      	beq.n	800618a <I2C_Master_ADDR+0x268>
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b20      	cmp	r3, #32
 8006188:	d107      	bne.n	800619a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006198:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	e032      	b.n	8006218 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d0:	d117      	bne.n	8006202 <I2C_Master_ADDR+0x2e0>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061d8:	d00b      	beq.n	80061f2 <I2C_Master_ADDR+0x2d0>
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d008      	beq.n	80061f2 <I2C_Master_ADDR+0x2d0>
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d005      	beq.n	80061f2 <I2C_Master_ADDR+0x2d0>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d002      	beq.n	80061f2 <I2C_Master_ADDR+0x2d0>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d107      	bne.n	8006202 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006200:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800621e:	e00b      	b.n	8006238 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	e7ff      	b.n	8006238 <I2C_Master_ADDR+0x316>
 8006238:	bf00      	nop
 800623a:	3744      	adds	r7, #68	; 0x44
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02b      	beq.n	80062b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d114      	bne.n	80062b4 <I2C_SlaveTransmit_TXE+0x72>
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b29      	cmp	r3, #41	; 0x29
 800628e:	d111      	bne.n	80062b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2221      	movs	r2, #33	; 0x21
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2228      	movs	r2, #40	; 0x28
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff f9fc 	bl	80056ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d011      	beq.n	80062f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02c      	beq.n	8006370 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d114      	bne.n	8006370 <I2C_SlaveReceive_RXNE+0x74>
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d111      	bne.n	8006370 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2222      	movs	r2, #34	; 0x22
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2228      	movs	r2, #40	; 0x28
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff f9a7 	bl	80056be <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d012      	beq.n	80063b0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063d4:	2b28      	cmp	r3, #40	; 0x28
 80063d6:	d127      	bne.n	8006428 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	81bb      	strh	r3, [r7, #12]
 800640a:	e002      	b.n	8006412 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800641a:	89ba      	ldrh	r2, [r7, #12]
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff f955 	bl	80056d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006426:	e00e      	b.n	8006446 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800646e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ac:	d172      	bne.n	8006594 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b22      	cmp	r3, #34	; 0x22
 80064b2:	d002      	beq.n	80064ba <I2C_Slave_STOPF+0x6a>
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b2a      	cmp	r3, #42	; 0x2a
 80064b8:	d135      	bne.n	8006526 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f043 0204 	orr.w	r2, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fa66 	bl	80049c4 <HAL_DMA_GetState>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d049      	beq.n	8006592 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4a69      	ldr	r2, [pc, #420]	; (80066a8 <I2C_Slave_STOPF+0x258>)
 8006504:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fa19 	bl	8004942 <HAL_DMA_Abort_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03d      	beq.n	8006592 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006524:	e035      	b.n	8006592 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0204 	orr.w	r2, r3, #4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006558:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fa30 	bl	80049c4 <HAL_DMA_GetState>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d014      	beq.n	8006594 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	4a4e      	ldr	r2, [pc, #312]	; (80066a8 <I2C_Slave_STOPF+0x258>)
 8006570:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f9e3 	bl	8004942 <HAL_DMA_Abort_IT>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
 8006590:	e000      	b.n	8006594 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006592:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03e      	beq.n	800661c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d112      	bne.n	80065d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d112      	bne.n	8006606 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f043 0204 	orr.w	r2, r3, #4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8b3 	bl	8006790 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800662a:	e039      	b.n	80066a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b2a      	cmp	r3, #42	; 0x2a
 8006630:	d109      	bne.n	8006646 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2228      	movs	r2, #40	; 0x28
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f83c 	bl	80056be <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b28      	cmp	r3, #40	; 0x28
 8006650:	d111      	bne.n	8006676 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <I2C_Slave_STOPF+0x25c>)
 8006656:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff f83b 	bl	80056ea <HAL_I2C_ListenCpltCallback>
}
 8006674:	e014      	b.n	80066a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	2b22      	cmp	r3, #34	; 0x22
 800667c:	d002      	beq.n	8006684 <I2C_Slave_STOPF+0x234>
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b22      	cmp	r3, #34	; 0x22
 8006682:	d10d      	bne.n	80066a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff f80f 	bl	80056be <HAL_I2C_SlaveRxCpltCallback>
}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08006af9 	.word	0x08006af9
 80066ac:	ffff0000 	.word	0xffff0000

080066b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d002      	beq.n	80066d2 <I2C_Slave_AF+0x22>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d129      	bne.n	8006726 <I2C_Slave_AF+0x76>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b28      	cmp	r3, #40	; 0x28
 80066d6:	d126      	bne.n	8006726 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a2c      	ldr	r2, [pc, #176]	; (800678c <I2C_Slave_AF+0xdc>)
 80066dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fe ffe3 	bl	80056ea <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006724:	e02e      	b.n	8006784 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2b21      	cmp	r3, #33	; 0x21
 800672a:	d126      	bne.n	800677a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a17      	ldr	r2, [pc, #92]	; (800678c <I2C_Slave_AF+0xdc>)
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2221      	movs	r2, #33	; 0x21
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006756:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006760:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006770:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fe ff9a 	bl	80056ac <HAL_I2C_SlaveTxCpltCallback>
}
 8006778:	e004      	b.n	8006784 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006782:	615a      	str	r2, [r3, #20]
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	ffff0000 	.word	0xffff0000

08006790 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d002      	beq.n	80067b4 <I2C_ITError+0x24>
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d10a      	bne.n	80067ca <I2C_ITError+0x3a>
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b22      	cmp	r3, #34	; 0x22
 80067b8:	d107      	bne.n	80067ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067d0:	2b28      	cmp	r3, #40	; 0x28
 80067d2:	d107      	bne.n	80067e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2228      	movs	r2, #40	; 0x28
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067e2:	e015      	b.n	8006810 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f2:	d00a      	beq.n	800680a <I2C_ITError+0x7a>
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b60      	cmp	r3, #96	; 0x60
 80067f8:	d007      	beq.n	800680a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681e:	d162      	bne.n	80068e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800682e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006834:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d020      	beq.n	8006880 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	4a6a      	ldr	r2, [pc, #424]	; (80069ec <I2C_ITError+0x25c>)
 8006844:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe f879 	bl	8004942 <HAL_DMA_Abort_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8089 	beq.w	800696a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800687a:	4610      	mov	r0, r2
 800687c:	4798      	blx	r3
 800687e:	e074      	b.n	800696a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	4a59      	ldr	r2, [pc, #356]	; (80069ec <I2C_ITError+0x25c>)
 8006886:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe f858 	bl	8004942 <HAL_DMA_Abort_IT>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d068      	beq.n	800696a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d10b      	bne.n	80068be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	e041      	b.n	800696a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b60      	cmp	r3, #96	; 0x60
 80068f0:	d125      	bne.n	800693e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d10b      	bne.n	8006926 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe fefb 	bl	8005732 <HAL_I2C_AbortCpltCallback>
 800693c:	e015      	b.n	800696a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d10b      	bne.n	8006964 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fe fedb 	bl	8005720 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10e      	bne.n	8006998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d113      	bne.n	80069e4 <I2C_ITError+0x254>
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b28      	cmp	r3, #40	; 0x28
 80069c0:	d110      	bne.n	80069e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <I2C_ITError+0x260>)
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fe fe83 	bl	80056ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	08006af9 	.word	0x08006af9
 80069f0:	ffff0000 	.word	0xffff0000

080069f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	460b      	mov	r3, r1
 8006a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d006      	beq.n	8006a1e <I2C_MasterRequestWrite+0x2a>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d003      	beq.n	8006a1e <I2C_MasterRequestWrite+0x2a>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a1c:	d108      	bne.n	8006a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e00b      	b.n	8006a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d107      	bne.n	8006a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f8f7 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6e:	d103      	bne.n	8006a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e035      	b.n	8006ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a84:	d108      	bne.n	8006a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a94:	611a      	str	r2, [r3, #16]
 8006a96:	e01b      	b.n	8006ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a98:	897b      	ldrh	r3, [r7, #10]
 8006a9a:	11db      	asrs	r3, r3, #7
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f063 030f 	orn	r3, r3, #15
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	490e      	ldr	r1, [pc, #56]	; (8006af0 <I2C_MasterRequestWrite+0xfc>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f91d 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e010      	b.n	8006ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4907      	ldr	r1, [pc, #28]	; (8006af4 <I2C_MasterRequestWrite+0x100>)
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f90d 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	00010008 	.word	0x00010008
 8006af4:	00010002 	.word	0x00010002

08006af8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b12:	4b4b      	ldr	r3, [pc, #300]	; (8006c40 <I2C_DMAAbort+0x148>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	4a4a      	ldr	r2, [pc, #296]	; (8006c44 <I2C_DMAAbort+0x14c>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	0a1a      	lsrs	r2, r3, #8
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	00da      	lsls	r2, r3, #3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006b3e:	e00a      	b.n	8006b56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d0ea      	beq.n	8006b2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	2200      	movs	r2, #0
 8006b64:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	2200      	movs	r2, #0
 8006b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	2200      	movs	r2, #0
 8006b9a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	2200      	movs	r2, #0
 8006baa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b60      	cmp	r3, #96	; 0x60
 8006bc6:	d10e      	bne.n	8006be6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bde:	6978      	ldr	r0, [r7, #20]
 8006be0:	f7fe fda7 	bl	8005732 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006be4:	e027      	b.n	8006c36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006be6:	7cfb      	ldrb	r3, [r7, #19]
 8006be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bec:	2b28      	cmp	r3, #40	; 0x28
 8006bee:	d117      	bne.n	8006c20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2228      	movs	r2, #40	; 0x28
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c1e:	e007      	b.n	8006c30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006c30:	6978      	ldr	r0, [r7, #20]
 8006c32:	f7fe fd75 	bl	8005720 <HAL_I2C_ErrorCallback>
}
 8006c36:	bf00      	nop
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200000a8 	.word	0x200000a8
 8006c44:	14f8b589 	.word	0x14f8b589

08006c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	e025      	b.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d021      	beq.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fd35 	bl	80046d0 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d116      	bne.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e023      	b.n	8006cee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10d      	bne.n	8006ccc <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf0c      	ite	eq
 8006cc2:	2301      	moveq	r3, #1
 8006cc4:	2300      	movne	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	e00c      	b.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	43da      	mvns	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d0b6      	beq.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d04:	e051      	b.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d123      	bne.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0204 	orr.w	r2, r3, #4
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e046      	b.n	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fd fcb3 	bl	80046d0 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e020      	b.n	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10c      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	e00b      	b.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	43da      	mvns	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d18d      	bne.n	8006d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e00:	e02d      	b.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f8aa 	bl	8006f5c <I2C_IsAcknowledgeFailed>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e02d      	b.n	8006e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d021      	beq.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fd fc59 	bl	80046d0 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d116      	bne.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f043 0220 	orr.w	r2, r3, #32
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e007      	b.n	8006e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d1ca      	bne.n	8006e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e82:	e02d      	b.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f869 	bl	8006f5c <I2C_IsAcknowledgeFailed>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e02d      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d021      	beq.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9c:	f7fd fc18 	bl	80046d0 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d116      	bne.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e007      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d1ca      	bne.n	8006e84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	0a1a      	lsrs	r2, r3, #8
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e008      	b.n	8006f48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f44:	d0e9      	beq.n	8006f1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200000a8 	.word	0x200000a8
 8006f58:	14f8b589 	.word	0x14f8b589

08006f5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f72:	d11b      	bne.n	8006fac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f043 0204 	orr.w	r2, r3, #4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fc8:	d103      	bne.n	8006fd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fd0:	e007      	b.n	8006fe2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fda:	d102      	bne.n	8006fe2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e31d      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffe:	4b94      	ldr	r3, [pc, #592]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007008:	4b91      	ldr	r3, [pc, #580]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007010:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d07b      	beq.n	8007116 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d006      	beq.n	8007032 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b0c      	cmp	r3, #12
 8007028:	d10f      	bne.n	800704a <HAL_RCC_OscConfig+0x5e>
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	d10b      	bne.n	800704a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007032:	4b87      	ldr	r3, [pc, #540]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d06a      	beq.n	8007114 <HAL_RCC_OscConfig+0x128>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d166      	bne.n	8007114 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e2f7      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d106      	bne.n	8007060 <HAL_RCC_OscConfig+0x74>
 8007052:	4b7f      	ldr	r3, [pc, #508]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7e      	ldr	r2, [pc, #504]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e02d      	b.n	80070bc <HAL_RCC_OscConfig+0xd0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10c      	bne.n	8007082 <HAL_RCC_OscConfig+0x96>
 8007068:	4b79      	ldr	r3, [pc, #484]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a78      	ldr	r2, [pc, #480]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	4b76      	ldr	r3, [pc, #472]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a75      	ldr	r2, [pc, #468]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e01c      	b.n	80070bc <HAL_RCC_OscConfig+0xd0>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b05      	cmp	r3, #5
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0xb8>
 800708a:	4b71      	ldr	r3, [pc, #452]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a70      	ldr	r2, [pc, #448]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4b6e      	ldr	r3, [pc, #440]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a6d      	ldr	r2, [pc, #436]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800709c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e00b      	b.n	80070bc <HAL_RCC_OscConfig+0xd0>
 80070a4:	4b6a      	ldr	r3, [pc, #424]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a69      	ldr	r2, [pc, #420]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80070aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b67      	ldr	r3, [pc, #412]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a66      	ldr	r2, [pc, #408]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c4:	f7fd fb04 	bl	80046d0 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070cc:	f7fd fb00 	bl	80046d0 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	; 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e2ad      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070de:	4b5c      	ldr	r3, [pc, #368]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0xe0>
 80070ea:	e014      	b.n	8007116 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ec:	f7fd faf0 	bl	80046d0 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070f4:	f7fd faec 	bl	80046d0 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b64      	cmp	r3, #100	; 0x64
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e299      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007106:	4b52      	ldr	r3, [pc, #328]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x108>
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d05a      	beq.n	80071d8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d005      	beq.n	8007134 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d119      	bne.n	8007162 <HAL_RCC_OscConfig+0x176>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d116      	bne.n	8007162 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007134:	4b46      	ldr	r3, [pc, #280]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_OscConfig+0x160>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d001      	beq.n	800714c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e276      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714c:	4b40      	ldr	r3, [pc, #256]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	493d      	ldr	r1, [pc, #244]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800715c:	4313      	orrs	r3, r2
 800715e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007160:	e03a      	b.n	80071d8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d020      	beq.n	80071ac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800716a:	4b3a      	ldr	r3, [pc, #232]	; (8007254 <HAL_RCC_OscConfig+0x268>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007170:	f7fd faae 	bl	80046d0 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007178:	f7fd faaa 	bl	80046d0 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e257      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007196:	4b2e      	ldr	r3, [pc, #184]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	492a      	ldr	r1, [pc, #168]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
 80071aa:	e015      	b.n	80071d8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ac:	4b29      	ldr	r3, [pc, #164]	; (8007254 <HAL_RCC_OscConfig+0x268>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b2:	f7fd fa8d 	bl	80046d0 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ba:	f7fd fa89 	bl	80046d0 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e236      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071cc:	4b20      	ldr	r3, [pc, #128]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f0      	bne.n	80071ba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80b8 	beq.w	8007356 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d170      	bne.n	80072ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071ec:	4b18      	ldr	r3, [pc, #96]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_RCC_OscConfig+0x218>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e21a      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007210:	429a      	cmp	r2, r3
 8007212:	d921      	bls.n	8007258 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fc7d 	bl	8007b18 <RCC_SetFlashLatencyFromMSIRange>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e208      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	4906      	ldr	r1, [pc, #24]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	061b      	lsls	r3, r3, #24
 8007248:	4901      	ldr	r1, [pc, #4]	; (8007250 <HAL_RCC_OscConfig+0x264>)
 800724a:	4313      	orrs	r3, r2
 800724c:	604b      	str	r3, [r1, #4]
 800724e:	e020      	b.n	8007292 <HAL_RCC_OscConfig+0x2a6>
 8007250:	40023800 	.word	0x40023800
 8007254:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007258:	4b99      	ldr	r3, [pc, #612]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	4996      	ldr	r1, [pc, #600]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800726a:	4b95      	ldr	r3, [pc, #596]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	4991      	ldr	r1, [pc, #580]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800727a:	4313      	orrs	r3, r2
 800727c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fc48 	bl	8007b18 <RCC_SetFlashLatencyFromMSIRange>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e1d3      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	0b5b      	lsrs	r3, r3, #13
 8007298:	3301      	adds	r3, #1
 800729a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80072a2:	4a87      	ldr	r2, [pc, #540]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80072a4:	6892      	ldr	r2, [r2, #8]
 80072a6:	0912      	lsrs	r2, r2, #4
 80072a8:	f002 020f 	and.w	r2, r2, #15
 80072ac:	4985      	ldr	r1, [pc, #532]	; (80074c4 <HAL_RCC_OscConfig+0x4d8>)
 80072ae:	5c8a      	ldrb	r2, [r1, r2]
 80072b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80072b2:	4a85      	ldr	r2, [pc, #532]	; (80074c8 <HAL_RCC_OscConfig+0x4dc>)
 80072b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072b6:	4b85      	ldr	r3, [pc, #532]	; (80074cc <HAL_RCC_OscConfig+0x4e0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd f9bc 	bl	8004638 <HAL_InitTick>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d045      	beq.n	8007356 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	e1b5      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d029      	beq.n	800732a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072d6:	4b7e      	ldr	r3, [pc, #504]	; (80074d0 <HAL_RCC_OscConfig+0x4e4>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072dc:	f7fd f9f8 	bl	80046d0 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072e4:	f7fd f9f4 	bl	80046d0 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e1a1      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80072f6:	4b72      	ldr	r3, [pc, #456]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007302:	4b6f      	ldr	r3, [pc, #444]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	496c      	ldr	r1, [pc, #432]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007310:	4313      	orrs	r3, r2
 8007312:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007314:	4b6a      	ldr	r3, [pc, #424]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	061b      	lsls	r3, r3, #24
 8007322:	4967      	ldr	r1, [pc, #412]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007324:	4313      	orrs	r3, r2
 8007326:	604b      	str	r3, [r1, #4]
 8007328:	e015      	b.n	8007356 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800732a:	4b69      	ldr	r3, [pc, #420]	; (80074d0 <HAL_RCC_OscConfig+0x4e4>)
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007330:	f7fd f9ce 	bl	80046d0 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007338:	f7fd f9ca 	bl	80046d0 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e177      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800734a:	4b5d      	ldr	r3, [pc, #372]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f0      	bne.n	8007338 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d030      	beq.n	80073c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800736a:	4b5a      	ldr	r3, [pc, #360]	; (80074d4 <HAL_RCC_OscConfig+0x4e8>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007370:	f7fd f9ae 	bl	80046d0 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007378:	f7fd f9aa 	bl	80046d0 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e157      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800738a:	4b4d      	ldr	r3, [pc, #308]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCC_OscConfig+0x38c>
 8007396:	e015      	b.n	80073c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007398:	4b4e      	ldr	r3, [pc, #312]	; (80074d4 <HAL_RCC_OscConfig+0x4e8>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800739e:	f7fd f997 	bl	80046d0 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073a6:	f7fd f993 	bl	80046d0 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e140      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073b8:	4b41      	ldr	r3, [pc, #260]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80b5 	beq.w	800753c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073d2:	2300      	movs	r3, #0
 80073d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d6:	4b3a      	ldr	r3, [pc, #232]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10d      	bne.n	80073fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e2:	4b37      	ldr	r3, [pc, #220]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	4a36      	ldr	r2, [pc, #216]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80073e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6253      	str	r3, [r2, #36]	; 0x24
 80073ee:	4b34      	ldr	r3, [pc, #208]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fa:	2301      	movs	r3, #1
 80073fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fe:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <HAL_RCC_OscConfig+0x4ec>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d118      	bne.n	800743c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800740a:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <HAL_RCC_OscConfig+0x4ec>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a32      	ldr	r2, [pc, #200]	; (80074d8 <HAL_RCC_OscConfig+0x4ec>)
 8007410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007416:	f7fd f95b 	bl	80046d0 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741e:	f7fd f957 	bl	80046d0 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b64      	cmp	r3, #100	; 0x64
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e104      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007430:	4b29      	ldr	r3, [pc, #164]	; (80074d8 <HAL_RCC_OscConfig+0x4ec>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <HAL_RCC_OscConfig+0x466>
 8007444:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800744a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744e:	6353      	str	r3, [r2, #52]	; 0x34
 8007450:	e02d      	b.n	80074ae <HAL_RCC_OscConfig+0x4c2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10c      	bne.n	8007474 <HAL_RCC_OscConfig+0x488>
 800745a:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	4a18      	ldr	r2, [pc, #96]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007464:	6353      	str	r3, [r2, #52]	; 0x34
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746a:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800746c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007470:	6353      	str	r3, [r2, #52]	; 0x34
 8007472:	e01c      	b.n	80074ae <HAL_RCC_OscConfig+0x4c2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d10c      	bne.n	8007496 <HAL_RCC_OscConfig+0x4aa>
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007486:	6353      	str	r3, [r2, #52]	; 0x34
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	4a0c      	ldr	r2, [pc, #48]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800748e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007492:	6353      	str	r3, [r2, #52]	; 0x34
 8007494:	e00b      	b.n	80074ae <HAL_RCC_OscConfig+0x4c2>
 8007496:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 8007498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749a:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 800749c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a0:	6353      	str	r3, [r2, #52]	; 0x34
 80074a2:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80074a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a6:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <HAL_RCC_OscConfig+0x4d4>)
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d024      	beq.n	8007500 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b6:	f7fd f90b 	bl	80046d0 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074bc:	e019      	b.n	80074f2 <HAL_RCC_OscConfig+0x506>
 80074be:	bf00      	nop
 80074c0:	40023800 	.word	0x40023800
 80074c4:	0801d064 	.word	0x0801d064
 80074c8:	200000a8 	.word	0x200000a8
 80074cc:	200000ac 	.word	0x200000ac
 80074d0:	42470020 	.word	0x42470020
 80074d4:	42470680 	.word	0x42470680
 80074d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074dc:	f7fd f8f8 	bl	80046d0 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e0a3      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074f2:	4b54      	ldr	r3, [pc, #336]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ee      	beq.n	80074dc <HAL_RCC_OscConfig+0x4f0>
 80074fe:	e014      	b.n	800752a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007500:	f7fd f8e6 	bl	80046d0 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007506:	e00a      	b.n	800751e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007508:	f7fd f8e2 	bl	80046d0 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	; 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e08d      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800751e:	4b49      	ldr	r3, [pc, #292]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1ee      	bne.n	8007508 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800752a:	7ffb      	ldrb	r3, [r7, #31]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d105      	bne.n	800753c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007530:	4b44      	ldr	r3, [pc, #272]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	4a43      	ldr	r2, [pc, #268]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d079      	beq.n	8007638 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b0c      	cmp	r3, #12
 8007548:	d056      	beq.n	80075f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b02      	cmp	r3, #2
 8007550:	d13b      	bne.n	80075ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007552:	4b3d      	ldr	r3, [pc, #244]	; (8007648 <HAL_RCC_OscConfig+0x65c>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007558:	f7fd f8ba 	bl	80046d0 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007560:	f7fd f8b6 	bl	80046d0 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e063      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007572:	4b34      	ldr	r3, [pc, #208]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	4319      	orrs	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	430b      	orrs	r3, r1
 8007596:	492b      	ldr	r1, [pc, #172]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007598:	4313      	orrs	r3, r2
 800759a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800759c:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <HAL_RCC_OscConfig+0x65c>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a2:	f7fd f895 	bl	80046d0 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075aa:	f7fd f891 	bl	80046d0 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e03e      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075bc:	4b21      	ldr	r3, [pc, #132]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x5be>
 80075c8:	e036      	b.n	8007638 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ca:	4b1f      	ldr	r3, [pc, #124]	; (8007648 <HAL_RCC_OscConfig+0x65c>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d0:	f7fd f87e 	bl	80046d0 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fd f87a 	bl	80046d0 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e027      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ea:	4b16      	ldr	r3, [pc, #88]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f0      	bne.n	80075d8 <HAL_RCC_OscConfig+0x5ec>
 80075f6:	e01f      	b.n	8007638 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e01a      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <HAL_RCC_OscConfig+0x658>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	429a      	cmp	r2, r3
 8007616:	d10d      	bne.n	8007634 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d106      	bne.n	8007634 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	42470060 	.word	0x42470060

0800764c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e11a      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b8f      	ldr	r3, [pc, #572]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d919      	bls.n	80076a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d105      	bne.n	8007680 <HAL_RCC_ClockConfig+0x34>
 8007674:	4b8a      	ldr	r3, [pc, #552]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a89      	ldr	r2, [pc, #548]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 800767a:	f043 0304 	orr.w	r3, r3, #4
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	4b87      	ldr	r3, [pc, #540]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f023 0201 	bic.w	r2, r3, #1
 8007688:	4985      	ldr	r1, [pc, #532]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007690:	4b83      	ldr	r3, [pc, #524]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d001      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e0f9      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ae:	4b7d      	ldr	r3, [pc, #500]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	497a      	ldr	r1, [pc, #488]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 808e 	beq.w	80077ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076d6:	4b73      	ldr	r3, [pc, #460]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d121      	bne.n	8007726 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0d7      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d107      	bne.n	80076fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076ee:	4b6d      	ldr	r3, [pc, #436]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d115      	bne.n	8007726 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e0cb      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d107      	bne.n	8007716 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007706:	4b67      	ldr	r3, [pc, #412]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e0bf      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007716:	4b63      	ldr	r3, [pc, #396]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e0b7      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007726:	4b5f      	ldr	r3, [pc, #380]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 0203 	bic.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	495c      	ldr	r1, [pc, #368]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007738:	f7fc ffca 	bl	80046d0 <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d112      	bne.n	800776c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007746:	e00a      	b.n	800775e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007748:	f7fc ffc2 	bl	80046d0 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	f241 3288 	movw	r2, #5000	; 0x1388
 8007756:	4293      	cmp	r3, r2
 8007758:	d901      	bls.n	800775e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e09b      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800775e:	4b51      	ldr	r3, [pc, #324]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b08      	cmp	r3, #8
 8007768:	d1ee      	bne.n	8007748 <HAL_RCC_ClockConfig+0xfc>
 800776a:	e03e      	b.n	80077ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d112      	bne.n	800779a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007774:	e00a      	b.n	800778c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007776:	f7fc ffab 	bl	80046d0 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f241 3288 	movw	r2, #5000	; 0x1388
 8007784:	4293      	cmp	r3, r2
 8007786:	d901      	bls.n	800778c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e084      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800778c:	4b45      	ldr	r3, [pc, #276]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 030c 	and.w	r3, r3, #12
 8007794:	2b0c      	cmp	r3, #12
 8007796:	d1ee      	bne.n	8007776 <HAL_RCC_ClockConfig+0x12a>
 8007798:	e027      	b.n	80077ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d11d      	bne.n	80077de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80077a2:	e00a      	b.n	80077ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a4:	f7fc ff94 	bl	80046d0 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e06d      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80077ba:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d1ee      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x158>
 80077c6:	e010      	b.n	80077ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c8:	f7fc ff82 	bl	80046d0 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e05b      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ee      	bne.n	80077c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077ea:	4b2d      	ldr	r3, [pc, #180]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d219      	bcs.n	800782c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d105      	bne.n	800780a <HAL_RCC_ClockConfig+0x1be>
 80077fe:	4b28      	ldr	r3, [pc, #160]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007804:	f043 0304 	orr.w	r3, r3, #4
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 0201 	bic.w	r2, r3, #1
 8007812:	4923      	ldr	r1, [pc, #140]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <HAL_RCC_ClockConfig+0x254>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e034      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4917      	ldr	r1, [pc, #92]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	490f      	ldr	r1, [pc, #60]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800786a:	f000 f823 	bl	80078b4 <HAL_RCC_GetSysClockFreq>
 800786e:	4602      	mov	r2, r0
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <HAL_RCC_ClockConfig+0x258>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	490b      	ldr	r1, [pc, #44]	; (80078a8 <HAL_RCC_ClockConfig+0x25c>)
 800787c:	5ccb      	ldrb	r3, [r1, r3]
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <HAL_RCC_ClockConfig+0x260>)
 8007884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007886:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <HAL_RCC_ClockConfig+0x264>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fc fed4 	bl	8004638 <HAL_InitTick>
 8007890:	4603      	mov	r3, r0
 8007892:	72fb      	strb	r3, [r7, #11]

  return status;
 8007894:	7afb      	ldrb	r3, [r7, #11]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40023c00 	.word	0x40023c00
 80078a4:	40023800 	.word	0x40023800
 80078a8:	0801d064 	.word	0x0801d064
 80078ac:	200000a8 	.word	0x200000a8
 80078b0:	200000ac 	.word	0x200000ac

080078b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b8:	b092      	sub	sp, #72	; 0x48
 80078ba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80078bc:	4b79      	ldr	r3, [pc, #484]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	2b0c      	cmp	r3, #12
 80078ca:	d00d      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0x34>
 80078cc:	2b0c      	cmp	r3, #12
 80078ce:	f200 80d5 	bhi.w	8007a7c <HAL_RCC_GetSysClockFreq+0x1c8>
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d002      	beq.n	80078dc <HAL_RCC_GetSysClockFreq+0x28>
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d003      	beq.n	80078e2 <HAL_RCC_GetSysClockFreq+0x2e>
 80078da:	e0cf      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078dc:	4b72      	ldr	r3, [pc, #456]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80078de:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80078e0:	e0da      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078e2:	4b72      	ldr	r3, [pc, #456]	; (8007aac <HAL_RCC_GetSysClockFreq+0x1f8>)
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80078e6:	e0d7      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80078e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ea:	0c9b      	lsrs	r3, r3, #18
 80078ec:	f003 020f 	and.w	r2, r3, #15
 80078f0:	4b6f      	ldr	r3, [pc, #444]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078f2:	5c9b      	ldrb	r3, [r3, r2]
 80078f4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	0d9b      	lsrs	r3, r3, #22
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007902:	4b68      	ldr	r3, [pc, #416]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d05d      	beq.n	80079ca <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2200      	movs	r2, #0
 8007912:	4618      	mov	r0, r3
 8007914:	4611      	mov	r1, r2
 8007916:	4604      	mov	r4, r0
 8007918:	460d      	mov	r5, r1
 800791a:	4622      	mov	r2, r4
 800791c:	462b      	mov	r3, r5
 800791e:	f04f 0000 	mov.w	r0, #0
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	0159      	lsls	r1, r3, #5
 8007928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800792c:	0150      	lsls	r0, r2, #5
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4621      	mov	r1, r4
 8007934:	1a51      	subs	r1, r2, r1
 8007936:	6139      	str	r1, [r7, #16]
 8007938:	4629      	mov	r1, r5
 800793a:	eb63 0301 	sbc.w	r3, r3, r1
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800794c:	4659      	mov	r1, fp
 800794e:	018b      	lsls	r3, r1, #6
 8007950:	4651      	mov	r1, sl
 8007952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007956:	4651      	mov	r1, sl
 8007958:	018a      	lsls	r2, r1, #6
 800795a:	46d4      	mov	ip, sl
 800795c:	ebb2 080c 	subs.w	r8, r2, ip
 8007960:	4659      	mov	r1, fp
 8007962:	eb63 0901 	sbc.w	r9, r3, r1
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800797a:	4690      	mov	r8, r2
 800797c:	4699      	mov	r9, r3
 800797e:	4623      	mov	r3, r4
 8007980:	eb18 0303 	adds.w	r3, r8, r3
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	462b      	mov	r3, r5
 8007988:	eb49 0303 	adc.w	r3, r9, r3
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	f04f 0300 	mov.w	r3, #0
 8007996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800799a:	4629      	mov	r1, r5
 800799c:	024b      	lsls	r3, r1, #9
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	4604      	mov	r4, r0
 80079a4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80079a8:	4601      	mov	r1, r0
 80079aa:	024a      	lsls	r2, r1, #9
 80079ac:	4610      	mov	r0, r2
 80079ae:	4619      	mov	r1, r3
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	2200      	movs	r2, #0
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079bc:	f7f8 fbe6 	bl	800018c <__aeabi_uldivmod>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4613      	mov	r3, r2
 80079c6:	647b      	str	r3, [r7, #68]	; 0x44
 80079c8:	e055      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2200      	movs	r2, #0
 80079ce:	623b      	str	r3, [r7, #32]
 80079d0:	627a      	str	r2, [r7, #36]	; 0x24
 80079d2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079d6:	4642      	mov	r2, r8
 80079d8:	464b      	mov	r3, r9
 80079da:	f04f 0000 	mov.w	r0, #0
 80079de:	f04f 0100 	mov.w	r1, #0
 80079e2:	0159      	lsls	r1, r3, #5
 80079e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079e8:	0150      	lsls	r0, r2, #5
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	46c4      	mov	ip, r8
 80079f0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	468c      	mov	ip, r1
 80079fa:	eb63 0b0c 	sbc.w	fp, r3, ip
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a0a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a0e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a12:	ebb2 040a 	subs.w	r4, r2, sl
 8007a16:	eb63 050b 	sbc.w	r5, r3, fp
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	00eb      	lsls	r3, r5, #3
 8007a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a28:	00e2      	lsls	r2, r4, #3
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	18e3      	adds	r3, r4, r3
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	460b      	mov	r3, r1
 8007a36:	eb45 0303 	adc.w	r3, r5, r3
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a48:	4629      	mov	r1, r5
 8007a4a:	028b      	lsls	r3, r1, #10
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4604      	mov	r4, r0
 8007a52:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007a56:	4601      	mov	r1, r0
 8007a58:	028a      	lsls	r2, r1, #10
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	2200      	movs	r2, #0
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	61fa      	str	r2, [r7, #28]
 8007a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a6a:	f7f8 fb8f 	bl	800018c <__aeabi_uldivmod>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4613      	mov	r3, r2
 8007a74:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8007a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007a7a:	e00d      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	0b5b      	lsrs	r3, r3, #13
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007a96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3748      	adds	r7, #72	; 0x48
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aa4:	40023800 	.word	0x40023800
 8007aa8:	00f42400 	.word	0x00f42400
 8007aac:	007a1200 	.word	0x007a1200
 8007ab0:	0801d058 	.word	0x0801d058

08007ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007aba:	681b      	ldr	r3, [r3, #0]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	200000a8 	.word	0x200000a8

08007ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007acc:	f7ff fff2 	bl	8007ab4 <HAL_RCC_GetHCLKFreq>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	4903      	ldr	r1, [pc, #12]	; (8007aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ade:	5ccb      	ldrb	r3, [r1, r3]
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	0801d074 	.word	0x0801d074

08007af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007af4:	f7ff ffde 	bl	8007ab4 <HAL_RCC_GetHCLKFreq>
 8007af8:	4602      	mov	r2, r0
 8007afa:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	0adb      	lsrs	r3, r3, #11
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	4903      	ldr	r1, [pc, #12]	; (8007b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b06:	5ccb      	ldrb	r3, [r1, r3]
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40023800 	.word	0x40023800
 8007b14:	0801d074 	.word	0x0801d074

08007b18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b20:	2300      	movs	r3, #0
 8007b22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007b24:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d12c      	bne.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b30:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007b3c:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	e016      	b.n	8007b76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b48:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b52:	6253      	str	r3, [r2, #36]	; 0x24
 8007b54:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007b68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b6a:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	4a17      	ldr	r2, [pc, #92]	; (8007bcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007b7c:	d105      	bne.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b84:	d101      	bne.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007b86:	2301      	movs	r3, #1
 8007b88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d105      	bne.n	8007b9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007b90:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0f      	ldr	r2, [pc, #60]	; (8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b96:	f043 0304 	orr.w	r3, r3, #4
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f023 0201 	bic.w	r2, r3, #1
 8007ba4:	490b      	ldr	r1, [pc, #44]	; (8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d001      	beq.n	8007bbe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	40007000 	.word	0x40007000
 8007bd4:	40023c00 	.word	0x40023c00

08007bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e07b      	b.n	8007ce2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d108      	bne.n	8007c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfa:	d009      	beq.n	8007c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	61da      	str	r2, [r3, #28]
 8007c02:	e005      	b.n	8007c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fb fa52 	bl	80030d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c94:	ea42 0103 	orr.w	r1, r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	f003 0104 	and.w	r1, r3, #4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	f003 0210 	and.w	r2, r3, #16
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b08c      	sub	sp, #48	; 0x30
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x26>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e18a      	b.n	8008026 <HAL_SPI_TransmitReceive+0x33c>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d18:	f7fc fcda 	bl	80046d0 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d2e:	887b      	ldrh	r3, [r7, #2]
 8007d30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d00f      	beq.n	8007d5a <HAL_SPI_TransmitReceive+0x70>
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d40:	d107      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x68>
 8007d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d003      	beq.n	8007d5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
 8007d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d58:	e15b      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_SPI_TransmitReceive+0x82>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_SPI_TransmitReceive+0x82>
 8007d66:	887b      	ldrh	r3, [r7, #2]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d72:	e14e      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d003      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2205      	movs	r2, #5
 8007d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	887a      	ldrh	r2, [r7, #2]
 8007d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	887a      	ldrh	r2, [r7, #2]
 8007d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	887a      	ldrh	r2, [r7, #2]
 8007daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	887a      	ldrh	r2, [r7, #2]
 8007db0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d007      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de4:	d178      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <HAL_SPI_TransmitReceive+0x10a>
 8007dee:	8b7b      	ldrh	r3, [r7, #26]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d166      	bne.n	8007ec2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	881a      	ldrh	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	1c9a      	adds	r2, r3, #2
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e18:	e053      	b.n	8007ec2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d11b      	bne.n	8007e60 <HAL_SPI_TransmitReceive+0x176>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d016      	beq.n	8007e60 <HAL_SPI_TransmitReceive+0x176>
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d113      	bne.n	8007e60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e48:	1c9a      	adds	r2, r3, #2
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d119      	bne.n	8007ea2 <HAL_SPI_TransmitReceive+0x1b8>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d014      	beq.n	8007ea2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	b292      	uxth	r2, r2
 8007e84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ea2:	f7fc fc15 	bl	80046d0 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d807      	bhi.n	8007ec2 <HAL_SPI_TransmitReceive+0x1d8>
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d003      	beq.n	8007ec2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ec0:	e0a7      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1a6      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x130>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1a1      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x130>
 8007ed6:	e07c      	b.n	8007fd2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x1fc>
 8007ee0:	8b7b      	ldrh	r3, [r7, #26]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d16b      	bne.n	8007fbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	7812      	ldrb	r2, [r2, #0]
 8007ef2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f0c:	e057      	b.n	8007fbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d11c      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x26c>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <HAL_SPI_TransmitReceive+0x26c>
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d114      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	7812      	ldrb	r2, [r2, #0]
 8007f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d119      	bne.n	8007f98 <HAL_SPI_TransmitReceive+0x2ae>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d014      	beq.n	8007f98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f94:	2301      	movs	r3, #1
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f98:	f7fc fb9a 	bl	80046d0 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d803      	bhi.n	8007fb0 <HAL_SPI_TransmitReceive+0x2c6>
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d102      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x2cc>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fbc:	e029      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1a2      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x224>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d19d      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f8b2 	bl	8008140 <SPI_EndRxTxTransaction>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007fee:	e010      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10b      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	e000      	b.n	8008012 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008010:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008026:	4618      	mov	r0, r3
 8008028:	3730      	adds	r7, #48	; 0x30
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008040:	f7fc fb46 	bl	80046d0 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4413      	add	r3, r2
 800804e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008050:	f7fc fb3e 	bl	80046d0 <HAL_GetTick>
 8008054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008056:	4b39      	ldr	r3, [pc, #228]	; (800813c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	015b      	lsls	r3, r3, #5
 800805c:	0d1b      	lsrs	r3, r3, #20
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008066:	e054      	b.n	8008112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d050      	beq.n	8008112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008070:	f7fc fb2e 	bl	80046d0 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	69fa      	ldr	r2, [r7, #28]
 800807c:	429a      	cmp	r2, r3
 800807e:	d902      	bls.n	8008086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d13d      	bne.n	8008102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800809e:	d111      	bne.n	80080c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a8:	d004      	beq.n	80080b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b2:	d107      	bne.n	80080c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080cc:	d10f      	bne.n	80080ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e017      	b.n	8008132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3b01      	subs	r3, #1
 8008110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	bf0c      	ite	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	2300      	movne	r3, #0
 8008126:	b2db      	uxtb	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	429a      	cmp	r2, r3
 800812e:	d19b      	bne.n	8008068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	200000a8 	.word	0x200000a8

08008140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <SPI_EndRxTxTransaction+0x7c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <SPI_EndRxTxTransaction+0x80>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	0d5b      	lsrs	r3, r3, #21
 8008158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800816a:	d112      	bne.n	8008192 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	2180      	movs	r1, #128	; 0x80
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff ff5a 	bl	8008030 <SPI_WaitFlagStateUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e00f      	b.n	80081b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3b01      	subs	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d0f2      	beq.n	8008192 <SPI_EndRxTxTransaction+0x52>
 80081ac:	e000      	b.n	80081b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80081ae:	bf00      	nop
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200000a8 	.word	0x200000a8
 80081c0:	165e9f81 	.word	0x165e9f81

080081c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e03f      	b.n	8008256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fa ffb6 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f905 	bl	8008418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800821c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695a      	ldr	r2, [r3, #20]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800822c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800823c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b08a      	sub	sp, #40	; 0x28
 8008262:	af02      	add	r7, sp, #8
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b20      	cmp	r3, #32
 800827c:	d17c      	bne.n	8008378 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_UART_Transmit+0x2c>
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e075      	b.n	800837a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UART_Transmit+0x3e>
 8008298:	2302      	movs	r3, #2
 800829a:	e06e      	b.n	800837a <HAL_UART_Transmit+0x11c>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2221      	movs	r2, #33	; 0x21
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082b2:	f7fc fa0d 	bl	80046d0 <HAL_GetTick>
 80082b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	88fa      	ldrh	r2, [r7, #6]
 80082c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082cc:	d108      	bne.n	80082e0 <HAL_UART_Transmit+0x82>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	e003      	b.n	80082e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082f0:	e02a      	b.n	8008348 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2200      	movs	r2, #0
 80082fa:	2180      	movs	r1, #128	; 0x80
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f840 	bl	8008382 <UART_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e036      	b.n	800837a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	3302      	adds	r3, #2
 8008326:	61bb      	str	r3, [r7, #24]
 8008328:	e007      	b.n	800833a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	781a      	ldrb	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	3301      	adds	r3, #1
 8008338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1cf      	bne.n	80082f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	2140      	movs	r1, #64	; 0x40
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f810 	bl	8008382 <UART_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e006      	b.n	800837a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e000      	b.n	800837a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008392:	e02c      	b.n	80083ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	d028      	beq.n	80083ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80083a2:	f7fc f995 	bl	80046d0 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d21d      	bcs.n	80083ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0201 	bic.w	r2, r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e00f      	b.n	800840e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4013      	ands	r3, r2
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	bf0c      	ite	eq
 80083fe:	2301      	moveq	r3, #1
 8008400:	2300      	movne	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	429a      	cmp	r2, r3
 800840a:	d0c3      	beq.n	8008394 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4313      	orrs	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008458:	f023 030c 	bic.w	r3, r3, #12
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	430b      	orrs	r3, r1
 8008464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a55      	ldr	r2, [pc, #340]	; (80085d8 <UART_SetConfig+0x1c0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d103      	bne.n	800848e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008486:	f7ff fb33 	bl	8007af0 <HAL_RCC_GetPCLK2Freq>
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	e002      	b.n	8008494 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800848e:	f7ff fb1b 	bl	8007ac8 <HAL_RCC_GetPCLK1Freq>
 8008492:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849c:	d14c      	bne.n	8008538 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009a      	lsls	r2, r3, #2
 80084a8:	441a      	add	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	4a49      	ldr	r2, [pc, #292]	; (80085dc <UART_SetConfig+0x1c4>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	0119      	lsls	r1, r3, #4
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009a      	lsls	r2, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084d4:	4b41      	ldr	r3, [pc, #260]	; (80085dc <UART_SetConfig+0x1c4>)
 80084d6:	fba3 0302 	umull	r0, r3, r3, r2
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	2064      	movs	r0, #100	; 0x64
 80084de:	fb00 f303 	mul.w	r3, r0, r3
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	3332      	adds	r3, #50	; 0x32
 80084e8:	4a3c      	ldr	r2, [pc, #240]	; (80085dc <UART_SetConfig+0x1c4>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084f6:	4419      	add	r1, r3
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009a      	lsls	r2, r3, #2
 8008502:	441a      	add	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	fbb2 f2f3 	udiv	r2, r2, r3
 800850e:	4b33      	ldr	r3, [pc, #204]	; (80085dc <UART_SetConfig+0x1c4>)
 8008510:	fba3 0302 	umull	r0, r3, r3, r2
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	2064      	movs	r0, #100	; 0x64
 8008518:	fb00 f303 	mul.w	r3, r0, r3
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	3332      	adds	r3, #50	; 0x32
 8008522:	4a2e      	ldr	r2, [pc, #184]	; (80085dc <UART_SetConfig+0x1c4>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	f003 0207 	and.w	r2, r3, #7
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	440a      	add	r2, r1
 8008534:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008536:	e04a      	b.n	80085ce <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009a      	lsls	r2, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	fbb2 f3f3 	udiv	r3, r2, r3
 800854e:	4a23      	ldr	r2, [pc, #140]	; (80085dc <UART_SetConfig+0x1c4>)
 8008550:	fba2 2303 	umull	r2, r3, r2, r3
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	0119      	lsls	r1, r3, #4
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009a      	lsls	r2, r3, #2
 8008562:	441a      	add	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	fbb2 f2f3 	udiv	r2, r2, r3
 800856e:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <UART_SetConfig+0x1c4>)
 8008570:	fba3 0302 	umull	r0, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2064      	movs	r0, #100	; 0x64
 8008578:	fb00 f303 	mul.w	r3, r0, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a16      	ldr	r2, [pc, #88]	; (80085dc <UART_SetConfig+0x1c4>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800858e:	4419      	add	r1, r3
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009a      	lsls	r2, r3, #2
 800859a:	441a      	add	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80085a6:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <UART_SetConfig+0x1c4>)
 80085a8:	fba3 0302 	umull	r0, r3, r3, r2
 80085ac:	095b      	lsrs	r3, r3, #5
 80085ae:	2064      	movs	r0, #100	; 0x64
 80085b0:	fb00 f303 	mul.w	r3, r0, r3
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	3332      	adds	r3, #50	; 0x32
 80085ba:	4a08      	ldr	r2, [pc, #32]	; (80085dc <UART_SetConfig+0x1c4>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	f003 020f 	and.w	r2, r3, #15
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	440a      	add	r2, r1
 80085cc:	609a      	str	r2, [r3, #8]
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40013800 	.word	0x40013800
 80085dc:	51eb851f 	.word	0x51eb851f

080085e0 <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <ndefAllocRecord+0x34>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	d901      	bls.n	80085f0 <ndefAllocRecord+0x10>
    {
        return NULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	e00c      	b.n	800860a <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <ndefAllocRecord+0x34>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	b2d1      	uxtb	r1, r2
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <ndefAllocRecord+0x34>)
 80085fa:	7011      	strb	r1, [r2, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a04      	ldr	r2, [pc, #16]	; (8008618 <ndefAllocRecord+0x38>)
 8008608:	4413      	add	r3, r2
}
 800860a:	4618      	mov	r0, r3
 800860c:	46bd      	mov	sp, r7
 800860e:	bc80      	pop	{r7}
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20003140 	.word	0x20003140
 8008618:	20003144 	.word	0x20003144

0800861c <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 800862a:	2307      	movs	r3, #7
 800862c:	e00c      	b.n	8008648 <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <ndefMessageInit+0x38>)
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20003140 	.word	0x20003140

08008658 <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <ndefMessageGetInfo+0x1e>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 8008676:	2307      	movs	r3, #7
 8008678:	e01a      	b.n	80086b0 <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 8008680:	e00c      	b.n	800869c <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f000 f994 	bl	80089b0 <ndefRecordGetLength>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4413      	add	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
        recordCount++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]

        record = record->next;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1ef      	bne.n	8008682 <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <ndefMessageAppend+0x16>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 80086ce:	2307      	movs	r3, #7
 80086d0:	e043      	b.n	800875a <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008704:	b2da      	uxtb	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	701a      	strb	r2, [r3, #0]

        message->record = record;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e014      	b.n	800873c <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 8008718:	e002      	b.n	8008720 <ndefMessageAppend+0x68>
        {
            current = current->next;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1f8      	bne.n	800871a <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	b2da      	uxtb	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 800873c:	6838      	ldr	r0, [r7, #0]
 800873e:	f000 f937 	bl	80089b0 <ndefRecordGetLength>
 8008742:	4602      	mov	r2, r0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	441a      	add	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b088      	sub	sp, #32
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <ndefMessageDecode+0x1e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <ndefMessageDecode+0x1e>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 8008780:	2307      	movs	r3, #7
 8008782:	e043      	b.n	800880c <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 8008784:	6838      	ldr	r0, [r7, #0]
 8008786:	f7ff ff49 	bl	800861c <ndefMessageInit>
 800878a:	4603      	mov	r3, r0
 800878c:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800878e:	8b7b      	ldrh	r3, [r7, #26]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <ndefMessageDecode+0x36>
    {
        return err;
 8008794:	8b7b      	ldrh	r3, [r7, #26]
 8008796:	e039      	b.n	800880c <ndefMessageDecode+0xaa>
    }

    offset = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 800879c:	e030      	b.n	8008800 <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 800879e:	f7ff ff1f 	bl	80085e0 <ndefAllocRecord>
 80087a2:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e02e      	b.n	800880c <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	6979      	ldr	r1, [r7, #20]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fa32 	bl	8008c32 <ndefRecordDecode>
 80087ce:	4603      	mov	r3, r0
 80087d0:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80087d2:	8b7b      	ldrh	r3, [r7, #26]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <ndefMessageDecode+0x7a>
        {
            return err;
 80087d8:	8b7b      	ldrh	r3, [r7, #26]
 80087da:	e017      	b.n	800880c <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 80087dc:	6978      	ldr	r0, [r7, #20]
 80087de:	f000 f8e7 	bl	80089b0 <ndefRecordGetLength>
 80087e2:	4602      	mov	r2, r0
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 80087ea:	6979      	ldr	r1, [r7, #20]
 80087ec:	6838      	ldr	r0, [r7, #0]
 80087ee:	f7ff ff63 	bl	80086b8 <ndefMessageAppend>
 80087f2:	4603      	mov	r3, r0
 80087f4:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 80087f6:	8b7b      	ldrh	r3, [r7, #26]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <ndefMessageDecode+0x9e>
        {
            return err;
 80087fc:	8b7b      	ldrh	r3, [r7, #26]
 80087fe:	e005      	b.n	800880c <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	429a      	cmp	r2, r3
 8008808:	d3c9      	bcc.n	800879e <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08a      	sub	sp, #40	; 0x28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <ndefMessageEncode+0x1e>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <ndefMessageEncode+0x1e>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 8008832:	2307      	movs	r3, #7
 8008834:	e050      	b.n	80088d8 <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 8008836:	f107 0310 	add.w	r3, r7, #16
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff0b 	bl	8008658 <ndefMessageGetInfo>
 8008842:	4603      	mov	r3, r0
 8008844:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 8008846:	8b7b      	ldrh	r3, [r7, #26]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <ndefMessageEncode+0x42>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d204      	bcs.n	8008860 <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800885c:	2301      	movs	r3, #1
 800885e:	e03b      	b.n	80088d8 <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <ndefMessageEncode+0x58>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	e000      	b.n	800886e <ndefMessageEncode+0x5a>
 800886c:	2300      	movs	r3, #0
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 800887a:	e026      	b.n	80088ca <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	4413      	add	r3, r2
 8008884:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 800888a:	f107 0308 	add.w	r3, r7, #8
 800888e:	4619      	mov	r1, r3
 8008890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008892:	f000 fb91 	bl	8008fb8 <ndefRecordEncode>
 8008896:	4603      	mov	r3, r0
 8008898:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800889a:	8b7b      	ldrh	r3, [r7, #26]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	605a      	str	r2, [r3, #4]
            return err;
 80088a6:	8b7b      	ldrh	r3, [r7, #26]
 80088a8:	e016      	b.n	80088d8 <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a3a      	ldr	r2, [r7, #32]
 80088ae:	4413      	add	r3, r2
 80088b0:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <ndefMessageEncode+0xb2>
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	e000      	b.n	80088c8 <ndefMessageEncode+0xb4>
 80088c6:	2300      	movs	r3, #0
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1d5      	bne.n	800887c <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	6a3a      	ldr	r2, [r7, #32]
 80088d4:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	2300      	movs	r3, #0
 80088ee:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 80088f0:	2300      	movs	r3, #0
 80088f2:	60bb      	str	r3, [r7, #8]
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 80088fe:	2307      	movs	r3, #7
 8008900:	e01c      	b.n	800893c <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	461a      	mov	r2, r3
 800890e:	2100      	movs	r1, #0
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f866 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 8008916:	f107 0310 	add.w	r3, r7, #16
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8e4 	bl	8008aea <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f92f 	bl	8008b8c <ndefRecordSetPayload>

    record->ndeftype = NULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 8008952:	2300      	movs	r3, #0
 8008954:	e027      	b.n	80089a6 <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 8008956:	2301      	movs	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	e002      	b.n	800897a <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3304      	adds	r3, #4
 8008978:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	461a      	mov	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	789b      	ldrb	r3, [r3, #2]
 800899c:	461a      	mov	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

    return length;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <ndefRecordGetLength+0x12>
    {
        return 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	e00b      	b.n	80089da <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff ffbe 	bl	8008944 <ndefRecordGetHeaderLength>
 80089c8:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb75 	bl	80090ba <ndefRecordGetPayloadLength>
 80089d0:	4602      	mov	r2, r0
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

    return length;
 80089d8:	68fb      	ldr	r3, [r7, #12]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	460b      	mov	r3, r1
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <ndefRecordSetType+0x2a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	791b      	ldrb	r3, [r3, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 8008a0c:	2307      	movs	r3, #7
 8008a0e:	e012      	b.n	8008a36 <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	791a      	ldrb	r2, [r3, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <ndefRecordGetType+0x1e>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <ndefRecordGetType+0x1e>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 8008a5e:	2307      	movs	r3, #7
 8008a60:	e00f      	b.n	8008a82 <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	785a      	ldrb	r2, [r3, #1]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <ndefRecordTypeMatch+0x1a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <ndefRecordTypeMatch+0x1e>
    {
        return false;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e01b      	b.n	8008ae2 <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f003 0207 	and.w	r2, r3, #7
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d113      	bne.n	8008ae0 <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	785a      	ldrb	r2, [r3, #1]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d10d      	bne.n	8008ae0 <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6858      	ldr	r0, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	791b      	ldrb	r3, [r3, #4]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f012 fc7b 	bl	801b3cc <memcmp>
 8008ad6:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <ndefRecordTypeMatch+0x54>
    {
        return true;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <ndefRecordTypeMatch+0x56>
    }

     return false;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <ndefRecordSetId+0x26>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d105      	bne.n	8008b14 <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	791b      	ldrb	r3, [r3, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 8008b10:	2307      	movs	r3, #7
 8008b12:	e01b      	b.n	8008b4c <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d007      	beq.n	8008b2c <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	f043 0308 	orr.w	r3, r3, #8
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e006      	b.n	8008b3a <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f023 0308 	bic.w	r3, r3, #8
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	791a      	ldrb	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <ndefRecordGetId+0x16>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 8008b6c:	2307      	movs	r3, #7
 8008b6e:	e008      	b.n	8008b82 <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	789a      	ldrb	r2, [r3, #2]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <ndefRecordSetPayload+0x26>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 8008bb2:	2307      	movs	r3, #7
 8008bb4:	e01c      	b.n	8008bf0 <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f023 0310 	bic.w	r3, r3, #16
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	6852      	ldr	r2, [r2, #4]
 8008bcc:	2aff      	cmp	r2, #255	; 0xff
 8008bce:	d801      	bhi.n	8008bd4 <ndefRecordSetPayload+0x48>
 8008bd0:	2210      	movs	r2, #16
 8008bd2:	e000      	b.n	8008bd6 <ndefRecordSetPayload+0x4a>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bc80      	pop	{r7}
 8008bf8:	4770      	bx	lr

08008bfa <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <ndefRecordGetPayload+0x16>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 8008c10:	2307      	movs	r3, #7
 8008c12:	e00a      	b.n	8008c2a <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fa4c 	bl	80090ba <ndefRecordGetPayloadLength>
 8008c22:	4602      	mov	r2, r0
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <ndefRecordDecode+0x1e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <ndefRecordDecode+0x1e>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 8008c50:	2307      	movs	r3, #7
 8008c52:	e0e7      	b.n	8008e24 <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 8008c54:	6838      	ldr	r0, [r7, #0]
 8008c56:	f7ff fe43 	bl	80088e0 <ndefRecordReset>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 8008c60:	230c      	movs	r3, #12
 8008c62:	e0df      	b.n	8008e24 <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d901      	bls.n	8008c78 <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 8008c74:	230b      	movs	r3, #11
 8008c76:	e0d5      	b.n	8008e24 <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	781a      	ldrb	r2, [r3, #0]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	701a      	strb	r2, [r3, #0]
    offset++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d901      	bls.n	8008c9c <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 8008c98:	230b      	movs	r3, #11
 8008c9a:	e0c3      	b.n	8008e24 <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	705a      	strb	r2, [r3, #1]
    offset++;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d013      	beq.n	8008ce4 <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d901      	bls.n	8008ccc <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 8008cc8:	230b      	movs	r3, #11
 8008cca:	e0ab      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	611a      	str	r2, [r3, #16]
        offset++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e029      	b.n	8008d38 <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	1d1a      	adds	r2, r3, #4
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d901      	bls.n	8008cf4 <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 8008cf0:	230b      	movs	r3, #11
 8008cf2:	e097      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	061a      	lsls	r2, r3, #24
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	440b      	add	r3, r1
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	041b      	lsls	r3, r3, #16
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3302      	adds	r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6811      	ldr	r1, [r2, #0]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	3203      	adds	r2, #3
 8008d28:	440a      	add	r2, r1
 8008d2a:	7812      	ldrb	r2, [r2, #0]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3304      	adds	r3, #4
 8008d36:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d012      	beq.n	8008d6a <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d901      	bls.n	8008d54 <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 8008d50:	230b      	movs	r3, #11
 8008d52:	e067      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	709a      	strb	r2, [r3, #2]
        offset++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e002      	b.n	8008d70 <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d017      	beq.n	8008da8 <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	441a      	add	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d901      	bls.n	8008d8e <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 8008d8a:	230b      	movs	r3, #11
 8008d8c:	e04a      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	441a      	add	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	e002      	b.n	8008dae <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	789b      	ldrb	r3, [r3, #2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	789b      	ldrb	r3, [r3, #2]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	441a      	add	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d901      	bls.n	8008dcc <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 8008dc8:	230b      	movs	r3, #11
 8008dca:	e02b      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	441a      	add	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	789b      	ldrb	r3, [r3, #2]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e002      	b.n	8008dec <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2200      	movs	r2, #0
 8008dea:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d010      	beq.n	8008e16 <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d901      	bls.n	8008e08 <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 8008e04:	230b      	movs	r3, #11
 8008e06:	e00d      	b.n	8008e24 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	441a      	add	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	60da      	str	r2, [r3, #12]
 8008e14:	e002      	b.n	8008e1c <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <ndefRecordEncodeHeader+0x1e>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <ndefRecordEncodeHeader+0x1e>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 8008e4a:	2307      	movs	r3, #7
 8008e4c:	e06f      	b.n	8008f2e <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b06      	cmp	r3, #6
 8008e54:	d804      	bhi.n	8008e60 <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2207      	movs	r2, #7
 8008e5a:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e066      	b.n	8008f2e <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
    offset++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	701a      	strb	r2, [r3, #0]
    offset++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f914 	bl	80090ba <ndefRecordGetPayloadLength>
 8008e92:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2bff      	cmp	r3, #255	; 0xff
 8008e98:	d80a      	bhi.n	8008eb0 <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]
        offset++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e02a      	b.n	8008f06 <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	0e19      	lsrs	r1, r3, #24
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	b2ca      	uxtb	r2, r1
 8008ebe:	701a      	strb	r2, [r3, #0]
        offset++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	0c19      	lsrs	r1, r3, #16
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	b2ca      	uxtb	r2, r1
 8008ed4:	701a      	strb	r2, [r3, #0]
        offset++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	0a19      	lsrs	r1, r3, #8
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	b2ca      	uxtb	r2, r1
 8008eea:	701a      	strb	r2, [r3, #0]
        offset++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	701a      	strb	r2, [r3, #0]
        offset++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	7892      	ldrb	r2, [r2, #2]
 8008f1e:	701a      	strb	r2, [r3, #0]
        offset++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <ndefRecordPayloadEncode+0x16>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 8008f4c:	230b      	movs	r3, #11
 8008f4e:	e02f      	b.n	8008fb0 <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8b2 	bl	80090ba <ndefRecordGetPayloadLength>
 8008f56:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d901      	bls.n	8008f66 <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e024      	b.n	8008fb0 <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 8008f66:	2301      	movs	r3, #1
 8008f68:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 8008f6e:	e011      	b.n	8008f94 <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 8008f70:	2300      	movs	r3, #0
 8008f72:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d008      	beq.n	8008f8c <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	68f9      	ldr	r1, [r7, #12]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f012 fa30 	bl	801b3ec <memcpy>
        }
        offset += bufPayloadItem.length;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 8008f94:	7efa      	ldrb	r2, [r7, #27]
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8af 	bl	8009100 <ndefRecordGetPayloadItem>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e3      	bne.n	8008f70 <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b089      	sub	sp, #36	; 0x24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <ndefRecordEncode+0x1e>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <ndefRecordEncode+0x1e>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 8008fd6:	2307      	movs	r3, #7
 8008fd8:	e06b      	b.n	80090b2 <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685c      	ldr	r4, [r3, #4]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff fce6 	bl	80089b0 <ndefRecordGetLength>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d207      	bcs.n	8008ffa <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fce0 	bl	80089b0 <ndefRecordGetLength>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e05b      	b.n	80090b2 <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 8009006:	f107 0310 	add.w	r3, r7, #16
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff0d 	bl	8008e2c <ndefRecordEncodeHeader>
 8009012:	4603      	mov	r3, r0
 8009014:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8009016:	8b7b      	ldrh	r3, [r7, #26]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <ndefRecordEncode+0x68>
    {
        return err;
 800901c:	8b7b      	ldrh	r3, [r7, #26]
 800901e:	e048      	b.n	80090b2 <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d010      	beq.n	800904e <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	18d0      	adds	r0, r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6859      	ldr	r1, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	461a      	mov	r2, r3
 800903e:	f012 f9d5 	bl	801b3ec <memcpy>
        offset += record->typeLength;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	461a      	mov	r2, r3
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4413      	add	r3, r2
 800904c:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	789b      	ldrb	r3, [r3, #2]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d010      	beq.n	8009078 <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	18d0      	adds	r0, r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6899      	ldr	r1, [r3, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	789b      	ldrb	r3, [r3, #2]
 8009066:	461a      	mov	r2, r3
 8009068:	f012 f9c0 	bl	801b3ec <memcpy>
        offset += record->idLength;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	789b      	ldrb	r3, [r3, #2]
 8009070:	461a      	mov	r2, r3
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	4413      	add	r3, r2
 8009080:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 800908c:	f107 0308 	add.w	r3, r7, #8
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff ff4f 	bl	8008f36 <ndefRecordPayloadEncode>
 8009098:	4603      	mov	r3, r0
 800909a:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800909c:	8b7b      	ldrh	r3, [r7, #26]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <ndefRecordEncode+0xee>
    {
        return err;
 80090a2:	8b7b      	ldrh	r3, [r7, #26]
 80090a4:	e005      	b.n	80090b2 <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	441a      	add	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3724      	adds	r7, #36	; 0x24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd90      	pop	{r4, r7, pc}

080090ba <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e015      	b.n	80090f8 <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00d      	beq.n	80090f0 <ndefRecordGetPayloadLength+0x36>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d008      	beq.n	80090f0 <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6952      	ldr	r2, [r2, #20]
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	e002      	b.n	80090f6 <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 80090f6:	68fb      	ldr	r3, [r7, #12]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <ndefRecordGetPayloadItem+0x1a>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	e020      	b.n	8009160 <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00d      	beq.n	800914e <ndefRecordGetPayloadItem+0x4e>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	6950      	ldr	r0, [r2, #20]
 8009146:	79fa      	ldrb	r2, [r7, #7]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4798      	blx	r3
 800914c:	e006      	b.n	800915c <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff fd4f 	bl	8008bfa <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <ndefWifiPayloadGetLength+0x16>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b07      	cmp	r3, #7
 800917c:	d001      	beq.n	8009182 <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 800917e:	2300      	movs	r3, #0
 8009180:	e00a      	b.n	8009198 <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	330c      	adds	r3, #12
 8009186:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 8009192:	3340      	adds	r3, #64	; 0x40
 8009194:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 8009196:	68bb      	ldr	r3, [r7, #8]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr
	...

080091a4 <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b08b      	sub	sp, #44	; 0x2c
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 80091b2:	2300      	movs	r3, #0
 80091b4:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 80091b6:	f107 0318 	add.w	r3, r7, #24
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	2304      	movs	r3, #4
 80091be:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 80091c0:	2307      	movs	r3, #7
 80091c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 80091c6:	2305      	movs	r3, #5
 80091c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 80091cc:	230b      	movs	r3, #11
 80091ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d006      	beq.n	80091e6 <ndefWifiToPayloadItem+0x42>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b07      	cmp	r3, #7
 80091de:	d102      	bne.n	80091e6 <ndefWifiToPayloadItem+0x42>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e0b3      	b.n	8009352 <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	330c      	adds	r3, #12
 80091ee:	623b      	str	r3, [r7, #32]

    if (begin == true)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 80091f6:	4b59      	ldr	r3, [pc, #356]	; (800935c <ndefWifiToPayloadItem+0x1b8>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]

    switch (item)
 8009208:	4b54      	ldr	r3, [pc, #336]	; (800935c <ndefWifiToPayloadItem+0x1b8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b08      	cmp	r3, #8
 800920e:	f200 8092 	bhi.w	8009336 <ndefWifiToPayloadItem+0x192>
 8009212:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <ndefWifiToPayloadItem+0x74>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	0800923d 	.word	0x0800923d
 800921c:	0800927d 	.word	0x0800927d
 8009220:	08009291 	.word	0x08009291
 8009224:	080092a1 	.word	0x080092a1
 8009228:	080092b3 	.word	0x080092b3
 800922c:	080092d9 	.word	0x080092d9
 8009230:	080092ed 	.word	0x080092ed
 8009234:	080092ff 	.word	0x080092ff
 8009238:	08009329 	.word	0x08009329

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 8009240:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 8009246:	b29b      	uxth	r3, r3
 8009248:	4413      	add	r3, r2
 800924a:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 800924c:	3337      	adds	r3, #55	; 0x37
 800924e:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 8009250:	8bfb      	ldrh	r3, [r7, #30]
 8009252:	0a1b      	lsrs	r3, r3, #8
 8009254:	b29a      	uxth	r2, r3
 8009256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800925a:	b2d1      	uxtb	r1, r2
 800925c:	4a40      	ldr	r2, [pc, #256]	; (8009360 <ndefWifiToPayloadItem+0x1bc>)
 800925e:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 8009260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009264:	3301      	adds	r3, #1
 8009266:	8bfa      	ldrh	r2, [r7, #30]
 8009268:	b2d1      	uxtb	r1, r2
 800926a:	4a3d      	ldr	r2, [pc, #244]	; (8009360 <ndefWifiToPayloadItem+0x1bc>)
 800926c:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4a3b      	ldr	r2, [pc, #236]	; (8009360 <ndefWifiToPayloadItem+0x1bc>)
 8009272:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2210      	movs	r2, #16
 8009278:	605a      	str	r2, [r3, #4]
        break;
 800927a:	e063      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 800927c:	4b39      	ldr	r3, [pc, #228]	; (8009364 <ndefWifiToPayloadItem+0x1c0>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8009284:	4b37      	ldr	r3, [pc, #220]	; (8009364 <ndefWifiToPayloadItem+0x1c0>)
 8009286:	791b      	ldrb	r3, [r3, #4]
 8009288:	461a      	mov	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	605a      	str	r2, [r3, #4]
        break;
 800928e:	e059      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	1d1a      	adds	r2, r3, #4
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2201      	movs	r2, #1
 800929c:	605a      	str	r2, [r3, #4]
        break;
 800929e:	e051      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	605a      	str	r2, [r3, #4]
        break;
 80092b0:	e048      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 80092b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	7c11      	ldrb	r1, [r2, #16]
 80092ba:	4a2b      	ldr	r2, [pc, #172]	; (8009368 <ndefWifiToPayloadItem+0x1c4>)
 80092bc:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 80092be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092c2:	6a3a      	ldr	r2, [r7, #32]
 80092c4:	7c51      	ldrb	r1, [r2, #17]
 80092c6:	4a28      	ldr	r2, [pc, #160]	; (8009368 <ndefWifiToPayloadItem+0x1c4>)
 80092c8:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4a26      	ldr	r2, [pc, #152]	; (8009368 <ndefWifiToPayloadItem+0x1c4>)
 80092ce:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	220e      	movs	r2, #14
 80092d4:	605a      	str	r2, [r3, #4]
        break;
 80092d6:	e035      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 80092d8:	4b22      	ldr	r3, [pc, #136]	; (8009364 <ndefWifiToPayloadItem+0x1c0>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 80092e0:	4b20      	ldr	r3, [pc, #128]	; (8009364 <ndefWifiToPayloadItem+0x1c0>)
 80092e2:	791b      	ldrb	r3, [r3, #4]
 80092e4:	461a      	mov	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	605a      	str	r2, [r3, #4]
        break;
 80092ea:	e02b      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	f103 020c 	add.w	r2, r3, #12
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2201      	movs	r2, #1
 80092fa:	605a      	str	r2, [r3, #4]
        break;
 80092fc:	e022      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 800930c:	7d3b      	ldrb	r3, [r7, #20]
 800930e:	461a      	mov	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 8009314:	e016      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	605a      	str	r2, [r3, #4]
        break;
 8009326:	e00d      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4a10      	ldr	r2, [pc, #64]	; (800936c <ndefWifiToPayloadItem+0x1c8>)
 800932c:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	221e      	movs	r2, #30
 8009332:	605a      	str	r2, [r3, #4]
        break;
 8009334:	e006      	b.n	8009344 <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2200      	movs	r2, #0
 8009340:	605a      	str	r2, [r3, #4]
        break;
 8009342:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <ndefWifiToPayloadItem+0x1b8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a04      	ldr	r2, [pc, #16]	; (800935c <ndefWifiToPayloadItem+0x1b8>)
 800934c:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	681b      	ldr	r3, [r3, #0]
}
 8009352:	4618      	mov	r0, r3
 8009354:	372c      	adds	r7, #44	; 0x2c
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr
 800935c:	2000325c 	.word	0x2000325c
 8009360:	200000b4 	.word	0x200000b4
 8009364:	200000f4 	.word	0x200000f4
 8009368:	200000c4 	.word	0x200000c4
 800936c:	200000d4 	.word	0x200000d4

08009370 <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <ndefWifi+0x16>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 8009386:	2307      	movs	r3, #7
 8009388:	e022      	b.n	80093d0 <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2207      	movs	r2, #7
 800938e:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a12      	ldr	r2, [pc, #72]	; (80093dc <ndefWifi+0x6c>)
 8009394:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <ndefWifi+0x70>)
 800939a:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	330c      	adds	r3, #12
 80093a0:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093aa:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	3208      	adds	r2, #8
 80093b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ba:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	7c1a      	ldrb	r2, [r3, #16]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	7c5a      	ldrb	r2, [r3, #17]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	08009169 	.word	0x08009169
 80093e0:	080091a5 	.word	0x080091a5

080093e4 <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d006      	beq.n	8009402 <ndefGetWifi+0x1e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b07      	cmp	r3, #7
 80093fa:	d102      	bne.n	8009402 <ndefGetWifi+0x1e>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 8009402:	2307      	movs	r3, #7
 8009404:	e01b      	b.n	800943e <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	330c      	adds	r3, #12
 800940a:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	7c1a      	ldrb	r2, [r3, #16]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	7c5a      	ldrb	r2, [r3, #17]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	; 0x28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <ndefPayloadToWifi+0x16>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 800945e:	2307      	movs	r3, #7
 8009460:	e0a2      	b.n	80095a8 <ndefPayloadToWifi+0x160>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	767b      	strb	r3, [r7, #25]

    offset = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 800947e:	e086      	b.n	800958e <ndefPayloadToWifi+0x146>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	4413      	add	r3, r2
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 800948e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009492:	2b10      	cmp	r3, #16
 8009494:	d178      	bne.n	8009588 <ndefPayloadToWifi+0x140>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	3302      	adds	r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	3303      	adds	r3, #3
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 80094b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80094ba:	021a      	lsls	r2, r3, #8
 80094bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80094c0:	4313      	orrs	r3, r2
 80094c2:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	3301      	adds	r3, #1
 80094cc:	4413      	add	r3, r2
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b45      	cmp	r3, #69	; 0x45
 80094d2:	d00a      	beq.n	80094ea <ndefPayloadToWifi+0xa2>
 80094d4:	2b45      	cmp	r3, #69	; 0x45
 80094d6:	dc52      	bgt.n	800957e <ndefPayloadToWifi+0x136>
 80094d8:	2b27      	cmp	r3, #39	; 0x27
 80094da:	d019      	beq.n	8009510 <ndefPayloadToWifi+0xc8>
 80094dc:	2b27      	cmp	r3, #39	; 0x27
 80094de:	dc4e      	bgt.n	800957e <ndefPayloadToWifi+0x136>
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d028      	beq.n	8009536 <ndefPayloadToWifi+0xee>
 80094e4:	2b0f      	cmp	r3, #15
 80094e6:	d038      	beq.n	800955a <ndefPayloadToWifi+0x112>
 80094e8:	e049      	b.n	800957e <ndefPayloadToWifi+0x136>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d901      	bls.n	80094f4 <ndefPayloadToWifi+0xac>
                {
                    return ERR_PROTO;
 80094f0:	230b      	movs	r3, #11
 80094f2:	e059      	b.n	80095a8 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	3304      	adds	r3, #4
 80094fc:	4413      	add	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	4413      	add	r3, r2
 800950a:	3304      	adds	r3, #4
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800950e:	e03e      	b.n	800958e <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	2b20      	cmp	r3, #32
 8009514:	d901      	bls.n	800951a <ndefPayloadToWifi+0xd2>
                {
                    return ERR_PROTO;
 8009516:	230b      	movs	r3, #11
 8009518:	e046      	b.n	80095a8 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	3304      	adds	r3, #4
 8009522:	4413      	add	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	4413      	add	r3, r2
 8009530:	3304      	adds	r3, #4
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009534:	e02b      	b.n	800958e <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d001      	beq.n	8009540 <ndefPayloadToWifi+0xf8>
                {
                    return ERR_PROTO;
 800953c:	230b      	movs	r3, #11
 800953e:	e033      	b.n	80095a8 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	3305      	adds	r3, #5
 8009548:	4413      	add	r3, r2
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800954e:	69fa      	ldr	r2, [r7, #28]
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009558:	e019      	b.n	800958e <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d001      	beq.n	8009564 <ndefPayloadToWifi+0x11c>
                {
                    return ERR_PROTO;
 8009560:	230b      	movs	r3, #11
 8009562:	e021      	b.n	80095a8 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	3305      	adds	r3, #5
 800956c:	4413      	add	r3, r2
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800957c:	e007      	b.n	800958e <ndefPayloadToWifi+0x146>
            default:
                offset++;
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	3301      	adds	r3, #1
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009584:	bf00      	nop
 8009586:	e002      	b.n	800958e <ndefPayloadToWifi+0x146>
            }
        }
        else
        {
            offset++;
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	3301      	adds	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009594:	429a      	cmp	r2, r3
 8009596:	f4ff af73 	bcc.w	8009480 <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 800959a:	f107 0308 	add.w	r3, r7, #8
 800959e:	4619      	mov	r1, r3
 80095a0:	6838      	ldr	r0, [r7, #0]
 80095a2:	f7ff fee5 	bl	8009370 <ndefWifi>
 80095a6:	4603      	mov	r3, r0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3728      	adds	r7, #40	; 0x28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <ndefRecordToWifi+0x16>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 80095c6:	2307      	movs	r3, #7
 80095c8:	e022      	b.n	8009610 <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 80095ca:	4a13      	ldr	r2, [pc, #76]	; (8009618 <ndefRecordToWifi+0x68>)
 80095cc:	2102      	movs	r1, #2
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff fa5c 	bl	8008a8c <ndefRecordTypeMatch>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f083 0301 	eor.w	r3, r3, #1
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 80095e0:	230b      	movs	r3, #11
 80095e2:	e015      	b.n	8009610 <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f95d 	bl	80098a4 <ndefRecordGetNdefType>
 80095ea:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 80095f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	6838      	ldr	r0, [r7, #0]
 80095fa:	f011 fef7 	bl	801b3ec <memcpy>
        return ERR_NONE;
 80095fe:	2300      	movs	r3, #0
 8009600:	e006      	b.n	8009610 <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	330c      	adds	r3, #12
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ff1d 	bl	8009448 <ndefPayloadToWifi>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	0801d094 	.word	0x0801d094

0800961c <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <ndefWifiToRecord+0x1e>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b07      	cmp	r3, #7
 8009632:	d102      	bne.n	800963a <ndefWifiToRecord+0x1e>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800963a:	2307      	movs	r3, #7
 800963c:	e00c      	b.n	8009658 <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800963e:	6838      	ldr	r0, [r7, #0]
 8009640:	f7ff f94e 	bl	80088e0 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 8009644:	4a06      	ldr	r2, [pc, #24]	; (8009660 <ndefWifiToRecord+0x44>)
 8009646:	2102      	movs	r1, #2
 8009648:	6838      	ldr	r0, [r7, #0]
 800964a:	f7ff f9ca 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	6838      	ldr	r0, [r7, #0]
 8009652:	f000 f8ef 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	0801d094 	.word	0x0801d094

08009664 <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <ndefTypeStringToTypeId+0x1a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 800967e:	230b      	movs	r3, #11
 8009680:	e03f      	b.n	8009702 <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	e038      	b.n	80096fa <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 8009688:	4a20      	ldr	r2, [pc, #128]	; (800970c <ndefTypeStringToTypeId+0xa8>)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	4413      	add	r3, r2
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	7bfa      	ldrb	r2, [r7, #15]
 8009694:	429a      	cmp	r2, r3
 8009696:	d12d      	bne.n	80096f4 <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	791a      	ldrb	r2, [r3, #4]
 800969c:	491b      	ldr	r1, [pc, #108]	; (800970c <ndefTypeStringToTypeId+0xa8>)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	440b      	add	r3, r1
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	791b      	ldrb	r3, [r3, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d123      	bne.n	80096f4 <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d107      	bne.n	80096c4 <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 80096b4:	4a15      	ldr	r2, [pc, #84]	; (800970c <ndefTypeStringToTypeId+0xa8>)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e01e      	b.n	8009702 <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 80096c4:	4a11      	ldr	r2, [pc, #68]	; (800970c <ndefTypeStringToTypeId+0xa8>)
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4413      	add	r3, r2
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	791b      	ldrb	r3, [r3, #4]
 80096d8:	461a      	mov	r2, r3
 80096da:	f011 fe77 	bl	801b3cc <memcmp>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d107      	bne.n	80096f4 <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 80096e4:	4a09      	ldr	r2, [pc, #36]	; (800970c <ndefTypeStringToTypeId+0xa8>)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e006      	b.n	8009702 <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	3301      	adds	r3, #1
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b06      	cmp	r3, #6
 80096fe:	d9c3      	bls.n	8009688 <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8009700:	2316      	movs	r3, #22
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	0801d0f0 	.word	0x0801d0f0

08009710 <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <ndefRecordTypeStringToTypeId+0x16>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 8009726:	2307      	movs	r3, #7
 8009728:	e029      	b.n	800977e <ndefRecordTypeStringToTypeId+0x6e>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 800972a:	f107 020c 	add.w	r2, r7, #12
 800972e:	f107 0315 	add.w	r3, r7, #21
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff f983 	bl	8008a40 <ndefRecordGetType>
 800973a:	4603      	mov	r3, r0
 800973c:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 800973e:	8afb      	ldrh	r3, [r7, #22]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 8009744:	8afb      	ldrh	r3, [r7, #22]
 8009746:	e01a      	b.n	800977e <ndefRecordTypeStringToTypeId+0x6e>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 8009748:	7d7b      	ldrb	r3, [r7, #21]
 800974a:	2b06      	cmp	r3, #6
 800974c:	d901      	bls.n	8009752 <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 800974e:	230c      	movs	r3, #12
 8009750:	e015      	b.n	800977e <ndefRecordTypeStringToTypeId+0x6e>
    }

    switch (tnf)
 8009752:	7d7b      	ldrb	r3, [r7, #21]
 8009754:	2b02      	cmp	r3, #2
 8009756:	dc02      	bgt.n	800975e <ndefRecordTypeStringToTypeId+0x4e>
 8009758:	2b00      	cmp	r3, #0
 800975a:	da02      	bge.n	8009762 <ndefRecordTypeStringToTypeId+0x52>
 800975c:	e00b      	b.n	8009776 <ndefRecordTypeStringToTypeId+0x66>
 800975e:	2b04      	cmp	r3, #4
 8009760:	d109      	bne.n	8009776 <ndefRecordTypeStringToTypeId+0x66>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 8009762:	7d7b      	ldrb	r3, [r7, #21]
 8009764:	f107 010c 	add.w	r1, r7, #12
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff ff7a 	bl	8009664 <ndefTypeStringToTypeId>
 8009770:	4603      	mov	r3, r0
 8009772:	82fb      	strh	r3, [r7, #22]
        break;
 8009774:	e002      	b.n	800977c <ndefRecordTypeStringToTypeId+0x6c>
    default:
        err = ERR_NOT_IMPLEMENTED;
 8009776:	230f      	movs	r3, #15
 8009778:	82fb      	strh	r3, [r7, #22]
        break;
 800977a:	bf00      	nop
    }

    return err;
 800977c:	8afb      	ldrh	r3, [r7, #22]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f886 	bl	80098a4 <ndefRecordGetNdefType>
 8009798:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 80097a0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80097a4:	6939      	ldr	r1, [r7, #16]
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	f011 fe20 	bl	801b3ec <memcpy>
        return ERR_NONE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e03a      	b.n	8009826 <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 80097b0:	f107 030d 	add.w	r3, r7, #13
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff ffaa 	bl	8009710 <ndefRecordTypeStringToTypeId>
 80097bc:	4603      	mov	r3, r0
 80097be:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <ndefRecordToType+0x42>
    {
        return err;
 80097c6:	89fb      	ldrh	r3, [r7, #14]
 80097c8:	e02d      	b.n	8009826 <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e026      	b.n	800981e <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 80097d0:	4917      	ldr	r1, [pc, #92]	; (8009830 <ndefRecordToType+0xa8>)
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4613      	mov	r3, r2
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	7b7b      	ldrb	r3, [r7, #13]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d118      	bne.n	8009818 <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 80097e6:	4912      	ldr	r1, [pc, #72]	; (8009830 <ndefRecordToType+0xa8>)
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	3304      	adds	r3, #4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00d      	beq.n	8009818 <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 80097fc:	490c      	ldr	r1, [pc, #48]	; (8009830 <ndefRecordToType+0xa8>)
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4613      	mov	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	3304      	adds	r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
 8009814:	4603      	mov	r3, r0
 8009816:	e006      	b.n	8009826 <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	3301      	adds	r3, #1
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b06      	cmp	r3, #6
 8009822:	d9d5      	bls.n	80097d0 <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 8009824:	230f      	movs	r3, #15
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	0801d09c 	.word	0x0801d09c

08009834 <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00e      	beq.n	8009862 <ndefRecordSetNdefType+0x2e>
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 800984e:	2b08      	cmp	r3, #8
 8009850:	d807      	bhi.n	8009862 <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 8009862:	2307      	movs	r3, #7
 8009864:	e01a      	b.n	800989c <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fc24 	bl	80090ba <ndefRecordGetPayloadLength>
 8009872:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f023 0310 	bic.w	r3, r3, #16
 800987c:	b2da      	uxtb	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	2aff      	cmp	r2, #255	; 0xff
 800988a:	d801      	bhi.n	8009890 <ndefRecordSetNdefType+0x5c>
 800988c:	2210      	movs	r2, #16
 800988e:	e000      	b.n	8009892 <ndefRecordSetNdefType+0x5e>
 8009890:	2200      	movs	r2, #0
 8009892:	4313      	orrs	r3, r2
 8009894:	b2da      	uxtb	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e016      	b.n	80098e4 <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d011      	beq.n	80098e2 <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b07      	cmp	r3, #7
 80098c6:	d80c      	bhi.n	80098e2 <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	e000      	b.n	80098e4 <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr

080098ee <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b087      	sub	sp, #28
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <ndefVCardPayloadGetLength+0x1a>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b06      	cmp	r3, #6
 8009906:	d001      	beq.n	800990c <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 8009908:	2300      	movs	r3, #0
 800990a:	e06e      	b.n	80099ea <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	330c      	adds	r3, #12
 8009910:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 8009912:	2205      	movs	r2, #5
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800991a:	2201      	movs	r2, #1
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4413      	add	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8009922:	2205      	movs	r2, #5
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	4413      	add	r3, r2
 8009928:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800992a:	2202      	movs	r2, #2
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	4413      	add	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 8009932:	2207      	movs	r2, #7
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	4413      	add	r3, r2
 8009938:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800993a:	2201      	movs	r2, #1
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 8009942:	2203      	movs	r2, #3
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800994a:	2202      	movs	r2, #2
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	4413      	add	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

    i = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 8009956:	e034      	b.n	80099c2 <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	4413      	add	r3, r2
 8009960:	330c      	adds	r3, #12
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00d      	beq.n	8009998 <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 800997c:	2201      	movs	r2, #1
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	4413      	add	r3, r2
 800998c:	330d      	adds	r3, #13
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	4413      	add	r3, r2
 8009996:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 8009998:	2201      	movs	r2, #1
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	4413      	add	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	4413      	add	r3, r2
 80099a8:	330e      	adds	r3, #14
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 80099b4:	2202      	movs	r2, #2
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]

        i++;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	3301      	adds	r3, #1
 80099c0:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	4413      	add	r3, r2
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1c3      	bne.n	8009958 <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 80099d0:	2203      	movs	r2, #3
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	4413      	add	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 80099d8:	2201      	movs	r2, #1
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4413      	add	r3, r2
 80099de:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 80099e0:	2205      	movs	r2, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 80099e8:	697b      	ldr	r3, [r7, #20]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr

080099f4 <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d006      	beq.n	8009a16 <ndefVCardToPayloadItem+0x22>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b06      	cmp	r3, #6
 8009a0e:	d102      	bne.n	8009a16 <ndefVCardToPayloadItem+0x22>
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e17f      	b.n	8009d1a <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d008      	beq.n	8009a38 <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 8009a26:	4b8c      	ldr	r3, [pc, #560]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
        userItem = 0;
 8009a2c:	4b8b      	ldr	r3, [pc, #556]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
        index    = 0;
 8009a32:	4b8b      	ldr	r3, [pc, #556]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e164      	b.n	8009d1a <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 8009a50:	4b81      	ldr	r3, [pc, #516]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b0a      	cmp	r3, #10
 8009a56:	f200 8157 	bhi.w	8009d08 <ndefVCardToPayloadItem+0x314>
 8009a5a:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <ndefVCardToPayloadItem+0x6c>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009a8d 	.word	0x08009a8d
 8009a64:	08009aa5 	.word	0x08009aa5
 8009a68:	08009abd 	.word	0x08009abd
 8009a6c:	08009ad5 	.word	0x08009ad5
 8009a70:	08009aed 	.word	0x08009aed
 8009a74:	08009b05 	.word	0x08009b05
 8009a78:	08009b1d 	.word	0x08009b1d
 8009a7c:	08009b35 	.word	0x08009b35
 8009a80:	08009b59 	.word	0x08009b59
 8009a84:	08009cd9 	.word	0x08009cd9
 8009a88:	08009cf1 	.word	0x08009cf1
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 8009a8c:	4a75      	ldr	r2, [pc, #468]	; (8009c64 <ndefVCardToPayloadItem+0x270>)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 8009a92:	2205      	movs	r2, #5
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009a98:	4b6f      	ldr	r3, [pc, #444]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	4a6e      	ldr	r2, [pc, #440]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009aa0:	6013      	str	r3, [r2, #0]
        break;
 8009aa2:	e138      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009aa4:	4a70      	ldr	r2, [pc, #448]	; (8009c68 <ndefVCardToPayloadItem+0x274>)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009aaa:	2201      	movs	r2, #1
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009ab0:	4b69      	ldr	r3, [pc, #420]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	4a68      	ldr	r2, [pc, #416]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ab8:	6013      	str	r3, [r2, #0]
        break;
 8009aba:	e12c      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 8009abc:	4a6b      	ldr	r2, [pc, #428]	; (8009c6c <ndefVCardToPayloadItem+0x278>)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 8009ac2:	2205      	movs	r2, #5
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009ac8:	4b63      	ldr	r3, [pc, #396]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	4a62      	ldr	r2, [pc, #392]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ad0:	6013      	str	r3, [r2, #0]
        break;
 8009ad2:	e120      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 8009ad4:	4a66      	ldr	r2, [pc, #408]	; (8009c70 <ndefVCardToPayloadItem+0x27c>)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8009ada:	2202      	movs	r2, #2
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009ae0:	4b5d      	ldr	r3, [pc, #372]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	4a5c      	ldr	r2, [pc, #368]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ae8:	6013      	str	r3, [r2, #0]
        break;
 8009aea:	e114      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 8009aec:	4a61      	ldr	r2, [pc, #388]	; (8009c74 <ndefVCardToPayloadItem+0x280>)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 8009af2:	2207      	movs	r2, #7
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009af8:	4b57      	ldr	r3, [pc, #348]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	4a56      	ldr	r2, [pc, #344]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b00:	6013      	str	r3, [r2, #0]
        break;
 8009b02:	e108      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009b04:	4a58      	ldr	r2, [pc, #352]	; (8009c68 <ndefVCardToPayloadItem+0x274>)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b10:	4b51      	ldr	r3, [pc, #324]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3301      	adds	r3, #1
 8009b16:	4a50      	ldr	r2, [pc, #320]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b18:	6013      	str	r3, [r2, #0]
        break;
 8009b1a:	e0fc      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 8009b1c:	4a56      	ldr	r2, [pc, #344]	; (8009c78 <ndefVCardToPayloadItem+0x284>)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 8009b22:	2203      	movs	r2, #3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b28:	4b4b      	ldr	r3, [pc, #300]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	4a4a      	ldr	r2, [pc, #296]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b30:	6013      	str	r3, [r2, #0]
        break;
 8009b32:	e0f0      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 8009b34:	4a4e      	ldr	r2, [pc, #312]	; (8009c70 <ndefVCardToPayloadItem+0x27c>)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009b40:	4b45      	ldr	r3, [pc, #276]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	4a44      	ldr	r2, [pc, #272]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b48:	6013      	str	r3, [r2, #0]
        userItem = 0;
 8009b4a:	4b44      	ldr	r3, [pc, #272]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
        index    = 0;
 8009b50:	4b43      	ldr	r3, [pc, #268]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
        break;
 8009b56:	e0de      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 8009b58:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b05      	cmp	r3, #5
 8009b5e:	f200 80b9 	bhi.w	8009cd4 <ndefVCardToPayloadItem+0x2e0>
 8009b62:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <ndefVCardToPayloadItem+0x174>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009bf7 	.word	0x08009bf7
 8009b70:	08009c0f 	.word	0x08009c0f
 8009b74:	08009c41 	.word	0x08009c41
 8009b78:	08009c85 	.word	0x08009c85
 8009b7c:	08009cb7 	.word	0x08009cb7
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 8009b80:	4b37      	ldr	r3, [pc, #220]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	4413      	add	r3, r2
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 8009b90:	4a3a      	ldr	r2, [pc, #232]	; (8009c7c <ndefVCardToPayloadItem+0x288>)
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 8009b96:	2203      	movs	r2, #3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 8009b9c:	4b2e      	ldr	r3, [pc, #184]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	; (8009c58 <ndefVCardToPayloadItem+0x264>)
 8009ba4:	6013      	str	r3, [r2, #0]
                break;
 8009ba6:	e096      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 8009ba8:	4b2d      	ldr	r3, [pc, #180]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	4413      	add	r3, r2
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 8009bcc:	4b24      	ldr	r3, [pc, #144]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d005      	beq.n	8009bea <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 8009bde:	4b1f      	ldr	r3, [pc, #124]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a1d      	ldr	r2, [pc, #116]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009be6:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 8009be8:	e075      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 8009bea:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3303      	adds	r3, #3
 8009bf0:	4a1a      	ldr	r2, [pc, #104]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009bf2:	6013      	str	r3, [r2, #0]
            break;
 8009bf4:	e06f      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 8009bf6:	4a22      	ldr	r2, [pc, #136]	; (8009c80 <ndefVCardToPayloadItem+0x28c>)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	605a      	str	r2, [r3, #4]
            userItem++;
 8009c02:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4a14      	ldr	r2, [pc, #80]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c0a:	6013      	str	r3, [r2, #0]
            break;
 8009c0c:	e063      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 8009c0e:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	4413      	add	r3, r2
 8009c18:	3304      	adds	r3, #4
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 8009c20:	4b0f      	ldr	r3, [pc, #60]	; (8009c60 <ndefVCardToPayloadItem+0x26c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	4413      	add	r3, r2
 8009c2a:	330d      	adds	r3, #13
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	605a      	str	r2, [r3, #4]
            userItem++;
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	4a08      	ldr	r2, [pc, #32]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c3c:	6013      	str	r3, [r2, #0]
            break;
 8009c3e:	e04a      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 8009c40:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <ndefVCardToPayloadItem+0x274>)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 8009c46:	2201      	movs	r2, #1
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	605a      	str	r2, [r3, #4]
            userItem++;
 8009c4c:	4b03      	ldr	r3, [pc, #12]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a02      	ldr	r2, [pc, #8]	; (8009c5c <ndefVCardToPayloadItem+0x268>)
 8009c54:	6013      	str	r3, [r2, #0]
            break;
 8009c56:	e03e      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
 8009c58:	20003264 	.word	0x20003264
 8009c5c:	20003268 	.word	0x20003268
 8009c60:	2000326c 	.word	0x2000326c
 8009c64:	0801d168 	.word	0x0801d168
 8009c68:	0801d144 	.word	0x0801d144
 8009c6c:	0801d17c 	.word	0x0801d17c
 8009c70:	0801d14c 	.word	0x0801d14c
 8009c74:	0801d174 	.word	0x0801d174
 8009c78:	0801d184 	.word	0x0801d184
 8009c7c:	0801d170 	.word	0x0801d170
 8009c80:	0801d148 	.word	0x0801d148
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 8009c84:	4b27      	ldr	r3, [pc, #156]	; (8009d24 <ndefVCardToPayloadItem+0x330>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	3308      	adds	r3, #8
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 8009c96:	4b23      	ldr	r3, [pc, #140]	; (8009d24 <ndefVCardToPayloadItem+0x330>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	4413      	add	r3, r2
 8009ca0:	330e      	adds	r3, #14
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	605a      	str	r2, [r3, #4]
            userItem++;
 8009caa:	4b1f      	ldr	r3, [pc, #124]	; (8009d28 <ndefVCardToPayloadItem+0x334>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <ndefVCardToPayloadItem+0x334>)
 8009cb2:	6013      	str	r3, [r2, #0]
            break;
 8009cb4:	e00f      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 8009cb6:	4a1d      	ldr	r2, [pc, #116]	; (8009d2c <ndefVCardToPayloadItem+0x338>)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	605a      	str	r2, [r3, #4]
            index++;
 8009cc2:	4b18      	ldr	r3, [pc, #96]	; (8009d24 <ndefVCardToPayloadItem+0x330>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <ndefVCardToPayloadItem+0x330>)
 8009cca:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 8009ccc:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <ndefVCardToPayloadItem+0x334>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
            break;
 8009cd2:	e000      	b.n	8009cd6 <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 8009cd4:	bf00      	nop
        }
        break;
 8009cd6:	e01e      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 8009cd8:	4a15      	ldr	r2, [pc, #84]	; (8009d30 <ndefVCardToPayloadItem+0x33c>)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8009cde:	2201      	movs	r2, #1
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009ce4:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <ndefVCardToPayloadItem+0x340>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a12      	ldr	r2, [pc, #72]	; (8009d34 <ndefVCardToPayloadItem+0x340>)
 8009cec:	6013      	str	r3, [r2, #0]
        break;
 8009cee:	e012      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 8009cf0:	4a11      	ldr	r2, [pc, #68]	; (8009d38 <ndefVCardToPayloadItem+0x344>)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 8009cf6:	2205      	movs	r2, #5
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <ndefVCardToPayloadItem+0x340>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a0c      	ldr	r2, [pc, #48]	; (8009d34 <ndefVCardToPayloadItem+0x340>)
 8009d04:	6013      	str	r3, [r2, #0]
        break;
 8009d06:	e006      	b.n	8009d16 <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]
        break;
 8009d14:	bf00      	nop
    }

    return bufItem->buffer;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	681b      	ldr	r3, [r3, #0]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr
 8009d24:	2000326c 	.word	0x2000326c
 8009d28:	20003268 	.word	0x20003268
 8009d2c:	0801d14c 	.word	0x0801d14c
 8009d30:	0801d144 	.word	0x0801d144
 8009d34:	20003264 	.word	0x20003264
 8009d38:	0801d17c 	.word	0x0801d17c

08009d3c <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00c      	beq.n	8009d6a <ndefGetVCard+0x2e>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b06      	cmp	r3, #6
 8009d56:	d108      	bne.n	8009d6a <ndefGetVCard+0x2e>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <ndefGetVCard+0x2e>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 8009d6a:	2307      	movs	r3, #7
 8009d6c:	e062      	b.n	8009e34 <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	330c      	adds	r3, #12
 8009d72:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	e04c      	b.n	8009e2c <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	4413      	add	r3, r2
 8009d9a:	330c      	adds	r3, #12
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d041      	beq.n	8009e26 <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	4413      	add	r3, r2
 8009daa:	330c      	adds	r3, #12
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d136      	bne.n	8009e26 <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d032      	beq.n	8009e26 <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	4413      	add	r3, r2
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f011 fafa 	bl	801b3cc <memcmp>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d123      	bne.n	8009e26 <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	330d      	adds	r3, #13
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	4413      	add	r3, r2
 8009e08:	3308      	adds	r3, #8
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	4413      	add	r3, r2
 8009e18:	330e      	adds	r3, #14
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e006      	b.n	8009e34 <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b0f      	cmp	r3, #15
 8009e30:	d9af      	bls.n	8009d92 <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8009e32:	2316      	movs	r3, #22
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00d      	beq.n	8009e6a <ndefVCardFindMarker+0x2e>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d009      	beq.n	8009e6a <ndefVCardFindMarker+0x2e>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d006      	beq.n	8009e6a <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <ndefVCardFindMarker+0x2e>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 8009e6a:	230b      	movs	r3, #11
 8009e6c:	e025      	b.n	8009eba <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8009e72:	e019      	b.n	8009ea8 <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d012      	beq.n	8009ea2 <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	18d0      	adds	r0, r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6819      	ldr	r1, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f011 fa9d 	bl	801b3cc <memcmp>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e00b      	b.n	8009eba <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d3dd      	bcc.n	8009e74 <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 8009eb8:	2316      	movs	r3, #22
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d011      	beq.n	8009ef8 <ndefVCardExtractLine+0x36>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00d      	beq.n	8009ef8 <ndefVCardExtractLine+0x36>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <ndefVCardExtractLine+0x36>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 8009ef8:	230b      	movs	r3, #11
 8009efa:	e01c      	b.n	8009f36 <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 8009efc:	f107 0310 	add.w	r3, r7, #16
 8009f00:	461a      	mov	r2, r3
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff ff99 	bl	8009e3c <ndefVCardFindMarker>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 8009f0e:	8afb      	ldrh	r3, [r7, #22]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d107      	bne.n	8009f24 <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	e007      	b.n	8009f34 <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d006      	beq.n	8009f5e <ndefVCardParseLine+0x1e>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <ndefVCardParseLine+0x1e>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 8009f5e:	230b      	movs	r3, #11
 8009f60:	e053      	b.n	800a00a <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 8009f62:	f107 030c 	add.w	r3, r7, #12
 8009f66:	461a      	mov	r2, r3
 8009f68:	492a      	ldr	r1, [pc, #168]	; (800a014 <ndefVCardParseLine+0xd4>)
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff ff66 	bl	8009e3c <ndefVCardFindMarker>
 8009f70:	4603      	mov	r3, r0
 8009f72:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 8009f74:	8bfb      	ldrh	r3, [r7, #30]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 8009f7a:	8bfb      	ldrh	r3, [r7, #30]
 8009f7c:	e045      	b.n	800a00a <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 8009f98:	f107 0210 	add.w	r2, r7, #16
 8009f9c:	f107 0314 	add.w	r3, r7, #20
 8009fa0:	491d      	ldr	r1, [pc, #116]	; (800a018 <ndefVCardParseLine+0xd8>)
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff ff4a 	bl	8009e3c <ndefVCardFindMarker>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 8009fac:	8bfb      	ldrh	r3, [r7, #30]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d11a      	bne.n	8009fe8 <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	441a      	add	r2, r3
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	7b1a      	ldrb	r2, [r3, #12]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	7b5b      	ldrb	r3, [r3, #13]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	441a      	add	r2, r3
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	b29a      	uxth	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	0801d150 	.word	0x0801d150
 800a018:	0801d158 	.word	0x0801d158

0800a01c <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e01e      	b.n	800a06a <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	4413      	add	r3, r2
 800a034:	330c      	adds	r3, #12
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d013      	beq.n	800a064 <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	4413      	add	r3, r2
 800a044:	6819      	ldr	r1, [r3, #0]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	4413      	add	r3, r2
 800a04e:	330c      	adds	r3, #12
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	6838      	ldr	r0, [r7, #0]
 800a056:	f011 f9b9 	bl	801b3cc <memcmp>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <ndefIsVCardTypeFound+0x48>
            {
                return true;
 800a060:	2301      	movs	r3, #1
 800a062:	e006      	b.n	800a072 <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b0f      	cmp	r3, #15
 800a06e:	d9dd      	bls.n	800a02c <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08c      	sub	sp, #48	; 0x30
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <ndefPayloadToVcard+0x26>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <ndefPayloadToVcard+0x26>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <ndefPayloadToVcard+0x26>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 800a0a2:	230b      	movs	r3, #11
 800a0a4:	e09c      	b.n	800a1e0 <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	4a4e      	ldr	r2, [pc, #312]	; (800a1e8 <ndefPayloadToVcard+0x16c>)
 800a0b0:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	4a4d      	ldr	r2, [pc, #308]	; (800a1ec <ndefPayloadToVcard+0x170>)
 800a0b6:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0c2:	e02b      	b.n	800a11c <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 800a0c4:	6a3a      	ldr	r2, [r7, #32]
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	4413      	add	r3, r2
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 800a0d0:	6a3a      	ldr	r2, [r7, #32]
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	4413      	add	r3, r2
 800a0d8:	330c      	adds	r3, #12
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	4413      	add	r3, r2
 800a0f4:	330d      	adds	r3, #13
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 800a0fa:	6a3a      	ldr	r2, [r7, #32]
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	4413      	add	r3, r2
 800a102:	3308      	adds	r3, #8
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	4413      	add	r3, r2
 800a110:	330e      	adds	r3, #14
 800a112:	2200      	movs	r2, #0
 800a114:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	3301      	adds	r3, #1
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	2b0f      	cmp	r3, #15
 800a120:	d9d0      	bls.n	800a0c4 <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800a12a:	e029      	b.n	800a180 <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a132:	4413      	add	r3, r2
 800a134:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 800a140:	f107 020c 	add.w	r2, r7, #12
 800a144:	f107 0314 	add.w	r3, r7, #20
 800a148:	4929      	ldr	r1, [pc, #164]	; (800a1f0 <ndefPayloadToVcard+0x174>)
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff feb9 	bl	8009ec2 <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	441a      	add	r2, r3
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff feee 	bl	8009f40 <ndefVCardParseLine>
 800a164:	4603      	mov	r3, r0
 800a166:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 800a168:	8bfb      	ldrh	r3, [r7, #30]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	3301      	adds	r3, #1
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2202      	movs	r2, #2
 800a178:	4413      	add	r3, r2
 800a17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a17c:	4413      	add	r3, r2
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a186:	429a      	cmp	r2, r3
 800a188:	d202      	bcs.n	800a190 <ndefPayloadToVcard+0x114>
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	2b0f      	cmp	r3, #15
 800a18e:	d9cd      	bls.n	800a12c <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 800a190:	4b18      	ldr	r3, [pc, #96]	; (800a1f4 <ndefPayloadToVcard+0x178>)
 800a192:	4619      	mov	r1, r3
 800a194:	6a38      	ldr	r0, [r7, #32]
 800a196:	f7ff ff41 	bl	800a01c <ndefIsVCardTypeFound>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f083 0301 	eor.w	r3, r3, #1
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 800a1a6:	2314      	movs	r3, #20
 800a1a8:	e01a      	b.n	800a1e0 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <ndefPayloadToVcard+0x17c>)
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6a38      	ldr	r0, [r7, #32]
 800a1b0:	f7ff ff34 	bl	800a01c <ndefIsVCardTypeFound>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f083 0301 	eor.w	r3, r3, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 800a1c0:	2314      	movs	r3, #20
 800a1c2:	e00d      	b.n	800a1e0 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 800a1c4:	4b0d      	ldr	r3, [pc, #52]	; (800a1fc <ndefPayloadToVcard+0x180>)
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6a38      	ldr	r0, [r7, #32]
 800a1ca:	f7ff ff27 	bl	800a01c <ndefIsVCardTypeFound>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f083 0301 	eor.w	r3, r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 800a1da:	2314      	movs	r3, #20
 800a1dc:	e000      	b.n	800a1e0 <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3730      	adds	r7, #48	; 0x30
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	080098ef 	.word	0x080098ef
 800a1ec:	080099f5 	.word	0x080099f5
 800a1f0:	0801d160 	.word	0x0801d160
 800a1f4:	0801d168 	.word	0x0801d168
 800a1f8:	0801d174 	.word	0x0801d174
 800a1fc:	0801d170 	.word	0x0801d170

0800a200 <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <ndefRecordToVCard+0x16>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 800a216:	2307      	movs	r3, #7
 800a218:	e022      	b.n	800a260 <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 800a21a:	4a13      	ldr	r2, [pc, #76]	; (800a268 <ndefRecordToVCard+0x68>)
 800a21c:	2102      	movs	r1, #2
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7fe fc34 	bl	8008a8c <ndefRecordTypeMatch>
 800a224:	4603      	mov	r3, r0
 800a226:	f083 0301 	eor.w	r3, r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 800a230:	230b      	movs	r3, #11
 800a232:	e015      	b.n	800a260 <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fb35 	bl	80098a4 <ndefRecordGetNdefType>
 800a23a:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 800a242:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a246:	68f9      	ldr	r1, [r7, #12]
 800a248:	6838      	ldr	r0, [r7, #0]
 800a24a:	f011 f8cf 	bl	801b3ec <memcpy>
        return ERR_NONE;
 800a24e:	2300      	movs	r3, #0
 800a250:	e006      	b.n	800a260 <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	330c      	adds	r3, #12
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff ff0f 	bl	800a07c <ndefPayloadToVcard>
 800a25e:	4603      	mov	r3, r0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	0801d13c 	.word	0x0801d13c

0800a26c <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <ndefVCardToRecord+0x1e>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b06      	cmp	r3, #6
 800a282:	d102      	bne.n	800a28a <ndefVCardToRecord+0x1e>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800a28a:	2307      	movs	r3, #7
 800a28c:	e00c      	b.n	800a2a8 <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800a28e:	6838      	ldr	r0, [r7, #0]
 800a290:	f7fe fb26 	bl	80088e0 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 800a294:	4a06      	ldr	r2, [pc, #24]	; (800a2b0 <ndefVCardToRecord+0x44>)
 800a296:	2102      	movs	r1, #2
 800a298:	6838      	ldr	r0, [r7, #0]
 800a29a:	f7fe fba2 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	6838      	ldr	r0, [r7, #0]
 800a2a2:	f7ff fac7 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	0801d13c 	.word	0x0801d13c

0800a2b4 <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <ndefEmptyTypePayloadGetLength+0x16>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	e000      	b.n	800a2d0 <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr

0800a2da <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <ndefEmptyTypePayloadItem+0x1c>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e009      	b.n	800a30e <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2200      	movs	r2, #0
 800a30a:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	bc80      	pop	{r7}
 800a316:	4770      	bx	lr

0800a318 <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 800a326:	2307      	movs	r3, #7
 800a328:	e009      	b.n	800a33e <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a05      	ldr	r2, [pc, #20]	; (800a348 <ndefEmptyType+0x30>)
 800a334:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a04      	ldr	r2, [pc, #16]	; (800a34c <ndefEmptyType+0x34>)
 800a33a:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	bc80      	pop	{r7}
 800a346:	4770      	bx	lr
 800a348:	0800a2b5 	.word	0x0800a2b5
 800a34c:	0800a2db 	.word	0x0800a2db

0800a350 <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 800a35a:	2300      	movs	r3, #0
 800a35c:	60bb      	str	r3, [r7, #8]
 800a35e:	2300      	movs	r3, #0
 800a360:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <ndefRecordToEmptyType+0x1e>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 800a36e:	2307      	movs	r3, #7
 800a370:	e024      	b.n	800a3bc <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 800a372:	f107 0308 	add.w	r3, r7, #8
 800a376:	461a      	mov	r2, r3
 800a378:	2100      	movs	r1, #0
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fe fb86 	bl	8008a8c <ndefRecordTypeMatch>
 800a380:	4603      	mov	r3, r0
 800a382:	f083 0301 	eor.w	r3, r3, #1
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 800a38c:	2307      	movs	r3, #7
 800a38e:	e015      	b.n	800a3bc <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	789b      	ldrb	r3, [r3, #2]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <ndefRecordToEmptyType+0x60>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d107      	bne.n	800a3b0 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 800a3b0:	2307      	movs	r3, #7
 800a3b2:	e003      	b.n	800a3bc <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 800a3b4:	6838      	ldr	r0, [r7, #0]
 800a3b6:	f7ff ffaf 	bl	800a318 <ndefEmptyType>
 800a3ba:	4603      	mov	r3, r0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <ndefEmptyTypeToRecord+0x1e>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d102      	bne.n	800a3e2 <ndefEmptyTypeToRecord+0x1e>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800a3e2:	2307      	movs	r3, #7
 800a3e4:	e007      	b.n	800a3f6 <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 800a3e6:	6838      	ldr	r0, [r7, #0]
 800a3e8:	f7fe fa7a 	bl	80088e0 <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	6838      	ldr	r0, [r7, #0]
 800a3f0:	f7ff fa20 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b087      	sub	sp, #28
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d001      	beq.n	800a41c <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	e01d      	b.n	800a458 <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	330c      	adds	r3, #12
 800a420:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a422:	2300      	movs	r3, #0
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	e013      	b.n	800a450 <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	4413      	add	r3, r2
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d009      	beq.n	800a44a <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	4413      	add	r3, r2
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	461a      	mov	r2, r3
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	4413      	add	r3, r2
 800a446:	3302      	adds	r3, #2
 800a448:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b04      	cmp	r3, #4
 800a454:	d9e8      	bls.n	800a428 <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 800a456:	697b      	ldr	r3, [r7, #20]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr
	...

0800a464 <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <ndefRtdDeviceInfoToPayloadItem+0x22>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d102      	bne.n	800a486 <ndefRtdDeviceInfoToPayloadItem+0x22>
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800a486:	2300      	movs	r3, #0
 800a488:	e063      	b.n	800a552 <ndefRtdDeviceInfoToPayloadItem+0xee>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	330c      	adds	r3, #12
 800a48e:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 800a496:	4b31      	ldr	r3, [pc, #196]	; (800a55c <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 800a4a8:	4b2c      	ldr	r3, [pc, #176]	; (800a55c <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a2c      	ldr	r2, [pc, #176]	; (800a560 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800a4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d03e      	beq.n	800a542 <ndefRtdDeviceInfoToPayloadItem+0xde>
    {
        switch (item % 3U)
 800a4c4:	4b25      	ldr	r3, [pc, #148]	; (800a55c <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a4c6:	6819      	ldr	r1, [r3, #0]
 800a4c8:	4b25      	ldr	r3, [pc, #148]	; (800a560 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800a4ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a4ce:	085b      	lsrs	r3, r3, #1
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	0052      	lsls	r2, r2, #1
 800a4d4:	441a      	add	r2, r3
 800a4d6:	1a8b      	subs	r3, r1, r2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d01b      	beq.n	800a514 <ndefRtdDeviceInfoToPayloadItem+0xb0>
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d829      	bhi.n	800a534 <ndefRtdDeviceInfoToPayloadItem+0xd0>
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <ndefRtdDeviceInfoToPayloadItem+0x86>
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d00a      	beq.n	800a4fe <ndefRtdDeviceInfoToPayloadItem+0x9a>
 800a4e8:	e024      	b.n	800a534 <ndefRtdDeviceInfoToPayloadItem+0xd0>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	605a      	str	r2, [r3, #4]
            break;
 800a4fc:	e022      	b.n	800a544 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	4413      	add	r3, r2
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2201      	movs	r2, #1
 800a510:	605a      	str	r2, [r3, #4]
            break;
 800a512:	e017      	b.n	800a544 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	4413      	add	r3, r2
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	4413      	add	r3, r2
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	461a      	mov	r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	605a      	str	r2, [r3, #4]
            break;
 800a532:	e007      	b.n	800a544 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        default:
            bufItem->buffer = NULL;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2200      	movs	r2, #0
 800a53e:	605a      	str	r2, [r3, #4]
            break;
 800a540:	e000      	b.n	800a544 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        }
    }
 800a542:	bf00      	nop

    /* Move to next item for next call */
    item++;
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	4a04      	ldr	r2, [pc, #16]	; (800a55c <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800a54c:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	681b      	ldr	r3, [r3, #0]
}
 800a552:	4618      	mov	r0, r3
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	bc80      	pop	{r7}
 800a55a:	4770      	bx	lr
 800a55c:	20003270 	.word	0x20003270
 800a560:	aaaaaaab 	.word	0xaaaaaaab

0800a564 <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d006      	beq.n	800a582 <ndefGetRtdDeviceInfo+0x1e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d102      	bne.n	800a582 <ndefGetRtdDeviceInfo+0x1e>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 800a582:	2307      	movs	r3, #7
 800a584:	e029      	b.n	800a5da <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	330c      	adds	r3, #12
 800a58a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e01f      	b.n	800a5d2 <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	7859      	ldrb	r1, [r3, #1]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	460a      	mov	r2, r1
 800a5b6:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4413      	add	r3, r2
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	440b      	add	r3, r1
 800a5ca:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d9dc      	bls.n	800a592 <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b089      	sub	sp, #36	; 0x24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00a      	beq.n	800a60a <ndefPayloadToRtdDeviceInfo+0x26>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d006      	beq.n	800a60a <ndefPayloadToRtdDeviceInfo+0x26>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <ndefPayloadToRtdDeviceInfo+0x26>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 800a60a:	2307      	movs	r3, #7
 800a60c:	e09d      	b.n	800a74a <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2201      	movs	r2, #1
 800a612:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	4a4f      	ldr	r2, [pc, #316]	; (800a754 <ndefPayloadToRtdDeviceInfo+0x170>)
 800a618:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	4a4e      	ldr	r2, [pc, #312]	; (800a758 <ndefPayloadToRtdDeviceInfo+0x174>)
 800a61e:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	330c      	adds	r3, #12
 800a624:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d905      	bls.n	800a63a <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800a632:	f240 4216 	movw	r2, #1046	; 0x416
 800a636:	4293      	cmp	r3, r2
 800a638:	d901      	bls.n	800a63e <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 800a63a:	230b      	movs	r3, #11
 800a63c:	e085      	b.n	800a74a <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	e013      	b.n	800a66c <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	2100      	movs	r1, #0
 800a64a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	4413      	add	r3, r2
 800a656:	2200      	movs	r2, #0
 800a658:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4413      	add	r3, r2
 800a662:	2200      	movs	r2, #0
 800a664:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	3301      	adds	r3, #1
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d9e8      	bls.n	800a644 <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	61bb      	str	r3, [r7, #24]
    count = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800a682:	e044      	b.n	800a70e <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	4413      	add	r3, r2
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	3301      	adds	r3, #1
 800a698:	4413      	add	r3, r2
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d104      	bne.n	800a6ae <ndefPayloadToRtdDeviceInfo+0xca>
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d001      	beq.n	800a6ae <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 800a6aa:	230b      	movs	r3, #11
 800a6ac:	e04d      	b.n	800a74a <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	2b05      	cmp	r3, #5
 800a6b2:	d802      	bhi.n	800a6ba <ndefPayloadToRtdDeviceInfo+0xd6>
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 800a6ba:	230b      	movs	r3, #11
 800a6bc:	e045      	b.n	800a74a <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	75bb      	strb	r3, [r7, #22]
 800a6c8:	e004      	b.n	800a6d4 <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 800a6d4:	7dfa      	ldrb	r2, [r7, #23]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	7bf9      	ldrb	r1, [r7, #15]
 800a6da:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	7bba      	ldrb	r2, [r7, #14]
 800a6e8:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6819      	ldr	r1, [r3, #0]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	1c9a      	adds	r2, r3, #2
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	6939      	ldr	r1, [r7, #16]
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	440b      	add	r3, r1
 800a6fc:	605a      	str	r2, [r3, #4]
        count++;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	3301      	adds	r3, #1
 800a702:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 800a704:	7bba      	ldrb	r2, [r7, #14]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	4413      	add	r3, r2
 800a70a:	3302      	adds	r3, #2
 800a70c:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	1c9a      	adds	r2, r3, #2
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d202      	bcs.n	800a720 <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d9b1      	bls.n	800a684 <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800a720:	7dba      	ldrb	r2, [r7, #22]
 800a722:	7d7b      	ldrb	r3, [r7, #21]
 800a724:	429a      	cmp	r2, r3
 800a726:	d00f      	beq.n	800a748 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800a728:	7dbb      	ldrb	r3, [r7, #22]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	4413      	add	r3, r2
 800a730:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800a732:	2b00      	cmp	r3, #0
 800a734:	d008      	beq.n	800a748 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 800a736:	7d7b      	ldrb	r3, [r7, #21]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	4413      	add	r3, r2
 800a73e:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 800a744:	2300      	movs	r3, #0
 800a746:	e000      	b.n	800a74a <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 800a748:	2307      	movs	r3, #7
    }
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3724      	adds	r7, #36	; 0x24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr
 800a754:	0800a3ff 	.word	0x0800a3ff
 800a758:	0800a465 	.word	0x0800a465

0800a75c <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <ndefRecordToRtdDeviceInfo+0x16>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 800a772:	2307      	movs	r3, #7
 800a774:	e028      	b.n	800a7c8 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 800a776:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <ndefRecordToRtdDeviceInfo+0x74>)
 800a778:	2101      	movs	r1, #1
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7fe f986 	bl	8008a8c <ndefRecordTypeMatch>
 800a780:	4603      	mov	r3, r0
 800a782:	f083 0301 	eor.w	r3, r3, #1
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 800a78c:	230b      	movs	r3, #11
 800a78e:	e01b      	b.n	800a7c8 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff f887 	bl	80098a4 <ndefRecordGetNdefType>
 800a796:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d007      	beq.n	800a7ae <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 800a79e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	6838      	ldr	r0, [r7, #0]
 800a7a6:	f010 fe21 	bl	801b3ec <memcpy>
        return ERR_NONE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e00c      	b.n	800a7c8 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b05      	cmp	r3, #5
 800a7b4:	d801      	bhi.n	800a7ba <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 800a7b6:	230b      	movs	r3, #11
 800a7b8:	e006      	b.n	800a7c8 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff ff0f 	bl	800a5e4 <ndefPayloadToRtdDeviceInfo>
 800a7c6:	4603      	mov	r3, r0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0801d1a4 	.word	0x0801d1a4

0800a7d4 <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d006      	beq.n	800a7f2 <ndefRtdDeviceInfoToRecord+0x1e>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d102      	bne.n	800a7f2 <ndefRtdDeviceInfoToRecord+0x1e>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 800a7f2:	2307      	movs	r3, #7
 800a7f4:	e00c      	b.n	800a810 <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800a7f6:	6838      	ldr	r0, [r7, #0]
 800a7f8:	f7fe f872 	bl	80088e0 <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 800a7fc:	4a06      	ldr	r2, [pc, #24]	; (800a818 <ndefRtdDeviceInfoToRecord+0x44>)
 800a7fe:	2101      	movs	r1, #1
 800a800:	6838      	ldr	r0, [r7, #0]
 800a802:	f7fe f8ee 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	6838      	ldr	r0, [r7, #0]
 800a80a:	f7ff f813 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	0801d1a4 	.word	0x0801d1a4

0800a81c <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <ndefRtdTextPayloadGetLength+0x16>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d001      	beq.n	800a836 <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 800a832:	2300      	movs	r3, #0
 800a834:	e009      	b.n	800a84a <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	330c      	adds	r3, #12
 800a83a:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	7a1b      	ldrb	r3, [r3, #8]
 800a840:	461a      	mov	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	4413      	add	r3, r2
 800a848:	3301      	adds	r3, #1
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr

0800a854 <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d006      	beq.n	800a876 <ndefRtdTextToPayloadItem+0x22>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d102      	bne.n	800a876 <ndefRtdTextToPayloadItem+0x22>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	e03b      	b.n	800a8f2 <ndefRtdTextToPayloadItem+0x9e>
    }

    rtdText = &text->data.text;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	330c      	adds	r3, #12
 800a87e:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 800a886:	4b1d      	ldr	r3, [pc, #116]	; (800a8fc <ndefRtdTextToPayloadItem+0xa8>)
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800a88c:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <ndefRtdTextToPayloadItem+0xa8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d017      	beq.n	800a8c4 <ndefRtdTextToPayloadItem+0x70>
 800a894:	2b02      	cmp	r3, #2
 800a896:	d81e      	bhi.n	800a8d6 <ndefRtdTextToPayloadItem+0x82>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <ndefRtdTextToPayloadItem+0x4e>
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d007      	beq.n	800a8b0 <ndefRtdTextToPayloadItem+0x5c>
 800a8a0:	e019      	b.n	800a8d6 <ndefRtdTextToPayloadItem+0x82>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	605a      	str	r2, [r3, #4]
        break;
 800a8ae:	e019      	b.n	800a8e4 <ndefRtdTextToPayloadItem+0x90>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	7a1b      	ldrb	r3, [r3, #8]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	605a      	str	r2, [r3, #4]
        break;
 800a8c2:	e00f      	b.n	800a8e4 <ndefRtdTextToPayloadItem+0x90>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	691a      	ldr	r2, [r3, #16]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	605a      	str	r2, [r3, #4]
        break;
 800a8d4:	e006      	b.n	800a8e4 <ndefRtdTextToPayloadItem+0x90>

    default:
        bufItem->buffer = NULL;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	605a      	str	r2, [r3, #4]
        break;
 800a8e2:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <ndefRtdTextToPayloadItem+0xa8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <ndefRtdTextToPayloadItem+0xa8>)
 800a8ec:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	681b      	ldr	r3, [r3, #0]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bc80      	pop	{r7}
 800a8fa:	4770      	bx	lr
 800a8fc:	20003274 	.word	0x20003274

0800a900 <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	460b      	mov	r3, r1
 800a90e:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d015      	beq.n	800a942 <ndefRtdText+0x42>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d012      	beq.n	800a942 <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00e      	beq.n	800a942 <ndefRtdText+0x42>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	791b      	ldrb	r3, [r3, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <ndefRtdText+0x42>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d007      	beq.n	800a942 <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <ndefRtdText+0x42>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 800a942:	2307      	movs	r3, #7
 800a944:	e036      	b.n	800a9b4 <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	791b      	ldrb	r3, [r3, #4]
 800a94a:	2b3f      	cmp	r3, #63	; 0x3f
 800a94c:	d901      	bls.n	800a952 <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 800a94e:	230b      	movs	r3, #11
 800a950:	e030      	b.n	800a9b4 <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <ndefRtdText+0x62>
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d001      	beq.n	800a962 <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 800a95e:	2307      	movs	r3, #7
 800a960:	e028      	b.n	800a9b4 <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2202      	movs	r2, #2
 800a966:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4a15      	ldr	r2, [pc, #84]	; (800a9c0 <ndefRtdText+0xc0>)
 800a96c:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a14      	ldr	r2, [pc, #80]	; (800a9c4 <ndefRtdText+0xc4>)
 800a972:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	330c      	adds	r3, #12
 800a978:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	01db      	lsls	r3, r3, #7
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	791b      	ldrb	r3, [r3, #4]
 800a984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	4313      	orrs	r3, r2
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	791a      	ldrb	r2, [r3, #4]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	0800a81d 	.word	0x0800a81d
 800a9c4:	0800a855 	.word	0x0800a855

0800a9c8 <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00c      	beq.n	800a9f6 <ndefGetRtdText+0x2e>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d108      	bne.n	800a9f6 <ndefGetRtdText+0x2e>
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d005      	beq.n	800a9f6 <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <ndefGetRtdText+0x2e>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 800a9f6:	2307      	movs	r3, #7
 800a9f8:	e019      	b.n	800aa2e <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	09db      	lsrs	r3, r3, #7
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	7a1a      	ldrb	r2, [r3, #8]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bc80      	pop	{r7}
 800aa36:	4770      	bx	lr

0800aa38 <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00a      	beq.n	800aa5e <ndefPayloadToRtdText+0x26>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <ndefPayloadToRtdText+0x26>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <ndefPayloadToRtdText+0x26>
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 800aa5e:	2307      	movs	r3, #7
 800aa60:	e02d      	b.n	800aabe <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2202      	movs	r2, #2
 800aa66:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	4a17      	ldr	r2, [pc, #92]	; (800aac8 <ndefPayloadToRtdText+0x90>)
 800aa6c:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	4a16      	ldr	r2, [pc, #88]	; (800aacc <ndefPayloadToRtdText+0x94>)
 800aa72:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	330c      	adds	r3, #12
 800aa78:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	7afa      	ldrb	r2, [r7, #11]
 800aa86:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa8e:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	7aba      	ldrb	r2, [r7, #10]
 800aa9e:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	7abb      	ldrb	r3, [r7, #10]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	441a      	add	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	7abb      	ldrb	r3, [r7, #10]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	1e5a      	subs	r2, r3, #1
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr
 800aac8:	0800a81d 	.word	0x0800a81d
 800aacc:	0800a855 	.word	0x0800a855

0800aad0 <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <ndefRecordToRtdText+0x16>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 800aae6:	2307      	movs	r3, #7
 800aae8:	e028      	b.n	800ab3c <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 800aaea:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <ndefRecordToRtdText+0x74>)
 800aaec:	2101      	movs	r1, #1
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fd ffcc 	bl	8008a8c <ndefRecordTypeMatch>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f083 0301 	eor.w	r3, r3, #1
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 800ab00:	230b      	movs	r3, #11
 800ab02:	e01b      	b.n	800ab3c <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7fe fecd 	bl	80098a4 <ndefRecordGetNdefType>
 800ab0a:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 800ab12:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	6838      	ldr	r0, [r7, #0]
 800ab1a:	f010 fc67 	bl	801b3ec <memcpy>
        return ERR_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e00c      	b.n	800ab3c <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d801      	bhi.n	800ab2e <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 800ab2a:	230b      	movs	r3, #11
 800ab2c:	e006      	b.n	800ab3c <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	330c      	adds	r3, #12
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff ff7f 	bl	800aa38 <ndefPayloadToRtdText>
 800ab3a:	4603      	mov	r3, r0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	0801d1ac 	.word	0x0801d1ac

0800ab48 <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d006      	beq.n	800ab66 <ndefRtdTextToRecord+0x1e>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d102      	bne.n	800ab66 <ndefRtdTextToRecord+0x1e>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800ab66:	2307      	movs	r3, #7
 800ab68:	e00c      	b.n	800ab84 <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800ab6a:	6838      	ldr	r0, [r7, #0]
 800ab6c:	f7fd feb8 	bl	80088e0 <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 800ab70:	4a06      	ldr	r2, [pc, #24]	; (800ab8c <ndefRtdTextToRecord+0x44>)
 800ab72:	2101      	movs	r1, #1
 800ab74:	6838      	ldr	r0, [r7, #0]
 800ab76:	f7fd ff34 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	6838      	ldr	r0, [r7, #0]
 800ab7e:	f7fe fe59 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	0801d1ac 	.word	0x0801d1ac

0800ab90 <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <ndefRtdUriPayloadGetLength+0x16>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d001      	beq.n	800abaa <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e005      	b.n	800abb6 <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	330c      	adds	r3, #12
 800abae:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	3301      	adds	r3, #1
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	4613      	mov	r3, r2
 800abcc:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d006      	beq.n	800abe2 <ndefRtdUriToPayloadItem+0x22>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d102      	bne.n	800abe2 <ndefRtdUriToPayloadItem+0x22>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e02d      	b.n	800ac42 <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	330c      	adds	r3, #12
 800abea:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <ndefRtdUriToPayloadItem+0x8c>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800abf8:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <ndefRtdUriToPayloadItem+0x8c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <ndefRtdUriToPayloadItem+0x46>
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d007      	beq.n	800ac14 <ndefRtdUriToPayloadItem+0x54>
 800ac04:	e00f      	b.n	800ac26 <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	605a      	str	r2, [r3, #4]
        break;
 800ac12:	e00f      	b.n	800ac34 <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	605a      	str	r2, [r3, #4]
        break;
 800ac24:	e006      	b.n	800ac34 <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	605a      	str	r2, [r3, #4]
        break;
 800ac32:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <ndefRtdUriToPayloadItem+0x8c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	4a04      	ldr	r2, [pc, #16]	; (800ac4c <ndefRtdUriToPayloadItem+0x8c>)
 800ac3c:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	681b      	ldr	r3, [r3, #0]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr
 800ac4c:	20003278 	.word	0x20003278

0800ac50 <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d006      	beq.n	800ac6e <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 800ac64:	2b24      	cmp	r3, #36	; 0x24
 800ac66:	d102      	bne.n	800ac6e <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 800ac6e:	2307      	movs	r3, #7
 800ac70:	e03d      	b.n	800acee <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
 800ac76:	e033      	b.n	800ace0 <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	4a1f      	ldr	r2, [pc, #124]	; (800acf8 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	4413      	add	r3, r2
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d029      	beq.n	800acda <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	4a1a      	ldr	r2, [pc, #104]	; (800acf8 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ac8e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	4a18      	ldr	r2, [pc, #96]	; (800acf8 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f010 fb95 	bl	801b3cc <memcmp>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d118      	bne.n	800acda <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	7bfa      	ldrb	r2, [r7, #15]
 800acac:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	4910      	ldr	r1, [pc, #64]	; (800acf8 <ndefRtdUriProtocolAutodetect+0xa8>)
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	440b      	add	r3, r1
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	441a      	add	r2, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	490b      	ldr	r1, [pc, #44]	; (800acf8 <ndefRtdUriProtocolAutodetect+0xa8>)
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	440b      	add	r3, r1
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	1ad2      	subs	r2, r2, r3
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e009      	b.n	800acee <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	3301      	adds	r3, #1
 800acde:	73fb      	strb	r3, [r7, #15]
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	2b24      	cmp	r3, #36	; 0x24
 800ace4:	d9c8      	bls.n	800ac78 <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 800acec:	2316      	movs	r3, #22
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	0801d344 	.word	0x0801d344

0800acfc <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	460b      	mov	r3, r1
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00d      	beq.n	800ad2c <ndefRtdUri+0x30>
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	2b24      	cmp	r3, #36	; 0x24
 800ad14:	d80a      	bhi.n	800ad2c <ndefRtdUri+0x30>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <ndefRtdUri+0x30>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 800ad2c:	2307      	movs	r3, #7
 800ad2e:	e028      	b.n	800ad82 <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2203      	movs	r2, #3
 800ad34:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4a14      	ldr	r2, [pc, #80]	; (800ad8c <ndefRtdUri+0x90>)
 800ad3a:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4a14      	ldr	r2, [pc, #80]	; (800ad90 <ndefRtdUri+0x94>)
 800ad40:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	330c      	adds	r3, #12
 800ad46:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 800ad54:	7afb      	ldrb	r3, [r7, #11]
 800ad56:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	2b24      	cmp	r3, #36	; 0x24
 800ad5c:	d107      	bne.n	800ad6e <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 800ad5e:	f107 0214 	add.w	r2, r7, #20
 800ad62:	f107 0313 	add.w	r3, r7, #19
 800ad66:	4611      	mov	r1, r2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff ff71 	bl	800ac50 <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 800ad6e:	7cfa      	ldrb	r2, [r7, #19]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3720      	adds	r7, #32
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800ab91 	.word	0x0800ab91
 800ad90:	0800abc1 	.word	0x0800abc1

0800ad94 <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d009      	beq.n	800adba <ndefGetRtdUri+0x26>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d105      	bne.n	800adba <ndefGetRtdUri+0x26>
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 800adba:	2307      	movs	r3, #7
 800adbc:	e01b      	b.n	800adf6 <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	330c      	adds	r3, #12
 800adc2:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <ndefGetRtdUri+0x6c>)
 800adcc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <ndefGetRtdUri+0x6c>)
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	4413      	add	r3, r2
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bc80      	pop	{r7}
 800adfe:	4770      	bx	lr
 800ae00:	0801d344 	.word	0x0801d344

0800ae04 <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00a      	beq.n	800ae2a <ndefPayloadToRtdUri+0x26>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <ndefPayloadToRtdUri+0x26>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <ndefPayloadToRtdUri+0x26>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 800ae2a:	2307      	movs	r3, #7
 800ae2c:	e013      	b.n	800ae56 <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 800ae46:	f107 020c 	add.w	r2, r7, #12
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6838      	ldr	r0, [r7, #0]
 800ae50:	f7ff ff54 	bl	800acfc <ndefRtdUri>
 800ae54:	4603      	mov	r3, r0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <ndefRecordToRtdUri+0x16>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 800ae76:	2307      	movs	r3, #7
 800ae78:	e028      	b.n	800aecc <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 800ae7a:	4a16      	ldr	r2, [pc, #88]	; (800aed4 <ndefRecordToRtdUri+0x74>)
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7fd fe04 	bl	8008a8c <ndefRecordTypeMatch>
 800ae84:	4603      	mov	r3, r0
 800ae86:	f083 0301 	eor.w	r3, r3, #1
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 800ae90:	230b      	movs	r3, #11
 800ae92:	e01b      	b.n	800aecc <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fe fd05 	bl	80098a4 <ndefRecordGetNdefType>
 800ae9a:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 800aea2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	6838      	ldr	r0, [r7, #0]
 800aeaa:	f010 fa9f 	bl	801b3ec <memcpy>
        return ERR_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e00c      	b.n	800aecc <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d801      	bhi.n	800aebe <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 800aeba:	230b      	movs	r3, #11
 800aebc:	e006      	b.n	800aecc <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	330c      	adds	r3, #12
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7ff ff9d 	bl	800ae04 <ndefPayloadToRtdUri>
 800aeca:	4603      	mov	r3, r0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	0801d1b4 	.word	0x0801d1b4

0800aed8 <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <ndefRtdUriToRecord+0x1e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d102      	bne.n	800aef6 <ndefRtdUriToRecord+0x1e>
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800aef6:	2307      	movs	r3, #7
 800aef8:	e00c      	b.n	800af14 <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800aefa:	6838      	ldr	r0, [r7, #0]
 800aefc:	f7fd fcf0 	bl	80088e0 <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 800af00:	4a06      	ldr	r2, [pc, #24]	; (800af1c <ndefRtdUriToRecord+0x44>)
 800af02:	2101      	movs	r1, #1
 800af04:	6838      	ldr	r0, [r7, #0]
 800af06:	f7fd fd6c 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	6838      	ldr	r0, [r7, #0]
 800af0e:	f7fe fc91 	bl	8009834 <ndefRecordSetNdefType>

    return ERR_NONE;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	0801d1b4 	.word	0x0801d1b4

0800af20 <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00a      	beq.n	800af46 <ndefRtdAar+0x26>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <ndefRtdAar+0x26>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 800af46:	2307      	movs	r3, #7
 800af48:	e01a      	b.n	800af80 <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2204      	movs	r2, #4
 800af4e:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	330c      	adds	r3, #12
 800af60:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 800af62:	4a0a      	ldr	r2, [pc, #40]	; (800af8c <ndefRtdAar+0x6c>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 800af68:	220f      	movs	r2, #15
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	bc80      	pop	{r7}
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	0801d194 	.word	0x0801d194

0800af90 <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <ndefGetRtdAar+0x1e>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d102      	bne.n	800afae <ndefGetRtdAar+0x1e>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 800afae:	2307      	movs	r3, #7
 800afb0:	e00b      	b.n	800afca <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	330c      	adds	r3, #12
 800afb6:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	bc80      	pop	{r7}
 800afd2:	4770      	bx	lr

0800afd4 <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <ndefRecordToRtdAar+0x16>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 800afea:	2307      	movs	r3, #7
 800afec:	e013      	b.n	800b016 <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 800afee:	4a0c      	ldr	r2, [pc, #48]	; (800b020 <ndefRecordToRtdAar+0x4c>)
 800aff0:	2104      	movs	r1, #4
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fd fd4a 	bl	8008a8c <ndefRecordTypeMatch>
 800aff8:	4603      	mov	r3, r0
 800affa:	f083 0301 	eor.w	r3, r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 800b004:	230b      	movs	r3, #11
 800b006:	e006      	b.n	800b016 <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	330c      	adds	r3, #12
 800b00c:	4619      	mov	r1, r3
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	f7ff ff86 	bl	800af20 <ndefRtdAar>
 800b014:	4603      	mov	r3, r0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	0801d1bc 	.word	0x0801d1bc

0800b024 <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d006      	beq.n	800b042 <ndefRtdAarToRecord+0x1e>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d102      	bne.n	800b042 <ndefRtdAarToRecord+0x1e>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800b042:	2307      	movs	r3, #7
 800b044:	e011      	b.n	800b06a <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	330c      	adds	r3, #12
 800b04a:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 800b04c:	6838      	ldr	r0, [r7, #0]
 800b04e:	f7fd fc47 	bl	80088e0 <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 800b052:	4a08      	ldr	r2, [pc, #32]	; (800b074 <ndefRtdAarToRecord+0x50>)
 800b054:	2104      	movs	r1, #4
 800b056:	6838      	ldr	r0, [r7, #0]
 800b058:	f7fd fcc3 	bl	80089e2 <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3308      	adds	r3, #8
 800b060:	4619      	mov	r1, r3
 800b062:	6838      	ldr	r0, [r7, #0]
 800b064:	f7fd fd92 	bl	8008b8c <ndefRecordSetPayload>

    return ERR_NONE;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	0801d1bc 	.word	0x0801d1bc

0800b078 <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <ndefPollerContextInitialization+0x16>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 800b08e:	2307      	movs	r3, #7
 800b090:	e019      	b.n	800b0c6 <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 800b092:	6838      	ldr	r0, [r7, #0]
 800b094:	f000 fa02 	bl	800b49c <ndefPollerGetDeviceType>
 800b098:	4603      	mov	r3, r0
 800b09a:	461a      	mov	r2, r3
 800b09c:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <ndefPollerContextInitialization+0x58>)
 800b09e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 800b0b2:	2318      	movs	r3, #24
 800b0b4:	e007      	b.n	800b0c6 <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
 800b0c4:	4603      	mov	r3, r0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000104 	.word	0x20000104

0800b0d4 <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 800b0e4:	2307      	movs	r3, #7
 800b0e6:	e00e      	b.n	800b106 <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 800b0f2:	2321      	movs	r3, #33	; 0x21
 800b0f4:	e007      	b.n	800b106 <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3
 800b104:	4603      	mov	r3, r0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800b10e:	b590      	push	{r4, r7, lr}
 800b110:	b085      	sub	sp, #20
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 800b122:	2307      	movs	r3, #7
 800b124:	e010      	b.n	800b148 <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 800b130:	2321      	movs	r3, #33	; 0x21
 800b132:	e009      	b.n	800b148 <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b13a:	68dc      	ldr	r4, [r3, #12]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	68b9      	ldr	r1, [r7, #8]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	47a0      	blx	r4
 800b146:	4603      	mov	r3, r0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd90      	pop	{r4, r7, pc}

0800b150 <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 800b162:	2307      	movs	r3, #7
 800b164:	e00f      	b.n	800b186 <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 800b170:	2321      	movs	r3, #33	; 0x21
 800b172:	e008      	b.n	800b186 <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 800b1a0:	2307      	movs	r3, #7
 800b1a2:	e00f      	b.n	800b1c4 <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 800b1ae:	2321      	movs	r3, #33	; 0x21
 800b1b0:	e008      	b.n	800b1c4 <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 800b1e0:	2307      	movs	r3, #7
 800b1e2:	e010      	b.n	800b206 <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 800b1ee:	2321      	movs	r3, #33	; 0x21
 800b1f0:	e009      	b.n	800b206 <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1f8:	691c      	ldr	r4, [r3, #16]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	47a0      	blx	r4
 800b204:	4603      	mov	r3, r0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd90      	pop	{r4, r7, pc}

0800b20e <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 800b21e:	2307      	movs	r3, #7
 800b220:	e00e      	b.n	800b240 <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 800b22c:	2321      	movs	r3, #33	; 0x21
 800b22e:	e007      	b.n	800b240 <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	4798      	blx	r3
 800b23e:	4603      	mov	r3, r0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 800b258:	2307      	movs	r3, #7
 800b25a:	e00e      	b.n	800b27a <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800b266:	2321      	movs	r3, #33	; 0x21
 800b268:	e007      	b.n	800b27a <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	4798      	blx	r3
 800b278:	4603      	mov	r3, r0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 800b292:	2307      	movs	r3, #7
 800b294:	e00e      	b.n	800b2b4 <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800b2a0:	2321      	movs	r3, #33	; 0x21
 800b2a2:	e007      	b.n	800b2b4 <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	4798      	blx	r3
 800b2b2:	4603      	mov	r3, r0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08e      	sub	sp, #56	; 0x38
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <ndefPollerWriteMessage+0x16>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	e0de      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d006      	beq.n	800b2ee <ndefPollerWriteMessage+0x32>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d001      	beq.n	800b2ee <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800b2ea:	2321      	movs	r3, #33	; 0x21
 800b2ec:	e0d2      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 800b2ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6838      	ldr	r0, [r7, #0]
 800b2f6:	f7fd f9af 	bl	8008658 <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ff85 	bl	800b20e <ndefPollerCheckAvailableSpace>
 800b304:	4603      	mov	r3, r0
 800b306:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800b308:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800b30e:	2307      	movs	r3, #7
 800b310:	e0c0      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff ff96 	bl	800b248 <ndefPollerBeginWriteMessage>
 800b31c:	4603      	mov	r3, r0
 800b31e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800b320:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 800b32e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b330:	e0b0      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80ac 	beq.w	800b492 <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b340:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <ndefPollerWriteMessage+0x92>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	e000      	b.n	800b350 <ndefPollerWriteMessage+0x94>
 800b34e:	2300      	movs	r3, #0
 800b350:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 800b352:	e08a      	b.n	800b46a <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 800b354:	f107 031c 	add.w	r3, r7, #28
 800b358:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 800b35a:	2307      	movs	r3, #7
 800b35c:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 800b35e:	f107 0314 	add.w	r3, r7, #20
 800b362:	4619      	mov	r1, r3
 800b364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b366:	f7fd fd61 	bl	8008e2c <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7ff ff2b 	bl	800b1cc <ndefPollerWriteBytes>
 800b376:	4603      	mov	r3, r0
 800b378:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 800b37a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <ndefPollerWriteMessage+0xc8>
            {
                return err;
 800b380:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b382:	e087      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b388:	4413      	add	r3, r2
 800b38a:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	785b      	ldrb	r3, [r3, #1]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d018      	beq.n	800b3c6 <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7ff ff14 	bl	800b1cc <ndefPollerWriteBytes>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800b3a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800b3b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3b8:	e06c      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 800b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	4413      	add	r3, r2
 800b3c4:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	789b      	ldrb	r3, [r3, #2]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d018      	beq.n	800b400 <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	789b      	ldrb	r3, [r3, #2]
 800b3d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7ff fef7 	bl	800b1cc <ndefPollerWriteBytes>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800b3e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800b3f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3f2:	e04f      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f6:	789b      	ldrb	r3, [r3, #2]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	4413      	add	r3, r2
 800b3fe:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 800b400:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b402:	f7fd fe5a 	bl	80090ba <ndefRecordGetPayloadLength>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d026      	beq.n	800b45a <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 800b40c:	2301      	movs	r3, #1
 800b40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800b412:	e017      	b.n	800b444 <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 800b414:	2300      	movs	r3, #0
 800b416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff fed3 	bl	800b1cc <ndefPollerWriteBytes>
 800b426:	4603      	mov	r3, r0
 800b428:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 800b42a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d005      	beq.n	800b43c <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 800b438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b43a:	e02b      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b440:	4413      	add	r3, r2
 800b442:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800b444:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	4619      	mov	r1, r3
 800b44e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b450:	f7fd fe56 	bl	8009100 <ndefRecordGetPayloadItem>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1dc      	bne.n	800b414 <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <ndefPollerWriteMessage+0x1aa>
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	e000      	b.n	800b468 <ndefPollerWriteMessage+0x1ac>
 800b466:	2300      	movs	r3, #0
 800b468:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f47f af71 	bne.w	800b354 <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff ff03 	bl	800b282 <ndefPollerEndWriteMessage>
 800b47c:	4603      	mov	r3, r0
 800b47e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 800b480:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d005      	beq.n	800b492 <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 800b48e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b490:	e000      	b.n	800b494 <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3738      	adds	r7, #56	; 0x38
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
 800b4ae:	e032      	b.n	800b516 <ndefPollerGetDeviceType+0x7a>
    }
    else
    {
        switch( dev->type )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d82b      	bhi.n	800b510 <ndefPollerGetDeviceType+0x74>
 800b4b8:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <ndefPollerGetDeviceType+0x24>)
 800b4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4be:	bf00      	nop
 800b4c0:	0800b4d1 	.word	0x0800b4d1
 800b4c4:	0800b4ff 	.word	0x0800b4ff
 800b4c8:	0800b505 	.word	0x0800b505
 800b4cc:	0800b50b 	.word	0x0800b50b
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d00b      	beq.n	800b4f0 <ndefPollerGetDeviceType+0x54>
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	dc0c      	bgt.n	800b4f6 <ndefPollerGetDeviceType+0x5a>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d004      	beq.n	800b4ea <ndefPollerGetDeviceType+0x4e>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d108      	bne.n	800b4f6 <ndefPollerGetDeviceType+0x5a>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	73fb      	strb	r3, [r7, #15]
                    break; 
 800b4e8:	e008      	b.n	800b4fc <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	73fb      	strb	r3, [r7, #15]
                    break;
 800b4ee:	e005      	b.n	800b4fc <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	73fb      	strb	r3, [r7, #15]
                    break;
 800b4f4:	e002      	b.n	800b4fc <ndefPollerGetDeviceType+0x60>
                default:
                    type = NDEF_DEV_NONE;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	73fb      	strb	r3, [r7, #15]
                    break;
 800b4fa:	bf00      	nop
            }
            break;
 800b4fc:	e00b      	b.n	800b516 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 800b4fe:	2304      	movs	r3, #4
 800b500:	73fb      	strb	r3, [r7, #15]
            break;
 800b502:	e008      	b.n	800b516 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 800b504:	2303      	movs	r3, #3
 800b506:	73fb      	strb	r3, [r7, #15]
            break;
 800b508:	e005      	b.n	800b516 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 800b50a:	2305      	movs	r3, #5
 800b50c:	73fb      	strb	r3, [r7, #15]
            break;
 800b50e:	e002      	b.n	800b516 <ndefPollerGetDeviceType+0x7a>
        default:
            type = NDEF_DEV_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
            break;
 800b514:	bf00      	nop
        }
    }
    return type;
 800b516:	7bfb      	ldrb	r3, [r7, #15]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop

0800b524 <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	460b      	mov	r3, r1
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <ndefT2TPollerReadBlock+0x2a>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <ndefT2TPollerReadBlock+0x2a>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <ndefT2TPollerReadBlock+0x2a>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 800b54e:	2307      	movs	r3, #7
 800b550:	e02c      	b.n	800b5ac <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800b552:	897b      	ldrh	r3, [r7, #10]
 800b554:	0a1b      	lsrs	r3, r3, #8
 800b556:	b29b      	uxth	r3, r3
 800b558:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800b55a:	897b      	ldrh	r3, [r7, #10]
 800b55c:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b564:	7dfa      	ldrb	r2, [r7, #23]
 800b566:	429a      	cmp	r2, r3
 800b568:	d00e      	beq.n	800b588 <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f00f fbeb 	bl	801ad48 <rfalT2TPollerSectorSelect>
 800b572:	4603      	mov	r3, r0
 800b574:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800b576:	8abb      	ldrh	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 800b57c:	8abb      	ldrh	r3, [r7, #20]
 800b57e:	e015      	b.n	800b5ac <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	7dfa      	ldrb	r2, [r7, #23]
 800b584:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 800b588:	f107 0312 	add.w	r3, r7, #18
 800b58c:	7db8      	ldrb	r0, [r7, #22]
 800b58e:	2210      	movs	r2, #16
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	f00f fb65 	bl	801ac60 <rfalT2TPollerRead>
 800b596:	4603      	mov	r3, r0
 800b598:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 800b59a:	8abb      	ldrh	r3, [r7, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <ndefT2TPollerReadBlock+0x86>
 800b5a0:	8a7b      	ldrh	r3, [r7, #18]
 800b5a2:	2b10      	cmp	r3, #16
 800b5a4:	d001      	beq.n	800b5aa <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 800b5a6:	230b      	movs	r3, #11
 800b5a8:	e000      	b.n	800b5ac <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 800b5aa:	8abb      	ldrh	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <ndefT2TPollerReadBytes+0x3e>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <ndefT2TPollerReadBytes+0x3e>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	785b      	ldrb	r3, [r3, #1]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <ndefT2TPollerReadBytes+0x3e>
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <ndefT2TPollerReadBytes+0x3e>
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 800b5f0:	d901      	bls.n	800b5f6 <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800b5f2:	2307      	movs	r3, #7
 800b5f4:	e0a7      	b.n	800b746 <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d31e      	bcc.n	800b640 <ndefT2TPollerReadBytes+0x8c>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b608:	3310      	adds	r3, #16
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d217      	bcs.n	800b640 <ndefT2TPollerReadBytes+0x8c>
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	441a      	add	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b61c:	3310      	adds	r3, #16
 800b61e:	429a      	cmp	r2, r3
 800b620:	d20e      	bcs.n	800b640 <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	33b0      	adds	r3, #176	; 0xb0
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	4413      	add	r3, r2
 800b632:	3305      	adds	r3, #5
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4619      	mov	r1, r3
 800b638:	69b8      	ldr	r0, [r7, #24]
 800b63a:	f00f fed7 	bl	801b3ec <memcpy>
 800b63e:	e07b      	b.n	800b738 <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	089b      	lsrs	r3, r3, #2
 800b644:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d802      	bhi.n	800b65c <ndefT2TPollerReadBytes+0xa8>
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	e000      	b.n	800b65e <ndefT2TPollerReadBytes+0xaa>
 800b65c:	2310      	movs	r3, #16
 800b65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 800b662:	7d7b      	ldrb	r3, [r7, #21]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <ndefT2TPollerReadBytes+0xba>
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	2b0f      	cmp	r3, #15
 800b66c:	d834      	bhi.n	800b6d8 <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800b674:	8afb      	ldrh	r3, [r7, #22]
 800b676:	4619      	mov	r1, r3
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff ff53 	bl	800b524 <ndefT2TPollerReadBlock>
 800b67e:	4603      	mov	r3, r0
 800b680:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800b682:	8a7b      	ldrh	r3, [r7, #18]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d006      	beq.n	800b696 <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 800b692:	8a7b      	ldrh	r3, [r7, #18]
 800b694:	e057      	b.n	800b746 <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800b696:	8afb      	ldrh	r3, [r7, #22]
 800b698:	009a      	lsls	r2, r3, #2
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 800b6a0:	7d7b      	ldrb	r3, [r7, #21]
 800b6a2:	f1c3 0210 	rsb	r2, r3, #16
 800b6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d204      	bcs.n	800b6b8 <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 800b6ae:	7d7b      	ldrb	r3, [r7, #21]
 800b6b0:	f1c3 0310 	rsb	r3, r3, #16
 800b6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 800b6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d029      	beq.n	800b714 <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 800b6c0:	7d7b      	ldrb	r3, [r7, #21]
 800b6c2:	33b0      	adds	r3, #176	; 0xb0
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3305      	adds	r3, #5
 800b6ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	69b8      	ldr	r0, [r7, #24]
 800b6d2:	f00f fe8b 	bl	801b3ec <memcpy>
                if( le > 0U)
 800b6d6:	e01d      	b.n	800b714 <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 800b6d8:	8afb      	ldrh	r3, [r7, #22]
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff ff20 	bl	800b524 <ndefT2TPollerReadBlock>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800b6e8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 800b6ee:	8a7b      	ldrh	r3, [r7, #18]
 800b6f0:	e029      	b.n	800b746 <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 800b6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d10b      	bne.n	800b714 <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	33b5      	adds	r3, #181	; 0xb5
 800b700:	2210      	movs	r2, #16
 800b702:	69b9      	ldr	r1, [r7, #24]
 800b704:	4618      	mov	r0, r3
 800b706:	f00f fe71 	bl	801b3ec <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800b70a:	8afb      	ldrh	r3, [r7, #22]
 800b70c:	009a      	lsls	r2, r3, #2
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 800b714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	4413      	add	r3, r2
 800b71c:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 800b71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b722:	6a3a      	ldr	r2, [r7, #32]
 800b724:	4413      	add	r3, r2
 800b726:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 800b728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d183      	bne.n	800b640 <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3728      	adds	r7, #40	; 0x28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <ndefT2TPollerContextInitialization+0x26>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d007      	beq.n	800b774 <ndefT2TPollerContextInitialization+0x26>
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d103      	bne.n	800b774 <ndefT2TPollerContextInitialization+0x26>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 800b774:	2307      	movs	r3, #7
 800b776:	e013      	b.n	800b7a0 <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2278      	movs	r2, #120	; 0x78
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	4618      	mov	r0, r3
 800b780:	f00f fe34 	bl	801b3ec <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d011      	beq.n	800b7dc <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d007      	beq.n	800b7f2 <ndefT2TPollerNdefDetect+0x4a>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <ndefT2TPollerNdefDetect+0x4a>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800b7f2:	2307      	movs	r3, #7
 800b7f4:	e134      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
    }

    ctx->state = NDEF_STATE_INVALID;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	339c      	adds	r3, #156	; 0x9c
 800b802:	2200      	movs	r2, #0
 800b804:	9200      	str	r2, [sp, #0]
 800b806:	2204      	movs	r2, #4
 800b808:	210c      	movs	r1, #12
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fed2 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800b810:	4603      	mov	r3, r0
 800b812:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 800b814:	8a3b      	ldrh	r3, [r7, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <ndefT2TPollerNdefDetect+0x76>
    {
        /* Conclude procedure */
        return ret;
 800b81a:	8a3b      	ldrh	r3, [r7, #16]
 800b81c:	e120      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	b2da      	uxtb	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	b2da      	uxtb	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b85e:	091b      	lsrs	r3, r3, #4
 800b860:	b2da      	uxtb	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	b2da      	uxtb	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b880:	00da      	lsls	r2, r3, #3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b88e:	2be1      	cmp	r3, #225	; 0xe1
 800b890:	d104      	bne.n	800b89c <ndefT2TPollerNdefDetect+0xf4>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d901      	bls.n	800b8a0 <ndefT2TPollerNdefDetect+0xf8>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 800b89c:	2305      	movs	r3, #5
 800b89e:	e0df      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800b8a4:	e0d1      	b.n	800ba4a <ndefT2TPollerNdefDetect+0x2a2>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800b8a6:	f107 030c 	add.w	r3, r7, #12
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	9200      	str	r2, [sp, #0]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	6979      	ldr	r1, [r7, #20]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff fe7e 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800b8bc:	8a3b      	ldrh	r3, [r7, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <ndefT2TPollerNdefDetect+0x11e>
        {
            /* Conclude procedure */
            return ret;
 800b8c2:	8a3b      	ldrh	r3, [r7, #16]
 800b8c4:	e0cc      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
        }
        typeTLV = data[0];
 800b8c6:	7b3b      	ldrb	r3, [r7, #12]
 800b8c8:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d103      	bne.n	800b8d8 <ndefT2TPollerNdefDetect+0x130>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	2bfe      	cmp	r3, #254	; 0xfe
 800b8e2:	f000 80bb 	beq.w	800ba5c <ndefT2TPollerNdefDetect+0x2b4>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d100      	bne.n	800b8ee <ndefT2TPollerNdefDetect+0x146>
        {
            continue;
 800b8ec:	e0ad      	b.n	800ba4a <ndefT2TPollerNdefDetect+0x2a2>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800b8ee:	f107 030c 	add.w	r3, r7, #12
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	9200      	str	r2, [sp, #0]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	6979      	ldr	r1, [r7, #20]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff fe5a 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800b900:	4603      	mov	r3, r0
 800b902:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800b904:	8a3b      	ldrh	r3, [r7, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <ndefT2TPollerNdefDetect+0x166>
        {
            /* Conclude procedure */
            return ret;
 800b90a:	8a3b      	ldrh	r3, [r7, #16]
 800b90c:	e0a8      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset++;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	3301      	adds	r3, #1
 800b912:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 800b914:	7b3b      	ldrb	r3, [r7, #12]
 800b916:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 800b918:	8a7b      	ldrh	r3, [r7, #18]
 800b91a:	2bff      	cmp	r3, #255	; 0xff
 800b91c:	d11d      	bne.n	800b95a <ndefT2TPollerNdefDetect+0x1b2>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 800b91e:	f107 030c 	add.w	r3, r7, #12
 800b922:	2200      	movs	r2, #0
 800b924:	9200      	str	r2, [sp, #0]
 800b926:	2202      	movs	r2, #2
 800b928:	6979      	ldr	r1, [r7, #20]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fe42 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800b930:	4603      	mov	r3, r0
 800b932:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 800b934:	8a3b      	ldrh	r3, [r7, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <ndefT2TPollerNdefDetect+0x196>
            {
                /* Conclude procedure */
                return ret;
 800b93a:	8a3b      	ldrh	r3, [r7, #16]
 800b93c:	e090      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
            }
            offset += 2U;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	3302      	adds	r3, #2
 800b942:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 800b944:	7b3b      	ldrb	r3, [r7, #12]
 800b946:	021b      	lsls	r3, r3, #8
 800b948:	b21a      	sxth	r2, r3
 800b94a:	f107 030c 	add.w	r3, r7, #12
 800b94e:	3301      	adds	r3, #1
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	b21b      	sxth	r3, r3
 800b954:	4313      	orrs	r3, r2
 800b956:	b21b      	sxth	r3, r3
 800b958:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d002      	beq.n	800b966 <ndefT2TPollerNdefDetect+0x1be>
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d101      	bne.n	800b96a <ndefT2TPollerNdefDetect+0x1c2>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 800b966:	2305      	movs	r3, #5
 800b968:	e07a      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d168      	bne.n	800ba42 <ndefT2TPollerNdefDetect+0x29a>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 800b970:	8a7a      	ldrh	r2, [r7, #18]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b986:	2b00      	cmp	r3, #0
 800b988:	d110      	bne.n	800b9ac <ndefT2TPollerNdefDetect+0x204>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b990:	2b00      	cmp	r3, #0
 800b992:	d104      	bne.n	800b99e <ndefT2TPollerNdefDetect+0x1f6>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <ndefT2TPollerNdefDetect+0x1fa>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 800b99e:	2305      	movs	r3, #5
 800b9a0:	e05e      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b9aa:	e01e      	b.n	800b9ea <ndefT2TPollerNdefDetect+0x242>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d109      	bne.n	800b9ca <ndefT2TPollerNdefDetect+0x222>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <ndefT2TPollerNdefDetect+0x222>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b9c8:	e00f      	b.n	800b9ea <ndefT2TPollerNdefDetect+0x242>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d104      	bne.n	800b9de <ndefT2TPollerNdefDetect+0x236>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9da:	2b0f      	cmp	r3, #15
 800b9dc:	d001      	beq.n	800b9e2 <ndefT2TPollerNdefDetect+0x23a>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 800b9de:	2305      	movs	r3, #5
 800b9e0:	e03e      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d026      	beq.n	800ba3e <ndefT2TPollerNdefDetect+0x296>
            {
                info->state                = ctx->state;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ba00:	091b      	lsrs	r3, r3, #4
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba2e:	1ad2      	subs	r2, r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e00e      	b.n	800ba60 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset += lenTLV;
 800ba42:	8a7b      	ldrh	r3, [r7, #18]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	4413      	add	r3, r2
 800ba48:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba50:	3310      	adds	r3, #16
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	f4ff af26 	bcc.w	800b8a6 <ndefT2TPollerNdefDetect+0xfe>
 800ba5a:	e000      	b.n	800ba5e <ndefT2TPollerNdefDetect+0x2b6>
            break;
 800ba5c:	bf00      	nop
    }
    return ERR_REQUEST;
 800ba5e:	2305      	movs	r3, #5
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af02      	add	r7, sp, #8
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <ndefT2TPollerReadRawMessage+0x2a>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <ndefT2TPollerReadRawMessage+0x2a>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <ndefT2TPollerReadRawMessage+0x2a>
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 800ba92:	2307      	movs	r3, #7
 800ba94:	e024      	b.n	800bae0 <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d801      	bhi.n	800baa4 <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800baa0:	2321      	movs	r3, #33	; 0x21
 800baa2:	e01d      	b.n	800bae0 <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d201      	bcs.n	800bab4 <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e015      	b.n	800bae0 <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f7ff fd74 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800bacc:	4603      	mov	r3, r0
 800bace:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bad0:	8afb      	ldrh	r3, [r7, #22]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800bade:	8afb      	ldrh	r3, [r7, #22]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	460b      	mov	r3, r1
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <ndefT2TPollerWriteBlock+0x2a>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <ndefT2TPollerWriteBlock+0x2a>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	785b      	ldrb	r3, [r3, #1]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <ndefT2TPollerWriteBlock+0x2a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 800bb12:	2307      	movs	r3, #7
 800bb14:	e022      	b.n	800bb5c <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800bb16:	897b      	ldrh	r3, [r7, #10]
 800bb18:	0a1b      	lsrs	r3, r3, #8
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800bb1e:	897b      	ldrh	r3, [r7, #10]
 800bb20:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800bb28:	7dfa      	ldrb	r2, [r7, #23]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d00e      	beq.n	800bb4c <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f00f f909 	bl	801ad48 <rfalT2TPollerSectorSelect>
 800bb36:	4603      	mov	r3, r0
 800bb38:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800bb3a:	8abb      	ldrh	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 800bb40:	8abb      	ldrh	r3, [r7, #20]
 800bb42:	e00b      	b.n	800bb5c <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	7dfa      	ldrb	r2, [r7, #23]
 800bb48:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 800bb4c:	7dbb      	ldrb	r3, [r7, #22]
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f00f f8c1 	bl	801acd8 <rfalT2TPollerWrite>
 800bb56:	4603      	mov	r3, r0
 800bb58:	82bb      	strh	r3, [r7, #20]

    return ret;
 800bb5a:	8abb      	ldrh	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00a      	beq.n	800bb9a <ndefT2TPollerWriteBytes+0x36>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d106      	bne.n	800bb9a <ndefT2TPollerWriteBytes+0x36>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	785b      	ldrb	r3, [r3, #1]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <ndefT2TPollerWriteBytes+0x36>
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 800bb9a:	2307      	movs	r3, #7
 800bb9c:	e076      	b.n	800bc8c <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295
 800bba4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbaa:	089b      	lsrs	r3, r3, #2
 800bbac:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d802      	bhi.n	800bbc6 <ndefT2TPollerWriteBytes+0x62>
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	e000      	b.n	800bbc8 <ndefT2TPollerWriteBytes+0x64>
 800bbc6:	2304      	movs	r3, #4
 800bbc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 800bbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <ndefT2TPollerWriteBytes+0x76>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d838      	bhi.n	800bc4c <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 800bbda:	f107 0214 	add.w	r2, r7, #20
 800bbde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7ff fc9e 	bl	800b524 <ndefT2TPollerReadBlock>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bbec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 800bbf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbf4:	e04a      	b.n	800bc8c <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800bbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbfa:	f1c3 0204 	rsb	r2, r3, #4
 800bbfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d205      	bcs.n	800bc12 <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800bc06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc0a:	f1c3 0304 	rsb	r3, r3, #4
 800bc0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 800bc12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 800bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1e:	f107 0214 	add.w	r2, r7, #20
 800bc22:	4413      	add	r3, r2
 800bc24:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bc28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f00f fbde 	bl	801b3ec <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 800bc30:	f107 0214 	add.w	r2, r7, #20
 800bc34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc36:	4619      	mov	r1, r3
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7ff ff55 	bl	800bae8 <ndefT2TPollerWriteBlock>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bc42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00e      	beq.n	800bc66 <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800bc48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc4a:	e01f      	b.n	800bc8c <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 800bc4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc50:	4619      	mov	r1, r3
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f7ff ff48 	bl	800bae8 <ndefT2TPollerWriteBlock>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800bc5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800bc62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc64:	e012      	b.n	800bc8c <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 800bc66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc6c:	4413      	add	r3, r2
 800bc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 800bc70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc76:	4413      	add	r3, r2
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 800bc7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d18e      	bne.n	800bba8 <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3738      	adds	r7, #56	; 0x38
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d007      	beq.n	800bcb4 <ndefT2TPollerWriteRawMessageLen+0x20>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <ndefT2TPollerWriteRawMessageLen+0x20>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 800bcb4:	2307      	movs	r3, #7
 800bcb6:	e077      	b.n	800bda8 <ndefT2TPollerWriteRawMessageLen+0x114>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d006      	beq.n	800bcd0 <ndefT2TPollerWriteRawMessageLen+0x3c>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d001      	beq.n	800bcd0 <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 800bccc:	2321      	movs	r3, #33	; 0x21
 800bcce:	e06b      	b.n	800bda8 <ndefT2TPollerWriteRawMessageLen+0x114>
    }
    dataIt = 0U;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	3310      	adds	r3, #16
 800bcd8:	443b      	add	r3, r7
 800bcda:	2203      	movs	r2, #3
 800bcdc:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	3301      	adds	r3, #1
 800bce4:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2bfe      	cmp	r3, #254	; 0xfe
 800bcea:	d80a      	bhi.n	800bd02 <ndefT2TPollerWriteRawMessageLen+0x6e>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	3310      	adds	r3, #16
 800bcf4:	443b      	add	r3, r7
 800bcf6:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	73fb      	strb	r3, [r7, #15]
 800bd00:	e014      	b.n	800bd2c <ndefT2TPollerWriteRawMessageLen+0x98>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	0a1a      	lsrs	r2, r3, #8
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	3310      	adds	r3, #16
 800bd0c:	443b      	add	r3, r7
 800bd0e:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	3301      	adds	r3, #1
 800bd16:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	3310      	adds	r3, #16
 800bd20:	443b      	add	r3, r7
 800bd22:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bd26:	7bfb      	ldrb	r3, [r7, #15]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d108      	bne.n	800bd44 <ndefT2TPollerWriteRawMessageLen+0xb0>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	3310      	adds	r3, #16
 800bd36:	443b      	add	r3, r7
 800bd38:	22fe      	movs	r2, #254	; 0xfe
 800bd3a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	3301      	adds	r3, #1
 800bd42:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	f107 0208 	add.w	r2, r7, #8
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ff07 	bl	800bb64 <ndefT2TPollerWriteBytes>
 800bd56:	4603      	mov	r3, r0
 800bd58:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 800bd5a:	89bb      	ldrh	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d022      	beq.n	800bda6 <ndefT2TPollerWriteRawMessageLen+0x112>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d01f      	beq.n	800bda6 <ndefT2TPollerWriteRawMessageLen+0x112>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	441a      	add	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d215      	bcs.n	800bda6 <ndefT2TPollerWriteRawMessageLen+0x112>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	3310      	adds	r3, #16
 800bd82:	443b      	add	r3, r7
 800bd84:	22fe      	movs	r2, #254	; 0xfe
 800bd86:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	18d1      	adds	r1, r2, r3
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
 800bd9c:	f107 0208 	add.w	r2, r7, #8
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff fedf 	bl	800bb64 <ndefT2TPollerWriteBytes>
    }

    return ret;
 800bda6:	89bb      	ldrh	r3, [r7, #12]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00d      	beq.n	800bdde <ndefT2TPollerWriteRawMessage+0x2e>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d109      	bne.n	800bdde <ndefT2TPollerWriteRawMessage+0x2e>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	785b      	ldrb	r3, [r3, #1]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d105      	bne.n	800bdde <ndefT2TPollerWriteRawMessage+0x2e>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <ndefT2TPollerWriteRawMessage+0x32>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 800bdde:	2307      	movs	r3, #7
 800bde0:	e04b      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d006      	beq.n	800bdfa <ndefT2TPollerWriteRawMessage+0x4a>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d001      	beq.n	800bdfa <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800bdf6:	2321      	movs	r3, #33	; 0x21
 800bdf8:	e03f      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 f92c 	bl	800c05a <ndefT2TPollerCheckAvailableSpace>
 800be02:	4603      	mov	r3, r0
 800be04:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800be06:	8afb      	ldrh	r3, [r7, #22]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800be0c:	2307      	movs	r3, #7
 800be0e:	e034      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f000 f957 	bl	800c0c6 <ndefT2TPollerBeginWriteMessage>
 800be18:	4603      	mov	r3, r0
 800be1a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800be1c:	8afb      	ldrh	r3, [r7, #22]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800be2a:	8afb      	ldrh	r3, [r7, #22]
 800be2c:	e025      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d021      	beq.n	800be78 <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff fe90 	bl	800bb64 <ndefT2TPollerWriteBytes>
 800be44:	4603      	mov	r3, r0
 800be46:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800be48:	8afb      	ldrh	r3, [r7, #22]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800be56:	8afb      	ldrh	r3, [r7, #22]
 800be58:	e00f      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f984 	bl	800c16a <ndefT2TPollerEndWriteMessage>
 800be62:	4603      	mov	r3, r0
 800be64:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800be66:	8afb      	ldrh	r3, [r7, #22]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d005      	beq.n	800be78 <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800be74:	8afb      	ldrh	r3, [r7, #22]
 800be76:	e000      	b.n	800be7a <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 800be78:	8afb      	ldrh	r3, [r7, #22]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d007      	beq.n	800bea6 <ndefT2TPollerTagFormat+0x22>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d103      	bne.n	800bea6 <ndefT2TPollerTagFormat+0x22>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	785b      	ldrb	r3, [r3, #1]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800bea6:	2307      	movs	r3, #7
 800bea8:	e0a0      	b.n	800bfec <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	339c      	adds	r3, #156	; 0x9c
 800beae:	2200      	movs	r2, #0
 800beb0:	9200      	str	r2, [sp, #0]
 800beb2:	2204      	movs	r2, #4
 800beb4:	210c      	movs	r1, #12
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fb7c 	bl	800b5b4 <ndefT2TPollerReadBytes>
 800bebc:	4603      	mov	r3, r0
 800bebe:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800bec0:	8afb      	ldrh	r3, [r7, #22]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <ndefT2TPollerTagFormat+0x46>
    {
        return ret;
 800bec6:	8afb      	ldrh	r3, [r7, #22]
 800bec8:	e090      	b.n	800bfec <ndefT2TPollerTagFormat+0x168>
    }

    ndefT2TInvalidateCache(ctx);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d17e      	bne.n	800bfdc <ndefT2TPollerTagFormat+0x158>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d179      	bne.n	800bfdc <ndefT2TPollerTagFormat+0x158>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d174      	bne.n	800bfdc <ndefT2TPollerTagFormat+0x158>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d16f      	bne.n	800bfdc <ndefT2TPollerTagFormat+0x158>
    {
        dataIt = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d124      	bne.n	800bf50 <ndefT2TPollerTagFormat+0xcc>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800bf06:	7d7b      	ldrb	r3, [r7, #21]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	22e1      	movs	r2, #225	; 0xe1
 800bf0e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf12:	7d7b      	ldrb	r3, [r7, #21]
 800bf14:	3301      	adds	r3, #1
 800bf16:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800bf18:	7d7b      	ldrb	r3, [r7, #21]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	2210      	movs	r2, #16
 800bf20:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf24:	7d7b      	ldrb	r3, [r7, #21]
 800bf26:	3301      	adds	r3, #1
 800bf28:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800bf2a:	7d7b      	ldrb	r3, [r7, #21]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	2206      	movs	r2, #6
 800bf32:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf36:	7d7b      	ldrb	r3, [r7, #21]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 800bf3c:	7d7b      	ldrb	r3, [r7, #21]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4413      	add	r3, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf48:	7d7b      	ldrb	r3, [r7, #21]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	757b      	strb	r3, [r7, #21]
 800bf4e:	e037      	b.n	800bfc0 <ndefT2TPollerTagFormat+0x13c>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 800bf50:	7d7b      	ldrb	r3, [r7, #21]
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	7811      	ldrb	r1, [r2, #0]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	460a      	mov	r2, r1
 800bf5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf60:	7d7b      	ldrb	r3, [r7, #21]
 800bf62:	3301      	adds	r3, #1
 800bf64:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	b2d9      	uxtb	r1, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	789a      	ldrb	r2, [r3, #2]
 800bf72:	7d7b      	ldrb	r3, [r7, #21]
 800bf74:	430a      	orrs	r2, r1
 800bf76:	b2d1      	uxtb	r1, r2
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	460a      	mov	r2, r1
 800bf7e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf82:	7d7b      	ldrb	r3, [r7, #21]
 800bf84:	3301      	adds	r3, #1
 800bf86:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 800bf88:	7d7b      	ldrb	r3, [r7, #21]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	78d1      	ldrb	r1, [r2, #3]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4413      	add	r3, r2
 800bf92:	460a      	mov	r2, r1
 800bf94:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bf98:	7d7b      	ldrb	r3, [r7, #21]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	b2d9      	uxtb	r1, r3
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	795a      	ldrb	r2, [r3, #5]
 800bfaa:	7d7b      	ldrb	r3, [r7, #21]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	b2d1      	uxtb	r1, r2
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	460a      	mov	r2, r1
 800bfb6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800bfba:	7d7b      	ldrb	r3, [r7, #21]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	339c      	adds	r3, #156	; 0x9c
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	2103      	movs	r1, #3
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f7ff fd8d 	bl	800bae8 <ndefT2TPollerWriteBlock>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800bfd2:	8afb      	ldrh	r3, [r7, #22]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <ndefT2TPollerTagFormat+0x158>
        {
            return ret;
 800bfd8:	8afb      	ldrh	r3, [r7, #22]
 800bfda:	e007      	b.n	800bfec <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 800bfdc:	4a05      	ldr	r2, [pc, #20]	; (800bff4 <ndefT2TPollerTagFormat+0x170>)
 800bfde:	2104      	movs	r1, #4
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f7ff fd81 	bl	800bae8 <ndefT2TPollerWriteBlock>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	82fb      	strh	r3, [r7, #22]

    return ret;
 800bfea:	8afb      	ldrh	r3, [r7, #22]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	0801d55c 	.word	0x0801d55c

0800bff8 <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <ndefT2TPollerCheckPresence+0x1e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d103      	bne.n	800c016 <ndefT2TPollerCheckPresence+0x1e>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	785b      	ldrb	r3, [r3, #1]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800c016:	2307      	movs	r3, #7
 800c018:	e01b      	b.n	800c052 <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800c024:	89fb      	ldrh	r3, [r7, #14]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7ff fa7b 	bl	800b524 <ndefT2TPollerReadBlock>
 800c02e:	4603      	mov	r3, r0
 800c030:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 800c032:	89bb      	ldrh	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d006      	beq.n	800c046 <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 800c042:	89bb      	ldrh	r3, [r7, #12]
 800c044:	e005      	b.n	800c052 <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800c046:	89fb      	ldrh	r3, [r7, #14]
 800c048:	009a      	lsls	r2, r3, #2
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b085      	sub	sp, #20
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <ndefT2TPollerCheckAvailableSpace+0x20>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d103      	bne.n	800c07a <ndefT2TPollerCheckAvailableSpace+0x20>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 800c07a:	2307      	movs	r3, #7
 800c07c:	e01e      	b.n	800c0bc <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 800c088:	2321      	movs	r3, #33	; 0x21
 800c08a:	e017      	b.n	800c0bc <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2bfe      	cmp	r3, #254	; 0xfe
 800c090:	d901      	bls.n	800c096 <ndefT2TPollerCheckAvailableSpace+0x3c>
 800c092:	2303      	movs	r3, #3
 800c094:	e000      	b.n	800c098 <ndefT2TPollerCheckAvailableSpace+0x3e>
 800c096:	2301      	movs	r3, #1
 800c098:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	441a      	add	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d901      	bls.n	800c0ba <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bc80      	pop	{r7}
 800c0c4:	4770      	bx	lr

0800c0c6 <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d007      	beq.n	800c0e6 <ndefT2TPollerBeginWriteMessage+0x20>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d103      	bne.n	800c0e6 <ndefT2TPollerBeginWriteMessage+0x20>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	785b      	ldrb	r3, [r3, #1]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 800c0e6:	2307      	movs	r3, #7
 800c0e8:	e03b      	b.n	800c162 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d006      	beq.n	800c102 <ndefT2TPollerBeginWriteMessage+0x3c>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d001      	beq.n	800c102 <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 800c0fe:	2321      	movs	r3, #33	; 0x21
 800c100:	e02f      	b.n	800c162 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 800c102:	2100      	movs	r1, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff fdc5 	bl	800bc94 <ndefT2TPollerWriteRawMessageLen>
 800c10a:	4603      	mov	r3, r0
 800c10c:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800c10e:	89fb      	ldrh	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800c11c:	89fb      	ldrh	r3, [r7, #14]
 800c11e:	e020      	b.n	800c162 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2bfe      	cmp	r3, #254	; 0xfe
 800c124:	d901      	bls.n	800c12a <ndefT2TPollerBeginWriteMessage+0x64>
 800c126:	2303      	movs	r3, #3
 800c128:	e000      	b.n	800c12c <ndefT2TPollerBeginWriteMessage+0x66>
 800c12a:	2301      	movs	r3, #1
 800c12c:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	441a      	add	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <ndefT2TPollerEndWriteMessage+0x20>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d103      	bne.n	800c18a <ndefT2TPollerEndWriteMessage+0x20>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	785b      	ldrb	r3, [r3, #1]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 800c18a:	2307      	movs	r3, #7
 800c18c:	e025      	b.n	800c1da <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c194:	2b01      	cmp	r3, #1
 800c196:	d001      	beq.n	800c19c <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800c198:	2321      	movs	r3, #33	; 0x21
 800c19a:	e01e      	b.n	800c1da <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff fd78 	bl	800bc94 <ndefT2TPollerWriteRawMessageLen>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800c1a8:	89fb      	ldrh	r3, [r7, #14]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d005      	beq.n	800c1ba <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800c1b6:	89fb      	ldrh	r3, [r7, #14]
 800c1b8:	e00f      	b.n	800c1da <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <ndefT2TPollerEndWriteMessage+0x66>
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	e000      	b.n	800c1d2 <ndefT2TPollerEndWriteMessage+0x68>
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b08e      	sub	sp, #56	; 0x38
 800c1e6:	af02      	add	r7, sp, #8
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	817b      	strh	r3, [r7, #10]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 800c1f8:	230b      	movs	r3, #11
 800c1fa:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <ndefT3TPollerReadBlocks+0x28>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b02      	cmp	r3, #2
 800c208:	d001      	beq.n	800c20e <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 800c20a:	2307      	movs	r3, #7
 800c20c:	e065      	b.n	800c2da <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 800c20e:	7a7b      	ldrb	r3, [r7, #9]
 800c210:	b29b      	uxth	r3, r3
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 800c216:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c218:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d201      	bcs.n	800c222 <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 800c21e:	2307      	movs	r3, #7
 800c220:	e05b      	b.n	800c2da <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c228:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 800c22a:	2300      	movs	r3, #0
 800c22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c230:	e017      	b.n	800c262 <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800c232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c23a:	4413      	add	r3, r2
 800c23c:	2280      	movs	r2, #128	; 0x80
 800c23e:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800c240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c244:	b299      	uxth	r1, r3
 800c246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c24e:	4413      	add	r3, r2
 800c250:	897a      	ldrh	r2, [r7, #10]
 800c252:	440a      	add	r2, r1
 800c254:	b292      	uxth	r2, r2
 800c256:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 800c258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c25c:	3301      	adds	r3, #1
 800c25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c262:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c266:	7a7b      	ldrb	r3, [r7, #9]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d3e2      	bcc.n	800c232 <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 800c26c:	2301      	movs	r3, #1
 800c26e:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800c270:	f107 0310 	add.w	r3, r7, #16
 800c274:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800c276:	7a7b      	ldrb	r3, [r7, #9]
 800c278:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1cd8      	adds	r0, r3, #3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c288:	f107 0114 	add.w	r1, r7, #20
 800c28c:	f107 0312 	add.w	r3, r7, #18
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	2350      	movs	r3, #80	; 0x50
 800c294:	f00a fb10 	bl	80168b8 <rfalNfcfPollerCheck>
 800c298:	4603      	mov	r3, r0
 800c29a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 800c29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 800c2a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2a4:	e019      	b.n	800c2da <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 800c2a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	8a7b      	ldrh	r3, [r7, #18]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d001      	beq.n	800c2b6 <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 800c2b2:	2305      	movs	r3, #5
 800c2b4:	e011      	b.n	800c2da <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 800c2b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00d      	beq.n	800c2d8 <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f203 1305 	addw	r3, r3, #261	; 0x105
 800c2c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f00f f890 	bl	801b3ec <memcpy>
        if (rcvLen != NULL)
 800c2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 800c2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c2d6:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3730      	adds	r7, #48	; 0x30
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800c2e2:	b590      	push	{r4, r7, lr}
 800c2e4:	b08f      	sub	sp, #60	; 0x3c
 800c2e6:	af02      	add	r7, sp, #8
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
 800c2ee:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800c300:	8bfb      	ldrh	r3, [r7, #30]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	fbb2 f3f3 	udiv	r3, r2, r3
 800c308:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800c30a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c30c:	8bfa      	ldrh	r2, [r7, #30]
 800c30e:	fb02 f303 	mul.w	r3, r2, r3
 800c312:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	b29a      	uxth	r2, r3
 800c318:	8bbb      	ldrh	r3, [r7, #28]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 800c31e:	2304      	movs	r3, #4
 800c320:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <ndefT3TPollerReadBytes+0x54>
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d102      	bne.n	800c336 <ndefT3TPollerReadBytes+0x54>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 800c336:	2307      	movs	r3, #7
 800c338:	e0e3      	b.n	800c502 <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800c34a:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 800c34c:	8b7b      	ldrh	r3, [r7, #26]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 808e 	beq.w	800c470 <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c35a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c35c:	f107 0316 	add.w	r3, r7, #22
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	8bfb      	ldrh	r3, [r7, #30]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	4613      	mov	r3, r2
 800c368:	2201      	movs	r2, #1
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ff39 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800c370:	4603      	mov	r3, r0
 800c372:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c374:	8b3b      	ldrh	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 800c37a:	8b3b      	ldrh	r3, [r7, #24]
 800c37c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c37e:	e077      	b.n	800c470 <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800c380:	8afb      	ldrh	r3, [r7, #22]
 800c382:	2b10      	cmp	r3, #16
 800c384:	d002      	beq.n	800c38c <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800c386:	230e      	movs	r3, #14
 800c388:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c38a:	e071      	b.n	800c470 <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 800c38c:	8afa      	ldrh	r2, [r7, #22]
 800c38e:	8b7b      	ldrh	r3, [r7, #26]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	b29b      	uxth	r3, r3
 800c394:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 800c396:	8afb      	ldrh	r3, [r7, #22]
 800c398:	461a      	mov	r2, r3
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d202      	bcs.n	800c3a6 <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 800c3a6:	8afb      	ldrh	r3, [r7, #22]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	8afa      	ldrh	r2, [r7, #22]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	6838      	ldr	r0, [r7, #0]
 800c3be:	f00f f815 	bl	801b3ec <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800c3c2:	8afb      	ldrh	r3, [r7, #22]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c8:	4413      	add	r3, r2
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 800c3cc:	8afb      	ldrh	r3, [r7, #22]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 800c3d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3d8:	3301      	adds	r3, #1
 800c3da:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800c3dc:	e048      	b.n	800c470 <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800c3de:	8bfb      	ldrh	r3, [r7, #30]
 800c3e0:	8c3a      	ldrh	r2, [r7, #32]
 800c3e2:	fb02 f303 	mul.w	r3, r2, r3
 800c3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d204      	bcs.n	800c3f6 <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 800c3ec:	8bfb      	ldrh	r3, [r7, #30]
 800c3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f4:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 800c3f6:	8c3b      	ldrh	r3, [r7, #32]
 800c3f8:	b2d8      	uxtb	r0, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800c400:	8bfb      	ldrh	r3, [r7, #30]
 800c402:	8c3a      	ldrh	r2, [r7, #32]
 800c404:	fb02 f303 	mul.w	r3, r2, r3
 800c408:	b29b      	uxth	r3, r3
 800c40a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c40c:	f107 0216 	add.w	r2, r7, #22
 800c410:	9201      	str	r2, [sp, #4]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4623      	mov	r3, r4
 800c416:	4602      	mov	r2, r0
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7ff fee2 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800c41e:	4603      	mov	r3, r0
 800c420:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c422:	8b3b      	ldrh	r3, [r7, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 800c428:	8b3b      	ldrh	r3, [r7, #24]
 800c42a:	e06a      	b.n	800c502 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 800c42c:	8afb      	ldrh	r3, [r7, #22]
 800c42e:	4619      	mov	r1, r3
 800c430:	8bfb      	ldrh	r3, [r7, #30]
 800c432:	8c3a      	ldrh	r2, [r7, #32]
 800c434:	fb02 f303 	mul.w	r3, r2, r3
 800c438:	4299      	cmp	r1, r3
 800c43a:	d001      	beq.n	800c440 <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800c43c:	230e      	movs	r3, #14
 800c43e:	e060      	b.n	800c502 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	18d0      	adds	r0, r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c44c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44e:	4619      	mov	r1, r3
 800c450:	f00e ffcc 	bl	801b3ec <memcpy>
            lvRcvLen   += nbRead;
 800c454:	8afb      	ldrh	r3, [r7, #22]
 800c456:	461a      	mov	r2, r3
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	4413      	add	r3, r2
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 800c45e:	8afb      	ldrh	r3, [r7, #22]
 800c460:	461a      	mov	r2, r3
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 800c468:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c46a:	8c3b      	ldrh	r3, [r7, #32]
 800c46c:	4413      	add	r3, r2
 800c46e:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800c470:	8bfb      	ldrh	r3, [r7, #30]
 800c472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c474:	429a      	cmp	r2, r3
 800c476:	d302      	bcc.n	800c47e <ndefT3TPollerReadBytes+0x19c>
 800c478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0af      	beq.n	800c3de <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	2b00      	cmp	r3, #0
 800c482:	d02f      	beq.n	800c4e4 <ndefT3TPollerReadBytes+0x202>
 800c484:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c486:	2b00      	cmp	r3, #0
 800c488:	d12c      	bne.n	800c4e4 <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800c490:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800c492:	f107 0316 	add.w	r3, r7, #22
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	8bfb      	ldrh	r3, [r7, #30]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	4613      	mov	r3, r2
 800c49e:	2201      	movs	r2, #1
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f7ff fe9e 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800c4aa:	8b3b      	ldrh	r3, [r7, #24]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 800c4b0:	8b3b      	ldrh	r3, [r7, #24]
 800c4b2:	e026      	b.n	800c502 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800c4b4:	8afb      	ldrh	r3, [r7, #22]
 800c4b6:	2b10      	cmp	r3, #16
 800c4b8:	d001      	beq.n	800c4be <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800c4ba:	230e      	movs	r3, #14
 800c4bc:	e021      	b.n	800c502 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	18d0      	adds	r0, r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	f00e ff8a 	bl	801b3ec <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 800c4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	4413      	add	r3, r2
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d104      	bne.n	800c4f4 <ndefT3TPollerReadBytes+0x212>
 800c4ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 800c4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4fe:	601a      	str	r2, [r3, #0]
    }
    return result;
 800c500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800c502:	4618      	mov	r0, r3
 800c504:	3734      	adds	r7, #52	; 0x34
 800c506:	46bd      	mov	sp, r7
 800c508:	bd90      	pop	{r4, r7, pc}

0800c50a <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b088      	sub	sp, #32
 800c50e:	af02      	add	r7, sp, #8
 800c510:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b02      	cmp	r3, #2
 800c526:	d001      	beq.n	800c52c <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 800c528:	2307      	movs	r3, #7
 800c52a:	e07d      	b.n	800c628 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	339c      	adds	r3, #156	; 0x9c
 800c530:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 800c532:	f107 030a 	add.w	r3, r7, #10
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	2310      	movs	r3, #16
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2201      	movs	r2, #1
 800c540:	2100      	movs	r1, #0
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fe4d 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800c548:	4603      	mov	r3, r0
 800c54a:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 800c54c:	89fb      	ldrh	r3, [r7, #14]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d004      	beq.n	800c55c <ndefT3TPollerReadAttributeInformationBlock+0x52>
 800c552:	897b      	ldrh	r3, [r7, #10]
 800c554:	2b10      	cmp	r3, #16
 800c556:	d001      	beq.n	800c55c <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 800c558:	89fb      	ldrh	r3, [r7, #14]
 800c55a:	e065      	b.n	800c628 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800c55c:	2300      	movs	r3, #0
 800c55e:	757b      	strb	r3, [r7, #21]
 800c560:	e00a      	b.n	800c578 <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 800c562:	7d7b      	ldrb	r3, [r7, #21]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	4413      	add	r3, r2
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	8afb      	ldrh	r3, [r7, #22]
 800c56e:	4413      	add	r3, r2
 800c570:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800c572:	7d7b      	ldrb	r3, [r7, #21]
 800c574:	3301      	adds	r3, #1
 800c576:	757b      	strb	r3, [r7, #21]
 800c578:	7d7b      	ldrb	r3, [r7, #21]
 800c57a:	2b0d      	cmp	r3, #13
 800c57c:	d9f1      	bls.n	800c562 <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	330e      	adds	r3, #14
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	b29b      	uxth	r3, r3
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	b29a      	uxth	r2, r3
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	330f      	adds	r3, #15
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b29b      	uxth	r3, r3
 800c592:	4413      	add	r3, r2
 800c594:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 800c596:	89ba      	ldrh	r2, [r7, #12]
 800c598:	8afb      	ldrh	r3, [r7, #22]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d001      	beq.n	800c5a2 <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 800c59e:	2305      	movs	r3, #5
 800c5a0:	e042      	b.n	800c628 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 030f 	and.w	r3, r3, #15
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	785a      	ldrb	r2, [r3, #1]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	789a      	ldrb	r2, [r3, #2]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	3303      	adds	r3, #3
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	021b      	lsls	r3, r3, #8
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4413      	add	r3, r2
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	7a5a      	ldrb	r2, [r3, #9]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	7a9a      	ldrb	r2, [r3, #10]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	330b      	adds	r3, #11
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	330c      	adds	r3, #12
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	021b      	lsls	r3, r3, #8
 800c616:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	320d      	adds	r2, #13
 800c61c:	7812      	ldrb	r2, [r2, #0]
 800c61e:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d006      	beq.n	800c64e <ndefT3TPollerContextInitialization+0x1e>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <ndefT3TPollerContextInitialization+0x1e>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d001      	beq.n	800c652 <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800c64e:	2307      	movs	r3, #7
 800c650:	e00a      	b.n	800c668 <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2278      	movs	r2, #120	; 0x78
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f00e fec7 	bl	801b3ec <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08c      	sub	sp, #48	; 0x30
 800c674:	af02      	add	r7, sp, #8
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800c67a:	2301      	movs	r3, #1
 800c67c:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d011      	beq.n	800c6ac <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2200      	movs	r2, #0
 800c68c:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2200      	movs	r2, #0
 800c698:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2200      	movs	r2, #0
 800c69e:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <ndefT3TPollerNdefDetect+0x4a>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d001      	beq.n	800c6be <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800c6ba:	2307      	movs	r3, #7
 800c6bc:	e087      	b.n	800c7ce <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 800c6c6:	f107 0210 	add.w	r2, r7, #16
 800c6ca:	f107 030e 	add.w	r3, r7, #14
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f107 030f 	add.w	r3, r7, #15
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f00a f83c 	bl	801675c <rfalNfcfPollerPoll>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800c6e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 800c6ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6f0:	e06d      	b.n	800c7ce <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	1cd9      	adds	r1, r3, #3
 800c6f6:	f107 0310 	add.w	r3, r7, #16
 800c6fa:	3302      	adds	r3, #2
 800c6fc:	2208      	movs	r2, #8
 800c6fe:	4618      	mov	r0, r3
 800c700:	f00e fe64 	bl	801b3cc <memcmp>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 800c70a:	2305      	movs	r3, #5
 800c70c:	e05f      	b.n	800c7ce <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fefb 	bl	800c50a <ndefT3TPollerReadAttributeInformationBlock>
 800c714:	4603      	mov	r3, r0
 800c716:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800c718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 800c71e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c720:	e055      	b.n	800c7ce <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d001      	beq.n	800c730 <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 800c72c:	2305      	movs	r3, #5
 800c72e:	e04e      	b.n	800c7ce <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2210      	movs	r2, #16
 800c740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800c74a:	011a      	lsls	r2, r3, #4
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c760:	2b00      	cmp	r3, #0
 800c762:	d012      	beq.n	800c78a <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d104      	bne.n	800c778 <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2202      	movs	r2, #2
 800c772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c776:	e008      	b.n	800c78a <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d103      	bne.n	800c78a <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2203      	movs	r2, #3
 800c786:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d01d      	beq.n	800c7cc <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b088      	sub	sp, #32
 800c7da:	af02      	add	r7, sp, #8
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d006      	beq.n	800c7f8 <ndefT3TPollerReadRawMessage+0x22>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d102      	bne.n	800c7f8 <ndefT3TPollerReadRawMessage+0x22>
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d101      	bne.n	800c7fc <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800c7f8:	2307      	movs	r3, #7
 800c7fa:	e02b      	b.n	800c854 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c802:	2b01      	cmp	r3, #1
 800c804:	d801      	bhi.n	800c80a <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800c806:	2321      	movs	r3, #33	; 0x21
 800c808:	e024      	b.n	800c854 <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c810:	2b0f      	cmp	r3, #15
 800c812:	d101      	bne.n	800c818 <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 800c814:	2321      	movs	r3, #33	; 0x21
 800c816:	e01d      	b.n	800c854 <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	429a      	cmp	r2, r3
 800c822:	d201      	bcs.n	800c828 <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 800c824:	2301      	movs	r3, #1
 800c826:	e015      	b.n	800c854 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fd51 	bl	800c2e2 <ndefT3TPollerReadBytes>
 800c840:	4603      	mov	r3, r0
 800c842:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800c844:	8afb      	ldrh	r3, [r7, #22]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800c852:	8afb      	ldrh	r3, [r7, #22]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 800c85c:	b590      	push	{r4, r7, lr}
 800c85e:	b091      	sub	sp, #68	; 0x44
 800c860:	af04      	add	r7, sp, #16
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	607b      	str	r3, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	817b      	strh	r3, [r7, #10]
 800c86a:	4613      	mov	r3, r2
 800c86c:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 800c86e:	2309      	movs	r3, #9
 800c870:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <ndefT3TPollerWriteBlocks+0x24>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d001      	beq.n	800c884 <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 800c880:	2307      	movs	r3, #7
 800c882:	e042      	b.n	800c90a <ndefT3TPollerWriteBlocks+0xae>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c88a:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c892:	e017      	b.n	800c8c4 <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800c894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c89c:	4413      	add	r3, r2
 800c89e:	2280      	movs	r2, #128	; 0x80
 800c8a0:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800c8a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8a6:	b299      	uxth	r1, r3
 800c8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b0:	4413      	add	r3, r2
 800c8b2:	897a      	ldrh	r2, [r7, #10]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	b292      	uxth	r2, r2
 800c8b8:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800c8ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8be:	3301      	adds	r3, #1
 800c8c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c8c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8c8:	7a7b      	ldrb	r3, [r7, #9]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d3e2      	bcc.n	800c894 <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800c8d2:	f107 0312 	add.w	r3, r7, #18
 800c8d6:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800c8d8:	7a7b      	ldrb	r3, [r7, #9]
 800c8da:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	1cd8      	adds	r0, r3, #3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c8f0:	f107 0114 	add.w	r1, r7, #20
 800c8f4:	2450      	movs	r4, #80	; 0x50
 800c8f6:	9402      	str	r4, [sp, #8]
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	2350      	movs	r3, #80	; 0x50
 800c900:	f00a f916 	bl	8016b30 <rfalNfcfPollerUpdate>
 800c904:	4603      	mov	r3, r0
 800c906:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800c908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3734      	adds	r7, #52	; 0x34
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd90      	pop	{r4, r7, pc}

0800c912 <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b092      	sub	sp, #72	; 0x48
 800c916:	af02      	add	r7, sp, #8
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 800c920:	2300      	movs	r3, #0
 800c922:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800c928:	2300      	movs	r3, #0
 800c92a:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 800c92c:	2310      	movs	r3, #16
 800c92e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 800c930:	2304      	movs	r3, #4
 800c932:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800c934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93c:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800c93e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c940:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c942:	fb02 f303 	mul.w	r3, r2, r3
 800c946:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d006      	beq.n	800c966 <ndefT3TPollerWriteBytes+0x54>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d102      	bne.n	800c966 <ndefT3TPollerWriteBytes+0x54>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d101      	bne.n	800c96a <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 800c966:	2307      	movs	r3, #7
 800c968:	e0d0      	b.n	800cb0c <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800c97a:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 800c97c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d078      	beq.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 800c982:	f107 0214 	add.w	r2, r7, #20
 800c986:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800c988:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	4613      	mov	r3, r2
 800c994:	2201      	movs	r2, #1
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7ff fc23 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800c99c:	4603      	mov	r3, r0
 800c99e:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800c9a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800c9a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c9aa:	e063      	b.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 800c9ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d002      	beq.n	800c9ba <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800c9b4:	230e      	movs	r3, #14
 800c9b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c9b8:	e05c      	b.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800c9ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c9bc:	f1c3 0310 	rsb	r3, r3, #16
 800c9c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 800c9c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d201      	bcs.n	800c9ce <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 800c9ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c9d0:	f107 0214 	add.w	r2, r7, #20
 800c9d4:	4413      	add	r3, r2
 800c9d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f00e fd06 	bl	801b3ec <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800c9e0:	f107 0314 	add.w	r3, r7, #20
 800c9e4:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f7ff ff37 	bl	800c85c <ndefT3TPollerWriteBlocks>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800c9f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10b      	bne.n	800ca10 <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800c9f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9fc:	4413      	add	r3, r2
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 800ca00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800ca08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	863b      	strh	r3, [r7, #48]	; 0x30
 800ca0e:	e031      	b.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 800ca10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca12:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800ca14:	e02e      	b.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800ca16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca18:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ca1a:	fb02 f303 	mul.w	r3, r2, r3
 800ca1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d204      	bcs.n	800ca2e <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 800ca24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2c:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 800ca2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca30:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ca32:	fb02 f303 	mul.w	r3, r2, r3
 800ca36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 800ca38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ca3a:	b2d8      	uxtb	r0, r3
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca40:	4413      	add	r3, r2
 800ca42:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800ca44:	4602      	mov	r2, r0
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f7ff ff08 	bl	800c85c <ndefT3TPollerWriteBlocks>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800ca50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 800ca56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ca5a:	e00b      	b.n	800ca74 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 800ca5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca60:	4413      	add	r3, r2
 800ca62:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 800ca64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 800ca6c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ca6e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ca70:	4413      	add	r3, r2
 800ca72:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800ca74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d302      	bcc.n	800ca82 <ndefT3TPollerWriteBytes+0x170>
 800ca7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0c9      	beq.n	800ca16 <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d038      	beq.n	800cafa <ndefT3TPollerWriteBytes+0x1e8>
 800ca88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d135      	bne.n	800cafa <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 800ca8e:	f107 0214 	add.w	r2, r7, #20
 800ca92:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800ca94:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	2201      	movs	r2, #1
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f7ff fb9d 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800caa8:	4603      	mov	r3, r0
 800caaa:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800caac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d002      	beq.n	800cab8 <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 800cab2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cab4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cab6:	e020      	b.n	800cafa <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800cab8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800caba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d002      	beq.n	800cac6 <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800cac0:	230e      	movs	r3, #14
 800cac2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cac4:	e019      	b.n	800cafa <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	18d1      	adds	r1, r2, r3
 800cacc:	f107 0314 	add.w	r3, r7, #20
 800cad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad2:	4618      	mov	r0, r3
 800cad4:	f00e fc8a 	bl	801b3ec <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800cad8:	f107 0314 	add.w	r3, r7, #20
 800cadc:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800cade:	2201      	movs	r2, #1
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f7ff febb 	bl	800c85c <ndefT3TPollerWriteBlocks>
 800cae6:	4603      	mov	r3, r0
 800cae8:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800caea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caec:	2b00      	cmp	r3, #0
 800caee:	d102      	bne.n	800caf6 <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800caf4:	e001      	b.n	800cafa <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800caf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <ndefT3TPollerWriteBytes+0x1f8>
 800cb00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800cb06:	2300      	movs	r3, #0
 800cb08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800cb0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3740      	adds	r7, #64	; 0x40
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d001      	beq.n	800cb2e <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800cb2a:	2307      	movs	r3, #7
 800cb2c:	e10e      	b.n	800cd4c <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 800cb38:	2321      	movs	r3, #33	; 0x21
 800cb3a:	e107      	b.n	800cd4c <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	339c      	adds	r3, #156	; 0x9c
 800cb44:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 800cb46:	2300      	movs	r3, #0
 800cb48:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cb50:	011b      	lsls	r3, r3, #4
 800cb52:	b2d9      	uxtb	r1, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	6938      	ldr	r0, [r7, #16]
 800cb5e:	4403      	add	r3, r0
 800cb60:	430a      	orrs	r2, r1
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cb66:	7dfb      	ldrb	r3, [r7, #23]
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	89fb      	ldrh	r3, [r7, #14]
 800cb72:	4413      	add	r3, r2
 800cb74:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800cb88:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cb8a:	7dfb      	ldrb	r3, [r7, #23]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	4413      	add	r3, r2
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	89fb      	ldrh	r3, [r7, #14]
 800cb96:	4413      	add	r3, r2
 800cb98:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	4413      	add	r3, r2
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800cbac:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	89fb      	ldrh	r3, [r7, #14]
 800cbba:	4413      	add	r3, r2
 800cbbc:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800cbca:	0a1b      	lsrs	r3, r3, #8
 800cbcc:	b299      	uxth	r1, r3
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	b2ca      	uxtb	r2, r1
 800cbd6:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	4413      	add	r3, r2
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	89fb      	ldrh	r3, [r7, #14]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	3301      	adds	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 800cbf4:	7dfb      	ldrb	r3, [r7, #23]
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b2ca      	uxtb	r2, r1
 800cbfc:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	4413      	add	r3, r2
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	3301      	adds	r3, #1
 800cc12:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	4413      	add	r3, r2
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	3301      	adds	r3, #1
 800cc22:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	4413      	add	r3, r2
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	3301      	adds	r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	4413      	add	r3, r2
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	3301      	adds	r3, #1
 800cc42:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	4413      	add	r3, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cc4e:	7dfb      	ldrb	r3, [r7, #23]
 800cc50:	3301      	adds	r3, #1
 800cc52:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	4413      	add	r3, r2
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800cc60:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	4413      	add	r3, r2
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	89fb      	ldrh	r3, [r7, #14]
 800cc6e:	4413      	add	r3, r2
 800cc70:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	3301      	adds	r3, #1
 800cc76:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 800cc78:	7dfb      	ldrb	r3, [r7, #23]
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800cc84:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	89fb      	ldrh	r3, [r7, #14]
 800cc92:	4413      	add	r3, r2
 800cc94:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cca2:	0c19      	lsrs	r1, r3, #16
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	4413      	add	r3, r2
 800ccaa:	b2ca      	uxtb	r2, r1
 800ccac:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	89fb      	ldrh	r3, [r7, #14]
 800ccba:	4413      	add	r3, r2
 800ccbc:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccca:	0a19      	lsrs	r1, r3, #8
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	b2ca      	uxtb	r2, r1
 800ccd4:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	4413      	add	r3, r2
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	4413      	add	r3, r2
 800cce4:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	3301      	adds	r3, #1
 800ccea:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	b2ca      	uxtb	r2, r1
 800ccfa:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ccfc:	7dfb      	ldrb	r3, [r7, #23]
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	4413      	add	r3, r2
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	89fb      	ldrh	r3, [r7, #14]
 800cd08:	4413      	add	r3, r2
 800cd0a:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 800cd12:	89fb      	ldrh	r3, [r7, #14]
 800cd14:	0a1b      	lsrs	r3, r3, #8
 800cd16:	b299      	uxth	r1, r3
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	b2ca      	uxtb	r2, r1
 800cd20:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	3301      	adds	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	89fa      	ldrh	r2, [r7, #14]
 800cd30:	b2d2      	uxtb	r2, r2
 800cd32:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	3301      	adds	r3, #1
 800cd38:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	2100      	movs	r1, #0
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff fd8b 	bl	800c85c <ndefT3TPollerWriteBlocks>
 800cd46:	4603      	mov	r3, r0
 800cd48:	81bb      	strh	r3, [r7, #12]
    return ret;
 800cd4a:	89bb      	ldrh	r3, [r7, #12]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d009      	beq.n	800cd7a <ndefT3TPollerWriteRawMessage+0x26>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d105      	bne.n	800cd7a <ndefT3TPollerWriteRawMessage+0x26>
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d104      	bne.n	800cd7e <ndefT3TPollerWriteRawMessage+0x2a>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 800cd7a:	2307      	movs	r3, #7
 800cd7c:	e04b      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d006      	beq.n	800cd96 <ndefT3TPollerWriteRawMessage+0x42>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d001      	beq.n	800cd96 <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800cd92:	2321      	movs	r3, #33	; 0x21
 800cd94:	e03f      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 f8cb 	bl	800cf34 <ndefT3TPollerCheckAvailableSpace>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800cda2:	8afb      	ldrh	r3, [r7, #22]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800cda8:	2307      	movs	r3, #7
 800cdaa:	e034      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f8e3 	bl	800cf7a <ndefT3TPollerBeginWriteMessage>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800cdb8:	8afb      	ldrh	r3, [r7, #22]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d005      	beq.n	800cdca <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800cdc6:	8afb      	ldrh	r3, [r7, #22]
 800cdc8:	e025      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d012      	beq.n	800cdf6 <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7ff fd99 	bl	800c912 <ndefT3TPollerWriteBytes>
 800cde0:	4603      	mov	r3, r0
 800cde2:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800cde4:	8afb      	ldrh	r3, [r7, #22]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d005      	beq.n	800cdf6 <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800cdf2:	8afb      	ldrh	r3, [r7, #22]
 800cdf4:	e00f      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f8f3 	bl	800cfe4 <ndefT3TPollerEndWriteMessage>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ce02:	8afb      	ldrh	r3, [r7, #22]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ce10:	8afb      	ldrh	r3, [r7, #22]
 800ce12:	e000      	b.n	800ce16 <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 800ce14:	8afb      	ldrh	r3, [r7, #22]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b08e      	sub	sp, #56	; 0x38
 800ce22:	af02      	add	r7, sp, #8
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <ndefT3TPollerTagFormat+0x22>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d001      	beq.n	800ce44 <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800ce40:	2307      	movs	r3, #7
 800ce42:	e051      	b.n	800cee8 <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d109      	bne.n	800ce5e <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f7ff fb5d 	bl	800c50a <ndefT3TPollerReadAttributeInformationBlock>
 800ce50:	4603      	mov	r3, r0
 800ce52:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 800ce54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d008      	beq.n	800ce6c <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 800ce5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce5c:	e044      	b.n	800cee8 <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	337c      	adds	r3, #124	; 0x7c
 800ce62:	2214      	movs	r2, #20
 800ce64:	68b9      	ldr	r1, [r7, #8]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f00e fac0 	bl	801b3ec <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 800ce6c:	f107 0218 	add.w	r2, r7, #24
 800ce70:	f107 0316 	add.w	r3, r7, #22
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f107 0317 	add.w	r3, r7, #23
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800ce84:	2000      	movs	r0, #0
 800ce86:	f009 fc69 	bl	801675c <rfalNfcfPollerPoll>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800ce8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 800ce94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce96:	e027      	b.n	800cee8 <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800ce98:	f107 0218 	add.w	r2, r7, #24
 800ce9c:	f107 0316 	add.w	r3, r7, #22
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	f107 0317 	add.w	r3, r7, #23
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	f009 fc53 	bl	801675c <rfalNfcfPollerPoll>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800ceba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 800cec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cec2:	e011      	b.n	800cee8 <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f7ff fe19 	bl	800cb14 <ndefT3TPollerWriteAttributeInformationBlock>
 800cee2:	4603      	mov	r3, r0
 800cee4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800cee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3730      	adds	r7, #48	; 0x30
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <ndefT3TPollerCheckPresence+0x16>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d001      	beq.n	800cf0a <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800cf06:	2307      	movs	r3, #7
 800cf08:	e010      	b.n	800cf2c <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800cf10:	f107 030c 	add.w	r3, r7, #12
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	2310      	movs	r3, #16
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	2100      	movs	r1, #0
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff f95e 	bl	800c1e2 <ndefT3TPollerReadBlocks>
 800cf26:	4603      	mov	r3, r0
 800cf28:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800cf2a:	89fb      	ldrh	r3, [r7, #14]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <ndefT3TPollerCheckAvailableSpace+0x18>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d001      	beq.n	800cf50 <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800cf4c:	2307      	movs	r3, #7
 800cf4e:	e00f      	b.n	800cf70 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800cf5a:	2321      	movs	r3, #33	; 0x21
 800cf5c:	e008      	b.n	800cf70 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d901      	bls.n	800cf6e <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e000      	b.n	800cf70 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr

0800cf7a <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <ndefT3TPollerBeginWriteMessage+0x18>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d001      	beq.n	800cf96 <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cf92:	2307      	movs	r3, #7
 800cf94:	e022      	b.n	800cfdc <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d006      	beq.n	800cfae <ndefT3TPollerBeginWriteMessage+0x34>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d001      	beq.n	800cfae <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800cfaa:	2321      	movs	r3, #33	; 0x21
 800cfac:	e016      	b.n	800cfdc <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	220f      	movs	r2, #15
 800cfb2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff fdac 	bl	800cb14 <ndefT3TPollerWriteAttributeInformationBlock>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800cfc0:	89fb      	ldrh	r3, [r7, #14]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800cfce:	89fb      	ldrh	r3, [r7, #14]
 800cfd0:	e004      	b.n	800cfdc <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d003      	beq.n	800cffc <ndefT3TPollerEndWriteMessage+0x18>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d001      	beq.n	800d000 <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800cffc:	2307      	movs	r3, #7
 800cffe:	e02c      	b.n	800d05a <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d006:	2b01      	cmp	r3, #1
 800d008:	d001      	beq.n	800d00e <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800d00a:	2321      	movs	r3, #33	; 0x21
 800d00c:	e025      	b.n	800d05a <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff fd78 	bl	800cb14 <ndefT3TPollerWriteAttributeInformationBlock>
 800d024:	4603      	mov	r3, r0
 800d026:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d028:	89fb      	ldrh	r3, [r7, #14]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d005      	beq.n	800d03a <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800d036:	89fb      	ldrh	r3, [r7, #14]
 800d038:	e00f      	b.n	800d05a <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <ndefT3TPollerEndWriteMessage+0x6c>
 800d04c:	2201      	movs	r2, #1
 800d04e:	e000      	b.n	800d052 <ndefT3TPollerEndWriteMessage+0x6e>
 800d050:	2202      	movs	r2, #2
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <ndefT3TPollerWriteRawMessageLen+0x18>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b02      	cmp	r3, #2
 800d078:	d001      	beq.n	800d07e <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 800d07a:	2307      	movs	r3, #7
 800d07c:	e010      	b.n	800d0a0 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d084:	2b01      	cmp	r3, #1
 800d086:	d006      	beq.n	800d096 <ndefT3TPollerWriteRawMessageLen+0x34>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d001      	beq.n	800d096 <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 800d092:	2321      	movs	r3, #33	; 0x21
 800d094:	e004      	b.n	800d0a0 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ffa3 	bl	800cfe4 <ndefT3TPollerEndWriteMessage>
 800d09e:	4603      	mov	r3, r0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	22ff      	movs	r2, #255	; 0xff
 800d0e6:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f603 02cc 	addw	r2, r3, #2252	; 0x8cc
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	611a      	str	r2, [r3, #16]
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	bc80      	pop	{r7}
 800d104:	4770      	bx	lr

0800d106 <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800d106:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d108:	b08b      	sub	sp, #44	; 0x2c
 800d10a:	af06      	add	r7, sp, #24
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800d126:	683e      	ldr	r6, [r7, #0]
 800d128:	466d      	mov	r5, sp
 800d12a:	f106 0410 	add.w	r4, r6, #16
 800d12e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	602b      	str	r3, [r5, #0]
 800d136:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d13a:	f004 fa67 	bl	801160c <rfalIsoDepStartApduTransceive>
 800d13e:	4603      	mov	r3, r0
 800d140:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 800d142:	89fb      	ldrh	r3, [r7, #14]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d108      	bne.n	800d15a <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 800d148:	f00b faaa 	bl	80186a0 <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 800d14c:	f004 faae 	bl	80116ac <rfalIsoDepGetApduTransceiveStatus>
 800d150:	4603      	mov	r3, r0
 800d152:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 800d154:	89fb      	ldrh	r3, [r7, #14]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d0f6      	beq.n	800d148 <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 800d15a:	89fb      	ldrh	r3, [r7, #14]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d001      	beq.n	800d164 <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 800d160:	89fb      	ldrh	r3, [r7, #14]
 800d162:	e00e      	b.n	800d182 <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f00d fee5 	bl	801af3a <rfalT4TPollerParseRAPDU>
 800d170:	4603      	mov	r3, r0
 800d172:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 28c6 	ldrh.w	r2, [r3, #2246]	; 0x8c6
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8a3 29d0 	strh.w	r2, [r3, #2512]	; 0x9d0
    
    return ret;
 800d180:	89fb      	ldrh	r3, [r7, #14]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d18c <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 800d194:	49a0      	ldr	r1, [pc, #640]	; (800d418 <ndefT4TReadAndParseCCFile+0x28c>)
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 f9e6 	bl	800d568 <ndefT4TPollerSelectFile>
 800d19c:	4603      	mov	r3, r0
 800d19e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d1a0:	89fb      	ldrh	r3, [r7, #14]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 800d1a6:	89fb      	ldrh	r3, [r7, #14]
 800d1a8:	e180      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 800d1aa:	220f      	movs	r2, #15
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fa19 	bl	800d5e6 <ndefT4TPollerReadBinary>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d1b8:	89fb      	ldrh	r3, [r7, #14]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 800d1be:	89fb      	ldrh	r3, [r7, #14]
 800d1c0:	e174      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800d1ce:	220f      	movs	r2, #15
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f00e f90b 	bl	801b3ec <memcpy>
    dataIt = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 800d1da:	7b7b      	ldrb	r3, [r7, #13]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	4413      	add	r3, r2
 800d1e0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	b21a      	sxth	r2, r3
 800d1e8:	7b7b      	ldrb	r3, [r7, #13]
 800d1ea:	3398      	adds	r3, #152	; 0x98
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	440b      	add	r3, r1
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	b21b      	sxth	r3, r3
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	b21b      	sxth	r3, r3
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 800d204:	7b7b      	ldrb	r3, [r7, #13]
 800d206:	3302      	adds	r3, #2
 800d208:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 800d20a:	7b7b      	ldrb	r3, [r7, #13]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	4413      	add	r3, r2
 800d210:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 800d21a:	7b7b      	ldrb	r3, [r7, #13]
 800d21c:	3301      	adds	r3, #1
 800d21e:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 800d220:	7b7b      	ldrb	r3, [r7, #13]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4413      	add	r3, r2
 800d226:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b21a      	sxth	r2, r3
 800d22e:	7b7b      	ldrb	r3, [r7, #13]
 800d230:	3398      	adds	r3, #152	; 0x98
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	440b      	add	r3, r1
 800d236:	3304      	adds	r3, #4
 800d238:	3301      	adds	r3, #1
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	b21b      	sxth	r3, r3
 800d23e:	4313      	orrs	r3, r2
 800d240:	b21b      	sxth	r3, r3
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 800d24a:	7b7b      	ldrb	r3, [r7, #13]
 800d24c:	3302      	adds	r3, #2
 800d24e:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 800d250:	7b7b      	ldrb	r3, [r7, #13]
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d25a:	021b      	lsls	r3, r3, #8
 800d25c:	b21a      	sxth	r2, r3
 800d25e:	7b7b      	ldrb	r3, [r7, #13]
 800d260:	3398      	adds	r3, #152	; 0x98
 800d262:	6879      	ldr	r1, [r7, #4]
 800d264:	440b      	add	r3, r1
 800d266:	3304      	adds	r3, #4
 800d268:	3301      	adds	r3, #1
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	b21b      	sxth	r3, r3
 800d26e:	4313      	orrs	r3, r2
 800d270:	b21b      	sxth	r3, r3
 800d272:	b29a      	uxth	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 800d27a:	7b7b      	ldrb	r3, [r7, #13]
 800d27c:	3302      	adds	r3, #2
 800d27e:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d286:	2b0e      	cmp	r3, #14
 800d288:	d904      	bls.n	800d294 <ndefT4TReadAndParseCCFile+0x108>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d290:	2b0c      	cmp	r3, #12
 800d292:	d801      	bhi.n	800d298 <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d294:	2305      	movs	r3, #5
 800d296:	e109      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d29e:	2bfe      	cmp	r3, #254	; 0xfe
 800d2a0:	d804      	bhi.n	800d2ac <ndefT4TReadAndParseCCFile+0x120>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	e000      	b.n	800d2ae <ndefT4TReadAndParseCCFile+0x122>
 800d2ac:	22ff      	movs	r2, #255	; 0xff
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d2ba:	2bfe      	cmp	r3, #254	; 0xfe
 800d2bc:	d804      	bhi.n	800d2c8 <ndefT4TReadAndParseCCFile+0x13c>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	e000      	b.n	800d2ca <ndefT4TReadAndParseCCFile+0x13e>
 800d2c8:	22ff      	movs	r2, #255	; 0xff
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d2d6:	091b      	lsrs	r3, r3, #4
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d901      	bls.n	800d2e2 <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d2de:	2305      	movs	r3, #5
 800d2e0:	e0e4      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d2e8:	091b      	lsrs	r3, r3, #4
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d17e      	bne.n	800d3ee <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	210f      	movs	r1, #15
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f976 	bl	800d5e6 <ndefT4TPollerReadBinary>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 800d2fe:	89fb      	ldrh	r3, [r7, #14]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 800d304:	89fb      	ldrh	r3, [r7, #14]
 800d306:	e0d1      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	33ab      	adds	r3, #171	; 0xab
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	f202 42bd 	addw	r2, r2, #1213	; 0x4bd
 800d312:	8812      	ldrh	r2, [r2, #0]
 800d314:	b292      	uxth	r2, r2
 800d316:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 800d318:	7b7b      	ldrb	r3, [r7, #13]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d322:	2b06      	cmp	r3, #6
 800d324:	d001      	beq.n	800d32a <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800d326:	2305      	movs	r3, #5
 800d328:	e0c0      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d32a:	7b7b      	ldrb	r3, [r7, #13]
 800d32c:	3301      	adds	r3, #1
 800d32e:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 800d330:	7b7b      	ldrb	r3, [r7, #13]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	4413      	add	r3, r2
 800d336:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	d801      	bhi.n	800d342 <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800d33e:	2305      	movs	r3, #5
 800d340:	e0b4      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d342:	7b7b      	ldrb	r3, [r7, #13]
 800d344:	3301      	adds	r3, #1
 800d346:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800d348:	7b7b      	ldrb	r3, [r7, #13]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	4413      	add	r3, r2
 800d34e:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800d358:	7b7b      	ldrb	r3, [r7, #13]
 800d35a:	3301      	adds	r3, #1
 800d35c:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800d35e:	7b7b      	ldrb	r3, [r7, #13]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	4413      	add	r3, r2
 800d364:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800d36e:	7b7b      	ldrb	r3, [r7, #13]
 800d370:	3301      	adds	r3, #1
 800d372:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 800d374:	7b7b      	ldrb	r3, [r7, #13]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	4413      	add	r3, r2
 800d37a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d37e:	061a      	lsls	r2, r3, #24
 800d380:	7b7b      	ldrb	r3, [r7, #13]
 800d382:	3398      	adds	r3, #152	; 0x98
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	440b      	add	r3, r1
 800d388:	3304      	adds	r3, #4
 800d38a:	3301      	adds	r3, #1
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	431a      	orrs	r2, r3
 800d392:	7b7b      	ldrb	r3, [r7, #13]
 800d394:	3398      	adds	r3, #152	; 0x98
 800d396:	6879      	ldr	r1, [r7, #4]
 800d398:	440b      	add	r3, r1
 800d39a:	3304      	adds	r3, #4
 800d39c:	3302      	adds	r3, #2
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	021b      	lsls	r3, r3, #8
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	7b7a      	ldrb	r2, [r7, #13]
 800d3a6:	3298      	adds	r2, #152	; 0x98
 800d3a8:	6879      	ldr	r1, [r7, #4]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	3204      	adds	r2, #4
 800d3ae:	3203      	adds	r2, #3
 800d3b0:	7812      	ldrb	r2, [r2, #0]
 800d3b2:	431a      	orrs	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 800d3ba:	7b7b      	ldrb	r3, [r7, #13]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800d3c0:	7b7b      	ldrb	r3, [r7, #13]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800d3d0:	7b7b      	ldrb	r3, [r7, #13]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800d3d6:	7b7b      	ldrb	r3, [r7, #13]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800d3e6:	7b7b      	ldrb	r3, [r7, #13]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	737b      	strb	r3, [r7, #13]
 800d3ec:	e05d      	b.n	800d4aa <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 800d3ee:	7b7b      	ldrb	r3, [r7, #13]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d001      	beq.n	800d400 <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 800d3fc:	2305      	movs	r3, #5
 800d3fe:	e055      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800d400:	7b7b      	ldrb	r3, [r7, #13]
 800d402:	3301      	adds	r3, #1
 800d404:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 800d406:	7b7b      	ldrb	r3, [r7, #13]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4413      	add	r3, r2
 800d40c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d410:	2b05      	cmp	r3, #5
 800d412:	d803      	bhi.n	800d41c <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 800d414:	2305      	movs	r3, #5
 800d416:	e049      	b.n	800d4ac <ndefT4TReadAndParseCCFile+0x320>
 800d418:	0801d560 	.word	0x0801d560
        }
        dataIt++;
 800d41c:	7b7b      	ldrb	r3, [r7, #13]
 800d41e:	3301      	adds	r3, #1
 800d420:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800d422:	7b7b      	ldrb	r3, [r7, #13]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	4413      	add	r3, r2
 800d428:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800d432:	7b7b      	ldrb	r3, [r7, #13]
 800d434:	3301      	adds	r3, #1
 800d436:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800d438:	7b7b      	ldrb	r3, [r7, #13]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	4413      	add	r3, r2
 800d43e:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800d448:	7b7b      	ldrb	r3, [r7, #13]
 800d44a:	3301      	adds	r3, #1
 800d44c:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 800d44e:	7b7b      	ldrb	r3, [r7, #13]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	4413      	add	r3, r2
 800d454:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d458:	b29b      	uxth	r3, r3
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	7b7b      	ldrb	r3, [r7, #13]
 800d460:	3301      	adds	r3, #1
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	440b      	add	r3, r1
 800d466:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4313      	orrs	r3, r2
 800d46e:	b29b      	uxth	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 800d478:	7b7b      	ldrb	r3, [r7, #13]
 800d47a:	3302      	adds	r3, #2
 800d47c:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800d47e:	7b7b      	ldrb	r3, [r7, #13]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	4413      	add	r3, r2
 800d484:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800d48e:	7b7b      	ldrb	r3, [r7, #13]
 800d490:	3301      	adds	r3, #1
 800d492:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800d494:	7b7b      	ldrb	r3, [r7, #13]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4413      	add	r3, r2
 800d49a:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800d4a4:	7b7b      	ldrb	r3, [r7, #13]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08c      	sub	sp, #48	; 0x30
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00b      	beq.n	800d4da <ndefT4TPollerSelectNdefTagApplication+0x26>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d103      	bne.n	800d4d2 <ndefT4TPollerSelectNdefTagApplication+0x1e>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	785b      	ldrb	r3, [r3, #1]
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	d005      	beq.n	800d4de <ndefT4TPollerSelectNdefTagApplication+0x2a>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d001      	beq.n	800d4de <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 800d4da:	2307      	movs	r3, #7
 800d4dc:	e03b      	b.n	800d556 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff fddf 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 800d4ea:	68b8      	ldr	r0, [r7, #8]
 800d4ec:	f107 0308 	add.w	r3, r7, #8
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	2207      	movs	r2, #7
 800d4f4:	491a      	ldr	r1, [pc, #104]	; (800d560 <ndefT4TPollerSelectNdefTagApplication+0xac>)
 800d4f6:	f00d fd5c 	bl	801afb2 <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff fe00 	bl	800d106 <ndefT4TTransceiveTxRx>
 800d506:	4603      	mov	r3, r0
 800d508:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800d50a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d105      	bne.n	800d51c <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 800d518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d51a:	e01c      	b.n	800d556 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 800d51c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d51e:	2b05      	cmp	r3, #5
 800d520:	d001      	beq.n	800d526 <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 800d522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d524:	e017      	b.n	800d556 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f107 0308 	add.w	r3, r7, #8
 800d52c:	3304      	adds	r3, #4
 800d52e:	2207      	movs	r2, #7
 800d530:	490c      	ldr	r1, [pc, #48]	; (800d564 <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 800d532:	f00d fd3e 	bl	801afb2 <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d536:	f107 0308 	add.w	r3, r7, #8
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff fde2 	bl	800d106 <ndefT4TTransceiveTxRx>
 800d542:	4603      	mov	r3, r0
 800d544:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800d546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 800d554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d556:	4618      	mov	r0, r3
 800d558:	3730      	adds	r7, #48	; 0x30
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	0801d564 	.word	0x0801d564
 800d564:	0801d56c 	.word	0x0801d56c

0800d568 <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08c      	sub	sp, #48	; 0x30
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <ndefT4TPollerSelectFile+0x28>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d103      	bne.n	800d588 <ndefT4TPollerSelectFile+0x20>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	785b      	ldrb	r3, [r3, #1]
 800d584:	2b20      	cmp	r3, #32
 800d586:	d005      	beq.n	800d594 <ndefT4TPollerSelectFile+0x2c>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d001      	beq.n	800d594 <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 800d590:	2307      	movs	r3, #7
 800d592:	e024      	b.n	800d5de <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4619      	mov	r1, r3
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fd84 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d008      	beq.n	800d5bc <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 800d5aa:	68b8      	ldr	r0, [r7, #8]
 800d5ac:	f107 0308 	add.w	r3, r7, #8
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	f00d fd5c 	bl	801b072 <rfalT4TPollerComposeSelectFileV1Mapping>
 800d5ba:	e007      	b.n	800d5cc <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 800d5bc:	68b8      	ldr	r0, [r7, #8]
 800d5be:	f107 0308 	add.w	r3, r7, #8
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	f00d fd23 	bl	801b012 <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d5cc:	f107 0308 	add.w	r3, r7, #8
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7ff fd97 	bl	800d106 <ndefT4TTransceiveTxRx>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 800d5dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3730      	adds	r7, #48	; 0x30
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b08c      	sub	sp, #48	; 0x30
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	807b      	strh	r3, [r7, #2]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d015      	beq.n	800d628 <ndefT4TPollerReadBinary+0x42>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d103      	bne.n	800d60c <ndefT4TPollerReadBinary+0x26>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	785b      	ldrb	r3, [r3, #1]
 800d608:	2b20      	cmp	r3, #32
 800d60a:	d003      	beq.n	800d614 <ndefT4TPollerReadBinary+0x2e>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d109      	bne.n	800d628 <ndefT4TPollerReadBinary+0x42>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d61a:	787a      	ldrb	r2, [r7, #1]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d803      	bhi.n	800d628 <ndefT4TPollerReadBinary+0x42>
 800d620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d624:	2b00      	cmp	r3, #0
 800d626:	da01      	bge.n	800d62c <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 800d628:	2307      	movs	r3, #7
 800d62a:	e016      	b.n	800d65a <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d62c:	f107 0308 	add.w	r3, r7, #8
 800d630:	4619      	mov	r1, r3
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7ff fd38 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800d638:	68b8      	ldr	r0, [r7, #8]
 800d63a:	f107 0308 	add.w	r3, r7, #8
 800d63e:	3304      	adds	r3, #4
 800d640:	787a      	ldrb	r2, [r7, #1]
 800d642:	8879      	ldrh	r1, [r7, #2]
 800d644:	f00d fd45 	bl	801b0d2 <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d648:	f107 0308 	add.w	r3, r7, #8
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fd59 	bl	800d106 <ndefT4TTransceiveTxRx>
 800d654:	4603      	mov	r3, r0
 800d656:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 800d658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3730      	adds	r7, #48	; 0x30
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b08e      	sub	sp, #56	; 0x38
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	4613      	mov	r3, r2
 800d66e:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d016      	beq.n	800d6a4 <ndefT4TPollerReadBinaryODO+0x42>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d103      	bne.n	800d686 <ndefT4TPollerReadBinaryODO+0x24>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	785b      	ldrb	r3, [r3, #1]
 800d682:	2b20      	cmp	r3, #32
 800d684:	d003      	beq.n	800d68e <ndefT4TPollerReadBinaryODO+0x2c>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d10a      	bne.n	800d6a4 <ndefT4TPollerReadBinaryODO+0x42>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d694:	79fa      	ldrb	r2, [r7, #7]
 800d696:	429a      	cmp	r2, r3
 800d698:	d804      	bhi.n	800d6a4 <ndefT4TPollerReadBinaryODO+0x42>
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d301      	bcc.n	800d6a8 <ndefT4TPollerReadBinaryODO+0x46>
    {
        return ERR_PARAM;
 800d6a4:	2307      	movs	r3, #7
 800d6a6:	e016      	b.n	800d6d6 <ndefT4TPollerReadBinaryODO+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800d6a8:	f107 0310 	add.w	r3, r7, #16
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fcfa 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800d6b4:	6938      	ldr	r0, [r7, #16]
 800d6b6:	f107 0310 	add.w	r3, r7, #16
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	79fa      	ldrb	r2, [r7, #7]
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	f00d fd30 	bl	801b124 <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800d6c4:	f107 0310 	add.w	r3, r7, #16
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7ff fd1b 	bl	800d106 <ndefT4TTransceiveTxRx>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800d6d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3738      	adds	r7, #56	; 0x38
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b08a      	sub	sp, #40	; 0x28
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	607a      	str	r2, [r7, #4]
 800d6ea:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00e      	beq.n	800d71c <ndefT4TPollerReadBytes+0x3e>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <ndefT4TPollerReadBytes+0x30>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	2b20      	cmp	r3, #32
 800d70c:	d003      	beq.n	800d716 <ndefT4TPollerReadBytes+0x38>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d102      	bne.n	800d71c <ndefT4TPollerReadBytes+0x3e>
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800d71c:	2307      	movs	r3, #7
 800d71e:	e06c      	b.n	800d7fa <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d732:	461a      	mov	r2, r3
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	4293      	cmp	r3, r2
 800d738:	d903      	bls.n	800d742 <ndefT4TPollerReadBytes+0x64>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d740:	e001      	b.n	800d746 <ndefT4TPollerReadBytes+0x68>
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	b2db      	uxtb	r3, r3
 800d746:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d74e:	d308      	bcc.n	800d762 <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	461a      	mov	r2, r3
 800d754:	6a39      	ldr	r1, [r7, #32]
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff ff83 	bl	800d662 <ndefT4TPollerReadBinaryODO>
 800d75c:	4603      	mov	r3, r0
 800d75e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d760:	e008      	b.n	800d774 <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	b29b      	uxth	r3, r3
 800d766:	7dfa      	ldrb	r2, [r7, #23]
 800d768:	4619      	mov	r1, r3
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff ff3b 	bl	800d5e6 <ndefT4TPollerReadBinary>
 800d770:	4603      	mov	r3, r0
 800d772:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 800d774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 800d77a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d77c:	e03d      	b.n	800d7fa <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d036      	beq.n	800d7f6 <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d78e:	461a      	mov	r2, r3
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	4293      	cmp	r3, r2
 800d794:	d201      	bcs.n	800d79a <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800d796:	2308      	movs	r3, #8
 800d798:	e02f      	b.n	800d7fa <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f203 41bd 	addw	r1, r3, #1213	; 0x4bd
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	69b8      	ldr	r0, [r7, #24]
 800d7aa:	f00d fe1f 	bl	801b3ec <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	1a9b      	subs	r3, r3, r2
 800d7d6:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d007      	beq.n	800d7ee <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	f8b2 29d0 	ldrh.w	r2, [r2, #2512]	; 0x9d0
 800d7e8:	441a      	add	r2, r3
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ec:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d19b      	bne.n	800d72c <ndefT4TPollerReadBytes+0x4e>
 800d7f4:	e000      	b.n	800d7f8 <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800d7f6:	bf00      	nop

    return ERR_NONE;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3728      	adds	r7, #40	; 0x28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00e      	beq.n	800d830 <ndefT4TPollerContextInitialization+0x2e>
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00b      	beq.n	800d830 <ndefT4TPollerContextInitialization+0x2e>
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d103      	bne.n	800d828 <ndefT4TPollerContextInitialization+0x26>
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	785b      	ldrb	r3, [r3, #1]
 800d824:	2b20      	cmp	r3, #32
 800d826:	d005      	beq.n	800d834 <ndefT4TPollerContextInitialization+0x32>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d001      	beq.n	800d834 <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800d830:	2307      	movs	r3, #7
 800d832:	e012      	b.n	800d85a <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2278      	movs	r2, #120	; 0x78
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f00d fdd6 	bl	801b3ec <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	220d      	movs	r2, #13
 800d84c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	220f      	movs	r2, #15
 800d854:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d011      	beq.n	800d896 <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2200      	movs	r2, #0
 800d876:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2200      	movs	r2, #0
 800d87c:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2200      	movs	r2, #0
 800d882:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2200      	movs	r2, #0
 800d888:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2200      	movs	r2, #0
 800d88e:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2200      	movs	r2, #0
 800d894:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00b      	beq.n	800d8b4 <ndefT4TPollerNdefDetect+0x52>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d103      	bne.n	800d8ac <ndefT4TPollerNdefDetect+0x4a>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	785b      	ldrb	r3, [r3, #1]
 800d8a8:	2b20      	cmp	r3, #32
 800d8aa:	d005      	beq.n	800d8b8 <ndefT4TPollerNdefDetect+0x56>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d001      	beq.n	800d8b8 <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800d8b4:	2307      	movs	r3, #7
 800d8b6:	e0fa      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff fdf7 	bl	800d4b4 <ndefT4TPollerSelectNdefTagApplication>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d8ca:	89fb      	ldrh	r3, [r7, #14]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	e0ec      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff fc59 	bl	800d18c <ndefT4TReadAndParseCCFile>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d8de:	89fb      	ldrh	r3, [r7, #14]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
 800d8e6:	e0e2      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d8ee:	091b      	lsrs	r3, r3, #4
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d101      	bne.n	800d8fa <ndefT4TPollerNdefDetect+0x98>
 800d8f6:	2304      	movs	r3, #4
 800d8f8:	e000      	b.n	800d8fc <ndefT4TPollerNdefDetect+0x9a>
 800d8fa:	2302      	movs	r3, #2
 800d8fc:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00c      	beq.n	800d922 <ndefT4TPollerNdefDetect+0xc0>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d90e:	b25b      	sxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	da04      	bge.n	800d91e <ndefT4TPollerNdefDetect+0xbc>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d91a:	2bff      	cmp	r3, #255	; 0xff
 800d91c:	d101      	bne.n	800d922 <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800d91e:	2305      	movs	r3, #5
 800d920:	e0c5      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d928:	7b7b      	ldrb	r3, [r7, #13]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d201      	bcs.n	800d932 <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800d92e:	2305      	movs	r3, #5
 800d930:	e0bd      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3384      	adds	r3, #132	; 0x84
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7ff fe15 	bl	800d568 <ndefT4TPollerSelectFile>
 800d93e:	4603      	mov	r3, r0
 800d940:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d942:	89fb      	ldrh	r3, [r7, #14]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800d948:	89fb      	ldrh	r3, [r7, #14]
 800d94a:	e0b0      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800d94c:	7b7b      	ldrb	r3, [r7, #13]
 800d94e:	461a      	mov	r2, r3
 800d950:	2100      	movs	r1, #0
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7ff fe47 	bl	800d5e6 <ndefT4TPollerReadBinary>
 800d958:	4603      	mov	r3, r0
 800d95a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800d95c:	89fb      	ldrh	r3, [r7, #14]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800d962:	89fb      	ldrh	r3, [r7, #14]
 800d964:	e0a3      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800d96c:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800d96e:	7b7b      	ldrb	r3, [r7, #13]
 800d970:	2b04      	cmp	r3, #4
 800d972:	d111      	bne.n	800d998 <ndefT4TPollerNdefDetect+0x136>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	061a      	lsls	r2, r3, #24
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	3301      	adds	r3, #1
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	041b      	lsls	r3, r3, #16
 800d982:	431a      	orrs	r2, r3
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	3302      	adds	r3, #2
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	021b      	lsls	r3, r3, #8
 800d98c:	4313      	orrs	r3, r2
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	3203      	adds	r2, #3
 800d992:	7812      	ldrb	r2, [r2, #0]
 800d994:	4313      	orrs	r3, r2
 800d996:	e00a      	b.n	800d9ae <ndefT4TPollerNdefDetect+0x14c>
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	021b      	lsls	r3, r3, #8
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800d9b4:	7b7a      	ldrb	r2, [r7, #13]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800d9d4:	7b7b      	ldrb	r3, [r7, #13]
 800d9d6:	1acb      	subs	r3, r1, r3
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d809      	bhi.n	800d9f0 <ndefT4TPollerNdefDetect+0x18e>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d006      	beq.n	800d9f4 <ndefT4TPollerNdefDetect+0x192>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d801      	bhi.n	800d9f4 <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800d9f0:	2305      	movs	r3, #5
 800d9f2:	e05c      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d116      	bne.n	800da2c <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00c      	beq.n	800da22 <ndefT4TPollerNdefDetect+0x1c0>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da0e:	b25b      	sxtb	r3, r3
 800da10:	2b00      	cmp	r3, #0
 800da12:	da04      	bge.n	800da1e <ndefT4TPollerNdefDetect+0x1bc>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da1a:	2bff      	cmp	r3, #255	; 0xff
 800da1c:	d101      	bne.n	800da22 <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800da1e:	2305      	movs	r3, #5
 800da20:	e045      	b.n	800daae <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800da2a:	e015      	b.n	800da58 <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00a      	beq.n	800da4c <ndefT4TPollerNdefDetect+0x1ea>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da3c:	b25b      	sxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	da06      	bge.n	800da50 <ndefT4TPollerNdefDetect+0x1ee>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da48:	2bff      	cmp	r3, #255	; 0xff
 800da4a:	d001      	beq.n	800da50 <ndefT4TPollerNdefDetect+0x1ee>
 800da4c:	2202      	movs	r2, #2
 800da4e:	e000      	b.n	800da52 <ndefT4TPollerNdefDetect+0x1f0>
 800da50:	2203      	movs	r2, #3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d026      	beq.n	800daac <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800da6e:	091b      	lsrs	r3, r3, #4
 800da70:	b2da      	uxtb	r2, r3
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800da7c:	f003 030f 	and.w	r3, r3, #15
 800da80:	b2da      	uxtb	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800da9c:	1ad2      	subs	r2, r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b088      	sub	sp, #32
 800daba:	af02      	add	r7, sp, #8
 800dabc:	60f8      	str	r0, [r7, #12]
 800dabe:	60b9      	str	r1, [r7, #8]
 800dac0:	607a      	str	r2, [r7, #4]
 800dac2:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00e      	beq.n	800dae8 <ndefT4TPollerReadRawMessage+0x32>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d103      	bne.n	800dada <ndefT4TPollerReadRawMessage+0x24>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	785b      	ldrb	r3, [r3, #1]
 800dad6:	2b20      	cmp	r3, #32
 800dad8:	d003      	beq.n	800dae2 <ndefT4TPollerReadRawMessage+0x2c>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d102      	bne.n	800dae8 <ndefT4TPollerReadRawMessage+0x32>
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800dae8:	2307      	movs	r3, #7
 800daea:	e024      	b.n	800db36 <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d801      	bhi.n	800dafa <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800daf6:	2321      	movs	r3, #33	; 0x21
 800daf8:	e01d      	b.n	800db36 <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	429a      	cmp	r2, r3
 800db04:	d201      	bcs.n	800db0a <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800db06:	2301      	movs	r3, #1
 800db08:	e015      	b.n	800db36 <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff fdde 	bl	800d6de <ndefT4TPollerReadBytes>
 800db22:	4603      	mov	r3, r0
 800db24:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800db26:	8afb      	ldrh	r3, [r7, #22]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d003      	beq.n	800db34 <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800db34:	8afb      	ldrh	r3, [r7, #22]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b090      	sub	sp, #64	; 0x40
 800db42:	af02      	add	r7, sp, #8
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	461a      	mov	r2, r3
 800db4a:	460b      	mov	r3, r1
 800db4c:	817b      	strh	r3, [r7, #10]
 800db4e:	4613      	mov	r3, r2
 800db50:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d015      	beq.n	800db84 <ndefT4TPollerWriteBinary+0x46>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <ndefT4TPollerWriteBinary+0x2a>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	785b      	ldrb	r3, [r3, #1]
 800db64:	2b20      	cmp	r3, #32
 800db66:	d003      	beq.n	800db70 <ndefT4TPollerWriteBinary+0x32>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d109      	bne.n	800db84 <ndefT4TPollerWriteBinary+0x46>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800db76:	7a7a      	ldrb	r2, [r7, #9]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d803      	bhi.n	800db84 <ndefT4TPollerWriteBinary+0x46>
 800db7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db80:	2b00      	cmp	r3, #0
 800db82:	da01      	bge.n	800db88 <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800db84:	2307      	movs	r3, #7
 800db86:	e019      	b.n	800dbbc <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	4619      	mov	r1, r3
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff fa8a 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800db94:	6938      	ldr	r0, [r7, #16]
 800db96:	7a7a      	ldrb	r2, [r7, #9]
 800db98:	8979      	ldrh	r1, [r7, #10]
 800db9a:	f107 0310 	add.w	r3, r7, #16
 800db9e:	3304      	adds	r3, #4
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	4613      	mov	r3, r2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	f00d fb1e 	bl	801b1e6 <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800dbaa:	f107 0310 	add.w	r3, r7, #16
 800dbae:	4619      	mov	r1, r3
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f7ff faa8 	bl	800d106 <ndefT4TTransceiveTxRx>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800dbba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3738      	adds	r7, #56	; 0x38
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b090      	sub	sp, #64	; 0x40
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d016      	beq.n	800dc06 <ndefT4TPollerWriteBinaryODO+0x42>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d103      	bne.n	800dbe8 <ndefT4TPollerWriteBinaryODO+0x24>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	2b20      	cmp	r3, #32
 800dbe6:	d003      	beq.n	800dbf0 <ndefT4TPollerWriteBinaryODO+0x2c>
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d10a      	bne.n	800dc06 <ndefT4TPollerWriteBinaryODO+0x42>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dbf6:	78fa      	ldrb	r2, [r7, #3]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d804      	bhi.n	800dc06 <ndefT4TPollerWriteBinaryODO+0x42>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d301      	bcc.n	800dc0a <ndefT4TPollerWriteBinaryODO+0x46>
    {
        return ERR_PARAM;
 800dc06:	2307      	movs	r3, #7
 800dc08:	e019      	b.n	800dc3e <ndefT4TPollerWriteBinaryODO+0x7a>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800dc0a:	f107 0310 	add.w	r3, r7, #16
 800dc0e:	4619      	mov	r1, r3
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f7ff fa49 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800dc16:	6938      	ldr	r0, [r7, #16]
 800dc18:	78fa      	ldrb	r2, [r7, #3]
 800dc1a:	f107 0310 	add.w	r3, r7, #16
 800dc1e:	3304      	adds	r3, #4
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	4613      	mov	r3, r2
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	68b9      	ldr	r1, [r7, #8]
 800dc28:	f00d fb11 	bl	801b24e <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800dc2c:	f107 0310 	add.w	r3, r7, #16
 800dc30:	4619      	mov	r1, r3
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f7ff fa67 	bl	800d106 <ndefT4TTransceiveTxRx>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800dc3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3738      	adds	r7, #56	; 0x38
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b088      	sub	sp, #32
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	60b9      	str	r1, [r7, #8]
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00e      	beq.n	800dc84 <ndefT4TPollerWriteBytes+0x3e>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d103      	bne.n	800dc76 <ndefT4TPollerWriteBytes+0x30>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	785b      	ldrb	r3, [r3, #1]
 800dc72:	2b20      	cmp	r3, #32
 800dc74:	d003      	beq.n	800dc7e <ndefT4TPollerWriteBytes+0x38>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d102      	bne.n	800dc84 <ndefT4TPollerWriteBytes+0x3e>
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800dc84:	2307      	movs	r3, #7
 800dc86:	e048      	b.n	800dd1a <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc8e:	d318      	bcc.n	800dcc2 <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dc96:	3b07      	subs	r3, #7
 800dc98:	697a      	ldr	r2, [r7, #20]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d905      	bls.n	800dcaa <ndefT4TPollerWriteBytes+0x64>
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dca4:	3b07      	subs	r3, #7
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	e001      	b.n	800dcae <ndefT4TPollerWriteBytes+0x68>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800dcb0:	7f7b      	ldrb	r3, [r7, #29]
 800dcb2:	693a      	ldr	r2, [r7, #16]
 800dcb4:	69b9      	ldr	r1, [r7, #24]
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff ff84 	bl	800dbc4 <ndefT4TPollerWriteBinaryODO>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	83fb      	strh	r3, [r7, #30]
 800dcc0:	e016      	b.n	800dcf0 <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dcc8:	461a      	mov	r2, r3
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d903      	bls.n	800dcd8 <ndefT4TPollerWriteBytes+0x92>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800dcd6:	e001      	b.n	800dcdc <ndefT4TPollerWriteBytes+0x96>
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	b299      	uxth	r1, r3
 800dce2:	7f7b      	ldrb	r3, [r7, #29]
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7ff ff29 	bl	800db3e <ndefT4TPollerWriteBinary>
 800dcec:	4603      	mov	r3, r0
 800dcee:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800dcf0:	8bfb      	ldrh	r3, [r7, #30]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800dcf6:	8bfb      	ldrh	r3, [r7, #30]
 800dcf8:	e00f      	b.n	800dd1a <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800dcfa:	7f7b      	ldrb	r3, [r7, #29]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	4413      	add	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800dd02:	7f7b      	ldrb	r3, [r7, #29]
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	4413      	add	r3, r2
 800dd08:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800dd0a:	7f7b      	ldrb	r3, [r7, #29]
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1b7      	bne.n	800dc88 <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00b      	beq.n	800dd4a <ndefT4TPollerWriteRawMessageLen+0x28>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d103      	bne.n	800dd42 <ndefT4TPollerWriteRawMessageLen+0x20>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	d005      	beq.n	800dd4e <ndefT4TPollerWriteRawMessageLen+0x2c>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d001      	beq.n	800dd4e <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800dd4a:	2307      	movs	r3, #7
 800dd4c:	e05f      	b.n	800de0e <ndefT4TPollerWriteRawMessageLen+0xec>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d006      	beq.n	800dd66 <ndefT4TPollerWriteRawMessageLen+0x44>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d001      	beq.n	800dd66 <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800dd62:	2321      	movs	r3, #33	; 0x21
 800dd64:	e053      	b.n	800de0e <ndefT4TPollerWriteRawMessageLen+0xec>
    }

    dataIt = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800dd70:	091b      	lsrs	r3, r3, #4
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	d12b      	bne.n	800ddd0 <ndefT4TPollerWriteRawMessageLen+0xae>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	0e1a      	lsrs	r2, r3, #24
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	3310      	adds	r3, #16
 800dd82:	443b      	add	r3, r7
 800dd84:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	0c1a      	lsrs	r2, r3, #16
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	b2d2      	uxtb	r2, r2
 800dd96:	3310      	adds	r3, #16
 800dd98:	443b      	add	r3, r7
 800dd9a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
 800dda0:	3301      	adds	r3, #1
 800dda2:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	0a1a      	lsrs	r2, r3, #8
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	3310      	adds	r3, #16
 800ddae:	443b      	add	r3, r7
 800ddb0:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ddb4:	7bfb      	ldrb	r3, [r7, #15]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	3310      	adds	r3, #16
 800ddc2:	443b      	add	r3, r7
 800ddc4:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ddc8:	7bfb      	ldrb	r3, [r7, #15]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	73fb      	strb	r3, [r7, #15]
 800ddce:	e014      	b.n	800ddfa <ndefT4TPollerWriteRawMessageLen+0xd8>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	0a1a      	lsrs	r2, r3, #8
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	3310      	adds	r3, #16
 800ddda:	443b      	add	r3, r7
 800dddc:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	3301      	adds	r3, #1
 800dde4:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	b2d2      	uxtb	r2, r2
 800ddec:	3310      	adds	r3, #16
 800ddee:	443b      	add	r3, r7
 800ddf0:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	f107 0208 	add.w	r2, r7, #8
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff ff1f 	bl	800dc46 <ndefT4TPollerWriteBytes>
 800de08:	4603      	mov	r3, r0
 800de0a:	81bb      	strh	r3, [r7, #12]
    return ret;
 800de0c:	89bb      	ldrh	r3, [r7, #12]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b086      	sub	sp, #24
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	60f8      	str	r0, [r7, #12]
 800de1e:	60b9      	str	r1, [r7, #8]
 800de20:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d011      	beq.n	800de4c <ndefT4TPollerWriteRawMessage+0x36>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d103      	bne.n	800de38 <ndefT4TPollerWriteRawMessage+0x22>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	2b20      	cmp	r3, #32
 800de36:	d003      	beq.n	800de40 <ndefT4TPollerWriteRawMessage+0x2a>
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d105      	bne.n	800de4c <ndefT4TPollerWriteRawMessage+0x36>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d104      	bne.n	800de50 <ndefT4TPollerWriteRawMessage+0x3a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800de4c:	2307      	movs	r3, #7
 800de4e:	e04b      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800de56:	2b01      	cmp	r3, #1
 800de58:	d006      	beq.n	800de68 <ndefT4TPollerWriteRawMessage+0x52>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800de60:	2b02      	cmp	r3, #2
 800de62:	d001      	beq.n	800de68 <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800de64:	2321      	movs	r3, #33	; 0x21
 800de66:	e03f      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800de68:	6879      	ldr	r1, [r7, #4]
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f000 f8dd 	bl	800e02a <ndefT4TPollerCheckAvailableSpace>
 800de70:	4603      	mov	r3, r0
 800de72:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800de74:	8afb      	ldrh	r3, [r7, #22]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800de7a:	2307      	movs	r3, #7
 800de7c:	e034      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800de7e:	6879      	ldr	r1, [r7, #4]
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 f90a 	bl	800e09a <ndefT4TPollerBeginWriteMessage>
 800de86:	4603      	mov	r3, r0
 800de88:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800de8a:	8afb      	ldrh	r3, [r7, #22]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d005      	beq.n	800de9c <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800de98:	8afb      	ldrh	r3, [r7, #22]
 800de9a:	e025      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d021      	beq.n	800dee6 <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7ff feca 	bl	800dc46 <ndefT4TPollerWriteBytes>
 800deb2:	4603      	mov	r3, r0
 800deb4:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800deb6:	8afb      	ldrh	r3, [r7, #22]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800dec4:	8afb      	ldrh	r3, [r7, #22]
 800dec6:	e00f      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f000 f91f 	bl	800e10e <ndefT4TPollerEndWriteMessage>
 800ded0:	4603      	mov	r3, r0
 800ded2:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800ded4:	8afb      	ldrh	r3, [r7, #22]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d005      	beq.n	800dee6 <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800dee2:	8afb      	ldrh	r3, [r7, #22]
 800dee4:	e000      	b.n	800dee8 <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 800dee6:	8afb      	ldrh	r3, [r7, #22]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00b      	beq.n	800df1a <ndefT4TPollerTagFormat+0x2a>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d103      	bne.n	800df12 <ndefT4TPollerTagFormat+0x22>
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	2b20      	cmp	r3, #32
 800df10:	d005      	beq.n	800df1e <ndefT4TPollerTagFormat+0x2e>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	2b01      	cmp	r3, #1
 800df18:	d001      	beq.n	800df1e <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 800df1a:	2307      	movs	r3, #7
 800df1c:	e03a      	b.n	800df94 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7ff fac8 	bl	800d4b4 <ndefT4TPollerSelectNdefTagApplication>
 800df24:	4603      	mov	r3, r0
 800df26:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df28:	8afb      	ldrh	r3, [r7, #22]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d001      	beq.n	800df32 <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 800df2e:	8afb      	ldrh	r3, [r7, #22]
 800df30:	e030      	b.n	800df94 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff f92a 	bl	800d18c <ndefT4TReadAndParseCCFile>
 800df38:	4603      	mov	r3, r0
 800df3a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df3c:	8afb      	ldrh	r3, [r7, #22]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 800df42:	8afb      	ldrh	r3, [r7, #22]
 800df44:	e026      	b.n	800df94 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3384      	adds	r3, #132	; 0x84
 800df4a:	4619      	mov	r1, r3
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f7ff fb0b 	bl	800d568 <ndefT4TPollerSelectFile>
 800df52:	4603      	mov	r3, r0
 800df54:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df56:	8afb      	ldrh	r3, [r7, #22]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 800df5c:	8afb      	ldrh	r3, [r7, #22]
 800df5e:	e019      	b.n	800df94 <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 800df60:	f107 0310 	add.w	r3, r7, #16
 800df64:	2204      	movs	r2, #4
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f00d fa67 	bl	801b43c <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800df74:	091b      	lsrs	r3, r3, #4
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d101      	bne.n	800df80 <ndefT4TPollerTagFormat+0x90>
 800df7c:	2304      	movs	r3, #4
 800df7e:	e000      	b.n	800df82 <ndefT4TPollerTagFormat+0x92>
 800df80:	2302      	movs	r3, #2
 800df82:	f107 0210 	add.w	r2, r7, #16
 800df86:	2100      	movs	r1, #0
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f7ff fe5c 	bl	800dc46 <ndefT4TPollerWriteBytes>
 800df8e:	4603      	mov	r3, r0
 800df90:	82fb      	strh	r3, [r7, #22]
    return ret;
 800df92:	8afb      	ldrh	r3, [r7, #22]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 800df9c:	b5b0      	push	{r4, r5, r7, lr}
 800df9e:	b092      	sub	sp, #72	; 0x48
 800dfa0:	af06      	add	r7, sp, #24
 800dfa2:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00b      	beq.n	800dfc2 <ndefT4TPollerCheckPresence+0x26>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d103      	bne.n	800dfba <ndefT4TPollerCheckPresence+0x1e>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	2b20      	cmp	r3, #32
 800dfb8:	d005      	beq.n	800dfc6 <ndefT4TPollerCheckPresence+0x2a>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d001      	beq.n	800dfc6 <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 800dfc2:	2307      	movs	r3, #7
 800dfc4:	e02d      	b.n	800e022 <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff f86b 	bl	800d0a8 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 800dfd2:	68b8      	ldr	r0, [r7, #8]
 800dfd4:	f107 0308 	add.w	r3, r7, #8
 800dfd8:	3304      	adds	r3, #4
 800dfda:	2201      	movs	r2, #1
 800dfdc:	2100      	movs	r1, #0
 800dfde:	f00d f878 	bl	801b0d2 <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800dff4:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 800dff6:	466d      	mov	r5, sp
 800dff8:	f107 0418 	add.w	r4, r7, #24
 800dffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	f107 0308 	add.w	r3, r7, #8
 800e008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e00a:	f003 faff 	bl	801160c <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 800e00e:	f00a fb47 	bl	80186a0 <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 800e012:	f003 fb4b 	bl	80116ac <rfalIsoDepGetApduTransceiveStatus>
 800e016:	4603      	mov	r3, r0
 800e018:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 800e01a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d0f6      	beq.n	800e00e <ndefT4TPollerCheckPresence+0x72>

    return ret;
 800e020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800e022:	4618      	mov	r0, r3
 800e024:	3730      	adds	r7, #48	; 0x30
 800e026:	46bd      	mov	sp, r7
 800e028:	bdb0      	pop	{r4, r5, r7, pc}

0800e02a <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00b      	beq.n	800e052 <ndefT4TPollerCheckAvailableSpace+0x28>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d103      	bne.n	800e04a <ndefT4TPollerCheckAvailableSpace+0x20>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	785b      	ldrb	r3, [r3, #1]
 800e046:	2b20      	cmp	r3, #32
 800e048:	d005      	beq.n	800e056 <ndefT4TPollerCheckAvailableSpace+0x2c>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d001      	beq.n	800e056 <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 800e052:	2307      	movs	r3, #7
 800e054:	e01c      	b.n	800e090 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 800e060:	2321      	movs	r3, #33	; 0x21
 800e062:	e015      	b.n	800e090 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e06a:	091b      	lsrs	r3, r3, #4
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d101      	bne.n	800e076 <ndefT4TPollerCheckAvailableSpace+0x4c>
 800e072:	2304      	movs	r3, #4
 800e074:	e000      	b.n	800e078 <ndefT4TPollerCheckAvailableSpace+0x4e>
 800e076:	2302      	movs	r3, #2
 800e078:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 800e07a:	7bfa      	ldrb	r2, [r7, #15]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	441a      	add	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e086:	429a      	cmp	r2, r3
 800e088:	d901      	bls.n	800e08e <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e000      	b.n	800e090 <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	bc80      	pop	{r7}
 800e098:	4770      	bx	lr

0800e09a <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00b      	beq.n	800e0c2 <ndefT4TPollerBeginWriteMessage+0x28>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d103      	bne.n	800e0ba <ndefT4TPollerBeginWriteMessage+0x20>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	785b      	ldrb	r3, [r3, #1]
 800e0b6:	2b20      	cmp	r3, #32
 800e0b8:	d005      	beq.n	800e0c6 <ndefT4TPollerBeginWriteMessage+0x2c>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d001      	beq.n	800e0c6 <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800e0c2:	2307      	movs	r3, #7
 800e0c4:	e01f      	b.n	800e106 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d006      	beq.n	800e0de <ndefT4TPollerBeginWriteMessage+0x44>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d001      	beq.n	800e0de <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 800e0da:	2321      	movs	r3, #33	; 0x21
 800e0dc:	e013      	b.n	800e106 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 800e0de:	2100      	movs	r1, #0
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff fe1e 	bl	800dd22 <ndefT4TPollerWriteRawMessageLen>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e0ea:	89fb      	ldrh	r3, [r7, #14]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d005      	beq.n	800e0fc <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e0f8:	89fb      	ldrh	r3, [r7, #14]
 800e0fa:	e004      	b.n	800e106 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00b      	beq.n	800e136 <ndefT4TPollerEndWriteMessage+0x28>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d103      	bne.n	800e12e <ndefT4TPollerEndWriteMessage+0x20>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	785b      	ldrb	r3, [r3, #1]
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	d005      	beq.n	800e13a <ndefT4TPollerEndWriteMessage+0x2c>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d001      	beq.n	800e13a <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800e136:	2307      	movs	r3, #7
 800e138:	e025      	b.n	800e186 <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e140:	2b01      	cmp	r3, #1
 800e142:	d001      	beq.n	800e148 <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 800e144:	2321      	movs	r3, #33	; 0x21
 800e146:	e01e      	b.n	800e186 <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff fde9 	bl	800dd22 <ndefT4TPollerWriteRawMessageLen>
 800e150:	4603      	mov	r3, r0
 800e152:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e154:	89fb      	ldrh	r3, [r7, #14]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d005      	beq.n	800e166 <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e162:	89fb      	ldrh	r3, [r7, #14]
 800e164:	e00f      	b.n	800e186 <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <ndefT4TPollerEndWriteMessage+0x6e>
 800e178:	2201      	movs	r2, #1
 800e17a:	e000      	b.n	800e17e <ndefT4TPollerEndWriteMessage+0x70>
 800e17c:	2202      	movs	r2, #2
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b08c      	sub	sp, #48	; 0x30
 800e192:	af02      	add	r7, sp, #8
 800e194:	60f8      	str	r0, [r7, #12]
 800e196:	60b9      	str	r1, [r7, #8]
 800e198:	607a      	str	r2, [r7, #4]
 800e19a:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 800e19c:	2307      	movs	r3, #7
 800e19e:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 80ef 	beq.w	800e38e <ndefT5TPollerReadBytes+0x200>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f000 80e9 	beq.w	800e38e <ndefT5TPollerReadBytes+0x200>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 80e5 	beq.w	800e38e <ndefT5TPollerReadBytes+0x200>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f000 80e1 	beq.w	800e38e <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e1d2:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 800e1d4:	8b7b      	ldrh	r3, [r7, #26]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 800e1da:	2308      	movs	r3, #8
 800e1dc:	e0e3      	b.n	800e3a6 <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 800e1de:	8b7b      	ldrh	r3, [r7, #26]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 800e1e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e1ea:	8b7a      	ldrh	r2, [r7, #26]
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
 800e1f0:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e1f8:	8b7b      	ldrh	r3, [r7, #26]
 800e1fa:	3303      	adds	r3, #3
 800e1fc:	b298      	uxth	r0, r3
 800e1fe:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e200:	f107 0312 	add.w	r3, r7, #18
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4603      	mov	r3, r0
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f001 f932 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800e20e:	4603      	mov	r3, r0
 800e210:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800e212:	8afb      	ldrh	r3, [r7, #22]
 800e214:	2b00      	cmp	r3, #0
 800e216:	f040 80ba 	bne.w	800e38e <ndefT5TPollerReadBytes+0x200>
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e220:	2b00      	cmp	r3, #0
 800e222:	f040 80b4 	bne.w	800e38e <ndefT5TPollerReadBytes+0x200>
 800e226:	8a7b      	ldrh	r3, [r7, #18]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 80b0 	beq.w	800e38e <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 800e22e:	8a7a      	ldrh	r2, [r7, #18]
 800e230:	8b3b      	ldrh	r3, [r7, #24]
 800e232:	4413      	add	r3, r2
 800e234:	b29a      	uxth	r2, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	3b01      	subs	r3, #1
 800e240:	b29b      	uxth	r3, r3
 800e242:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 800e244:	8a7b      	ldrh	r3, [r7, #18]
 800e246:	461a      	mov	r2, r3
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d202      	bcs.n	800e254 <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	b29b      	uxth	r3, r3
 800e252:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 800e254:	8a7b      	ldrh	r3, [r7, #18]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00e      	beq.n	800e278 <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	461a      	mov	r2, r3
 800e260:	8b3b      	ldrh	r3, [r7, #24]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	3301      	adds	r3, #1
 800e266:	33d0      	adds	r3, #208	; 0xd0
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	3304      	adds	r3, #4
 800e26e:	8a7a      	ldrh	r2, [r7, #18]
 800e270:	4619      	mov	r1, r3
 800e272:	6838      	ldr	r0, [r7, #0]
 800e274:	f00d f8ba 	bl	801b3ec <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800e278:	8a7b      	ldrh	r3, [r7, #18]
 800e27a:	461a      	mov	r2, r3
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	4413      	add	r3, r2
 800e280:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 800e282:	8a7b      	ldrh	r3, [r7, #18]
 800e284:	461a      	mov	r2, r3
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800e28c:	e036      	b.n	800e2fc <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 800e28e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e290:	3301      	adds	r3, #1
 800e292:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	3b01      	subs	r3, #1
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	4413      	add	r3, r2
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	441a      	add	r2, r3
 800e2a8:	8b7b      	ldrh	r3, [r7, #26]
 800e2aa:	3303      	adds	r3, #3
 800e2ac:	b298      	uxth	r0, r3
 800e2ae:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e2b0:	f107 0312 	add.w	r3, r7, #18
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f001 f8da 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	7d7a      	ldrb	r2, [r7, #21]
 800e2d8:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 800e2da:	8afb      	ldrh	r3, [r7, #22]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d153      	bne.n	800e388 <ndefT5TPollerReadBytes+0x1fa>
 800e2e0:	8a7b      	ldrh	r3, [r7, #18]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d050      	beq.n	800e388 <ndefT5TPollerReadBytes+0x1fa>
 800e2e6:	7d3b      	ldrb	r3, [r7, #20]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d14d      	bne.n	800e388 <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 800e2ec:	8b7b      	ldrh	r3, [r7, #26]
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 800e2f4:	8b7b      	ldrh	r3, [r7, #26]
 800e2f6:	6a3a      	ldr	r2, [r7, #32]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800e2fc:	8b7b      	ldrh	r3, [r7, #26]
 800e2fe:	3302      	adds	r3, #2
 800e300:	6a3a      	ldr	r2, [r7, #32]
 800e302:	429a      	cmp	r2, r3
 800e304:	d2c3      	bcs.n	800e28e <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 800e306:	e03f      	b.n	800e388 <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 800e308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e30a:	3301      	adds	r3, #1
 800e30c:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e314:	8b7b      	ldrh	r3, [r7, #26]
 800e316:	3303      	adds	r3, #3
 800e318:	b298      	uxth	r0, r3
 800e31a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e31c:	f107 0312 	add.w	r3, r7, #18
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	4603      	mov	r3, r0
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f001 f8a4 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800e32a:	4603      	mov	r3, r0
 800e32c:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 800e32e:	8afb      	ldrh	r3, [r7, #22]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d12c      	bne.n	800e38e <ndefT5TPollerReadBytes+0x200>
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d127      	bne.n	800e38e <ndefT5TPollerReadBytes+0x200>
 800e33e:	8a7b      	ldrh	r3, [r7, #18]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d024      	beq.n	800e38e <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 800e344:	8a7b      	ldrh	r3, [r7, #18]
 800e346:	3b01      	subs	r3, #1
 800e348:	b29b      	uxth	r3, r3
 800e34a:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 800e34c:	8a7b      	ldrh	r3, [r7, #18]
 800e34e:	461a      	mov	r2, r3
 800e350:	6a3b      	ldr	r3, [r7, #32]
 800e352:	4293      	cmp	r3, r2
 800e354:	d202      	bcs.n	800e35c <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 800e35c:	8a7b      	ldrh	r3, [r7, #18]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d008      	beq.n	800e374 <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	18d0      	adds	r0, r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	33d5      	adds	r3, #213	; 0xd5
 800e36c:	8a7a      	ldrh	r2, [r7, #18]
 800e36e:	4619      	mov	r1, r3
 800e370:	f00d f83c 	bl	801b3ec <memcpy>
                    }
                    lvRcvLen   += nbRead;
 800e374:	8a7b      	ldrh	r3, [r7, #18]
 800e376:	461a      	mov	r2, r3
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	4413      	add	r3, r2
 800e37c:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 800e37e:	8a7b      	ldrh	r3, [r7, #18]
 800e380:	461a      	mov	r2, r3
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	1a9b      	subs	r3, r3, r2
 800e386:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 800e388:	6a3b      	ldr	r3, [r7, #32]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1bc      	bne.n	800e308 <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d101      	bne.n	800e398 <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 800e394:	2300      	movs	r3, #0
 800e396:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	601a      	str	r2, [r3, #0]
    }
    return result;
 800e3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3728      	adds	r7, #40	; 0x28
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b086      	sub	sp, #24
 800e3b2:	af02      	add	r7, sp, #8
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d006      	beq.n	800e3cc <ndefT5TPollerContextInitialization+0x1e>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <ndefT5TPollerContextInitialization+0x1e>
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b03      	cmp	r3, #3
 800e3ca:	d001      	beq.n	800e3d0 <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800e3cc:	2307      	movs	r3, #7
 800e3ce:	e096      	b.n	800e4fe <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2278      	movs	r2, #120	; 0x78
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f00d f808 	bl	801b3ec <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	1cda      	adds	r2, r3, #3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e41c:	f107 030c 	add.w	r3, r7, #12
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	2323      	movs	r3, #35	; 0x23
 800e424:	2100      	movs	r1, #0
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f001 f823 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800e42c:	4603      	mov	r3, r0
 800e42e:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 800e430:	89fb      	ldrh	r3, [r7, #14]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d019      	beq.n	800e46a <ndefT5TPollerContextInitialization+0xbc>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	7a5b      	ldrb	r3, [r3, #9]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d115      	bne.n	800e46a <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2201      	movs	r2, #1
 800e442:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	2323      	movs	r3, #35	; 0x23
 800e454:	2100      	movs	r1, #0
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 f80b 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800e45c:	4603      	mov	r3, r0
 800e45e:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 800e460:	89fb      	ldrh	r3, [r7, #14]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 800e466:	89fb      	ldrh	r3, [r7, #14]
 800e468:	e049      	b.n	800e4fe <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 800e46a:	89bb      	ldrh	r3, [r7, #12]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d915      	bls.n	800e49c <ndefT5TPollerContextInitialization+0xee>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800e476:	2b00      	cmp	r3, #0
 800e478:	d110      	bne.n	800e49c <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 800e47a:	89bb      	ldrh	r3, [r7, #12]
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	3b01      	subs	r3, #1
 800e480:	b2da      	uxtb	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3303      	adds	r3, #3
 800e48c:	4619      	mov	r1, r3
 800e48e:	2002      	movs	r0, #2
 800e490:	f008 fef2 	bl	8017278 <rfalNfcvPollerSelect>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <ndefT5TPollerContextInitialization+0xf2>
 800e49a:	e005      	b.n	800e4a8 <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 800e49c:	230b      	movs	r3, #11
 800e49e:	e02e      	b.n	800e4fe <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800e4b6:	f083 0301 	eor.w	r3, r3, #1
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00a      	beq.n	800e4d6 <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 f822 	bl	800f50c <ndefT5TGetSystemInformation>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d103      	bne.n	800e4d6 <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e4dc:	f083 0301 	eor.w	r3, r3, #1
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f001 f80f 	bl	800f50c <ndefT5TGetSystemInformation>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d103      	bne.n	800e4fc <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b08a      	sub	sp, #40	; 0x28
 800e50a:	af02      	add	r7, sp, #8
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 800e510:	2305      	movs	r3, #5
 800e512:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <ndefT5TPollerNdefDetect+0x1c>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d001      	beq.n	800e526 <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 800e522:	2307      	movs	r3, #7
 800e524:	e203      	b.n	800e92e <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d011      	beq.n	800e578 <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2200      	movs	r2, #0
 800e558:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	2200      	movs	r2, #0
 800e564:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	2200      	movs	r2, #0
 800e56a:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2200      	movs	r2, #0
 800e570:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2200      	movs	r2, #0
 800e576:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800e57e:	f107 0308 	add.w	r3, r7, #8
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4613      	mov	r3, r2
 800e586:	2208      	movs	r2, #8
 800e588:	2100      	movs	r1, #0
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff fdff 	bl	800e18e <ndefT5TPollerReadBytes>
 800e590:	4603      	mov	r3, r0
 800e592:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e594:	8a3b      	ldrh	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	f040 818e 	bne.w	800e8b8 <ndefT5TPollerNdefDetect+0x3b2>
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	2b08      	cmp	r3, #8
 800e5a0:	f040 818a 	bne.w	800e8b8 <ndefT5TPollerNdefDetect+0x3b2>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e5aa:	2be1      	cmp	r3, #225	; 0xe1
 800e5ac:	d005      	beq.n	800e5ba <ndefT5TPollerNdefDetect+0xb4>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e5b4:	2be2      	cmp	r3, #226	; 0xe2
 800e5b6:	f040 817f 	bne.w	800e8b8 <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e5cc:	099b      	lsrs	r3, r3, #6
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e5dc:	091b      	lsrs	r3, r3, #4
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 0303 	and.w	r3, r3, #3
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e5f2:	089b      	lsrs	r3, r3, #2
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	f003 0303 	and.w	r3, r3, #3
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e608:	f003 0303 	and.w	r3, r3, #3
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e628:	f003 0301 	and.w	r3, r3, #1
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bf14      	ite	ne
 800e630:	2301      	movne	r3, #1
 800e632:	2300      	moveq	r3, #0
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e642:	089b      	lsrs	r3, r3, #2
 800e644:	b2db      	uxtb	r3, r3
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	bf14      	ite	ne
 800e64e:	2301      	movne	r3, #1
 800e650:	2300      	moveq	r3, #0
 800e652:	b2da      	uxtb	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e660:	08db      	lsrs	r3, r3, #3
 800e662:	b2db      	uxtb	r3, r3
 800e664:	f003 0301 	and.w	r3, r3, #1
 800e668:	2b00      	cmp	r3, #0
 800e66a:	bf14      	ite	ne
 800e66c:	2301      	movne	r3, #1
 800e66e:	2300      	moveq	r3, #0
 800e670:	b2da      	uxtb	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e67e:	091b      	lsrs	r3, r3, #4
 800e680:	b2db      	uxtb	r3, r3
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	bf14      	ite	ne
 800e68a:	2301      	movne	r3, #1
 800e68c:	2300      	moveq	r3, #0
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d02a      	beq.n	800e6fe <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2204      	movs	r2, #4
 800e6ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6b6:	2bff      	cmp	r3, #255	; 0xff
 800e6b8:	d134      	bne.n	800e724 <ndefT5TPollerNdefDetect+0x21e>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d02f      	beq.n	800e724 <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d02a      	beq.n	800e724 <ndefT5TPollerNdefDetect+0x21e>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800e6d4:	089b      	lsrs	r3, r3, #2
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	f003 0301 	and.w	r3, r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d021      	beq.n	800e724 <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800e6ee:	fb02 f303 	mul.w	r3, r2, r3
 800e6f2:	08db      	lsrs	r3, r3, #3
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e6fc:	e012      	b.n	800e724 <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2208      	movs	r2, #8
 800e702:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	021b      	lsls	r3, r3, #8
 800e710:	b29a      	uxth	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4413      	add	r3, r2
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d025      	beq.n	800e77a <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800e734:	089b      	lsrs	r3, r3, #2
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d01c      	beq.n	800e77a <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e74c:	4619      	mov	r1, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800e754:	fb01 f303 	mul.w	r3, r1, r3
 800e758:	08db      	lsrs	r3, r3, #3
 800e75a:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d10c      	bne.n	800e77a <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800e766:	2b00      	cmp	r3, #0
 800e768:	d007      	beq.n	800e77a <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e788:	461a      	mov	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e796:	617b      	str	r3, [r7, #20]
        bExit     = false;
 800e798:	2300      	movs	r3, #0
 800e79a:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 800e79c:	f107 020c 	add.w	r2, r7, #12
 800e7a0:	f107 0308 	add.w	r3, r7, #8
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	2204      	movs	r2, #4
 800e7aa:	6979      	ldr	r1, [r7, #20]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff fcee 	bl	800e18e <ndefT5TPollerReadBytes>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 800e7b6:	8a3b      	ldrh	r3, [r7, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f040 8085 	bne.w	800e8c8 <ndefT5TPollerNdefDetect+0x3c2>
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	f040 8081 	bne.w	800e8c8 <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 800e7ca:	7b7b      	ldrb	r3, [r7, #13]
 800e7cc:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 800e7ce:	8b7b      	ldrh	r3, [r7, #26]
 800e7d0:	2bff      	cmp	r3, #255	; 0xff
 800e7d2:	d10a      	bne.n	800e7ea <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 800e7d4:	7bbb      	ldrb	r3, [r7, #14]
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	021b      	lsls	r3, r3, #8
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	4413      	add	r3, r2
 800e7e2:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 800e7e4:	8bbb      	ldrh	r3, [r7, #28]
 800e7e6:	3302      	adds	r3, #2
 800e7e8:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 800e7ea:	7b3b      	ldrb	r3, [r7, #12]
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d142      	bne.n	800e876 <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 800e7fc:	8bba      	ldrh	r2, [r7, #28]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	441a      	add	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 800e808:	8b7a      	ldrh	r2, [r7, #26]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 800e810:	2300      	movs	r3, #0
 800e812:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 800e814:	8b7b      	ldrh	r3, [r7, #26]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d117      	bne.n	800e84a <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e820:	2b00      	cmp	r3, #0
 800e822:	d109      	bne.n	800e838 <ndefT5TPollerNdefDetect+0x332>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d104      	bne.n	800e838 <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800e836:	e005      	b.n	800e844 <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 800e840:	2305      	movs	r3, #5
 800e842:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 800e844:	2301      	movs	r3, #1
 800e846:	74fb      	strb	r3, [r7, #19]
 800e848:	e02b      	b.n	800e8a2 <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10d      	bne.n	800e870 <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d104      	bne.n	800e868 <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2202      	movs	r2, #2
 800e862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800e866:	e003      	b.n	800e870 <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2203      	movs	r2, #3
 800e86c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 800e870:	2301      	movs	r3, #1
 800e872:	74fb      	strb	r3, [r7, #19]
 800e874:	e015      	b.n	800e8a2 <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 800e876:	7b3b      	ldrb	r3, [r7, #12]
 800e878:	2bfe      	cmp	r3, #254	; 0xfe
 800e87a:	d104      	bne.n	800e886 <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 800e87c:	2300      	movs	r3, #0
 800e87e:	617b      	str	r3, [r7, #20]
                bExit     = true;
 800e880:	2301      	movs	r3, #1
 800e882:	74fb      	strb	r3, [r7, #19]
 800e884:	e00d      	b.n	800e8a2 <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 800e886:	7b3b      	ldrb	r3, [r7, #12]
 800e888:	2bfd      	cmp	r3, #253	; 0xfd
 800e88a:	d106      	bne.n	800e89a <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 800e88c:	8bba      	ldrh	r2, [r7, #28]
 800e88e:	8b7b      	ldrh	r3, [r7, #26]
 800e890:	4413      	add	r3, r2
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	4413      	add	r3, r2
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	e003      	b.n	800e8a2 <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 800e89a:	2300      	movs	r3, #0
 800e89c:	617b      	str	r3, [r7, #20]
                bExit = true;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00f      	beq.n	800e8c8 <ndefT5TPollerNdefDetect+0x3c2>
 800e8a8:	7cfb      	ldrb	r3, [r7, #19]
 800e8aa:	f083 0301 	eor.w	r3, r3, #1
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f47f af73 	bne.w	800e79c <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e8b6:	e007      	b.n	800e8c8 <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 800e8b8:	2305      	movs	r3, #5
 800e8ba:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 800e8bc:	8a3b      	ldrh	r3, [r7, #16]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 800e8c2:	8a3b      	ldrh	r3, [r7, #16]
 800e8c4:	83fb      	strh	r3, [r7, #30]
 800e8c6:	e000      	b.n	800e8ca <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800e8c8:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e8d0:	00da      	lsls	r2, r3, #3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d026      	beq.n	800e92c <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e90c:	461a      	mov	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e914:	441a      	add	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e91c:	1ad2      	subs	r2, r2, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 800e92c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3720      	adds	r7, #32
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b088      	sub	sp, #32
 800e93a:	af02      	add	r7, sp, #8
 800e93c:	60f8      	str	r0, [r7, #12]
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	607a      	str	r2, [r7, #4]
 800e942:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d006      	beq.n	800e958 <ndefT5TPollerReadRawMessage+0x22>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	2b03      	cmp	r3, #3
 800e950:	d102      	bne.n	800e958 <ndefT5TPollerReadRawMessage+0x22>
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800e958:	2307      	movs	r3, #7
 800e95a:	e016      	b.n	800e98a <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	d201      	bcs.n	800e96c <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 800e968:	2301      	movs	r3, #1
 800e96a:	e00e      	b.n	800e98a <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f7ff fc05 	bl	800e18e <ndefT5TPollerReadBytes>
 800e984:	4603      	mov	r3, r0
 800e986:	82fb      	strh	r3, [r7, #22]
    return result;
 800e988:	8afb      	ldrh	r3, [r7, #22]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b08c      	sub	sp, #48	; 0x30
 800e996:	af02      	add	r7, sp, #8
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	60b9      	str	r1, [r7, #8]
 800e99c:	607a      	str	r2, [r7, #4]
 800e99e:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 800e9a0:	2305      	movs	r3, #5
 800e9a2:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00b      	beq.n	800e9ca <ndefT5TPollerWriteBytes+0x38>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d107      	bne.n	800e9ca <ndefT5TPollerWriteBytes+0x38>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d004      	beq.n	800e9ca <ndefT5TPollerWriteBytes+0x38>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d101      	bne.n	800e9ce <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 800e9ca:	2307      	movs	r3, #7
 800e9cc:	e0eb      	b.n	800eba6 <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e9d4:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 800e9d6:	8b7b      	ldrh	r3, [r7, #26]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 800e9dc:	2308      	movs	r3, #8
 800e9de:	e0e2      	b.n	800eba6 <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 800e9e0:	8b7b      	ldrh	r3, [r7, #26]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9e8:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 800e9ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ec:	8b7a      	ldrh	r2, [r7, #26]
 800e9ee:	fb02 f303 	mul.w	r3, r2, r3
 800e9f2:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 800e9f4:	8b3b      	ldrh	r3, [r7, #24]
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	f000 8081 	beq.w	800eb00 <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800ea04:	8b7b      	ldrh	r3, [r7, #26]
 800ea06:	3303      	adds	r3, #3
 800ea08:	b298      	uxth	r0, r3
 800ea0a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ea0c:	f107 0314 	add.w	r3, r7, #20
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	4603      	mov	r3, r0
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f000 fd2c 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800ea1e:	8afb      	ldrh	r3, [r7, #22]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d13b      	bne.n	800ea9c <ndefT5TPollerWriteBytes+0x10a>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d136      	bne.n	800ea9c <ndefT5TPollerWriteBytes+0x10a>
 800ea2e:	8abb      	ldrh	r3, [r7, #20]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d033      	beq.n	800ea9c <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 800ea34:	8aba      	ldrh	r2, [r7, #20]
 800ea36:	8b3b      	ldrh	r3, [r7, #24]
 800ea38:	4413      	add	r3, r2
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	3b01      	subs	r3, #1
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 800ea4a:	8abb      	ldrh	r3, [r7, #20]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d202      	bcs.n	800ea5a <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 800ea5a:	8abb      	ldrh	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d00e      	beq.n	800ea7e <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	461a      	mov	r2, r3
 800ea66:	8b3b      	ldrh	r3, [r7, #24]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	33d0      	adds	r3, #208	; 0xd0
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	4413      	add	r3, r2
 800ea72:	3304      	adds	r3, #4
 800ea74:	8aba      	ldrh	r2, [r7, #20]
 800ea76:	6a39      	ldr	r1, [r7, #32]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f00c fcb7 	bl	801b3ec <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800ea84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea86:	4619      	mov	r1, r3
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f000 fc49 	bl	800f320 <ndefT5TPollerWriteSingleBlock>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800ea92:	8afb      	ldrh	r3, [r7, #22]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00b      	beq.n	800eab0 <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 800ea98:	8afb      	ldrh	r3, [r7, #22]
 800ea9a:	e084      	b.n	800eba6 <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800ea9c:	8afb      	ldrh	r3, [r7, #22]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d002      	beq.n	800eaa8 <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 800eaa2:	8afb      	ldrh	r3, [r7, #22]
 800eaa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eaa6:	e001      	b.n	800eaac <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 800eaa8:	2307      	movs	r3, #7
 800eaaa:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800eaac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eaae:	e07a      	b.n	800eba6 <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 800eab0:	8abb      	ldrh	r3, [r7, #20]
 800eab2:	461a      	mov	r2, r3
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	1a9b      	subs	r3, r3, r2
 800eab8:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 800eaba:	8abb      	ldrh	r3, [r7, #20]
 800eabc:	461a      	mov	r2, r3
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	4413      	add	r3, r2
 800eac2:	623b      	str	r3, [r7, #32]
        startBlock++;
 800eac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eac6:	3301      	adds	r3, #1
 800eac8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 800eaca:	e019      	b.n	800eb00 <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 800eacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eace:	6a3a      	ldr	r2, [r7, #32]
 800ead0:	4619      	mov	r1, r3
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fc24 	bl	800f320 <ndefT5TPollerWriteSingleBlock>
 800ead8:	4603      	mov	r3, r0
 800eada:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 800eadc:	8afb      	ldrh	r3, [r7, #22]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10b      	bne.n	800eafa <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 800eae2:	8b7b      	ldrh	r3, [r7, #26]
 800eae4:	69fa      	ldr	r2, [r7, #28]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 800eaea:	8b7b      	ldrh	r3, [r7, #26]
 800eaec:	6a3a      	ldr	r2, [r7, #32]
 800eaee:	4413      	add	r3, r2
 800eaf0:	623b      	str	r3, [r7, #32]
            startBlock++;
 800eaf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eaf8:	e002      	b.n	800eb00 <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 800eafa:	8afb      	ldrh	r3, [r7, #22]
 800eafc:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800eafe:	e003      	b.n	800eb08 <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 800eb00:	8b7b      	ldrh	r3, [r7, #26]
 800eb02:	69fa      	ldr	r2, [r7, #28]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d2e1      	bcs.n	800eacc <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d045      	beq.n	800eb9a <ndefT5TPollerWriteBytes+0x208>
 800eb0e:	8b7b      	ldrh	r3, [r7, #26]
 800eb10:	69fa      	ldr	r2, [r7, #28]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d241      	bcs.n	800eb9a <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800eb1c:	8b7b      	ldrh	r3, [r7, #26]
 800eb1e:	3303      	adds	r3, #3
 800eb20:	b298      	uxth	r0, r3
 800eb22:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800eb24:	f107 0314 	add.w	r3, r7, #20
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f000 fca0 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800eb32:	4603      	mov	r3, r0
 800eb34:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800eb36:	8afb      	ldrh	r3, [r7, #22]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d124      	bne.n	800eb86 <ndefT5TPollerWriteBytes+0x1f4>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d11f      	bne.n	800eb86 <ndefT5TPollerWriteBytes+0x1f4>
 800eb46:	8abb      	ldrh	r3, [r7, #20]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d01c      	beq.n	800eb86 <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d006      	beq.n	800eb60 <ndefT5TPollerWriteBytes+0x1ce>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	33d5      	adds	r3, #213	; 0xd5
 800eb56:	69fa      	ldr	r2, [r7, #28]
 800eb58:	6a39      	ldr	r1, [r7, #32]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f00c fc46 	bl	801b3ec <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800eb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb68:	4619      	mov	r1, r3
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f000 fbd8 	bl	800f320 <ndefT5TPollerWriteSingleBlock>
 800eb70:	4603      	mov	r3, r0
 800eb72:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800eb74:	8afb      	ldrh	r3, [r7, #22]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 800eb7a:	8afb      	ldrh	r3, [r7, #22]
 800eb7c:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 800eb7e:	e00c      	b.n	800eb9a <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 800eb80:	2300      	movs	r3, #0
 800eb82:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 800eb84:	e009      	b.n	800eb9a <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800eb86:	8afb      	ldrh	r3, [r7, #22]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 800eb8c:	8afb      	ldrh	r3, [r7, #22]
 800eb8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eb90:	e001      	b.n	800eb96 <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 800eb92:	2307      	movs	r3, #7
 800eb94:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800eb96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb98:	e005      	b.n	800eba6 <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 800eba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3728      	adds	r7, #40	; 0x28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b086      	sub	sp, #24
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 800ebb8:	2307      	movs	r3, #7
 800ebba:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d071      	beq.n	800ecaa <ndefT5TPollerWriteRawMessageLen+0xfc>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b03      	cmp	r3, #3
 800ebcc:	d16d      	bne.n	800ecaa <ndefT5TPollerWriteRawMessageLen+0xfc>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d007      	beq.n	800ebe8 <ndefT5TPollerWriteRawMessageLen+0x3a>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d002      	beq.n	800ebe8 <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 800ebe2:	2321      	movs	r3, #33	; 0x21
 800ebe4:	82fb      	strh	r3, [r7, #22]
 800ebe6:	e060      	b.n	800ecaa <ndefT5TPollerWriteRawMessageLen+0xfc>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 800ebe8:	7d7b      	ldrb	r3, [r7, #21]
 800ebea:	3318      	adds	r3, #24
 800ebec:	443b      	add	r3, r7
 800ebee:	2203      	movs	r2, #3
 800ebf0:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 800ebf4:	7d7b      	ldrb	r3, [r7, #21]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2bfe      	cmp	r3, #254	; 0xfe
 800ebfe:	d80a      	bhi.n	800ec16 <ndefT5TPollerWriteRawMessageLen+0x68>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 800ec00:	7d7b      	ldrb	r3, [r7, #21]
 800ec02:	683a      	ldr	r2, [r7, #0]
 800ec04:	b2d2      	uxtb	r2, r2
 800ec06:	3318      	adds	r3, #24
 800ec08:	443b      	add	r3, r7
 800ec0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ec0e:	7d7b      	ldrb	r3, [r7, #21]
 800ec10:	3301      	adds	r3, #1
 800ec12:	757b      	strb	r3, [r7, #21]
 800ec14:	e014      	b.n	800ec40 <ndefT5TPollerWriteRawMessageLen+0x92>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	0a1a      	lsrs	r2, r3, #8
 800ec1a:	7d7b      	ldrb	r3, [r7, #21]
 800ec1c:	b2d2      	uxtb	r2, r2
 800ec1e:	3318      	adds	r3, #24
 800ec20:	443b      	add	r3, r7
 800ec22:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ec26:	7d7b      	ldrb	r3, [r7, #21]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 800ec2c:	7d7b      	ldrb	r3, [r7, #21]
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	b2d2      	uxtb	r2, r2
 800ec32:	3318      	adds	r3, #24
 800ec34:	443b      	add	r3, r7
 800ec36:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ec3a:	7d7b      	ldrb	r3, [r7, #21]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d108      	bne.n	800ec58 <ndefT5TPollerWriteRawMessageLen+0xaa>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800ec46:	7d7b      	ldrb	r3, [r7, #21]
 800ec48:	3318      	adds	r3, #24
 800ec4a:	443b      	add	r3, r7
 800ec4c:	22fe      	movs	r2, #254	; 0xfe
 800ec4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800ec52:	7d7b      	ldrb	r3, [r7, #21]
 800ec54:	3301      	adds	r3, #1
 800ec56:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ec5e:	7d7b      	ldrb	r3, [r7, #21]
 800ec60:	f107 020c 	add.w	r2, r7, #12
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff fe94 	bl	800e992 <ndefT5TPollerWriteBytes>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 800ec6e:	8afb      	ldrh	r3, [r7, #22]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d11a      	bne.n	800ecaa <ndefT5TPollerWriteRawMessageLen+0xfc>
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d017      	beq.n	800ecaa <ndefT5TPollerWriteRawMessageLen+0xfc>
            {  /* T5T need specific terminator */
               len = 0U;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800ec7e:	7d7b      	ldrb	r3, [r7, #21]
 800ec80:	3318      	adds	r3, #24
 800ec82:	443b      	add	r3, r7
 800ec84:	22fe      	movs	r2, #254	; 0xfe
 800ec86:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 800ec8a:	7d7b      	ldrb	r3, [r7, #21]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	18d1      	adds	r1, r2, r3
 800ec9a:	7d7b      	ldrb	r3, [r7, #21]
 800ec9c:	f107 020c 	add.w	r2, r7, #12
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7ff fe76 	bl	800e992 <ndefT5TPollerWriteBytes>
 800eca6:	4603      	mov	r3, r0
 800eca8:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 800ecaa:	8afb      	ldrh	r3, [r7, #22]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d006      	beq.n	800ecd8 <ndefT5TPollerWriteRawMessage+0x24>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d102      	bne.n	800ecd8 <ndefT5TPollerWriteRawMessage+0x24>
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 800ecd8:	2307      	movs	r3, #7
 800ecda:	e04b      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d006      	beq.n	800ecf4 <ndefT5TPollerWriteRawMessage+0x40>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ecec:	2b02      	cmp	r3, #2
 800ecee:	d001      	beq.n	800ecf4 <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800ecf0:	2321      	movs	r3, #33	; 0x21
 800ecf2:	e03f      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f000 fa57 	bl	800f1aa <ndefT5TPollerCheckAvailableSpace>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800ed00:	8afb      	ldrh	r3, [r7, #22]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800ed06:	2307      	movs	r3, #7
 800ed08:	e034      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f000 fa81 	bl	800f214 <ndefT5TPollerBeginWriteMessage>
 800ed12:	4603      	mov	r3, r0
 800ed14:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 800ed16:	8afb      	ldrh	r3, [r7, #22]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d005      	beq.n	800ed28 <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 800ed24:	8afb      	ldrh	r3, [r7, #22]
 800ed26:	e025      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d021      	beq.n	800ed72 <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7ff fe2a 	bl	800e992 <ndefT5TPollerWriteBytes>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800ed42:	8afb      	ldrh	r3, [r7, #22]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d005      	beq.n	800ed54 <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800ed50:	8afb      	ldrh	r3, [r7, #22]
 800ed52:	e00f      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 800ed54:	6939      	ldr	r1, [r7, #16]
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f000 faaa 	bl	800f2b0 <ndefT5TPollerEndWriteMessage>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800ed60:	8afb      	ldrh	r3, [r7, #22]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d005      	beq.n	800ed72 <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800ed6e:	8afb      	ldrh	r3, [r7, #22]
 800ed70:	e000      	b.n	800ed74 <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 800ed72:	8afb      	ldrh	r3, [r7, #22]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <ndefT5TWriteCC+0x16>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d001      	beq.n	800ed96 <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 800ed92:	2307      	movs	r3, #7
 800ed94:	e0c9      	b.n	800ef2a <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	339c      	adds	r3, #156	; 0x9c
 800ed9a:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 800eda0:	7afb      	ldrb	r3, [r7, #11]
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	4413      	add	r3, r2
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800edac:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800edae:	7afb      	ldrb	r3, [r7, #11]
 800edb0:	3301      	adds	r3, #1
 800edb2:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800edba:	019b      	lsls	r3, r3, #6
 800edbc:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800edc4:	011b      	lsls	r3, r3, #4
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800edcc:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800edce:	4313      	orrs	r3, r2
 800edd0:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	f003 030c 	and.w	r3, r3, #12
 800ede0:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800ede2:	4313      	orrs	r3, r2
 800ede4:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edec:	f003 0303 	and.w	r3, r3, #3
 800edf0:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800edf2:	7afb      	ldrb	r3, [r7, #11]
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	4403      	add	r3, r0
 800edf8:	430a      	orrs	r2, r1
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800edfe:	7afb      	ldrb	r3, [r7, #11]
 800ee00:	3301      	adds	r3, #1
 800ee02:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee0a:	2b08      	cmp	r3, #8
 800ee0c:	d004      	beq.n	800ee18 <ndefT5TWriteCC+0x9c>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ee14:	b2d9      	uxtb	r1, r3
 800ee16:	e000      	b.n	800ee1a <ndefT5TWriteCC+0x9e>
 800ee18:	2100      	movs	r1, #0
 800ee1a:	7afb      	ldrb	r3, [r7, #11]
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	4413      	add	r3, r2
 800ee20:	460a      	mov	r2, r1
 800ee22:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ee24:	7afb      	ldrb	r3, [r7, #11]
 800ee26:	3301      	adds	r3, #1
 800ee28:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 800ee2a:	7afb      	ldrb	r3, [r7, #11]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	4413      	add	r3, r2
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <ndefT5TWriteCC+0xd8>
 800ee3e:	7afb      	ldrb	r3, [r7, #11]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	7afb      	ldrb	r3, [r7, #11]
 800ee48:	68f9      	ldr	r1, [r7, #12]
 800ee4a:	440b      	add	r3, r1
 800ee4c:	f042 0201 	orr.w	r2, r2, #1
 800ee50:	b2d2      	uxtb	r2, r2
 800ee52:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00a      	beq.n	800ee74 <ndefT5TWriteCC+0xf8>
 800ee5e:	7afb      	ldrb	r3, [r7, #11]
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	4413      	add	r3, r2
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	68f9      	ldr	r1, [r7, #12]
 800ee6a:	440b      	add	r3, r1
 800ee6c:	f042 0204 	orr.w	r2, r2, #4
 800ee70:	b2d2      	uxtb	r2, r2
 800ee72:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00a      	beq.n	800ee94 <ndefT5TWriteCC+0x118>
 800ee7e:	7afb      	ldrb	r3, [r7, #11]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	4413      	add	r3, r2
 800ee84:	781a      	ldrb	r2, [r3, #0]
 800ee86:	7afb      	ldrb	r3, [r7, #11]
 800ee88:	68f9      	ldr	r1, [r7, #12]
 800ee8a:	440b      	add	r3, r1
 800ee8c:	f042 0208 	orr.w	r2, r2, #8
 800ee90:	b2d2      	uxtb	r2, r2
 800ee92:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00a      	beq.n	800eeb4 <ndefT5TWriteCC+0x138>
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	4413      	add	r3, r2
 800eea4:	781a      	ldrb	r2, [r3, #0]
 800eea6:	7afb      	ldrb	r3, [r7, #11]
 800eea8:	68f9      	ldr	r1, [r7, #12]
 800eeaa:	440b      	add	r3, r1
 800eeac:	f042 0210 	orr.w	r2, r2, #16
 800eeb0:	b2d2      	uxtb	r2, r2
 800eeb2:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800eeb4:	7afb      	ldrb	r3, [r7, #11]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eec0:	2b08      	cmp	r3, #8
 800eec2:	d127      	bne.n	800ef14 <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 800eec4:	7afb      	ldrb	r3, [r7, #11]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	4413      	add	r3, r2
 800eeca:	2200      	movs	r2, #0
 800eecc:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800eece:	7afb      	ldrb	r3, [r7, #11]
 800eed0:	3301      	adds	r3, #1
 800eed2:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 800eed4:	7afb      	ldrb	r3, [r7, #11]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4413      	add	r3, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800eede:	7afb      	ldrb	r3, [r7, #11]
 800eee0:	3301      	adds	r3, #1
 800eee2:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eeea:	0a1b      	lsrs	r3, r3, #8
 800eeec:	b299      	uxth	r1, r3
 800eeee:	7afb      	ldrb	r3, [r7, #11]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	4413      	add	r3, r2
 800eef4:	b2ca      	uxtb	r2, r1
 800eef6:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800eef8:	7afb      	ldrb	r3, [r7, #11]
 800eefa:	3301      	adds	r3, #1
 800eefc:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800ef04:	7afb      	ldrb	r3, [r7, #11]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	b2ca      	uxtb	r2, r1
 800ef0c:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800ef0e:	7afb      	ldrb	r3, [r7, #11]
 800ef10:	3301      	adds	r3, #1
 800ef12:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7ff fd37 	bl	800e992 <ndefT5TPollerWriteBytes>
 800ef24:	4603      	mov	r3, r0
 800ef26:	813b      	strh	r3, [r7, #8]
    return ret;
 800ef28:	893b      	ldrh	r3, [r7, #8]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <ndefT5TPollerTagFormat+0x1a>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	2b03      	cmp	r3, #3
 800ef4c:	d001      	beq.n	800ef52 <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 800ef4e:	2307      	movs	r3, #7
 800ef50:	e103      	b.n	800f15a <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d011      	beq.n	800ef94 <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b08      	cmp	r3, #8
 800ef76:	d005      	beq.n	800ef84 <ndefT5TPollerTagFormat+0x50>
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	2b04      	cmp	r3, #4
 800ef7e:	d001      	beq.n	800ef84 <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 800ef80:	2307      	movs	r3, #7
 800ef82:	e0ea      	b.n	800f15a <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	337c      	adds	r3, #124	; 0x7c
 800ef88:	2214      	movs	r2, #20
 800ef8a:	68b9      	ldr	r1, [r7, #8]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f00c fa2d 	bl	801b3ec <memcpy>
 800ef92:	e09b      	b.n	800f0cc <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	22e1      	movs	r2, #225	; 0xe1
 800ef98:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800efe2:	f107 0314 	add.w	r3, r7, #20
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	2323      	movs	r3, #35	; 0x23
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	4613      	mov	r3, r2
 800efee:	2200      	movs	r2, #0
 800eff0:	2100      	movs	r1, #0
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f000 f9e7 	bl	800f3c6 <ndefT5TPollerReadMultipleBlocks>
 800eff8:	4603      	mov	r3, r0
 800effa:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 800effc:	8afb      	ldrh	r3, [r7, #22]
 800effe:	2b00      	cmp	r3, #0
 800f000:	bf0c      	ite	eq
 800f002:	2301      	moveq	r3, #1
 800f004:	2300      	movne	r3, #0
 800f006:	b2da      	uxtb	r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800f014:	2b00      	cmp	r3, #0
 800f016:	d056      	beq.n	800f0c6 <ndefT5TPollerTagFormat+0x192>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f01e:	089b      	lsrs	r3, r3, #2
 800f020:	b2db      	uxtb	r3, r3
 800f022:	f003 0301 	and.w	r3, r3, #1
 800f026:	2b00      	cmp	r3, #0
 800f028:	d04d      	beq.n	800f0c6 <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f030:	461a      	mov	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800f038:	fb02 f303 	mul.w	r3, r2, r3
 800f03c:	08db      	lsrs	r3, r3, #3
 800f03e:	b29a      	uxth	r2, r3
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d016      	beq.n	800f07e <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f056:	2bff      	cmp	r3, #255	; 0xff
 800f058:	d903      	bls.n	800f062 <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2208      	movs	r2, #8
 800f05e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d019      	beq.n	800f0a0 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f072:	3b01      	subs	r3, #1
 800f074:	b29a      	uxth	r2, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800f07c:	e010      	b.n	800f0a0 <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2204      	movs	r2, #4
 800f082:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f08c:	2bff      	cmp	r3, #255	; 0xff
 800f08e:	d907      	bls.n	800f0a0 <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	22ff      	movs	r2, #255	; 0xff
 800f09c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f0a6:	f083 0301 	eor.w	r3, r3, #1
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00c      	beq.n	800f0ca <ndefT5TPollerTagFormat+0x196>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0ba:	d906      	bls.n	800f0ca <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	22e2      	movs	r2, #226	; 0xe2
 800f0c0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f0c4:	e001      	b.n	800f0ca <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 800f0c6:	2305      	movs	r3, #5
 800f0c8:	e047      	b.n	800f15a <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800f0ca:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f7ff fe55 	bl	800ed7c <ndefT5TWriteCC>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800f0d6:	8afb      	ldrh	r3, [r7, #22]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01e      	beq.n	800f11a <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800f0e2:	f083 0301 	eor.w	r3, r3, #1
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d014      	beq.n	800f116 <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 800f0ec:	2014      	movs	r0, #20
 800f0ee:	f7f5 faf9 	bl	80046e4 <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f7ff fe3e 	bl	800ed7c <ndefT5TWriteCC>
 800f100:	4603      	mov	r3, r0
 800f102:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 800f104:	8afb      	ldrh	r3, [r7, #22]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d007      	beq.n	800f11a <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 800f112:	8afb      	ldrh	r3, [r7, #22]
 800f114:	e021      	b.n	800f15a <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 800f116:	8afb      	ldrh	r3, [r7, #22]
 800f118:	e01f      	b.n	800f15a <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f120:	461a      	mov	r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800f12e:	2304      	movs	r3, #4
 800f130:	4a0c      	ldr	r2, [pc, #48]	; (800f164 <ndefT5TPollerTagFormat+0x230>)
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f7ff fc2d 	bl	800e992 <ndefT5TPollerWriteBytes>
 800f138:	4603      	mov	r3, r0
 800f13a:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 800f13c:	8afb      	ldrh	r3, [r7, #22]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d10a      	bne.n	800f158 <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f148:	1c9a      	adds	r2, r3, #2
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 800f158:	8afb      	ldrh	r3, [r7, #22]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	0801d574 	.word	0x0801d574

0800f168 <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <ndefT5TPollerCheckPresence+0x16>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b03      	cmp	r3, #3
 800f17c:	d001      	beq.n	800f182 <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800f17e:	2307      	movs	r3, #7
 800f180:	e00f      	b.n	800f1a2 <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800f18c:	89f9      	ldrh	r1, [r7, #14]
 800f18e:	f107 030a 	add.w	r3, r7, #10
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	2323      	movs	r3, #35	; 0x23
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f96b 	bl	800f472 <ndefT5TPollerReadSingleBlock>
 800f19c:	4603      	mov	r3, r0
 800f19e:	81bb      	strh	r3, [r7, #12]

    return ret;
 800f1a0:	89bb      	ldrh	r3, [r7, #12]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b085      	sub	sp, #20
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d003      	beq.n	800f1c2 <ndefT5TPollerCheckAvailableSpace+0x18>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	d001      	beq.n	800f1c6 <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800f1c2:	2307      	movs	r3, #7
 800f1c4:	e021      	b.n	800f20a <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d101      	bne.n	800f1d4 <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800f1d0:	2321      	movs	r3, #33	; 0x21
 800f1d2:	e01a      	b.n	800f20a <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2bfe      	cmp	r3, #254	; 0xfe
 800f1d8:	d901      	bls.n	800f1de <ndefT5TPollerCheckAvailableSpace+0x34>
 800f1da:	2303      	movs	r3, #3
 800f1dc:	e000      	b.n	800f1e0 <ndefT5TPollerCheckAvailableSpace+0x36>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	441a      	add	r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f1f8:	6879      	ldr	r1, [r7, #4]
 800f1fa:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 800f1fe:	440b      	add	r3, r1
 800f200:	429a      	cmp	r2, r3
 800f202:	d901      	bls.n	800f208 <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3714      	adds	r7, #20
 800f20e:	46bd      	mov	sp, r7
 800f210:	bc80      	pop	{r7}
 800f212:	4770      	bx	lr

0800f214 <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <ndefT5TPollerBeginWriteMessage+0x18>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d001      	beq.n	800f230 <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f22c:	2307      	movs	r3, #7
 800f22e:	e03b      	b.n	800f2a8 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f236:	2b01      	cmp	r3, #1
 800f238:	d006      	beq.n	800f248 <ndefT5TPollerBeginWriteMessage+0x34>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f240:	2b02      	cmp	r3, #2
 800f242:	d001      	beq.n	800f248 <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800f244:	2321      	movs	r3, #33	; 0x21
 800f246:	e02f      	b.n	800f2a8 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 800f248:	2100      	movs	r1, #0
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fcaf 	bl	800ebae <ndefT5TPollerWriteRawMessageLen>
 800f250:	4603      	mov	r3, r0
 800f252:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f254:	89fb      	ldrh	r3, [r7, #14]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d005      	beq.n	800f266 <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f262:	89fb      	ldrh	r3, [r7, #14]
 800f264:	e020      	b.n	800f2a8 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	2bfe      	cmp	r3, #254	; 0xfe
 800f26a:	d901      	bls.n	800f270 <ndefT5TPollerBeginWriteMessage+0x5c>
 800f26c:	2303      	movs	r3, #3
 800f26e:	e000      	b.n	800f272 <ndefT5TPollerBeginWriteMessage+0x5e>
 800f270:	2301      	movs	r3, #1
 800f272:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f286:	1c5a      	adds	r2, r3, #1
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	441a      	add	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d003      	beq.n	800f2c8 <ndefT5TPollerEndWriteMessage+0x18>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d001      	beq.n	800f2cc <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f2c8:	2307      	movs	r3, #7
 800f2ca:	e025      	b.n	800f318 <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d001      	beq.n	800f2da <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800f2d6:	2321      	movs	r3, #33	; 0x21
 800f2d8:	e01e      	b.n	800f318 <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 800f2da:	6839      	ldr	r1, [r7, #0]
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff fc66 	bl	800ebae <ndefT5TPollerWriteRawMessageLen>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f2e6:	89fb      	ldrh	r3, [r7, #14]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d005      	beq.n	800f2f8 <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f2f4:	89fb      	ldrh	r3, [r7, #14]
 800f2f6:	e00f      	b.n	800f318 <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <ndefT5TPollerEndWriteMessage+0x5e>
 800f30a:	2201      	movs	r2, #1
 800f30c:	e000      	b.n	800f310 <ndefT5TPollerEndWriteMessage+0x60>
 800f30e:	2202      	movs	r2, #2
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b088      	sub	sp, #32
 800f324:	af02      	add	r7, sp, #8
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	460b      	mov	r3, r1
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d003      	beq.n	800f33c <ndefT5TPollerWriteSingleBlock+0x1c>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	2b03      	cmp	r3, #3
 800f33a:	d001      	beq.n	800f340 <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 800f33c:	2307      	movs	r3, #7
 800f33e:	e03e      	b.n	800f3be <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <ndefT5TPollerWriteSingleBlock+0x2e>
 800f34a:	2342      	movs	r3, #66	; 0x42
 800f34c:	e000      	b.n	800f350 <ndefT5TPollerWriteSingleBlock+0x30>
 800f34e:	2302      	movs	r3, #2
 800f350:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00e      	beq.n	800f37a <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f368:	897a      	ldrh	r2, [r7, #10]
 800f36a:	7d78      	ldrb	r0, [r7, #21]
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f00b fb78 	bl	801aa64 <rfalST25xVPollerM24LRWriteSingleBlock>
 800f374:	4603      	mov	r3, r0
 800f376:	82fb      	strh	r3, [r7, #22]
 800f378:	e020      	b.n	800f3bc <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f37a:	897b      	ldrh	r3, [r7, #10]
 800f37c:	2bff      	cmp	r3, #255	; 0xff
 800f37e:	d80f      	bhi.n	800f3a0 <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f386:	897b      	ldrh	r3, [r7, #10]
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f390:	7d78      	ldrb	r0, [r7, #21]
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f007 ffb2 	bl	80172fe <rfalNfcvPollerWriteSingleBlock>
 800f39a:	4603      	mov	r3, r0
 800f39c:	82fb      	strh	r3, [r7, #22]
 800f39e:	e00d      	b.n	800f3bc <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f3ac:	897a      	ldrh	r2, [r7, #10]
 800f3ae:	7d78      	ldrb	r0, [r7, #21]
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f008 f85d 	bl	8017472 <rfalNfcvPollerExtendedWriteSingleBlock>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f3bc:	8afb      	ldrh	r3, [r7, #22]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3718      	adds	r7, #24
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b08a      	sub	sp, #40	; 0x28
 800f3ca:	af04      	add	r7, sp, #16
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	607b      	str	r3, [r7, #4]
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	817b      	strh	r3, [r7, #10]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <ndefT5TPollerReadMultipleBlocks+0x20>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	2b03      	cmp	r3, #3
 800f3e4:	d001      	beq.n	800f3ea <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 800f3e6:	2307      	movs	r3, #7
 800f3e8:	e03f      	b.n	800f46a <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d011      	beq.n	800f418 <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f3fa:	7a78      	ldrb	r0, [r7, #9]
 800f3fc:	897a      	ldrh	r2, [r7, #10]
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	9302      	str	r3, [sp, #8]
 800f402:	8c3b      	ldrh	r3, [r7, #32]
 800f404:	9301      	str	r3, [sp, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	4603      	mov	r3, r0
 800f40c:	2002      	movs	r0, #2
 800f40e:	f00b fb89 	bl	801ab24 <rfalST25xVPollerM24LRReadMultipleBlocks>
 800f412:	4603      	mov	r3, r0
 800f414:	82fb      	strh	r3, [r7, #22]
 800f416:	e027      	b.n	800f468 <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f418:	897b      	ldrh	r3, [r7, #10]
 800f41a:	2bff      	cmp	r3, #255	; 0xff
 800f41c:	d812      	bhi.n	800f444 <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f424:	897b      	ldrh	r3, [r7, #10]
 800f426:	b2da      	uxtb	r2, r3
 800f428:	7a78      	ldrb	r0, [r7, #9]
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	9302      	str	r3, [sp, #8]
 800f42e:	8c3b      	ldrh	r3, [r7, #32]
 800f430:	9301      	str	r3, [sp, #4]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	4603      	mov	r3, r0
 800f438:	2002      	movs	r0, #2
 800f43a:	f007 ffaf 	bl	801739c <rfalNfcvPollerReadMultipleBlocks>
 800f43e:	4603      	mov	r3, r0
 800f440:	82fb      	strh	r3, [r7, #22]
 800f442:	e011      	b.n	800f468 <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f44a:	7a7b      	ldrb	r3, [r7, #9]
 800f44c:	b298      	uxth	r0, r3
 800f44e:	897a      	ldrh	r2, [r7, #10]
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	9302      	str	r3, [sp, #8]
 800f454:	8c3b      	ldrh	r3, [r7, #32]
 800f456:	9301      	str	r3, [sp, #4]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	4603      	mov	r3, r0
 800f45e:	2002      	movs	r0, #2
 800f460:	f008 f861 	bl	8017526 <rfalNfcvPollerExtendedReadMultipleBlocks>
 800f464:	4603      	mov	r3, r0
 800f466:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f468:	8afb      	ldrh	r3, [r7, #22]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b088      	sub	sp, #32
 800f476:	af02      	add	r7, sp, #8
 800f478:	60f8      	str	r0, [r7, #12]
 800f47a:	607a      	str	r2, [r7, #4]
 800f47c:	461a      	mov	r2, r3
 800f47e:	460b      	mov	r3, r1
 800f480:	817b      	strh	r3, [r7, #10]
 800f482:	4613      	mov	r3, r2
 800f484:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <ndefT5TPollerReadSingleBlock+0x22>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b03      	cmp	r3, #3
 800f492:	d001      	beq.n	800f498 <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 800f494:	2307      	movs	r3, #7
 800f496:	e035      	b.n	800f504 <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00e      	beq.n	800f4c0 <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f4a8:	897a      	ldrh	r2, [r7, #10]
 800f4aa:	6a3b      	ldr	r3, [r7, #32]
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	893b      	ldrh	r3, [r7, #8]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2002      	movs	r0, #2
 800f4b6:	f00b fa9c 	bl	801a9f2 <rfalST25xVPollerM24LRReadSingleBlock>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	82fb      	strh	r3, [r7, #22]
 800f4be:	e020      	b.n	800f502 <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800f4c0:	897b      	ldrh	r3, [r7, #10]
 800f4c2:	2bff      	cmp	r3, #255	; 0xff
 800f4c4:	d80f      	bhi.n	800f4e6 <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f4cc:	897b      	ldrh	r3, [r7, #10]
 800f4ce:	b2da      	uxtb	r2, r3
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	9301      	str	r3, [sp, #4]
 800f4d4:	893b      	ldrh	r3, [r7, #8]
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2002      	movs	r0, #2
 800f4dc:	f007 feee 	bl	80172bc <rfalNfcvPollerReadSingleBlock>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	82fb      	strh	r3, [r7, #22]
 800f4e4:	e00d      	b.n	800f502 <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f4ec:	897a      	ldrh	r2, [r7, #10]
 800f4ee:	6a3b      	ldr	r3, [r7, #32]
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	893b      	ldrh	r3, [r7, #8]
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2002      	movs	r0, #2
 800f4fa:	f007 ff84 	bl	8017406 <rfalNfcvPollerExtendedReadSingleBlock>
 800f4fe:	4603      	mov	r3, r0
 800f500:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800f502:	8afb      	ldrh	r3, [r7, #22]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b08e      	sub	sp, #56	; 0x38
 800f510:	af02      	add	r7, sp, #8
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	460b      	mov	r3, r1
 800f516:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <ndefT5TGetSystemInformation+0x1a>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b03      	cmp	r3, #3
 800f524:	d001      	beq.n	800f52a <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 800f526:	2307      	movs	r3, #7
 800f528:	e0ff      	b.n	800f72a <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 800f52a:	78fb      	ldrb	r3, [r7, #3]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d011      	beq.n	800f554 <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f536:	f107 0210 	add.w	r2, r7, #16
 800f53a:	f107 030e 	add.w	r3, r7, #14
 800f53e:	9301      	str	r3, [sp, #4]
 800f540:	2316      	movs	r3, #22
 800f542:	9300      	str	r3, [sp, #0]
 800f544:	4613      	mov	r3, r2
 800f546:	227f      	movs	r2, #127	; 0x7f
 800f548:	2002      	movs	r0, #2
 800f54a:	f008 f858 	bl	80175fe <rfalNfcvPollerExtendedGetSystemInformation>
 800f54e:	4603      	mov	r3, r0
 800f550:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f552:	e014      	b.n	800f57e <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <ndefT5TGetSystemInformation+0x56>
 800f55e:	200a      	movs	r0, #10
 800f560:	e000      	b.n	800f564 <ndefT5TGetSystemInformation+0x58>
 800f562:	2002      	movs	r0, #2
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f56a:	f107 0210 	add.w	r2, r7, #16
 800f56e:	f107 030e 	add.w	r3, r7, #14
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	2316      	movs	r3, #22
 800f576:	f008 f823 	bl	80175c0 <rfalNfcvPollerGetSystemInformation>
 800f57a:	4603      	mov	r3, r0
 800f57c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 800f57e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 800f584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f586:	e0d0      	b.n	800f72a <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 800f588:	f107 0310 	add.w	r3, r7, #16
 800f58c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	3301      	adds	r3, #1
 800f592:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	781a      	ldrb	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 800f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800f5a4:	78fb      	ldrb	r3, [r7, #3]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <ndefT5TGetSystemInformation+0xb4>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f5b0:	09db      	lsrs	r3, r3, #7
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 800f5bc:	230b      	movs	r3, #11
 800f5be:	e0b4      	b.n	800f72a <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	33c0      	adds	r3, #192	; 0xc0
 800f5c4:	2208      	movs	r2, #8
 800f5c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f00b ff0f 	bl	801b3ec <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 800f5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d007      	beq.n	800f5f2 <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 800f5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e4:	781a      	ldrb	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f5f8:	085b      	lsrs	r3, r3, #1
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d007      	beq.n	800f614 <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	781a      	ldrb	r2, [r3, #0]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	3301      	adds	r3, #1
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f61a:	089b      	lsrs	r3, r3, #2
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	f003 0301 	and.w	r3, r3, #1
 800f622:	2b00      	cmp	r3, #0
 800f624:	d043      	beq.n	800f6ae <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d102      	bne.n	800f636 <ndefT5TGetSystemInformation+0x12a>
 800f630:	78fb      	ldrb	r3, [r7, #3]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d01a      	beq.n	800f66c <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f644:	3301      	adds	r3, #1
 800f646:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f64e:	b21a      	sxth	r2, r3
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	021b      	lsls	r3, r3, #8
 800f656:	b21b      	sxth	r3, r3
 800f658:	4313      	orrs	r3, r2
 800f65a:	b21b      	sxth	r3, r3
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f666:	3301      	adds	r3, #1
 800f668:	62bb      	str	r3, [r7, #40]	; 0x28
 800f66a:	e008      	b.n	800f67e <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	b29a      	uxth	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	3301      	adds	r3, #1
 800f67c:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 800f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f680:	781a      	ldrb	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	3301      	adds	r3, #1
 800f68c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f694:	3301      	adds	r3, #1
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f6b4:	08db      	lsrs	r3, r3, #3
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	f003 0301 	and.w	r3, r3, #1
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d007      	beq.n	800f6d0 <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	781a      	ldrb	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 800f6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d028      	beq.n	800f728 <ndefT5TGetSystemInformation+0x21c>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800f6dc:	095b      	lsrs	r3, r3, #5
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d01f      	beq.n	800f728 <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	781a      	ldrb	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	781a      	ldrb	r2, [r3, #0]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 800f702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f704:	3301      	adds	r3, #1
 800f706:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 800f708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70a:	781a      	ldrb	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 800f712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f714:	3301      	adds	r3, #1
 800f716:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	781a      	ldrb	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	3301      	adds	r3, #1
 800f726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3730      	adds	r7, #48	; 0x30
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
	...

0800f734 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800f734:	b480      	push	{r7}
 800f736:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 800f738:	4b06      	ldr	r3, [pc, #24]	; (800f754 <rfalAnalogConfigInitialize+0x20>)
 800f73a:	4a07      	ldr	r2, [pc, #28]	; (800f758 <rfalAnalogConfigInitialize+0x24>)
 800f73c:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 800f73e:	4b05      	ldr	r3, [pc, #20]	; (800f754 <rfalAnalogConfigInitialize+0x20>)
 800f740:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800f744:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800f746:	4b03      	ldr	r3, [pc, #12]	; (800f754 <rfalAnalogConfigInitialize+0x20>)
 800f748:	2201      	movs	r2, #1
 800f74a:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800f74c:	bf00      	nop
 800f74e:	46bd      	mov	sp, r7
 800f750:	bc80      	pop	{r7}
 800f752:	4770      	bx	lr
 800f754:	2000327c 	.word	0x2000327c
 800f758:	0801d578 	.word	0x0801d578

0800f75c <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800f76a:	2300      	movs	r3, #0
 800f76c:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800f76e:	4b4b      	ldr	r3, [pc, #300]	; (800f89c <rfalSetAnalogConfig+0x140>)
 800f770:	799b      	ldrb	r3, [r3, #6]
 800f772:	f083 0301 	eor.w	r3, r3, #1
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d001      	beq.n	800f780 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800f77c:	2305      	movs	r3, #5
 800f77e:	e089      	b.n	800f894 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800f780:	f107 020e 	add.w	r2, r7, #14
 800f784:	88fb      	ldrh	r3, [r7, #6]
 800f786:	4611      	mov	r1, r2
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 f889 	bl	800f8a0 <rfalAnalogConfigSearch>
 800f78e:	4603      	mov	r3, r0
 800f790:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800f792:	7d3b      	ldrb	r3, [r7, #20]
 800f794:	2bff      	cmp	r3, #255	; 0xff
 800f796:	d07b      	beq.n	800f890 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800f798:	4b40      	ldr	r3, [pc, #256]	; (800f89c <rfalSetAnalogConfig+0x140>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	461a      	mov	r2, r3
 800f79e:	89fb      	ldrh	r3, [r7, #14]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800f7a4:	7d3b      	ldrb	r3, [r7, #20]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	89fb      	ldrh	r3, [r7, #14]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800f7b4:	4b39      	ldr	r3, [pc, #228]	; (800f89c <rfalSetAnalogConfig+0x140>)
 800f7b6:	889b      	ldrh	r3, [r3, #4]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	89fa      	ldrh	r2, [r7, #14]
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d201      	bcs.n	800f7c4 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e067      	b.n	800f894 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	757b      	strb	r3, [r7, #21]
 800f7c8:	e05d      	b.n	800f886 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800f7ca:	7d7b      	ldrb	r3, [r7, #21]
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	693a      	ldr	r2, [r7, #16]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	021b      	lsls	r3, r3, #8
 800f7d6:	7d7a      	ldrb	r2, [r7, #21]
 800f7d8:	0092      	lsls	r2, r2, #2
 800f7da:	6939      	ldr	r1, [r7, #16]
 800f7dc:	440a      	add	r2, r1
 800f7de:	7852      	ldrb	r2, [r2, #1]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d026      	beq.n	800f838 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800f7ea:	7d7b      	ldrb	r3, [r7, #21]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	693a      	ldr	r2, [r7, #16]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	021b      	lsls	r3, r3, #8
 800f7f6:	b21a      	sxth	r2, r3
 800f7f8:	7d7b      	ldrb	r3, [r7, #21]
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	6939      	ldr	r1, [r7, #16]
 800f7fe:	440b      	add	r3, r1
 800f800:	785b      	ldrb	r3, [r3, #1]
 800f802:	b21b      	sxth	r3, r3
 800f804:	4313      	orrs	r3, r2
 800f806:	b21b      	sxth	r3, r3
 800f808:	b29b      	uxth	r3, r3
 800f80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f80e:	b298      	uxth	r0, r3
 800f810:	7d7b      	ldrb	r3, [r7, #21]
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	4413      	add	r3, r2
 800f818:	7899      	ldrb	r1, [r3, #2]
 800f81a:	7d7b      	ldrb	r3, [r7, #21]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	4413      	add	r3, r2
 800f822:	78db      	ldrb	r3, [r3, #3]
 800f824:	461a      	mov	r2, r3
 800f826:	f00a fed6 	bl	801a5d6 <rfalChipChangeTestRegBits>
 800f82a:	4603      	mov	r3, r0
 800f82c:	82fb      	strh	r3, [r7, #22]
 800f82e:	8afb      	ldrh	r3, [r7, #22]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d025      	beq.n	800f880 <rfalSetAnalogConfig+0x124>
 800f834:	8afb      	ldrh	r3, [r7, #22]
 800f836:	e02d      	b.n	800f894 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800f838:	7d7b      	ldrb	r3, [r7, #21]
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	4413      	add	r3, r2
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	021b      	lsls	r3, r3, #8
 800f844:	b21a      	sxth	r2, r3
 800f846:	7d7b      	ldrb	r3, [r7, #21]
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	6939      	ldr	r1, [r7, #16]
 800f84c:	440b      	add	r3, r1
 800f84e:	785b      	ldrb	r3, [r3, #1]
 800f850:	b21b      	sxth	r3, r3
 800f852:	4313      	orrs	r3, r2
 800f854:	b21b      	sxth	r3, r3
 800f856:	b298      	uxth	r0, r3
 800f858:	7d7b      	ldrb	r3, [r7, #21]
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	4413      	add	r3, r2
 800f860:	7899      	ldrb	r1, [r3, #2]
 800f862:	7d7b      	ldrb	r3, [r7, #21]
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	4413      	add	r3, r2
 800f86a:	78db      	ldrb	r3, [r3, #3]
 800f86c:	461a      	mov	r2, r3
 800f86e:	f00a fe9d 	bl	801a5ac <rfalChipChangeRegBits>
 800f872:	4603      	mov	r3, r0
 800f874:	82fb      	strh	r3, [r7, #22]
 800f876:	8afb      	ldrh	r3, [r7, #22]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <rfalSetAnalogConfig+0x124>
 800f87c:	8afb      	ldrh	r3, [r7, #22]
 800f87e:	e009      	b.n	800f894 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800f880:	7d7b      	ldrb	r3, [r7, #21]
 800f882:	3301      	adds	r3, #1
 800f884:	757b      	strb	r3, [r7, #21]
 800f886:	7d7a      	ldrb	r2, [r7, #21]
 800f888:	7d3b      	ldrb	r3, [r7, #20]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d39d      	bcc.n	800f7ca <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800f88e:	e777      	b.n	800f780 <rfalSetAnalogConfig+0x24>
            break;
 800f890:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800f892:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	2000327c 	.word	0x2000327c

0800f8a0 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b089      	sub	sp, #36	; 0x24
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	6039      	str	r1, [r7, #0]
 800f8aa:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800f8ac:	4b2c      	ldr	r3, [pc, #176]	; (800f960 <rfalAnalogConfigSearch+0xc0>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800f8b2:	88fb      	ldrh	r3, [r7, #6]
 800f8b4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800f8b8:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00a      	beq.n	800f8d4 <rfalAnalogConfigSearch+0x34>
 800f8be:	88fb      	ldrh	r3, [r7, #6]
 800f8c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	e001      	b.n	800f8d8 <rfalAnalogConfigSearch+0x38>
 800f8d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8d8:	88fb      	ldrh	r3, [r7, #6]
 800f8da:	f003 0303 	and.w	r3, r3, #3
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <rfalAnalogConfigSearch+0x48>
 800f8e4:	88fb      	ldrh	r3, [r7, #6]
 800f8e6:	e000      	b.n	800f8ea <rfalAnalogConfigSearch+0x4a>
 800f8e8:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800f8f4:	e029      	b.n	800f94a <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 800f8f6:	8bfb      	ldrh	r3, [r7, #30]
 800f8f8:	69ba      	ldr	r2, [r7, #24]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	021b      	lsls	r3, r3, #8
 800f904:	b21a      	sxth	r2, r3
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3301      	adds	r3, #1
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	b21b      	sxth	r3, r3
 800f90e:	4313      	orrs	r3, r2
 800f910:	b21b      	sxth	r3, r3
 800f912:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 800f914:	89fa      	ldrh	r2, [r7, #14]
 800f916:	8afb      	ldrh	r3, [r7, #22]
 800f918:	4013      	ands	r3, r2
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	88fa      	ldrh	r2, [r7, #6]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d108      	bne.n	800f934 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800f922:	8bfb      	ldrh	r3, [r7, #30]
 800f924:	3303      	adds	r3, #3
 800f926:	b29a      	uxth	r2, r3
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	3302      	adds	r3, #2
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	e010      	b.n	800f956 <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	3302      	adds	r3, #2
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800f940:	8bfb      	ldrh	r3, [r7, #30]
 800f942:	4413      	add	r3, r2
 800f944:	b29b      	uxth	r3, r3
 800f946:	3303      	adds	r3, #3
 800f948:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800f94a:	4b05      	ldr	r3, [pc, #20]	; (800f960 <rfalAnalogConfigSearch+0xc0>)
 800f94c:	889b      	ldrh	r3, [r3, #4]
 800f94e:	8bfa      	ldrh	r2, [r7, #30]
 800f950:	429a      	cmp	r2, r3
 800f952:	d3d0      	bcc.n	800f8f6 <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800f954:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800f956:	4618      	mov	r0, r3
 800f958:	3724      	adds	r7, #36	; 0x24
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bc80      	pop	{r7}
 800f95e:	4770      	bx	lr
 800f960:	2000327c 	.word	0x2000327c

0800f964 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	6039      	str	r1, [r7, #0]
 800f96e:	80fb      	strh	r3, [r7, #6]
 800f970:	4613      	mov	r3, r2
 800f972:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800f974:	88fb      	ldrh	r3, [r7, #6]
 800f976:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800f978:	2300      	movs	r3, #0
 800f97a:	81bb      	strh	r3, [r7, #12]
 800f97c:	e00d      	b.n	800f99a <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800f97e:	89bb      	ldrh	r3, [r7, #12]
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	4413      	add	r3, r2
 800f984:	781a      	ldrb	r2, [r3, #0]
 800f986:	89fb      	ldrh	r3, [r7, #14]
 800f988:	4611      	mov	r1, r2
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 f80e 	bl	800f9ac <rfalCrcUpdateCcitt>
 800f990:	4603      	mov	r3, r0
 800f992:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800f994:	89bb      	ldrh	r3, [r7, #12]
 800f996:	3301      	adds	r3, #1
 800f998:	81bb      	strh	r3, [r7, #12]
 800f99a:	89ba      	ldrh	r2, [r7, #12]
 800f99c:	88bb      	ldrh	r3, [r7, #4]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d3ed      	bcc.n	800f97e <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800f9a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	460a      	mov	r2, r1
 800f9b6:	80fb      	strh	r3, [r7, #6]
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800f9c0:	797b      	ldrb	r3, [r7, #5]
 800f9c2:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800f9c4:	89fb      	ldrh	r3, [r7, #14]
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	7b7b      	ldrb	r3, [r7, #13]
 800f9ca:	4053      	eors	r3, r2
 800f9cc:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800f9ce:	7b7b      	ldrb	r3, [r7, #13]
 800f9d0:	011b      	lsls	r3, r3, #4
 800f9d2:	b25a      	sxtb	r2, r3
 800f9d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f9d8:	4053      	eors	r3, r2
 800f9da:	b25b      	sxtb	r3, r3
 800f9dc:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800f9de:	89fb      	ldrh	r3, [r7, #14]
 800f9e0:	0a1b      	lsrs	r3, r3, #8
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	b21a      	sxth	r2, r3
 800f9e6:	7b7b      	ldrb	r3, [r7, #13]
 800f9e8:	021b      	lsls	r3, r3, #8
 800f9ea:	b21b      	sxth	r3, r3
 800f9ec:	4053      	eors	r3, r2
 800f9ee:	b21a      	sxth	r2, r3
 800f9f0:	7b7b      	ldrb	r3, [r7, #13]
 800f9f2:	00db      	lsls	r3, r3, #3
 800f9f4:	b21b      	sxth	r3, r3
 800f9f6:	4053      	eors	r3, r2
 800f9f8:	b21a      	sxth	r2, r3
 800f9fa:	7b7b      	ldrb	r3, [r7, #13]
 800f9fc:	091b      	lsrs	r3, r3, #4
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	b21b      	sxth	r3, r3
 800fa02:	4053      	eors	r3, r2
 800fa04:	b21b      	sxth	r3, r3
 800fa06:	81fb      	strh	r3, [r7, #14]

    return crc;
 800fa08:	89fb      	ldrh	r3, [r7, #14]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3714      	adds	r7, #20
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bc80      	pop	{r7}
 800fa12:	4770      	bx	lr

0800fa14 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800fa1e:	2208      	movs	r2, #8
 800fa20:	6879      	ldr	r1, [r7, #4]
 800fa22:	480d      	ldr	r0, [pc, #52]	; (800fa58 <iso15693PhyConfigure+0x44>)
 800fa24:	f00b fce2 	bl	801b3ec <memcpy>
    
    if ( config->speedMode <= 3U)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	2b03      	cmp	r3, #3
 800fa2e:	d808      	bhi.n	800fa42 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	f1c3 0303 	rsb	r3, r3, #3
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <iso15693PhyConfigure+0x48>)
 800fa3e:	70da      	strb	r2, [r3, #3]
 800fa40:	e002      	b.n	800fa48 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800fa42:	4b06      	ldr	r3, [pc, #24]	; (800fa5c <iso15693PhyConfigure+0x48>)
 800fa44:	2203      	movs	r2, #3
 800fa46:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	4a04      	ldr	r2, [pc, #16]	; (800fa5c <iso15693PhyConfigure+0x48>)
 800fa4c:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20003284 	.word	0x20003284
 800fa5c:	2000011c 	.word	0x2000011c

0800fa60 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b08b      	sub	sp, #44	; 0x2c
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	4603      	mov	r3, r0
 800fa70:	807b      	strh	r3, [r7, #2]
 800fa72:	460b      	mov	r3, r1
 800fa74:	707b      	strb	r3, [r7, #1]
 800fa76:	4613      	mov	r3, r2
 800fa78:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800fa82:	787b      	ldrb	r3, [r7, #1]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <iso15693VCDCode+0x2c>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e000      	b.n	800fa8e <iso15693VCDCode+0x2e>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800fa90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa92:	2200      	movs	r2, #0
 800fa94:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800fa96:	4b93      	ldr	r3, [pc, #588]	; (800fce4 <iso15693VCDCode+0x284>)
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d117      	bne.n	800face <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800fa9e:	2321      	movs	r3, #33	; 0x21
 800faa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800faa4:	2304      	movs	r3, #4
 800faa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800faaa:	4b8f      	ldr	r3, [pc, #572]	; (800fce8 <iso15693VCDCode+0x288>)
 800faac:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800faae:	887a      	ldrh	r2, [r7, #2]
 800fab0:	7d7b      	ldrb	r3, [r7, #21]
 800fab2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	b29b      	uxth	r3, r3
 800faba:	3302      	adds	r3, #2
 800fabc:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800fabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac0:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800fac2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fac6:	2b04      	cmp	r3, #4
 800fac8:	d823      	bhi.n	800fb12 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800faca:	2301      	movs	r3, #1
 800facc:	e138      	b.n	800fd40 <iso15693VCDCode+0x2e0>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800face:	2381      	movs	r3, #129	; 0x81
 800fad0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800fad4:	2304      	movs	r3, #4
 800fad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800fada:	4b84      	ldr	r3, [pc, #528]	; (800fcec <iso15693VCDCode+0x28c>)
 800fadc:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800fade:	887a      	ldrh	r2, [r7, #2]
 800fae0:	7d7b      	ldrb	r3, [r7, #21]
 800fae2:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	019b      	lsls	r3, r3, #6
 800fae8:	b29b      	uxth	r3, r3
 800faea:	3302      	adds	r3, #2
 800faec:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800faee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf0:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800faf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d005      	beq.n	800fb06 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800fafa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fafe:	2b3f      	cmp	r3, #63	; 0x3f
 800fb00:	d807      	bhi.n	800fb12 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800fb02:	2301      	movs	r3, #1
 800fb04:	e11c      	b.n	800fd40 <iso15693VCDCode+0x2e0>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800fb06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fb0a:	2b40      	cmp	r3, #64	; 0x40
 800fb0c:	d801      	bhi.n	800fb12 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e116      	b.n	800fd40 <iso15693VCDCode+0x2e0>
            }
        }
    }

    if (length == 0U)
 800fb12:	887b      	ldrh	r3, [r7, #2]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d102      	bne.n	800fb1e <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800fb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800fb1e:	887b      	ldrh	r3, [r7, #2]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d01b      	beq.n	800fb5c <iso15693VCDCode+0xfc>
 800fb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d117      	bne.n	800fb5c <iso15693VCDCode+0xfc>
 800fb2c:	783b      	ldrb	r3, [r7, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d014      	beq.n	800fb5c <iso15693VCDCode+0xfc>
 800fb32:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fb36:	f083 0301 	eor.w	r3, r3, #1
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00d      	beq.n	800fb5c <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	f043 0302 	orr.w	r3, r3, #2
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f023 0301 	bic.w	r3, r3, #1
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800fb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5e:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800fb60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800fb64:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800fb66:	887b      	ldrh	r3, [r7, #2]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d03b      	beq.n	800fbe4 <iso15693VCDCode+0x184>
 800fb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d137      	bne.n	800fbe4 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800fb7a:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800fb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	3301      	adds	r3, #1
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb86:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800fb88:	8afb      	ldrh	r3, [r7, #22]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	3301      	adds	r3, #1
 800fb92:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800fb94:	e026      	b.n	800fbe4 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800fb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4413      	add	r3, r2
 800fba0:	7818      	ldrb	r0, [r3, #0]
 800fba2:	f107 030e 	add.w	r3, r7, #14
 800fba6:	8afa      	ldrh	r2, [r7, #22]
 800fba8:	69fc      	ldr	r4, [r7, #28]
 800fbaa:	69b9      	ldr	r1, [r7, #24]
 800fbac:	47a0      	blx	r4
 800fbae:	4603      	mov	r3, r0
 800fbb0:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800fbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb4:	881a      	ldrh	r2, [r3, #0]
 800fbb6:	89fb      	ldrh	r3, [r7, #14]
 800fbb8:	4413      	add	r3, r2
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbe:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800fbc0:	89fb      	ldrh	r3, [r7, #14]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800fbca:	89fb      	ldrh	r3, [r7, #14]
 800fbcc:	8afa      	ldrh	r2, [r7, #22]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800fbd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d105      	bne.n	800fbe4 <iso15693VCDCode+0x184>
            (*offset)++;
 800fbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe2:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800fbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	887a      	ldrh	r2, [r7, #2]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d902      	bls.n	800fbf4 <iso15693VCDCode+0x194>
 800fbee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d0d0      	beq.n	800fb96 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800fbf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d062      	beq.n	800fcc0 <iso15693VCDCode+0x260>
        return ERR_AGAIN;
 800fbfa:	230d      	movs	r3, #13
 800fbfc:	e0a0      	b.n	800fd40 <iso15693VCDCode+0x2e0>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800fbfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d12b      	bne.n	800fc5c <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800fc04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <iso15693VCDCode+0x1b2>
 800fc0c:	f24e 0012 	movw	r0, #57362	; 0xe012
 800fc10:	e001      	b.n	800fc16 <iso15693VCDCode+0x1b6>
 800fc12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fc16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d002      	beq.n	800fc24 <iso15693VCDCode+0x1c4>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3301      	adds	r3, #1
 800fc22:	e000      	b.n	800fc26 <iso15693VCDCode+0x1c6>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	d003      	beq.n	800fc36 <iso15693VCDCode+0x1d6>
 800fc2e:	887a      	ldrh	r2, [r7, #2]
 800fc30:	3a01      	subs	r2, #1
 800fc32:	b292      	uxth	r2, r2
 800fc34:	e000      	b.n	800fc38 <iso15693VCDCode+0x1d8>
 800fc36:	887a      	ldrh	r2, [r7, #2]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	f7ff fe93 	bl	800f964 <rfalCrcCalculateCcitt>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800fc42:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fc46:	f083 0301 	eor.w	r3, r3, #1
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d003      	beq.n	800fc58 <iso15693VCDCode+0x1f8>
 800fc50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc52:	43db      	mvns	r3, r3
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	e000      	b.n	800fc5a <iso15693VCDCode+0x1fa>
 800fc58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc5a:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800fc5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800fc62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc64:	0a1b      	lsrs	r3, r3, #8
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800fc6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	461a      	mov	r2, r3
 800fc72:	887b      	ldrh	r3, [r7, #2]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	3328      	adds	r3, #40	; 0x28
 800fc78:	443b      	add	r3, r7
 800fc7a:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800fc7e:	f107 030c 	add.w	r3, r7, #12
 800fc82:	8afa      	ldrh	r2, [r7, #22]
 800fc84:	69fc      	ldr	r4, [r7, #28]
 800fc86:	69b9      	ldr	r1, [r7, #24]
 800fc88:	47a0      	blx	r4
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800fc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc90:	881a      	ldrh	r2, [r3, #0]
 800fc92:	89bb      	ldrh	r3, [r7, #12]
 800fc94:	4413      	add	r3, r2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9a:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800fc9c:	89bb      	ldrh	r3, [r7, #12]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	4413      	add	r3, r2
 800fca4:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800fca6:	89bb      	ldrh	r3, [r7, #12]
 800fca8:	8afa      	ldrh	r2, [r7, #22]
 800fcaa:	1ad3      	subs	r3, r2, r3
 800fcac:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800fcae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d105      	bne.n	800fcc0 <iso15693VCDCode+0x260>
            (*offset)++;
 800fcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb6:	881b      	ldrh	r3, [r3, #0]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcbe:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800fcc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d109      	bne.n	800fcda <iso15693VCDCode+0x27a>
 800fcc6:	787b      	ldrb	r3, [r7, #1]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d006      	beq.n	800fcda <iso15693VCDCode+0x27a>
 800fccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	887b      	ldrh	r3, [r7, #2]
 800fcd4:	3302      	adds	r3, #2
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d391      	bcc.n	800fbfe <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800fcda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d007      	beq.n	800fcf0 <iso15693VCDCode+0x290>
        return ERR_AGAIN;
 800fce0:	230d      	movs	r3, #13
 800fce2:	e02d      	b.n	800fd40 <iso15693VCDCode+0x2e0>
 800fce4:	20003284 	.word	0x20003284
 800fce8:	0800ff85 	.word	0x0800ff85
 800fcec:	0801002d 	.word	0x0801002d
    }

    if ((!sendCrc && (*offset == length))
 800fcf0:	787b      	ldrb	r3, [r7, #1]
 800fcf2:	f083 0301 	eor.w	r3, r3, #1
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d004      	beq.n	800fd06 <iso15693VCDCode+0x2a6>
 800fcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	887a      	ldrh	r2, [r7, #2]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d009      	beq.n	800fd1a <iso15693VCDCode+0x2ba>
            || (sendCrc && (*offset == (length + 2U))))
 800fd06:	787b      	ldrb	r3, [r7, #1]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d018      	beq.n	800fd3e <iso15693VCDCode+0x2de>
 800fd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd0e:	881b      	ldrh	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	887b      	ldrh	r3, [r7, #2]
 800fd14:	3302      	adds	r3, #2
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d111      	bne.n	800fd3e <iso15693VCDCode+0x2de>
    {
        *outputBuf = eof; 
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800fd20:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800fd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2c:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800fd2e:	8afb      	ldrh	r3, [r7, #22]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	3301      	adds	r3, #1
 800fd38:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800fd3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd3c:	e000      	b.n	800fd40 <iso15693VCDCode+0x2e0>
        return ERR_AGAIN;
 800fd3e:	230d      	movs	r3, #13
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	372c      	adds	r7, #44	; 0x2c
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd90      	pop	{r4, r7, pc}

0800fd48 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b088      	sub	sp, #32
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	607a      	str	r2, [r7, #4]
 800fd52:	461a      	mov	r2, r3
 800fd54:	460b      	mov	r3, r1
 800fd56:	817b      	strh	r3, [r7, #10]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	2200      	movs	r2, #0
 800fd64:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd68:	2200      	movs	r2, #0
 800fd6a:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 031f 	and.w	r3, r3, #31
 800fd74:	2b17      	cmp	r3, #23
 800fd76:	d001      	beq.n	800fd7c <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800fd78:	2309      	movs	r3, #9
 800fd7a:	e0ff      	b.n	800ff7c <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800fd7c:	893b      	ldrh	r3, [r7, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e0fa      	b.n	800ff7c <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800fd86:	2305      	movs	r3, #5
 800fd88:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800fd8e:	893b      	ldrh	r3, [r7, #8]
 800fd90:	461a      	mov	r2, r3
 800fd92:	2100      	movs	r1, #0
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f00b fb51 	bl	801b43c <memset>

    if (inBufLen == 0U)
 800fd9a:	897b      	ldrh	r3, [r7, #10]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f040 808e 	bne.w	800febe <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800fda2:	2315      	movs	r3, #21
 800fda4:	e0ea      	b.n	800ff7c <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800fda6:	2300      	movs	r3, #0
 800fda8:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800fdaa:	8bbb      	ldrh	r3, [r7, #28]
 800fdac:	08db      	lsrs	r3, r3, #3
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	8bbb      	ldrh	r3, [r7, #28]
 800fdbc:	f003 0307 	and.w	r3, r3, #7
 800fdc0:	fa42 f303 	asr.w	r3, r2, r3
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	f003 0301 	and.w	r3, r3, #1
 800fdca:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800fdcc:	8bbb      	ldrh	r3, [r7, #28]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	08db      	lsrs	r3, r3, #3
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	8bbb      	ldrh	r3, [r7, #28]
 800fddc:	3301      	adds	r3, #1
 800fdde:	f003 0307 	and.w	r3, r3, #7
 800fde2:	fa42 f303 	asr.w	r3, r2, r3
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	005b      	lsls	r3, r3, #1
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0302 	and.w	r3, r3, #2
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	7e3b      	ldrb	r3, [r7, #24]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800fdf8:	7e3b      	ldrb	r3, [r7, #24]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d102      	bne.n	800fe04 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800fdfe:	8b7b      	ldrh	r3, [r7, #26]
 800fe00:	3301      	adds	r3, #1
 800fe02:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800fe04:	7e3b      	ldrb	r3, [r7, #24]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d119      	bne.n	800fe3e <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800fe0a:	8b7b      	ldrh	r3, [r7, #26]
 800fe0c:	08db      	lsrs	r3, r3, #3
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	461a      	mov	r2, r3
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4413      	add	r3, r2
 800fe16:	7819      	ldrb	r1, [r3, #0]
 800fe18:	8b7b      	ldrh	r3, [r7, #26]
 800fe1a:	f003 0307 	and.w	r3, r3, #7
 800fe1e:	2201      	movs	r2, #1
 800fe20:	fa02 f303 	lsl.w	r3, r2, r3
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	8b7b      	ldrh	r3, [r7, #26]
 800fe28:	08db      	lsrs	r3, r3, #3
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4403      	add	r3, r0
 800fe32:	430a      	orrs	r2, r1
 800fe34:	b2d2      	uxtb	r2, r2
 800fe36:	701a      	strb	r2, [r3, #0]
            bp++;
 800fe38:	8b7b      	ldrh	r3, [r7, #26]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800fe3e:	8b7b      	ldrh	r3, [r7, #26]
 800fe40:	f003 0307 	and.w	r3, r3, #7
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d115      	bne.n	800fe76 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800fe4a:	8bbb      	ldrh	r3, [r7, #28]
 800fe4c:	08db      	lsrs	r3, r3, #3
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	461a      	mov	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4413      	add	r3, r2
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800fe5c:	2ba0      	cmp	r3, #160	; 0xa0
 800fe5e:	d10a      	bne.n	800fe76 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800fe60:	8bbb      	ldrh	r3, [r7, #28]
 800fe62:	08db      	lsrs	r3, r3, #3
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	3301      	adds	r3, #1
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d101      	bne.n	800fe76 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800fe72:	2301      	movs	r3, #1
 800fe74:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800fe76:	7e3b      	ldrb	r3, [r7, #24]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d002      	beq.n	800fe82 <iso15693VICCDecode+0x13a>
 800fe7c:	7e3b      	ldrb	r3, [r7, #24]
 800fe7e:	2b03      	cmp	r3, #3
 800fe80:	d10f      	bne.n	800fea2 <iso15693VICCDecode+0x15a>
 800fe82:	7e7b      	ldrb	r3, [r7, #25]
 800fe84:	f083 0301 	eor.w	r3, r3, #1
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d009      	beq.n	800fea2 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800fe8e:	8b7a      	ldrh	r2, [r7, #26]
 800fe90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d302      	bcc.n	800fe9c <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800fe96:	231d      	movs	r3, #29
 800fe98:	83fb      	strh	r3, [r7, #30]
 800fe9a:	e002      	b.n	800fea2 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800fe9c:	8b7b      	ldrh	r3, [r7, #26]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800fea2:	8b7a      	ldrh	r2, [r7, #26]
 800fea4:	893b      	ldrh	r3, [r7, #8]
 800fea6:	00db      	lsls	r3, r3, #3
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d20f      	bcs.n	800fecc <iso15693VICCDecode+0x184>
 800feac:	8bfb      	ldrh	r3, [r7, #30]
 800feae:	2b1d      	cmp	r3, #29
 800feb0:	d00c      	beq.n	800fecc <iso15693VICCDecode+0x184>
 800feb2:	7e7b      	ldrb	r3, [r7, #25]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d109      	bne.n	800fecc <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800feb8:	8bbb      	ldrh	r3, [r7, #28]
 800feba:	3302      	adds	r3, #2
 800febc:	83bb      	strh	r3, [r7, #28]
 800febe:	8bba      	ldrh	r2, [r7, #28]
 800fec0:	897b      	ldrh	r3, [r7, #10]
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	3b02      	subs	r3, #2
 800fec6:	429a      	cmp	r2, r3
 800fec8:	f4ff af6d 	bcc.w	800fda6 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800fecc:	8b7b      	ldrh	r3, [r7, #26]
 800fece:	08db      	lsrs	r3, r3, #3
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	8b7a      	ldrh	r2, [r7, #26]
 800feda:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800fedc:	8bfb      	ldrh	r3, [r7, #30]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d001      	beq.n	800fee6 <iso15693VICCDecode+0x19e>
    {
        return err;
 800fee2:	8bfb      	ldrh	r3, [r7, #30]
 800fee4:	e04a      	b.n	800ff7c <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800fee6:	8b7b      	ldrh	r3, [r7, #26]
 800fee8:	f003 0307 	and.w	r3, r3, #7
 800feec:	b29b      	uxth	r3, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800fef2:	2315      	movs	r3, #21
 800fef4:	e042      	b.n	800ff7c <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	2b02      	cmp	r3, #2
 800fefc:	d93b      	bls.n	800ff76 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800fefe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d002      	beq.n	800ff0c <iso15693VICCDecode+0x1c4>
 800ff06:	f24e 0012 	movw	r0, #57362	; 0xe012
 800ff0a:	e001      	b.n	800ff10 <iso15693VICCDecode+0x1c8>
 800ff0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ff10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	3b02      	subs	r3, #2
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	461a      	mov	r2, r3
 800ff1a:	6879      	ldr	r1, [r7, #4]
 800ff1c:	f7ff fd22 	bl	800f964 <rfalCrcCalculateCcitt>
 800ff20:	4603      	mov	r3, r0
 800ff22:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800ff24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ff28:	f083 0301 	eor.w	r3, r3, #1
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <iso15693VICCDecode+0x1f2>
 800ff32:	8afb      	ldrh	r3, [r7, #22]
 800ff34:	43db      	mvns	r3, r3
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	e000      	b.n	800ff3c <iso15693VICCDecode+0x1f4>
 800ff3a:	8afb      	ldrh	r3, [r7, #22]
 800ff3c:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800ff3e:	8afb      	ldrh	r3, [r7, #22]
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff44:	8812      	ldrh	r2, [r2, #0]
 800ff46:	3a02      	subs	r2, #2
 800ff48:	6879      	ldr	r1, [r7, #4]
 800ff4a:	440a      	add	r2, r1
 800ff4c:	7812      	ldrb	r2, [r2, #0]
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d10e      	bne.n	800ff70 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800ff52:	8afb      	ldrh	r3, [r7, #22]
 800ff54:	0a1b      	lsrs	r3, r3, #8
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff5c:	8812      	ldrh	r2, [r2, #0]
 800ff5e:	3a01      	subs	r2, #1
 800ff60:	6879      	ldr	r1, [r7, #4]
 800ff62:	440a      	add	r2, r1
 800ff64:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d102      	bne.n	800ff70 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	83fb      	strh	r3, [r7, #30]
 800ff6e:	e004      	b.n	800ff7a <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800ff70:	2315      	movs	r3, #21
 800ff72:	83fb      	strh	r3, [r7, #30]
 800ff74:	e001      	b.n	800ff7a <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800ff76:	2315      	movs	r3, #21
 800ff78:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800ff7a:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3720      	adds	r7, #32
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b089      	sub	sp, #36	; 0x24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60b9      	str	r1, [r7, #8]
 800ff8c:	607b      	str	r3, [r7, #4]
 800ff8e:	4603      	mov	r3, r0
 800ff90:	73fb      	strb	r3, [r7, #15]
 800ff92:	4613      	mov	r3, r2
 800ff94:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800ff96:	2300      	movs	r3, #0
 800ff98:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800ffa4:	89bb      	ldrh	r3, [r7, #12]
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d801      	bhi.n	800ffae <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e038      	b.n	8010020 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800ffae:	7bfb      	ldrb	r3, [r7, #15]
 800ffb0:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	83bb      	strh	r3, [r7, #28]
 800ffb6:	e02f      	b.n	8010018 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800ffb8:	7ffb      	ldrb	r3, [r7, #31]
 800ffba:	f003 0303 	and.w	r3, r3, #3
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	d81a      	bhi.n	800fff8 <iso15693PhyVCDCode1Of4+0x74>
 800ffc2:	a201      	add	r2, pc, #4	; (adr r2, 800ffc8 <iso15693PhyVCDCode1Of4+0x44>)
 800ffc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc8:	0800ffd9 	.word	0x0800ffd9
 800ffcc:	0800ffe1 	.word	0x0800ffe1
 800ffd0:	0800ffe9 	.word	0x0800ffe9
 800ffd4:	0800fff1 	.word	0x0800fff1
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	701a      	strb	r2, [r3, #0]
                break;
 800ffde:	e00c      	b.n	800fffa <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	2208      	movs	r2, #8
 800ffe4:	701a      	strb	r2, [r3, #0]
                break;
 800ffe6:	e008      	b.n	800fffa <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	2220      	movs	r2, #32
 800ffec:	701a      	strb	r2, [r3, #0]
                break;
 800ffee:	e004      	b.n	800fffa <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	2280      	movs	r2, #128	; 0x80
 800fff4:	701a      	strb	r2, [r3, #0]
                break;
 800fff6:	e000      	b.n	800fffa <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800fff8:	bf00      	nop
        }
        outbuf++;
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	3301      	adds	r3, #1
 800fffe:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	3301      	adds	r3, #1
 8010006:	b29a      	uxth	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 801000c:	7ffb      	ldrb	r3, [r7, #31]
 801000e:	089b      	lsrs	r3, r3, #2
 8010010:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8010012:	8bbb      	ldrh	r3, [r7, #28]
 8010014:	3301      	adds	r3, #1
 8010016:	83bb      	strh	r3, [r7, #28]
 8010018:	8bbb      	ldrh	r3, [r7, #28]
 801001a:	2b03      	cmp	r3, #3
 801001c:	d9cc      	bls.n	800ffb8 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 801001e:	8afb      	ldrh	r3, [r7, #22]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3724      	adds	r7, #36	; 0x24
 8010024:	46bd      	mov	sp, r7
 8010026:	bc80      	pop	{r7}
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop

0801002c <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 801002c:	b480      	push	{r7}
 801002e:	b089      	sub	sp, #36	; 0x24
 8010030:	af00      	add	r7, sp, #0
 8010032:	60b9      	str	r1, [r7, #8]
 8010034:	607b      	str	r3, [r7, #4]
 8010036:	4603      	mov	r3, r0
 8010038:	73fb      	strb	r3, [r7, #15]
 801003a:	4613      	mov	r3, r2
 801003c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 801003e:	2300      	movs	r3, #0
 8010040:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2200      	movs	r2, #0
 801004a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 801004c:	89bb      	ldrh	r3, [r7, #12]
 801004e:	2b3f      	cmp	r3, #63	; 0x3f
 8010050:	d801      	bhi.n	8010056 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 8010052:	2301      	movs	r3, #1
 8010054:	e039      	b.n	80100ca <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 801005a:	2300      	movs	r3, #0
 801005c:	83bb      	strh	r3, [r7, #28]
 801005e:	e030      	b.n	80100c2 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 8010060:	7ffb      	ldrb	r3, [r7, #31]
 8010062:	2b03      	cmp	r3, #3
 8010064:	d81a      	bhi.n	801009c <iso15693PhyVCDCode1Of256+0x70>
 8010066:	a201      	add	r2, pc, #4	; (adr r2, 801006c <iso15693PhyVCDCode1Of256+0x40>)
 8010068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801006c:	0801007d 	.word	0x0801007d
 8010070:	08010085 	.word	0x08010085
 8010074:	0801008d 	.word	0x0801008d
 8010078:	08010095 	.word	0x08010095
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	2202      	movs	r2, #2
 8010080:	701a      	strb	r2, [r3, #0]
                break;
 8010082:	e00f      	b.n	80100a4 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	2208      	movs	r2, #8
 8010088:	701a      	strb	r2, [r3, #0]
                break;
 801008a:	e00b      	b.n	80100a4 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	2220      	movs	r2, #32
 8010090:	701a      	strb	r2, [r3, #0]
                break;
 8010092:	e007      	b.n	80100a4 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	2280      	movs	r2, #128	; 0x80
 8010098:	701a      	strb	r2, [r3, #0]
                break;
 801009a:	e003      	b.n	80100a4 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	2200      	movs	r2, #0
 80100a0:	701a      	strb	r2, [r3, #0]
                break;               
 80100a2:	bf00      	nop
        }
        outbuf++;
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	3301      	adds	r3, #1
 80100a8:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	3301      	adds	r3, #1
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 80100b6:	7ffb      	ldrb	r3, [r7, #31]
 80100b8:	3b04      	subs	r3, #4
 80100ba:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 80100bc:	8bbb      	ldrh	r3, [r7, #28]
 80100be:	3301      	adds	r3, #1
 80100c0:	83bb      	strh	r3, [r7, #28]
 80100c2:	8bbb      	ldrh	r3, [r7, #28]
 80100c4:	2b3f      	cmp	r3, #63	; 0x3f
 80100c6:	d9cb      	bls.n	8010060 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 80100c8:	8afb      	ldrh	r3, [r7, #22]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3724      	adds	r7, #36	; 0x24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bc80      	pop	{r7}
 80100d2:	4770      	bx	lr

080100d4 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 80100d4:	b480      	push	{r7}
 80100d6:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <isoDepClearCounters+0x20>)
 80100da:	2200      	movs	r2, #0
 80100dc:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 80100de:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <isoDepClearCounters+0x20>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 80100e4:	4b03      	ldr	r3, [pc, #12]	; (80100f4 <isoDepClearCounters+0x20>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	71da      	strb	r2, [r3, #7]
}
 80100ea:	bf00      	nop
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bc80      	pop	{r7}
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	2000328c 	.word	0x2000328c

080100f8 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b08b      	sub	sp, #44	; 0x2c
 80100fc:	af04      	add	r7, sp, #16
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	607a      	str	r2, [r7, #4]
 8010102:	461a      	mov	r2, r3
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]
 8010108:	4613      	mov	r3, r2
 801010a:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8010110:	4a44      	ldr	r2, [pc, #272]	; (8010224 <isoDepTx+0x12c>)
 8010112:	7bfb      	ldrb	r3, [r7, #15]
 8010114:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 8010118:	89bb      	ldrh	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d009      	beq.n	8010132 <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	4a3f      	ldr	r2, [pc, #252]	; (8010224 <isoDepTx+0x12c>)
 8010126:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801012a:	4293      	cmp	r3, r2
 801012c:	d201      	bcs.n	8010132 <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 801012e:	2301      	movs	r3, #1
 8010130:	e074      	b.n	801021c <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 8010132:	7bfb      	ldrb	r3, [r7, #15]
 8010134:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8010136:	4b3b      	ldr	r3, [pc, #236]	; (8010224 <isoDepTx+0x12c>)
 8010138:	78db      	ldrb	r3, [r3, #3]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d108      	bne.n	8010150 <isoDepTx+0x58>
 801013e:	4b39      	ldr	r3, [pc, #228]	; (8010224 <isoDepTx+0x12c>)
 8010140:	78db      	ldrb	r3, [r3, #3]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d108      	bne.n	8010158 <isoDepTx+0x60>
 8010146:	4b37      	ldr	r3, [pc, #220]	; (8010224 <isoDepTx+0x12c>)
 8010148:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <isoDepTx+0x60>
 8010150:	7cfb      	ldrb	r3, [r7, #19]
 8010152:	f043 0308 	orr.w	r3, r3, #8
 8010156:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8010158:	4b32      	ldr	r3, [pc, #200]	; (8010224 <isoDepTx+0x12c>)
 801015a:	791b      	ldrb	r3, [r3, #4]
 801015c:	2bff      	cmp	r3, #255	; 0xff
 801015e:	d003      	beq.n	8010168 <isoDepTx+0x70>
 8010160:	7cfb      	ldrb	r3, [r7, #19]
 8010162:	f043 0304 	orr.w	r3, r3, #4
 8010166:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 8010168:	4b2e      	ldr	r3, [pc, #184]	; (8010224 <isoDepTx+0x12c>)
 801016a:	7c9b      	ldrb	r3, [r3, #18]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d008      	beq.n	8010182 <isoDepTx+0x8a>
 8010170:	7cfb      	ldrb	r3, [r7, #19]
 8010172:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8010176:	2b02      	cmp	r3, #2
 8010178:	d103      	bne.n	8010182 <isoDepTx+0x8a>
 801017a:	7cfb      	ldrb	r3, [r7, #19]
 801017c:	f043 0310 	orr.w	r3, r3, #16
 8010180:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 8010182:	4b28      	ldr	r3, [pc, #160]	; (8010224 <isoDepTx+0x12c>)
 8010184:	791b      	ldrb	r3, [r3, #4]
 8010186:	2bff      	cmp	r3, #255	; 0xff
 8010188:	d006      	beq.n	8010198 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	3b01      	subs	r3, #1
 801018e:	617b      	str	r3, [r7, #20]
 8010190:	4b24      	ldr	r3, [pc, #144]	; (8010224 <isoDepTx+0x12c>)
 8010192:	791a      	ldrb	r2, [r3, #4]
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 8010198:	4b22      	ldr	r3, [pc, #136]	; (8010224 <isoDepTx+0x12c>)
 801019a:	78db      	ldrb	r3, [r3, #3]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d108      	bne.n	80101b2 <isoDepTx+0xba>
 80101a0:	4b20      	ldr	r3, [pc, #128]	; (8010224 <isoDepTx+0x12c>)
 80101a2:	78db      	ldrb	r3, [r3, #3]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10b      	bne.n	80101c0 <isoDepTx+0xc8>
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <isoDepTx+0x12c>)
 80101aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d006      	beq.n	80101c0 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	3b01      	subs	r3, #1
 80101b6:	617b      	str	r3, [r7, #20]
 80101b8:	4b1a      	ldr	r3, [pc, #104]	; (8010224 <isoDepTx+0x12c>)
 80101ba:	78da      	ldrb	r2, [r3, #3]
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	3b01      	subs	r3, #1
 80101c4:	617b      	str	r3, [r7, #20]
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	7cfa      	ldrb	r2, [r7, #19]
 80101ca:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	89bb      	ldrh	r3, [r7, #12]
 80101d6:	4413      	add	r3, r2
 80101d8:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 80101da:	8a3a      	ldrh	r2, [r7, #16]
 80101dc:	4b11      	ldr	r3, [pc, #68]	; (8010224 <isoDepTx+0x12c>)
 80101de:	8a1b      	ldrh	r3, [r3, #16]
 80101e0:	3b02      	subs	r3, #2
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d901      	bls.n	80101ea <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 80101e6:	2318      	movs	r3, #24
 80101e8:	e018      	b.n	801021c <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 80101ea:	4b0e      	ldr	r3, [pc, #56]	; (8010224 <isoDepTx+0x12c>)
 80101ec:	6998      	ldr	r0, [r3, #24]
 80101ee:	4b0d      	ldr	r3, [pc, #52]	; (8010224 <isoDepTx+0x12c>)
 80101f0:	8bdc      	ldrh	r4, [r3, #30]
 80101f2:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <isoDepTx+0x12c>)
 80101f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f6:	4b0b      	ldr	r3, [pc, #44]	; (8010224 <isoDepTx+0x12c>)
 80101f8:	785b      	ldrb	r3, [r3, #1]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d001      	beq.n	8010202 <isoDepTx+0x10a>
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	e001      	b.n	8010206 <isoDepTx+0x10e>
 8010202:	f04f 33ff 	mov.w	r3, #4294967295
 8010206:	8a39      	ldrh	r1, [r7, #16]
 8010208:	9302      	str	r3, [sp, #8]
 801020a:	2300      	movs	r3, #0
 801020c:	9301      	str	r3, [sp, #4]
 801020e:	9200      	str	r2, [sp, #0]
 8010210:	4623      	mov	r3, r4
 8010212:	4602      	mov	r2, r0
 8010214:	6978      	ldr	r0, [r7, #20]
 8010216:	f008 f97d 	bl	8018514 <rfalTransceiveBlockingTx>
 801021a:	4603      	mov	r3, r0
}
 801021c:	4618      	mov	r0, r3
 801021e:	371c      	adds	r7, #28
 8010220:	46bd      	mov	sp, r7
 8010222:	bd90      	pop	{r4, r7, pc}
 8010224:	2000328c 	.word	0x2000328c

08010228 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b089      	sub	sp, #36	; 0x24
 801022c:	af02      	add	r7, sp, #8
 801022e:	4603      	mov	r3, r0
 8010230:	460a      	mov	r2, r1
 8010232:	71fb      	strb	r3, [r7, #7]
 8010234:	4613      	mov	r3, r2
 8010236:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8010238:	2300      	movs	r3, #0
 801023a:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 801023c:	4b56      	ldr	r3, [pc, #344]	; (8010398 <isoDepHandleControlMsg+0x170>)
 801023e:	689a      	ldr	r2, [r3, #8]
 8010240:	4b55      	ldr	r3, [pc, #340]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	4413      	add	r3, r2
 8010246:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8010248:	f107 030c 	add.w	r3, r7, #12
 801024c:	2204      	movs	r2, #4
 801024e:	2100      	movs	r1, #0
 8010250:	4618      	mov	r0, r3
 8010252:	f00b f8f3 	bl	801b43c <memset>
    
    switch( controlMsg )
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	2b03      	cmp	r3, #3
 801025a:	f200 8088 	bhi.w	801036e <isoDepHandleControlMsg+0x146>
 801025e:	a201      	add	r2, pc, #4	; (adr r2, 8010264 <isoDepHandleControlMsg+0x3c>)
 8010260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010264:	08010275 	.word	0x08010275
 8010268:	080102a1 	.word	0x080102a1
 801026c:	080102cd 	.word	0x080102cd
 8010270:	0801033b 	.word	0x0801033b
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8010274:	4b48      	ldr	r3, [pc, #288]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010276:	799b      	ldrb	r3, [r3, #6]
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	b2d1      	uxtb	r1, r2
 801027c:	4a46      	ldr	r2, [pc, #280]	; (8010398 <isoDepHandleControlMsg+0x170>)
 801027e:	7191      	strb	r1, [r2, #6]
 8010280:	4a45      	ldr	r2, [pc, #276]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010282:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8010286:	4293      	cmp	r3, r2
 8010288:	d901      	bls.n	801028e <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 801028a:	230b      	movs	r3, #11
 801028c:	e07f      	b.n	801038e <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 801028e:	4b42      	ldr	r3, [pc, #264]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010290:	789b      	ldrb	r3, [r3, #2]
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	b2db      	uxtb	r3, r3
 8010298:	f063 035d 	orn	r3, r3, #93	; 0x5d
 801029c:	75fb      	strb	r3, [r7, #23]
            break;
 801029e:	e068      	b.n	8010372 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80102a0:	4b3d      	ldr	r3, [pc, #244]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102a2:	799b      	ldrb	r3, [r3, #6]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	b2d1      	uxtb	r1, r2
 80102a8:	4a3b      	ldr	r2, [pc, #236]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102aa:	7191      	strb	r1, [r2, #6]
 80102ac:	4a3a      	ldr	r2, [pc, #232]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102ae:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d901      	bls.n	80102ba <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 80102b6:	2304      	movs	r3, #4
 80102b8:	e069      	b.n	801038e <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 80102ba:	4b37      	ldr	r3, [pc, #220]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102bc:	789b      	ldrb	r3, [r3, #2]
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f063 034d 	orn	r3, r3, #77	; 0x4d
 80102c8:	75fb      	strb	r3, [r7, #23]
            break;
 80102ca:	e052      	b.n	8010372 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 80102cc:	4b32      	ldr	r3, [pc, #200]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102ce:	79db      	ldrb	r3, [r3, #7]
 80102d0:	1c5a      	adds	r2, r3, #1
 80102d2:	b2d1      	uxtb	r1, r2
 80102d4:	4a30      	ldr	r2, [pc, #192]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102d6:	71d1      	strb	r1, [r2, #7]
 80102d8:	4a2f      	ldr	r2, [pc, #188]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102da:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 80102de:	4293      	cmp	r3, r2
 80102e0:	d901      	bls.n	80102e6 <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 80102e2:	230b      	movs	r3, #11
 80102e4:	e053      	b.n	801038e <isoDepHandleControlMsg+0x166>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 80102e6:	79bb      	ldrb	r3, [r7, #6]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <isoDepHandleControlMsg+0xca>
 80102ec:	79bb      	ldrb	r3, [r7, #6]
 80102ee:	2b3b      	cmp	r3, #59	; 0x3b
 80102f0:	d901      	bls.n	80102f6 <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 80102f2:	230b      	movs	r3, #11
 80102f4:	e04b      	b.n	801038e <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80102f6:	4b28      	ldr	r3, [pc, #160]	; (8010398 <isoDepHandleControlMsg+0x170>)
 80102f8:	785b      	ldrb	r3, [r3, #1]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d111      	bne.n	8010322 <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 80102fe:	4b26      	ldr	r3, [pc, #152]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	79ba      	ldrb	r2, [r7, #6]
 8010304:	fb02 f303 	mul.w	r3, r2, r3
 8010308:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010310:	bf28      	it	cs
 8010312:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8010316:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 8010318:	4b1f      	ldr	r3, [pc, #124]	; (8010398 <isoDepHandleControlMsg+0x170>)
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	4413      	add	r3, r2
 8010320:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 8010322:	23f2      	movs	r3, #242	; 0xf2
 8010324:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8010326:	7dbb      	ldrb	r3, [r7, #22]
 8010328:	1c5a      	adds	r2, r3, #1
 801032a:	75ba      	strb	r2, [r7, #22]
 801032c:	3302      	adds	r3, #2
 801032e:	3318      	adds	r3, #24
 8010330:	443b      	add	r3, r7
 8010332:	79ba      	ldrb	r2, [r7, #6]
 8010334:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 8010338:	e01b      	b.n	8010372 <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 801033a:	4b17      	ldr	r3, [pc, #92]	; (8010398 <isoDepHandleControlMsg+0x170>)
 801033c:	79db      	ldrb	r3, [r3, #7]
 801033e:	1c5a      	adds	r2, r3, #1
 8010340:	b2d1      	uxtb	r1, r2
 8010342:	4a15      	ldr	r2, [pc, #84]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010344:	71d1      	strb	r1, [r2, #7]
 8010346:	4a14      	ldr	r2, [pc, #80]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010348:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 801034c:	4293      	cmp	r3, r2
 801034e:	d901      	bls.n	8010354 <isoDepHandleControlMsg+0x12c>
            {
                return ERR_PROTO;
 8010350:	230b      	movs	r3, #11
 8010352:	e01c      	b.n	801038e <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8010354:	4b10      	ldr	r3, [pc, #64]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010356:	785b      	ldrb	r3, [r3, #1]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <isoDepHandleControlMsg+0x140>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 801035c:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 8010360:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 8010362:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <isoDepHandleControlMsg+0x170>)
 8010364:	2203      	movs	r2, #3
 8010366:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 8010368:	23c2      	movs	r3, #194	; 0xc2
 801036a:	75fb      	strb	r3, [r7, #23]
            break;
 801036c:	e001      	b.n	8010372 <isoDepHandleControlMsg+0x14a>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 801036e:	230c      	movs	r3, #12
 8010370:	e00d      	b.n	801038e <isoDepHandleControlMsg+0x166>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 8010372:	7dbb      	ldrb	r3, [r7, #22]
 8010374:	b29c      	uxth	r4, r3
 8010376:	f107 030c 	add.w	r3, r7, #12
 801037a:	1c9a      	adds	r2, r3, #2
 801037c:	f107 010c 	add.w	r1, r7, #12
 8010380:	7df8      	ldrb	r0, [r7, #23]
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	4623      	mov	r3, r4
 8010388:	f7ff feb6 	bl	80100f8 <isoDepTx>
 801038c:	4603      	mov	r3, r0
}
 801038e:	4618      	mov	r0, r3
 8010390:	371c      	adds	r7, #28
 8010392:	46bd      	mov	sp, r7
 8010394:	bd90      	pop	{r4, r7, pc}
 8010396:	bf00      	nop
 8010398:	2000328c 	.word	0x2000328c

0801039c <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 80103a0:	4b26      	ldr	r3, [pc, #152]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 80103ac:	4b23      	ldr	r3, [pc, #140]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 80103b2:	4b22      	ldr	r3, [pc, #136]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103b4:	22ff      	movs	r2, #255	; 0xff
 80103b6:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 80103b8:	4b20      	ldr	r3, [pc, #128]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 80103be:	4b1f      	ldr	r3, [pc, #124]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 80103ca:	4b1c      	ldr	r3, [pc, #112]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 80103d2:	4b1a      	ldr	r3, [pc, #104]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103d4:	2240      	movs	r2, #64	; 0x40
 80103d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 80103da:	4b18      	ldr	r3, [pc, #96]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103dc:	2210      	movs	r2, #16
 80103de:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 80103e0:	4b16      	ldr	r3, [pc, #88]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103e2:	2210      	movs	r2, #16
 80103e4:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 80103e6:	4b15      	ldr	r3, [pc, #84]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103e8:	2201      	movs	r2, #1
 80103ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 80103ee:	4b13      	ldr	r3, [pc, #76]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 80103f4:	4b11      	ldr	r3, [pc, #68]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 80103fa:	4b10      	ldr	r3, [pc, #64]	; (801043c <rfalIsoDepInitialize+0xa0>)
 80103fc:	2200      	movs	r2, #0
 80103fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 8010402:	4b0e      	ldr	r3, [pc, #56]	; (801043c <rfalIsoDepInitialize+0xa0>)
 8010404:	2200      	movs	r2, #0
 8010406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 801040a:	4b0c      	ldr	r3, [pc, #48]	; (801043c <rfalIsoDepInitialize+0xa0>)
 801040c:	2200      	movs	r2, #0
 801040e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 8010412:	4b0a      	ldr	r3, [pc, #40]	; (801043c <rfalIsoDepInitialize+0xa0>)
 8010414:	2203      	movs	r2, #3
 8010416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 801041a:	4b08      	ldr	r3, [pc, #32]	; (801043c <rfalIsoDepInitialize+0xa0>)
 801041c:	2203      	movs	r2, #3
 801041e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 8010422:	4b06      	ldr	r3, [pc, #24]	; (801043c <rfalIsoDepInitialize+0xa0>)
 8010424:	2202      	movs	r2, #2
 8010426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 801042a:	4b04      	ldr	r3, [pc, #16]	; (801043c <rfalIsoDepInitialize+0xa0>)
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 8010432:	f7ff fe4f 	bl	80100d4 <isoDepClearCounters>
}
 8010436:	bf00      	nop
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	2000328c 	.word	0x2000328c

08010440 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 8010440:	b5b0      	push	{r4, r5, r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af02      	add	r7, sp, #8
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <isoDepDataExchangePCD+0x16>
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 8010456:	2307      	movs	r3, #7
 8010458:	e290      	b.n	801097c <isoDepDataExchangePCD+0x53c>
    }    
    
    *outIsChaining = false;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2200      	movs	r2, #0
 801045e:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 8010460:	4ba1      	ldr	r3, [pc, #644]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8010468:	4b9f      	ldr	r3, [pc, #636]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801046a:	78db      	ldrb	r3, [r3, #3]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d007      	beq.n	8010480 <isoDepDataExchangePCD+0x40>
 8010470:	4b9d      	ldr	r3, [pc, #628]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010472:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010476:	3301      	adds	r3, #1
 8010478:	b2da      	uxtb	r2, r3
 801047a:	4b9b      	ldr	r3, [pc, #620]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801047c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 8010480:	4b99      	ldr	r3, [pc, #612]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010482:	791b      	ldrb	r3, [r3, #4]
 8010484:	2bff      	cmp	r3, #255	; 0xff
 8010486:	d007      	beq.n	8010498 <isoDepDataExchangePCD+0x58>
 8010488:	4b97      	ldr	r3, [pc, #604]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801048a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801048e:	3301      	adds	r3, #1
 8010490:	b2da      	uxtb	r2, r3
 8010492:	4b95      	ldr	r3, [pc, #596]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010494:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 8010498:	4b93      	ldr	r3, [pc, #588]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801049a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801049e:	4b92      	ldr	r3, [pc, #584]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d307      	bcc.n	80104b8 <isoDepDataExchangePCD+0x78>
 80104a8:	4b8f      	ldr	r3, [pc, #572]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104aa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80104ae:	4b8e      	ldr	r3, [pc, #568]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d201      	bcs.n	80104bc <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 80104b8:	2307      	movs	r3, #7
 80104ba:	e25f      	b.n	801097c <isoDepDataExchangePCD+0x53c>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 80104bc:	4b8a      	ldr	r3, [pc, #552]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d00c      	beq.n	80104de <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 80104c4:	4b88      	ldr	r3, [pc, #544]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7f4 f887 	bl	80045dc <timerIsExpired>
 80104ce:	4603      	mov	r3, r0
 80104d0:	f083 0301 	eor.w	r3, r3, #1
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 80104da:	2302      	movs	r3, #2
 80104dc:	e24e      	b.n	801097c <isoDepDataExchangePCD+0x53c>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 80104de:	4b82      	ldr	r3, [pc, #520]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 80104e4:	4b80      	ldr	r3, [pc, #512]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b03      	cmp	r3, #3
 80104ea:	f300 8245 	bgt.w	8010978 <isoDepDataExchangePCD+0x538>
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	da2d      	bge.n	801054e <isoDepDataExchangePCD+0x10e>
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <isoDepDataExchangePCD+0xbc>
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d002      	beq.n	8010500 <isoDepDataExchangePCD+0xc0>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 80104fa:	e23d      	b.n	8010978 <isoDepDataExchangePCD+0x538>
            return ERR_NONE;
 80104fc:	2300      	movs	r3, #0
 80104fe:	e23d      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 8010500:	4b79      	ldr	r3, [pc, #484]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010502:	789b      	ldrb	r3, [r3, #2]
 8010504:	f003 0301 	and.w	r3, r3, #1
 8010508:	b2db      	uxtb	r3, r3
 801050a:	f043 0302 	orr.w	r3, r3, #2
 801050e:	b2d8      	uxtb	r0, r3
 8010510:	4b75      	ldr	r3, [pc, #468]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010512:	6959      	ldr	r1, [r3, #20]
 8010514:	4b74      	ldr	r3, [pc, #464]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	4a73      	ldr	r2, [pc, #460]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801051a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801051e:	189c      	adds	r4, r3, r2
 8010520:	4b71      	ldr	r3, [pc, #452]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010522:	8b9d      	ldrh	r5, [r3, #28]
 8010524:	4b70      	ldr	r3, [pc, #448]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010526:	689a      	ldr	r2, [r3, #8]
 8010528:	4b6f      	ldr	r3, [pc, #444]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4413      	add	r3, r2
 801052e:	9300      	str	r3, [sp, #0]
 8010530:	462b      	mov	r3, r5
 8010532:	4622      	mov	r2, r4
 8010534:	f7ff fde0 	bl	80100f8 <isoDepTx>
 8010538:	4603      	mov	r3, r0
 801053a:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 801053c:	89fb      	ldrh	r3, [r7, #14]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d103      	bne.n	801054a <isoDepDataExchangePCD+0x10a>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 8010542:	4b69      	ldr	r3, [pc, #420]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010544:	2202      	movs	r2, #2
 8010546:	701a      	strb	r2, [r3, #0]
                  break;
 8010548:	e001      	b.n	801054e <isoDepDataExchangePCD+0x10e>
                  return ret;
 801054a:	89fb      	ldrh	r3, [r7, #14]
 801054c:	e216      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            ret = rfalGetTransceiveStatus();
 801054e:	f008 f897 	bl	8018680 <rfalGetTransceiveStatus>
 8010552:	4603      	mov	r3, r0
 8010554:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8010556:	89fb      	ldrh	r3, [r7, #14]
 8010558:	2b28      	cmp	r3, #40	; 0x28
 801055a:	f200 8082 	bhi.w	8010662 <isoDepDataExchangePCD+0x222>
 801055e:	a201      	add	r2, pc, #4	; (adr r2, 8010564 <isoDepDataExchangePCD+0x124>)
 8010560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010564:	08010667 	.word	0x08010667
 8010568:	08010663 	.word	0x08010663
 801056c:	0801065f 	.word	0x0801065f
 8010570:	08010663 	.word	0x08010663
 8010574:	08010609 	.word	0x08010609
 8010578:	08010663 	.word	0x08010663
 801057c:	08010663 	.word	0x08010663
 8010580:	08010663 	.word	0x08010663
 8010584:	08010663 	.word	0x08010663
 8010588:	08010609 	.word	0x08010609
 801058c:	08010663 	.word	0x08010663
 8010590:	08010663 	.word	0x08010663
 8010594:	08010663 	.word	0x08010663
 8010598:	08010663 	.word	0x08010663
 801059c:	08010663 	.word	0x08010663
 80105a0:	08010663 	.word	0x08010663
 80105a4:	08010663 	.word	0x08010663
 80105a8:	08010663 	.word	0x08010663
 80105ac:	08010663 	.word	0x08010663
 80105b0:	08010663 	.word	0x08010663
 80105b4:	08010663 	.word	0x08010663
 80105b8:	08010609 	.word	0x08010609
 80105bc:	08010663 	.word	0x08010663
 80105c0:	08010663 	.word	0x08010663
 80105c4:	08010663 	.word	0x08010663
 80105c8:	08010663 	.word	0x08010663
 80105cc:	08010663 	.word	0x08010663
 80105d0:	08010609 	.word	0x08010609
 80105d4:	08010663 	.word	0x08010663
 80105d8:	08010663 	.word	0x08010663
 80105dc:	08010663 	.word	0x08010663
 80105e0:	08010663 	.word	0x08010663
 80105e4:	08010663 	.word	0x08010663
 80105e8:	08010663 	.word	0x08010663
 80105ec:	08010663 	.word	0x08010663
 80105f0:	08010663 	.word	0x08010663
 80105f4:	08010663 	.word	0x08010663
 80105f8:	08010663 	.word	0x08010663
 80105fc:	08010663 	.word	0x08010663
 8010600:	08010663 	.word	0x08010663
 8010604:	08010609 	.word	0x08010609
                    if( gIsoDep.isRxChaining )
 8010608:	4b37      	ldr	r3, [pc, #220]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801060a:	7cdb      	ldrb	r3, [r3, #19]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00a      	beq.n	8010626 <isoDepDataExchangePCD+0x1e6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8010610:	2100      	movs	r1, #0
 8010612:	2000      	movs	r0, #0
 8010614:	f7ff fe08 	bl	8010228 <isoDepHandleControlMsg>
 8010618:	4603      	mov	r3, r0
 801061a:	81fb      	strh	r3, [r7, #14]
 801061c:	89fb      	ldrh	r3, [r7, #14]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d01b      	beq.n	801065a <isoDepDataExchangePCD+0x21a>
 8010622:	89fb      	ldrh	r3, [r7, #14]
 8010624:	e1aa      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8010626:	4b30      	ldr	r3, [pc, #192]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	2b03      	cmp	r3, #3
 801062c:	d10a      	bne.n	8010644 <isoDepDataExchangePCD+0x204>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 801062e:	2100      	movs	r1, #0
 8010630:	2003      	movs	r0, #3
 8010632:	f7ff fdf9 	bl	8010228 <isoDepHandleControlMsg>
 8010636:	4603      	mov	r3, r0
 8010638:	81fb      	strh	r3, [r7, #14]
 801063a:	89fb      	ldrh	r3, [r7, #14]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00c      	beq.n	801065a <isoDepDataExchangePCD+0x21a>
 8010640:	89fb      	ldrh	r3, [r7, #14]
 8010642:	e19b      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8010644:	2100      	movs	r1, #0
 8010646:	2001      	movs	r0, #1
 8010648:	f7ff fdee 	bl	8010228 <isoDepHandleControlMsg>
 801064c:	4603      	mov	r3, r0
 801064e:	81fb      	strh	r3, [r7, #14]
 8010650:	89fb      	ldrh	r3, [r7, #14]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <isoDepDataExchangePCD+0x21a>
 8010656:	89fb      	ldrh	r3, [r7, #14]
 8010658:	e190      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 801065a:	2302      	movs	r3, #2
 801065c:	e18e      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;  /* Debug purposes */
 801065e:	2302      	movs	r3, #2
 8010660:	e18c      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ret;
 8010662:	89fb      	ldrh	r3, [r7, #14]
 8010664:	e18a      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    break;
 8010666:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	881b      	ldrh	r3, [r3, #0]
 801066c:	3307      	adds	r3, #7
 801066e:	08db      	lsrs	r3, r3, #3
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	881a      	ldrh	r2, [r3, #0]
 801067a:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801067c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010680:	b29b      	uxth	r3, r3
 8010682:	429a      	cmp	r2, r3
 8010684:	d305      	bcc.n	8010692 <isoDepDataExchangePCD+0x252>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	881a      	ldrh	r2, [r3, #0]
 801068a:	4b17      	ldr	r3, [pc, #92]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 801068c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801068e:	429a      	cmp	r2, r3
 8010690:	d301      	bcc.n	8010696 <isoDepDataExchangePCD+0x256>
                return ERR_PROTO;
 8010692:	230b      	movs	r3, #11
 8010694:	e172      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8010696:	4b14      	ldr	r3, [pc, #80]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 801069e:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80106a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d10b      	bne.n	80106c0 <isoDepDataExchangePCD+0x280>
 80106a8:	7b7b      	ldrb	r3, [r7, #13]
 80106aa:	f003 0308 	and.w	r3, r3, #8
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d104      	bne.n	80106bc <isoDepDataExchangePCD+0x27c>
 80106b2:	7b7b      	ldrb	r3, [r7, #13]
 80106b4:	f003 0304 	and.w	r3, r3, #4
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d001      	beq.n	80106c0 <isoDepDataExchangePCD+0x280>
                return ERR_PROTO;
 80106bc:	230b      	movs	r3, #11
 80106be:	e15d      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 80106c0:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80106c2:	78db      	ldrb	r3, [r3, #3]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d011      	beq.n	80106ec <isoDepDataExchangePCD+0x2ac>
 80106c8:	7b7b      	ldrb	r3, [r7, #13]
 80106ca:	f003 0308 	and.w	r3, r3, #8
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d007      	beq.n	80106e2 <isoDepDataExchangePCD+0x2a2>
 80106d2:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80106d4:	78da      	ldrb	r2, [r3, #3]
 80106d6:	4b04      	ldr	r3, [pc, #16]	; (80106e8 <isoDepDataExchangePCD+0x2a8>)
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	3301      	adds	r3, #1
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d004      	beq.n	80106ec <isoDepDataExchangePCD+0x2ac>
                return ERR_PROTO;
 80106e2:	230b      	movs	r3, #11
 80106e4:	e14a      	b.n	801097c <isoDepDataExchangePCD+0x53c>
 80106e6:	bf00      	nop
 80106e8:	2000328c 	.word	0x2000328c
            if( isoDep_PCBisSBlock(rxPCB) )
 80106ec:	7b7b      	ldrb	r3, [r7, #13]
 80106ee:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80106f2:	2bc2      	cmp	r3, #194	; 0xc2
 80106f4:	d134      	bne.n	8010760 <isoDepDataExchangePCD+0x320>
                if( isoDep_PCBisSWTX(rxPCB) )
 80106f6:	7b7b      	ldrb	r3, [r7, #13]
 80106f8:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80106fc:	2bc2      	cmp	r3, #194	; 0xc2
 80106fe:	d11b      	bne.n	8010738 <isoDepDataExchangePCD+0x2f8>
 8010700:	7b7b      	ldrb	r3, [r7, #13]
 8010702:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010706:	2b30      	cmp	r3, #48	; 0x30
 8010708:	d116      	bne.n	8010738 <isoDepDataExchangePCD+0x2f8>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 801070a:	4b9e      	ldr	r3, [pc, #632]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	4a9d      	ldr	r2, [pc, #628]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010710:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8010714:	4413      	add	r3, r2
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801071c:	b2db      	uxtb	r3, r3
 801071e:	4619      	mov	r1, r3
 8010720:	2002      	movs	r0, #2
 8010722:	f7ff fd81 	bl	8010228 <isoDepHandleControlMsg>
 8010726:	4603      	mov	r3, r0
 8010728:	81fb      	strh	r3, [r7, #14]
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <isoDepDataExchangePCD+0x2f4>
 8010730:	89fb      	ldrh	r3, [r7, #14]
 8010732:	e123      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8010734:	2302      	movs	r3, #2
 8010736:	e121      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                if( isoDep_PCBisSDeselect(rxPCB) )
 8010738:	7b7b      	ldrb	r3, [r7, #13]
 801073a:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 801073e:	2bc2      	cmp	r3, #194	; 0xc2
 8010740:	d10c      	bne.n	801075c <isoDepDataExchangePCD+0x31c>
 8010742:	7b7b      	ldrb	r3, [r7, #13]
 8010744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010748:	2b00      	cmp	r3, #0
 801074a:	d107      	bne.n	801075c <isoDepDataExchangePCD+0x31c>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 801074c:	4b8d      	ldr	r3, [pc, #564]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	2b03      	cmp	r3, #3
 8010752:	d103      	bne.n	801075c <isoDepDataExchangePCD+0x31c>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 8010754:	f7ff fe22 	bl	801039c <rfalIsoDepInitialize>
                        return ERR_NONE;
 8010758:	2300      	movs	r3, #0
 801075a:	e10f      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 801075c:	230b      	movs	r3, #11
 801075e:	e10d      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisRBlock(rxPCB) )
 8010760:	7b7b      	ldrb	r3, [r7, #13]
 8010762:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8010766:	2ba2      	cmp	r3, #162	; 0xa2
 8010768:	d141      	bne.n	80107ee <isoDepDataExchangePCD+0x3ae>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 801076a:	7b7b      	ldrb	r3, [r7, #13]
 801076c:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8010770:	2ba2      	cmp	r3, #162	; 0xa2
 8010772:	d13a      	bne.n	80107ea <isoDepDataExchangePCD+0x3aa>
 8010774:	7b7b      	ldrb	r3, [r7, #13]
 8010776:	f003 0310 	and.w	r3, r3, #16
 801077a:	2b00      	cmp	r3, #0
 801077c:	d135      	bne.n	80107ea <isoDepDataExchangePCD+0x3aa>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 801077e:	7b7b      	ldrb	r3, [r7, #13]
 8010780:	f003 0301 	and.w	r3, r3, #1
 8010784:	4a7f      	ldr	r2, [pc, #508]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010786:	7892      	ldrb	r2, [r2, #2]
 8010788:	4293      	cmp	r3, r2
 801078a:	d119      	bne.n	80107c0 <isoDepDataExchangePCD+0x380>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 801078c:	4b7d      	ldr	r3, [pc, #500]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801078e:	789b      	ldrb	r3, [r3, #2]
 8010790:	f003 0301 	and.w	r3, r3, #1
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	bf0c      	ite	eq
 801079a:	2301      	moveq	r3, #1
 801079c:	2300      	movne	r3, #0
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	461a      	mov	r2, r3
 80107a2:	4b78      	ldr	r3, [pc, #480]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107a4:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 80107a6:	4b77      	ldr	r3, [pc, #476]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107a8:	7c9b      	ldrb	r3, [r3, #18]
 80107aa:	f083 0301 	eor.w	r3, r3, #1
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <isoDepDataExchangePCD+0x378>
                            return ERR_PROTO;
 80107b4:	230b      	movs	r3, #11
 80107b6:	e0e1      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        isoDepClearCounters();
 80107b8:	f7ff fc8c 	bl	80100d4 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 80107bc:	2300      	movs	r3, #0
 80107be:	e0dd      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 80107c0:	4b70      	ldr	r3, [pc, #448]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107c2:	795b      	ldrb	r3, [r3, #5]
 80107c4:	1c5a      	adds	r2, r3, #1
 80107c6:	b2d1      	uxtb	r1, r2
 80107c8:	4a6e      	ldr	r2, [pc, #440]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107ca:	7151      	strb	r1, [r2, #5]
 80107cc:	4a6d      	ldr	r2, [pc, #436]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107ce:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d207      	bcs.n	80107e6 <isoDepDataExchangePCD+0x3a6>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 80107d6:	4b6b      	ldr	r3, [pc, #428]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107d8:	2200      	movs	r2, #0
 80107da:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 80107dc:	4b69      	ldr	r3, [pc, #420]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80107de:	2201      	movs	r2, #1
 80107e0:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 80107e2:	2302      	movs	r3, #2
 80107e4:	e0ca      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        return ERR_PROTO;
 80107e6:	230b      	movs	r3, #11
 80107e8:	e0c8      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_PROTO;
 80107ea:	230b      	movs	r3, #11
 80107ec:	e0c6      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisIBlock(rxPCB) )
 80107ee:	7b7b      	ldrb	r3, [r7, #13]
 80107f0:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	f040 80bd 	bne.w	8010974 <isoDepDataExchangePCD+0x534>
                if( isoDep_PCBisChaining(rxPCB) )
 80107fa:	7b7b      	ldrb	r3, [r7, #13]
 80107fc:	f003 0310 	and.w	r3, r3, #16
 8010800:	2b00      	cmp	r3, #0
 8010802:	d05e      	beq.n	80108c2 <isoDepDataExchangePCD+0x482>
                    gIsoDep.isRxChaining = true;
 8010804:	4b5f      	ldr	r3, [pc, #380]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010806:	2201      	movs	r2, #1
 8010808:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2201      	movs	r2, #1
 801080e:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8010810:	7b7b      	ldrb	r3, [r7, #13]
 8010812:	f003 0301 	and.w	r3, r3, #1
 8010816:	4a5b      	ldr	r2, [pc, #364]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010818:	7892      	ldrb	r2, [r2, #2]
 801081a:	4293      	cmp	r3, r2
 801081c:	d144      	bne.n	80108a8 <isoDepDataExchangePCD+0x468>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 801081e:	4b59      	ldr	r3, [pc, #356]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010820:	789b      	ldrb	r3, [r3, #2]
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2b00      	cmp	r3, #0
 801082a:	bf0c      	ite	eq
 801082c:	2301      	moveq	r3, #1
 801082e:	2300      	movne	r3, #0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	461a      	mov	r2, r3
 8010834:	4b53      	ldr	r3, [pc, #332]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010836:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8010838:	f7ff fc4c 	bl	80100d4 <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 801083c:	2100      	movs	r1, #0
 801083e:	2000      	movs	r0, #0
 8010840:	f7ff fcf2 	bl	8010228 <isoDepHandleControlMsg>
 8010844:	4603      	mov	r3, r0
 8010846:	81fb      	strh	r3, [r7, #14]
 8010848:	89fb      	ldrh	r3, [r7, #14]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <isoDepDataExchangePCD+0x412>
 801084e:	89fb      	ldrh	r3, [r7, #14]
 8010850:	e094      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        *outActRxLen -= gIsoDep.hdrLen;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	881a      	ldrh	r2, [r3, #0]
 8010856:	4b4b      	ldr	r3, [pc, #300]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010858:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801085c:	b29b      	uxth	r3, r3
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	b29a      	uxth	r2, r3
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8010866:	4b47      	ldr	r3, [pc, #284]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010868:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801086c:	4b45      	ldr	r3, [pc, #276]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801086e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010872:	429a      	cmp	r2, r3
 8010874:	d014      	beq.n	80108a0 <isoDepDataExchangePCD+0x460>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d010      	beq.n	80108a0 <isoDepDataExchangePCD+0x460>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 801087e:	4b41      	ldr	r3, [pc, #260]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010880:	699b      	ldr	r3, [r3, #24]
 8010882:	4a40      	ldr	r2, [pc, #256]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010884:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8010888:	1898      	adds	r0, r3, r2
 801088a:	4b3e      	ldr	r3, [pc, #248]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801088c:	699b      	ldr	r3, [r3, #24]
 801088e:	4a3d      	ldr	r2, [pc, #244]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010890:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8010894:	1899      	adds	r1, r3, r2
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	f00a fdb4 	bl	801b408 <memmove>
                        isoDepClearCounters();
 80108a0:	f7ff fc18 	bl	80100d4 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 80108a4:	230d      	movs	r3, #13
 80108a6:	e069      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 80108a8:	2100      	movs	r1, #0
 80108aa:	2000      	movs	r0, #0
 80108ac:	f7ff fcbc 	bl	8010228 <isoDepHandleControlMsg>
 80108b0:	4603      	mov	r3, r0
 80108b2:	81fb      	strh	r3, [r7, #14]
 80108b4:	89fb      	ldrh	r3, [r7, #14]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <isoDepDataExchangePCD+0x47e>
 80108ba:	89fb      	ldrh	r3, [r7, #14]
 80108bc:	e05e      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 80108be:	2302      	movs	r3, #2
 80108c0:	e05c      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 80108c2:	4b30      	ldr	r3, [pc, #192]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	74da      	strb	r2, [r3, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 80108c8:	7b7b      	ldrb	r3, [r7, #13]
 80108ca:	f003 0301 	and.w	r3, r3, #1
 80108ce:	4a2d      	ldr	r2, [pc, #180]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80108d0:	7892      	ldrb	r2, [r2, #2]
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d13a      	bne.n	801094c <isoDepDataExchangePCD+0x50c>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 80108d6:	4b2b      	ldr	r3, [pc, #172]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80108d8:	789b      	ldrb	r3, [r3, #2]
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bf0c      	ite	eq
 80108e4:	2301      	moveq	r3, #1
 80108e6:	2300      	movne	r3, #0
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	461a      	mov	r2, r3
 80108ec:	4b25      	ldr	r3, [pc, #148]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80108ee:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	881a      	ldrh	r2, [r3, #0]
 80108f4:	4b23      	ldr	r3, [pc, #140]	; (8010984 <isoDepDataExchangePCD+0x544>)
 80108f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	b29a      	uxth	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8010904:	4b1f      	ldr	r3, [pc, #124]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010906:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801090a:	4b1e      	ldr	r3, [pc, #120]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801090c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010910:	429a      	cmp	r2, r3
 8010912:	d014      	beq.n	801093e <isoDepDataExchangePCD+0x4fe>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d010      	beq.n	801093e <isoDepDataExchangePCD+0x4fe>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 801091c:	4b19      	ldr	r3, [pc, #100]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	4a18      	ldr	r2, [pc, #96]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010922:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8010926:	1898      	adds	r0, r3, r2
 8010928:	4b16      	ldr	r3, [pc, #88]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801092a:	699b      	ldr	r3, [r3, #24]
 801092c:	4a15      	ldr	r2, [pc, #84]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801092e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8010932:	1899      	adds	r1, r3, r2
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	881b      	ldrh	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	f00a fd65 	bl	801b408 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 801093e:	4b11      	ldr	r3, [pc, #68]	; (8010984 <isoDepDataExchangePCD+0x544>)
 8010940:	2200      	movs	r2, #0
 8010942:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 8010944:	f7ff fbc6 	bl	80100d4 <isoDepClearCounters>
                    return ERR_NONE;
 8010948:	2300      	movs	r3, #0
 801094a:	e017      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 801094c:	4b0d      	ldr	r3, [pc, #52]	; (8010984 <isoDepDataExchangePCD+0x544>)
 801094e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010952:	2b02      	cmp	r3, #2
 8010954:	d001      	beq.n	801095a <isoDepDataExchangePCD+0x51a>
                        return ERR_PROTO;
 8010956:	230b      	movs	r3, #11
 8010958:	e010      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 801095a:	2100      	movs	r1, #0
 801095c:	2001      	movs	r0, #1
 801095e:	f7ff fc63 	bl	8010228 <isoDepHandleControlMsg>
 8010962:	4603      	mov	r3, r0
 8010964:	81fb      	strh	r3, [r7, #14]
 8010966:	89fb      	ldrh	r3, [r7, #14]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <isoDepDataExchangePCD+0x530>
 801096c:	89fb      	ldrh	r3, [r7, #14]
 801096e:	e005      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8010970:	2302      	movs	r3, #2
 8010972:	e003      	b.n	801097c <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 8010974:	230b      	movs	r3, #11
 8010976:	e001      	b.n	801097c <isoDepDataExchangePCD+0x53c>
            break;
 8010978:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 801097a:	230c      	movs	r3, #12
}
 801097c:	4618      	mov	r0, r3
 801097e:	3710      	adds	r7, #16
 8010980:	46bd      	mov	sp, r7
 8010982:	bdb0      	pop	{r4, r5, r7, pc}
 8010984:	2000328c 	.word	0x2000328c

08010988 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 801098e:	4b23      	ldr	r3, [pc, #140]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 8010990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010992:	2b00      	cmp	r3, #0
 8010994:	d003      	beq.n	801099e <rfalIsoDepDeselect+0x16>
 8010996:	4b21      	ldr	r3, [pc, #132]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 8010998:	699b      	ldr	r3, [r3, #24]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d110      	bne.n	80109c0 <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 801099e:	4b1f      	ldr	r3, [pc, #124]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109a0:	4a1f      	ldr	r2, [pc, #124]	; (8010a20 <rfalIsoDepDeselect+0x98>)
 80109a2:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 80109a4:	4b1d      	ldr	r3, [pc, #116]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109a6:	4a1f      	ldr	r2, [pc, #124]	; (8010a24 <rfalIsoDepDeselect+0x9c>)
 80109a8:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 80109aa:	4b1c      	ldr	r3, [pc, #112]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109ac:	2204      	movs	r2, #4
 80109ae:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 80109b0:	4b1a      	ldr	r3, [pc, #104]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109b2:	2202      	movs	r2, #2
 80109b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 80109b8:	4b18      	ldr	r3, [pc, #96]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109ba:	2202      	movs	r2, #2
 80109bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 80109c0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80109c4:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 80109c6:	2100      	movs	r1, #0
 80109c8:	2003      	movs	r0, #3
 80109ca:	f7ff fc2d 	bl	8010228 <isoDepHandleControlMsg>
 80109ce:	4603      	mov	r3, r0
 80109d0:	807b      	strh	r3, [r7, #2]
 80109d2:	887b      	ldrh	r3, [r7, #2]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <rfalIsoDepDeselect+0x54>
 80109d8:	887b      	ldrh	r3, [r7, #2]
 80109da:	e01a      	b.n	8010a12 <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 80109dc:	4b0f      	ldr	r3, [pc, #60]	; (8010a1c <rfalIsoDepDeselect+0x94>)
 80109de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109e0:	1c7a      	adds	r2, r7, #1
 80109e2:	4611      	mov	r1, r2
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff fd2b 	bl	8010440 <isoDepDataExchangePCD>
 80109ea:	4603      	mov	r3, r0
 80109ec:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 80109ee:	f007 fe57 	bl	80186a0 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	1e5a      	subs	r2, r3, #1
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <rfalIsoDepDeselect+0x7a>
 80109fc:	887b      	ldrh	r3, [r7, #2]
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d0ec      	beq.n	80109dc <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 8010a02:	f7ff fccb 	bl	801039c <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d001      	beq.n	8010a10 <rfalIsoDepDeselect+0x88>
 8010a0c:	887b      	ldrh	r3, [r7, #2]
 8010a0e:	e000      	b.n	8010a12 <rfalIsoDepDeselect+0x8a>
 8010a10:	2304      	movs	r3, #4
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	2000328c 	.word	0x2000328c
 8010a20:	200032d6 	.word	0x200032d6
 8010a24:	200032d1 	.word	0x200032d1

08010a28 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 8010a32:	79fb      	ldrb	r3, [r7, #7]
 8010a34:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	2b0e      	cmp	r3, #14
 8010a3a:	d901      	bls.n	8010a40 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8010a40:	7bfb      	ldrb	r3, [r7, #15]
 8010a42:	330c      	adds	r3, #12
 8010a44:	2201      	movs	r2, #1
 8010a46:	fa02 f303 	lsl.w	r3, r2, r3
 8010a4a:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a52:	bf28      	it	cs
 8010a54:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8010a58:	60bb      	str	r3, [r7, #8]
    
    return result;
 8010a5a:	68bb      	ldr	r3, [r7, #8]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3714      	adds	r7, #20
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bc80      	pop	{r7}
 8010a64:	4770      	bx	lr
	...

08010a68 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8010a72:	4b33      	ldr	r3, [pc, #204]	; (8010b40 <rfalIsoDepFSxI2FSx+0xd8>)
 8010a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d105      	bne.n	8010a88 <rfalIsoDepFSxI2FSx+0x20>
 8010a7c:	79fb      	ldrb	r3, [r7, #7]
 8010a7e:	2b0c      	cmp	r3, #12
 8010a80:	bf28      	it	cs
 8010a82:	230c      	movcs	r3, #12
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	e004      	b.n	8010a92 <rfalIsoDepFSxI2FSx+0x2a>
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b08      	cmp	r3, #8
 8010a8c:	bf28      	it	cs
 8010a8e:	2308      	movcs	r3, #8
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8010a94:	7b7b      	ldrb	r3, [r7, #13]
 8010a96:	2b0c      	cmp	r3, #12
 8010a98:	d848      	bhi.n	8010b2c <rfalIsoDepFSxI2FSx+0xc4>
 8010a9a:	a201      	add	r2, pc, #4	; (adr r2, 8010aa0 <rfalIsoDepFSxI2FSx+0x38>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010ad5 	.word	0x08010ad5
 8010aa4:	08010adb 	.word	0x08010adb
 8010aa8:	08010ae1 	.word	0x08010ae1
 8010aac:	08010ae7 	.word	0x08010ae7
 8010ab0:	08010aed 	.word	0x08010aed
 8010ab4:	08010af3 	.word	0x08010af3
 8010ab8:	08010af9 	.word	0x08010af9
 8010abc:	08010aff 	.word	0x08010aff
 8010ac0:	08010b05 	.word	0x08010b05
 8010ac4:	08010b0d 	.word	0x08010b0d
 8010ac8:	08010b15 	.word	0x08010b15
 8010acc:	08010b1d 	.word	0x08010b1d
 8010ad0:	08010b25 	.word	0x08010b25
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8010ad4:	2310      	movs	r3, #16
 8010ad6:	81fb      	strh	r3, [r7, #14]
 8010ad8:	e02c      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8010ada:	2318      	movs	r3, #24
 8010adc:	81fb      	strh	r3, [r7, #14]
 8010ade:	e029      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8010ae0:	2320      	movs	r3, #32
 8010ae2:	81fb      	strh	r3, [r7, #14]
 8010ae4:	e026      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8010ae6:	2328      	movs	r3, #40	; 0x28
 8010ae8:	81fb      	strh	r3, [r7, #14]
 8010aea:	e023      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8010aec:	2330      	movs	r3, #48	; 0x30
 8010aee:	81fb      	strh	r3, [r7, #14]
 8010af0:	e020      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8010af2:	2340      	movs	r3, #64	; 0x40
 8010af4:	81fb      	strh	r3, [r7, #14]
 8010af6:	e01d      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8010af8:	2360      	movs	r3, #96	; 0x60
 8010afa:	81fb      	strh	r3, [r7, #14]
 8010afc:	e01a      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8010afe:	2380      	movs	r3, #128	; 0x80
 8010b00:	81fb      	strh	r3, [r7, #14]
 8010b02:	e017      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8010b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b08:	81fb      	strh	r3, [r7, #14]
 8010b0a:	e013      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8010b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b10:	81fb      	strh	r3, [r7, #14]
 8010b12:	e00f      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8010b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b18:	81fb      	strh	r3, [r7, #14]
 8010b1a:	e00b      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8010b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b20:	81fb      	strh	r3, [r7, #14]
 8010b22:	e007      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8010b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b28:	81fb      	strh	r3, [r7, #14]
 8010b2a:	e003      	b.n	8010b34 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8010b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b30:	81fb      	strh	r3, [r7, #14]
 8010b32:	bf00      	nop
    }
    return fsx;
 8010b34:	89fb      	ldrh	r3, [r7, #14]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3714      	adds	r7, #20
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bc80      	pop	{r7}
 8010b3e:	4770      	bx	lr
 8010b40:	2000328c 	.word	0x2000328c

08010b44 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 8010b4a:	4b11      	ldr	r3, [pc, #68]	; (8010b90 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010b4c:	8a1b      	ldrh	r3, [r3, #16]
 8010b4e:	2b0f      	cmp	r3, #15
 8010b50:	d909      	bls.n	8010b66 <rfalIsoDepGetMaxInfLen+0x22>
 8010b52:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010b54:	8a1b      	ldrh	r3, [r3, #16]
 8010b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b5a:	d804      	bhi.n	8010b66 <rfalIsoDepGetMaxInfLen+0x22>
 8010b5c:	4b0c      	ldr	r3, [pc, #48]	; (8010b90 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010b5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010b62:	2b03      	cmp	r3, #3
 8010b64:	d905      	bls.n	8010b72 <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 8010b66:	2310      	movs	r3, #16
 8010b68:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 8010b6a:	88fb      	ldrh	r3, [r7, #6]
 8010b6c:	3b03      	subs	r3, #3
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	e009      	b.n	8010b86 <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 8010b72:	4b07      	ldr	r3, [pc, #28]	; (8010b90 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010b74:	8a1a      	ldrh	r2, [r3, #16]
 8010b76:	4b06      	ldr	r3, [pc, #24]	; (8010b90 <rfalIsoDepGetMaxInfLen+0x4c>)
 8010b78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	1ad3      	subs	r3, r2, r3
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	3b02      	subs	r3, #2
 8010b84:	b29b      	uxth	r3, r3
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bc80      	pop	{r7}
 8010b8e:	4770      	bx	lr
 8010b90:	2000328c 	.word	0x2000328c

08010b94 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 8010b94:	b084      	sub	sp, #16
 8010b96:	b580      	push	{r7, lr}
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	f107 0c08 	add.w	ip, r7, #8
 8010b9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	4b30      	ldr	r3, [pc, #192]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010ba8:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 8010baa:	4b2f      	ldr	r3, [pc, #188]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bac:	2203      	movs	r2, #3
 8010bae:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 8010bb2:	89ba      	ldrh	r2, [r7, #12]
 8010bb4:	4b2c      	ldr	r3, [pc, #176]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bb6:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 8010bb8:	7bba      	ldrb	r2, [r7, #14]
 8010bba:	4b2b      	ldr	r3, [pc, #172]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bbc:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	4b29      	ldr	r3, [pc, #164]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bc4:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 8010bc6:	4b28      	ldr	r3, [pc, #160]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bc8:	2203      	movs	r2, #3
 8010bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 8010bce:	4b26      	ldr	r3, [pc, #152]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bd0:	f240 1203 	movw	r2, #259	; 0x103
 8010bd4:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	4a23      	ldr	r2, [pc, #140]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bda:	62d3      	str	r3, [r2, #44]	; 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	4a22      	ldr	r2, [pc, #136]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010be0:	6313      	str	r3, [r2, #48]	; 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	4a20      	ldr	r2, [pc, #128]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010be6:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 8010be8:	6a3b      	ldr	r3, [r7, #32]
 8010bea:	4a1f      	ldr	r2, [pc, #124]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bec:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 8010bee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010bf0:	4b1d      	ldr	r3, [pc, #116]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bf2:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 8010bf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010bf8:	4b1b      	ldr	r3, [pc, #108]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010bfa:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8010bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bfe:	2bff      	cmp	r3, #255	; 0xff
 8010c00:	d001      	beq.n	8010c06 <rfalIsoDepStartTransceive+0x72>
 8010c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c04:	e001      	b.n	8010c0a <rfalIsoDepStartTransceive+0x76>
 8010c06:	4b18      	ldr	r3, [pc, #96]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010c0a:	4a17      	ldr	r2, [pc, #92]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c0c:	8453      	strh	r3, [r2, #34]	; 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 8010c0e:	4b16      	ldr	r3, [pc, #88]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 8010c14:	f7ff fa5e 	bl	80100d4 <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 8010c18:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c1a:	785b      	ldrb	r3, [r3, #1]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d119      	bne.n	8010c54 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 8010c20:	4b11      	ldr	r3, [pc, #68]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c22:	8b9b      	ldrh	r3, [r3, #28]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d010      	beq.n	8010c4a <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 8010c28:	4b0f      	ldr	r3, [pc, #60]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c2e:	f083 0301 	eor.w	r3, r3, #1
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d004      	beq.n	8010c42 <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 8010c38:	4b0b      	ldr	r3, [pc, #44]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c3a:	2208      	movs	r2, #8
 8010c3c:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e00c      	b.n	8010c5c <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 8010c42:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c44:	2201      	movs	r2, #1
 8010c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 8010c4a:	4b07      	ldr	r3, [pc, #28]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c4c:	2206      	movs	r2, #6
 8010c4e:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 8010c50:	2300      	movs	r3, #0
 8010c52:	e003      	b.n	8010c5c <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 8010c54:	4b04      	ldr	r3, [pc, #16]	; (8010c68 <rfalIsoDepStartTransceive+0xd4>)
 8010c56:	2201      	movs	r2, #1
 8010c58:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c64:	b004      	add	sp, #16
 8010c66:	4770      	bx	lr
 8010c68:	2000328c 	.word	0x2000328c

08010c6c <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8010c70:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <rfalIsoDepGetTransceiveStatus+0x28>)
 8010c72:	785b      	ldrb	r3, [r3, #1]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d101      	bne.n	8010c7c <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 8010c78:	2318      	movs	r3, #24
 8010c7a:	e008      	b.n	8010c8e <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 8010c7c:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <rfalIsoDepGetTransceiveStatus+0x28>)
 8010c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c80:	4a04      	ldr	r2, [pc, #16]	; (8010c94 <rfalIsoDepGetTransceiveStatus+0x28>)
 8010c82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010c84:	4611      	mov	r1, r2
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7ff fbda 	bl	8010440 <isoDepDataExchangePCD>
 8010c8c:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	2000328c 	.word	0x2000328c

08010c98 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b08a      	sub	sp, #40	; 0x28
 8010c9c:	af04      	add	r7, sp, #16
 8010c9e:	60ba      	str	r2, [r7, #8]
 8010ca0:	607b      	str	r3, [r7, #4]
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	73fb      	strb	r3, [r7, #15]
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 8010cb0:	2307      	movs	r3, #7
 8010cb2:	e03c      	b.n	8010d2e <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8010cb4:	23e0      	movs	r3, #224	; 0xe0
 8010cb6:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	011b      	lsls	r3, r3, #4
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	7bbb      	ldrb	r3, [r7, #14]
 8010cc0:	f003 030f 	and.w	r3, r3, #15
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8010ccc:	f107 0010 	add.w	r0, r7, #16
 8010cd0:	4b19      	ldr	r3, [pc, #100]	; (8010d38 <rfalIsoDepRATS+0xa0>)
 8010cd2:	9302      	str	r3, [sp, #8]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	f107 0314 	add.w	r3, r7, #20
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	2314      	movs	r3, #20
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	2102      	movs	r1, #2
 8010ce4:	f007 fc78 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8010cec:	8afb      	ldrh	r3, [r7, #22]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d115      	bne.n	8010d1e <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8010cf2:	8abb      	ldrh	r3, [r7, #20]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d008      	beq.n	8010d0a <rfalIsoDepRATS+0x72>
 8010cf8:	8abb      	ldrh	r3, [r7, #20]
 8010cfa:	2b14      	cmp	r3, #20
 8010cfc:	d805      	bhi.n	8010d0a <rfalIsoDepRATS+0x72>
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	8abb      	ldrh	r3, [r7, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d001      	beq.n	8010d0e <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8010d0a:	230b      	movs	r3, #11
 8010d0c:	e00f      	b.n	8010d2e <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8010d0e:	7bfb      	ldrb	r3, [r7, #15]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff fea9 	bl	8010a68 <rfalIsoDepFSxI2FSx>
 8010d16:	4603      	mov	r3, r0
 8010d18:	461a      	mov	r2, r3
 8010d1a:	4b08      	ldr	r3, [pc, #32]	; (8010d3c <rfalIsoDepRATS+0xa4>)
 8010d1c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d003      	beq.n	8010d2c <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 8010d24:	8abb      	ldrh	r3, [r7, #20]
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8010d2c:	8afb      	ldrh	r3, [r7, #22]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	00046780 	.word	0x00046780
 8010d3c:	2000328c 	.word	0x2000328c

08010d40 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af04      	add	r7, sp, #16
 8010d46:	603b      	str	r3, [r7, #0]
 8010d48:	4603      	mov	r3, r0
 8010d4a:	71fb      	strb	r3, [r7, #7]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	71bb      	strb	r3, [r7, #6]
 8010d50:	4613      	mov	r3, r2
 8010d52:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d008      	beq.n	8010d6c <rfalIsoDepPPS+0x2c>
 8010d5a:	79bb      	ldrb	r3, [r7, #6]
 8010d5c:	2b03      	cmp	r3, #3
 8010d5e:	d805      	bhi.n	8010d6c <rfalIsoDepPPS+0x2c>
 8010d60:	797b      	ldrb	r3, [r7, #5]
 8010d62:	2b03      	cmp	r3, #3
 8010d64:	d802      	bhi.n	8010d6c <rfalIsoDepPPS+0x2c>
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	2b0e      	cmp	r3, #14
 8010d6a:	d901      	bls.n	8010d70 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 8010d6c:	2307      	movs	r3, #7
 8010d6e:	e033      	b.n	8010dd8 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8010d70:	79fb      	ldrb	r3, [r7, #7]
 8010d72:	f003 030f 	and.w	r3, r3, #15
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8010d80:	2311      	movs	r3, #17
 8010d82:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8010d84:	79bb      	ldrb	r3, [r7, #6]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	b25a      	sxtb	r2, r3
 8010d8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	b25b      	sxtb	r3, r3
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f003 030f 	and.w	r3, r3, #15
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8010d9c:	f107 0008 	add.w	r0, r7, #8
 8010da0:	4b0f      	ldr	r3, [pc, #60]	; (8010de0 <rfalIsoDepPPS+0xa0>)
 8010da2:	9302      	str	r3, [sp, #8]
 8010da4:	2300      	movs	r3, #0
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	f107 030c 	add.w	r3, r7, #12
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	2301      	movs	r3, #1
 8010db0:	683a      	ldr	r2, [r7, #0]
 8010db2:	2103      	movs	r1, #3
 8010db4:	f007 fc10 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8010db8:	4603      	mov	r3, r0
 8010dba:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8010dbc:	89fb      	ldrh	r3, [r7, #14]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d109      	bne.n	8010dd6 <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8010dc2:	89bb      	ldrh	r3, [r7, #12]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d104      	bne.n	8010dd2 <rfalIsoDepPPS+0x92>
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	781a      	ldrb	r2, [r3, #0]
 8010dcc:	7a3b      	ldrb	r3, [r7, #8]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d001      	beq.n	8010dd6 <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 8010dd2:	230b      	movs	r3, #11
 8010dd4:	e000      	b.n	8010dd8 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 8010dd6:	89fb      	ldrh	r3, [r7, #14]
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3710      	adds	r7, #16
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	00046780 	.word	0x00046780

08010de4 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b092      	sub	sp, #72	; 0x48
 8010de8:	af04      	add	r7, sp, #16
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	4608      	mov	r0, r1
 8010dee:	4611      	mov	r1, r2
 8010df0:	461a      	mov	r2, r3
 8010df2:	4603      	mov	r3, r0
 8010df4:	70fb      	strb	r3, [r7, #3]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70bb      	strb	r3, [r7, #2]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8010dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00c      	beq.n	8010e1e <rfalIsoDepATTRIB+0x3a>
 8010e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d009      	beq.n	8010e1e <rfalIsoDepATTRIB+0x3a>
 8010e0a:	78bb      	ldrb	r3, [r7, #2]
 8010e0c:	2b03      	cmp	r3, #3
 8010e0e:	d806      	bhi.n	8010e1e <rfalIsoDepATTRIB+0x3a>
 8010e10:	787b      	ldrb	r3, [r7, #1]
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d803      	bhi.n	8010e1e <rfalIsoDepATTRIB+0x3a>
 8010e16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010e1a:	2b0e      	cmp	r3, #14
 8010e1c:	d901      	bls.n	8010e22 <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e066      	b.n	8010ef0 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8010e22:	231d      	movs	r3, #29
 8010e24:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 8010e26:	78fb      	ldrb	r3, [r7, #3]
 8010e28:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8010e2a:	78bb      	ldrb	r3, [r7, #2]
 8010e2c:	019b      	lsls	r3, r3, #6
 8010e2e:	b25a      	sxtb	r2, r3
 8010e30:	787b      	ldrb	r3, [r7, #1]
 8010e32:	011b      	lsls	r3, r3, #4
 8010e34:	b25b      	sxtb	r3, r3
 8010e36:	4313      	orrs	r3, r2
 8010e38:	b25b      	sxtb	r3, r3
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f023 030f 	bic.w	r3, r3, #15
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010e46:	f003 030f 	and.w	r3, r3, #15
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 8010e52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010e56:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8010e58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010e5c:	f003 030f 	and.w	r3, r3, #15
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	743b      	strb	r3, [r7, #16]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8010e68:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8010e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d011      	beq.n	8010e96 <rfalIsoDepATTRIB+0xb2>
 8010e72:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00d      	beq.n	8010e96 <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8010e7a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010e7e:	2b20      	cmp	r3, #32
 8010e80:	bf28      	it	cs
 8010e82:	2320      	movcs	r3, #32
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	461a      	mov	r2, r3
 8010e88:	f107 0308 	add.w	r3, r7, #8
 8010e8c:	3309      	adds	r3, #9
 8010e8e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e90:	4618      	mov	r0, r3
 8010e92:	f00a faab 	bl	801b3ec <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8010e96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010e9a:	2b20      	cmp	r3, #32
 8010e9c:	bf28      	it	cs
 8010e9e:	2320      	movcs	r3, #32
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	3309      	adds	r3, #9
 8010ea6:	b299      	uxth	r1, r3
 8010ea8:	f107 0008 	add.w	r0, r7, #8
 8010eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eae:	9302      	str	r3, [sp, #8]
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	2321      	movs	r3, #33	; 0x21
 8010ebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ebe:	f007 fb8b 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 8010ec6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ecc:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 8010ece:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10c      	bne.n	8010eee <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8010ed4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d007      	beq.n	8010eea <rfalIsoDepATTRIB+0x106>
 8010eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	f003 020f 	and.w	r2, r3, #15
 8010ee2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d001      	beq.n	8010eee <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 8010eea:	230b      	movs	r3, #11
 8010eec:	e000      	b.n	8010ef0 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 8010eee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3738      	adds	r7, #56	; 0x38
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	603b      	str	r3, [r7, #0]
 8010f00:	4603      	mov	r3, r0
 8010f02:	71fb      	strb	r3, [r7, #7]
 8010f04:	460b      	mov	r3, r1
 8010f06:	71bb      	strb	r3, [r7, #6]
 8010f08:	4613      	mov	r3, r2
 8010f0a:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d101      	bne.n	8010f16 <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 8010f12:	2307      	movs	r3, #7
 8010f14:	e143      	b.n	801119e <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8010f16:	2002      	movs	r0, #2
 8010f18:	f007 f8ca 	bl	80180b0 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8010f1c:	4ba2      	ldr	r3, [pc, #648]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8010f1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f22:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	3314      	adds	r3, #20
 8010f2a:	79b9      	ldrb	r1, [r7, #6]
 8010f2c:	79f8      	ldrb	r0, [r7, #7]
 8010f2e:	f7ff feb3 	bl	8010c98 <rfalIsoDepRATS>
 8010f32:	4603      	mov	r3, r0
 8010f34:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8010f36:	4b9c      	ldr	r3, [pc, #624]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8010f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d105      	bne.n	8010f4c <rfalIsoDepPollAHandleActivation+0x54>
 8010f40:	89bb      	ldrh	r3, [r7, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d002      	beq.n	8010f4c <rfalIsoDepPollAHandleActivation+0x54>
 8010f46:	89bb      	ldrh	r3, [r7, #12]
 8010f48:	2b04      	cmp	r3, #4
 8010f4a:	d10b      	bne.n	8010f64 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8010f4c:	2001      	movs	r0, #1
 8010f4e:	f7f3 fbc9 	bl	80046e4 <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	1e5a      	subs	r2, r3, #1
 8010f56:	73fa      	strb	r2, [r7, #15]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d004      	beq.n	8010f66 <rfalIsoDepPollAHandleActivation+0x6e>
 8010f5c:	89bb      	ldrh	r3, [r7, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1e0      	bne.n	8010f24 <rfalIsoDepPollAHandleActivation+0x2c>
 8010f62:	e000      	b.n	8010f66 <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 8010f64:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 8010f66:	89bb      	ldrh	r3, [r7, #12]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d008      	beq.n	8010f7e <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8010f6c:	4b8e      	ldr	r3, [pc, #568]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8010f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d101      	bne.n	8010f7a <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 8010f76:	f7ff fd07 	bl	8010988 <rfalIsoDepDeselect>
        }
        return ret;
 8010f7a:	89bb      	ldrh	r3, [r7, #12]
 8010f7c:	e10f      	b.n	801119e <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	2204      	movs	r2, #4
 8010f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d973      	bls.n	801109a <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	785b      	ldrb	r3, [r3, #1]
 8010fba:	f003 030f 	and.w	r3, r3, #15
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 8010fc6:	7bbb      	ldrb	r3, [r7, #14]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	785b      	ldrb	r3, [r3, #1]
 8010fd0:	f003 0310 	and.w	r3, r3, #16
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00d      	beq.n	8010ff4 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	7bbb      	ldrb	r3, [r7, #14]
 8010fdc:	1c59      	adds	r1, r3, #1
 8010fde:	73b9      	strb	r1, [r7, #14]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	7819      	ldrb	r1, [r3, #0]
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	3349      	adds	r3, #73	; 0x49
 8010fee:	7978      	ldrb	r0, [r7, #5]
 8010ff0:	f000 f9f6 	bl	80113e0 <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	785b      	ldrb	r3, [r3, #1]
 8010ff8:	f003 0320 	and.w	r3, r3, #32
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d018      	beq.n	8011032 <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	7bbb      	ldrb	r3, [r7, #14]
 8011004:	1c59      	adds	r1, r3, #1
 8011006:	73b9      	strb	r1, [r7, #14]
 8011008:	4413      	add	r3, r2
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	461a      	mov	r2, r3
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011016:	091b      	lsrs	r3, r3, #4
 8011018:	b2db      	uxtb	r3, r3
 801101a:	f003 030f 	and.w	r3, r3, #15
 801101e:	b2da      	uxtb	r2, r3
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	f003 020f 	and.w	r2, r3, #15
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	785b      	ldrb	r3, [r3, #1]
 8011036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801103a:	2b00      	cmp	r3, #0
 801103c:	d02d      	beq.n	801109a <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	7bbb      	ldrb	r3, [r7, #14]
 8011042:	4413      	add	r3, r2
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	091b      	lsrs	r3, r3, #4
 8011048:	f003 0301 	and.w	r3, r3, #1
 801104c:	2b00      	cmp	r3, #0
 801104e:	bf14      	ite	ne
 8011050:	2301      	movne	r3, #1
 8011052:	2300      	moveq	r3, #0
 8011054:	b2da      	uxtb	r2, r3
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	7bbb      	ldrb	r3, [r7, #14]
 8011060:	4413      	add	r3, r2
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	085b      	lsrs	r3, r3, #1
 8011066:	f003 0301 	and.w	r3, r3, #1
 801106a:	2b00      	cmp	r3, #0
 801106c:	bf14      	ite	ne
 801106e:	2301      	movne	r3, #1
 8011070:	2300      	moveq	r3, #0
 8011072:	b2da      	uxtb	r2, r3
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 801107a:	683a      	ldr	r2, [r7, #0]
 801107c:	7bbb      	ldrb	r3, [r7, #14]
 801107e:	1c59      	adds	r1, r3, #1
 8011080:	73b9      	strb	r1, [r7, #14]
 8011082:	4413      	add	r3, r2
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	f003 0301 	and.w	r3, r3, #1
 801108a:	2b00      	cmp	r3, #0
 801108c:	bf14      	ite	ne
 801108e:	2301      	movne	r3, #1
 8011090:	2300      	moveq	r3, #0
 8011092:	b2da      	uxtb	r2, r3
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fce1 	bl	8010a68 <rfalIsoDepFSxI2FSx>
 80110a6:	4603      	mov	r3, r0
 80110a8:	461a      	mov	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fa34 	bl	8011524 <rfalIsoDepSFGI2SFGT>
 80110bc:	4602      	mov	r2, r0
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7f3 fa79 	bl	80045c0 <timerCalculateTimer>
 80110ce:	4603      	mov	r3, r0
 80110d0:	4a35      	ldr	r2, [pc, #212]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80110d2:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff fca4 	bl	8010a28 <rfalIsoDepFWI2FWT>
 80110e0:	4602      	mov	r2, r0
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80110ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d001      	beq.n	80110fc <rfalIsoDepPollAHandleActivation+0x204>
 80110f8:	79ba      	ldrb	r2, [r7, #6]
 80110fa:	e000      	b.n	80110fe <rfalIsoDepPollAHandleActivation+0x206>
 80110fc:	2200      	movs	r2, #0
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	22ff      	movs	r2, #255	; 0xff
 8011108:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011112:	2b00      	cmp	r3, #0
 8011114:	d104      	bne.n	8011120 <rfalIsoDepPollAHandleActivation+0x228>
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801111c:	2b00      	cmp	r3, #0
 801111e:	d030      	beq.n	8011182 <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 8011120:	bf00      	nop
 8011122:	4b21      	ldr	r3, [pc, #132]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8011124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011126:	4618      	mov	r0, r3
 8011128:	f7f3 fa58 	bl	80045dc <timerIsExpired>
 801112c:	4603      	mov	r3, r0
 801112e:	f083 0301 	eor.w	r3, r3, #1
 8011132:	b2db      	uxtb	r3, r3
 8011134:	2b00      	cmp	r3, #0
 8011136:	d1f4      	bne.n	8011122 <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 801114a:	f107 0308 	add.w	r3, r7, #8
 801114e:	f7ff fdf7 	bl	8010d40 <rfalIsoDepPPS>
 8011152:	4603      	mov	r3, r0
 8011154:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 8011156:	89bb      	ldrh	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10a      	bne.n	8011172 <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f006 fd16 	bl	8017b9c <rfalSetBitRate>
 8011170:	e007      	b.n	8011182 <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2200      	movs	r2, #0
 8011176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	2200      	movs	r2, #0
 801117e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8011188:	4b07      	ldr	r3, [pc, #28]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 801118a:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff fc6a 	bl	8010a68 <rfalIsoDepFSxI2FSx>
 8011194:	4603      	mov	r3, r0
 8011196:	461a      	mov	r2, r3
 8011198:	4b03      	ldr	r3, [pc, #12]	; (80111a8 <rfalIsoDepPollAHandleActivation+0x2b0>)
 801119a:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	2000328c 	.word	0x2000328c

080111ac <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 80111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ae:	b08d      	sub	sp, #52	; 0x34
 80111b0:	af08      	add	r7, sp, #32
 80111b2:	4604      	mov	r4, r0
 80111b4:	4608      	mov	r0, r1
 80111b6:	4611      	mov	r1, r2
 80111b8:	461a      	mov	r2, r3
 80111ba:	4623      	mov	r3, r4
 80111bc:	71fb      	strb	r3, [r7, #7]
 80111be:	4603      	mov	r3, r0
 80111c0:	71bb      	strb	r3, [r7, #6]
 80111c2:	460b      	mov	r3, r1
 80111c4:	717b      	strb	r3, [r7, #5]
 80111c6:	4613      	mov	r3, r2
 80111c8:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80111ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111cc:	7b1b      	ldrb	r3, [r3, #12]
 80111ce:	091b      	lsrs	r3, r3, #4
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 80111d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111de:	4618      	mov	r0, r3
 80111e0:	f7ff fc22 	bl	8010a28 <rfalIsoDepFWI2FWT>
 80111e4:	4602      	mov	r2, r0
 80111e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e8:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 80111ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80111f0:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80111f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f4:	7b5b      	ldrb	r3, [r3, #13]
 80111f6:	091b      	lsrs	r3, r3, #4
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	f003 020f 	and.w	r2, r3, #15
 80111fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011200:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 8011202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011206:	b2db      	uxtb	r3, r3
 8011208:	4618      	mov	r0, r3
 801120a:	f000 f98b 	bl	8011524 <rfalIsoDepSFGI2SFGT>
 801120e:	4602      	mov	r2, r0
 8011210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011212:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8011214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011216:	7adb      	ldrb	r3, [r3, #11]
 8011218:	091b      	lsrs	r3, r3, #4
 801121a:	b2da      	uxtb	r2, r3
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 8011222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff fc1d 	bl	8010a68 <rfalIsoDepFSxI2FSx>
 801122e:	4603      	mov	r3, r0
 8011230:	461a      	mov	r2, r3
 8011232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011234:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 8011238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123a:	79ba      	ldrb	r2, [r7, #6]
 801123c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8011240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011242:	7b1b      	ldrb	r3, [r3, #12]
 8011244:	f003 0301 	and.w	r3, r3, #1
 8011248:	2b00      	cmp	r3, #0
 801124a:	bf14      	ite	ne
 801124c:	2301      	movne	r3, #1
 801124e:	2300      	moveq	r3, #0
 8011250:	b2da      	uxtb	r2, r3
 8011252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8011258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125a:	7b1b      	ldrb	r3, [r3, #12]
 801125c:	085b      	lsrs	r3, r3, #1
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	2b00      	cmp	r3, #0
 8011264:	bf14      	ite	ne
 8011266:	2301      	movne	r3, #1
 8011268:	2300      	moveq	r3, #0
 801126a:	b2da      	uxtb	r2, r3
 801126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801126e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 8011272:	79bb      	ldrb	r3, [r7, #6]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d009      	beq.n	801128c <rfalIsoDepPollBHandleActivation+0xe0>
 8011278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801127a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801127e:	f083 0301 	eor.w	r3, r3, #1
 8011282:	b2db      	uxtb	r3, r3
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 8011288:	2307      	movs	r3, #7
 801128a:	e0a3      	b.n	80113d4 <rfalIsoDepPollBHandleActivation+0x228>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 801128c:	2002      	movs	r0, #2
 801128e:	f006 ff0f 	bl	80180b0 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 8011292:	4b52      	ldr	r3, [pc, #328]	; (80113dc <rfalIsoDepPollBHandleActivation+0x230>)
 8011294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011298:	2b01      	cmp	r3, #1
 801129a:	d104      	bne.n	80112a6 <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 801129c:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80112a0:	f006 ff16 	bl	80180d0 <rfalSetFDTPoll>
 80112a4:	e00d      	b.n	80112c2 <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 80112a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a8:	7adb      	ldrb	r3, [r3, #11]
 80112aa:	085b      	lsrs	r3, r3, #1
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 0303 	and.w	r3, r3, #3
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	4618      	mov	r0, r3
 80112b6:	f005 f903 	bl	80164c0 <rfalNfcbTR2ToFDT>
 80112ba:	4603      	mov	r3, r0
 80112bc:	4618      	mov	r0, r3
 80112be:	f006 ff07 	bl	80180d0 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 80112c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c4:	7a99      	ldrb	r1, [r3, #10]
 80112c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80112cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ce:	3349      	adds	r3, #73	; 0x49
 80112d0:	7978      	ldrb	r0, [r7, #5]
 80112d2:	f000 f885 	bl	80113e0 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	7b1b      	ldrb	r3, [r3, #12]
 80112de:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <rfalIsoDepPollBHandleActivation+0x13e>
 80112e6:	7939      	ldrb	r1, [r7, #4]
 80112e8:	e000      	b.n	80112ec <rfalIsoDepPollBHandleActivation+0x140>
 80112ea:	2100      	movs	r1, #0
 80112ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ee:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 80112f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f4:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 80112f8:	4b38      	ldr	r3, [pc, #224]	; (80113dc <rfalIsoDepPollBHandleActivation+0x230>)
 80112fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d005      	beq.n	801130e <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8011306:	f003 0307 	and.w	r3, r3, #7
 801130a:	b2db      	uxtb	r3, r3
 801130c:	e000      	b.n	8011310 <rfalIsoDepPollBHandleActivation+0x164>
 801130e:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 8011310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011312:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8011314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011316:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8011318:	4402      	add	r2, r0
 801131a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801131c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 801131e:	3421      	adds	r4, #33	; 0x21
 8011320:	9407      	str	r4, [sp, #28]
 8011322:	9006      	str	r0, [sp, #24]
 8011324:	9205      	str	r2, [sp, #20]
 8011326:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801132a:	9204      	str	r2, [sp, #16]
 801132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801132e:	9203      	str	r2, [sp, #12]
 8011330:	79ba      	ldrb	r2, [r7, #6]
 8011332:	9202      	str	r2, [sp, #8]
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	79fb      	ldrb	r3, [r7, #7]
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	4663      	mov	r3, ip
 801133c:	4632      	mov	r2, r6
 801133e:	4628      	mov	r0, r5
 8011340:	f7ff fd50 	bl	8010de4 <rfalIsoDepATTRIB>
 8011344:	4603      	mov	r3, r0
 8011346:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 8011348:	89fb      	ldrh	r3, [r7, #14]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d12c      	bne.n	80113a8 <rfalIsoDepPollBHandleActivation+0x1fc>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 801134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	f003 020f 	and.w	r2, r3, #15
 8011356:	79bb      	ldrb	r3, [r7, #6]
 8011358:	429a      	cmp	r2, r3
 801135a:	d001      	beq.n	8011360 <rfalIsoDepPollBHandleActivation+0x1b4>
        {
            return ERR_PROTO;
 801135c:	230b      	movs	r3, #11
 801135e:	e039      	b.n	80113d4 <rfalIsoDepPollBHandleActivation+0x228>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 8011360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	091b      	lsrs	r3, r3, #4
 8011366:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 8011368:	7b7b      	ldrb	r3, [r7, #13]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d008      	beq.n	8011380 <rfalIsoDepPollBHandleActivation+0x1d4>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 801136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011370:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8011374:	461a      	mov	r2, r3
 8011376:	7b7b      	ldrb	r3, [r7, #13]
 8011378:	3b01      	subs	r3, #1
 801137a:	409a      	lsls	r2, r3
 801137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8011380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011382:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011388:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801138c:	4619      	mov	r1, r3
 801138e:	4610      	mov	r0, r2
 8011390:	f006 fc04 	bl	8017b9c <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011398:	b29b      	uxth	r3, r3
 801139a:	4618      	mov	r0, r3
 801139c:	f7f3 f910 	bl	80045c0 <timerCalculateTimer>
 80113a0:	4603      	mov	r3, r0
 80113a2:	4a0e      	ldr	r2, [pc, #56]	; (80113dc <rfalIsoDepPollBHandleActivation+0x230>)
 80113a4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80113a6:	e007      	b.n	80113b8 <rfalIsoDepPollBHandleActivation+0x20c>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 80113a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113aa:	2200      	movs	r2, #0
 80113ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 80113b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80113b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ba:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80113be:	4b07      	ldr	r3, [pc, #28]	; (80113dc <rfalIsoDepPollBHandleActivation+0x230>)
 80113c0:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80113c2:	79fb      	ldrb	r3, [r7, #7]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff fb4f 	bl	8010a68 <rfalIsoDepFSxI2FSx>
 80113ca:	4603      	mov	r3, r0
 80113cc:	461a      	mov	r2, r3
 80113ce:	4b03      	ldr	r3, [pc, #12]	; (80113dc <rfalIsoDepPollBHandleActivation+0x230>)
 80113d0:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 80113d2:	89fb      	ldrh	r3, [r7, #14]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3714      	adds	r7, #20
 80113d8:	46bd      	mov	sp, r7
 80113da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113dc:	2000328c 	.word	0x2000328c

080113e0 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 80113e0:	b480      	push	{r7}
 80113e2:	b087      	sub	sp, #28
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60ba      	str	r2, [r7, #8]
 80113e8:	607b      	str	r3, [r7, #4]
 80113ea:	4603      	mov	r3, r0
 80113ec:	73fb      	strb	r3, [r7, #15]
 80113ee:	460b      	mov	r3, r1
 80113f0:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 80113f2:	7bfb      	ldrb	r3, [r7, #15]
 80113f4:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 80113f6:	2301      	movs	r3, #1
 80113f8:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2200      	movs	r2, #0
 80113fe:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8011406:	7bbb      	ldrb	r3, [r7, #14]
 8011408:	f003 0308 	and.w	r3, r3, #8
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	f040 8083 	bne.w	801151a <rfalIsoDepCalcBitRate+0x13a>
 8011414:	7d7b      	ldrb	r3, [r7, #21]
 8011416:	2b03      	cmp	r3, #3
 8011418:	d87f      	bhi.n	801151a <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 801141a:	7bbb      	ldrb	r3, [r7, #14]
 801141c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011420:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8011422:	2302      	movs	r3, #2
 8011424:	75fb      	strb	r3, [r7, #23]
 8011426:	e019      	b.n	801145c <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8011428:	7d3a      	ldrb	r2, [r7, #20]
 801142a:	7dfb      	ldrb	r3, [r7, #23]
 801142c:	4619      	mov	r1, r3
 801142e:	2310      	movs	r3, #16
 8011430:	408b      	lsls	r3, r1
 8011432:	4013      	ands	r3, r2
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00b      	beq.n	8011450 <rfalIsoDepCalcBitRate+0x70>
 8011438:	7dfb      	ldrb	r3, [r7, #23]
 801143a:	1c5a      	adds	r2, r3, #1
 801143c:	7d7b      	ldrb	r3, [r7, #21]
 801143e:	429a      	cmp	r2, r3
 8011440:	d806      	bhi.n	8011450 <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 8011442:	7dfb      	ldrb	r3, [r7, #23]
 8011444:	3301      	adds	r3, #1
 8011446:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	7cfa      	ldrb	r2, [r7, #19]
 801144c:	701a      	strb	r2, [r3, #0]
                break;
 801144e:	e009      	b.n	8011464 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8011450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011454:	b2db      	uxtb	r3, r3
 8011456:	3b01      	subs	r3, #1
 8011458:	b2db      	uxtb	r3, r3
 801145a:	75fb      	strb	r3, [r7, #23]
 801145c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011460:	2b00      	cmp	r3, #0
 8011462:	dae1      	bge.n	8011428 <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	f003 0307 	and.w	r3, r3, #7
 801146a:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 801146c:	2302      	movs	r3, #2
 801146e:	75fb      	strb	r3, [r7, #23]
 8011470:	e018      	b.n	80114a4 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8011472:	7cbb      	ldrb	r3, [r7, #18]
 8011474:	7dfa      	ldrb	r2, [r7, #23]
 8011476:	40d3      	lsrs	r3, r2
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00b      	beq.n	8011498 <rfalIsoDepCalcBitRate+0xb8>
 8011480:	7dfb      	ldrb	r3, [r7, #23]
 8011482:	1c5a      	adds	r2, r3, #1
 8011484:	7d7b      	ldrb	r3, [r7, #21]
 8011486:	429a      	cmp	r2, r3
 8011488:	d806      	bhi.n	8011498 <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 801148a:	7dfb      	ldrb	r3, [r7, #23]
 801148c:	3301      	adds	r3, #1
 801148e:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7c7a      	ldrb	r2, [r7, #17]
 8011494:	701a      	strb	r2, [r3, #0]
                break;
 8011496:	e009      	b.n	80114ac <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8011498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	3b01      	subs	r3, #1
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	75fb      	strb	r3, [r7, #23]
 80114a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	dae2      	bge.n	8011472 <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 80114ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	da2a      	bge.n	801150a <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	781a      	ldrb	r2, [r3, #0]
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	4293      	cmp	r3, r2
 80114be:	bf28      	it	cs
 80114c0:	4613      	movcs	r3, r2
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	781a      	ldrb	r2, [r3, #0]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d018      	beq.n	801150a <rfalIsoDepCalcBitRate+0x12a>
 80114d8:	7d3a      	ldrb	r2, [r7, #20]
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	3b01      	subs	r3, #1
 80114e0:	2110      	movs	r1, #16
 80114e2:	fa01 f303 	lsl.w	r3, r1, r3
 80114e6:	4013      	ands	r3, r2
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d009      	beq.n	8011500 <rfalIsoDepCalcBitRate+0x120>
 80114ec:	7cba      	ldrb	r2, [r7, #18]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	3b01      	subs	r3, #1
 80114f4:	fa22 f303 	lsr.w	r3, r2, r3
 80114f8:	f003 0301 	and.w	r3, r3, #1
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d104      	bne.n	801150a <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 8011500:	2300      	movs	r3, #0
 8011502:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 801150a:	7dbb      	ldrb	r3, [r7, #22]
 801150c:	f083 0301 	eor.w	r3, r3, #1
 8011510:	b2db      	uxtb	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	f47f af6f 	bne.w	80113f6 <rfalIsoDepCalcBitRate+0x16>
 8011518:	e000      	b.n	801151c <rfalIsoDepCalcBitRate+0x13c>
            return;
 801151a:	bf00      	nop
    
}
 801151c:	371c      	adds	r7, #28
 801151e:	46bd      	mov	sp, r7
 8011520:	bc80      	pop	{r7}
 8011522:	4770      	bx	lr

08011524 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 8011524:	b480      	push	{r7}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 8011532:	7afb      	ldrb	r3, [r7, #11]
 8011534:	2b0e      	cmp	r3, #14
 8011536:	d901      	bls.n	801153c <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 8011538:	2300      	movs	r3, #0
 801153a:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 801153c:	7afb      	ldrb	r3, [r7, #11]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00b      	beq.n	801155a <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 8011542:	79fb      	ldrb	r3, [r7, #7]
 8011544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011548:	409a      	lsls	r2, r3
 801154a:	79fb      	ldrb	r3, [r7, #7]
 801154c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011550:	fa01 f303 	lsl.w	r3, r1, r3
 8011554:	4413      	add	r3, r2
 8011556:	60fb      	str	r3, [r7, #12]
 8011558:	e002      	b.n	8011560 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 801155a:	f641 237c 	movw	r3, #6780	; 0x1a7c
 801155e:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4a05      	ldr	r2, [pc, #20]	; (8011578 <rfalIsoDepSFGI2SFGT+0x54>)
 8011564:	fba2 2303 	umull	r2, r3, r2, r3
 8011568:	0b1b      	lsrs	r3, r3, #12
 801156a:	3301      	adds	r3, #1
}
 801156c:	4618      	mov	r0, r3
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	bc80      	pop	{r7}
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	4d542005 	.word	0x4d542005

0801157c <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 801157c:	b084      	sub	sp, #16
 801157e:	b598      	push	{r3, r4, r7, lr}
 8011580:	af00      	add	r7, sp, #0
 8011582:	f107 0410 	add.w	r4, r7, #16
 8011586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 801158a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011590:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 8011594:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8011596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011598:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 801159a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801159e:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 80115a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a4:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 80115a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115aa:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 80115ac:	8abb      	ldrh	r3, [r7, #20]
 80115ae:	461a      	mov	r2, r3
 80115b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80115b2:	1ad4      	subs	r4, r2, r3
 80115b4:	f7ff fac6 	bl	8010b44 <rfalIsoDepGetMaxInfLen>
 80115b8:	4603      	mov	r3, r0
 80115ba:	429c      	cmp	r4, r3
 80115bc:	dd09      	ble.n	80115d2 <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 80115be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c0:	2201      	movs	r2, #1
 80115c2:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 80115c4:	f7ff fabe 	bl	8010b44 <rfalIsoDepGetMaxInfLen>
 80115c8:	4603      	mov	r3, r0
 80115ca:	461a      	mov	r2, r3
 80115cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ce:	809a      	strh	r2, [r3, #4]
 80115d0:	e008      	b.n	80115e4 <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 80115d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d4:	2200      	movs	r2, #0
 80115d6:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 80115d8:	8aba      	ldrh	r2, [r7, #20]
 80115da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	b29a      	uxth	r2, r3
 80115e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e2:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 80115e4:	693a      	ldr	r2, [r7, #16]
 80115e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e8:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 80115ea:	6a3a      	ldr	r2, [r7, #32]
 80115ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ee:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 80115f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f2:	4a05      	ldr	r2, [pc, #20]	; (8011608 <rfalIsoDepApdu2IBLockParam+0x8c>)
 80115f4:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 80115f6:	69fa      	ldr	r2, [r7, #28]
 80115f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fa:	60da      	str	r2, [r3, #12]
}
 80115fc:	bf00      	nop
 80115fe:	46bd      	mov	sp, r7
 8011600:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8011604:	b004      	add	sp, #16
 8011606:	4770      	bx	lr
 8011608:	20003310 	.word	0x20003310

0801160c <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 801160c:	b084      	sub	sp, #16
 801160e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011610:	b093      	sub	sp, #76	; 0x4c
 8011612:	af08      	add	r7, sp, #32
 8011614:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8011618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 801161c:	4b22      	ldr	r3, [pc, #136]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 801161e:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8011622:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8011626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801162e:	682b      	ldr	r3, [r5, #0]
 8011630:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 8011632:	4b1d      	ldr	r3, [pc, #116]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 8011634:	2200      	movs	r2, #0
 8011636:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    gIsoDep.APDURxPos = 0;
 801163a:	4b1b      	ldr	r3, [pc, #108]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 801163c:	2200      	movs	r2, #0
 801163e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    
    /* Assign current FSx to calculate INF length */
    gIsoDep.ourFsx = param.ourFSx;
 8011642:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8011646:	4b18      	ldr	r3, [pc, #96]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 8011648:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.fsx    = param.FSx;
 801164a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801164e:	4b16      	ldr	r3, [pc, #88]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 8011650:	821a      	strh	r2, [r3, #16]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 8011652:	4b15      	ldr	r3, [pc, #84]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 8011654:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8011658:	4a13      	ldr	r2, [pc, #76]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 801165a:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801165e:	4e12      	ldr	r6, [pc, #72]	; (80116a8 <rfalIsoDepStartApduTransceive+0x9c>)
 8011660:	9207      	str	r2, [sp, #28]
 8011662:	9306      	str	r3, [sp, #24]
 8011664:	1d3b      	adds	r3, r7, #4
 8011666:	9305      	str	r3, [sp, #20]
 8011668:	466d      	mov	r5, sp
 801166a:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 801166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	602b      	str	r3, [r5, #0]
 8011676:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 801167a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801167c:	f7ff ff7e 	bl	801157c <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 8011680:	466d      	mov	r5, sp
 8011682:	f107 0414 	add.w	r4, r7, #20
 8011686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801168a:	6823      	ldr	r3, [r4, #0]
 801168c:	602b      	str	r3, [r5, #0]
 801168e:	1d3b      	adds	r3, r7, #4
 8011690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011692:	f7ff fa7f 	bl	8010b94 <rfalIsoDepStartTransceive>
 8011696:	4603      	mov	r3, r0
}
 8011698:	4618      	mov	r0, r3
 801169a:	372c      	adds	r7, #44	; 0x2c
 801169c:	46bd      	mov	sp, r7
 801169e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80116a2:	b004      	add	sp, #16
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	2000328c 	.word	0x2000328c

080116ac <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 80116ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ae:	b093      	sub	sp, #76	; 0x4c
 80116b0:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 80116b2:	f7ff fadb 	bl	8010c6c <rfalIsoDepGetTransceiveStatus>
 80116b6:	4603      	mov	r3, r0
 80116b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 80116ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <rfalIsoDepGetApduTransceiveStatus+0x1a>
 80116c0:	2b0d      	cmp	r3, #13
 80116c2:	d064      	beq.n	801178e <rfalIsoDepGetApduTransceiveStatus+0xe2>
 80116c4:	e085      	b.n	80117d2 <rfalIsoDepGetApduTransceiveStatus+0x126>
    {
        /*******************************************************************************/
        case ERR_NONE:
         
            /* Check if we are still doing chaining on Tx */
            if( gIsoDep.isTxChaining )
 80116c6:	4b4a      	ldr	r3, [pc, #296]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116c8:	7c9b      	ldrb	r3, [r3, #18]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d03e      	beq.n	801174c <rfalIsoDepGetApduTransceiveStatus+0xa0>
            {
                /* Add already Tx bytes */
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 80116ce:	4b48      	ldr	r3, [pc, #288]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116d0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80116d4:	4b46      	ldr	r3, [pc, #280]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116d6:	8b9b      	ldrh	r3, [r3, #28]
 80116d8:	4413      	add	r3, r2
 80116da:	b29a      	uxth	r2, r3
 80116dc:	4b44      	ldr	r3, [pc, #272]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116de:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                
                /* Convert APDU TxRxParams to I-Block TxRxParams */
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 80116e2:	4b43      	ldr	r3, [pc, #268]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116e4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80116e8:	4a41      	ldr	r2, [pc, #260]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116ea:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80116ee:	4e40      	ldr	r6, [pc, #256]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80116f0:	9207      	str	r2, [sp, #28]
 80116f2:	9306      	str	r3, [sp, #24]
 80116f4:	463b      	mov	r3, r7
 80116f6:	9305      	str	r3, [sp, #20]
 80116f8:	466d      	mov	r5, sp
 80116fa:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 80116fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	602b      	str	r3, [r5, #0]
 8011706:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 801170a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801170c:	f7ff ff36 	bl	801157c <rfalIsoDepApdu2IBLockParam>
                
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 8011710:	88bb      	ldrh	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00d      	beq.n	8011732 <rfalIsoDepGetApduTransceiveStatus+0x86>
                {
                    /* Move next I-Block to beginning of APDU Tx buffer */
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 8011716:	4b36      	ldr	r3, [pc, #216]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801171a:	1cd8      	adds	r0, r3, #3
 801171c:	4b34      	ldr	r3, [pc, #208]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011720:	4a33      	ldr	r2, [pc, #204]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011722:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8011726:	4413      	add	r3, r2
 8011728:	3303      	adds	r3, #3
 801172a:	88ba      	ldrh	r2, [r7, #4]
 801172c:	4619      	mov	r1, r3
 801172e:	f009 fe5d 	bl	801b3ec <memcpy>
                }
                
                rfalIsoDepStartTransceive( txRxParam );
 8011732:	466d      	mov	r5, sp
 8011734:	f107 0410 	add.w	r4, r7, #16
 8011738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	602b      	str	r3, [r5, #0]
 8011740:	463b      	mov	r3, r7
 8011742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011744:	f7ff fa26 	bl	8010b94 <rfalIsoDepStartTransceive>
                return ERR_BUSY;
 8011748:	2302      	movs	r3, #2
 801174a:	e04c      	b.n	80117e6 <rfalIsoDepGetApduTransceiveStatus+0x13a>
            }
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 801174c:	4b28      	ldr	r3, [pc, #160]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801174e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d03f      	beq.n	80117d6 <rfalIsoDepGetApduTransceiveStatus+0x12a>
            {
                /* Copy packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8011756:	4b26      	ldr	r3, [pc, #152]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801175a:	4a25      	ldr	r2, [pc, #148]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801175c:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8011760:	4413      	add	r3, r2
 8011762:	1cd8      	adds	r0, r3, #3
 8011764:	4b22      	ldr	r3, [pc, #136]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011768:	1cd9      	adds	r1, r3, #3
 801176a:	4b21      	ldr	r3, [pc, #132]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801176c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	461a      	mov	r2, r3
 8011772:	f009 fe3b 	bl	801b3ec <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 8011776:	4b1e      	ldr	r3, [pc, #120]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011778:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 801177c:	4b1c      	ldr	r3, [pc, #112]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801177e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	4413      	add	r3, r2
 8011784:	b29a      	uxth	r2, r3
 8011786:	4b1a      	ldr	r3, [pc, #104]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011788:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
             
            /* APDU TxRx is done */
            break;
 801178c:	e023      	b.n	80117d6 <rfalIsoDepGetApduTransceiveStatus+0x12a>
         
        /*******************************************************************************/
        case ERR_AGAIN:
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 801178e:	4b18      	ldr	r3, [pc, #96]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8011790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d01a      	beq.n	80117ce <rfalIsoDepGetApduTransceiveStatus+0x122>
            {
                /* Copy chained packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8011798:	4b15      	ldr	r3, [pc, #84]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801179a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801179c:	4a14      	ldr	r2, [pc, #80]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801179e:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80117a2:	4413      	add	r3, r2
 80117a4:	1cd8      	adds	r0, r3, #3
 80117a6:	4b12      	ldr	r3, [pc, #72]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117aa:	1cd9      	adds	r1, r3, #3
 80117ac:	4b10      	ldr	r3, [pc, #64]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	f009 fe1a 	bl	801b3ec <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 80117b8:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117ba:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80117be:	4b0c      	ldr	r3, [pc, #48]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117c2:	881b      	ldrh	r3, [r3, #0]
 80117c4:	4413      	add	r3, r2
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	4b09      	ldr	r3, [pc, #36]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117ca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
            
            /* Wait for next I-Block */
            return ERR_BUSY;
 80117ce:	2302      	movs	r3, #2
 80117d0:	e009      	b.n	80117e6 <rfalIsoDepGetApduTransceiveStatus+0x13a>
        
        /*******************************************************************************/
        default:
            return ret;
 80117d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117d4:	e007      	b.n	80117e6 <rfalIsoDepGetApduTransceiveStatus+0x13a>
            break;
 80117d6:	bf00      	nop
    }
    
    *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 80117d8:	4b05      	ldr	r3, [pc, #20]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117dc:	4a04      	ldr	r2, [pc, #16]	; (80117f0 <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80117de:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80117e2:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 80117e4:	2300      	movs	r3, #0
 }
 80117e6:	4618      	mov	r0, r3
 80117e8:	372c      	adds	r7, #44	; 0x2c
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ee:	bf00      	nop
 80117f0:	2000328c 	.word	0x2000328c

080117f4 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 80117fa:	4b0b      	ldr	r3, [pc, #44]	; (8011828 <rfalNfcInitialize+0x34>)
 80117fc:	2200      	movs	r2, #0
 80117fe:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 8011800:	f7fd ff98 	bl	800f734 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 8011804:	f006 f814 	bl	8017830 <rfalInitialize>
 8011808:	4603      	mov	r3, r0
 801180a:	80fb      	strh	r3, [r7, #6]
 801180c:	88fb      	ldrh	r3, [r7, #6]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <rfalNfcInitialize+0x22>
 8011812:	88fb      	ldrh	r3, [r7, #6]
 8011814:	e003      	b.n	801181e <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 8011816:	4b04      	ldr	r3, [pc, #16]	; (8011828 <rfalNfcInitialize+0x34>)
 8011818:	2201      	movs	r2, #1
 801181a:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	20003314 	.word	0x20003314

0801182c <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8011834:	4b42      	ldr	r3, [pc, #264]	; (8011940 <rfalNfcDiscover+0x114>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d001      	beq.n	8011840 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 801183c:	2321      	movs	r3, #33	; 0x21
 801183e:	e07a      	b.n	8011936 <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d025      	beq.n	8011892 <rfalNfcDiscover+0x66>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	799b      	ldrb	r3, [r3, #6]
 801184a:	2b05      	cmp	r3, #5
 801184c:	d821      	bhi.n	8011892 <rfalNfcDiscover+0x66>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	799b      	ldrb	r3, [r3, #6]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d01d      	beq.n	8011892 <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	885b      	ldrh	r3, [r3, #2]
 801185a:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 801185e:	2b00      	cmp	r3, #0
 8011860:	d007      	beq.n	8011872 <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	79db      	ldrb	r3, [r3, #7]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d003      	beq.n	8011872 <rfalNfcDiscover+0x46>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	79db      	ldrb	r3, [r3, #7]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d10f      	bne.n	8011892 <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	885b      	ldrh	r3, [r3, #2]
 8011876:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 801187a:	2b00      	cmp	r3, #0
 801187c:	d004      	beq.n	8011888 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011884:	2b02      	cmp	r3, #2
 8011886:	d804      	bhi.n	8011892 <rfalNfcDiscover+0x66>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801188e:	2b30      	cmp	r3, #48	; 0x30
 8011890:	d901      	bls.n	8011896 <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 8011892:	2307      	movs	r3, #7
 8011894:	e04f      	b.n	8011936 <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 8011896:	4b2a      	ldr	r3, [pc, #168]	; (8011940 <rfalNfcDiscover+0x114>)
 8011898:	2200      	movs	r2, #0
 801189a:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 801189c:	4b28      	ldr	r3, [pc, #160]	; (8011940 <rfalNfcDiscover+0x114>)
 801189e:	2200      	movs	r2, #0
 80118a0:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 80118a2:	4b27      	ldr	r3, [pc, #156]	; (8011940 <rfalNfcDiscover+0x114>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 80118aa:	4b25      	ldr	r3, [pc, #148]	; (8011940 <rfalNfcDiscover+0x114>)
 80118ac:	2201      	movs	r2, #1
 80118ae:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 80118b2:	4b23      	ldr	r3, [pc, #140]	; (8011940 <rfalNfcDiscover+0x114>)
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	330c      	adds	r3, #12
 80118b8:	4611      	mov	r1, r2
 80118ba:	2284      	movs	r2, #132	; 0x84
 80118bc:	4618      	mov	r0, r3
 80118be:	f009 fd95 	bl	801b3ec <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 80118c2:	4b1f      	ldr	r3, [pc, #124]	; (8011940 <rfalNfcDiscover+0x114>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 80118ca:	4b1d      	ldr	r3, [pc, #116]	; (8011940 <rfalNfcDiscover+0x114>)
 80118cc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80118d0:	4b1b      	ldr	r3, [pc, #108]	; (8011940 <rfalNfcDiscover+0x114>)
 80118d2:	89db      	ldrh	r3, [r3, #14]
 80118d4:	089b      	lsrs	r3, r3, #2
 80118d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118da:	4313      	orrs	r3, r2
 80118dc:	4a18      	ldr	r2, [pc, #96]	; (8011940 <rfalNfcDiscover+0x114>)
 80118de:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 80118e2:	4b17      	ldr	r3, [pc, #92]	; (8011940 <rfalNfcDiscover+0x114>)
 80118e4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80118e8:	4b15      	ldr	r3, [pc, #84]	; (8011940 <rfalNfcDiscover+0x114>)
 80118ea:	89db      	ldrh	r3, [r3, #14]
 80118ec:	089b      	lsrs	r3, r3, #2
 80118ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118f2:	4313      	orrs	r3, r2
 80118f4:	4a12      	ldr	r2, [pc, #72]	; (8011940 <rfalNfcDiscover+0x114>)
 80118f6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 80118fa:	4b11      	ldr	r3, [pc, #68]	; (8011940 <rfalNfcDiscover+0x114>)
 80118fc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8011900:	4b0f      	ldr	r3, [pc, #60]	; (8011940 <rfalNfcDiscover+0x114>)
 8011902:	89db      	ldrh	r3, [r3, #14]
 8011904:	089b      	lsrs	r3, r3, #2
 8011906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801190a:	4313      	orrs	r3, r2
 801190c:	4a0c      	ldr	r2, [pc, #48]	; (8011940 <rfalNfcDiscover+0x114>)
 801190e:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8011912:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <rfalNfcDiscover+0x114>)
 8011914:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8011918:	4b09      	ldr	r3, [pc, #36]	; (8011940 <rfalNfcDiscover+0x114>)
 801191a:	89db      	ldrh	r3, [r3, #14]
 801191c:	b21b      	sxth	r3, r3
 801191e:	109b      	asrs	r3, r3, #2
 8011920:	b21b      	sxth	r3, r3
 8011922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011926:	4313      	orrs	r3, r2
 8011928:	4a05      	ldr	r2, [pc, #20]	; (8011940 <rfalNfcDiscover+0x114>)
 801192a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 801192e:	4b04      	ldr	r3, [pc, #16]	; (8011940 <rfalNfcDiscover+0x114>)
 8011930:	2202      	movs	r2, #2
 8011932:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	20003314 	.word	0x20003314

08011944 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	4603      	mov	r3, r0
 801194c:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 801194e:	4b0d      	ldr	r3, [pc, #52]	; (8011984 <rfalNfcDeactivate+0x40>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d801      	bhi.n	801195a <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8011956:	2321      	movs	r3, #33	; 0x21
 8011958:	e010      	b.n	801197c <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d007      	beq.n	8011970 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8011960:	4a08      	ldr	r2, [pc, #32]	; (8011984 <rfalNfcDeactivate+0x40>)
 8011962:	79fb      	ldrb	r3, [r7, #7]
 8011964:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8011968:	4b06      	ldr	r3, [pc, #24]	; (8011984 <rfalNfcDeactivate+0x40>)
 801196a:	2222      	movs	r2, #34	; 0x22
 801196c:	701a      	strb	r2, [r3, #0]
 801196e:	e004      	b.n	801197a <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8011970:	f001 fcc2 	bl	80132f8 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8011974:	4b03      	ldr	r3, [pc, #12]	; (8011984 <rfalNfcDeactivate+0x40>)
 8011976:	2201      	movs	r2, #1
 8011978:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 801197a:	2300      	movs	r3, #0
}
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}
 8011984:	20003314 	.word	0x20003314

08011988 <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 8011988:	b480      	push	{r7}
 801198a:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 801198c:	4b02      	ldr	r3, [pc, #8]	; (8011998 <rfalNfcGetState+0x10>)
 801198e:	781b      	ldrb	r3, [r3, #0]
}
 8011990:	4618      	mov	r0, r3
 8011992:	46bd      	mov	sp, r7
 8011994:	bc80      	pop	{r7}
 8011996:	4770      	bx	lr
 8011998:	20003314 	.word	0x20003314

0801199c <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 80119a4:	4b0f      	ldr	r3, [pc, #60]	; (80119e4 <rfalNfcGetActiveDevice+0x48>)
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	2b1d      	cmp	r3, #29
 80119aa:	d801      	bhi.n	80119b0 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 80119ac:	2321      	movs	r3, #33	; 0x21
 80119ae:	e014      	b.n	80119da <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d101      	bne.n	80119ba <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 80119b6:	2307      	movs	r3, #7
 80119b8:	e00f      	b.n	80119da <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 80119ba:	4b0a      	ldr	r3, [pc, #40]	; (80119e4 <rfalNfcGetActiveDevice+0x48>)
 80119bc:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d003      	beq.n	80119cc <rfalNfcGetActiveDevice+0x30>
 80119c4:	4b07      	ldr	r3, [pc, #28]	; (80119e4 <rfalNfcGetActiveDevice+0x48>)
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d101      	bne.n	80119d0 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 80119cc:	2305      	movs	r3, #5
 80119ce:	e004      	b.n	80119da <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 80119d0:	4b04      	ldr	r3, [pc, #16]	; (80119e4 <rfalNfcGetActiveDevice+0x48>)
 80119d2:	689a      	ldr	r2, [r3, #8]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 80119d8:	2300      	movs	r3, #0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	370c      	adds	r7, #12
 80119de:	46bd      	mov	sp, r7
 80119e0:	bc80      	pop	{r7}
 80119e2:	4770      	bx	lr
 80119e4:	20003314 	.word	0x20003314

080119e8 <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 80119ee:	f006 fe57 	bl	80186a0 <rfalWorker>
    
    switch( gNfcDev.state )
 80119f2:	4bae      	ldr	r3, [pc, #696]	; (8011cac <rfalNfcWorker+0x2c4>)
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	2b22      	cmp	r3, #34	; 0x22
 80119f8:	f200 81b6 	bhi.w	8011d68 <rfalNfcWorker+0x380>
 80119fc:	a201      	add	r2, pc, #4	; (adr r2, 8011a04 <rfalNfcWorker+0x1c>)
 80119fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a02:	bf00      	nop
 8011a04:	08011d69 	.word	0x08011d69
 8011a08:	08011d69 	.word	0x08011d69
 8011a0c:	08011a91 	.word	0x08011a91
 8011a10:	08011aff 	.word	0x08011aff
 8011a14:	08011d69 	.word	0x08011d69
 8011a18:	08011d69 	.word	0x08011d69
 8011a1c:	08011d69 	.word	0x08011d69
 8011a20:	08011d69 	.word	0x08011d69
 8011a24:	08011d69 	.word	0x08011d69
 8011a28:	08011d69 	.word	0x08011d69
 8011a2c:	08011b2d 	.word	0x08011b2d
 8011a30:	08011b79 	.word	0x08011b79
 8011a34:	08011d69 	.word	0x08011d69
 8011a38:	08011bd5 	.word	0x08011bd5
 8011a3c:	08011d69 	.word	0x08011d69
 8011a40:	08011d69 	.word	0x08011d69
 8011a44:	08011d69 	.word	0x08011d69
 8011a48:	08011d69 	.word	0x08011d69
 8011a4c:	08011d69 	.word	0x08011d69
 8011a50:	08011d69 	.word	0x08011d69
 8011a54:	08011c8d 	.word	0x08011c8d
 8011a58:	08011ce3 	.word	0x08011ce3
 8011a5c:	08011d17 	.word	0x08011d17
 8011a60:	08011d17 	.word	0x08011d17
 8011a64:	08011d69 	.word	0x08011d69
 8011a68:	08011d69 	.word	0x08011d69
 8011a6c:	08011d69 	.word	0x08011d69
 8011a70:	08011d69 	.word	0x08011d69
 8011a74:	08011d69 	.word	0x08011d69
 8011a78:	08011d69 	.word	0x08011d69
 8011a7c:	08011d69 	.word	0x08011d69
 8011a80:	08011c0b 	.word	0x08011c0b
 8011a84:	08011d69 	.word	0x08011d69
 8011a88:	08011d69 	.word	0x08011d69
 8011a8c:	08011c5d 	.word	0x08011c5d
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8011a90:	4b86      	ldr	r3, [pc, #536]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 8011a98:	4b84      	ldr	r3, [pc, #528]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8011a9e:	4b83      	ldr	r3, [pc, #524]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8011aa4:	4b81      	ldr	r3, [pc, #516]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011aa6:	89da      	ldrh	r2, [r3, #14]
 8011aa8:	4b80      	ldr	r3, [pc, #512]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011aaa:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8011aac:	4b7f      	ldr	r3, [pc, #508]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011aae:	220a      	movs	r2, #10
 8011ab0:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8011ab2:	4b7e      	ldr	r3, [pc, #504]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ab4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 8157 	beq.w	8011d6c <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8011abe:	4b7b      	ldr	r3, [pc, #492]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ac0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d001      	beq.n	8011acc <rfalNfcWorker+0xe4>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	e000      	b.n	8011ace <rfalNfcWorker+0xe6>
 8011acc:	4b78      	ldr	r3, [pc, #480]	; (8011cb0 <rfalNfcWorker+0x2c8>)
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f008 fb2c 	bl	801a12c <rfalWakeUpModeStart>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8011ad8:	88fb      	ldrh	r3, [r7, #6]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f040 8146 	bne.w	8011d6c <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8011ae0:	4b72      	ldr	r3, [pc, #456]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ae2:	2203      	movs	r2, #3
 8011ae4:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8011ae6:	4b71      	ldr	r3, [pc, #452]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f000 813e 	beq.w	8011d6c <rfalNfcWorker+0x384>
 8011af0:	4b6e      	ldr	r3, [pc, #440]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af4:	4a6d      	ldr	r2, [pc, #436]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011af6:	7812      	ldrb	r2, [r2, #0]
 8011af8:	4610      	mov	r0, r2
 8011afa:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8011afc:	e136      	b.n	8011d6c <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8011afe:	f008 fce3 	bl	801a4c8 <rfalWakeUpModeHasWoke>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f000 8133 	beq.w	8011d70 <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8011b0a:	f008 fd2b 	bl	801a564 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8011b0e:	4b67      	ldr	r3, [pc, #412]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b10:	220a      	movs	r2, #10
 8011b12:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8011b14:	4b65      	ldr	r3, [pc, #404]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f000 8129 	beq.w	8011d70 <rfalNfcWorker+0x388>
 8011b1e:	4b63      	ldr	r3, [pc, #396]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b22:	4a62      	ldr	r2, [pc, #392]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b24:	7812      	ldrb	r2, [r2, #0]
 8011b26:	4610      	mov	r0, r2
 8011b28:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 8011b2a:	e121      	b.n	8011d70 <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8011b2c:	4b5f      	ldr	r3, [pc, #380]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b2e:	8a1b      	ldrh	r3, [r3, #16]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7f2 fd45 	bl	80045c0 <timerCalculateTimer>
 8011b36:	4603      	mov	r3, r0
 8011b38:	4a5c      	ldr	r2, [pc, #368]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b3a:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 8011b3e:	f000 fad5 	bl	80120ec <rfalNfcPollTechDetetection>
 8011b42:	4603      	mov	r3, r0
 8011b44:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8011b46:	88fb      	ldrh	r3, [r7, #6]
 8011b48:	2b02      	cmp	r3, #2
 8011b4a:	f000 8113 	beq.w	8011d74 <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 8011b4e:	88fb      	ldrh	r3, [r7, #6]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d103      	bne.n	8011b5c <rfalNfcWorker+0x174>
 8011b54:	4b55      	ldr	r3, [pc, #340]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b56:	885b      	ldrh	r3, [r3, #2]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d105      	bne.n	8011b68 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 8011b5c:	f006 fb6e 	bl	801823c <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 8011b60:	4b52      	ldr	r3, [pc, #328]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b62:	2214      	movs	r2, #20
 8011b64:	701a      	strb	r2, [r3, #0]
                    break;
 8011b66:	e114      	b.n	8011d92 <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8011b68:	4b50      	ldr	r3, [pc, #320]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b6a:	885a      	ldrh	r2, [r3, #2]
 8011b6c:	4b4f      	ldr	r3, [pc, #316]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b6e:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 8011b70:	4b4e      	ldr	r3, [pc, #312]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b72:	220b      	movs	r2, #11
 8011b74:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011b76:	e0fd      	b.n	8011d74 <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 8011b78:	f000 fc46 	bl	8012408 <rfalNfcPollCollResolution>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8011b80:	88fb      	ldrh	r3, [r7, #6]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	f000 80f8 	beq.w	8011d78 <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8011b88:	88fb      	ldrh	r3, [r7, #6]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d104      	bne.n	8011b98 <rfalNfcWorker+0x1b0>
 8011b8e:	4b47      	ldr	r3, [pc, #284]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b90:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d103      	bne.n	8011ba0 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8011b98:	4b44      	ldr	r3, [pc, #272]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011b9a:	2222      	movs	r2, #34	; 0x22
 8011b9c:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8011b9e:	e0f8      	b.n	8011d92 <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8011ba0:	4b42      	ldr	r3, [pc, #264]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ba2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d90d      	bls.n	8011bc6 <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8011baa:	4b40      	ldr	r3, [pc, #256]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d009      	beq.n	8011bc6 <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8011bb2:	4b3e      	ldr	r3, [pc, #248]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bb4:	220c      	movs	r2, #12
 8011bb6:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8011bb8:	4b3c      	ldr	r3, [pc, #240]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bbc:	4a3b      	ldr	r2, [pc, #236]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bbe:	7812      	ldrb	r2, [r2, #0]
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	4798      	blx	r3
                        break;
 8011bc4:	e0e5      	b.n	8011d92 <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 8011bc6:	4b39      	ldr	r3, [pc, #228]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bc8:	2200      	movs	r2, #0
 8011bca:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8011bcc:	4b37      	ldr	r3, [pc, #220]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bce:	220d      	movs	r2, #13
 8011bd0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011bd2:	e0d1      	b.n	8011d78 <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 8011bd4:	4b35      	ldr	r3, [pc, #212]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bd6:	79db      	ldrb	r3, [r3, #7]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fee3 	bl	80129a4 <rfalNfcPollActivation>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d003      	beq.n	8011bec <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 8011be4:	4b31      	ldr	r3, [pc, #196]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011be6:	2222      	movs	r2, #34	; 0x22
 8011be8:	701a      	strb	r2, [r3, #0]
                break;
 8011bea:	e0d2      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8011bec:	4b2f      	ldr	r3, [pc, #188]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bee:	221e      	movs	r2, #30
 8011bf0:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8011bf2:	4b2e      	ldr	r3, [pc, #184]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 80c0 	beq.w	8011d7c <rfalNfcWorker+0x394>
 8011bfc:	4b2b      	ldr	r3, [pc, #172]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c00:	4a2a      	ldr	r2, [pc, #168]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c02:	7812      	ldrb	r2, [r2, #0]
 8011c04:	4610      	mov	r0, r2
 8011c06:	4798      	blx	r3
            break;
 8011c08:	e0b8      	b.n	8011d7c <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 8011c0a:	f000 f9eb 	bl	8011fe4 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8011c0e:	4b27      	ldr	r3, [pc, #156]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c10:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d00c      	beq.n	8011c32 <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8011c18:	4b24      	ldr	r3, [pc, #144]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c1a:	2221      	movs	r2, #33	; 0x21
 8011c1c:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8011c1e:	4b23      	ldr	r3, [pc, #140]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d005      	beq.n	8011c32 <rfalNfcWorker+0x24a>
 8011c26:	4b21      	ldr	r3, [pc, #132]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c2a:	4a20      	ldr	r2, [pc, #128]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c2c:	7812      	ldrb	r2, [r2, #0]
 8011c2e:	4610      	mov	r0, r2
 8011c30:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 8011c32:	4b1e      	ldr	r3, [pc, #120]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c34:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8011c38:	2b20      	cmp	r3, #32
 8011c3a:	f040 80a1 	bne.w	8011d80 <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 8011c3e:	4b1b      	ldr	r3, [pc, #108]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c40:	2217      	movs	r2, #23
 8011c42:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8011c44:	4b19      	ldr	r3, [pc, #100]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 8099 	beq.w	8011d80 <rfalNfcWorker+0x398>
 8011c4e:	4b17      	ldr	r3, [pc, #92]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c52:	4a16      	ldr	r2, [pc, #88]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c54:	7812      	ldrb	r2, [r2, #0]
 8011c56:	4610      	mov	r0, r2
 8011c58:	4798      	blx	r3
            }
            break;
 8011c5a:	e091      	b.n	8011d80 <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 8011c5c:	f001 fb4c 	bl	80132f8 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8011c60:	4b12      	ldr	r3, [pc, #72]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c62:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d001      	beq.n	8011c6e <rfalNfcWorker+0x286>
 8011c6a:	2202      	movs	r2, #2
 8011c6c:	e000      	b.n	8011c70 <rfalNfcWorker+0x288>
 8011c6e:	2201      	movs	r2, #1
 8011c70:	4b0e      	ldr	r3, [pc, #56]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c72:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8011c74:	4b0d      	ldr	r3, [pc, #52]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f000 8083 	beq.w	8011d84 <rfalNfcWorker+0x39c>
 8011c7e:	4b0b      	ldr	r3, [pc, #44]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c82:	4a0a      	ldr	r2, [pc, #40]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c84:	7812      	ldrb	r2, [r2, #0]
 8011c86:	4610      	mov	r0, r2
 8011c88:	4798      	blx	r3
            break;
 8011c8a:	e07b      	b.n	8011d84 <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8011c8c:	4b07      	ldr	r3, [pc, #28]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011c8e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f2 fca2 	bl	80045dc <timerIsExpired>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 8011c9e:	f008 f929 	bl	8019ef4 <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8011ca2:	4b02      	ldr	r3, [pc, #8]	; (8011cac <rfalNfcWorker+0x2c4>)
 8011ca4:	2202      	movs	r2, #2
 8011ca6:	701a      	strb	r2, [r3, #0]
                break;
 8011ca8:	e073      	b.n	8011d92 <rfalNfcWorker+0x3aa>
 8011caa:	bf00      	nop
 8011cac:	20003314 	.word	0x20003314
 8011cb0:	2000338e 	.word	0x2000338e
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 8011cb4:	4b38      	ldr	r3, [pc, #224]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011cb6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8011cba:	4b38      	ldr	r3, [pc, #224]	; (8011d9c <rfalNfcWorker+0x3b4>)
 8011cbc:	9302      	str	r3, [sp, #8]
 8011cbe:	23ff      	movs	r3, #255	; 0xff
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	4b37      	ldr	r3, [pc, #220]	; (8011da0 <rfalNfcWorker+0x3b8>)
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	4b37      	ldr	r3, [pc, #220]	; (8011da4 <rfalNfcWorker+0x3bc>)
 8011cc8:	2200      	movs	r2, #0
 8011cca:	4937      	ldr	r1, [pc, #220]	; (8011da8 <rfalNfcWorker+0x3c0>)
 8011ccc:	f007 ffac 	bl	8019c28 <rfalListenStart>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 8011cd4:	88fb      	ldrh	r3, [r7, #6]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d156      	bne.n	8011d88 <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 8011cda:	4b2f      	ldr	r3, [pc, #188]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011cdc:	2215      	movs	r2, #21
 8011cde:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011ce0:	e052      	b.n	8011d88 <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 8011ce2:	4b2d      	ldr	r3, [pc, #180]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011ce4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f2 fc77 	bl	80045dc <timerIsExpired>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d005      	beq.n	8011d00 <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 8011cf4:	f008 f8fe 	bl	8019ef4 <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8011cf8:	4b27      	ldr	r3, [pc, #156]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	701a      	strb	r2, [r3, #0]
                break;
 8011cfe:	e048      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 8011d00:	2100      	movs	r1, #0
 8011d02:	2000      	movs	r0, #0
 8011d04:	f008 f922 	bl	8019f4c <rfalListenGetState>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d93e      	bls.n	8011d8c <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 8011d0e:	4b22      	ldr	r3, [pc, #136]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d10:	2216      	movs	r2, #22
 8011d12:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011d14:	e03a      	b.n	8011d8c <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 8011d16:	f001 f8f7 	bl	8012f08 <rfalNfcListenActivation>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 8011d1e:	88fb      	ldrh	r3, [r7, #6]
 8011d20:	2b02      	cmp	r3, #2
 8011d22:	d035      	beq.n	8011d90 <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 8011d24:	88fb      	ldrh	r3, [r7, #6]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d118      	bne.n	8011d5c <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 8011d2a:	4b1b      	ldr	r3, [pc, #108]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d2c:	4a1f      	ldr	r2, [pc, #124]	; (8011dac <rfalNfcWorker+0x3c4>)
 8011d2e:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 8011d30:	4b19      	ldr	r3, [pc, #100]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d32:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8011d36:	3301      	adds	r3, #1
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	4b17      	ldr	r3, [pc, #92]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d3c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 8011d40:	4b15      	ldr	r3, [pc, #84]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d42:	221e      	movs	r2, #30
 8011d44:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 8011d46:	4b14      	ldr	r3, [pc, #80]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d020      	beq.n	8011d90 <rfalNfcWorker+0x3a8>
 8011d4e:	4b12      	ldr	r3, [pc, #72]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d52:	4a11      	ldr	r2, [pc, #68]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d54:	7812      	ldrb	r2, [r2, #0]
 8011d56:	4610      	mov	r0, r2
 8011d58:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 8011d5a:	e019      	b.n	8011d90 <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 8011d5c:	f008 f8ca 	bl	8019ef4 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 8011d60:	4b0d      	ldr	r3, [pc, #52]	; (8011d98 <rfalNfcWorker+0x3b0>)
 8011d62:	2202      	movs	r2, #2
 8011d64:	701a      	strb	r2, [r3, #0]
            break;
 8011d66:	e013      	b.n	8011d90 <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 8011d68:	bf00      	nop
 8011d6a:	e012      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d6c:	bf00      	nop
 8011d6e:	e010      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d70:	bf00      	nop
 8011d72:	e00e      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d74:	bf00      	nop
 8011d76:	e00c      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d78:	bf00      	nop
 8011d7a:	e00a      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d7c:	bf00      	nop
 8011d7e:	e008      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d80:	bf00      	nop
 8011d82:	e006      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d84:	bf00      	nop
 8011d86:	e004      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d88:	bf00      	nop
 8011d8a:	e002      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d8c:	bf00      	nop
 8011d8e:	e000      	b.n	8011d92 <rfalNfcWorker+0x3aa>
            break;
 8011d90:	bf00      	nop
    }
}
 8011d92:	3708      	adds	r7, #8
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	20003314 	.word	0x20003314
 8011d9c:	20003812 	.word	0x20003812
 8011da0:	2000370f 	.word	0x2000370f
 8011da4:	20003372 	.word	0x20003372
 8011da8:	20003364 	.word	0x20003364
 8011dac:	200033a4 	.word	0x200033a4

08011db0 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 8011db0:	b5b0      	push	{r4, r5, r7, lr}
 8011db2:	b09c      	sub	sp, #112	; 0x70
 8011db4:	af06      	add	r7, sp, #24
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	607a      	str	r2, [r7, #4]
 8011dba:	603b      	str	r3, [r7, #0]
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 8011dc0:	4b7f      	ldr	r3, [pc, #508]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	2b1d      	cmp	r3, #29
 8011dc6:	f240 80f5 	bls.w	8011fb4 <rfalNfcDataExchangeStart+0x204>
 8011dca:	4b7d      	ldr	r3, [pc, #500]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 80f0 	beq.w	8011fb4 <rfalNfcDataExchangeStart+0x204>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 8011dd4:	4b7a      	ldr	r3, [pc, #488]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	2b1e      	cmp	r3, #30
 8011dda:	d124      	bne.n	8011e26 <rfalNfcDataExchangeStart+0x76>
 8011ddc:	4b78      	ldr	r3, [pc, #480]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	2b09      	cmp	r3, #9
 8011de4:	d91f      	bls.n	8011e26 <rfalNfcDataExchangeStart+0x76>
 8011de6:	4b76      	ldr	r3, [pc, #472]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2b0f      	cmp	r3, #15
 8011dee:	d81a      	bhi.n	8011e26 <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 8011df0:	897b      	ldrh	r3, [r7, #10]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d001      	beq.n	8011dfa <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 8011df6:	2321      	movs	r3, #33	; 0x21
 8011df8:	e0dd      	b.n	8011fb6 <rfalNfcDataExchangeStart+0x206>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	4a71      	ldr	r2, [pc, #452]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011dfe:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8011e00:	4b6f      	ldr	r3, [pc, #444]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	7f5b      	ldrb	r3, [r3, #29]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d008      	beq.n	8011e1c <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 8011e0a:	4b6d      	ldr	r3, [pc, #436]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011e0c:	689b      	ldr	r3, [r3, #8]
 8011e0e:	7f5b      	ldrb	r3, [r3, #29]
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d101      	bne.n	8011e18 <rfalNfcDataExchangeStart+0x68>
 8011e14:	4b6c      	ldr	r3, [pc, #432]	; (8011fc8 <rfalNfcDataExchangeStart+0x218>)
 8011e16:	e002      	b.n	8011e1e <rfalNfcDataExchangeStart+0x6e>
 8011e18:	4b6c      	ldr	r3, [pc, #432]	; (8011fcc <rfalNfcDataExchangeStart+0x21c>)
 8011e1a:	e000      	b.n	8011e1e <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8011e1c:	4b6c      	ldr	r3, [pc, #432]	; (8011fd0 <rfalNfcDataExchangeStart+0x220>)
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 8011e22:	2300      	movs	r3, #0
 8011e24:	e0c7      	b.n	8011fb6 <rfalNfcDataExchangeStart+0x206>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 8011e26:	4b66      	ldr	r3, [pc, #408]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	7f5b      	ldrb	r3, [r3, #29]
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	d065      	beq.n	8011efc <rfalNfcDataExchangeStart+0x14c>
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	f300 80ad 	bgt.w	8011f90 <rfalNfcDataExchangeStart+0x1e0>
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d002      	beq.n	8011e40 <rfalNfcDataExchangeStart+0x90>
 8011e3a:	2b01      	cmp	r3, #1
 8011e3c:	d021      	beq.n	8011e82 <rfalNfcDataExchangeStart+0xd2>
 8011e3e:	e0a7      	b.n	8011f90 <rfalNfcDataExchangeStart+0x1e0>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e44:	897b      	ldrh	r3, [r7, #10]
 8011e46:	00db      	lsls	r3, r3, #3
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e4c:	4b5f      	ldr	r3, [pc, #380]	; (8011fcc <rfalNfcDataExchangeStart+0x21c>)
 8011e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8011e50:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8011e54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011e58:	4b5a      	ldr	r3, [pc, #360]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e62:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	4a59      	ldr	r2, [pc, #356]	; (8011fcc <rfalNfcDataExchangeStart+0x21c>)
 8011e68:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	4a55      	ldr	r2, [pc, #340]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011e6e:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 8011e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e74:	4618      	mov	r0, r3
 8011e76:	f006 f9f7 	bl	8018268 <rfalStartTransceive>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011e80:	e08a      	b.n	8011f98 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 8011e82:	897b      	ldrh	r3, [r7, #10]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d005      	beq.n	8011e94 <rfalNfcDataExchangeStart+0xe4>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 8011e88:	897b      	ldrh	r3, [r7, #10]
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	68f9      	ldr	r1, [r7, #12]
 8011e8e:	4851      	ldr	r0, [pc, #324]	; (8011fd4 <rfalNfcDataExchangeStart+0x224>)
 8011e90:	f009 faac 	bl	801b3ec <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 8011e94:	2300      	movs	r3, #0
 8011e96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 8011e9a:	23ff      	movs	r3, #255	; 0xff
 8011e9c:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 8011e9e:	4b48      	ldr	r3, [pc, #288]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011ea0:	689b      	ldr	r3, [r3, #8]
 8011ea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ea6:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 8011ea8:	4b45      	ldr	r3, [pc, #276]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 8011eb0:	4b43      	ldr	r3, [pc, #268]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eb6:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 8011eb8:	4b47      	ldr	r3, [pc, #284]	; (8011fd8 <rfalNfcDataExchangeStart+0x228>)
 8011eba:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 8011ebc:	897b      	ldrh	r3, [r7, #10]
 8011ebe:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 8011ec4:	4b41      	ldr	r3, [pc, #260]	; (8011fcc <rfalNfcDataExchangeStart+0x21c>)
 8011ec6:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 8011ec8:	4b3e      	ldr	r3, [pc, #248]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011eca:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8011ecc:	4b43      	ldr	r3, [pc, #268]	; (8011fdc <rfalNfcDataExchangeStart+0x22c>)
 8011ece:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4a3f      	ldr	r2, [pc, #252]	; (8011fd0 <rfalNfcDataExchangeStart+0x220>)
 8011ed4:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	4a3a      	ldr	r2, [pc, #232]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011eda:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 8011edc:	466d      	mov	r5, sp
 8011ede:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8011ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ee6:	6823      	ldr	r3, [r4, #0]
 8011ee8:	602b      	str	r3, [r5, #0]
 8011eea:	f107 0314 	add.w	r3, r7, #20
 8011eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ef0:	f7fe fe50 	bl	8010b94 <rfalIsoDepStartTransceive>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011efa:	e04d      	b.n	8011f98 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 8011efc:	897b      	ldrh	r3, [r7, #10]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d005      	beq.n	8011f0e <rfalNfcDataExchangeStart+0x15e>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 8011f02:	897b      	ldrh	r3, [r7, #10]
 8011f04:	461a      	mov	r2, r3
 8011f06:	68f9      	ldr	r1, [r7, #12]
 8011f08:	4835      	ldr	r0, [pc, #212]	; (8011fe0 <rfalNfcDataExchangeStart+0x230>)
 8011f0a:	f009 fa6f 	bl	801b3ec <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 8011f0e:	23ff      	movs	r3, #255	; 0xff
 8011f10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8011f14:	4b2a      	ldr	r3, [pc, #168]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f1c:	091b      	lsrs	r3, r3, #4
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	f003 0303 	and.w	r3, r3, #3
 8011f24:	3301      	adds	r3, #1
 8011f26:	019b      	lsls	r3, r3, #6
 8011f28:	2bfd      	cmp	r3, #253	; 0xfd
 8011f2a:	d80c      	bhi.n	8011f46 <rfalNfcDataExchangeStart+0x196>
 8011f2c:	4b24      	ldr	r3, [pc, #144]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011f2e:	689b      	ldr	r3, [r3, #8]
 8011f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f34:	091b      	lsrs	r3, r3, #4
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	f003 0303 	and.w	r3, r3, #3
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	019b      	lsls	r3, r3, #6
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	e000      	b.n	8011f48 <rfalNfcDataExchangeStart+0x198>
 8011f46:	23fe      	movs	r3, #254	; 0xfe
 8011f48:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8011f4a:	4b1d      	ldr	r3, [pc, #116]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f50:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 8011f52:	4b1b      	ldr	r3, [pc, #108]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011f54:	689b      	ldr	r3, [r3, #8]
 8011f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f58:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8011f5a:	4b1f      	ldr	r3, [pc, #124]	; (8011fd8 <rfalNfcDataExchangeStart+0x228>)
 8011f5c:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 8011f5e:	897b      	ldrh	r3, [r7, #10]
 8011f60:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 8011f62:	2300      	movs	r3, #0
 8011f64:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8011f66:	4b19      	ldr	r3, [pc, #100]	; (8011fcc <rfalNfcDataExchangeStart+0x21c>)
 8011f68:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 8011f6a:	4b16      	ldr	r3, [pc, #88]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011f6c:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8011f6e:	4b1b      	ldr	r3, [pc, #108]	; (8011fdc <rfalNfcDataExchangeStart+0x22c>)
 8011f70:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4a14      	ldr	r2, [pc, #80]	; (8011fc8 <rfalNfcDataExchangeStart+0x218>)
 8011f76:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	4a12      	ldr	r2, [pc, #72]	; (8011fc4 <rfalNfcDataExchangeStart+0x214>)
 8011f7c:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 8011f7e:	f107 0314 	add.w	r3, r7, #20
 8011f82:	4618      	mov	r0, r3
 8011f84:	f003 fb64 	bl	8015650 <rfalNfcDepStartTransceive>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011f8e:	e003      	b.n	8011f98 <rfalNfcDataExchangeStart+0x1e8>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 8011f90:	2307      	movs	r3, #7
 8011f92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8011f96:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 8011f98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d106      	bne.n	8011fae <rfalNfcDataExchangeStart+0x1fe>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 8011fa0:	4b07      	ldr	r3, [pc, #28]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011fa2:	2202      	movs	r2, #2
 8011fa4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <rfalNfcDataExchangeStart+0x210>)
 8011faa:	221f      	movs	r2, #31
 8011fac:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 8011fae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011fb2:	e000      	b.n	8011fb6 <rfalNfcDataExchangeStart+0x206>
    }
    
    return ERR_WRONG_STATE;
 8011fb4:	2321      	movs	r3, #33	; 0x21
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3758      	adds	r7, #88	; 0x58
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	20003314 	.word	0x20003314
 8011fc4:	20003812 	.word	0x20003812
 8011fc8:	20003714 	.word	0x20003714
 8011fcc:	2000370f 	.word	0x2000370f
 8011fd0:	20003712 	.word	0x20003712
 8011fd4:	2000360f 	.word	0x2000360f
 8011fd8:	2000360c 	.word	0x2000360c
 8011fdc:	20003607 	.word	0x20003607
 8011fe0:	20003611 	.word	0x20003611

08011fe4 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 8011fe8:	4b3d      	ldr	r3, [pc, #244]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b1e      	cmp	r3, #30
 8011fee:	d114      	bne.n	801201a <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 8011ff0:	4b3b      	ldr	r3, [pc, #236]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8011ff8:	4b39      	ldr	r3, [pc, #228]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8011ffa:	221f      	movs	r2, #31
 8011ffc:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 8011ffe:	4b38      	ldr	r3, [pc, #224]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	2b0c      	cmp	r3, #12
 8012006:	d108      	bne.n	801201a <rfalNfcDataExchangeGetStatus+0x36>
 8012008:	4b35      	ldr	r3, [pc, #212]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	7f5b      	ldrb	r3, [r3, #29]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d103      	bne.n	801201a <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 8012012:	4b33      	ldr	r3, [pc, #204]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012014:	2200      	movs	r2, #0
 8012016:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 801201a:	4b31      	ldr	r3, [pc, #196]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	2b17      	cmp	r3, #23
 8012020:	d103      	bne.n	801202a <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 8012022:	4b2f      	ldr	r3, [pc, #188]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012024:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8012028:	e057      	b.n	80120da <rfalNfcDataExchangeGetStatus+0xf6>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 801202a:	4b2d      	ldr	r3, [pc, #180]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	2b1f      	cmp	r3, #31
 8012030:	d005      	beq.n	801203e <rfalNfcDataExchangeGetStatus+0x5a>
 8012032:	4b2b      	ldr	r3, [pc, #172]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b21      	cmp	r3, #33	; 0x21
 8012038:	d001      	beq.n	801203e <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 801203a:	2321      	movs	r3, #33	; 0x21
 801203c:	e04d      	b.n	80120da <rfalNfcDataExchangeGetStatus+0xf6>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 801203e:	4b28      	ldr	r3, [pc, #160]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012040:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8012044:	2b02      	cmp	r3, #2
 8012046:	d145      	bne.n	80120d4 <rfalNfcDataExchangeGetStatus+0xf0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8012048:	4b25      	ldr	r3, [pc, #148]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801204a:	689b      	ldr	r3, [r3, #8]
 801204c:	7f5b      	ldrb	r3, [r3, #29]
 801204e:	2b02      	cmp	r3, #2
 8012050:	d016      	beq.n	8012080 <rfalNfcDataExchangeGetStatus+0x9c>
 8012052:	2b02      	cmp	r3, #2
 8012054:	dc1c      	bgt.n	8012090 <rfalNfcDataExchangeGetStatus+0xac>
 8012056:	2b00      	cmp	r3, #0
 8012058:	d002      	beq.n	8012060 <rfalNfcDataExchangeGetStatus+0x7c>
 801205a:	2b01      	cmp	r3, #1
 801205c:	d008      	beq.n	8012070 <rfalNfcDataExchangeGetStatus+0x8c>
 801205e:	e017      	b.n	8012090 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8012060:	f006 fb0e 	bl	8018680 <rfalGetTransceiveStatus>
 8012064:	4603      	mov	r3, r0
 8012066:	461a      	mov	r2, r3
 8012068:	4b1d      	ldr	r3, [pc, #116]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801206a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 801206e:	e014      	b.n	801209a <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 8012070:	f7fe fdfc 	bl	8010c6c <rfalIsoDepGetTransceiveStatus>
 8012074:	4603      	mov	r3, r0
 8012076:	461a      	mov	r2, r3
 8012078:	4b19      	ldr	r3, [pc, #100]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801207a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 801207e:	e00c      	b.n	801209a <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 8012080:	f003 fb1c 	bl	80156bc <rfalNfcDepGetTransceiveStatus>
 8012084:	4603      	mov	r3, r0
 8012086:	461a      	mov	r2, r3
 8012088:	4b15      	ldr	r3, [pc, #84]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801208a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 801208e:	e004      	b.n	801209a <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 8012090:	4b13      	ldr	r3, [pc, #76]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8012092:	2207      	movs	r2, #7
 8012094:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8012098:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 801209a:	4b11      	ldr	r3, [pc, #68]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 801209c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80120a0:	2b20      	cmp	r3, #32
 80120a2:	d117      	bne.n	80120d4 <rfalNfcDataExchangeGetStatus+0xf0>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 80120a4:	4b0f      	ldr	r3, [pc, #60]	; (80120e4 <rfalNfcDataExchangeGetStatus+0x100>)
 80120a6:	22ff      	movs	r2, #255	; 0xff
 80120a8:	490f      	ldr	r1, [pc, #60]	; (80120e8 <rfalNfcDataExchangeGetStatus+0x104>)
 80120aa:	200c      	movs	r0, #12
 80120ac:	f007 ff3e 	bl	8019f2c <rfalListenSleepStart>
 80120b0:	4603      	mov	r3, r0
 80120b2:	461a      	mov	r2, r3
 80120b4:	4b0a      	ldr	r3, [pc, #40]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120b6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 80120ba:	4b09      	ldr	r3, [pc, #36]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120bc:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d003      	beq.n	80120cc <rfalNfcDataExchangeGetStatus+0xe8>
 80120c4:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120c6:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80120ca:	e006      	b.n	80120da <rfalNfcDataExchangeGetStatus+0xf6>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 80120cc:	4b04      	ldr	r3, [pc, #16]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120ce:	2220      	movs	r2, #32
 80120d0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 80120d4:	4b02      	ldr	r3, [pc, #8]	; (80120e0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80120d6:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	20003314 	.word	0x20003314
 80120e4:	20003812 	.word	0x20003812
 80120e8:	2000370f 	.word	0x2000370f

080120ec <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b08a      	sub	sp, #40	; 0x28
 80120f0:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 80120f2:	2300      	movs	r3, #0
 80120f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 80120f6:	4b9a      	ldr	r3, [pc, #616]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80120f8:	89db      	ldrh	r3, [r3, #14]
 80120fa:	f003 0310 	and.w	r3, r3, #16
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d05a      	beq.n	80121b8 <rfalNfcPollTechDetetection+0xcc>
 8012102:	4b97      	ldr	r3, [pc, #604]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012104:	889b      	ldrh	r3, [r3, #4]
 8012106:	f003 0310 	and.w	r3, r3, #16
 801210a:	2b00      	cmp	r3, #0
 801210c:	d054      	beq.n	80121b8 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 801210e:	4b94      	ldr	r3, [pc, #592]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012110:	889b      	ldrh	r3, [r3, #4]
 8012112:	f023 0310 	bic.w	r3, r3, #16
 8012116:	b29a      	uxth	r2, r3
 8012118:	4b91      	ldr	r3, [pc, #580]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801211a:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 801211c:	4b90      	ldr	r3, [pc, #576]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801211e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8012122:	4a8f      	ldr	r2, [pc, #572]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012124:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 8012128:	4619      	mov	r1, r3
 801212a:	2009      	movs	r0, #9
 801212c:	f005 fc24 	bl	8017978 <rfalSetMode>
 8012130:	4603      	mov	r3, r0
 8012132:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <rfalNfcPollTechDetetection+0x52>
 801213a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801213c:	e15d      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801213e:	2001      	movs	r0, #1
 8012140:	f005 ffb6 	bl	80180b0 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8012144:	2040      	movs	r0, #64	; 0x40
 8012146:	f005 ffd7 	bl	80180f8 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 801214a:	2000      	movs	r0, #0
 801214c:	f005 ffc0 	bl	80180d0 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 8012150:	4884      	ldr	r0, [pc, #528]	; (8012364 <rfalNfcPollTechDetetection+0x278>)
 8012152:	f005 ffe5 	bl	8018120 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8012156:	f006 f80f 	bl	8018178 <rfalFieldOnAndStartGT>
 801215a:	4603      	mov	r3, r0
 801215c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801215e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <rfalNfcPollTechDetetection+0x7c>
 8012164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012166:	e148      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	2101      	movs	r1, #1
 801216e:	487e      	ldr	r0, [pc, #504]	; (8012368 <rfalNfcPollTechDetetection+0x27c>)
 8012170:	f001 f81e 	bl	80131b0 <rfalNfcNfcDepActivate>
 8012174:	4603      	mov	r3, r0
 8012176:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8012178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801217a:	2b00      	cmp	r3, #0
 801217c:	d118      	bne.n	80121b0 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 801217e:	4b78      	ldr	r3, [pc, #480]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012180:	885b      	ldrh	r3, [r3, #2]
 8012182:	f043 0310 	orr.w	r3, r3, #16
 8012186:	b29a      	uxth	r2, r3
 8012188:	4b75      	ldr	r3, [pc, #468]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801218a:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 801218c:	4b74      	ldr	r3, [pc, #464]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801218e:	2205      	movs	r2, #5
 8012190:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8012194:	4b72      	ldr	r3, [pc, #456]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012196:	2202      	movs	r2, #2
 8012198:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 801219c:	4b70      	ldr	r3, [pc, #448]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801219e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80121a2:	3301      	adds	r3, #1
 80121a4:	b2da      	uxtb	r2, r3
 80121a6:	4b6e      	ldr	r3, [pc, #440]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80121a8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 80121ac:	2300      	movs	r3, #0
 80121ae:	e124      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 80121b0:	f006 f844 	bl	801823c <rfalFieldOff>
        return ERR_BUSY;
 80121b4:	2302      	movs	r3, #2
 80121b6:	e120      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 80121b8:	4b69      	ldr	r3, [pc, #420]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80121ba:	89db      	ldrh	r3, [r3, #14]
 80121bc:	f003 0301 	and.w	r3, r3, #1
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d034      	beq.n	801222e <rfalNfcPollTechDetetection+0x142>
 80121c4:	4b66      	ldr	r3, [pc, #408]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80121c6:	889b      	ldrh	r3, [r3, #4]
 80121c8:	f003 0301 	and.w	r3, r3, #1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d02e      	beq.n	801222e <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 80121d0:	4b63      	ldr	r3, [pc, #396]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80121d2:	889b      	ldrh	r3, [r3, #4]
 80121d4:	f023 0301 	bic.w	r3, r3, #1
 80121d8:	b29a      	uxth	r2, r3
 80121da:	4b61      	ldr	r3, [pc, #388]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80121dc:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 80121de:	f003 fa9d 	bl	801571c <rfalNfcaPollerInitialize>
 80121e2:	4603      	mov	r3, r0
 80121e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80121e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <rfalNfcPollTechDetetection+0x104>
 80121ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121ee:	e104      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 80121f0:	f005 ffc2 	bl	8018178 <rfalFieldOnAndStartGT>
 80121f4:	4603      	mov	r3, r0
 80121f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80121f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d001      	beq.n	8012202 <rfalNfcPollTechDetetection+0x116>
 80121fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012200:	e0fb      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8012202:	4b57      	ldr	r3, [pc, #348]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012204:	7b1b      	ldrb	r3, [r3, #12]
 8012206:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801220a:	4611      	mov	r1, r2
 801220c:	4618      	mov	r0, r3
 801220e:	f003 fad1 	bl	80157b4 <rfalNfcaPollerTechnologyDetection>
 8012212:	4603      	mov	r3, r0
 8012214:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8012216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012218:	2b00      	cmp	r3, #0
 801221a:	d106      	bne.n	801222a <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 801221c:	4b50      	ldr	r3, [pc, #320]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801221e:	885b      	ldrh	r3, [r3, #2]
 8012220:	f043 0301 	orr.w	r3, r3, #1
 8012224:	b29a      	uxth	r2, r3
 8012226:	4b4e      	ldr	r3, [pc, #312]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012228:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 801222a:	2302      	movs	r3, #2
 801222c:	e0e5      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 801222e:	4b4c      	ldr	r3, [pc, #304]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012230:	89db      	ldrh	r3, [r3, #14]
 8012232:	f003 0302 	and.w	r3, r3, #2
 8012236:	2b00      	cmp	r3, #0
 8012238:	d035      	beq.n	80122a6 <rfalNfcPollTechDetetection+0x1ba>
 801223a:	4b49      	ldr	r3, [pc, #292]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801223c:	889b      	ldrh	r3, [r3, #4]
 801223e:	f003 0302 	and.w	r3, r3, #2
 8012242:	2b00      	cmp	r3, #0
 8012244:	d02f      	beq.n	80122a6 <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8012246:	4b46      	ldr	r3, [pc, #280]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012248:	889b      	ldrh	r3, [r3, #4]
 801224a:	f023 0302 	bic.w	r3, r3, #2
 801224e:	b29a      	uxth	r2, r3
 8012250:	4b43      	ldr	r3, [pc, #268]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012252:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 8012254:	f003 fe7e 	bl	8015f54 <rfalNfcbPollerInitialize>
 8012258:	4603      	mov	r3, r0
 801225a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801225c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <rfalNfcPollTechDetetection+0x17a>
 8012262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012264:	e0c9      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 8012266:	f005 ff87 	bl	8018178 <rfalFieldOnAndStartGT>
 801226a:	4603      	mov	r3, r0
 801226c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801226e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012270:	2b00      	cmp	r3, #0
 8012272:	d001      	beq.n	8012278 <rfalNfcPollTechDetetection+0x18c>
 8012274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012276:	e0c0      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 8012278:	4b39      	ldr	r3, [pc, #228]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801227a:	7b1b      	ldrb	r3, [r3, #12]
 801227c:	f107 0213 	add.w	r2, r7, #19
 8012280:	f107 0114 	add.w	r1, r7, #20
 8012284:	4618      	mov	r0, r3
 8012286:	f003 ff77 	bl	8016178 <rfalNfcbPollerTechnologyDetection>
 801228a:	4603      	mov	r3, r0
 801228c:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 801228e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 8012294:	4b32      	ldr	r3, [pc, #200]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012296:	885b      	ldrh	r3, [r3, #2]
 8012298:	f043 0302 	orr.w	r3, r3, #2
 801229c:	b29a      	uxth	r2, r3
 801229e:	4b30      	ldr	r3, [pc, #192]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122a0:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 80122a2:	2302      	movs	r3, #2
 80122a4:	e0a9      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 80122a6:	4b2e      	ldr	r3, [pc, #184]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122a8:	89db      	ldrh	r3, [r3, #14]
 80122aa:	f003 0304 	and.w	r3, r3, #4
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d031      	beq.n	8012316 <rfalNfcPollTechDetetection+0x22a>
 80122b2:	4b2b      	ldr	r3, [pc, #172]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122b4:	889b      	ldrh	r3, [r3, #4]
 80122b6:	f003 0304 	and.w	r3, r3, #4
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d02b      	beq.n	8012316 <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 80122be:	4b28      	ldr	r3, [pc, #160]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122c0:	889b      	ldrh	r3, [r3, #4]
 80122c2:	f023 0304 	bic.w	r3, r3, #4
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	4b25      	ldr	r3, [pc, #148]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122ca:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 80122cc:	4b24      	ldr	r3, [pc, #144]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 80122ce:	7cdb      	ldrb	r3, [r3, #19]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f004 fa13 	bl	80166fc <rfalNfcfPollerInitialize>
 80122d6:	4603      	mov	r3, r0
 80122d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d001      	beq.n	80122e4 <rfalNfcPollTechDetetection+0x1f8>
 80122e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122e2:	e08a      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80122e4:	f005 ff48 	bl	8018178 <rfalFieldOnAndStartGT>
 80122e8:	4603      	mov	r3, r0
 80122ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <rfalNfcPollTechDetetection+0x20a>
 80122f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122f4:	e081      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 80122f6:	f004 fa4f 	bl	8016798 <rfalNfcfPollerCheckPresence>
 80122fa:	4603      	mov	r3, r0
 80122fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 80122fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012300:	2b00      	cmp	r3, #0
 8012302:	d106      	bne.n	8012312 <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 8012304:	4b16      	ldr	r3, [pc, #88]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012306:	885b      	ldrh	r3, [r3, #2]
 8012308:	f043 0304 	orr.w	r3, r3, #4
 801230c:	b29a      	uxth	r2, r3
 801230e:	4b14      	ldr	r3, [pc, #80]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012310:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 8012312:	2302      	movs	r3, #2
 8012314:	e071      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 8012316:	4b12      	ldr	r3, [pc, #72]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012318:	89db      	ldrh	r3, [r3, #14]
 801231a:	f003 0308 	and.w	r3, r3, #8
 801231e:	2b00      	cmp	r3, #0
 8012320:	d036      	beq.n	8012390 <rfalNfcPollTechDetetection+0x2a4>
 8012322:	4b0f      	ldr	r3, [pc, #60]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012324:	889b      	ldrh	r3, [r3, #4]
 8012326:	f003 0308 	and.w	r3, r3, #8
 801232a:	2b00      	cmp	r3, #0
 801232c:	d030      	beq.n	8012390 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 801232e:	4b0c      	ldr	r3, [pc, #48]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 8012330:	889b      	ldrh	r3, [r3, #4]
 8012332:	f023 0308 	bic.w	r3, r3, #8
 8012336:	b29a      	uxth	r2, r3
 8012338:	4b09      	ldr	r3, [pc, #36]	; (8012360 <rfalNfcPollTechDetetection+0x274>)
 801233a:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 801233c:	f004 fd58 	bl	8016df0 <rfalNfcvPollerInitialize>
 8012340:	4603      	mov	r3, r0
 8012342:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012346:	2b00      	cmp	r3, #0
 8012348:	d001      	beq.n	801234e <rfalNfcPollTechDetetection+0x262>
 801234a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801234c:	e055      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 801234e:	f005 ff13 	bl	8018178 <rfalFieldOnAndStartGT>
 8012352:	4603      	mov	r3, r0
 8012354:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012358:	2b00      	cmp	r3, #0
 801235a:	d007      	beq.n	801236c <rfalNfcPollTechDetetection+0x280>
 801235c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801235e:	e04c      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
 8012360:	20003314 	.word	0x20003314
 8012364:	00063510 	.word	0x00063510
 8012368:	200033a4 	.word	0x200033a4
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 801236c:	1d3b      	adds	r3, r7, #4
 801236e:	4618      	mov	r0, r3
 8012370:	f004 fd62 	bl	8016e38 <rfalNfcvPollerCheckPresence>
 8012374:	4603      	mov	r3, r0
 8012376:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8012378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <rfalNfcPollTechDetetection+0x2a0>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 801237e:	4b21      	ldr	r3, [pc, #132]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 8012380:	885b      	ldrh	r3, [r3, #2]
 8012382:	f043 0308 	orr.w	r3, r3, #8
 8012386:	b29a      	uxth	r2, r3
 8012388:	4b1e      	ldr	r3, [pc, #120]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 801238a:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 801238c:	2302      	movs	r3, #2
 801238e:	e034      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8012390:	4b1c      	ldr	r3, [pc, #112]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 8012392:	89db      	ldrh	r3, [r3, #14]
 8012394:	f003 0320 	and.w	r3, r3, #32
 8012398:	2b00      	cmp	r3, #0
 801239a:	d02d      	beq.n	80123f8 <rfalNfcPollTechDetetection+0x30c>
 801239c:	4b19      	ldr	r3, [pc, #100]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 801239e:	889b      	ldrh	r3, [r3, #4]
 80123a0:	f003 0320 	and.w	r3, r3, #32
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d027      	beq.n	80123f8 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80123a8:	4b16      	ldr	r3, [pc, #88]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 80123aa:	889b      	ldrh	r3, [r3, #4]
 80123ac:	f023 0320 	bic.w	r3, r3, #32
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	4b14      	ldr	r3, [pc, #80]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 80123b4:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 80123b6:	f008 f9ac 	bl	801a712 <rfalSt25tbPollerInitialize>
 80123ba:	4603      	mov	r3, r0
 80123bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80123be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <rfalNfcPollTechDetetection+0x2dc>
 80123c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123c6:	e018      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80123c8:	f005 fed6 	bl	8018178 <rfalFieldOnAndStartGT>
 80123cc:	4603      	mov	r3, r0
 80123ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80123d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d001      	beq.n	80123da <rfalNfcPollTechDetetection+0x2ee>
 80123d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123d8:	e00f      	b.n	80123fa <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 80123da:	2000      	movs	r0, #0
 80123dc:	f008 f9a0 	bl	801a720 <rfalSt25tbPollerCheckPresence>
 80123e0:	4603      	mov	r3, r0
 80123e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 80123e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d106      	bne.n	80123f8 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 80123ea:	4b06      	ldr	r3, [pc, #24]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 80123ec:	885b      	ldrh	r3, [r3, #2]
 80123ee:	f043 0320 	orr.w	r3, r3, #32
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	4b03      	ldr	r3, [pc, #12]	; (8012404 <rfalNfcPollTechDetetection+0x318>)
 80123f6:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3728      	adds	r7, #40	; 0x28
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	20003314 	.word	0x20003314

08012408 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 8012408:	b5b0      	push	{r4, r5, r7, lr}
 801240a:	b09e      	sub	sp, #120	; 0x78
 801240c:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 801240e:	2300      	movs	r3, #0
 8012410:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 8012420:	4bb5      	ldr	r3, [pc, #724]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012422:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8012426:	4bb4      	ldr	r3, [pc, #720]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012428:	7c9b      	ldrb	r3, [r3, #18]
 801242a:	429a      	cmp	r2, r3
 801242c:	d301      	bcc.n	8012432 <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 801242e:	2300      	movs	r3, #0
 8012430:	e2b1      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 8012432:	4bb1      	ldr	r3, [pc, #708]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012434:	885b      	ldrh	r3, [r3, #2]
 8012436:	f003 0301 	and.w	r3, r3, #1
 801243a:	2b00      	cmp	r3, #0
 801243c:	f000 8084 	beq.w	8012548 <rfalNfcPollCollResolution+0x140>
 8012440:	4bad      	ldr	r3, [pc, #692]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012442:	889b      	ldrh	r3, [r3, #4]
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	d07d      	beq.n	8012548 <rfalNfcPollCollResolution+0x140>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 801244c:	4baa      	ldr	r3, [pc, #680]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801244e:	889b      	ldrh	r3, [r3, #4]
 8012450:	f023 0301 	bic.w	r3, r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	4ba8      	ldr	r3, [pc, #672]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012458:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 801245a:	f003 f95f 	bl	801571c <rfalNfcaPollerInitialize>
 801245e:	4603      	mov	r3, r0
 8012460:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012464:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012468:	2b00      	cmp	r3, #0
 801246a:	d002      	beq.n	8012472 <rfalNfcPollCollResolution+0x6a>
 801246c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012470:	e291      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8012472:	f005 fe81 	bl	8018178 <rfalFieldOnAndStartGT>
 8012476:	4603      	mov	r3, r0
 8012478:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801247c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012480:	2b00      	cmp	r3, #0
 8012482:	d002      	beq.n	801248a <rfalNfcPollCollResolution+0x82>
 8012484:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012488:	e285      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 801248a:	4b9b      	ldr	r3, [pc, #620]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801248c:	7b18      	ldrb	r0, [r3, #12]
 801248e:	4b9a      	ldr	r3, [pc, #616]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012490:	7c9a      	ldrb	r2, [r3, #18]
 8012492:	4b99      	ldr	r3, [pc, #612]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012494:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	b2d9      	uxtb	r1, r3
 801249c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80124a0:	1d3a      	adds	r2, r7, #4
 80124a2:	f003 fb76 	bl	8015b92 <rfalNfcaPollerFullCollisionResolution>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80124ac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d147      	bne.n	8012544 <rfalNfcPollCollResolution+0x13c>
 80124b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d043      	beq.n	8012544 <rfalNfcPollCollResolution+0x13c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80124bc:	2300      	movs	r3, #0
 80124be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80124c2:	e039      	b.n	8012538 <rfalNfcPollCollResolution+0x130>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 80124c4:	4b8c      	ldr	r3, [pc, #560]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80124c6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80124ca:	4619      	mov	r1, r3
 80124cc:	4a8a      	ldr	r2, [pc, #552]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80124ce:	460b      	mov	r3, r1
 80124d0:	011b      	lsls	r3, r3, #4
 80124d2:	1a5b      	subs	r3, r3, r1
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	4413      	add	r3, r2
 80124d8:	3390      	adds	r3, #144	; 0x90
 80124da:	2200      	movs	r2, #0
 80124dc:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 80124de:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80124e2:	4b85      	ldr	r3, [pc, #532]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80124e4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80124e8:	4618      	mov	r0, r3
 80124ea:	4983      	ldr	r1, [pc, #524]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80124ec:	4603      	mov	r3, r0
 80124ee:	011b      	lsls	r3, r3, #4
 80124f0:	1a1b      	subs	r3, r3, r0
 80124f2:	00db      	lsls	r3, r3, #3
 80124f4:	440b      	add	r3, r1
 80124f6:	3390      	adds	r3, #144	; 0x90
 80124f8:	2116      	movs	r1, #22
 80124fa:	fb01 f202 	mul.w	r2, r1, r2
 80124fe:	3278      	adds	r2, #120	; 0x78
 8012500:	443a      	add	r2, r7
 8012502:	3a74      	subs	r2, #116	; 0x74
 8012504:	3301      	adds	r3, #1
 8012506:	6811      	ldr	r1, [r2, #0]
 8012508:	6855      	ldr	r5, [r2, #4]
 801250a:	6894      	ldr	r4, [r2, #8]
 801250c:	68d0      	ldr	r0, [r2, #12]
 801250e:	6019      	str	r1, [r3, #0]
 8012510:	605d      	str	r5, [r3, #4]
 8012512:	609c      	str	r4, [r3, #8]
 8012514:	60d8      	str	r0, [r3, #12]
 8012516:	6911      	ldr	r1, [r2, #16]
 8012518:	6119      	str	r1, [r3, #16]
 801251a:	8a92      	ldrh	r2, [r2, #20]
 801251c:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 801251e:	4b76      	ldr	r3, [pc, #472]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012520:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012524:	3301      	adds	r3, #1
 8012526:	b2da      	uxtb	r2, r3
 8012528:	4b73      	ldr	r3, [pc, #460]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801252a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 801252e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012532:	3301      	adds	r3, #1
 8012534:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012538:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801253c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012540:	429a      	cmp	r2, r3
 8012542:	d3bf      	bcc.n	80124c4 <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 8012544:	2302      	movs	r3, #2
 8012546:	e226      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 8012548:	4b6b      	ldr	r3, [pc, #428]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801254a:	885b      	ldrh	r3, [r3, #2]
 801254c:	f003 0302 	and.w	r3, r3, #2
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 8084 	beq.w	801265e <rfalNfcPollCollResolution+0x256>
 8012556:	4b68      	ldr	r3, [pc, #416]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012558:	889b      	ldrh	r3, [r3, #4]
 801255a:	f003 0302 	and.w	r3, r3, #2
 801255e:	2b00      	cmp	r3, #0
 8012560:	d07d      	beq.n	801265e <rfalNfcPollCollResolution+0x256>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8012562:	4b65      	ldr	r3, [pc, #404]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012564:	889b      	ldrh	r3, [r3, #4]
 8012566:	f023 0302 	bic.w	r3, r3, #2
 801256a:	b29a      	uxth	r2, r3
 801256c:	4b62      	ldr	r3, [pc, #392]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801256e:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 8012570:	f003 fcf0 	bl	8015f54 <rfalNfcbPollerInitialize>
 8012574:	4603      	mov	r3, r0
 8012576:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801257a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801257e:	2b00      	cmp	r3, #0
 8012580:	d002      	beq.n	8012588 <rfalNfcPollCollResolution+0x180>
 8012582:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012586:	e206      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8012588:	f005 fdf6 	bl	8018178 <rfalFieldOnAndStartGT>
 801258c:	4603      	mov	r3, r0
 801258e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012592:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012596:	2b00      	cmp	r3, #0
 8012598:	d002      	beq.n	80125a0 <rfalNfcPollCollResolution+0x198>
 801259a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801259e:	e1fa      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 80125a0:	4b55      	ldr	r3, [pc, #340]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125a2:	7b18      	ldrb	r0, [r3, #12]
 80125a4:	4b54      	ldr	r3, [pc, #336]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125a6:	7c9a      	ldrb	r2, [r3, #18]
 80125a8:	4b53      	ldr	r3, [pc, #332]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125aa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	b2d9      	uxtb	r1, r3
 80125b2:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80125b6:	1d3a      	adds	r2, r7, #4
 80125b8:	f003 fdf0 	bl	801619c <rfalNfcbPollerCollisionResolution>
 80125bc:	4603      	mov	r3, r0
 80125be:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80125c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d147      	bne.n	801265a <rfalNfcPollCollResolution+0x252>
 80125ca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d043      	beq.n	801265a <rfalNfcPollCollResolution+0x252>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 80125d2:	2300      	movs	r3, #0
 80125d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80125d8:	e039      	b.n	801264e <rfalNfcPollCollResolution+0x246>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 80125da:	4b47      	ldr	r3, [pc, #284]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125dc:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80125e0:	4619      	mov	r1, r3
 80125e2:	4a45      	ldr	r2, [pc, #276]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125e4:	460b      	mov	r3, r1
 80125e6:	011b      	lsls	r3, r3, #4
 80125e8:	1a5b      	subs	r3, r3, r1
 80125ea:	00db      	lsls	r3, r3, #3
 80125ec:	4413      	add	r3, r2
 80125ee:	3390      	adds	r3, #144	; 0x90
 80125f0:	2201      	movs	r2, #1
 80125f2:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 80125f4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80125f8:	4b3f      	ldr	r3, [pc, #252]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80125fa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80125fe:	4618      	mov	r0, r3
 8012600:	493d      	ldr	r1, [pc, #244]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012602:	4603      	mov	r3, r0
 8012604:	011b      	lsls	r3, r3, #4
 8012606:	1a1b      	subs	r3, r3, r0
 8012608:	00db      	lsls	r3, r3, #3
 801260a:	440b      	add	r3, r1
 801260c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8012610:	4613      	mov	r3, r2
 8012612:	011b      	lsls	r3, r3, #4
 8012614:	1a9b      	subs	r3, r3, r2
 8012616:	3378      	adds	r3, #120	; 0x78
 8012618:	443b      	add	r3, r7
 801261a:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 801261e:	1c4b      	adds	r3, r1, #1
 8012620:	6814      	ldr	r4, [r2, #0]
 8012622:	6850      	ldr	r0, [r2, #4]
 8012624:	6891      	ldr	r1, [r2, #8]
 8012626:	601c      	str	r4, [r3, #0]
 8012628:	6058      	str	r0, [r3, #4]
 801262a:	6099      	str	r1, [r3, #8]
 801262c:	8991      	ldrh	r1, [r2, #12]
 801262e:	7b92      	ldrb	r2, [r2, #14]
 8012630:	8199      	strh	r1, [r3, #12]
 8012632:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 8012634:	4b30      	ldr	r3, [pc, #192]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012636:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801263a:	3301      	adds	r3, #1
 801263c:	b2da      	uxtb	r2, r3
 801263e:	4b2e      	ldr	r3, [pc, #184]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012640:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8012644:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012648:	3301      	adds	r3, #1
 801264a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801264e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012652:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012656:	429a      	cmp	r2, r3
 8012658:	d3bf      	bcc.n	80125da <rfalNfcPollCollResolution+0x1d2>
            }
        }
        
        return ERR_BUSY;
 801265a:	2302      	movs	r3, #2
 801265c:	e19b      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 801265e:	4b26      	ldr	r3, [pc, #152]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012660:	885b      	ldrh	r3, [r3, #2]
 8012662:	f003 0304 	and.w	r3, r3, #4
 8012666:	2b00      	cmp	r3, #0
 8012668:	f000 808e 	beq.w	8012788 <rfalNfcPollCollResolution+0x380>
 801266c:	4b22      	ldr	r3, [pc, #136]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801266e:	889b      	ldrh	r3, [r3, #4]
 8012670:	f003 0304 	and.w	r3, r3, #4
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 8087 	beq.w	8012788 <rfalNfcPollCollResolution+0x380>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 801267a:	4b1f      	ldr	r3, [pc, #124]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801267c:	889b      	ldrh	r3, [r3, #4]
 801267e:	f023 0304 	bic.w	r3, r3, #4
 8012682:	b29a      	uxth	r2, r3
 8012684:	4b1c      	ldr	r3, [pc, #112]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 8012686:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8012688:	4b1b      	ldr	r3, [pc, #108]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 801268a:	7cdb      	ldrb	r3, [r3, #19]
 801268c:	4618      	mov	r0, r3
 801268e:	f004 f835 	bl	80166fc <rfalNfcfPollerInitialize>
 8012692:	4603      	mov	r3, r0
 8012694:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012698:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <rfalNfcPollCollResolution+0x29e>
 80126a0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80126a4:	e177      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80126a6:	f005 fd67 	bl	8018178 <rfalFieldOnAndStartGT>
 80126aa:	4603      	mov	r3, r0
 80126ac:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80126b0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <rfalNfcPollCollResolution+0x2b6>
 80126b8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80126bc:	e16b      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 80126be:	4b0e      	ldr	r3, [pc, #56]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80126c0:	7b18      	ldrb	r0, [r3, #12]
 80126c2:	4b0d      	ldr	r3, [pc, #52]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80126c4:	7c9a      	ldrb	r2, [r3, #18]
 80126c6:	4b0c      	ldr	r3, [pc, #48]	; (80126f8 <rfalNfcPollCollResolution+0x2f0>)
 80126c8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	b2d9      	uxtb	r1, r3
 80126d0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80126d4:	1d3a      	adds	r2, r7, #4
 80126d6:	f004 f87f 	bl	80167d8 <rfalNfcfPollerCollisionResolution>
 80126da:	4603      	mov	r3, r0
 80126dc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80126e0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d14d      	bne.n	8012784 <rfalNfcPollCollResolution+0x37c>
 80126e8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d049      	beq.n	8012784 <rfalNfcPollCollResolution+0x37c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80126f0:	2300      	movs	r3, #0
 80126f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80126f6:	e03f      	b.n	8012778 <rfalNfcPollCollResolution+0x370>
 80126f8:	20003314 	.word	0x20003314
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 80126fc:	4ba8      	ldr	r3, [pc, #672]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80126fe:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012702:	4619      	mov	r1, r3
 8012704:	4aa6      	ldr	r2, [pc, #664]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012706:	460b      	mov	r3, r1
 8012708:	011b      	lsls	r3, r3, #4
 801270a:	1a5b      	subs	r3, r3, r1
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	4413      	add	r3, r2
 8012710:	3390      	adds	r3, #144	; 0x90
 8012712:	2202      	movs	r2, #2
 8012714:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8012716:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801271a:	4ba1      	ldr	r3, [pc, #644]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801271c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012720:	4618      	mov	r0, r3
 8012722:	499f      	ldr	r1, [pc, #636]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012724:	4603      	mov	r3, r0
 8012726:	011b      	lsls	r3, r3, #4
 8012728:	1a1b      	subs	r3, r3, r0
 801272a:	00db      	lsls	r3, r3, #3
 801272c:	440b      	add	r3, r1
 801272e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8012732:	4613      	mov	r3, r2
 8012734:	00db      	lsls	r3, r3, #3
 8012736:	4413      	add	r3, r2
 8012738:	005b      	lsls	r3, r3, #1
 801273a:	4413      	add	r3, r2
 801273c:	3378      	adds	r3, #120	; 0x78
 801273e:	443b      	add	r3, r7
 8012740:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8012744:	1c4b      	adds	r3, r1, #1
 8012746:	6815      	ldr	r5, [r2, #0]
 8012748:	6854      	ldr	r4, [r2, #4]
 801274a:	6890      	ldr	r0, [r2, #8]
 801274c:	68d1      	ldr	r1, [r2, #12]
 801274e:	601d      	str	r5, [r3, #0]
 8012750:	605c      	str	r4, [r3, #4]
 8012752:	6098      	str	r0, [r3, #8]
 8012754:	60d9      	str	r1, [r3, #12]
 8012756:	8a11      	ldrh	r1, [r2, #16]
 8012758:	7c92      	ldrb	r2, [r2, #18]
 801275a:	8219      	strh	r1, [r3, #16]
 801275c:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 801275e:	4b90      	ldr	r3, [pc, #576]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012760:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012764:	3301      	adds	r3, #1
 8012766:	b2da      	uxtb	r2, r3
 8012768:	4b8d      	ldr	r3, [pc, #564]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801276a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801276e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012772:	3301      	adds	r3, #1
 8012774:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012778:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801277c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012780:	429a      	cmp	r2, r3
 8012782:	d3bb      	bcc.n	80126fc <rfalNfcPollCollResolution+0x2f4>
            }
        }
        
        return ERR_BUSY;
 8012784:	2302      	movs	r3, #2
 8012786:	e106      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8012788:	4b85      	ldr	r3, [pc, #532]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801278a:	885b      	ldrh	r3, [r3, #2]
 801278c:	f003 0308 	and.w	r3, r3, #8
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 8083 	beq.w	801289c <rfalNfcPollCollResolution+0x494>
 8012796:	4b82      	ldr	r3, [pc, #520]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012798:	889b      	ldrh	r3, [r3, #4]
 801279a:	f003 0308 	and.w	r3, r3, #8
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d07c      	beq.n	801289c <rfalNfcPollCollResolution+0x494>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80127a2:	4b7f      	ldr	r3, [pc, #508]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80127a4:	889b      	ldrh	r3, [r3, #4]
 80127a6:	f023 0308 	bic.w	r3, r3, #8
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	4b7c      	ldr	r3, [pc, #496]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80127ae:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 80127b0:	f004 fb1e 	bl	8016df0 <rfalNfcvPollerInitialize>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80127ba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d002      	beq.n	80127c8 <rfalNfcPollCollResolution+0x3c0>
 80127c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80127c6:	e0e6      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80127c8:	f005 fcd6 	bl	8018178 <rfalFieldOnAndStartGT>
 80127cc:	4603      	mov	r3, r0
 80127ce:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80127d2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d002      	beq.n	80127e0 <rfalNfcPollCollResolution+0x3d8>
 80127da:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80127de:	e0da      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 80127e0:	4b6f      	ldr	r3, [pc, #444]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80127e2:	7c9a      	ldrb	r2, [r3, #18]
 80127e4:	4b6e      	ldr	r3, [pc, #440]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80127e6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	b2d9      	uxtb	r1, r3
 80127ee:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80127f2:	1d3a      	adds	r2, r7, #4
 80127f4:	2000      	movs	r0, #0
 80127f6:	f004 fba3 	bl	8016f40 <rfalNfcvPollerCollisionResolution>
 80127fa:	4603      	mov	r3, r0
 80127fc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8012800:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012804:	2b00      	cmp	r3, #0
 8012806:	d147      	bne.n	8012898 <rfalNfcPollCollResolution+0x490>
 8012808:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801280c:	2b00      	cmp	r3, #0
 801280e:	d043      	beq.n	8012898 <rfalNfcPollCollResolution+0x490>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8012810:	2300      	movs	r3, #0
 8012812:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012816:	e039      	b.n	801288c <rfalNfcPollCollResolution+0x484>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8012818:	4b61      	ldr	r3, [pc, #388]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801281a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801281e:	4619      	mov	r1, r3
 8012820:	4a5f      	ldr	r2, [pc, #380]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012822:	460b      	mov	r3, r1
 8012824:	011b      	lsls	r3, r3, #4
 8012826:	1a5b      	subs	r3, r3, r1
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	4413      	add	r3, r2
 801282c:	3390      	adds	r3, #144	; 0x90
 801282e:	2203      	movs	r2, #3
 8012830:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8012832:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012836:	4b5a      	ldr	r3, [pc, #360]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012838:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801283c:	4618      	mov	r0, r3
 801283e:	4958      	ldr	r1, [pc, #352]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012840:	4603      	mov	r3, r0
 8012842:	011b      	lsls	r3, r3, #4
 8012844:	1a1b      	subs	r3, r3, r0
 8012846:	00db      	lsls	r3, r3, #3
 8012848:	440b      	add	r3, r1
 801284a:	f103 0190 	add.w	r1, r3, #144	; 0x90
 801284e:	4613      	mov	r3, r2
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	4413      	add	r3, r2
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	4413      	add	r3, r2
 8012858:	3378      	adds	r3, #120	; 0x78
 801285a:	443b      	add	r3, r7
 801285c:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8012860:	1c4b      	adds	r3, r1, #1
 8012862:	6814      	ldr	r4, [r2, #0]
 8012864:	6850      	ldr	r0, [r2, #4]
 8012866:	6891      	ldr	r1, [r2, #8]
 8012868:	601c      	str	r4, [r3, #0]
 801286a:	6058      	str	r0, [r3, #4]
 801286c:	6099      	str	r1, [r3, #8]
 801286e:	7b12      	ldrb	r2, [r2, #12]
 8012870:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8012872:	4b4b      	ldr	r3, [pc, #300]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012874:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012878:	3301      	adds	r3, #1
 801287a:	b2da      	uxtb	r2, r3
 801287c:	4b48      	ldr	r3, [pc, #288]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801287e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8012882:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012886:	3301      	adds	r3, #1
 8012888:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801288c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012890:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012894:	429a      	cmp	r2, r3
 8012896:	d3bf      	bcc.n	8012818 <rfalNfcPollCollResolution+0x410>
            }
        }
        
        return ERR_BUSY;
 8012898:	2302      	movs	r3, #2
 801289a:	e07c      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 801289c:	4b40      	ldr	r3, [pc, #256]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801289e:	885b      	ldrh	r3, [r3, #2]
 80128a0:	f003 0320 	and.w	r3, r3, #32
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d075      	beq.n	8012994 <rfalNfcPollCollResolution+0x58c>
 80128a8:	4b3d      	ldr	r3, [pc, #244]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80128aa:	889b      	ldrh	r3, [r3, #4]
 80128ac:	f003 0320 	and.w	r3, r3, #32
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d06f      	beq.n	8012994 <rfalNfcPollCollResolution+0x58c>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80128b4:	4b3a      	ldr	r3, [pc, #232]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80128b6:	889b      	ldrh	r3, [r3, #4]
 80128b8:	f023 0320 	bic.w	r3, r3, #32
 80128bc:	b29a      	uxth	r2, r3
 80128be:	4b38      	ldr	r3, [pc, #224]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80128c0:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 80128c2:	f007 ff26 	bl	801a712 <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80128c6:	f005 fc57 	bl	8018178 <rfalFieldOnAndStartGT>
 80128ca:	4603      	mov	r3, r0
 80128cc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80128d0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <rfalNfcPollCollResolution+0x4d6>
 80128d8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80128dc:	e05b      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 80128de:	4b30      	ldr	r3, [pc, #192]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80128e0:	7c9a      	ldrb	r2, [r3, #18]
 80128e2:	4b2f      	ldr	r3, [pc, #188]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 80128e4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	f107 0273 	add.w	r2, r7, #115	; 0x73
 80128f0:	1d39      	adds	r1, r7, #4
 80128f2:	4618      	mov	r0, r3
 80128f4:	f008 f80a 	bl	801a90c <rfalSt25tbPollerCollisionResolution>
 80128f8:	4603      	mov	r3, r0
 80128fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80128fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012902:	2b00      	cmp	r3, #0
 8012904:	d144      	bne.n	8012990 <rfalNfcPollCollResolution+0x588>
 8012906:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801290a:	2b00      	cmp	r3, #0
 801290c:	d040      	beq.n	8012990 <rfalNfcPollCollResolution+0x588>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801290e:	2300      	movs	r3, #0
 8012910:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012914:	e036      	b.n	8012984 <rfalNfcPollCollResolution+0x57c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8012916:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012918:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801291c:	4619      	mov	r1, r3
 801291e:	4a20      	ldr	r2, [pc, #128]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012920:	460b      	mov	r3, r1
 8012922:	011b      	lsls	r3, r3, #4
 8012924:	1a5b      	subs	r3, r3, r1
 8012926:	00db      	lsls	r3, r3, #3
 8012928:	4413      	add	r3, r2
 801292a:	3390      	adds	r3, #144	; 0x90
 801292c:	2204      	movs	r2, #4
 801292e:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8012930:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8012934:	4b1a      	ldr	r3, [pc, #104]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012936:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801293a:	4618      	mov	r0, r3
 801293c:	4918      	ldr	r1, [pc, #96]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801293e:	4603      	mov	r3, r0
 8012940:	011b      	lsls	r3, r3, #4
 8012942:	1a1b      	subs	r3, r3, r0
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	440b      	add	r3, r1
 8012948:	f103 0190 	add.w	r1, r3, #144	; 0x90
 801294c:	4613      	mov	r3, r2
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	4413      	add	r3, r2
 8012952:	005b      	lsls	r3, r3, #1
 8012954:	3378      	adds	r3, #120	; 0x78
 8012956:	443b      	add	r3, r7
 8012958:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 801295c:	1c4b      	adds	r3, r1, #1
 801295e:	6810      	ldr	r0, [r2, #0]
 8012960:	6851      	ldr	r1, [r2, #4]
 8012962:	6018      	str	r0, [r3, #0]
 8012964:	6059      	str	r1, [r3, #4]
 8012966:	8912      	ldrh	r2, [r2, #8]
 8012968:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 801296a:	4b0d      	ldr	r3, [pc, #52]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 801296c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8012970:	3301      	adds	r3, #1
 8012972:	b2da      	uxtb	r2, r3
 8012974:	4b0a      	ldr	r3, [pc, #40]	; (80129a0 <rfalNfcPollCollResolution+0x598>)
 8012976:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801297a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801297e:	3301      	adds	r3, #1
 8012980:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012984:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012988:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801298c:	429a      	cmp	r2, r3
 801298e:	d3c2      	bcc.n	8012916 <rfalNfcPollCollResolution+0x50e>
            }
        }
        
        return ERR_BUSY;
 8012990:	2302      	movs	r3, #2
 8012992:	e000      	b.n	8012996 <rfalNfcPollCollResolution+0x58e>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	3778      	adds	r7, #120	; 0x78
 801299a:	46bd      	mov	sp, r7
 801299c:	bdb0      	pop	{r4, r5, r7, pc}
 801299e:	bf00      	nop
 80129a0:	20003314 	.word	0x20003314

080129a4 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b08e      	sub	sp, #56	; 0x38
 80129a8:	af04      	add	r7, sp, #16
 80129aa:	4603      	mov	r3, r0
 80129ac:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 80129ae:	2300      	movs	r3, #0
 80129b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 80129b2:	4ba6      	ldr	r3, [pc, #664]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 80129b4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80129b8:	79fa      	ldrb	r2, [r7, #7]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d901      	bls.n	80129c2 <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 80129be:	2321      	movs	r3, #33	; 0x21
 80129c0:	e29c      	b.n	8012efc <rfalNfcPollActivation+0x558>
    }
    
    switch( gNfcDev.devList[devIt].type )
 80129c2:	79fa      	ldrb	r2, [r7, #7]
 80129c4:	49a1      	ldr	r1, [pc, #644]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 80129c6:	4613      	mov	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	00db      	lsls	r3, r3, #3
 80129ce:	440b      	add	r3, r1
 80129d0:	3390      	adds	r3, #144	; 0x90
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b05      	cmp	r3, #5
 80129d6:	f200 8284 	bhi.w	8012ee2 <rfalNfcPollActivation+0x53e>
 80129da:	a201      	add	r2, pc, #4	; (adr r2, 80129e0 <rfalNfcPollActivation+0x3c>)
 80129dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e0:	08012a33 	.word	0x08012a33
 80129e4:	08012c51 	.word	0x08012c51
 80129e8:	08012d45 	.word	0x08012d45
 80129ec:	08012e3f 	.word	0x08012e3f
 80129f0:	08012e91 	.word	0x08012e91
 80129f4:	080129f9 	.word	0x080129f9
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 80129f8:	79f9      	ldrb	r1, [r7, #7]
 80129fa:	79fa      	ldrb	r2, [r7, #7]
 80129fc:	460b      	mov	r3, r1
 80129fe:	011b      	lsls	r3, r3, #4
 8012a00:	1a5b      	subs	r3, r3, r1
 8012a02:	00db      	lsls	r3, r3, #3
 8012a04:	33b0      	adds	r3, #176	; 0xb0
 8012a06:	4991      	ldr	r1, [pc, #580]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a08:	440b      	add	r3, r1
 8012a0a:	1c99      	adds	r1, r3, #2
 8012a0c:	488f      	ldr	r0, [pc, #572]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a0e:	4613      	mov	r3, r2
 8012a10:	011b      	lsls	r3, r3, #4
 8012a12:	1a9b      	subs	r3, r3, r2
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	4403      	add	r3, r0
 8012a18:	33a8      	adds	r3, #168	; 0xa8
 8012a1a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8012a1c:	79fa      	ldrb	r2, [r7, #7]
 8012a1e:	498b      	ldr	r1, [pc, #556]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a20:	4613      	mov	r3, r2
 8012a22:	011b      	lsls	r3, r3, #4
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	00db      	lsls	r3, r3, #3
 8012a28:	440b      	add	r3, r1
 8012a2a:	33ac      	adds	r3, #172	; 0xac
 8012a2c:	220a      	movs	r2, #10
 8012a2e:	701a      	strb	r2, [r3, #0]
            break;
 8012a30:	e259      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8012a32:	f002 fe73 	bl	801571c <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 8012a36:	79fa      	ldrb	r2, [r7, #7]
 8012a38:	4984      	ldr	r1, [pc, #528]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	011b      	lsls	r3, r3, #4
 8012a3e:	1a9b      	subs	r3, r3, r2
 8012a40:	00db      	lsls	r3, r3, #3
 8012a42:	440b      	add	r3, r1
 8012a44:	33a6      	adds	r3, #166	; 0xa6
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d02a      	beq.n	8012aa2 <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8012a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a50:	4619      	mov	r1, r3
 8012a52:	2052      	movs	r0, #82	; 0x52
 8012a54:	f002 fe86 	bl	8015764 <rfalNfcaPollerCheckPresence>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <rfalNfcPollActivation+0xc2>
 8012a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a64:	e24a      	b.n	8012efc <rfalNfcPollActivation+0x558>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 8012a66:	79fa      	ldrb	r2, [r7, #7]
 8012a68:	4613      	mov	r3, r2
 8012a6a:	011b      	lsls	r3, r3, #4
 8012a6c:	1a9b      	subs	r3, r3, r2
 8012a6e:	00db      	lsls	r3, r3, #3
 8012a70:	3390      	adds	r3, #144	; 0x90
 8012a72:	4a76      	ldr	r2, [pc, #472]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a74:	4413      	add	r3, r2
 8012a76:	1d98      	adds	r0, r3, #6
 8012a78:	79fa      	ldrb	r2, [r7, #7]
 8012a7a:	4974      	ldr	r1, [pc, #464]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	011b      	lsls	r3, r3, #4
 8012a80:	1a9b      	subs	r3, r3, r2
 8012a82:	00db      	lsls	r3, r3, #3
 8012a84:	440b      	add	r3, r1
 8012a86:	3395      	adds	r3, #149	; 0x95
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f107 0220 	add.w	r2, r7, #32
 8012a8e:	4619      	mov	r1, r3
 8012a90:	f003 f99a 	bl	8015dc8 <rfalNfcaPollerSelect>
 8012a94:	4603      	mov	r3, r0
 8012a96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012a98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d001      	beq.n	8012aa2 <rfalNfcPollActivation+0xfe>
 8012a9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012aa0:	e22c      	b.n	8012efc <rfalNfcPollActivation+0x558>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8012aa2:	79f9      	ldrb	r1, [r7, #7]
 8012aa4:	79fa      	ldrb	r2, [r7, #7]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	011b      	lsls	r3, r3, #4
 8012aaa:	1a5b      	subs	r3, r3, r1
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	3390      	adds	r3, #144	; 0x90
 8012ab0:	4966      	ldr	r1, [pc, #408]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012ab2:	440b      	add	r3, r1
 8012ab4:	1d99      	adds	r1, r3, #6
 8012ab6:	4865      	ldr	r0, [pc, #404]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	011b      	lsls	r3, r3, #4
 8012abc:	1a9b      	subs	r3, r3, r2
 8012abe:	00db      	lsls	r3, r3, #3
 8012ac0:	4403      	add	r3, r0
 8012ac2:	33a8      	adds	r3, #168	; 0xa8
 8012ac4:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8012ac6:	79f9      	ldrb	r1, [r7, #7]
 8012ac8:	79fa      	ldrb	r2, [r7, #7]
 8012aca:	4860      	ldr	r0, [pc, #384]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012acc:	460b      	mov	r3, r1
 8012ace:	011b      	lsls	r3, r3, #4
 8012ad0:	1a5b      	subs	r3, r3, r1
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	4403      	add	r3, r0
 8012ad6:	3395      	adds	r3, #149	; 0x95
 8012ad8:	7818      	ldrb	r0, [r3, #0]
 8012ada:	495c      	ldr	r1, [pc, #368]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012adc:	4613      	mov	r3, r2
 8012ade:	011b      	lsls	r3, r3, #4
 8012ae0:	1a9b      	subs	r3, r3, r2
 8012ae2:	00db      	lsls	r3, r3, #3
 8012ae4:	440b      	add	r3, r1
 8012ae6:	33ac      	adds	r3, #172	; 0xac
 8012ae8:	4602      	mov	r2, r0
 8012aea:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8012aec:	79fa      	ldrb	r2, [r7, #7]
 8012aee:	4957      	ldr	r1, [pc, #348]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012af0:	4613      	mov	r3, r2
 8012af2:	011b      	lsls	r3, r3, #4
 8012af4:	1a9b      	subs	r3, r3, r2
 8012af6:	00db      	lsls	r3, r3, #3
 8012af8:	440b      	add	r3, r1
 8012afa:	3391      	adds	r3, #145	; 0x91
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b60      	cmp	r3, #96	; 0x60
 8012b00:	d065      	beq.n	8012bce <rfalNfcPollActivation+0x22a>
 8012b02:	2b60      	cmp	r3, #96	; 0x60
 8012b04:	f300 809e 	bgt.w	8012c44 <rfalNfcPollActivation+0x2a0>
 8012b08:	2b40      	cmp	r3, #64	; 0x40
 8012b0a:	d060      	beq.n	8012bce <rfalNfcPollActivation+0x22a>
 8012b0c:	2b40      	cmp	r3, #64	; 0x40
 8012b0e:	f300 8099 	bgt.w	8012c44 <rfalNfcPollActivation+0x2a0>
 8012b12:	2b20      	cmp	r3, #32
 8012b14:	d03a      	beq.n	8012b8c <rfalNfcPollActivation+0x1e8>
 8012b16:	2b20      	cmp	r3, #32
 8012b18:	f300 8094 	bgt.w	8012c44 <rfalNfcPollActivation+0x2a0>
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d02a      	beq.n	8012b76 <rfalNfcPollActivation+0x1d2>
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	f040 808f 	bne.w	8012c44 <rfalNfcPollActivation+0x2a0>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8012b26:	79f9      	ldrb	r1, [r7, #7]
 8012b28:	79fa      	ldrb	r2, [r7, #7]
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	011b      	lsls	r3, r3, #4
 8012b2e:	1a5b      	subs	r3, r3, r1
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	3398      	adds	r3, #152	; 0x98
 8012b34:	4945      	ldr	r1, [pc, #276]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b36:	440b      	add	r3, r1
 8012b38:	f103 010a 	add.w	r1, r3, #10
 8012b3c:	4843      	ldr	r0, [pc, #268]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b3e:	4613      	mov	r3, r2
 8012b40:	011b      	lsls	r3, r3, #4
 8012b42:	1a9b      	subs	r3, r3, r2
 8012b44:	00db      	lsls	r3, r3, #3
 8012b46:	4403      	add	r3, r0
 8012b48:	33a8      	adds	r3, #168	; 0xa8
 8012b4a:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8012b4c:	79fa      	ldrb	r2, [r7, #7]
 8012b4e:	493f      	ldr	r1, [pc, #252]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b50:	4613      	mov	r3, r2
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	1a9b      	subs	r3, r3, r2
 8012b56:	00db      	lsls	r3, r3, #3
 8012b58:	440b      	add	r3, r1
 8012b5a:	33ac      	adds	r3, #172	; 0xac
 8012b5c:	2204      	movs	r2, #4
 8012b5e:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8012b60:	79fa      	ldrb	r2, [r7, #7]
 8012b62:	493a      	ldr	r1, [pc, #232]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b64:	4613      	mov	r3, r2
 8012b66:	011b      	lsls	r3, r3, #4
 8012b68:	1a9b      	subs	r3, r3, r2
 8012b6a:	00db      	lsls	r3, r3, #3
 8012b6c:	440b      	add	r3, r1
 8012b6e:	33ad      	adds	r3, #173	; 0xad
 8012b70:	2200      	movs	r2, #0
 8012b72:	701a      	strb	r2, [r3, #0]
                    break;
 8012b74:	e068      	b.n	8012c48 <rfalNfcPollActivation+0x2a4>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8012b76:	79fa      	ldrb	r2, [r7, #7]
 8012b78:	4934      	ldr	r1, [pc, #208]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b7a:	4613      	mov	r3, r2
 8012b7c:	011b      	lsls	r3, r3, #4
 8012b7e:	1a9b      	subs	r3, r3, r2
 8012b80:	00db      	lsls	r3, r3, #3
 8012b82:	440b      	add	r3, r1
 8012b84:	33ad      	adds	r3, #173	; 0xad
 8012b86:	2200      	movs	r2, #0
 8012b88:	701a      	strb	r2, [r3, #0]
                    break;
 8012b8a:	e05d      	b.n	8012c48 <rfalNfcPollActivation+0x2a4>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8012b8c:	f7fd fc06 	bl	801039c <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8012b90:	79fa      	ldrb	r2, [r7, #7]
 8012b92:	4613      	mov	r3, r2
 8012b94:	011b      	lsls	r3, r3, #4
 8012b96:	1a9b      	subs	r3, r3, r2
 8012b98:	00db      	lsls	r3, r3, #3
 8012b9a:	33b0      	adds	r3, #176	; 0xb0
 8012b9c:	4a2b      	ldr	r2, [pc, #172]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012b9e:	4413      	add	r3, r2
 8012ba0:	2202      	movs	r2, #2
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	2008      	movs	r0, #8
 8012ba6:	f7fe f9a7 	bl	8010ef8 <rfalIsoDepPollAHandleActivation>
 8012baa:	4603      	mov	r3, r0
 8012bac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d001      	beq.n	8012bb8 <rfalNfcPollActivation+0x214>
 8012bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bb6:	e1a1      	b.n	8012efc <rfalNfcPollActivation+0x558>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8012bb8:	79fa      	ldrb	r2, [r7, #7]
 8012bba:	4924      	ldr	r1, [pc, #144]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	011b      	lsls	r3, r3, #4
 8012bc0:	1a9b      	subs	r3, r3, r2
 8012bc2:	00db      	lsls	r3, r3, #3
 8012bc4:	440b      	add	r3, r1
 8012bc6:	33ad      	adds	r3, #173	; 0xad
 8012bc8:	2201      	movs	r2, #1
 8012bca:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8012bcc:	e03c      	b.n	8012c48 <rfalNfcPollActivation+0x2a4>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8012bce:	79fa      	ldrb	r2, [r7, #7]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	011b      	lsls	r3, r3, #4
 8012bd4:	1a9b      	subs	r3, r3, r2
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	3390      	adds	r3, #144	; 0x90
 8012bda:	4a1c      	ldr	r2, [pc, #112]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012bdc:	1898      	adds	r0, r3, r2
 8012bde:	2300      	movs	r3, #0
 8012be0:	2200      	movs	r2, #0
 8012be2:	2100      	movs	r1, #0
 8012be4:	f000 fae4 	bl	80131b0 <rfalNfcNfcDepActivate>
 8012be8:	4603      	mov	r3, r0
 8012bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <rfalNfcPollActivation+0x252>
 8012bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bf4:	e182      	b.n	8012efc <rfalNfcPollActivation+0x558>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8012bf6:	79f9      	ldrb	r1, [r7, #7]
 8012bf8:	79fa      	ldrb	r2, [r7, #7]
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	011b      	lsls	r3, r3, #4
 8012bfe:	1a5b      	subs	r3, r3, r1
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	33b0      	adds	r3, #176	; 0xb0
 8012c04:	4911      	ldr	r1, [pc, #68]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012c06:	440b      	add	r3, r1
 8012c08:	1c99      	adds	r1, r3, #2
 8012c0a:	4810      	ldr	r0, [pc, #64]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012c0c:	4613      	mov	r3, r2
 8012c0e:	011b      	lsls	r3, r3, #4
 8012c10:	1a9b      	subs	r3, r3, r2
 8012c12:	00db      	lsls	r3, r3, #3
 8012c14:	4403      	add	r3, r0
 8012c16:	33a8      	adds	r3, #168	; 0xa8
 8012c18:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012c1a:	79fa      	ldrb	r2, [r7, #7]
 8012c1c:	490b      	ldr	r1, [pc, #44]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012c1e:	4613      	mov	r3, r2
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	1a9b      	subs	r3, r3, r2
 8012c24:	00db      	lsls	r3, r3, #3
 8012c26:	440b      	add	r3, r1
 8012c28:	33ac      	adds	r3, #172	; 0xac
 8012c2a:	220a      	movs	r2, #10
 8012c2c:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8012c2e:	79fa      	ldrb	r2, [r7, #7]
 8012c30:	4906      	ldr	r1, [pc, #24]	; (8012c4c <rfalNfcPollActivation+0x2a8>)
 8012c32:	4613      	mov	r3, r2
 8012c34:	011b      	lsls	r3, r3, #4
 8012c36:	1a9b      	subs	r3, r3, r2
 8012c38:	00db      	lsls	r3, r3, #3
 8012c3a:	440b      	add	r3, r1
 8012c3c:	33ad      	adds	r3, #173	; 0xad
 8012c3e:	2202      	movs	r2, #2
 8012c40:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8012c42:	e001      	b.n	8012c48 <rfalNfcPollActivation+0x2a4>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8012c44:	2321      	movs	r3, #33	; 0x21
 8012c46:	e159      	b.n	8012efc <rfalNfcPollActivation+0x558>
            }
            break;
 8012c48:	e14d      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
 8012c4a:	bf00      	nop
 8012c4c:	20003314 	.word	0x20003314
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8012c50:	f003 f980 	bl	8015f54 <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8012c54:	79fa      	ldrb	r2, [r7, #7]
 8012c56:	49ab      	ldr	r1, [pc, #684]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012c58:	4613      	mov	r3, r2
 8012c5a:	011b      	lsls	r3, r3, #4
 8012c5c:	1a9b      	subs	r3, r3, r2
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	440b      	add	r3, r1
 8012c62:	339f      	adds	r3, #159	; 0x9f
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d007      	beq.n	8012c7a <rfalNfcPollActivation+0x2d6>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8012c6a:	f107 030f 	add.w	r3, r7, #15
 8012c6e:	f107 0210 	add.w	r2, r7, #16
 8012c72:	2100      	movs	r1, #0
 8012c74:	2008      	movs	r0, #8
 8012c76:	f003 f999 	bl	8015fac <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8012c7a:	79f9      	ldrb	r1, [r7, #7]
 8012c7c:	79fa      	ldrb	r2, [r7, #7]
 8012c7e:	460b      	mov	r3, r1
 8012c80:	011b      	lsls	r3, r3, #4
 8012c82:	1a5b      	subs	r3, r3, r1
 8012c84:	00db      	lsls	r3, r3, #3
 8012c86:	3390      	adds	r3, #144	; 0x90
 8012c88:	499e      	ldr	r1, [pc, #632]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012c8a:	440b      	add	r3, r1
 8012c8c:	1cd9      	adds	r1, r3, #3
 8012c8e:	489d      	ldr	r0, [pc, #628]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012c90:	4613      	mov	r3, r2
 8012c92:	011b      	lsls	r3, r3, #4
 8012c94:	1a9b      	subs	r3, r3, r2
 8012c96:	00db      	lsls	r3, r3, #3
 8012c98:	4403      	add	r3, r0
 8012c9a:	33a8      	adds	r3, #168	; 0xa8
 8012c9c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8012c9e:	79fa      	ldrb	r2, [r7, #7]
 8012ca0:	4998      	ldr	r1, [pc, #608]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	011b      	lsls	r3, r3, #4
 8012ca6:	1a9b      	subs	r3, r3, r2
 8012ca8:	00db      	lsls	r3, r3, #3
 8012caa:	440b      	add	r3, r1
 8012cac:	33ac      	adds	r3, #172	; 0xac
 8012cae:	2204      	movs	r2, #4
 8012cb0:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8012cb2:	79fa      	ldrb	r2, [r7, #7]
 8012cb4:	4993      	ldr	r1, [pc, #588]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012cb6:	4613      	mov	r3, r2
 8012cb8:	011b      	lsls	r3, r3, #4
 8012cba:	1a9b      	subs	r3, r3, r2
 8012cbc:	00db      	lsls	r3, r3, #3
 8012cbe:	440b      	add	r3, r1
 8012cc0:	339c      	adds	r3, #156	; 0x9c
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	f003 0301 	and.w	r3, r3, #1
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d030      	beq.n	8012d2e <rfalNfcPollActivation+0x38a>
            {
                rfalIsoDepInitialize();
 8012ccc:	f7fd fb66 	bl	801039c <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8012cd0:	79fa      	ldrb	r2, [r7, #7]
 8012cd2:	4613      	mov	r3, r2
 8012cd4:	011b      	lsls	r3, r3, #4
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	00db      	lsls	r3, r3, #3
 8012cda:	3390      	adds	r3, #144	; 0x90
 8012cdc:	4a89      	ldr	r2, [pc, #548]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012cde:	4413      	add	r3, r2
 8012ce0:	1c59      	adds	r1, r3, #1
 8012ce2:	79fa      	ldrb	r2, [r7, #7]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	011b      	lsls	r3, r3, #4
 8012ce8:	1a9b      	subs	r3, r3, r2
 8012cea:	00db      	lsls	r3, r3, #3
 8012cec:	33b0      	adds	r3, #176	; 0xb0
 8012cee:	4a85      	ldr	r2, [pc, #532]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012cf0:	4413      	add	r3, r2
 8012cf2:	9303      	str	r3, [sp, #12]
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	9302      	str	r3, [sp, #8]
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	9100      	str	r1, [sp, #0]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	2202      	movs	r2, #2
 8012d02:	2100      	movs	r1, #0
 8012d04:	2008      	movs	r0, #8
 8012d06:	f7fe fa51 	bl	80111ac <rfalIsoDepPollBHandleActivation>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d001      	beq.n	8012d18 <rfalNfcPollActivation+0x374>
 8012d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d16:	e0f1      	b.n	8012efc <rfalNfcPollActivation+0x558>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8012d18:	79fa      	ldrb	r2, [r7, #7]
 8012d1a:	497a      	ldr	r1, [pc, #488]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d1c:	4613      	mov	r3, r2
 8012d1e:	011b      	lsls	r3, r3, #4
 8012d20:	1a9b      	subs	r3, r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	440b      	add	r3, r1
 8012d26:	33ad      	adds	r3, #173	; 0xad
 8012d28:	2201      	movs	r2, #1
 8012d2a:	701a      	strb	r2, [r3, #0]
                break;
 8012d2c:	e0db      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8012d2e:	79fa      	ldrb	r2, [r7, #7]
 8012d30:	4974      	ldr	r1, [pc, #464]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d32:	4613      	mov	r3, r2
 8012d34:	011b      	lsls	r3, r3, #4
 8012d36:	1a9b      	subs	r3, r3, r2
 8012d38:	00db      	lsls	r3, r3, #3
 8012d3a:	440b      	add	r3, r1
 8012d3c:	33ad      	adds	r3, #173	; 0xad
 8012d3e:	2200      	movs	r2, #0
 8012d40:	701a      	strb	r2, [r3, #0]
            break;
 8012d42:	e0d0      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8012d44:	4b6f      	ldr	r3, [pc, #444]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d46:	7cdb      	ldrb	r3, [r3, #19]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f003 fcd7 	bl	80166fc <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8012d4e:	79fa      	ldrb	r2, [r7, #7]
 8012d50:	496c      	ldr	r1, [pc, #432]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d52:	4613      	mov	r3, r2
 8012d54:	011b      	lsls	r3, r3, #4
 8012d56:	1a9b      	subs	r3, r3, r2
 8012d58:	00db      	lsls	r3, r3, #3
 8012d5a:	440b      	add	r3, r1
 8012d5c:	3393      	adds	r3, #147	; 0x93
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d145      	bne.n	8012df0 <rfalNfcPollActivation+0x44c>
 8012d64:	79fa      	ldrb	r2, [r7, #7]
 8012d66:	4967      	ldr	r1, [pc, #412]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d68:	4613      	mov	r3, r2
 8012d6a:	011b      	lsls	r3, r3, #4
 8012d6c:	1a9b      	subs	r3, r3, r2
 8012d6e:	00db      	lsls	r3, r3, #3
 8012d70:	440b      	add	r3, r1
 8012d72:	3394      	adds	r3, #148	; 0x94
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2bfe      	cmp	r3, #254	; 0xfe
 8012d78:	d13a      	bne.n	8012df0 <rfalNfcPollActivation+0x44c>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8012d7a:	79fa      	ldrb	r2, [r7, #7]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	011b      	lsls	r3, r3, #4
 8012d80:	1a9b      	subs	r3, r3, r2
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	3390      	adds	r3, #144	; 0x90
 8012d86:	4a5f      	ldr	r2, [pc, #380]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012d88:	1898      	adds	r0, r3, r2
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2100      	movs	r1, #0
 8012d90:	f000 fa0e 	bl	80131b0 <rfalNfcNfcDepActivate>
 8012d94:	4603      	mov	r3, r0
 8012d96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d001      	beq.n	8012da2 <rfalNfcPollActivation+0x3fe>
 8012d9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012da0:	e0ac      	b.n	8012efc <rfalNfcPollActivation+0x558>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8012da2:	79f9      	ldrb	r1, [r7, #7]
 8012da4:	79fa      	ldrb	r2, [r7, #7]
 8012da6:	460b      	mov	r3, r1
 8012da8:	011b      	lsls	r3, r3, #4
 8012daa:	1a5b      	subs	r3, r3, r1
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	33b0      	adds	r3, #176	; 0xb0
 8012db0:	4954      	ldr	r1, [pc, #336]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012db2:	440b      	add	r3, r1
 8012db4:	1c99      	adds	r1, r3, #2
 8012db6:	4853      	ldr	r0, [pc, #332]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012db8:	4613      	mov	r3, r2
 8012dba:	011b      	lsls	r3, r3, #4
 8012dbc:	1a9b      	subs	r3, r3, r2
 8012dbe:	00db      	lsls	r3, r3, #3
 8012dc0:	4403      	add	r3, r0
 8012dc2:	33a8      	adds	r3, #168	; 0xa8
 8012dc4:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8012dc6:	79fa      	ldrb	r2, [r7, #7]
 8012dc8:	494e      	ldr	r1, [pc, #312]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012dca:	4613      	mov	r3, r2
 8012dcc:	011b      	lsls	r3, r3, #4
 8012dce:	1a9b      	subs	r3, r3, r2
 8012dd0:	00db      	lsls	r3, r3, #3
 8012dd2:	440b      	add	r3, r1
 8012dd4:	33ac      	adds	r3, #172	; 0xac
 8012dd6:	220a      	movs	r2, #10
 8012dd8:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8012dda:	79fa      	ldrb	r2, [r7, #7]
 8012ddc:	4949      	ldr	r1, [pc, #292]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012dde:	4613      	mov	r3, r2
 8012de0:	011b      	lsls	r3, r3, #4
 8012de2:	1a9b      	subs	r3, r3, r2
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	33ad      	adds	r3, #173	; 0xad
 8012dea:	2202      	movs	r2, #2
 8012dec:	701a      	strb	r2, [r3, #0]
                break;
 8012dee:	e07a      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8012df0:	79f9      	ldrb	r1, [r7, #7]
 8012df2:	79fa      	ldrb	r2, [r7, #7]
 8012df4:	460b      	mov	r3, r1
 8012df6:	011b      	lsls	r3, r3, #4
 8012df8:	1a5b      	subs	r3, r3, r1
 8012dfa:	00db      	lsls	r3, r3, #3
 8012dfc:	3390      	adds	r3, #144	; 0x90
 8012dfe:	4941      	ldr	r1, [pc, #260]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e00:	440b      	add	r3, r1
 8012e02:	1cd9      	adds	r1, r3, #3
 8012e04:	483f      	ldr	r0, [pc, #252]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e06:	4613      	mov	r3, r2
 8012e08:	011b      	lsls	r3, r3, #4
 8012e0a:	1a9b      	subs	r3, r3, r2
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	4403      	add	r3, r0
 8012e10:	33a8      	adds	r3, #168	; 0xa8
 8012e12:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8012e14:	79fa      	ldrb	r2, [r7, #7]
 8012e16:	493b      	ldr	r1, [pc, #236]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e18:	4613      	mov	r3, r2
 8012e1a:	011b      	lsls	r3, r3, #4
 8012e1c:	1a9b      	subs	r3, r3, r2
 8012e1e:	00db      	lsls	r3, r3, #3
 8012e20:	440b      	add	r3, r1
 8012e22:	33ac      	adds	r3, #172	; 0xac
 8012e24:	2208      	movs	r2, #8
 8012e26:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8012e28:	79fa      	ldrb	r2, [r7, #7]
 8012e2a:	4936      	ldr	r1, [pc, #216]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	011b      	lsls	r3, r3, #4
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	440b      	add	r3, r1
 8012e36:	33ad      	adds	r3, #173	; 0xad
 8012e38:	2200      	movs	r2, #0
 8012e3a:	701a      	strb	r2, [r3, #0]
            break;
 8012e3c:	e053      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8012e3e:	f003 ffd7 	bl	8016df0 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8012e42:	79f9      	ldrb	r1, [r7, #7]
 8012e44:	79fa      	ldrb	r2, [r7, #7]
 8012e46:	460b      	mov	r3, r1
 8012e48:	011b      	lsls	r3, r3, #4
 8012e4a:	1a5b      	subs	r3, r3, r1
 8012e4c:	00db      	lsls	r3, r3, #3
 8012e4e:	3390      	adds	r3, #144	; 0x90
 8012e50:	492c      	ldr	r1, [pc, #176]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e52:	440b      	add	r3, r1
 8012e54:	1cd9      	adds	r1, r3, #3
 8012e56:	482b      	ldr	r0, [pc, #172]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e58:	4613      	mov	r3, r2
 8012e5a:	011b      	lsls	r3, r3, #4
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	00db      	lsls	r3, r3, #3
 8012e60:	4403      	add	r3, r0
 8012e62:	33a8      	adds	r3, #168	; 0xa8
 8012e64:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8012e66:	79fa      	ldrb	r2, [r7, #7]
 8012e68:	4926      	ldr	r1, [pc, #152]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	011b      	lsls	r3, r3, #4
 8012e6e:	1a9b      	subs	r3, r3, r2
 8012e70:	00db      	lsls	r3, r3, #3
 8012e72:	440b      	add	r3, r1
 8012e74:	33ac      	adds	r3, #172	; 0xac
 8012e76:	2208      	movs	r2, #8
 8012e78:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8012e7a:	79fa      	ldrb	r2, [r7, #7]
 8012e7c:	4921      	ldr	r1, [pc, #132]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012e7e:	4613      	mov	r3, r2
 8012e80:	011b      	lsls	r3, r3, #4
 8012e82:	1a9b      	subs	r3, r3, r2
 8012e84:	00db      	lsls	r3, r3, #3
 8012e86:	440b      	add	r3, r1
 8012e88:	33ad      	adds	r3, #173	; 0xad
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	701a      	strb	r2, [r3, #0]
            break;
 8012e8e:	e02a      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8012e90:	f007 fc3f 	bl	801a712 <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8012e94:	79f9      	ldrb	r1, [r7, #7]
 8012e96:	79fa      	ldrb	r2, [r7, #7]
 8012e98:	460b      	mov	r3, r1
 8012e9a:	011b      	lsls	r3, r3, #4
 8012e9c:	1a5b      	subs	r3, r3, r1
 8012e9e:	00db      	lsls	r3, r3, #3
 8012ea0:	3390      	adds	r3, #144	; 0x90
 8012ea2:	4918      	ldr	r1, [pc, #96]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ea4:	440b      	add	r3, r1
 8012ea6:	1c99      	adds	r1, r3, #2
 8012ea8:	4816      	ldr	r0, [pc, #88]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012eaa:	4613      	mov	r3, r2
 8012eac:	011b      	lsls	r3, r3, #4
 8012eae:	1a9b      	subs	r3, r3, r2
 8012eb0:	00db      	lsls	r3, r3, #3
 8012eb2:	4403      	add	r3, r0
 8012eb4:	33a8      	adds	r3, #168	; 0xa8
 8012eb6:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 8012eb8:	79fa      	ldrb	r2, [r7, #7]
 8012eba:	4912      	ldr	r1, [pc, #72]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	1a9b      	subs	r3, r3, r2
 8012ec2:	00db      	lsls	r3, r3, #3
 8012ec4:	440b      	add	r3, r1
 8012ec6:	33ac      	adds	r3, #172	; 0xac
 8012ec8:	2208      	movs	r2, #8
 8012eca:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8012ecc:	79fa      	ldrb	r2, [r7, #7]
 8012ece:	490d      	ldr	r1, [pc, #52]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	011b      	lsls	r3, r3, #4
 8012ed4:	1a9b      	subs	r3, r3, r2
 8012ed6:	00db      	lsls	r3, r3, #3
 8012ed8:	440b      	add	r3, r1
 8012eda:	33ad      	adds	r3, #173	; 0xad
 8012edc:	2200      	movs	r2, #0
 8012ede:	701a      	strb	r2, [r3, #0]
            break;
 8012ee0:	e001      	b.n	8012ee6 <rfalNfcPollActivation+0x542>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8012ee2:	2321      	movs	r3, #33	; 0x21
 8012ee4:	e00a      	b.n	8012efc <rfalNfcPollActivation+0x558>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8012ee6:	79fa      	ldrb	r2, [r7, #7]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	011b      	lsls	r3, r3, #4
 8012eec:	1a9b      	subs	r3, r3, r2
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	3390      	adds	r3, #144	; 0x90
 8012ef2:	4a04      	ldr	r2, [pc, #16]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ef4:	4413      	add	r3, r2
 8012ef6:	4a03      	ldr	r2, [pc, #12]	; (8012f04 <rfalNfcPollActivation+0x560>)
 8012ef8:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8012efa:	2300      	movs	r3, #0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3728      	adds	r7, #40	; 0x28
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	20003314 	.word	0x20003314

08012f08 <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8012f0e:	1c7a      	adds	r2, r7, #1
 8012f10:	1cbb      	adds	r3, r7, #2
 8012f12:	4611      	mov	r1, r2
 8012f14:	4618      	mov	r0, r3
 8012f16:	f007 f819 	bl	8019f4c <rfalListenGetState>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	71fb      	strb	r3, [r7, #7]
    switch(lmSt)
 8012f1e:	79fb      	ldrb	r3, [r7, #7]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	2b0f      	cmp	r3, #15
 8012f24:	f200 8136 	bhi.w	8013194 <rfalNfcListenActivation+0x28c>
 8012f28:	a201      	add	r2, pc, #4	; (adr r2, 8012f30 <rfalNfcListenActivation+0x28>)
 8012f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f2e:	bf00      	nop
 8012f30:	08013191 	.word	0x08013191
 8012f34:	080130f5 	.word	0x080130f5
 8012f38:	0801318d 	.word	0x0801318d
 8012f3c:	08013195 	.word	0x08013195
 8012f40:	08013029 	.word	0x08013029
 8012f44:	08012f71 	.word	0x08012f71
 8012f48:	08013195 	.word	0x08013195
 8012f4c:	08013195 	.word	0x08013195
 8012f50:	080130af 	.word	0x080130af
 8012f54:	080130d3 	.word	0x080130d3
 8012f58:	080130d3 	.word	0x080130d3
 8012f5c:	0801318d 	.word	0x0801318d
 8012f60:	08013195 	.word	0x08013195
 8012f64:	0801318d 	.word	0x0801318d
 8012f68:	08012f71 	.word	0x08012f71
 8012f6c:	0801318d 	.word	0x0801318d
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8012f70:	78bb      	ldrb	r3, [r7, #2]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d056      	beq.n	8013024 <rfalNfcListenActivation+0x11c>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 8012f76:	2302      	movs	r3, #2
 8012f78:	70fb      	strb	r3, [r7, #3]
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 8012f7a:	4b89      	ldr	r3, [pc, #548]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012f7c:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8012f80:	3307      	adds	r3, #7
 8012f82:	08db      	lsrs	r3, r3, #3
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	4619      	mov	r1, r3
 8012f88:	4886      	ldr	r0, [pc, #536]	; (80131a4 <rfalNfcListenActivation+0x29c>)
 8012f8a:	f002 ffa8 	bl	8015ede <rfalNfcaListenerIsSleepReq>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00c      	beq.n	8012fae <rfalNfcListenActivation+0xa6>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8012f94:	4b84      	ldr	r3, [pc, #528]	; (80131a8 <rfalNfcListenActivation+0x2a0>)
 8012f96:	22ff      	movs	r2, #255	; 0xff
 8012f98:	4982      	ldr	r1, [pc, #520]	; (80131a4 <rfalNfcListenActivation+0x29c>)
 8012f9a:	200c      	movs	r0, #12
 8012f9c:	f006 ffc6 	bl	8019f2c <rfalListenSleepStart>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	80bb      	strh	r3, [r7, #4]
 8012fa4:	88bb      	ldrh	r3, [r7, #4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d03c      	beq.n	8013024 <rfalNfcListenActivation+0x11c>
 8012faa:	88bb      	ldrh	r3, [r7, #4]
 8012fac:	e0f4      	b.n	8013198 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8012fae:	78fb      	ldrb	r3, [r7, #3]
 8012fb0:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8012fb4:	4a7a      	ldr	r2, [pc, #488]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012fb6:	4413      	add	r3, r2
 8012fb8:	1cd8      	adds	r0, r3, #3
 8012fba:	4b79      	ldr	r3, [pc, #484]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012fbc:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8012fc0:	3307      	adds	r3, #7
 8012fc2:	08db      	lsrs	r3, r3, #3
 8012fc4:	b29a      	uxth	r2, r3
 8012fc6:	78fb      	ldrb	r3, [r7, #3]
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	4a74      	ldr	r2, [pc, #464]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012fd0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	f001 fd6d 	bl	8014ab4 <rfalNfcDepIsAtrReq>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d01f      	beq.n	8013020 <rfalNfcListenActivation+0x118>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 8012fe0:	4b6f      	ldr	r3, [pc, #444]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012fe2:	220a      	movs	r2, #10
 8012fe4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8012fe8:	78fb      	ldrb	r3, [r7, #3]
 8012fea:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8012fee:	4a6c      	ldr	r2, [pc, #432]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012ff0:	4413      	add	r3, r2
 8012ff2:	1cd9      	adds	r1, r3, #3
 8012ff4:	4b6a      	ldr	r3, [pc, #424]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8012ff6:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8012ffa:	3307      	adds	r3, #7
 8012ffc:	08db      	lsrs	r3, r3, #3
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	78fb      	ldrb	r3, [r7, #3]
 8013002:	b29b      	uxth	r3, r3
 8013004:	1ad3      	subs	r3, r2, r3
 8013006:	b29b      	uxth	r3, r3
 8013008:	460a      	mov	r2, r1
 801300a:	2100      	movs	r1, #0
 801300c:	4867      	ldr	r0, [pc, #412]	; (80131ac <rfalNfcListenActivation+0x2a4>)
 801300e:	f000 f8cf 	bl	80131b0 <rfalNfcNfcDepActivate>
 8013012:	4603      	mov	r3, r0
 8013014:	80bb      	strh	r3, [r7, #4]
 8013016:	88bb      	ldrh	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <rfalNfcListenActivation+0x11c>
 801301c:	88bb      	ldrh	r3, [r7, #4]
 801301e:	e0bb      	b.n	8013198 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 8013020:	230b      	movs	r3, #11
 8013022:	e0b9      	b.n	8013198 <rfalNfcListenActivation+0x290>
                }
            }
            return ERR_BUSY;
 8013024:	2302      	movs	r3, #2
 8013026:	e0b7      	b.n	8013198 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 8013028:	78bb      	ldrb	r3, [r7, #2]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d03d      	beq.n	80130aa <rfalNfcListenActivation+0x1a2>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 801302e:	2301      	movs	r3, #1
 8013030:	70fb      	strb	r3, [r7, #3]
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8013032:	78fb      	ldrb	r3, [r7, #3]
 8013034:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8013038:	4a59      	ldr	r2, [pc, #356]	; (80131a0 <rfalNfcListenActivation+0x298>)
 801303a:	4413      	add	r3, r2
 801303c:	1cd8      	adds	r0, r3, #3
 801303e:	4b58      	ldr	r3, [pc, #352]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013040:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013044:	3307      	adds	r3, #7
 8013046:	08db      	lsrs	r3, r3, #3
 8013048:	b29a      	uxth	r2, r3
 801304a:	78fb      	ldrb	r3, [r7, #3]
 801304c:	b29b      	uxth	r3, r3
 801304e:	1ad3      	subs	r3, r2, r3
 8013050:	b29b      	uxth	r3, r3
 8013052:	4a53      	ldr	r2, [pc, #332]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013054:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8013058:	4619      	mov	r1, r3
 801305a:	f001 fd2b 	bl	8014ab4 <rfalNfcDepIsAtrReq>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01f      	beq.n	80130a4 <rfalNfcListenActivation+0x19c>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 8013064:	4b4e      	ldr	r3, [pc, #312]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013066:	220c      	movs	r2, #12
 8013068:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 801306c:	78fb      	ldrb	r3, [r7, #3]
 801306e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8013072:	4a4b      	ldr	r2, [pc, #300]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013074:	4413      	add	r3, r2
 8013076:	1cd9      	adds	r1, r3, #3
 8013078:	4b49      	ldr	r3, [pc, #292]	; (80131a0 <rfalNfcListenActivation+0x298>)
 801307a:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801307e:	3307      	adds	r3, #7
 8013080:	08db      	lsrs	r3, r3, #3
 8013082:	b29a      	uxth	r2, r3
 8013084:	78fb      	ldrb	r3, [r7, #3]
 8013086:	b29b      	uxth	r3, r3
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	b29b      	uxth	r3, r3
 801308c:	460a      	mov	r2, r1
 801308e:	2100      	movs	r1, #0
 8013090:	4846      	ldr	r0, [pc, #280]	; (80131ac <rfalNfcListenActivation+0x2a4>)
 8013092:	f000 f88d 	bl	80131b0 <rfalNfcNfcDepActivate>
 8013096:	4603      	mov	r3, r0
 8013098:	80bb      	strh	r3, [r7, #4]
 801309a:	88bb      	ldrh	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d004      	beq.n	80130aa <rfalNfcListenActivation+0x1a2>
 80130a0:	88bb      	ldrh	r3, [r7, #4]
 80130a2:	e079      	b.n	8013198 <rfalNfcListenActivation+0x290>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 80130a4:	2009      	movs	r0, #9
 80130a6:	f006 ff71 	bl	8019f8c <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 80130aa:	2302      	movs	r3, #2
 80130ac:	e074      	b.n	8013198 <rfalNfcListenActivation+0x290>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 80130ae:	4b3c      	ldr	r3, [pc, #240]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130b0:	220c      	movs	r2, #12
 80130b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 80130b6:	4b3a      	ldr	r3, [pc, #232]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devList->nfcid       = NULL;
 80130be:	4b38      	ldr	r3, [pc, #224]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130c0:	2200      	movs	r2, #0
 80130c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 80130c6:	4b36      	ldr	r3, [pc, #216]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130c8:	2200      	movs	r2, #0
 80130ca:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            
            return ERR_NONE;
 80130ce:	2300      	movs	r3, #0
 80130d0:	e062      	b.n	8013198 <rfalNfcListenActivation+0x290>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 80130d2:	f002 fa57 	bl	8015584 <rfalNfcDepListenGetActivationStatus>
 80130d6:	4603      	mov	r3, r0
 80130d8:	80bb      	strh	r3, [r7, #4]
            if( ret == ERR_NONE )
 80130da:	88bb      	ldrh	r3, [r7, #4]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d107      	bne.n	80130f0 <rfalNfcListenActivation+0x1e8>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80130e0:	4b2f      	ldr	r3, [pc, #188]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130e2:	2202      	movs	r2, #2
 80130e4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 80130e8:	4b2d      	ldr	r3, [pc, #180]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130ea:	220a      	movs	r2, #10
 80130ec:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            }
            return ret;
 80130f0:	88bb      	ldrh	r3, [r7, #4]
 80130f2:	e051      	b.n	8013198 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 80130f4:	78bb      	ldrb	r3, [r7, #2]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d046      	beq.n	8013188 <rfalNfcListenActivation+0x280>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 80130fa:	4b29      	ldr	r3, [pc, #164]	; (80131a0 <rfalNfcListenActivation+0x298>)
 80130fc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8013100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013104:	2b00      	cmp	r3, #0
 8013106:	d03f      	beq.n	8013188 <rfalNfcListenActivation+0x280>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8013108:	787b      	ldrb	r3, [r7, #1]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d101      	bne.n	8013112 <rfalNfcListenActivation+0x20a>
 801310e:	2302      	movs	r3, #2
 8013110:	e000      	b.n	8013114 <rfalNfcListenActivation+0x20c>
 8013112:	2301      	movs	r3, #1
 8013114:	70fb      	strb	r3, [r7, #3]
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8013116:	78fb      	ldrb	r3, [r7, #3]
 8013118:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801311c:	4a20      	ldr	r2, [pc, #128]	; (80131a0 <rfalNfcListenActivation+0x298>)
 801311e:	4413      	add	r3, r2
 8013120:	1cd8      	adds	r0, r3, #3
 8013122:	4b1f      	ldr	r3, [pc, #124]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013124:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8013128:	3307      	adds	r3, #7
 801312a:	08db      	lsrs	r3, r3, #3
 801312c:	b29a      	uxth	r2, r3
 801312e:	78fb      	ldrb	r3, [r7, #3]
 8013130:	b29b      	uxth	r3, r3
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	b29b      	uxth	r3, r3
 8013136:	2200      	movs	r2, #0
 8013138:	4619      	mov	r1, r3
 801313a:	f001 fcbb 	bl	8014ab4 <rfalNfcDepIsAtrReq>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d01f      	beq.n	8013184 <rfalNfcListenActivation+0x27c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8013144:	4b16      	ldr	r3, [pc, #88]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013146:	220f      	movs	r2, #15
 8013148:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 801314c:	78fb      	ldrb	r3, [r7, #3]
 801314e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8013152:	4a13      	ldr	r2, [pc, #76]	; (80131a0 <rfalNfcListenActivation+0x298>)
 8013154:	4413      	add	r3, r2
 8013156:	1cd9      	adds	r1, r3, #3
 8013158:	4b11      	ldr	r3, [pc, #68]	; (80131a0 <rfalNfcListenActivation+0x298>)
 801315a:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801315e:	3307      	adds	r3, #7
 8013160:	08db      	lsrs	r3, r3, #3
 8013162:	b29a      	uxth	r2, r3
 8013164:	78fb      	ldrb	r3, [r7, #3]
 8013166:	b29b      	uxth	r3, r3
 8013168:	1ad3      	subs	r3, r2, r3
 801316a:	b29b      	uxth	r3, r3
 801316c:	460a      	mov	r2, r1
 801316e:	2101      	movs	r1, #1
 8013170:	480e      	ldr	r0, [pc, #56]	; (80131ac <rfalNfcListenActivation+0x2a4>)
 8013172:	f000 f81d 	bl	80131b0 <rfalNfcNfcDepActivate>
 8013176:	4603      	mov	r3, r0
 8013178:	80bb      	strh	r3, [r7, #4]
 801317a:	88bb      	ldrh	r3, [r7, #4]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d003      	beq.n	8013188 <rfalNfcListenActivation+0x280>
 8013180:	88bb      	ldrh	r3, [r7, #4]
 8013182:	e009      	b.n	8013198 <rfalNfcListenActivation+0x290>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 8013184:	230b      	movs	r3, #11
 8013186:	e007      	b.n	8013198 <rfalNfcListenActivation+0x290>
                    }
                }
            }
            return ERR_BUSY;
 8013188:	2302      	movs	r3, #2
 801318a:	e005      	b.n	8013198 <rfalNfcListenActivation+0x290>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 801318c:	2302      	movs	r3, #2
 801318e:	e003      	b.n	8013198 <rfalNfcListenActivation+0x290>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 8013190:	2325      	movs	r3, #37	; 0x25
 8013192:	e001      	b.n	8013198 <rfalNfcListenActivation+0x290>
        
        default:                                                                      /* Wait for activation */
            break;
 8013194:	bf00      	nop
    }

    return ERR_INTERNAL;
 8013196:	230c      	movs	r3, #12
}
 8013198:	4618      	mov	r0, r3
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	20003314 	.word	0x20003314
 80131a4:	2000370f 	.word	0x2000370f
 80131a8:	20003812 	.word	0x20003812
 80131ac:	200033a4 	.word	0x200033a4

080131b0 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 80131b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131b2:	b0a5      	sub	sp, #148	; 0x94
 80131b4:	af04      	add	r7, sp, #16
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	461a      	mov	r2, r3
 80131bc:	460b      	mov	r3, r1
 80131be:	72fb      	strb	r3, [r7, #11]
 80131c0:	4613      	mov	r3, r2
 80131c2:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	2b05      	cmp	r3, #5
 80131ca:	d838      	bhi.n	801323e <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d106      	bne.n	80131e2 <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	3303      	adds	r3, #3
 80131d8:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 80131da:	2308      	movs	r3, #8
 80131dc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 80131e0:	e004      	b.n	80131ec <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 80131e2:	4b3e      	ldr	r3, [pc, #248]	; (80132dc <rfalNfcNfcDepActivate+0x12c>)
 80131e4:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80131e6:	230a      	movs	r3, #10
 80131e8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80131ec:	2300      	movs	r3, #0
 80131ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80131f2:	2300      	movs	r3, #0
 80131f4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 80131f8:	2300      	movs	r3, #0
 80131fa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 80131fe:	2300      	movs	r3, #0
 8013200:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8013204:	2303      	movs	r3, #3
 8013206:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 801320a:	4b35      	ldr	r3, [pc, #212]	; (80132e0 <rfalNfcNfcDepActivate+0x130>)
 801320c:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 801320e:	4b35      	ldr	r3, [pc, #212]	; (80132e4 <rfalNfcNfcDepActivate+0x134>)
 8013210:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013214:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 8013218:	7afb      	ldrb	r3, [r7, #11]
 801321a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 801321e:	230e      	movs	r3, #14
 8013220:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 8013224:	f001 fb88 	bl	8014938 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f103 0220 	add.w	r2, r3, #32
 801322e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013232:	2102      	movs	r1, #2
 8013234:	4618      	mov	r0, r3
 8013236:	f001 ff29 	bl	801508c <rfalNfcDepInitiatorHandleActivation>
 801323a:	4603      	mov	r3, r0
 801323c:	e04a      	b.n	80132d4 <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	2b09      	cmp	r3, #9
 8013244:	d945      	bls.n	80132d2 <rfalNfcNfcDepActivate+0x122>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	2b0f      	cmp	r3, #15
 801324c:	d841      	bhi.n	80132d2 <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 801324e:	4b25      	ldr	r3, [pc, #148]	; (80132e4 <rfalNfcNfcDepActivate+0x134>)
 8013250:	f107 0215 	add.w	r2, r7, #21
 8013254:	3314      	adds	r3, #20
 8013256:	cb03      	ldmia	r3!, {r0, r1}
 8013258:	6010      	str	r0, [r2, #0]
 801325a:	6051      	str	r1, [r2, #4]
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8013260:	2300      	movs	r3, #0
 8013262:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8013264:	2300      	movs	r3, #0
 8013266:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 801326a:	230e      	movs	r3, #14
 801326c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8013270:	2330      	movs	r3, #48	; 0x30
 8013272:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        targetParam.GBtLen    = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 801327c:	230e      	movs	r3, #14
 801327e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 8013282:	7afb      	ldrb	r3, [r7, #11]
 8013284:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 8013286:	4b18      	ldr	r3, [pc, #96]	; (80132e8 <rfalNfcNfcDepActivate+0x138>)
 8013288:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 801328a:	4b18      	ldr	r3, [pc, #96]	; (80132ec <rfalNfcNfcDepActivate+0x13c>)
 801328c:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 801328e:	4b18      	ldr	r3, [pc, #96]	; (80132f0 <rfalNfcNfcDepActivate+0x140>)
 8013290:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8013292:	4b18      	ldr	r3, [pc, #96]	; (80132f4 <rfalNfcNfcDepActivate+0x144>)
 8013294:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b0a      	cmp	r3, #10
 801329c:	d101      	bne.n	80132a2 <rfalNfcNfcDepActivate+0xf2>
 801329e:	230a      	movs	r3, #10
 80132a0:	e000      	b.n	80132a4 <rfalNfcNfcDepActivate+0xf4>
 80132a2:	230b      	movs	r3, #11
 80132a4:	4618      	mov	r0, r3
 80132a6:	f006 fe71 	bl	8019f8c <rfalListenSetState>
        
        rfalNfcDepInitialize();
 80132aa:	f001 fb45 	bl	8014938 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 80132ae:	893e      	ldrh	r6, [r7, #8]
 80132b0:	f107 0514 	add.w	r5, r7, #20
 80132b4:	466c      	mov	r4, sp
 80132b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80132ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80132be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80132c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80132c4:	4632      	mov	r2, r6
 80132c6:	6879      	ldr	r1, [r7, #4]
 80132c8:	4628      	mov	r0, r5
 80132ca:	f002 f849 	bl	8015360 <rfalNfcDepListenStartActivation>
 80132ce:	4603      	mov	r3, r0
 80132d0:	e000      	b.n	80132d4 <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 80132d2:	230c      	movs	r3, #12
    }
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3784      	adds	r7, #132	; 0x84
 80132d8:	46bd      	mov	sp, r7
 80132da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132dc:	20003328 	.word	0x20003328
 80132e0:	20003332 	.word	0x20003332
 80132e4:	20003314 	.word	0x20003314
 80132e8:	2000370f 	.word	0x2000370f
 80132ec:	20003812 	.word	0x20003812
 80132f0:	20003607 	.word	0x20003607
 80132f4:	200033c4 	.word	0x200033c4

080132f8 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 80132fc:	4b11      	ldr	r3, [pc, #68]	; (8013344 <rfalNfcDeactivation+0x4c>)
 80132fe:	689b      	ldr	r3, [r3, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d012      	beq.n	801332a <rfalNfcDeactivation+0x32>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8013304:	4b0f      	ldr	r3, [pc, #60]	; (8013344 <rfalNfcDeactivation+0x4c>)
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	7f5b      	ldrb	r3, [r3, #29]
 801330a:	2b02      	cmp	r3, #2
 801330c:	d008      	beq.n	8013320 <rfalNfcDeactivation+0x28>
 801330e:	2b02      	cmp	r3, #2
 8013310:	dc09      	bgt.n	8013326 <rfalNfcDeactivation+0x2e>
 8013312:	2b00      	cmp	r3, #0
 8013314:	d00b      	beq.n	801332e <rfalNfcDeactivation+0x36>
 8013316:	2b01      	cmp	r3, #1
 8013318:	d105      	bne.n	8013326 <rfalNfcDeactivation+0x2e>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 801331a:	f7fd fb35 	bl	8010988 <rfalIsoDepDeselect>
                break;
 801331e:	e007      	b.n	8013330 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 8013320:	f001 fe4c 	bl	8014fbc <rfalNfcDepRLS>
                break;
 8013324:	e004      	b.n	8013330 <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 8013326:	2305      	movs	r3, #5
 8013328:	e00a      	b.n	8013340 <rfalNfcDeactivation+0x48>
        }
    }
 801332a:	bf00      	nop
 801332c:	e000      	b.n	8013330 <rfalNfcDeactivation+0x38>
                break;                                                                /* No specific deactivation to be performed */
 801332e:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8013330:	f007 f918 	bl	801a564 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8013334:	f006 fdde 	bl	8019ef4 <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8013338:	4b02      	ldr	r3, [pc, #8]	; (8013344 <rfalNfcDeactivation+0x4c>)
 801333a:	2200      	movs	r2, #0
 801333c:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 801333e:	2300      	movs	r3, #0
}
 8013340:	4618      	mov	r0, r3
 8013342:	bd80      	pop	{r7, pc}
 8013344:	20003314 	.word	0x20003314

08013348 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8013348:	b480      	push	{r7}
 801334a:	b085      	sub	sp, #20
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	71fb      	strb	r3, [r7, #7]
 8013352:	460b      	mov	r3, r1
 8013354:	71bb      	strb	r3, [r7, #6]
 8013356:	4613      	mov	r3, r2
 8013358:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 801335a:	797a      	ldrb	r2, [r7, #5]
 801335c:	79bb      	ldrb	r3, [r7, #6]
 801335e:	4293      	cmp	r3, r2
 8013360:	bf28      	it	cs
 8013362:	4613      	movcs	r3, r2
 8013364:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 8013366:	79fb      	ldrb	r3, [r7, #7]
 8013368:	2b02      	cmp	r3, #2
 801336a:	d801      	bhi.n	8013370 <nfcipDxIsSupported+0x28>
	{
		return true;
 801336c:	2301      	movs	r3, #1
 801336e:	e008      	b.n	8013382 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	2b03      	cmp	r3, #3
 8013374:	d104      	bne.n	8013380 <nfcipDxIsSupported+0x38>
 8013376:	7bfb      	ldrb	r3, [r7, #15]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d001      	beq.n	8013380 <nfcipDxIsSupported+0x38>
	{
		return true;
 801337c:	2301      	movs	r3, #1
 801337e:	e000      	b.n	8013382 <nfcipDxIsSupported+0x3a>
	}

	return false;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3714      	adds	r7, #20
 8013386:	46bd      	mov	sp, r7
 8013388:	bc80      	pop	{r7}
 801338a:	4770      	bx	lr

0801338c <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b088      	sub	sp, #32
 8013390:	af02      	add	r7, sp, #8
 8013392:	60b9      	str	r1, [r7, #8]
 8013394:	607a      	str	r2, [r7, #4]
 8013396:	603b      	str	r3, [r7, #0]
 8013398:	4603      	mov	r3, r0
 801339a:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	2b06      	cmp	r3, #6
 80133a0:	d002      	beq.n	80133a8 <nfcipTxRx+0x1c>
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	2b07      	cmp	r3, #7
 80133a6:	d101      	bne.n	80133ac <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 80133a8:	2307      	movs	r3, #7
 80133aa:	e030      	b.n	801340e <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 80133ac:	4a1a      	ldr	r2, [pc, #104]	; (8013418 <nfcipTxRx+0x8c>)
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 80133b2:	4a19      	ldr	r2, [pc, #100]	; (8013418 <nfcipTxRx+0x8c>)
 80133b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80133b6:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 80133ba:	4a17      	ldr	r2, [pc, #92]	; (8013418 <nfcipTxRx+0x8c>)
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d013      	beq.n	80133ee <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 80133c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	7bf8      	ldrb	r0, [r7, #15]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	9301      	str	r3, [sp, #4]
 80133d2:	2300      	movs	r3, #0
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	4613      	mov	r3, r2
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	68b9      	ldr	r1, [r7, #8]
 80133dc:	f000 ffac 	bl	8014338 <nfcipTx>
 80133e0:	4603      	mov	r3, r0
 80133e2:	82fb      	strh	r3, [r7, #22]
 80133e4:	8afb      	ldrh	r3, [r7, #22]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <nfcipTxRx+0x62>
 80133ea:	8afb      	ldrh	r3, [r7, #22]
 80133ec:	e00f      	b.n	801340e <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 80133ee:	2001      	movs	r0, #1
 80133f0:	f001 ff72 	bl	80152d8 <nfcipDataRx>
 80133f4:	4603      	mov	r3, r0
 80133f6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80133f8:	8afb      	ldrh	r3, [r7, #22]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d001      	beq.n	8013402 <nfcipTxRx+0x76>
    {
        return ret;
 80133fe:	8afb      	ldrh	r3, [r7, #22]
 8013400:	e005      	b.n	801340e <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8013402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	b29a      	uxth	r2, r3
 8013408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340a:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3718      	adds	r7, #24
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	20003814 	.word	0x20003814

0801341c <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08c      	sub	sp, #48	; 0x30
 8013420:	af02      	add	r7, sp, #8
 8013422:	4603      	mov	r3, r0
 8013424:	460a      	mov	r2, r1
 8013426:	71fb      	strb	r3, [r7, #7]
 8013428:	4613      	mov	r3, r2
 801342a:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 801342c:	4b2a      	ldr	r3, [pc, #168]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d101      	bne.n	8013438 <nfcipDEPControlMsg+0x1c>
 8013434:	2307      	movs	r3, #7
 8013436:	e000      	b.n	801343a <nfcipDEPControlMsg+0x1e>
 8013438:	2306      	movs	r3, #6
 801343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 801343e:	4b26      	ldr	r3, [pc, #152]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d018      	beq.n	8013478 <nfcipDEPControlMsg+0x5c>
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801344c:	2b80      	cmp	r3, #128	; 0x80
 801344e:	d10d      	bne.n	801346c <nfcipDEPControlMsg+0x50>
 8013450:	79fb      	ldrb	r3, [r7, #7]
 8013452:	f003 0310 	and.w	r3, r3, #16
 8013456:	2b00      	cmp	r3, #0
 8013458:	d008      	beq.n	801346c <nfcipDEPControlMsg+0x50>
 801345a:	79bb      	ldrb	r3, [r7, #6]
 801345c:	4a1e      	ldr	r2, [pc, #120]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 801345e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013460:	fb03 f202 	mul.w	r2, r3, r2
 8013464:	4b1c      	ldr	r3, [pc, #112]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 8013466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013468:	4413      	add	r3, r2
 801346a:	e007      	b.n	801347c <nfcipDEPControlMsg+0x60>
 801346c:	4b1a      	ldr	r3, [pc, #104]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 801346e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013470:	4b19      	ldr	r3, [pc, #100]	; (80134d8 <nfcipDEPControlMsg+0xbc>)
 8013472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013474:	4413      	add	r3, r2
 8013476:	e001      	b.n	801347c <nfcipDEPControlMsg+0x60>
 8013478:	f04f 33ff 	mov.w	r3, #4294967295
 801347c:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013484:	2b80      	cmp	r3, #128	; 0x80
 8013486:	d116      	bne.n	80134b6 <nfcipDEPControlMsg+0x9a>
 8013488:	79fb      	ldrb	r3, [r7, #7]
 801348a:	f003 0310 	and.w	r3, r3, #16
 801348e:	2b00      	cmp	r3, #0
 8013490:	d011      	beq.n	80134b6 <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8013492:	79bb      	ldrb	r3, [r7, #6]
 8013494:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8013496:	f107 030c 	add.w	r3, r7, #12
 801349a:	1d5a      	adds	r2, r3, #5
 801349c:	f107 010c 	add.w	r1, r7, #12
 80134a0:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80134a4:	6a3b      	ldr	r3, [r7, #32]
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	79fb      	ldrb	r3, [r7, #7]
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	2301      	movs	r3, #1
 80134ae:	f000 ff43 	bl	8014338 <nfcipTx>
 80134b2:	4603      	mov	r3, r0
 80134b4:	e00c      	b.n	80134d0 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 80134b6:	f107 010c 	add.w	r1, r7, #12
 80134ba:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	79fb      	ldrb	r3, [r7, #7]
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	2300      	movs	r3, #0
 80134c8:	2200      	movs	r2, #0
 80134ca:	f000 ff35 	bl	8014338 <nfcipTx>
 80134ce:	4603      	mov	r3, r0
    }
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3728      	adds	r7, #40	; 0x28
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	20003814 	.word	0x20003814

080134dc <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 80134dc:	b480      	push	{r7}
 80134de:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 80134e0:	4b0b      	ldr	r3, [pc, #44]	; (8013510 <nfcipClearCounters+0x34>)
 80134e2:	2200      	movs	r2, #0
 80134e4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 80134e8:	4b09      	ldr	r3, [pc, #36]	; (8013510 <nfcipClearCounters+0x34>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 80134f0:	4b07      	ldr	r3, [pc, #28]	; (8013510 <nfcipClearCounters+0x34>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 80134f8:	4b05      	ldr	r3, [pc, #20]	; (8013510 <nfcipClearCounters+0x34>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 8013500:	4b03      	ldr	r3, [pc, #12]	; (8013510 <nfcipClearCounters+0x34>)
 8013502:	2200      	movs	r2, #0
 8013504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8013508:	bf00      	nop
 801350a:	46bd      	mov	sp, r7
 801350c:	bc80      	pop	{r7}
 801350e:	4770      	bx	lr
 8013510:	20003814 	.word	0x20003814

08013514 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b086      	sub	sp, #24
 8013518:	af00      	add	r7, sp, #0
 801351a:	60ba      	str	r2, [r7, #8]
 801351c:	607b      	str	r3, [r7, #4]
 801351e:	4603      	mov	r3, r0
 8013520:	81fb      	strh	r3, [r7, #14]
 8013522:	460b      	mov	r3, r1
 8013524:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 8013526:	230c      	movs	r3, #12
 8013528:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 801352a:	2300      	movs	r3, #0
 801352c:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 801352e:	2300      	movs	r3, #0
 8013530:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	2200      	movs	r2, #0
 8013536:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 801353e:	89fb      	ldrh	r3, [r7, #14]
 8013540:	2b1d      	cmp	r3, #29
 8013542:	f200 80c6 	bhi.w	80136d2 <nfcipInitiatorHandleDEP+0x1be>
 8013546:	a201      	add	r2, pc, #4	; (adr r2, 801354c <nfcipInitiatorHandleDEP+0x38>)
 8013548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801354c:	080136d7 	.word	0x080136d7
 8013550:	080136d3 	.word	0x080136d3
 8013554:	080136cf 	.word	0x080136cf
 8013558:	080136d3 	.word	0x080136d3
 801355c:	080135c5 	.word	0x080135c5
 8013560:	080136d3 	.word	0x080136d3
 8013564:	080136d3 	.word	0x080136d3
 8013568:	080136d3 	.word	0x080136d3
 801356c:	080136d3 	.word	0x080136d3
 8013570:	0801368b 	.word	0x0801368b
 8013574:	080136d3 	.word	0x080136d3
 8013578:	080136d3 	.word	0x080136d3
 801357c:	080136d3 	.word	0x080136d3
 8013580:	080136d3 	.word	0x080136d3
 8013584:	080136d3 	.word	0x080136d3
 8013588:	080136d3 	.word	0x080136d3
 801358c:	080136d3 	.word	0x080136d3
 8013590:	080136d3 	.word	0x080136d3
 8013594:	080136d3 	.word	0x080136d3
 8013598:	080136d3 	.word	0x080136d3
 801359c:	080136d3 	.word	0x080136d3
 80135a0:	0801368b 	.word	0x0801368b
 80135a4:	080136d3 	.word	0x080136d3
 80135a8:	080136d3 	.word	0x080136d3
 80135ac:	080136d3 	.word	0x080136d3
 80135b0:	080136d3 	.word	0x080136d3
 80135b4:	080136d3 	.word	0x080136d3
 80135b8:	0801368b 	.word	0x0801368b
 80135bc:	080136d3 	.word	0x080136d3
 80135c0:	0801368b 	.word	0x0801368b
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 80135c4:	4ba1      	ldr	r3, [pc, #644]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80135c6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80135ca:	1c5a      	adds	r2, r3, #1
 80135cc:	b2d1      	uxtb	r1, r2
 80135ce:	4a9f      	ldr	r2, [pc, #636]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80135d0:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 80135d4:	2b02      	cmp	r3, #2
 80135d6:	d901      	bls.n	80135dc <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 80135d8:	230b      	movs	r3, #11
 80135da:	e264      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 80135dc:	4b9b      	ldr	r3, [pc, #620]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80135de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d008      	beq.n	80135f8 <nfcipInitiatorHandleDEP+0xe4>
 80135e6:	4b99      	ldr	r3, [pc, #612]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80135e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135ec:	4798      	blx	r3
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d001      	beq.n	80135f8 <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 80135f4:	2304      	movs	r3, #4
 80135f6:	e256      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 80135f8:	4b94      	ldr	r3, [pc, #592]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80135fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80135fe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013602:	2b40      	cmp	r3, #64	; 0x40
 8013604:	d128      	bne.n	8013658 <nfcipInitiatorHandleDEP+0x144>
 8013606:	4b91      	ldr	r3, [pc, #580]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013608:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801360c:	f003 0310 	and.w	r3, r3, #16
 8013610:	2b00      	cmp	r3, #0
 8013612:	d021      	beq.n	8013658 <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8013614:	4b8d      	ldr	r3, [pc, #564]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801361a:	1c5a      	adds	r2, r3, #1
 801361c:	b2d1      	uxtb	r1, r2
 801361e:	4a8b      	ldr	r2, [pc, #556]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013620:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8013624:	2b02      	cmp	r3, #2
 8013626:	d901      	bls.n	801362c <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8013628:	230b      	movs	r3, #11
 801362a:	e23c      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 801362c:	4b87      	ldr	r3, [pc, #540]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801362e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013632:	f003 0303 	and.w	r3, r3, #3
 8013636:	b2db      	uxtb	r3, r3
 8013638:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801363c:	b2db      	uxtb	r3, r3
 801363e:	2100      	movs	r1, #0
 8013640:	4618      	mov	r0, r3
 8013642:	f7ff feeb 	bl	801341c <nfcipDEPControlMsg>
 8013646:	4603      	mov	r3, r0
 8013648:	82fb      	strh	r3, [r7, #22]
 801364a:	8afb      	ldrh	r3, [r7, #22]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d001      	beq.n	8013654 <nfcipInitiatorHandleDEP+0x140>
 8013650:	8afb      	ldrh	r3, [r7, #22]
 8013652:	e228      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8013654:	2302      	movs	r3, #2
 8013656:	e226      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8013658:	4b7c      	ldr	r3, [pc, #496]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801365a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801365e:	1c5a      	adds	r2, r3, #1
 8013660:	b2d1      	uxtb	r1, r2
 8013662:	4a7a      	ldr	r2, [pc, #488]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013664:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8013668:	2b02      	cmp	r3, #2
 801366a:	d901      	bls.n	8013670 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 801366c:	230b      	movs	r3, #11
 801366e:	e21a      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8013670:	2100      	movs	r1, #0
 8013672:	2080      	movs	r0, #128	; 0x80
 8013674:	f7ff fed2 	bl	801341c <nfcipDEPControlMsg>
 8013678:	4603      	mov	r3, r0
 801367a:	82fb      	strh	r3, [r7, #22]
 801367c:	8afb      	ldrh	r3, [r7, #22]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d001      	beq.n	8013686 <nfcipInitiatorHandleDEP+0x172>
 8013682:	8afb      	ldrh	r3, [r7, #22]
 8013684:	e20f      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8013686:	2302      	movs	r3, #2
 8013688:	e20d      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 801368a:	4b70      	ldr	r3, [pc, #448]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801368c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	b2d1      	uxtb	r1, r2
 8013694:	4a6d      	ldr	r2, [pc, #436]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013696:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 801369a:	2b02      	cmp	r3, #2
 801369c:	d901      	bls.n	80136a2 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 801369e:	2309      	movs	r3, #9
 80136a0:	e201      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 80136a2:	4b6a      	ldr	r3, [pc, #424]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80136a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136a8:	f003 0303 	and.w	r3, r3, #3
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80136b2:	b2db      	uxtb	r3, r3
 80136b4:	2100      	movs	r1, #0
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff feb0 	bl	801341c <nfcipDEPControlMsg>
 80136bc:	4603      	mov	r3, r0
 80136be:	82fb      	strh	r3, [r7, #22]
 80136c0:	8afb      	ldrh	r3, [r7, #22]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <nfcipInitiatorHandleDEP+0x1b6>
 80136c6:	8afb      	ldrh	r3, [r7, #22]
 80136c8:	e1ed      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 80136ca:	2302      	movs	r3, #2
 80136cc:	e1eb      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 80136ce:	2302      	movs	r3, #2
 80136d0:	e1e9      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 80136d2:	89fb      	ldrh	r3, [r7, #14]
 80136d4:	e1e7      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            break;
 80136d6:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80136d8:	4b5c      	ldr	r3, [pc, #368]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80136da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80136dc:	7d7b      	ldrb	r3, [r7, #21]
 80136de:	1c59      	adds	r1, r3, #1
 80136e0:	7579      	strb	r1, [r7, #21]
 80136e2:	4413      	add	r3, r2
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 80136e8:	4b58      	ldr	r3, [pc, #352]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80136ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80136ec:	7d7b      	ldrb	r3, [r7, #21]
 80136ee:	1c59      	adds	r1, r3, #1
 80136f0:	7579      	strb	r1, [r7, #21]
 80136f2:	4413      	add	r3, r2
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	2bd5      	cmp	r3, #213	; 0xd5
 80136f8:	d001      	beq.n	80136fe <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 80136fa:	230b      	movs	r3, #11
 80136fc:	e1d3      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 80136fe:	4b53      	ldr	r3, [pc, #332]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013700:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013702:	7d7b      	ldrb	r3, [r7, #21]
 8013704:	1c59      	adds	r1, r3, #1
 8013706:	7579      	strb	r1, [r7, #21]
 8013708:	4413      	add	r3, r2
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	2b07      	cmp	r3, #7
 801370e:	d001      	beq.n	8013714 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8013710:	230b      	movs	r3, #11
 8013712:	e1c8      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8013714:	4b4d      	ldr	r3, [pc, #308]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013716:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013718:	7d7b      	ldrb	r3, [r7, #21]
 801371a:	1c59      	adds	r1, r3, #1
 801371c:	7579      	strb	r1, [r7, #21]
 801371e:	4413      	add	r3, r2
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8013724:	7cbb      	ldrb	r3, [r7, #18]
 8013726:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801372a:	2b80      	cmp	r3, #128	; 0x80
 801372c:	d00b      	beq.n	8013746 <nfcipInitiatorHandleDEP+0x232>
 801372e:	7cbb      	ldrb	r3, [r7, #18]
 8013730:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013734:	2b40      	cmp	r3, #64	; 0x40
 8013736:	d006      	beq.n	8013746 <nfcipInitiatorHandleDEP+0x232>
 8013738:	7cbb      	ldrb	r3, [r7, #18]
 801373a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 8013742:	230b      	movs	r3, #11
 8013744:	e1af      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8013746:	4b41      	ldr	r3, [pc, #260]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013748:	78db      	ldrb	r3, [r3, #3]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d015      	beq.n	801377a <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 801374e:	4b3f      	ldr	r3, [pc, #252]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013750:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013752:	7d7b      	ldrb	r3, [r7, #21]
 8013754:	1c59      	adds	r1, r3, #1
 8013756:	7579      	strb	r1, [r7, #21]
 8013758:	4413      	add	r3, r2
 801375a:	781a      	ldrb	r2, [r3, #0]
 801375c:	4b3b      	ldr	r3, [pc, #236]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801375e:	78db      	ldrb	r3, [r3, #3]
 8013760:	429a      	cmp	r2, r3
 8013762:	d104      	bne.n	801376e <nfcipInitiatorHandleDEP+0x25a>
 8013764:	7cbb      	ldrb	r3, [r7, #18]
 8013766:	f003 0304 	and.w	r3, r3, #4
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 801376e:	230b      	movs	r3, #11
 8013770:	e199      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8013772:	7d3b      	ldrb	r3, [r7, #20]
 8013774:	3301      	adds	r3, #1
 8013776:	753b      	strb	r3, [r7, #20]
 8013778:	e006      	b.n	8013788 <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 801377a:	7cbb      	ldrb	r3, [r7, #18]
 801377c:	f003 0304 	and.w	r3, r3, #4
 8013780:	2b00      	cmp	r3, #0
 8013782:	d001      	beq.n	8013788 <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 8013784:	230b      	movs	r3, #11
 8013786:	e18e      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8013788:	4b30      	ldr	r3, [pc, #192]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801378a:	791b      	ldrb	r3, [r3, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d015      	beq.n	80137bc <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8013790:	4b2e      	ldr	r3, [pc, #184]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013792:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013794:	7d7b      	ldrb	r3, [r7, #21]
 8013796:	1c59      	adds	r1, r3, #1
 8013798:	7579      	strb	r1, [r7, #21]
 801379a:	4413      	add	r3, r2
 801379c:	781a      	ldrb	r2, [r3, #0]
 801379e:	4b2b      	ldr	r3, [pc, #172]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80137a0:	791b      	ldrb	r3, [r3, #4]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d104      	bne.n	80137b0 <nfcipInitiatorHandleDEP+0x29c>
 80137a6:	7cbb      	ldrb	r3, [r7, #18]
 80137a8:	f003 0308 	and.w	r3, r3, #8
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d101      	bne.n	80137b4 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 80137b0:	230b      	movs	r3, #11
 80137b2:	e178      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80137b4:	7d3b      	ldrb	r3, [r7, #20]
 80137b6:	3301      	adds	r3, #1
 80137b8:	753b      	strb	r3, [r7, #20]
 80137ba:	e006      	b.n	80137ca <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80137bc:	7cbb      	ldrb	r3, [r7, #18]
 80137be:	f003 0308 	and.w	r3, r3, #8
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d001      	beq.n	80137ca <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 80137c6:	230b      	movs	r3, #11
 80137c8:	e16d      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 80137ca:	7cbb      	ldrb	r3, [r7, #18]
 80137cc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80137d0:	2b40      	cmp	r3, #64	; 0x40
 80137d2:	d153      	bne.n	801387c <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 80137d4:	7cbb      	ldrb	r3, [r7, #18]
 80137d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80137da:	2b40      	cmp	r3, #64	; 0x40
 80137dc:	d14c      	bne.n	8013878 <nfcipInitiatorHandleDEP+0x364>
 80137de:	7cbb      	ldrb	r3, [r7, #18]
 80137e0:	f003 0310 	and.w	r3, r3, #16
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d147      	bne.n	8013878 <nfcipInitiatorHandleDEP+0x364>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80137e8:	4b18      	ldr	r3, [pc, #96]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80137ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137ee:	461a      	mov	r2, r3
 80137f0:	7cbb      	ldrb	r3, [r7, #18]
 80137f2:	f003 0303 	and.w	r3, r3, #3
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d11c      	bne.n	8013834 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80137fa:	4b14      	ldr	r3, [pc, #80]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 80137fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013800:	3301      	adds	r3, #1
 8013802:	b2db      	uxtb	r3, r3
 8013804:	f003 0303 	and.w	r3, r3, #3
 8013808:	b2da      	uxtb	r2, r3
 801380a:	4b10      	ldr	r3, [pc, #64]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 8013810:	4b0e      	ldr	r3, [pc, #56]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013812:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8013816:	f083 0301 	eor.w	r3, r3, #1
 801381a:	b2db      	uxtb	r3, r3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 8013820:	230b      	movs	r3, #11
 8013822:	e140      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 8013824:	f7ff fe5a 	bl	80134dc <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8013828:	4b08      	ldr	r3, [pc, #32]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 801382a:	2204      	movs	r2, #4
 801382c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 8013830:	2300      	movs	r3, #0
 8013832:	e138      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8013834:	4b05      	ldr	r3, [pc, #20]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013836:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801383a:	1c5a      	adds	r2, r3, #1
 801383c:	b2d1      	uxtb	r1, r2
 801383e:	4a03      	ldr	r2, [pc, #12]	; (801384c <nfcipInitiatorHandleDEP+0x338>)
 8013840:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8013844:	2b02      	cmp	r3, #2
 8013846:	d903      	bls.n	8013850 <nfcipInitiatorHandleDEP+0x33c>
                {
                    return ERR_PROTO;
 8013848:	230b      	movs	r3, #11
 801384a:	e12c      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
 801384c:	20003814 	.word	0x20003814
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8013850:	4b97      	ldr	r3, [pc, #604]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013856:	3b01      	subs	r3, #1
 8013858:	b2da      	uxtb	r2, r3
 801385a:	7cbb      	ldrb	r3, [r7, #18]
 801385c:	4053      	eors	r3, r2
 801385e:	b2db      	uxtb	r3, r3
 8013860:	f003 0303 	and.w	r3, r3, #3
 8013864:	2b00      	cmp	r3, #0
 8013866:	d105      	bne.n	8013874 <nfcipInitiatorHandleDEP+0x360>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8013868:	4b91      	ldr	r3, [pc, #580]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 801386a:	2205      	movs	r2, #5
 801386c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8013870:	2302      	movs	r3, #2
 8013872:	e118      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 8013874:	230b      	movs	r3, #11
 8013876:	e116      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 8013878:	230b      	movs	r3, #11
 801387a:	e114      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 801387c:	7cbb      	ldrb	r3, [r7, #18]
 801387e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013882:	2b80      	cmp	r3, #128	; 0x80
 8013884:	f040 8094 	bne.w	80139b0 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 8013888:	7cbb      	ldrb	r3, [r7, #18]
 801388a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801388e:	2b80      	cmp	r3, #128	; 0x80
 8013890:	d146      	bne.n	8013920 <nfcipInitiatorHandleDEP+0x40c>
 8013892:	7cbb      	ldrb	r3, [r7, #18]
 8013894:	f003 0310 	and.w	r3, r3, #16
 8013898:	2b00      	cmp	r3, #0
 801389a:	d141      	bne.n	8013920 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 801389c:	4b84      	ldr	r3, [pc, #528]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 801389e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80138a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80138a6:	2b80      	cmp	r3, #128	; 0x80
 80138a8:	d138      	bne.n	801391c <nfcipInitiatorHandleDEP+0x408>
 80138aa:	4b81      	ldr	r3, [pc, #516]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138ac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80138b0:	f003 0310 	and.w	r3, r3, #16
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d131      	bne.n	801391c <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 80138b8:	4b7d      	ldr	r3, [pc, #500]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80138c0:	4b7b      	ldr	r3, [pc, #492]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80138c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80138ca:	2b80      	cmp	r3, #128	; 0x80
 80138cc:	d114      	bne.n	80138f8 <nfcipInitiatorHandleDEP+0x3e4>
 80138ce:	4b78      	ldr	r3, [pc, #480]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80138d4:	f003 0310 	and.w	r3, r3, #16
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00d      	beq.n	80138f8 <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 80138dc:	4b74      	ldr	r3, [pc, #464]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80138e2:	4619      	mov	r1, r3
 80138e4:	2090      	movs	r0, #144	; 0x90
 80138e6:	f7ff fd99 	bl	801341c <nfcipDEPControlMsg>
 80138ea:	4603      	mov	r3, r0
 80138ec:	82fb      	strh	r3, [r7, #22]
 80138ee:	8afb      	ldrh	r3, [r7, #22]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d011      	beq.n	8013918 <nfcipInitiatorHandleDEP+0x404>
 80138f4:	8afb      	ldrh	r3, [r7, #22]
 80138f6:	e0d6      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 80138f8:	4b6d      	ldr	r3, [pc, #436]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80138fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80138fe:	1c5a      	adds	r2, r3, #1
 8013900:	b2d1      	uxtb	r1, r2
 8013902:	4a6b      	ldr	r2, [pc, #428]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013904:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8013908:	2b02      	cmp	r3, #2
 801390a:	d901      	bls.n	8013910 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 801390c:	230b      	movs	r3, #11
 801390e:	e0ca      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8013910:	4b67      	ldr	r3, [pc, #412]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013912:	2205      	movs	r2, #5
 8013914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8013918:	2302      	movs	r3, #2
 801391a:	e0c4      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 801391c:	230b      	movs	r3, #11
 801391e:	e0c2      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8013920:	7cbb      	ldrb	r3, [r7, #18]
 8013922:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013926:	2b80      	cmp	r3, #128	; 0x80
 8013928:	d140      	bne.n	80139ac <nfcipInitiatorHandleDEP+0x498>
 801392a:	7cbb      	ldrb	r3, [r7, #18]
 801392c:	f003 0310 	and.w	r3, r3, #16
 8013930:	2b00      	cmp	r3, #0
 8013932:	d03b      	beq.n	80139ac <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8013934:	4b5e      	ldr	r3, [pc, #376]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013936:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013938:	7d7b      	ldrb	r3, [r7, #21]
 801393a:	1c59      	adds	r1, r3, #1
 801393c:	7579      	strb	r1, [r7, #21]
 801393e:	4413      	add	r3, r2
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8013944:	4b5a      	ldr	r3, [pc, #360]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801394a:	1c5a      	adds	r2, r3, #1
 801394c:	b2d1      	uxtb	r1, r2
 801394e:	4a58      	ldr	r2, [pc, #352]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013950:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8013954:	2b03      	cmp	r3, #3
 8013956:	d80d      	bhi.n	8013974 <nfcipInitiatorHandleDEP+0x460>
 8013958:	4b55      	ldr	r3, [pc, #340]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 801395a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801395e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013962:	2b80      	cmp	r3, #128	; 0x80
 8013964:	d108      	bne.n	8013978 <nfcipInitiatorHandleDEP+0x464>
 8013966:	4b52      	ldr	r3, [pc, #328]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013968:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801396c:	f003 0310 	and.w	r3, r3, #16
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8013974:	230b      	movs	r3, #11
 8013976:	e096      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8013978:	7c7b      	ldrb	r3, [r7, #17]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d002      	beq.n	8013984 <nfcipInitiatorHandleDEP+0x470>
 801397e:	7c7b      	ldrb	r3, [r7, #17]
 8013980:	2b3b      	cmp	r3, #59	; 0x3b
 8013982:	d901      	bls.n	8013988 <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8013984:	230b      	movs	r3, #11
 8013986:	e08e      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8013988:	7c7b      	ldrb	r3, [r7, #17]
 801398a:	4619      	mov	r1, r3
 801398c:	2090      	movs	r0, #144	; 0x90
 801398e:	f7ff fd45 	bl	801341c <nfcipDEPControlMsg>
 8013992:	4603      	mov	r3, r0
 8013994:	82fb      	strh	r3, [r7, #22]
 8013996:	8afb      	ldrh	r3, [r7, #22]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <nfcipInitiatorHandleDEP+0x48c>
 801399c:	8afb      	ldrh	r3, [r7, #22]
 801399e:	e082      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 80139a0:	4a43      	ldr	r2, [pc, #268]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80139a2:	7c7b      	ldrb	r3, [r7, #17]
 80139a4:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 80139a8:	2302      	movs	r3, #2
 80139aa:	e07c      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 80139ac:	230b      	movs	r3, #11
 80139ae:	e07a      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80139b0:	7cbb      	ldrb	r3, [r7, #18]
 80139b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d174      	bne.n	8013aa4 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80139ba:	4b3d      	ldr	r3, [pc, #244]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80139bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80139c0:	461a      	mov	r2, r3
 80139c2:	7cbb      	ldrb	r3, [r7, #18]
 80139c4:	f003 0303 	and.w	r3, r3, #3
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d001      	beq.n	80139d0 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 80139cc:	230b      	movs	r3, #11
 80139ce:	e06a      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80139d0:	4b37      	ldr	r3, [pc, #220]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80139d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	f003 0303 	and.w	r3, r3, #3
 80139de:	b2da      	uxtb	r2, r3
 80139e0:	4b33      	ldr	r3, [pc, #204]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 80139e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 80139e6:	f7ff fd79 	bl	80134dc <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80139ea:	7cfb      	ldrb	r3, [r7, #19]
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	7d3b      	ldrb	r3, [r7, #20]
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	1ad3      	subs	r3, r2, r3
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	3b04      	subs	r3, #4
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 80139fe:	4b2c      	ldr	r3, [pc, #176]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a00:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8013a04:	461a      	mov	r2, r3
 8013a06:	7d3b      	ldrb	r3, [r7, #20]
 8013a08:	3304      	adds	r3, #4
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d013      	beq.n	8013a36 <nfcipInitiatorHandleDEP+0x522>
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00f      	beq.n	8013a36 <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8013a16:	4b26      	ldr	r3, [pc, #152]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a1a:	4a25      	ldr	r2, [pc, #148]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a1c:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8013a20:	1898      	adds	r0, r3, r2
 8013a22:	4b23      	ldr	r3, [pc, #140]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013a26:	7d3b      	ldrb	r3, [r7, #20]
 8013a28:	3304      	adds	r3, #4
 8013a2a:	18d1      	adds	r1, r2, r3
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	461a      	mov	r2, r3
 8013a32:	f007 fce9 	bl	801b408 <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8013a36:	7cbb      	ldrb	r3, [r7, #18]
 8013a38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d127      	bne.n	8013a90 <nfcipInitiatorHandleDEP+0x57c>
 8013a40:	7cbb      	ldrb	r3, [r7, #18]
 8013a42:	f003 0310 	and.w	r3, r3, #16
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d022      	beq.n	8013a90 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 8013a4a:	4b19      	ldr	r3, [pc, #100]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2201      	movs	r2, #1
 8013a56:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8013a58:	4b15      	ldr	r3, [pc, #84]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a5e:	f003 0303 	and.w	r3, r3, #3
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a68:	b2d8      	uxtb	r0, r3
 8013a6a:	4b11      	ldr	r3, [pc, #68]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013a6e:	7d7b      	ldrb	r3, [r7, #21]
 8013a70:	1c59      	adds	r1, r3, #1
 8013a72:	7579      	strb	r1, [r7, #21]
 8013a74:	4413      	add	r3, r2
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	4619      	mov	r1, r3
 8013a7a:	f7ff fccf 	bl	801341c <nfcipDEPControlMsg>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	82fb      	strh	r3, [r7, #22]
 8013a82:	8afb      	ldrh	r3, [r7, #22]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <nfcipInitiatorHandleDEP+0x578>
 8013a88:	8afb      	ldrh	r3, [r7, #22]
 8013a8a:	e00c      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8013a8c:	230d      	movs	r3, #13
 8013a8e:	e00a      	b.n	8013aa6 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8013a90:	4b07      	ldr	r3, [pc, #28]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a92:	2200      	movs	r2, #0
 8013a94:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8013a98:	4b05      	ldr	r3, [pc, #20]	; (8013ab0 <nfcipInitiatorHandleDEP+0x59c>)
 8013a9a:	2204      	movs	r2, #4
 8013a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8013aa4:	8afb      	ldrh	r3, [r7, #22]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3718      	adds	r7, #24
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	20003814 	.word	0x20003814

08013ab4 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b08c      	sub	sp, #48	; 0x30
 8013ab8:	af04      	add	r7, sp, #16
 8013aba:	4603      	mov	r3, r0
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8013ac2:	230c      	movs	r3, #12
 8013ac4:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 8013aca:	2300      	movs	r3, #0
 8013acc:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8013ada:	89fb      	ldrh	r3, [r7, #14]
 8013adc:	2b25      	cmp	r3, #37	; 0x25
 8013ade:	d006      	beq.n	8013aee <nfcipTargetHandleRX+0x3a>
 8013ae0:	2b25      	cmp	r3, #37	; 0x25
 8013ae2:	dc0a      	bgt.n	8013afa <nfcipTargetHandleRX+0x46>
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d01d      	beq.n	8013b24 <nfcipTargetHandleRX+0x70>
 8013ae8:	2b02      	cmp	r3, #2
 8013aea:	d003      	beq.n	8013af4 <nfcipTargetHandleRX+0x40>
 8013aec:	e005      	b.n	8013afa <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8013aee:	89fb      	ldrh	r3, [r7, #14]
 8013af0:	f000 bc1a 	b.w	8014328 <nfcipTargetHandleRX+0x874>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8013af4:	2302      	movs	r3, #2
 8013af6:	f000 bc17 	b.w	8014328 <nfcipTargetHandleRX+0x874>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013afa:	4b9e      	ldr	r3, [pc, #632]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013afe:	4b9d      	ldr	r3, [pc, #628]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b00:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013b04:	4b9b      	ldr	r3, [pc, #620]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b08:	f04f 30ff 	mov.w	r0, #4294967295
 8013b0c:	9002      	str	r0, [sp, #8]
 8013b0e:	2004      	movs	r0, #4
 8013b10:	9001      	str	r0, [sp, #4]
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	460b      	mov	r3, r1
 8013b16:	2100      	movs	r1, #0
 8013b18:	2000      	movs	r0, #0
 8013b1a:	f004 fcfb 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8013b1e:	2302      	movs	r3, #2
 8013b20:	f000 bc02 	b.w	8014328 <nfcipTargetHandleRX+0x874>
            break;
 8013b24:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8013b26:	4b93      	ldr	r3, [pc, #588]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b2a:	7f7b      	ldrb	r3, [r7, #29]
 8013b2c:	1c59      	adds	r1, r3, #1
 8013b2e:	7779      	strb	r1, [r7, #29]
 8013b30:	4413      	add	r3, r2
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 8013b36:	4b8f      	ldr	r3, [pc, #572]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b3a:	7f7b      	ldrb	r3, [r7, #29]
 8013b3c:	1c59      	adds	r1, r3, #1
 8013b3e:	7779      	strb	r1, [r7, #29]
 8013b40:	4413      	add	r3, r2
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	2bd4      	cmp	r3, #212	; 0xd4
 8013b46:	d013      	beq.n	8013b70 <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013b48:	4b8a      	ldr	r3, [pc, #552]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b4c:	4b89      	ldr	r3, [pc, #548]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b4e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013b52:	4b88      	ldr	r3, [pc, #544]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b56:	f04f 30ff 	mov.w	r0, #4294967295
 8013b5a:	9002      	str	r0, [sp, #8]
 8013b5c:	2004      	movs	r0, #4
 8013b5e:	9001      	str	r0, [sp, #4]
 8013b60:	9300      	str	r3, [sp, #0]
 8013b62:	460b      	mov	r3, r1
 8013b64:	2100      	movs	r1, #0
 8013b66:	2000      	movs	r0, #0
 8013b68:	f004 fcd4 	bl	8018514 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8013b6c:	2302      	movs	r3, #2
 8013b6e:	e3db      	b.n	8014328 <nfcipTargetHandleRX+0x874>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8013b70:	4b80      	ldr	r3, [pc, #512]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b74:	7f7b      	ldrb	r3, [r7, #29]
 8013b76:	1c59      	adds	r1, r3, #1
 8013b78:	7779      	strb	r1, [r7, #29]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	2b0a      	cmp	r3, #10
 8013b80:	d032      	beq.n	8013be8 <nfcipTargetHandleRX+0x134>
 8013b82:	2b0a      	cmp	r3, #10
 8013b84:	dc5d      	bgt.n	8013c42 <nfcipTargetHandleRX+0x18e>
 8013b86:	2b06      	cmp	r3, #6
 8013b88:	d06f      	beq.n	8013c6a <nfcipTargetHandleRX+0x1b6>
 8013b8a:	2b08      	cmp	r3, #8
 8013b8c:	d159      	bne.n	8013c42 <nfcipTargetHandleRX+0x18e>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8013b8e:	4b79      	ldr	r3, [pc, #484]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013b92:	7f7b      	ldrb	r3, [r7, #29]
 8013b94:	1c59      	adds	r1, r3, #1
 8013b96:	7779      	strb	r1, [r7, #29]
 8013b98:	4413      	add	r3, r2
 8013b9a:	781a      	ldrb	r2, [r3, #0]
 8013b9c:	4b75      	ldr	r3, [pc, #468]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013b9e:	78db      	ldrb	r3, [r3, #3]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d102      	bne.n	8013baa <nfcipTargetHandleRX+0xf6>
 8013ba4:	7efb      	ldrb	r3, [r7, #27]
 8013ba6:	2b04      	cmp	r3, #4
 8013ba8:	d003      	beq.n	8013bb2 <nfcipTargetHandleRX+0xfe>
 8013baa:	4b72      	ldr	r3, [pc, #456]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013bac:	78db      	ldrb	r3, [r3, #3]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d106      	bne.n	8013bc0 <nfcipTargetHandleRX+0x10c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8013bb2:	4b70      	ldr	r3, [pc, #448]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013bb4:	78db      	ldrb	r3, [r3, #3]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d104      	bne.n	8013bc4 <nfcipTargetHandleRX+0x110>
 8013bba:	7efb      	ldrb	r3, [r7, #27]
 8013bbc:	2b03      	cmp	r3, #3
 8013bbe:	d001      	beq.n	8013bc4 <nfcipTargetHandleRX+0x110>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8013bc0:	2302      	movs	r3, #2
 8013bc2:	e3b1      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8013bc4:	f107 0114 	add.w	r1, r7, #20
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2009      	movs	r0, #9
 8013bd8:	f000 fbae 	bl	8014338 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 8013bdc:	4b65      	ldr	r3, [pc, #404]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013bde:	2210      	movs	r2, #16
 8013be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8013be4:	2320      	movs	r3, #32
 8013be6:	e39f      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8013be8:	4b62      	ldr	r3, [pc, #392]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013bea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013bec:	7f7b      	ldrb	r3, [r7, #29]
 8013bee:	1c59      	adds	r1, r3, #1
 8013bf0:	7779      	strb	r1, [r7, #29]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	781a      	ldrb	r2, [r3, #0]
 8013bf6:	4b5f      	ldr	r3, [pc, #380]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013bf8:	78db      	ldrb	r3, [r3, #3]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d102      	bne.n	8013c04 <nfcipTargetHandleRX+0x150>
 8013bfe:	7efb      	ldrb	r3, [r7, #27]
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	d003      	beq.n	8013c0c <nfcipTargetHandleRX+0x158>
 8013c04:	4b5b      	ldr	r3, [pc, #364]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c06:	78db      	ldrb	r3, [r3, #3]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d106      	bne.n	8013c1a <nfcipTargetHandleRX+0x166>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8013c0c:	4b59      	ldr	r3, [pc, #356]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c0e:	78db      	ldrb	r3, [r3, #3]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d104      	bne.n	8013c1e <nfcipTargetHandleRX+0x16a>
 8013c14:	7efb      	ldrb	r3, [r7, #27]
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d901      	bls.n	8013c1e <nfcipTargetHandleRX+0x16a>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8013c1a:	2302      	movs	r3, #2
 8013c1c:	e384      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8013c1e:	f107 0114 	add.w	r1, r7, #20
 8013c22:	f04f 33ff 	mov.w	r3, #4294967295
 8013c26:	9301      	str	r3, [sp, #4]
 8013c28:	2300      	movs	r3, #0
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	2200      	movs	r2, #0
 8013c30:	200b      	movs	r0, #11
 8013c32:	f000 fb81 	bl	8014338 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 8013c36:	4b4f      	ldr	r3, [pc, #316]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c38:	220c      	movs	r2, #12
 8013c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8013c3e:	231f      	movs	r3, #31
 8013c40:	e372      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013c42:	4b4c      	ldr	r3, [pc, #304]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c46:	4b4b      	ldr	r3, [pc, #300]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c48:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013c4c:	4b49      	ldr	r3, [pc, #292]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295
 8013c54:	9002      	str	r0, [sp, #8]
 8013c56:	2004      	movs	r0, #4
 8013c58:	9001      	str	r0, [sp, #4]
 8013c5a:	9300      	str	r3, [sp, #0]
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	2100      	movs	r1, #0
 8013c60:	2000      	movs	r0, #0
 8013c62:	f004 fc57 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 8013c66:	2302      	movs	r3, #2
 8013c68:	e35e      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            break;                                /* Continue to normal DEP processing */
 8013c6a:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8013c6c:	4b41      	ldr	r3, [pc, #260]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c70:	7f7b      	ldrb	r3, [r7, #29]
 8013c72:	1c59      	adds	r1, r3, #1
 8013c74:	7779      	strb	r1, [r7, #29]
 8013c76:	4413      	add	r3, r2
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8013c7c:	7ebb      	ldrb	r3, [r7, #26]
 8013c7e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013c82:	2b80      	cmp	r3, #128	; 0x80
 8013c84:	d01d      	beq.n	8013cc2 <nfcipTargetHandleRX+0x20e>
 8013c86:	7ebb      	ldrb	r3, [r7, #26]
 8013c88:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013c8c:	2b40      	cmp	r3, #64	; 0x40
 8013c8e:	d018      	beq.n	8013cc2 <nfcipTargetHandleRX+0x20e>
 8013c90:	7ebb      	ldrb	r3, [r7, #26]
 8013c92:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d013      	beq.n	8013cc2 <nfcipTargetHandleRX+0x20e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013c9a:	4b36      	ldr	r3, [pc, #216]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013c9e:	4b35      	ldr	r3, [pc, #212]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013ca0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013ca4:	4b33      	ldr	r3, [pc, #204]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cac:	9002      	str	r0, [sp, #8]
 8013cae:	2004      	movs	r0, #4
 8013cb0:	9001      	str	r0, [sp, #4]
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	2000      	movs	r0, #0
 8013cba:	f004 fc2b 	bl	8018514 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8013cbe:	2302      	movs	r3, #2
 8013cc0:	e332      	b.n	8014328 <nfcipTargetHandleRX+0x874>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8013cc2:	4b2c      	ldr	r3, [pc, #176]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013cc4:	78db      	ldrb	r3, [r3, #3]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d03b      	beq.n	8013d42 <nfcipTargetHandleRX+0x28e>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8013cca:	7ebb      	ldrb	r3, [r7, #26]
 8013ccc:	f003 0304 	and.w	r3, r3, #4
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d113      	bne.n	8013cfc <nfcipTargetHandleRX+0x248>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013cd4:	4b27      	ldr	r3, [pc, #156]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013cd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013cd8:	4b26      	ldr	r3, [pc, #152]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013cda:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013cde:	4b25      	ldr	r3, [pc, #148]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce6:	9002      	str	r0, [sp, #8]
 8013ce8:	2004      	movs	r0, #4
 8013cea:	9001      	str	r0, [sp, #4]
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	460b      	mov	r3, r1
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	f004 fc0e 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	e315      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8013cfc:	4b1d      	ldr	r3, [pc, #116]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013cfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d00:	7f7b      	ldrb	r3, [r7, #29]
 8013d02:	1c59      	adds	r1, r3, #1
 8013d04:	7779      	strb	r1, [r7, #29]
 8013d06:	4413      	add	r3, r2
 8013d08:	781a      	ldrb	r2, [r3, #0]
 8013d0a:	4b1a      	ldr	r3, [pc, #104]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d0c:	78db      	ldrb	r3, [r3, #3]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d013      	beq.n	8013d3a <nfcipTargetHandleRX+0x286>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013d12:	4b18      	ldr	r3, [pc, #96]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d16:	4b17      	ldr	r3, [pc, #92]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d18:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013d1c:	4b15      	ldr	r3, [pc, #84]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d20:	f04f 30ff 	mov.w	r0, #4294967295
 8013d24:	9002      	str	r0, [sp, #8]
 8013d26:	2004      	movs	r0, #4
 8013d28:	9001      	str	r0, [sp, #4]
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	2100      	movs	r1, #0
 8013d30:	2000      	movs	r0, #0
 8013d32:	f004 fbef 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8013d36:	2302      	movs	r3, #2
 8013d38:	e2f6      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8013d3a:	7f3b      	ldrb	r3, [r7, #28]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	773b      	strb	r3, [r7, #28]
 8013d40:	e01a      	b.n	8013d78 <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8013d42:	7ebb      	ldrb	r3, [r7, #26]
 8013d44:	f003 0304 	and.w	r3, r3, #4
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d015      	beq.n	8013d78 <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013d4c:	4b09      	ldr	r3, [pc, #36]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d52:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013d56:	4b07      	ldr	r3, [pc, #28]	; (8013d74 <nfcipTargetHandleRX+0x2c0>)
 8013d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5e:	9002      	str	r0, [sp, #8]
 8013d60:	2004      	movs	r0, #4
 8013d62:	9001      	str	r0, [sp, #4]
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	460b      	mov	r3, r1
 8013d68:	2100      	movs	r1, #0
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	f004 fbd2 	bl	8018514 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8013d70:	2302      	movs	r3, #2
 8013d72:	e2d9      	b.n	8014328 <nfcipTargetHandleRX+0x874>
 8013d74:	20003814 	.word	0x20003814
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8013d78:	4b96      	ldr	r3, [pc, #600]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013d7a:	791b      	ldrb	r3, [r3, #4]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d027      	beq.n	8013dd0 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8013d80:	4b94      	ldr	r3, [pc, #592]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013d82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d84:	7f7b      	ldrb	r3, [r7, #29]
 8013d86:	1c59      	adds	r1, r3, #1
 8013d88:	7779      	strb	r1, [r7, #29]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	781a      	ldrb	r2, [r3, #0]
 8013d8e:	4b91      	ldr	r3, [pc, #580]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013d90:	78db      	ldrb	r3, [r3, #3]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d104      	bne.n	8013da0 <nfcipTargetHandleRX+0x2ec>
 8013d96:	7ebb      	ldrb	r3, [r7, #26]
 8013d98:	f003 0304 	and.w	r3, r3, #4
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d113      	bne.n	8013dc8 <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013da0:	4b8c      	ldr	r3, [pc, #560]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013da2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013da4:	4b8b      	ldr	r3, [pc, #556]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013da6:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013daa:	4b8a      	ldr	r3, [pc, #552]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dae:	f04f 30ff 	mov.w	r0, #4294967295
 8013db2:	9002      	str	r0, [sp, #8]
 8013db4:	2004      	movs	r0, #4
 8013db6:	9001      	str	r0, [sp, #4]
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	460b      	mov	r3, r1
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	2000      	movs	r0, #0
 8013dc0:	f004 fba8 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	e2af      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8013dc8:	7f3b      	ldrb	r3, [r7, #28]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	773b      	strb	r3, [r7, #28]
 8013dce:	e018      	b.n	8013e02 <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8013dd0:	7ebb      	ldrb	r3, [r7, #26]
 8013dd2:	f003 0308 	and.w	r3, r3, #8
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d013      	beq.n	8013e02 <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013dda:	4b7e      	ldr	r3, [pc, #504]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013ddc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013dde:	4b7d      	ldr	r3, [pc, #500]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013de0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013de4:	4b7b      	ldr	r3, [pc, #492]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013de8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dec:	9002      	str	r0, [sp, #8]
 8013dee:	2004      	movs	r0, #4
 8013df0:	9001      	str	r0, [sp, #4]
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	460b      	mov	r3, r1
 8013df6:	2100      	movs	r1, #0
 8013df8:	2000      	movs	r0, #0
 8013dfa:	f004 fb8b 	bl	8018514 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 8013dfe:	2302      	movs	r3, #2
 8013e00:	e292      	b.n	8014328 <nfcipTargetHandleRX+0x874>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8013e02:	7ebb      	ldrb	r3, [r7, #26]
 8013e04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013e08:	2b40      	cmp	r3, #64	; 0x40
 8013e0a:	f040 80c5 	bne.w	8013f98 <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8013e0e:	7ebb      	ldrb	r3, [r7, #26]
 8013e10:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013e14:	2b40      	cmp	r3, #64	; 0x40
 8013e16:	f040 8083 	bne.w	8013f20 <nfcipTargetHandleRX+0x46c>
 8013e1a:	7ebb      	ldrb	r3, [r7, #26]
 8013e1c:	f003 0310 	and.w	r3, r3, #16
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d17d      	bne.n	8013f20 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8013e24:	4b6b      	ldr	r3, [pc, #428]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	7ebb      	ldrb	r3, [r7, #26]
 8013e2e:	f003 0303 	and.w	r3, r3, #3
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d149      	bne.n	8013eca <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 8013e36:	4b67      	ldr	r3, [pc, #412]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e38:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8013e3c:	f083 0301 	eor.w	r3, r3, #1
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d013      	beq.n	8013e6e <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013e46:	4b63      	ldr	r3, [pc, #396]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013e4a:	4b62      	ldr	r3, [pc, #392]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e4c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013e50:	4b60      	ldr	r3, [pc, #384]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e54:	f04f 30ff 	mov.w	r0, #4294967295
 8013e58:	9002      	str	r0, [sp, #8]
 8013e5a:	2004      	movs	r0, #4
 8013e5c:	9001      	str	r0, [sp, #4]
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	460b      	mov	r3, r1
 8013e62:	2100      	movs	r1, #0
 8013e64:	2000      	movs	r0, #0
 8013e66:	f004 fb55 	bl	8018514 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	e25c      	b.n	8014328 <nfcipTargetHandleRX+0x874>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8013e6e:	4b59      	ldr	r3, [pc, #356]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e74:	f003 030f 	and.w	r3, r3, #15
 8013e78:	330c      	adds	r3, #12
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8013e80:	4a55      	ldr	r2, [pc, #340]	; (8013fd8 <nfcipTargetHandleRX+0x524>)
 8013e82:	fba2 2303 	umull	r2, r3, r2, r3
 8013e86:	0b1b      	lsrs	r3, r3, #12
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	4b52      	ldr	r3, [pc, #328]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e90:	f003 030f 	and.w	r3, r3, #15
 8013e94:	330c      	adds	r3, #12
 8013e96:	2101      	movs	r1, #1
 8013e98:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9c:	494e      	ldr	r1, [pc, #312]	; (8013fd8 <nfcipTargetHandleRX+0x524>)
 8013e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8013ea2:	0b1b      	lsrs	r3, r3, #12
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	08db      	lsrs	r3, r3, #3
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	3301      	adds	r3, #1
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7f0 fb84 	bl	80045c0 <timerCalculateTimer>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	4a46      	ldr	r2, [pc, #280]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013ebc:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8013ebe:	4b45      	ldr	r3, [pc, #276]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013ec0:	220e      	movs	r2, #14
 8013ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	e22e      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 8013eca:	4b42      	ldr	r3, [pc, #264]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013ecc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013ed0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013ed4:	2b80      	cmp	r3, #128	; 0x80
 8013ed6:	d15e      	bne.n	8013f96 <nfcipTargetHandleRX+0x4e2>
 8013ed8:	4b3e      	ldr	r3, [pc, #248]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013eda:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013ede:	f003 0310 	and.w	r3, r3, #16
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d157      	bne.n	8013f96 <nfcipTargetHandleRX+0x4e2>
 8013ee6:	4b3b      	ldr	r3, [pc, #236]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013eec:	3b01      	subs	r3, #1
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	7ebb      	ldrb	r3, [r7, #26]
 8013ef2:	4053      	eors	r3, r2
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	f003 0303 	and.w	r3, r3, #3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d14b      	bne.n	8013f96 <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 8013efe:	4b35      	ldr	r3, [pc, #212]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f04:	3b01      	subs	r3, #1
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	f003 0303 	and.w	r3, r3, #3
 8013f0c:	b2da      	uxtb	r2, r3
 8013f0e:	4b31      	ldr	r3, [pc, #196]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8013f14:	4b2f      	ldr	r3, [pc, #188]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f16:	220f      	movs	r2, #15
 8013f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	e203      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 8013f20:	7ebb      	ldrb	r3, [r7, #26]
 8013f22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013f26:	2b40      	cmp	r3, #64	; 0x40
 8013f28:	d121      	bne.n	8013f6e <nfcipTargetHandleRX+0x4ba>
 8013f2a:	7ebb      	ldrb	r3, [r7, #26]
 8013f2c:	f003 0310 	and.w	r3, r3, #16
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d01c      	beq.n	8013f6e <nfcipTargetHandleRX+0x4ba>
 8013f34:	4b27      	ldr	r3, [pc, #156]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f3a:	3b01      	subs	r3, #1
 8013f3c:	b2da      	uxtb	r2, r3
 8013f3e:	7ebb      	ldrb	r3, [r7, #26]
 8013f40:	4053      	eors	r3, r2
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	f003 0303 	and.w	r3, r3, #3
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d110      	bne.n	8013f6e <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8013f4c:	4b21      	ldr	r3, [pc, #132]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f52:	3b01      	subs	r3, #1
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	f003 0303 	and.w	r3, r3, #3
 8013f5a:	b2da      	uxtb	r2, r3
 8013f5c:	4b1d      	ldr	r3, [pc, #116]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8013f62:	4b1c      	ldr	r3, [pc, #112]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f64:	220f      	movs	r2, #15
 8013f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8013f6a:	2302      	movs	r3, #2
 8013f6c:	e1dc      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8013f6e:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013f72:	4b18      	ldr	r3, [pc, #96]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f74:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013f78:	4b16      	ldr	r3, [pc, #88]	; (8013fd4 <nfcipTargetHandleRX+0x520>)
 8013f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f80:	9002      	str	r0, [sp, #8]
 8013f82:	2004      	movs	r0, #4
 8013f84:	9001      	str	r0, [sp, #4]
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	460b      	mov	r3, r1
 8013f8a:	2100      	movs	r1, #0
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	f004 fac1 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 8013f92:	2302      	movs	r3, #2
 8013f94:	e1c8      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8013f96:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 8013f98:	7ebb      	ldrb	r3, [r7, #26]
 8013f9a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013f9e:	2b80      	cmp	r3, #128	; 0x80
 8013fa0:	f040 80ac 	bne.w	80140fc <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8013fa4:	7ebb      	ldrb	r3, [r7, #26]
 8013fa6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013faa:	2b80      	cmp	r3, #128	; 0x80
 8013fac:	d116      	bne.n	8013fdc <nfcipTargetHandleRX+0x528>
 8013fae:	7ebb      	ldrb	r3, [r7, #26]
 8013fb0:	f003 0310 	and.w	r3, r3, #16
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d111      	bne.n	8013fdc <nfcipTargetHandleRX+0x528>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8013fb8:	2100      	movs	r1, #0
 8013fba:	2080      	movs	r0, #128	; 0x80
 8013fbc:	f7ff fa2e 	bl	801341c <nfcipDEPControlMsg>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	83fb      	strh	r3, [r7, #30]
 8013fc4:	8bfb      	ldrh	r3, [r7, #30]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <nfcipTargetHandleRX+0x51a>
 8013fca:	8bfb      	ldrh	r3, [r7, #30]
 8013fcc:	e1ac      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            return ERR_BUSY;
 8013fce:	2302      	movs	r3, #2
 8013fd0:	e1aa      	b.n	8014328 <nfcipTargetHandleRX+0x874>
 8013fd2:	bf00      	nop
 8013fd4:	20003814 	.word	0x20003814
 8013fd8:	4d542005 	.word	0x4d542005
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8013fdc:	7ebb      	ldrb	r3, [r7, #26]
 8013fde:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013fe2:	2b80      	cmp	r3, #128	; 0x80
 8013fe4:	d175      	bne.n	80140d2 <nfcipTargetHandleRX+0x61e>
 8013fe6:	7ebb      	ldrb	r3, [r7, #26]
 8013fe8:	f003 0310 	and.w	r3, r3, #16
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d070      	beq.n	80140d2 <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8013ff0:	4bab      	ldr	r3, [pc, #684]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8013ff2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013ff6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8013ffa:	2b80      	cmp	r3, #128	; 0x80
 8013ffc:	d17d      	bne.n	80140fa <nfcipTargetHandleRX+0x646>
 8013ffe:	4ba8      	ldr	r3, [pc, #672]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014000:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014004:	f003 0310 	and.w	r3, r3, #16
 8014008:	2b00      	cmp	r3, #0
 801400a:	d076      	beq.n	80140fa <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 801400c:	4ba4      	ldr	r3, [pc, #656]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801400e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8014012:	4ba3      	ldr	r3, [pc, #652]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014014:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8014016:	7f7b      	ldrb	r3, [r7, #29]
 8014018:	1c58      	adds	r0, r3, #1
 801401a:	7778      	strb	r0, [r7, #29]
 801401c:	440b      	add	r3, r1
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	429a      	cmp	r2, r3
 8014022:	d013      	beq.n	801404c <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8014024:	4b9e      	ldr	r3, [pc, #632]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014026:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014028:	4b9d      	ldr	r3, [pc, #628]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801402a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801402e:	4b9c      	ldr	r3, [pc, #624]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014032:	f04f 30ff 	mov.w	r0, #4294967295
 8014036:	9002      	str	r0, [sp, #8]
 8014038:	2004      	movs	r0, #4
 801403a:	9001      	str	r0, [sp, #4]
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	460b      	mov	r3, r1
 8014040:	2100      	movs	r1, #0
 8014042:	2000      	movs	r0, #0
 8014044:	f004 fa66 	bl	8018514 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 8014048:	2302      	movs	r3, #2
 801404a:	e16d      	b.n	8014328 <nfcipTargetHandleRX+0x874>
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 801404c:	4b94      	ldr	r3, [pc, #592]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801404e:	2200      	movs	r2, #0
 8014050:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 8014054:	4b92      	ldr	r3, [pc, #584]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014056:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 801405a:	2b00      	cmp	r3, #0
 801405c:	d005      	beq.n	801406a <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 801405e:	4b90      	ldr	r3, [pc, #576]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014060:	220f      	movs	r2, #15
 8014062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8014066:	2302      	movs	r3, #2
 8014068:	e15e      	b.n	8014328 <nfcipTargetHandleRX+0x874>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 801406a:	4b8d      	ldr	r3, [pc, #564]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801406c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8014070:	461a      	mov	r2, r3
 8014072:	4b8b      	ldr	r3, [pc, #556]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014078:	f003 030f 	and.w	r3, r3, #15
 801407c:	330c      	adds	r3, #12
 801407e:	fa02 f303 	lsl.w	r3, r2, r3
 8014082:	4a88      	ldr	r2, [pc, #544]	; (80142a4 <nfcipTargetHandleRX+0x7f0>)
 8014084:	fba2 2303 	umull	r2, r3, r2, r3
 8014088:	0b1b      	lsrs	r3, r3, #12
 801408a:	b29a      	uxth	r2, r3
 801408c:	4b84      	ldr	r3, [pc, #528]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801408e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8014092:	4619      	mov	r1, r3
 8014094:	4b82      	ldr	r3, [pc, #520]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801409a:	f003 030f 	and.w	r3, r3, #15
 801409e:	330c      	adds	r3, #12
 80140a0:	fa01 f303 	lsl.w	r3, r1, r3
 80140a4:	497f      	ldr	r1, [pc, #508]	; (80142a4 <nfcipTargetHandleRX+0x7f0>)
 80140a6:	fba1 1303 	umull	r1, r3, r1, r3
 80140aa:	0b1b      	lsrs	r3, r3, #12
 80140ac:	3301      	adds	r3, #1
 80140ae:	08db      	lsrs	r3, r3, #3
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3301      	adds	r3, #1
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7f0 fa80 	bl	80045c0 <timerCalculateTimer>
 80140c0:	4603      	mov	r3, r0
 80140c2:	4a77      	ldr	r2, [pc, #476]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80140c4:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80140c6:	4b76      	ldr	r3, [pc, #472]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80140c8:	220e      	movs	r2, #14
 80140ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 80140ce:	2302      	movs	r3, #2
 80140d0:	e12a      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80140d2:	4b73      	ldr	r3, [pc, #460]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80140d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80140d6:	4b72      	ldr	r3, [pc, #456]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80140d8:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80140dc:	4b70      	ldr	r3, [pc, #448]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80140de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140e0:	f04f 30ff 	mov.w	r0, #4294967295
 80140e4:	9002      	str	r0, [sp, #8]
 80140e6:	2004      	movs	r0, #4
 80140e8:	9001      	str	r0, [sp, #4]
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	460b      	mov	r3, r1
 80140ee:	2100      	movs	r1, #0
 80140f0:	2000      	movs	r0, #0
 80140f2:	f004 fa0f 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 80140f6:	2302      	movs	r3, #2
 80140f8:	e116      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80140fa:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80140fc:	7ebb      	ldrb	r3, [r7, #26]
 80140fe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014102:	2b00      	cmp	r3, #0
 8014104:	f040 810f 	bne.w	8014326 <nfcipTargetHandleRX+0x872>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8014108:	4b65      	ldr	r3, [pc, #404]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801410a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801410e:	461a      	mov	r2, r3
 8014110:	7ebb      	ldrb	r3, [r7, #26]
 8014112:	f003 0303 	and.w	r3, r3, #3
 8014116:	429a      	cmp	r2, r3
 8014118:	d06e      	beq.n	80141f8 <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 801411a:	4b61      	ldr	r3, [pc, #388]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801411c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8014120:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014124:	2b80      	cmp	r3, #128	; 0x80
 8014126:	d153      	bne.n	80141d0 <nfcipTargetHandleRX+0x71c>
 8014128:	4b5d      	ldr	r3, [pc, #372]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801412a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801412e:	f003 0310 	and.w	r3, r3, #16
 8014132:	2b00      	cmp	r3, #0
 8014134:	d14c      	bne.n	80141d0 <nfcipTargetHandleRX+0x71c>
 8014136:	4b5a      	ldr	r3, [pc, #360]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801413c:	3b01      	subs	r3, #1
 801413e:	b2da      	uxtb	r2, r3
 8014140:	7ebb      	ldrb	r3, [r7, #26]
 8014142:	4053      	eors	r3, r2
 8014144:	b2db      	uxtb	r3, r3
 8014146:	f003 0303 	and.w	r3, r3, #3
 801414a:	2b00      	cmp	r3, #0
 801414c:	d140      	bne.n	80141d0 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 801414e:	4b54      	ldr	r3, [pc, #336]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014154:	3b01      	subs	r3, #1
 8014156:	b2db      	uxtb	r3, r3
 8014158:	f003 0303 	and.w	r3, r3, #3
 801415c:	b2da      	uxtb	r2, r3
 801415e:	4b50      	ldr	r3, [pc, #320]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 8014164:	7ebb      	ldrb	r3, [r7, #26]
 8014166:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801416a:	2b00      	cmp	r3, #0
 801416c:	d12a      	bne.n	80141c4 <nfcipTargetHandleRX+0x710>
 801416e:	7ebb      	ldrb	r3, [r7, #26]
 8014170:	f003 0310 	and.w	r3, r3, #16
 8014174:	2b00      	cmp	r3, #0
 8014176:	d025      	beq.n	80141c4 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8014178:	4b49      	ldr	r3, [pc, #292]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801417a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801417e:	f003 0303 	and.w	r3, r3, #3
 8014182:	b2db      	uxtb	r3, r3
 8014184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014188:	b2d8      	uxtb	r0, r3
 801418a:	4b45      	ldr	r3, [pc, #276]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801418c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801418e:	7f7b      	ldrb	r3, [r7, #29]
 8014190:	1c59      	adds	r1, r3, #1
 8014192:	7779      	strb	r1, [r7, #29]
 8014194:	4413      	add	r3, r2
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	4619      	mov	r1, r3
 801419a:	f7ff f93f 	bl	801341c <nfcipDEPControlMsg>
 801419e:	4603      	mov	r3, r0
 80141a0:	83fb      	strh	r3, [r7, #30]
 80141a2:	8bfb      	ldrh	r3, [r7, #30]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d001      	beq.n	80141ac <nfcipTargetHandleRX+0x6f8>
 80141a8:	8bfb      	ldrh	r3, [r7, #30]
 80141aa:	e0bd      	b.n	8014328 <nfcipTargetHandleRX+0x874>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80141ac:	4b3c      	ldr	r3, [pc, #240]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141b2:	3301      	adds	r3, #1
 80141b4:	b2db      	uxtb	r3, r3
 80141b6:	f003 0303 	and.w	r3, r3, #3
 80141ba:	b2da      	uxtb	r2, r3
 80141bc:	4b38      	ldr	r3, [pc, #224]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80141c2:	e003      	b.n	80141cc <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80141c4:	4b36      	ldr	r3, [pc, #216]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141c6:	220f      	movs	r2, #15
 80141c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 80141cc:	2302      	movs	r3, #2
 80141ce:	e0ab      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80141d0:	4b33      	ldr	r3, [pc, #204]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80141d4:	4b32      	ldr	r3, [pc, #200]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141d6:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80141da:	4b31      	ldr	r3, [pc, #196]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 80141dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141de:	f04f 30ff 	mov.w	r0, #4294967295
 80141e2:	9002      	str	r0, [sp, #8]
 80141e4:	2004      	movs	r0, #4
 80141e6:	9001      	str	r0, [sp, #4]
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	460b      	mov	r3, r1
 80141ec:	2100      	movs	r1, #0
 80141ee:	2000      	movs	r0, #0
 80141f0:	f004 f990 	bl	8018514 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 80141f4:	2302      	movs	r3, #2
 80141f6:	e097      	b.n	8014328 <nfcipTargetHandleRX+0x874>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80141f8:	7efb      	ldrb	r3, [r7, #27]
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	7f3b      	ldrb	r3, [r7, #28]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	b29b      	uxth	r3, r3
 8014204:	3b04      	subs	r3, #4
 8014206:	b29a      	uxth	r2, r3
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 801420c:	f7ff f966 	bl	80134dc <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8014210:	4b23      	ldr	r3, [pc, #140]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014212:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8014216:	461a      	mov	r2, r3
 8014218:	7f3b      	ldrb	r3, [r7, #28]
 801421a:	3304      	adds	r3, #4
 801421c:	429a      	cmp	r2, r3
 801421e:	d013      	beq.n	8014248 <nfcipTargetHandleRX+0x794>
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00f      	beq.n	8014248 <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8014228:	4b1d      	ldr	r3, [pc, #116]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801422a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801422c:	4a1c      	ldr	r2, [pc, #112]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801422e:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8014232:	1898      	adds	r0, r3, r2
 8014234:	4b1a      	ldr	r3, [pc, #104]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 8014236:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014238:	7f3b      	ldrb	r3, [r7, #28]
 801423a:	3304      	adds	r3, #4
 801423c:	18d1      	adds	r1, r2, r3
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	461a      	mov	r2, r3
 8014244:	f007 f8e0 	bl	801b408 <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8014248:	7ebb      	ldrb	r3, [r7, #26]
 801424a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801424e:	2b00      	cmp	r3, #0
 8014250:	d137      	bne.n	80142c2 <nfcipTargetHandleRX+0x80e>
 8014252:	7ebb      	ldrb	r3, [r7, #26]
 8014254:	f003 0310 	and.w	r3, r3, #16
 8014258:	2b00      	cmp	r3, #0
 801425a:	d032      	beq.n	80142c2 <nfcipTargetHandleRX+0x80e>
        {
            gNfcip.isRxChaining = true;
 801425c:	4b10      	ldr	r3, [pc, #64]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801425e:	2201      	movs	r2, #1
 8014260:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2201      	movs	r2, #1
 8014268:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 801426a:	4b0d      	ldr	r3, [pc, #52]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801426c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014270:	f003 0303 	and.w	r3, r3, #3
 8014274:	b2db      	uxtb	r3, r3
 8014276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801427a:	b2d8      	uxtb	r0, r3
 801427c:	4b08      	ldr	r3, [pc, #32]	; (80142a0 <nfcipTargetHandleRX+0x7ec>)
 801427e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014280:	7f7b      	ldrb	r3, [r7, #29]
 8014282:	1c59      	adds	r1, r3, #1
 8014284:	7779      	strb	r1, [r7, #29]
 8014286:	4413      	add	r3, r2
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	4619      	mov	r1, r3
 801428c:	f7ff f8c6 	bl	801341c <nfcipDEPControlMsg>
 8014290:	4603      	mov	r3, r0
 8014292:	83fb      	strh	r3, [r7, #30]
 8014294:	8bfb      	ldrh	r3, [r7, #30]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d006      	beq.n	80142a8 <nfcipTargetHandleRX+0x7f4>
 801429a:	8bfb      	ldrh	r3, [r7, #30]
 801429c:	e044      	b.n	8014328 <nfcipTargetHandleRX+0x874>
 801429e:	bf00      	nop
 80142a0:	20003814 	.word	0x20003814
 80142a4:	4d542005 	.word	0x4d542005
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80142a8:	4b21      	ldr	r3, [pc, #132]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 80142aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142ae:	3301      	adds	r3, #1
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	f003 0303 	and.w	r3, r3, #3
 80142b6:	b2da      	uxtb	r2, r3
 80142b8:	4b1d      	ldr	r3, [pc, #116]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 80142ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 80142be:	230d      	movs	r3, #13
 80142c0:	e032      	b.n	8014328 <nfcipTargetHandleRX+0x874>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 80142c2:	4b1b      	ldr	r3, [pc, #108]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 80142c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142c8:	f003 030f 	and.w	r3, r3, #15
 80142cc:	330c      	adds	r3, #12
 80142ce:	2201      	movs	r2, #1
 80142d0:	fa02 f303 	lsl.w	r3, r2, r3
 80142d4:	4a17      	ldr	r2, [pc, #92]	; (8014334 <nfcipTargetHandleRX+0x880>)
 80142d6:	fba2 2303 	umull	r2, r3, r2, r3
 80142da:	0b1b      	lsrs	r3, r3, #12
 80142dc:	b29a      	uxth	r2, r3
 80142de:	4b14      	ldr	r3, [pc, #80]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 80142e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142e4:	f003 030f 	and.w	r3, r3, #15
 80142e8:	330c      	adds	r3, #12
 80142ea:	2101      	movs	r1, #1
 80142ec:	fa01 f303 	lsl.w	r3, r1, r3
 80142f0:	4910      	ldr	r1, [pc, #64]	; (8014334 <nfcipTargetHandleRX+0x880>)
 80142f2:	fba1 1303 	umull	r1, r3, r1, r3
 80142f6:	0b1b      	lsrs	r3, r3, #12
 80142f8:	3301      	adds	r3, #1
 80142fa:	08db      	lsrs	r3, r3, #3
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	1ad3      	subs	r3, r2, r3
 8014300:	b29b      	uxth	r3, r3
 8014302:	3301      	adds	r3, #1
 8014304:	b29b      	uxth	r3, r3
 8014306:	4618      	mov	r0, r3
 8014308:	f7f0 f95a 	bl	80045c0 <timerCalculateTimer>
 801430c:	4603      	mov	r3, r0
 801430e:	4a08      	ldr	r2, [pc, #32]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 8014310:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8014312:	4b07      	ldr	r3, [pc, #28]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 8014314:	220e      	movs	r2, #14
 8014316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 801431a:	4b05      	ldr	r3, [pc, #20]	; (8014330 <nfcipTargetHandleRX+0x87c>)
 801431c:	2200      	movs	r2, #0
 801431e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 8014322:	2300      	movs	r3, #0
 8014324:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8014326:	8bfb      	ldrh	r3, [r7, #30]
}
 8014328:	4618      	mov	r0, r3
 801432a:	3720      	adds	r7, #32
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	20003814 	.word	0x20003814
 8014334:	4d542005 	.word	0x4d542005

08014338 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b088      	sub	sp, #32
 801433c:	af00      	add	r7, sp, #0
 801433e:	60b9      	str	r1, [r7, #8]
 8014340:	607a      	str	r2, [r7, #4]
 8014342:	461a      	mov	r2, r3
 8014344:	4603      	mov	r3, r0
 8014346:	73fb      	strb	r3, [r7, #15]
 8014348:	4613      	mov	r3, r2
 801434a:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 8014352:	2307      	movs	r3, #7
 8014354:	e177      	b.n	8014646 <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 801435a:	89bb      	ldrh	r3, [r7, #12]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d002      	beq.n	8014366 <nfcipTx+0x2e>
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d102      	bne.n	801436c <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	3305      	adds	r3, #5
 801436a:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 801436c:	2300      	movs	r3, #0
 801436e:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8014370:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014374:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 801437a:	4aa0      	ldr	r2, [pc, #640]	; (80145fc <nfcipTx+0x2c4>)
 801437c:	7bfb      	ldrb	r3, [r7, #15]
 801437e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8014382:	4b9e      	ldr	r3, [pc, #632]	; (80145fc <nfcipTx+0x2c4>)
 8014384:	22ff      	movs	r2, #255	; 0xff
 8014386:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 801438a:	7bfb      	ldrb	r3, [r7, #15]
 801438c:	2b0b      	cmp	r3, #11
 801438e:	f200 8120 	bhi.w	80145d2 <nfcipTx+0x29a>
 8014392:	a201      	add	r2, pc, #4	; (adr r2, 8014398 <nfcipTx+0x60>)
 8014394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014398:	080143c9 	.word	0x080143c9
 801439c:	080143c9 	.word	0x080143c9
 80143a0:	080144bd 	.word	0x080144bd
 80143a4:	080144f3 	.word	0x080144f3
 80143a8:	080144f3 	.word	0x080144f3
 80143ac:	080144f3 	.word	0x080144f3
 80143b0:	0801451b 	.word	0x0801451b
 80143b4:	0801451b 	.word	0x0801451b
 80143b8:	08014503 	.word	0x08014503
 80143bc:	08014503 	.word	0x08014503
 80143c0:	08014503 	.word	0x08014503
 80143c4:	08014503 	.word	0x08014503
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 80143c8:	220a      	movs	r2, #10
 80143ca:	2100      	movs	r1, #0
 80143cc:	6978      	ldr	r0, [r7, #20]
 80143ce:	f007 f835 	bl	801b43c <memset>
 80143d2:	4b8a      	ldr	r3, [pc, #552]	; (80145fc <nfcipTx+0x2c4>)
 80143d4:	7c5b      	ldrb	r3, [r3, #17]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d006      	beq.n	80143e8 <nfcipTx+0xb0>
 80143da:	4b88      	ldr	r3, [pc, #544]	; (80145fc <nfcipTx+0x2c4>)
 80143dc:	7c5b      	ldrb	r3, [r3, #17]
 80143de:	461a      	mov	r2, r3
 80143e0:	4987      	ldr	r1, [pc, #540]	; (8014600 <nfcipTx+0x2c8>)
 80143e2:	6978      	ldr	r0, [r7, #20]
 80143e4:	f007 f802 	bl	801b3ec <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80143e8:	8bfb      	ldrh	r3, [r7, #30]
 80143ea:	330a      	adds	r3, #10
 80143ec:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 80143ee:	8bfb      	ldrh	r3, [r7, #30]
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	83fa      	strh	r2, [r7, #30]
 80143f4:	461a      	mov	r2, r3
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	4413      	add	r3, r2
 80143fa:	4a80      	ldr	r2, [pc, #512]	; (80145fc <nfcipTx+0x2c4>)
 80143fc:	78d2      	ldrb	r2, [r2, #3]
 80143fe:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 8014400:	8bfb      	ldrh	r3, [r7, #30]
 8014402:	1c5a      	adds	r2, r3, #1
 8014404:	83fa      	strh	r2, [r7, #30]
 8014406:	461a      	mov	r2, r3
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	4413      	add	r3, r2
 801440c:	4a7b      	ldr	r2, [pc, #492]	; (80145fc <nfcipTx+0x2c4>)
 801440e:	7952      	ldrb	r2, [r2, #5]
 8014410:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 8014412:	8bfb      	ldrh	r3, [r7, #30]
 8014414:	1c5a      	adds	r2, r3, #1
 8014416:	83fa      	strh	r2, [r7, #30]
 8014418:	461a      	mov	r2, r3
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	4413      	add	r3, r2
 801441e:	4a77      	ldr	r2, [pc, #476]	; (80145fc <nfcipTx+0x2c4>)
 8014420:	7992      	ldrb	r2, [r2, #6]
 8014422:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8014424:	7bfb      	ldrb	r3, [r7, #15]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d109      	bne.n	801443e <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 801442a:	8bfb      	ldrh	r3, [r7, #30]
 801442c:	1c5a      	adds	r2, r3, #1
 801442e:	83fa      	strh	r2, [r7, #30]
 8014430:	461a      	mov	r2, r3
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	4413      	add	r3, r2
 8014436:	4a71      	ldr	r2, [pc, #452]	; (80145fc <nfcipTx+0x2c4>)
 8014438:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 801443c:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 801443e:	4b6f      	ldr	r3, [pc, #444]	; (80145fc <nfcipTx+0x2c4>)
 8014440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014444:	2b00      	cmp	r3, #0
 8014446:	d023      	beq.n	8014490 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8014448:	4b6c      	ldr	r3, [pc, #432]	; (80145fc <nfcipTx+0x2c4>)
 801444a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801444e:	011b      	lsls	r3, r3, #4
 8014450:	b2db      	uxtb	r3, r3
 8014452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014456:	b2da      	uxtb	r2, r3
 8014458:	8bfb      	ldrh	r3, [r7, #30]
 801445a:	1c59      	adds	r1, r3, #1
 801445c:	83f9      	strh	r1, [r7, #30]
 801445e:	4619      	mov	r1, r3
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	440b      	add	r3, r1
 8014464:	f042 0202 	orr.w	r2, r2, #2
 8014468:	b2d2      	uxtb	r2, r2
 801446a:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 801446c:	8bfb      	ldrh	r3, [r7, #30]
 801446e:	697a      	ldr	r2, [r7, #20]
 8014470:	4413      	add	r3, r2
 8014472:	4a62      	ldr	r2, [pc, #392]	; (80145fc <nfcipTx+0x2c4>)
 8014474:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8014478:	4962      	ldr	r1, [pc, #392]	; (8014604 <nfcipTx+0x2cc>)
 801447a:	4618      	mov	r0, r3
 801447c:	f006 ffb6 	bl	801b3ec <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8014480:	4b5e      	ldr	r3, [pc, #376]	; (80145fc <nfcipTx+0x2c4>)
 8014482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014486:	b29a      	uxth	r2, r3
 8014488:	8bfb      	ldrh	r3, [r7, #30]
 801448a:	4413      	add	r3, r2
 801448c:	83fb      	strh	r3, [r7, #30]
 801448e:	e00e      	b.n	80144ae <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8014490:	4b5a      	ldr	r3, [pc, #360]	; (80145fc <nfcipTx+0x2c4>)
 8014492:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014496:	011b      	lsls	r3, r3, #4
 8014498:	b2da      	uxtb	r2, r3
 801449a:	8bfb      	ldrh	r3, [r7, #30]
 801449c:	1c59      	adds	r1, r3, #1
 801449e:	83f9      	strh	r1, [r7, #30]
 80144a0:	4619      	mov	r1, r3
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	440b      	add	r3, r1
 80144a6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80144aa:	b2d2      	uxtb	r2, r2
 80144ac:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 80144ae:	8bfb      	ldrh	r3, [r7, #30]
 80144b0:	3302      	adds	r3, #2
 80144b2:	2b40      	cmp	r3, #64	; 0x40
 80144b4:	f240 808f 	bls.w	80145d6 <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 80144b8:	2307      	movs	r3, #7
 80144ba:	e0c4      	b.n	8014646 <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 80144bc:	220a      	movs	r2, #10
 80144be:	2100      	movs	r1, #0
 80144c0:	6978      	ldr	r0, [r7, #20]
 80144c2:	f006 ffbb 	bl	801b43c <memset>
 80144c6:	4b4d      	ldr	r3, [pc, #308]	; (80145fc <nfcipTx+0x2c4>)
 80144c8:	7c5b      	ldrb	r3, [r3, #17]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d006      	beq.n	80144dc <nfcipTx+0x1a4>
 80144ce:	4b4b      	ldr	r3, [pc, #300]	; (80145fc <nfcipTx+0x2c4>)
 80144d0:	7c5b      	ldrb	r3, [r3, #17]
 80144d2:	461a      	mov	r2, r3
 80144d4:	494a      	ldr	r1, [pc, #296]	; (8014600 <nfcipTx+0x2c8>)
 80144d6:	6978      	ldr	r0, [r7, #20]
 80144d8:	f006 ff88 	bl	801b3ec <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80144dc:	8bfb      	ldrh	r3, [r7, #30]
 80144de:	330a      	adds	r3, #10
 80144e0:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	3b01      	subs	r3, #1
 80144e6:	61bb      	str	r3, [r7, #24]
 80144e8:	4b44      	ldr	r3, [pc, #272]	; (80145fc <nfcipTx+0x2c4>)
 80144ea:	78da      	ldrb	r2, [r3, #3]
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	701a      	strb	r2, [r3, #0]
            break;
 80144f0:	e076      	b.n	80145e0 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	3b01      	subs	r3, #1
 80144f6:	61bb      	str	r3, [r7, #24]
 80144f8:	4b40      	ldr	r3, [pc, #256]	; (80145fc <nfcipTx+0x2c4>)
 80144fa:	78da      	ldrb	r2, [r3, #3]
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	701a      	strb	r2, [r3, #0]
            break;
 8014500:	e06e      	b.n	80145e0 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8014502:	4b3e      	ldr	r3, [pc, #248]	; (80145fc <nfcipTx+0x2c4>)
 8014504:	78db      	ldrb	r3, [r3, #3]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d067      	beq.n	80145da <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	3b01      	subs	r3, #1
 801450e:	61bb      	str	r3, [r7, #24]
 8014510:	4b3a      	ldr	r3, [pc, #232]	; (80145fc <nfcipTx+0x2c4>)
 8014512:	78da      	ldrb	r2, [r3, #3]
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014518:	e05f      	b.n	80145da <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 801451a:	4b38      	ldr	r3, [pc, #224]	; (80145fc <nfcipTx+0x2c4>)
 801451c:	78db      	ldrb	r3, [r3, #3]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d003      	beq.n	801452a <nfcipTx+0x1f2>
 8014522:	7cfb      	ldrb	r3, [r7, #19]
 8014524:	f043 0304 	orr.w	r3, r3, #4
 8014528:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 801452a:	4b34      	ldr	r3, [pc, #208]	; (80145fc <nfcipTx+0x2c4>)
 801452c:	791b      	ldrb	r3, [r3, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d003      	beq.n	801453a <nfcipTx+0x202>
 8014532:	7cfb      	ldrb	r3, [r7, #19]
 8014534:	f043 0308 	orr.w	r3, r3, #8
 8014538:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 801453a:	4b30      	ldr	r3, [pc, #192]	; (80145fc <nfcipTx+0x2c4>)
 801453c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8014540:	2b00      	cmp	r3, #0
 8014542:	d008      	beq.n	8014556 <nfcipTx+0x21e>
 8014544:	7cfb      	ldrb	r3, [r7, #19]
 8014546:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d103      	bne.n	8014556 <nfcipTx+0x21e>
 801454e:	7cfb      	ldrb	r3, [r7, #19]
 8014550:	f043 0310 	orr.w	r3, r3, #16
 8014554:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8014556:	4a29      	ldr	r2, [pc, #164]	; (80145fc <nfcipTx+0x2c4>)
 8014558:	7cfb      	ldrb	r3, [r7, #19]
 801455a:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 801455e:	7cfb      	ldrb	r3, [r7, #19]
 8014560:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8014564:	2b80      	cmp	r3, #128	; 0x80
 8014566:	d104      	bne.n	8014572 <nfcipTx+0x23a>
 8014568:	7cfb      	ldrb	r3, [r7, #19]
 801456a:	f003 0310 	and.w	r3, r3, #16
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8014572:	4a22      	ldr	r2, [pc, #136]	; (80145fc <nfcipTx+0x2c4>)
 8014574:	7cfb      	ldrb	r3, [r7, #19]
 8014576:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 801457a:	4b20      	ldr	r3, [pc, #128]	; (80145fc <nfcipTx+0x2c4>)
 801457c:	791b      	ldrb	r3, [r3, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d006      	beq.n	8014590 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	3b01      	subs	r3, #1
 8014586:	61bb      	str	r3, [r7, #24]
 8014588:	4b1c      	ldr	r3, [pc, #112]	; (80145fc <nfcipTx+0x2c4>)
 801458a:	791a      	ldrb	r2, [r3, #4]
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8014590:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <nfcipTx+0x2c4>)
 8014592:	78db      	ldrb	r3, [r3, #3]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d006      	beq.n	80145a6 <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	3b01      	subs	r3, #1
 801459c:	61bb      	str	r3, [r7, #24]
 801459e:	4b17      	ldr	r3, [pc, #92]	; (80145fc <nfcipTx+0x2c4>)
 80145a0:	78da      	ldrb	r2, [r3, #3]
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	61bb      	str	r3, [r7, #24]
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	7cfa      	ldrb	r2, [r7, #19]
 80145b0:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 80145b2:	89bb      	ldrh	r3, [r7, #12]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d112      	bne.n	80145de <nfcipTx+0x2a6>
 80145b8:	4b10      	ldr	r3, [pc, #64]	; (80145fc <nfcipTx+0x2c4>)
 80145ba:	789b      	ldrb	r3, [r3, #2]
 80145bc:	f003 0304 	and.w	r3, r3, #4
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00c      	beq.n	80145de <nfcipTx+0x2a6>
 80145c4:	7cfb      	ldrb	r3, [r7, #19]
 80145c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d107      	bne.n	80145de <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 80145ce:	2307      	movs	r3, #7
 80145d0:	e039      	b.n	8014646 <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 80145d2:	2307      	movs	r3, #7
 80145d4:	e037      	b.n	8014646 <nfcipTx+0x30e>
            break;
 80145d6:	bf00      	nop
 80145d8:	e002      	b.n	80145e0 <nfcipTx+0x2a8>
            break;
 80145da:	bf00      	nop
 80145dc:	e000      	b.n	80145e0 <nfcipTx+0x2a8>
            break;
 80145de:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	3b01      	subs	r3, #1
 80145e4:	61bb      	str	r3, [r7, #24]
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	7bfa      	ldrb	r2, [r7, #15]
 80145ea:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80145ec:	7bfb      	ldrb	r3, [r7, #15]
 80145ee:	f003 0301 	and.w	r3, r3, #1
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d107      	bne.n	8014608 <nfcipTx+0x2d0>
 80145f8:	22d4      	movs	r2, #212	; 0xd4
 80145fa:	e006      	b.n	801460a <nfcipTx+0x2d2>
 80145fc:	20003814 	.word	0x20003814
 8014600:	2000381b 	.word	0x2000381b
 8014604:	20003826 	.word	0x20003826
 8014608:	22d5      	movs	r2, #213	; 0xd5
 801460a:	69bb      	ldr	r3, [r7, #24]
 801460c:	3b01      	subs	r3, #1
 801460e:	61bb      	str	r3, [r7, #24]
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	1ad3      	subs	r3, r2, r3
 801461a:	b29a      	uxth	r2, r3
 801461c:	89bb      	ldrh	r3, [r7, #12]
 801461e:	4413      	add	r3, r2
 8014620:	b29a      	uxth	r2, r3
 8014622:	8bfb      	ldrh	r3, [r7, #30]
 8014624:	4413      	add	r3, r2
 8014626:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8014628:	4b09      	ldr	r3, [pc, #36]	; (8014650 <nfcipTx+0x318>)
 801462a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801462e:	8bfa      	ldrh	r2, [r7, #30]
 8014630:	429a      	cmp	r2, r3
 8014632:	d901      	bls.n	8014638 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8014634:	2318      	movs	r3, #24
 8014636:	e006      	b.n	8014646 <nfcipTx+0x30e>
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8014638:	8bfb      	ldrh	r3, [r7, #30]
 801463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801463c:	4619      	mov	r1, r3
 801463e:	69b8      	ldr	r0, [r7, #24]
 8014640:	f000 fe2a 	bl	8015298 <nfcipDataTx>
 8014644:	4603      	mov	r3, r0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3720      	adds	r7, #32
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	20003814 	.word	0x20003814

08014654 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d034      	beq.n	80146cc <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8014662:	2250      	movs	r2, #80	; 0x50
 8014664:	6879      	ldr	r1, [r7, #4]
 8014666:	481b      	ldr	r0, [pc, #108]	; (80146d4 <nfcipConfig+0x80>)
 8014668:	f006 fec0 	bl	801b3ec <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 801466c:	4b19      	ldr	r3, [pc, #100]	; (80146d4 <nfcipConfig+0x80>)
 801466e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014672:	2b0e      	cmp	r3, #14
 8014674:	bf28      	it	cs
 8014676:	230e      	movcs	r3, #14
 8014678:	b2da      	uxtb	r2, r3
 801467a:	4b16      	ldr	r3, [pc, #88]	; (80146d4 <nfcipConfig+0x80>)
 801467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8014680:	4b14      	ldr	r3, [pc, #80]	; (80146d4 <nfcipConfig+0x80>)
 8014682:	78db      	ldrb	r3, [r3, #3]
 8014684:	2b0e      	cmp	r3, #14
 8014686:	bf28      	it	cs
 8014688:	230e      	movcs	r3, #14
 801468a:	b2da      	uxtb	r2, r3
 801468c:	4b11      	ldr	r3, [pc, #68]	; (80146d4 <nfcipConfig+0x80>)
 801468e:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8014690:	4b10      	ldr	r3, [pc, #64]	; (80146d4 <nfcipConfig+0x80>)
 8014692:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014696:	3301      	adds	r3, #1
 8014698:	019b      	lsls	r3, r3, #6
 801469a:	2bfd      	cmp	r3, #253	; 0xfd
 801469c:	d807      	bhi.n	80146ae <nfcipConfig+0x5a>
 801469e:	4b0d      	ldr	r3, [pc, #52]	; (80146d4 <nfcipConfig+0x80>)
 80146a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80146a4:	3301      	adds	r3, #1
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	019b      	lsls	r3, r3, #6
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	e000      	b.n	80146b0 <nfcipConfig+0x5c>
 80146ae:	23fe      	movs	r3, #254	; 0xfe
 80146b0:	4a08      	ldr	r2, [pc, #32]	; (80146d4 <nfcipConfig+0x80>)
 80146b2:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 80146b6:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <nfcipConfig+0x80>)
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d101      	bne.n	80146c2 <nfcipConfig+0x6e>
 80146be:	220a      	movs	r2, #10
 80146c0:	e000      	b.n	80146c4 <nfcipConfig+0x70>
 80146c2:	2201      	movs	r2, #1
 80146c4:	4b03      	ldr	r3, [pc, #12]	; (80146d4 <nfcipConfig+0x80>)
 80146c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80146ca:	e000      	b.n	80146ce <nfcipConfig+0x7a>
        return;
 80146cc:	bf00      	nop
}
 80146ce:	3708      	adds	r7, #8
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	20003814 	.word	0x20003814

080146d8 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 80146d8:	b5b0      	push	{r4, r5, r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af02      	add	r7, sp, #8
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 80146e2:	2314      	movs	r3, #20
 80146e4:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 80146e6:	4b93      	ldr	r3, [pc, #588]	; (8014934 <nfcipRun+0x25c>)
 80146e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146ec:	2b10      	cmp	r3, #16
 80146ee:	f200 8117 	bhi.w	8014920 <nfcipRun+0x248>
 80146f2:	a201      	add	r2, pc, #4	; (adr r2, 80146f8 <nfcipRun+0x20>)
 80146f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146f8:	0801473d 	.word	0x0801473d
 80146fc:	08014921 	.word	0x08014921
 8014700:	08014921 	.word	0x08014921
 8014704:	08014921 	.word	0x08014921
 8014708:	0801473d 	.word	0x0801473d
 801470c:	08014741 	.word	0x08014741
 8014710:	0801479d 	.word	0x0801479d
 8014714:	08014921 	.word	0x08014921
 8014718:	08014921 	.word	0x08014921
 801471c:	08014921 	.word	0x08014921
 8014720:	08014921 	.word	0x08014921
 8014724:	08014921 	.word	0x08014921
 8014728:	0801473d 	.word	0x0801473d
 801472c:	080148e7 	.word	0x080148e7
 8014730:	080147c5 	.word	0x080147c5
 8014734:	0801486f 	.word	0x0801486f
 8014738:	0801473d 	.word	0x0801473d
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 801473c:	2300      	movs	r3, #0
 801473e:	e0f5      	b.n	801492c <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8014740:	4b7c      	ldr	r3, [pc, #496]	; (8014934 <nfcipRun+0x25c>)
 8014742:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8014744:	4b7b      	ldr	r3, [pc, #492]	; (8014934 <nfcipRun+0x25c>)
 8014746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014748:	4a7a      	ldr	r2, [pc, #488]	; (8014934 <nfcipRun+0x25c>)
 801474a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 801474e:	189c      	adds	r4, r3, r2
 8014750:	4b78      	ldr	r3, [pc, #480]	; (8014934 <nfcipRun+0x25c>)
 8014752:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8014756:	4b77      	ldr	r3, [pc, #476]	; (8014934 <nfcipRun+0x25c>)
 8014758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801475c:	f003 0303 	and.w	r3, r3, #3
 8014760:	b2db      	uxtb	r3, r3
 8014762:	4a74      	ldr	r2, [pc, #464]	; (8014934 <nfcipRun+0x25c>)
 8014764:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8014766:	4a73      	ldr	r2, [pc, #460]	; (8014934 <nfcipRun+0x25c>)
 8014768:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801476a:	440a      	add	r2, r1
 801476c:	9201      	str	r2, [sp, #4]
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	462b      	mov	r3, r5
 8014772:	4622      	mov	r2, r4
 8014774:	4601      	mov	r1, r0
 8014776:	2006      	movs	r0, #6
 8014778:	f7ff fdde 	bl	8014338 <nfcipTx>
 801477c:	4603      	mov	r3, r0
 801477e:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 8014780:	89fb      	ldrh	r3, [r7, #14]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d005      	beq.n	8014792 <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8014786:	4b6b      	ldr	r3, [pc, #428]	; (8014934 <nfcipRun+0x25c>)
 8014788:	2204      	movs	r2, #4
 801478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 801478e:	89fb      	ldrh	r3, [r7, #14]
 8014790:	e0cc      	b.n	801492c <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 8014792:	4b68      	ldr	r3, [pc, #416]	; (8014934 <nfcipRun+0x25c>)
 8014794:	2206      	movs	r2, #6
 8014796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 801479a:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 801479c:	2000      	movs	r0, #0
 801479e:	f000 fd9b 	bl	80152d8 <nfcipDataRx>
 80147a2:	4603      	mov	r3, r0
 80147a4:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 80147a6:	89fb      	ldrh	r3, [r7, #14]
 80147a8:	2b02      	cmp	r3, #2
 80147aa:	f000 80bb 	beq.w	8014924 <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 80147ae:	4b61      	ldr	r3, [pc, #388]	; (8014934 <nfcipRun+0x25c>)
 80147b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147b2:	8819      	ldrh	r1, [r3, #0]
 80147b4:	89f8      	ldrh	r0, [r7, #14]
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	f7fe feab 	bl	8013514 <nfcipInitiatorHandleDEP>
 80147be:	4603      	mov	r3, r0
 80147c0:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80147c2:	e0af      	b.n	8014924 <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 80147c4:	4b5b      	ldr	r3, [pc, #364]	; (8014934 <nfcipRun+0x25c>)
 80147c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7ef ff07 	bl	80045dc <timerIsExpired>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f083 0301 	eor.w	r3, r3, #1
 80147d4:	b2db      	uxtb	r3, r3
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <nfcipRun+0x106>
            {
                return ERR_BUSY;
 80147da:	2302      	movs	r3, #2
 80147dc:	e0a6      	b.n	801492c <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 80147de:	4b55      	ldr	r3, [pc, #340]	; (8014934 <nfcipRun+0x25c>)
 80147e0:	789b      	ldrb	r3, [r3, #2]
 80147e2:	f003 0301 	and.w	r3, r3, #1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d001      	beq.n	80147ee <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 80147ea:	2304      	movs	r3, #4
 80147ec:	e09e      	b.n	801492c <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 80147ee:	4b51      	ldr	r3, [pc, #324]	; (8014934 <nfcipRun+0x25c>)
 80147f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80147f4:	1c5a      	adds	r2, r3, #1
 80147f6:	b2d1      	uxtb	r1, r2
 80147f8:	4a4e      	ldr	r2, [pc, #312]	; (8014934 <nfcipRun+0x25c>)
 80147fa:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 80147fe:	2b03      	cmp	r3, #3
 8014800:	d901      	bls.n	8014806 <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 8014802:	230b      	movs	r3, #11
 8014804:	e092      	b.n	801492c <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8014806:	4b4b      	ldr	r3, [pc, #300]	; (8014934 <nfcipRun+0x25c>)
 8014808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801480c:	f003 030f 	and.w	r3, r3, #15
 8014810:	330c      	adds	r3, #12
 8014812:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8014816:	fa22 f303 	lsr.w	r3, r2, r3
 801481a:	2b3a      	cmp	r3, #58	; 0x3a
 801481c:	d80b      	bhi.n	8014836 <nfcipRun+0x15e>
 801481e:	4b45      	ldr	r3, [pc, #276]	; (8014934 <nfcipRun+0x25c>)
 8014820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014824:	f003 030f 	and.w	r3, r3, #15
 8014828:	330c      	adds	r3, #12
 801482a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801482e:	fa22 f303 	lsr.w	r3, r2, r3
 8014832:	b2db      	uxtb	r3, r3
 8014834:	e000      	b.n	8014838 <nfcipRun+0x160>
 8014836:	233b      	movs	r3, #59	; 0x3b
 8014838:	4a3e      	ldr	r2, [pc, #248]	; (8014934 <nfcipRun+0x25c>)
 801483a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 801483e:	4b3d      	ldr	r3, [pc, #244]	; (8014934 <nfcipRun+0x25c>)
 8014840:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8014844:	4619      	mov	r1, r3
 8014846:	2090      	movs	r0, #144	; 0x90
 8014848:	f7fe fde8 	bl	801341c <nfcipDEPControlMsg>
 801484c:	4603      	mov	r3, r0
 801484e:	81fb      	strh	r3, [r7, #14]
 8014850:	89fb      	ldrh	r3, [r7, #14]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d001      	beq.n	801485a <nfcipRun+0x182>
 8014856:	89fb      	ldrh	r3, [r7, #14]
 8014858:	e068      	b.n	801492c <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 801485a:	4b36      	ldr	r3, [pc, #216]	; (8014934 <nfcipRun+0x25c>)
 801485c:	2201      	movs	r2, #1
 801485e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 8014862:	4b34      	ldr	r3, [pc, #208]	; (8014934 <nfcipRun+0x25c>)
 8014864:	220d      	movs	r2, #13
 8014866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 801486a:	2302      	movs	r3, #2
 801486c:	e05e      	b.n	801492c <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 801486e:	4b31      	ldr	r3, [pc, #196]	; (8014934 <nfcipRun+0x25c>)
 8014870:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8014872:	4b30      	ldr	r3, [pc, #192]	; (8014934 <nfcipRun+0x25c>)
 8014874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014876:	4a2f      	ldr	r2, [pc, #188]	; (8014934 <nfcipRun+0x25c>)
 8014878:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 801487c:	441a      	add	r2, r3
 801487e:	4b2d      	ldr	r3, [pc, #180]	; (8014934 <nfcipRun+0x25c>)
 8014880:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 8014884:	4b2b      	ldr	r3, [pc, #172]	; (8014934 <nfcipRun+0x25c>)
 8014886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801488a:	f003 0303 	and.w	r3, r3, #3
 801488e:	b2db      	uxtb	r3, r3
 8014890:	f04f 34ff 	mov.w	r4, #4294967295
 8014894:	9401      	str	r4, [sp, #4]
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	4603      	mov	r3, r0
 801489a:	2007      	movs	r0, #7
 801489c:	f7ff fd4c 	bl	8014338 <nfcipTx>
 80148a0:	4603      	mov	r3, r0
 80148a2:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 80148a4:	4b23      	ldr	r3, [pc, #140]	; (8014934 <nfcipRun+0x25c>)
 80148a6:	2200      	movs	r2, #0
 80148a8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 80148ac:	4b21      	ldr	r3, [pc, #132]	; (8014934 <nfcipRun+0x25c>)
 80148ae:	2200      	movs	r2, #0
 80148b0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80148b4:	4b1f      	ldr	r3, [pc, #124]	; (8014934 <nfcipRun+0x25c>)
 80148b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148ba:	3301      	adds	r3, #1
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	f003 0303 	and.w	r3, r3, #3
 80148c2:	b2da      	uxtb	r2, r3
 80148c4:	4b1b      	ldr	r3, [pc, #108]	; (8014934 <nfcipRun+0x25c>)
 80148c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 80148ca:	89fb      	ldrh	r3, [r7, #14]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d005      	beq.n	80148dc <nfcipRun+0x204>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 80148d0:	4b18      	ldr	r3, [pc, #96]	; (8014934 <nfcipRun+0x25c>)
 80148d2:	220c      	movs	r2, #12
 80148d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 80148d8:	89fb      	ldrh	r3, [r7, #14]
 80148da:	e027      	b.n	801492c <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 80148dc:	4b15      	ldr	r3, [pc, #84]	; (8014934 <nfcipRun+0x25c>)
 80148de:	220d      	movs	r2, #13
 80148e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 80148e4:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 80148e6:	4b13      	ldr	r3, [pc, #76]	; (8014934 <nfcipRun+0x25c>)
 80148e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d006      	beq.n	80148fe <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 80148f0:	4b10      	ldr	r3, [pc, #64]	; (8014934 <nfcipRun+0x25c>)
 80148f2:	2200      	movs	r2, #0
 80148f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 80148f8:	2300      	movs	r3, #0
 80148fa:	81fb      	strh	r3, [r7, #14]
 80148fc:	e004      	b.n	8014908 <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 80148fe:	2000      	movs	r0, #0
 8014900:	f000 fcea 	bl	80152d8 <nfcipDataRx>
 8014904:	4603      	mov	r3, r0
 8014906:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 8014908:	89fb      	ldrh	r3, [r7, #14]
 801490a:	2b02      	cmp	r3, #2
 801490c:	d00c      	beq.n	8014928 <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 801490e:	89fb      	ldrh	r3, [r7, #14]
 8014910:	683a      	ldr	r2, [r7, #0]
 8014912:	6879      	ldr	r1, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff f8cd 	bl	8013ab4 <nfcipTargetHandleRX>
 801491a:	4603      	mov	r3, r0
 801491c:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 801491e:	e003      	b.n	8014928 <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8014920:	bf00      	nop
 8014922:	e002      	b.n	801492a <nfcipRun+0x252>
            break;
 8014924:	bf00      	nop
 8014926:	e000      	b.n	801492a <nfcipRun+0x252>
            break;
 8014928:	bf00      	nop
    }
    return ret;
 801492a:	89fb      	ldrh	r3, [r7, #14]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bdb0      	pop	{r4, r5, r7, pc}
 8014934:	20003814 	.word	0x20003814

08014938 <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 8014938:	b580      	push	{r7, lr}
 801493a:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 801493c:	4b28      	ldr	r3, [pc, #160]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801493e:	2200      	movs	r2, #0
 8014940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 8014944:	4b26      	ldr	r3, [pc, #152]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014946:	2200      	movs	r2, #0
 8014948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 801494c:	4b24      	ldr	r3, [pc, #144]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801494e:	2200      	movs	r2, #0
 8014950:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 8014954:	4b22      	ldr	r3, [pc, #136]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014956:	2200      	movs	r2, #0
 8014958:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 801495c:	4b20      	ldr	r3, [pc, #128]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801495e:	2200      	movs	r2, #0
 8014960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8014964:	4b1e      	ldr	r3, [pc, #120]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014966:	2202      	movs	r2, #2
 8014968:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 801496a:	4b1d      	ldr	r3, [pc, #116]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801496c:	2200      	movs	r2, #0
 801496e:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8014970:	4b1b      	ldr	r3, [pc, #108]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014972:	2200      	movs	r2, #0
 8014974:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8014976:	4b1a      	ldr	r3, [pc, #104]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014978:	2200      	movs	r2, #0
 801497a:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801497c:	4b18      	ldr	r3, [pc, #96]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801497e:	2200      	movs	r2, #0
 8014980:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 8014982:	4b17      	ldr	r3, [pc, #92]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 8014984:	2203      	movs	r2, #3
 8014986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 801498a:	4b15      	ldr	r3, [pc, #84]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801498c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014990:	3301      	adds	r3, #1
 8014992:	019b      	lsls	r3, r3, #6
 8014994:	2bfd      	cmp	r3, #253	; 0xfd
 8014996:	d807      	bhi.n	80149a8 <rfalNfcDepInitialize+0x70>
 8014998:	4b11      	ldr	r3, [pc, #68]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 801499a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801499e:	3301      	adds	r3, #1
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	019b      	lsls	r3, r3, #6
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	e000      	b.n	80149aa <rfalNfcDepInitialize+0x72>
 80149a8:	23fe      	movs	r3, #254	; 0xfe
 80149aa:	4a0d      	ldr	r2, [pc, #52]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149ac:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 80149b0:	4b0b      	ldr	r3, [pc, #44]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149b2:	2200      	movs	r2, #0
 80149b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 80149b8:	4b09      	ldr	r3, [pc, #36]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80149be:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 80149c0:	4b07      	ldr	r3, [pc, #28]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80149c6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 80149c8:	4b05      	ldr	r3, [pc, #20]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149ca:	2200      	movs	r2, #0
 80149cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 80149d0:	4b03      	ldr	r3, [pc, #12]	; (80149e0 <rfalNfcDepInitialize+0xa8>)
 80149d2:	2200      	movs	r2, #0
 80149d4:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 80149d6:	f7fe fd81 	bl	80134dc <nfcipClearCounters>
}
 80149da:	bf00      	nop
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	20003814 	.word	0x20003814

080149e4 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	7ada      	ldrb	r2, [r3, #11]
 80149f0:	4b2f      	ldr	r3, [pc, #188]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 80149f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	4a2d      	ldr	r2, [pc, #180]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 80149fc:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	4a2b      	ldr	r2, [pc, #172]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a04:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	891a      	ldrh	r2, [r3, #8]
 8014a0a:	4b29      	ldr	r3, [pc, #164]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	8a1a      	ldrh	r2, [r3, #16]
 8014a14:	4b26      	ldr	r3, [pc, #152]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	7a9a      	ldrb	r2, [r3, #10]
 8014a1e:	4b24      	ldr	r3, [pc, #144]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	7c9a      	ldrb	r2, [r3, #18]
 8014a28:	4b21      	ldr	r3, [pc, #132]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a2a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	2bff      	cmp	r3, #255	; 0xff
 8014a34:	d007      	beq.n	8014a46 <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	2b0e      	cmp	r3, #14
 8014a3c:	bf28      	it	cs
 8014a3e:	230e      	movcs	r3, #14
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	4b1b      	ldr	r3, [pc, #108]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a44:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	695b      	ldr	r3, [r3, #20]
 8014a4a:	4a19      	ldr	r2, [pc, #100]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a4c:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	699b      	ldr	r3, [r3, #24]
 8014a52:	4a17      	ldr	r2, [pc, #92]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a54:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	8b9a      	ldrh	r2, [r3, #28]
 8014a5a:	4b15      	ldr	r3, [pc, #84]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8014a60:	4b13      	ldr	r3, [pc, #76]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d119      	bne.n	8014a9c <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	891b      	ldrh	r3, [r3, #8]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d010      	beq.n	8014a92 <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8014a70:	4b0f      	ldr	r3, [pc, #60]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a72:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8014a76:	f083 0301 	eor.w	r3, r3, #1
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d004      	beq.n	8014a8a <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8014a80:	4b0b      	ldr	r3, [pc, #44]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a82:	220f      	movs	r2, #15
 8014a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 8014a88:	e00e      	b.n	8014aa8 <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 8014a8a:	4b09      	ldr	r3, [pc, #36]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8014a92:	4b07      	ldr	r3, [pc, #28]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014a94:	220d      	movs	r2, #13
 8014a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 8014a9a:	e005      	b.n	8014aa8 <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 8014a9c:	f7fe fd1e 	bl	80134dc <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8014aa0:	4b03      	ldr	r3, [pc, #12]	; (8014ab0 <nfcipSetDEPParams+0xcc>)
 8014aa2:	2205      	movs	r2, #5
 8014aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	20003814 	.word	0x20003814

08014ab4 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b086      	sub	sp, #24
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	460b      	mov	r3, r1
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 8014ac6:	897b      	ldrh	r3, [r7, #10]
 8014ac8:	2b0f      	cmp	r3, #15
 8014aca:	d902      	bls.n	8014ad2 <rfalNfcDepIsAtrReq+0x1e>
 8014acc:	897b      	ldrh	r3, [r7, #10]
 8014ace:	2b40      	cmp	r3, #64	; 0x40
 8014ad0:	d901      	bls.n	8014ad6 <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	e020      	b.n	8014b18 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
 8014ad8:	1c5a      	adds	r2, r3, #1
 8014ada:	75fa      	strb	r2, [r7, #23]
 8014adc:	461a      	mov	r2, r3
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	2bd4      	cmp	r3, #212	; 0xd4
 8014ae6:	d001      	beq.n	8014aec <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	e015      	b.n	8014b18 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
 8014aee:	1c5a      	adds	r2, r3, #1
 8014af0:	75fa      	strb	r2, [r7, #23]
 8014af2:	461a      	mov	r2, r3
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	4413      	add	r3, r2
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d001      	beq.n	8014b02 <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8014afe:	2300      	movs	r3, #0
 8014b00:	e00a      	b.n	8014b18 <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d006      	beq.n	8014b16 <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	3302      	adds	r3, #2
 8014b0c:	220a      	movs	r2, #10
 8014b0e:	4619      	mov	r1, r3
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f006 fc6b 	bl	801b3ec <memcpy>
    }
     
    return true;
 8014b16:	2301      	movs	r3, #1
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3718      	adds	r7, #24
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b088      	sub	sp, #32
 8014b24:	af02      	add	r7, sp, #8
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 8014b2a:	4b79      	ldr	r3, [pc, #484]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014b30:	2b0b      	cmp	r3, #11
 8014b32:	d001      	beq.n	8014b38 <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 8014b34:	2321      	movs	r3, #33	; 0x21
 8014b36:	e0e6      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d101      	bne.n	8014b42 <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 8014b3e:	2307      	movs	r3, #7
 8014b40:	e0e1      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 8014b42:	2000      	movs	r0, #0
 8014b44:	f000 fbc8 	bl	80152d8 <nfcipDataRx>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 8014b4c:	8afb      	ldrh	r3, [r7, #22]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d001      	beq.n	8014b56 <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 8014b52:	8afb      	ldrh	r3, [r7, #22]
 8014b54:	e0d7      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 8014b56:	2300      	movs	r3, #0
 8014b58:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	22c0      	movs	r2, #192	; 0xc0
 8014b5e:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 8014b60:	7d7b      	ldrb	r3, [r7, #21]
 8014b62:	3301      	adds	r3, #1
 8014b64:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 8014b66:	4b6a      	ldr	r3, [pc, #424]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014b6a:	7d7b      	ldrb	r3, [r7, #21]
 8014b6c:	1c59      	adds	r1, r3, #1
 8014b6e:	7579      	strb	r1, [r7, #21]
 8014b70:	4413      	add	r3, r2
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	2bd4      	cmp	r3, #212	; 0xd4
 8014b76:	d001      	beq.n	8014b7c <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 8014b78:	230b      	movs	r3, #11
 8014b7a:	e0c4      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 8014b7c:	4b64      	ldr	r3, [pc, #400]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014b7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014b80:	7d7b      	ldrb	r3, [r7, #21]
 8014b82:	4413      	add	r3, r2
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	2b04      	cmp	r3, #4
 8014b88:	f040 8082 	bne.w	8014c90 <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 8014b8c:	7d7b      	ldrb	r3, [r7, #21]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 8014b92:	4b5f      	ldr	r3, [pc, #380]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014b94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014b96:	7d7b      	ldrb	r3, [r7, #21]
 8014b98:	1c59      	adds	r1, r3, #1
 8014b9a:	7579      	strb	r1, [r7, #21]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	781a      	ldrb	r2, [r3, #0]
 8014ba0:	4b5b      	ldr	r3, [pc, #364]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014ba2:	78db      	ldrb	r3, [r3, #3]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d001      	beq.n	8014bac <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 8014ba8:	230b      	movs	r3, #11
 8014baa:	e0ac      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 8014bac:	4b58      	ldr	r3, [pc, #352]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014bb0:	7d7b      	ldrb	r3, [r7, #21]
 8014bb2:	1c59      	adds	r1, r3, #1
 8014bb4:	7579      	strb	r1, [r7, #21]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	781a      	ldrb	r2, [r3, #0]
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 8014bbe:	4b54      	ldr	r3, [pc, #336]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014bc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014bc2:	7d7b      	ldrb	r3, [r7, #21]
 8014bc4:	1c59      	adds	r1, r3, #1
 8014bc6:	7579      	strb	r1, [r7, #21]
 8014bc8:	4413      	add	r3, r2
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	f003 0303 	and.w	r3, r3, #3
 8014bd0:	b2da      	uxtb	r2, r3
 8014bd2:	4b4f      	ldr	r3, [pc, #316]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8014bd8:	4b4d      	ldr	r3, [pc, #308]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014bde:	3301      	adds	r3, #1
 8014be0:	019b      	lsls	r3, r3, #6
 8014be2:	2bfd      	cmp	r3, #253	; 0xfd
 8014be4:	d807      	bhi.n	8014bf6 <nfcipTargetHandleActivation+0xd6>
 8014be6:	4b4a      	ldr	r3, [pc, #296]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014bec:	3301      	adds	r3, #1
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	019b      	lsls	r3, r3, #6
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	e000      	b.n	8014bf8 <nfcipTargetHandleActivation+0xd8>
 8014bf6:	23fe      	movs	r3, #254	; 0xfe
 8014bf8:	4a45      	ldr	r2, [pc, #276]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014bfa:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d032      	beq.n	8014c6a <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	08db      	lsrs	r3, r3, #3
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	f003 0307 	and.w	r3, r3, #7
 8014c10:	b2da      	uxtb	r2, r3
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	f003 0307 	and.w	r3, r3, #7
 8014c20:	b2da      	uxtb	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 8014c28:	4b39      	ldr	r3, [pc, #228]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014c2a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 8014c34:	4b36      	ldr	r3, [pc, #216]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014c36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	7bdb      	ldrb	r3, [r3, #15]
 8014c44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	7bda      	ldrb	r2, [r3, #15]
 8014c52:	4b2f      	ldr	r3, [pc, #188]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014c54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c58:	011b      	lsls	r3, r3, #4
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	4313      	orrs	r3, r2
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8014c6a:	f107 010c 	add.w	r1, r7, #12
 8014c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c72:	9301      	str	r3, [sp, #4]
 8014c74:	2300      	movs	r3, #0
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	2300      	movs	r3, #0
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	2005      	movs	r0, #5
 8014c7e:	f7ff fb5b 	bl	8014338 <nfcipTx>
 8014c82:	4603      	mov	r3, r0
 8014c84:	82fb      	strh	r3, [r7, #22]
 8014c86:	8afb      	ldrh	r3, [r7, #22]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d037      	beq.n	8014cfc <nfcipTargetHandleActivation+0x1dc>
 8014c8c:	8afb      	ldrh	r3, [r7, #22]
 8014c8e:	e03a      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 8014c90:	4b1f      	ldr	r3, [pc, #124]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014c92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014c94:	7d7b      	ldrb	r3, [r7, #21]
 8014c96:	4413      	add	r3, r2
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	2b06      	cmp	r3, #6
 8014c9c:	d12a      	bne.n	8014cf4 <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 8014c9e:	7d7b      	ldrb	r3, [r7, #21]
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 8014ca4:	4b1a      	ldr	r3, [pc, #104]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014ca6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014ca8:	7d7b      	ldrb	r3, [r7, #21]
 8014caa:	4413      	add	r3, r2
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	f003 0303 	and.w	r3, r3, #3
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 8014cb6:	230b      	movs	r3, #11
 8014cb8:	e025      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 8014cba:	4b15      	ldr	r3, [pc, #84]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014cbe:	7d7b      	ldrb	r3, [r7, #21]
 8014cc0:	4413      	add	r3, r2
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	f003 0304 	and.w	r3, r3, #4
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00d      	beq.n	8014ce8 <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 8014ccc:	4b10      	ldr	r3, [pc, #64]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014cd0:	7d7b      	ldrb	r3, [r7, #21]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	757b      	strb	r3, [r7, #21]
 8014cd6:	7d7b      	ldrb	r3, [r7, #21]
 8014cd8:	4413      	add	r3, r2
 8014cda:	781a      	ldrb	r2, [r3, #0]
 8014cdc:	4b0c      	ldr	r3, [pc, #48]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cde:	78db      	ldrb	r3, [r3, #3]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d007      	beq.n	8014cf4 <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 8014ce4:	230b      	movs	r3, #11
 8014ce6:	e00e      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 8014ce8:	4b09      	ldr	r3, [pc, #36]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cea:	78db      	ldrb	r3, [r3, #3]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d001      	beq.n	8014cf4 <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 8014cf0:	230b      	movs	r3, #11
 8014cf2:	e008      	b.n	8014d06 <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8014cf4:	4b06      	ldr	r3, [pc, #24]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8014cfc:	4b04      	ldr	r3, [pc, #16]	; (8014d10 <nfcipTargetHandleActivation+0x1f0>)
 8014cfe:	220d      	movs	r2, #13
 8014d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8014d04:	2300      	movs	r3, #0
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3718      	adds	r7, #24
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	20003814 	.word	0x20003814

08014d14 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b0c0      	sub	sp, #256	; 0x100
 8014d18:	af04      	add	r7, sp, #16
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	60b9      	str	r1, [r7, #8]
 8014d1e:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d005      	beq.n	8014d32 <rfalNfcDepATR+0x1e>
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <rfalNfcDepATR+0x1e>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d101      	bne.n	8014d36 <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8014d32:	2307      	movs	r3, #7
 8014d34:	e0bb      	b.n	8014eae <rfalNfcDepATR+0x19a>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	7a5b      	ldrb	r3, [r3, #9]
 8014d3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	7a9b      	ldrb	r3, [r3, #10]
 8014d42:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8014d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8014d4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	7b1b      	ldrb	r3, [r3, #12]
 8014d5a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	7adb      	ldrb	r3, [r3, #11]
 8014d62:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	7b5b      	ldrb	r3, [r3, #13]
 8014d6a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8014d6e:	230e      	movs	r3, #14
 8014d70:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	7d1b      	ldrb	r3, [r3, #20]
 8014d78:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8014d7c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d00a      	beq.n	8014d9a <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	6919      	ldr	r1, [r3, #16]
 8014d88:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014d92:	3312      	adds	r3, #18
 8014d94:	4618      	mov	r0, r3
 8014d96:	f006 fb29 	bl	801b3ec <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	7a1b      	ldrb	r3, [r3, #8]
 8014d9e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8014da2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00a      	beq.n	8014dc0 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	6859      	ldr	r1, [r3, #4]
 8014dae:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8014db2:	461a      	mov	r2, r3
 8014db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014db8:	3307      	adds	r3, #7
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f006 fb16 	bl	801b3ec <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	785b      	ldrb	r3, [r3, #1]
 8014dca:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 8014dd6:	f7ff fdaf 	bl	8014938 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8014dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7ff fc38 	bl	8014654 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8014de4:	4b34      	ldr	r3, [pc, #208]	; (8014eb8 <rfalNfcDepATR+0x1a4>)
 8014de6:	785b      	ldrb	r3, [r3, #1]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d101      	bne.n	8014df0 <rfalNfcDepATR+0xdc>
 8014dec:	4a33      	ldr	r2, [pc, #204]	; (8014ebc <rfalNfcDepATR+0x1a8>)
 8014dee:	e000      	b.n	8014df2 <rfalNfcDepATR+0xde>
 8014df0:	4a33      	ldr	r2, [pc, #204]	; (8014ec0 <rfalNfcDepATR+0x1ac>)
 8014df2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014df6:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8014dfa:	9303      	str	r3, [sp, #12]
 8014dfc:	2341      	movs	r3, #65	; 0x41
 8014dfe:	9302      	str	r3, [sp, #8]
 8014e00:	f107 0314 	add.w	r3, r7, #20
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	2300      	movs	r3, #0
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	2000      	movs	r0, #0
 8014e0e:	f7fe fabd 	bl	801338c <nfcipTxRx>
 8014e12:	4603      	mov	r3, r0
 8014e14:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8014e18:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d002      	beq.n	8014e26 <rfalNfcDepATR+0x112>
 8014e20:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8014e24:	e043      	b.n	8014eae <rfalNfcDepATR+0x19a>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8014e2c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014e30:	1c5a      	adds	r2, r3, #1
 8014e32:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014e36:	33f0      	adds	r3, #240	; 0xf0
 8014e38:	443b      	add	r3, r7
 8014e3a:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	3b01      	subs	r3, #1
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8014e48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014e4c:	2b10      	cmp	r3, #16
 8014e4e:	d903      	bls.n	8014e58 <rfalNfcDepATR+0x144>
 8014e50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014e54:	2b40      	cmp	r3, #64	; 0x40
 8014e56:	d901      	bls.n	8014e5c <rfalNfcDepATR+0x148>
    {
        return ERR_PROTO;
 8014e58:	230b      	movs	r3, #11
 8014e5a:	e028      	b.n	8014eae <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8014e5c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014e66:	33f0      	adds	r3, #240	; 0xf0
 8014e68:	443b      	add	r3, r7
 8014e6a:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014e6e:	2bd5      	cmp	r3, #213	; 0xd5
 8014e70:	d001      	beq.n	8014e76 <rfalNfcDepATR+0x162>
    {
        return ERR_PROTO;
 8014e72:	230b      	movs	r3, #11
 8014e74:	e01b      	b.n	8014eae <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 8014e76:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8014e80:	33f0      	adds	r3, #240	; 0xf0
 8014e82:	443b      	add	r3, r7
 8014e84:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d001      	beq.n	8014e90 <rfalNfcDepATR+0x17c>
    {
        return ERR_PROTO;
 8014e8c:	230b      	movs	r3, #11
 8014e8e:	e00e      	b.n	8014eae <rfalNfcDepATR+0x19a>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 8014e90:	f107 0314 	add.w	r3, r7, #20
 8014e94:	3301      	adds	r3, #1
 8014e96:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	68b8      	ldr	r0, [r7, #8]
 8014e9e:	f006 faa5 	bl	801b3ec <memcpy>
    *atrResLen = (uint8_t)rxLen;
 8014ea2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014ea6:	b2da      	uxtb	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8014eac:	2300      	movs	r3, #0
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	37f0      	adds	r7, #240	; 0xf0
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	20003814 	.word	0x20003814
 8014ebc:	00200201 	.word	0x00200201
 8014ec0:	01000201 	.word	0x01000201

08014ec4 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 8014ec4:	b590      	push	{r4, r7, lr}
 8014ec6:	b08b      	sub	sp, #44	; 0x2c
 8014ec8:	af04      	add	r7, sp, #16
 8014eca:	4603      	mov	r3, r0
 8014ecc:	460a      	mov	r2, r1
 8014ece:	71fb      	strb	r3, [r7, #7]
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 8014ed4:	2304      	movs	r3, #4
 8014ed6:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8014ed8:	7dfb      	ldrb	r3, [r7, #23]
 8014eda:	1c5a      	adds	r2, r3, #1
 8014edc:	75fa      	strb	r2, [r7, #23]
 8014ede:	3318      	adds	r3, #24
 8014ee0:	443b      	add	r3, r7
 8014ee2:	79fa      	ldrb	r2, [r7, #7]
 8014ee4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8014ee8:	7dfb      	ldrb	r3, [r7, #23]
 8014eea:	1c5a      	adds	r2, r3, #1
 8014eec:	75fa      	strb	r2, [r7, #23]
 8014eee:	3318      	adds	r3, #24
 8014ef0:	443b      	add	r3, r7
 8014ef2:	79ba      	ldrb	r2, [r7, #6]
 8014ef4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8014ef8:	4b2d      	ldr	r3, [pc, #180]	; (8014fb0 <rfalNfcDepPSL+0xec>)
 8014efa:	785b      	ldrb	r3, [r3, #1]
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d101      	bne.n	8014f04 <rfalNfcDepPSL+0x40>
 8014f00:	482c      	ldr	r0, [pc, #176]	; (8014fb4 <rfalNfcDepPSL+0xf0>)
 8014f02:	e000      	b.n	8014f06 <rfalNfcDepPSL+0x42>
 8014f04:	482c      	ldr	r0, [pc, #176]	; (8014fb8 <rfalNfcDepPSL+0xf4>)
 8014f06:	7dfb      	ldrb	r3, [r7, #23]
 8014f08:	3b04      	subs	r3, #4
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	f107 020c 	add.w	r2, r7, #12
 8014f10:	1d14      	adds	r4, r2, #4
 8014f12:	f107 010c 	add.w	r1, r7, #12
 8014f16:	f107 0212 	add.w	r2, r7, #18
 8014f1a:	9203      	str	r2, [sp, #12]
 8014f1c:	2204      	movs	r2, #4
 8014f1e:	9202      	str	r2, [sp, #8]
 8014f20:	f107 0208 	add.w	r2, r7, #8
 8014f24:	9201      	str	r2, [sp, #4]
 8014f26:	9300      	str	r3, [sp, #0]
 8014f28:	4623      	mov	r3, r4
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	2004      	movs	r0, #4
 8014f2e:	f7fe fa2d 	bl	801338c <nfcipTxRx>
 8014f32:	4603      	mov	r3, r0
 8014f34:	82bb      	strh	r3, [r7, #20]
 8014f36:	8abb      	ldrh	r3, [r7, #20]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d001      	beq.n	8014f40 <rfalNfcDepPSL+0x7c>
 8014f3c:	8abb      	ldrh	r3, [r7, #20]
 8014f3e:	e033      	b.n	8014fa8 <rfalNfcDepPSL+0xe4>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8014f40:	2300      	movs	r3, #0
 8014f42:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 8014f44:	7dfb      	ldrb	r3, [r7, #23]
 8014f46:	1c5a      	adds	r2, r3, #1
 8014f48:	75fa      	strb	r2, [r7, #23]
 8014f4a:	3318      	adds	r3, #24
 8014f4c:	443b      	add	r3, r7
 8014f4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 8014f56:	8a7b      	ldrh	r3, [r7, #18]
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	d801      	bhi.n	8014f60 <rfalNfcDepPSL+0x9c>
    {
        return ERR_PROTO;
 8014f5c:	230b      	movs	r3, #11
 8014f5e:	e023      	b.n	8014fa8 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 8014f60:	7dfb      	ldrb	r3, [r7, #23]
 8014f62:	1c5a      	adds	r2, r3, #1
 8014f64:	75fa      	strb	r2, [r7, #23]
 8014f66:	3318      	adds	r3, #24
 8014f68:	443b      	add	r3, r7
 8014f6a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014f6e:	2bd5      	cmp	r3, #213	; 0xd5
 8014f70:	d001      	beq.n	8014f76 <rfalNfcDepPSL+0xb2>
    {
        return ERR_PROTO;
 8014f72:	230b      	movs	r3, #11
 8014f74:	e018      	b.n	8014fa8 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 8014f76:	7dfb      	ldrb	r3, [r7, #23]
 8014f78:	1c5a      	adds	r2, r3, #1
 8014f7a:	75fa      	strb	r2, [r7, #23]
 8014f7c:	3318      	adds	r3, #24
 8014f7e:	443b      	add	r3, r7
 8014f80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014f84:	2b05      	cmp	r3, #5
 8014f86:	d001      	beq.n	8014f8c <rfalNfcDepPSL+0xc8>
    {
        return ERR_PROTO;
 8014f88:	230b      	movs	r3, #11
 8014f8a:	e00d      	b.n	8014fa8 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 8014f8c:	7dfb      	ldrb	r3, [r7, #23]
 8014f8e:	1c5a      	adds	r2, r3, #1
 8014f90:	75fa      	strb	r2, [r7, #23]
 8014f92:	3318      	adds	r3, #24
 8014f94:	443b      	add	r3, r7
 8014f96:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8014f9a:	4b05      	ldr	r3, [pc, #20]	; (8014fb0 <rfalNfcDepPSL+0xec>)
 8014f9c:	78db      	ldrb	r3, [r3, #3]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d001      	beq.n	8014fa6 <rfalNfcDepPSL+0xe2>
    {
        return ERR_PROTO;
 8014fa2:	230b      	movs	r3, #11
 8014fa4:	e000      	b.n	8014fa8 <rfalNfcDepPSL+0xe4>
    }
    
    return ERR_NONE;
 8014fa6:	2300      	movs	r3, #0
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	371c      	adds	r7, #28
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd90      	pop	{r4, r7, pc}
 8014fb0:	20003814 	.word	0x20003814
 8014fb4:	00200201 	.word	0x00200201
 8014fb8:	01000201 	.word	0x01000201

08014fbc <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b08a      	sub	sp, #40	; 0x28
 8014fc0:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 8014fc6:	4b2e      	ldr	r3, [pc, #184]	; (8015080 <rfalNfcDepRLS+0xc4>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d101      	bne.n	8014fd2 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	e051      	b.n	8015076 <rfalNfcDepRLS+0xba>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 8014fd2:	4b2b      	ldr	r3, [pc, #172]	; (8015080 <rfalNfcDepRLS+0xc4>)
 8014fd4:	785b      	ldrb	r3, [r3, #1]
 8014fd6:	2b01      	cmp	r3, #1
 8014fd8:	d101      	bne.n	8014fde <rfalNfcDepRLS+0x22>
 8014fda:	4a2a      	ldr	r2, [pc, #168]	; (8015084 <rfalNfcDepRLS+0xc8>)
 8014fdc:	e000      	b.n	8014fe0 <rfalNfcDepRLS+0x24>
 8014fde:	4a2a      	ldr	r2, [pc, #168]	; (8015088 <rfalNfcDepRLS+0xcc>)
 8014fe0:	f107 010c 	add.w	r1, r7, #12
 8014fe4:	1dbb      	adds	r3, r7, #6
 8014fe6:	9303      	str	r3, [sp, #12]
 8014fe8:	2340      	movs	r3, #64	; 0x40
 8014fea:	9302      	str	r3, [sp, #8]
 8014fec:	f107 0308 	add.w	r3, r7, #8
 8014ff0:	9301      	str	r3, [sp, #4]
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	200a      	movs	r0, #10
 8014ffa:	f7fe f9c7 	bl	801338c <nfcipTxRx>
 8014ffe:	4603      	mov	r3, r0
 8015000:	82fb      	strh	r3, [r7, #22]
 8015002:	8afb      	ldrh	r3, [r7, #22]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d001      	beq.n	801500c <rfalNfcDepRLS+0x50>
 8015008:	8afb      	ldrh	r3, [r7, #22]
 801500a:	e034      	b.n	8015076 <rfalNfcDepRLS+0xba>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 801500c:	2300      	movs	r3, #0
 801500e:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 8015010:	7d7b      	ldrb	r3, [r7, #21]
 8015012:	1c5a      	adds	r2, r3, #1
 8015014:	757a      	strb	r2, [r7, #21]
 8015016:	3318      	adds	r3, #24
 8015018:	443b      	add	r3, r7
 801501a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801501e:	2b02      	cmp	r3, #2
 8015020:	d801      	bhi.n	8015026 <rfalNfcDepRLS+0x6a>
    {
        return ERR_PROTO;
 8015022:	230b      	movs	r3, #11
 8015024:	e027      	b.n	8015076 <rfalNfcDepRLS+0xba>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 8015026:	7d7b      	ldrb	r3, [r7, #21]
 8015028:	1c5a      	adds	r2, r3, #1
 801502a:	757a      	strb	r2, [r7, #21]
 801502c:	3318      	adds	r3, #24
 801502e:	443b      	add	r3, r7
 8015030:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8015034:	2bd5      	cmp	r3, #213	; 0xd5
 8015036:	d001      	beq.n	801503c <rfalNfcDepRLS+0x80>
    {
        return ERR_PROTO;
 8015038:	230b      	movs	r3, #11
 801503a:	e01c      	b.n	8015076 <rfalNfcDepRLS+0xba>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 801503c:	7d7b      	ldrb	r3, [r7, #21]
 801503e:	1c5a      	adds	r2, r3, #1
 8015040:	757a      	strb	r2, [r7, #21]
 8015042:	3318      	adds	r3, #24
 8015044:	443b      	add	r3, r7
 8015046:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801504a:	2b0b      	cmp	r3, #11
 801504c:	d001      	beq.n	8015052 <rfalNfcDepRLS+0x96>
    {
        return ERR_PROTO;
 801504e:	230b      	movs	r3, #11
 8015050:	e011      	b.n	8015076 <rfalNfcDepRLS+0xba>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8015052:	4b0b      	ldr	r3, [pc, #44]	; (8015080 <rfalNfcDepRLS+0xc4>)
 8015054:	78db      	ldrb	r3, [r3, #3]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d00c      	beq.n	8015074 <rfalNfcDepRLS+0xb8>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 801505a:	7d7b      	ldrb	r3, [r7, #21]
 801505c:	1c5a      	adds	r2, r3, #1
 801505e:	757a      	strb	r2, [r7, #21]
 8015060:	3318      	adds	r3, #24
 8015062:	443b      	add	r3, r7
 8015064:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8015068:	4b05      	ldr	r3, [pc, #20]	; (8015080 <rfalNfcDepRLS+0xc4>)
 801506a:	78db      	ldrb	r3, [r3, #3]
 801506c:	429a      	cmp	r2, r3
 801506e:	d001      	beq.n	8015074 <rfalNfcDepRLS+0xb8>
        {
            return ERR_PROTO;
 8015070:	230b      	movs	r3, #11
 8015072:	e000      	b.n	8015076 <rfalNfcDepRLS+0xba>
        }
    }
    
    return ERR_NONE;
 8015074:	2300      	movs	r3, #0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3718      	adds	r7, #24
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	20003814 	.word	0x20003814
 8015084:	00200201 	.word	0x00200201
 8015088:	01000201 	.word	0x01000201

0801508c <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b086      	sub	sp, #24
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	460b      	mov	r3, r1
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d002      	beq.n	80150a6 <rfalNfcDepInitiatorHandleActivation+0x1a>
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d101      	bne.n	80150aa <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 80150a6:	2307      	movs	r3, #7
 80150a8:	e0da      	b.n	8015260 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2200      	movs	r2, #0
 80150ae:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 80150b0:	2302      	movs	r3, #2
 80150b2:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	3341      	adds	r3, #65	; 0x41
 80150ba:	461a      	mov	r2, r3
 80150bc:	68f8      	ldr	r0, [r7, #12]
 80150be:	f7ff fe29 	bl	8014d14 <rfalNfcDepATR>
 80150c2:	4603      	mov	r3, r0
 80150c4:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 80150c6:	8a7b      	ldrh	r3, [r7, #18]
 80150c8:	2b15      	cmp	r3, #21
 80150ca:	d005      	beq.n	80150d8 <rfalNfcDepInitiatorHandleActivation+0x4c>
 80150cc:	8a7b      	ldrh	r3, [r7, #18]
 80150ce:	2b09      	cmp	r3, #9
 80150d0:	d002      	beq.n	80150d8 <rfalNfcDepInitiatorHandleActivation+0x4c>
 80150d2:	8a7b      	ldrh	r3, [r7, #18]
 80150d4:	2b1b      	cmp	r3, #27
 80150d6:	d105      	bne.n	80150e4 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 80150d8:	7dfb      	ldrb	r3, [r7, #23]
 80150da:	1e5a      	subs	r2, r3, #1
 80150dc:	75fa      	strb	r2, [r7, #23]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d1e8      	bne.n	80150b4 <rfalNfcDepInitiatorHandleActivation+0x28>
 80150e2:	e000      	b.n	80150e6 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 80150e4:	bf00      	nop
    
    if( ret != ERR_NONE )
 80150e6:	8a7b      	ldrh	r3, [r7, #18]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d001      	beq.n	80150f0 <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 80150ec:	8a7b      	ldrh	r3, [r7, #18]
 80150ee:	e0b7      	b.n	8015260 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80150f6:	3b11      	subs	r3, #17
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	7b1a      	ldrb	r2, [r3, #12]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2200      	movs	r2, #0
 801510e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	7c1b      	ldrb	r3, [r3, #16]
 8015116:	091b      	lsrs	r3, r3, #4
 8015118:	b2db      	uxtb	r3, r3
 801511a:	f003 0303 	and.w	r3, r3, #3
 801511e:	b2da      	uxtb	r2, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801512c:	3301      	adds	r3, #1
 801512e:	019b      	lsls	r3, r3, #6
 8015130:	2bfd      	cmp	r3, #253	; 0xfd
 8015132:	d807      	bhi.n	8015144 <rfalNfcDepInitiatorHandleActivation+0xb8>
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801513a:	3301      	adds	r3, #1
 801513c:	b29b      	uxth	r3, r3
 801513e:	019b      	lsls	r3, r3, #6
 8015140:	b29a      	uxth	r2, r3
 8015142:	e000      	b.n	8015146 <rfalNfcDepInitiatorHandleActivation+0xba>
 8015144:	22fe      	movs	r2, #254	; 0xfe
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	7bdb      	ldrb	r3, [r3, #15]
 8015150:	f003 030f 	and.w	r3, r3, #15
 8015154:	b2da      	uxtb	r2, r3
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015162:	4618      	mov	r0, r3
 8015164:	f000 f882 	bl	801526c <rfalNfcDepCalculateRWT>
 8015168:	4602      	mov	r2, r0
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	220c      	movs	r2, #12
 8015172:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	3355      	adds	r3, #85	; 0x55
 801517e:	4619      	mov	r1, r3
 8015180:	4610      	mov	r0, r2
 8015182:	f002 ff6f 	bl	8018064 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 8015186:	2300      	movs	r3, #0
 8015188:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	b2db      	uxtb	r3, r3
 8015194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015198:	b2da      	uxtb	r2, r3
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80151a0:	f003 0307 	and.w	r3, r3, #7
 80151a4:	b2db      	uxtb	r3, r3
 80151a6:	4313      	orrs	r3, r2
 80151a8:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80151b0:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80151b8:	7afa      	ldrb	r2, [r7, #11]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d018      	beq.n	80151f0 <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	7b99      	ldrb	r1, [r3, #14]
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	7b5a      	ldrb	r2, [r3, #13]
 80151c6:	7afb      	ldrb	r3, [r7, #11]
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7fe f8bd 	bl	8013348 <nfcipDxIsSupported>
 80151ce:	4603      	mov	r3, r0
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00d      	beq.n	80151f0 <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 80151d4:	2301      	movs	r3, #1
 80151d6:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 80151d8:	7afb      	ldrb	r3, [r7, #11]
 80151da:	00db      	lsls	r3, r3, #3
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80151e2:	b2da      	uxtb	r2, r3
 80151e4:	7afb      	ldrb	r3, [r7, #11]
 80151e6:	f003 0307 	and.w	r3, r3, #7
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	4313      	orrs	r3, r2
 80151ee:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 80151f0:	7d7b      	ldrb	r3, [r7, #21]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d033      	beq.n	801525e <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 80151f6:	7c7a      	ldrb	r2, [r7, #17]
 80151f8:	7dbb      	ldrb	r3, [r7, #22]
 80151fa:	4611      	mov	r1, r2
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7ff fe61 	bl	8014ec4 <rfalNfcDepPSL>
 8015202:	4603      	mov	r3, r0
 8015204:	827b      	strh	r3, [r7, #18]
 8015206:	8a7b      	ldrh	r3, [r7, #18]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d001      	beq.n	8015210 <rfalNfcDepInitiatorHandleActivation+0x184>
 801520c:	8a7b      	ldrh	r3, [r7, #18]
 801520e:	e027      	b.n	8015260 <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015216:	7afa      	ldrb	r2, [r7, #11]
 8015218:	429a      	cmp	r2, r3
 801521a:	d01e      	beq.n	801525a <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015222:	2b00      	cmp	r3, #0
 8015224:	d107      	bne.n	8015236 <rfalNfcDepInitiatorHandleActivation+0x1aa>
 8015226:	4b10      	ldr	r3, [pc, #64]	; (8015268 <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 8015228:	785b      	ldrb	r3, [r3, #1]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d103      	bne.n	8015236 <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 801522e:	7afb      	ldrb	r3, [r7, #11]
 8015230:	4618      	mov	r0, r3
 8015232:	f001 fa63 	bl	80166fc <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	7afa      	ldrb	r2, [r7, #11]
 801523a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	7afa      	ldrb	r2, [r7, #11]
 8015242:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8015252:	4619      	mov	r1, r3
 8015254:	4610      	mov	r0, r2
 8015256:	f002 fca1 	bl	8017b9c <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 801525a:	2300      	movs	r3, #0
 801525c:	e000      	b.n	8015260 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 801525e:	2300      	movs	r3, #0
}
 8015260:	4618      	mov	r0, r3
 8015262:	3718      	adds	r7, #24
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}
 8015268:	20003814 	.word	0x20003814

0801526c <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 801526c:	b480      	push	{r7}
 801526e:	b085      	sub	sp, #20
 8015270:	af00      	add	r7, sp, #0
 8015272:	4603      	mov	r3, r0
 8015274:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 8015276:	79fb      	ldrb	r3, [r7, #7]
 8015278:	2b0e      	cmp	r3, #14
 801527a:	bf28      	it	cs
 801527c:	230e      	movcs	r3, #14
 801527e:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 8015280:	7bfb      	ldrb	r3, [r7, #15]
 8015282:	f003 030f 	and.w	r3, r3, #15
 8015286:	330c      	adds	r3, #12
 8015288:	2201      	movs	r2, #1
 801528a:	fa02 f303 	lsl.w	r3, r2, r3
}
 801528e:	4618      	mov	r0, r3
 8015290:	3714      	adds	r7, #20
 8015292:	46bd      	mov	sp, r7
 8015294:	bc80      	pop	{r7}
 8015296:	4770      	bx	lr

08015298 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 8015298:	b590      	push	{r4, r7, lr}
 801529a:	b089      	sub	sp, #36	; 0x24
 801529c:	af04      	add	r7, sp, #16
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	460b      	mov	r3, r1
 80152a2:	607a      	str	r2, [r7, #4]
 80152a4:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 80152a6:	4b0b      	ldr	r3, [pc, #44]	; (80152d4 <nfcipDataTx+0x3c>)
 80152a8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80152aa:	4b0a      	ldr	r3, [pc, #40]	; (80152d4 <nfcipDataTx+0x3c>)
 80152ac:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80152b0:	4b08      	ldr	r3, [pc, #32]	; (80152d4 <nfcipDataTx+0x3c>)
 80152b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b4:	8979      	ldrh	r1, [r7, #10]
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	9202      	str	r2, [sp, #8]
 80152ba:	2204      	movs	r2, #4
 80152bc:	9201      	str	r2, [sp, #4]
 80152be:	9300      	str	r3, [sp, #0]
 80152c0:	4623      	mov	r3, r4
 80152c2:	4602      	mov	r2, r0
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f003 f925 	bl	8018514 <rfalTransceiveBlockingTx>
 80152ca:	4603      	mov	r3, r0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3714      	adds	r7, #20
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd90      	pop	{r4, r7, pc}
 80152d4:	20003814 	.word	0x20003814

080152d8 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	4603      	mov	r3, r0
 80152e0:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d004      	beq.n	80152f2 <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 80152e8:	f003 f960 	bl	80185ac <rfalTransceiveBlockingRx>
 80152ec:	4603      	mov	r3, r0
 80152ee:	81fb      	strh	r3, [r7, #14]
 80152f0:	e003      	b.n	80152fa <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 80152f2:	f003 f9c5 	bl	8018680 <rfalGetTransceiveStatus>
 80152f6:	4603      	mov	r3, r0
 80152f8:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 80152fa:	89fb      	ldrh	r3, [r7, #14]
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d028      	beq.n	8015352 <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 8015300:	4b16      	ldr	r3, [pc, #88]	; (801535c <nfcipDataRx+0x84>)
 8015302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015304:	2b00      	cmp	r3, #0
 8015306:	d024      	beq.n	8015352 <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8015308:	4b14      	ldr	r3, [pc, #80]	; (801535c <nfcipDataRx+0x84>)
 801530a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801530c:	881b      	ldrh	r3, [r3, #0]
 801530e:	3307      	adds	r3, #7
 8015310:	08da      	lsrs	r2, r3, #3
 8015312:	4b12      	ldr	r3, [pc, #72]	; (801535c <nfcipDataRx+0x84>)
 8015314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015316:	b292      	uxth	r2, r2
 8015318:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 801531a:	89fb      	ldrh	r3, [r7, #14]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d118      	bne.n	8015352 <nfcipDataRx+0x7a>
 8015320:	4b0e      	ldr	r3, [pc, #56]	; (801535c <nfcipDataRx+0x84>)
 8015322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015324:	2b00      	cmp	r3, #0
 8015326:	d014      	beq.n	8015352 <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8015328:	4b0c      	ldr	r3, [pc, #48]	; (801535c <nfcipDataRx+0x84>)
 801532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801532c:	881a      	ldrh	r2, [r3, #0]
 801532e:	4b0b      	ldr	r3, [pc, #44]	; (801535c <nfcipDataRx+0x84>)
 8015330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	b29b      	uxth	r3, r3
 8015336:	429a      	cmp	r2, r3
 8015338:	d109      	bne.n	801534e <nfcipDataRx+0x76>
 801533a:	4b08      	ldr	r3, [pc, #32]	; (801535c <nfcipDataRx+0x84>)
 801533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801533e:	881b      	ldrh	r3, [r3, #0]
 8015340:	2b02      	cmp	r3, #2
 8015342:	d904      	bls.n	801534e <nfcipDataRx+0x76>
 8015344:	4b05      	ldr	r3, [pc, #20]	; (801535c <nfcipDataRx+0x84>)
 8015346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015348:	881b      	ldrh	r3, [r3, #0]
 801534a:	2bff      	cmp	r3, #255	; 0xff
 801534c:	d901      	bls.n	8015352 <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 801534e:	2309      	movs	r3, #9
 8015350:	e000      	b.n	8015354 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 8015352:	89fb      	ldrh	r3, [r7, #14]
}
 8015354:	4618      	mov	r0, r3
 8015356:	3710      	adds	r7, #16
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20003814 	.word	0x20003814

08015360 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 8015360:	b082      	sub	sp, #8
 8015362:	b580      	push	{r7, lr}
 8015364:	b09c      	sub	sp, #112	; 0x70
 8015366:	af02      	add	r7, sp, #8
 8015368:	60f8      	str	r0, [r7, #12]
 801536a:	60b9      	str	r1, [r7, #8]
 801536c:	677b      	str	r3, [r7, #116]	; 0x74
 801536e:	4613      	mov	r3, r2
 8015370:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d005      	beq.n	8015384 <rfalNfcDepListenStartActivation+0x24>
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d002      	beq.n	8015384 <rfalNfcDepListenStartActivation+0x24>
 801537e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015380:	2b00      	cmp	r3, #0
 8015382:	d101      	bne.n	8015388 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 8015384:	2307      	movs	r3, #7
 8015386:	e0f4      	b.n	8015572 <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 8015388:	88fb      	ldrh	r3, [r7, #6]
 801538a:	2200      	movs	r2, #0
 801538c:	4619      	mov	r1, r3
 801538e:	68b8      	ldr	r0, [r7, #8]
 8015390:	f7ff fb90 	bl	8014ab4 <rfalNfcDepIsAtrReq>
 8015394:	4603      	mov	r3, r0
 8015396:	f083 0301 	eor.w	r3, r3, #1
 801539a:	b2db      	uxtb	r3, r3
 801539c:	2b00      	cmp	r3, #0
 801539e:	d001      	beq.n	80153a4 <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 80153a0:	2307      	movs	r3, #7
 80153a2:	e0e6      	b.n	8015572 <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 80153a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153a8:	88fa      	ldrh	r2, [r7, #6]
 80153aa:	b2d2      	uxtb	r2, r2
 80153ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 80153b0:	88fb      	ldrh	r3, [r7, #6]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d007      	beq.n	80153c6 <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 80153b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153ba:	4618      	mov	r0, r3
 80153bc:	88fb      	ldrh	r3, [r7, #6]
 80153be:	461a      	mov	r2, r3
 80153c0:	68b9      	ldr	r1, [r7, #8]
 80153c2:	f006 f813 	bl	801b3ec <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 80153c6:	88fb      	ldrh	r3, [r7, #6]
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153ce:	3a10      	subs	r2, #16
 80153d0:	b2d2      	uxtb	r2, r2
 80153d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 80153d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80153da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153de:	7b12      	ldrb	r2, [r2, #12]
 80153e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80153e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153e8:	2200      	movs	r2, #0
 80153ea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 80153ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153f2:	7bdb      	ldrb	r3, [r3, #15]
 80153f4:	091b      	lsrs	r3, r3, #4
 80153f6:	b2da      	uxtb	r2, r3
 80153f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153fc:	f002 0203 	and.w	r2, r2, #3
 8015400:	b2d2      	uxtb	r2, r2
 8015402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 8015406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801540a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801540e:	3301      	adds	r3, #1
 8015410:	019b      	lsls	r3, r3, #6
 8015412:	2bfd      	cmp	r3, #253	; 0xfd
 8015414:	d808      	bhi.n	8015428 <rfalNfcDepListenStartActivation+0xc8>
 8015416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801541a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801541e:	3301      	adds	r3, #1
 8015420:	b29b      	uxth	r3, r3
 8015422:	019b      	lsls	r3, r3, #6
 8015424:	b29a      	uxth	r2, r3
 8015426:	e000      	b.n	801542a <rfalNfcDepListenStartActivation+0xca>
 8015428:	22fe      	movs	r2, #254	; 0xfe
 801542a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801542e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 8015432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015436:	2200      	movs	r2, #0
 8015438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 801543c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015440:	f04f 32ff 	mov.w	r2, #4294967295
 8015444:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 8015446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801544a:	f04f 32ff 	mov.w	r2, #4294967295
 801544e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 8015450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015454:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8015458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801545c:	3355      	adds	r3, #85	; 0x55
 801545e:	4619      	mov	r1, r3
 8015460:	4610      	mov	r0, r2
 8015462:	f002 fdff 	bl	8018064 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 8015466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801546a:	4a45      	ldr	r2, [pc, #276]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 801546c:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 801546e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015472:	7b1b      	ldrb	r3, [r3, #12]
 8015474:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 8015476:	2300      	movs	r3, #0
 8015478:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 801547a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801547e:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8015480:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8015484:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	7b1b      	ldrb	r3, [r3, #12]
 801548a:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	7adb      	ldrb	r3, [r3, #11]
 8015490:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	7b9b      	ldrb	r3, [r3, #14]
 8015496:	091b      	lsrs	r3, r3, #4
 8015498:	b2db      	uxtb	r3, r3
 801549a:	f003 0303 	and.w	r3, r3, #3
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80154aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 80154ae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d00b      	beq.n	80154ce <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f103 010f 	add.w	r1, r3, #15
 80154bc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80154c0:	461a      	mov	r2, r3
 80154c2:	f107 0314 	add.w	r3, r7, #20
 80154c6:	3312      	adds	r3, #18
 80154c8:	4618      	mov	r0, r3
 80154ca:	f005 ff8f 	bl	801b3ec <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80154ce:	230a      	movs	r3, #10
 80154d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	1c5a      	adds	r2, r3, #1
 80154d8:	f107 031b 	add.w	r3, r7, #27
 80154dc:	6810      	ldr	r0, [r2, #0]
 80154de:	6851      	ldr	r1, [r2, #4]
 80154e0:	6018      	str	r0, [r3, #0]
 80154e2:	6059      	str	r1, [r3, #4]
 80154e4:	8912      	ldrh	r2, [r2, #8]
 80154e6:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	7b5b      	ldrb	r3, [r3, #13]
 80154ec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 80154f0:	2301      	movs	r3, #1
 80154f2:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80154fa:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 8015502:	f7ff fa19 	bl	8014938 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8015506:	f107 0314 	add.w	r3, r7, #20
 801550a:	4618      	mov	r0, r3
 801550c:	f7ff f8a2 	bl	8014654 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 8015510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015512:	4a1b      	ldr	r2, [pc, #108]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015514:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8015516:	4b1a      	ldr	r3, [pc, #104]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015518:	f240 1203 	movw	r2, #259	; 0x103
 801551c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 8015520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015522:	4a17      	ldr	r2, [pc, #92]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015524:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8015526:	4b16      	ldr	r3, [pc, #88]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015528:	2205      	movs	r2, #5
 801552a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 801552e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015530:	4a13      	ldr	r2, [pc, #76]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015532:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8015534:	4b12      	ldr	r3, [pc, #72]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 8015536:	2205      	movs	r2, #5
 8015538:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 801553c:	4b10      	ldr	r3, [pc, #64]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 801553e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8015540:	f04f 33ff 	mov.w	r3, #4294967295
 8015544:	9301      	str	r3, [sp, #4]
 8015546:	2300      	movs	r3, #0
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	2300      	movs	r3, #0
 801554c:	2200      	movs	r2, #0
 801554e:	2001      	movs	r0, #1
 8015550:	f7fe fef2 	bl	8014338 <nfcipTx>
 8015554:	4603      	mov	r3, r0
 8015556:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801555a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801555e:	2b00      	cmp	r3, #0
 8015560:	d002      	beq.n	8015568 <rfalNfcDepListenStartActivation+0x208>
 8015562:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8015566:	e004      	b.n	8015572 <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 8015568:	4b05      	ldr	r3, [pc, #20]	; (8015580 <rfalNfcDepListenStartActivation+0x220>)
 801556a:	220b      	movs	r2, #11
 801556c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 8015570:	2300      	movs	r3, #0
}
 8015572:	4618      	mov	r0, r3
 8015574:	3768      	adds	r7, #104	; 0x68
 8015576:	46bd      	mov	sp, r7
 8015578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801557c:	b002      	add	sp, #8
 801557e:	4770      	bx	lr
 8015580:	20003814 	.word	0x20003814

08015584 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b086      	sub	sp, #24
 8015588:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 801558a:	23c0      	movs	r3, #192	; 0xc0
 801558c:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 801558e:	4b2f      	ldr	r3, [pc, #188]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 8015590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015592:	1d7a      	adds	r2, r7, #5
 8015594:	4611      	mov	r1, r2
 8015596:	4618      	mov	r0, r3
 8015598:	f7ff fac2 	bl	8014b20 <nfcipTargetHandleActivation>
 801559c:	4603      	mov	r3, r0
 801559e:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 80155a0:	88fb      	ldrh	r3, [r7, #6]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d002      	beq.n	80155ac <rfalNfcDepListenGetActivationStatus+0x28>
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	d048      	beq.n	801563c <rfalNfcDepListenGetActivationStatus+0xb8>
 80155aa:	e034      	b.n	8015616 <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 80155ac:	797b      	ldrb	r3, [r7, #5]
 80155ae:	2bc0      	cmp	r3, #192	; 0xc0
 80155b0:	d046      	beq.n	8015640 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 80155b2:	4b26      	ldr	r3, [pc, #152]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155b4:	785b      	ldrb	r3, [r3, #1]
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d112      	bne.n	80155e0 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 80155ba:	4b24      	ldr	r3, [pc, #144]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155be:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80155c2:	4b22      	ldr	r3, [pc, #136]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80155ca:	461a      	mov	r2, r3
 80155cc:	200d      	movs	r0, #13
 80155ce:	f002 f9d3 	bl	8017978 <rfalSetMode>
 80155d2:	4603      	mov	r3, r0
 80155d4:	80fb      	strh	r3, [r7, #6]
 80155d6:	88fb      	ldrh	r3, [r7, #6]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d031      	beq.n	8015640 <rfalNfcDepListenGetActivationStatus+0xbc>
 80155dc:	88fb      	ldrh	r3, [r7, #6]
 80155de:	e031      	b.n	8015644 <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 80155e0:	4b1a      	ldr	r3, [pc, #104]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <rfalNfcDepListenGetActivationStatus+0x6c>
 80155ec:	200a      	movs	r0, #10
 80155ee:	e000      	b.n	80155f2 <rfalNfcDepListenGetActivationStatus+0x6e>
 80155f0:	200c      	movs	r0, #12
 80155f2:	4b16      	ldr	r3, [pc, #88]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155f6:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80155fa:	4b14      	ldr	r3, [pc, #80]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 80155fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015602:	461a      	mov	r2, r3
 8015604:	f002 f9b8 	bl	8017978 <rfalSetMode>
 8015608:	4603      	mov	r3, r0
 801560a:	80fb      	strh	r3, [r7, #6]
 801560c:	88fb      	ldrh	r3, [r7, #6]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d016      	beq.n	8015640 <rfalNfcDepListenGetActivationStatus+0xbc>
 8015612:	88fb      	ldrh	r3, [r7, #6]
 8015614:	e016      	b.n	8015644 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015616:	4b0d      	ldr	r3, [pc, #52]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 8015618:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801561a:	4b0c      	ldr	r3, [pc, #48]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 801561c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015620:	4b0a      	ldr	r3, [pc, #40]	; (801564c <rfalNfcDepListenGetActivationStatus+0xc8>)
 8015622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015624:	f04f 30ff 	mov.w	r0, #4294967295
 8015628:	9002      	str	r0, [sp, #8]
 801562a:	2004      	movs	r0, #4
 801562c:	9001      	str	r0, [sp, #4]
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	460b      	mov	r3, r1
 8015632:	2100      	movs	r1, #0
 8015634:	2000      	movs	r0, #0
 8015636:	f002 ff6d 	bl	8018514 <rfalTransceiveBlockingTx>
            break;
 801563a:	e002      	b.n	8015642 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 801563c:	bf00      	nop
 801563e:	e000      	b.n	8015642 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8015640:	bf00      	nop
    } // if (no err)
    
    return err;
 8015642:	88fb      	ldrh	r3, [r7, #6]
}
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	20003814 	.word	0x20003814

08015650 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b08a      	sub	sp, #40	; 0x28
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	889b      	ldrh	r3, [r3, #4]
 8015662:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	799b      	ldrb	r3, [r3, #6]
 8015668:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 801566a:	2305      	movs	r3, #5
 801566c:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 801566e:	23ff      	movs	r3, #255	; 0xff
 8015670:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8015672:	2305      	movs	r3, #5
 8015674:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	689b      	ldr	r3, [r3, #8]
 801567a:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 801567c:	f240 1303 	movw	r3, #259	; 0x103
 8015680:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	8b9b      	ldrh	r3, [r3, #28]
 8015686:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	695b      	ldr	r3, [r3, #20]
 801568c:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	699b      	ldr	r3, [r3, #24]
 8015692:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	4a07      	ldr	r2, [pc, #28]	; (80156b8 <rfalNfcDepStartTransceive+0x68>)
 801569a:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	691b      	ldr	r3, [r3, #16]
 80156a0:	4a05      	ldr	r2, [pc, #20]	; (80156b8 <rfalNfcDepStartTransceive+0x68>)
 80156a2:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 80156a4:	f107 0308 	add.w	r3, r7, #8
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7ff f99b 	bl	80149e4 <nfcipSetDEPParams>
    
    return ERR_NONE;
 80156ae:	2300      	movs	r3, #0
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3728      	adds	r7, #40	; 0x28
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	20003814 	.word	0x20003814

080156bc <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 80156c0:	4b05      	ldr	r3, [pc, #20]	; (80156d8 <rfalNfcDepGetTransceiveStatus+0x1c>)
 80156c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c4:	4a04      	ldr	r2, [pc, #16]	; (80156d8 <rfalNfcDepGetTransceiveStatus+0x1c>)
 80156c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80156c8:	4611      	mov	r1, r2
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7ff f804 	bl	80146d8 <nfcipRun>
 80156d0:	4603      	mov	r3, r0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	20003814 	.word	0x20003814

080156dc <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 80156dc:	b480      	push	{r7}
 80156de:	b085      	sub	sp, #20
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	460b      	mov	r3, r1
 80156e6:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 80156e8:	2300      	movs	r3, #0
 80156ea:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 80156ec:	2300      	movs	r3, #0
 80156ee:	73fb      	strb	r3, [r7, #15]
 80156f0:	e009      	b.n	8015706 <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 80156f2:	7bfb      	ldrb	r3, [r7, #15]
 80156f4:	687a      	ldr	r2, [r7, #4]
 80156f6:	4413      	add	r3, r2
 80156f8:	781a      	ldrb	r2, [r3, #0]
 80156fa:	7bbb      	ldrb	r3, [r7, #14]
 80156fc:	4053      	eors	r3, r2
 80156fe:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 8015700:	7bfb      	ldrb	r3, [r7, #15]
 8015702:	3301      	adds	r3, #1
 8015704:	73fb      	strb	r3, [r7, #15]
 8015706:	7bfa      	ldrb	r2, [r7, #15]
 8015708:	78fb      	ldrb	r3, [r7, #3]
 801570a:	429a      	cmp	r2, r3
 801570c:	d3f1      	bcc.n	80156f2 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 801570e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015710:	4618      	mov	r0, r3
 8015712:	3714      	adds	r7, #20
 8015714:	46bd      	mov	sp, r7
 8015716:	bc80      	pop	{r7}
 8015718:	4770      	bx	lr
	...

0801571c <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8015722:	2200      	movs	r2, #0
 8015724:	2100      	movs	r1, #0
 8015726:	2001      	movs	r0, #1
 8015728:	f002 f926 	bl	8017978 <rfalSetMode>
 801572c:	4603      	mov	r3, r0
 801572e:	80fb      	strh	r3, [r7, #6]
 8015730:	88fb      	ldrh	r3, [r7, #6]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d001      	beq.n	801573a <rfalNfcaPollerInitialize+0x1e>
 8015736:	88fb      	ldrh	r3, [r7, #6]
 8015738:	e00e      	b.n	8015758 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801573a:	2001      	movs	r0, #1
 801573c:	f002 fcb8 	bl	80180b0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 8015740:	4807      	ldr	r0, [pc, #28]	; (8015760 <rfalNfcaPollerInitialize+0x44>)
 8015742:	f002 fced 	bl	8018120 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 8015746:	f240 4094 	movw	r0, #1172	; 0x494
 801574a:	f002 fcd5 	bl	80180f8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 801574e:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8015752:	f002 fcbd 	bl	80180d0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	000108d8 	.word	0x000108d8

08015764 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b086      	sub	sp, #24
 8015768:	af02      	add	r7, sp, #8
 801576a:	4603      	mov	r3, r0
 801576c:	6039      	str	r1, [r7, #0]
 801576e:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8015770:	f107 030c 	add.w	r3, r7, #12
 8015774:	79f8      	ldrb	r0, [r7, #7]
 8015776:	f240 6254 	movw	r2, #1620	; 0x654
 801577a:	9200      	str	r2, [sp, #0]
 801577c:	2210      	movs	r2, #16
 801577e:	6839      	ldr	r1, [r7, #0]
 8015780:	f003 fece 	bl	8019520 <rfalISO14443ATransceiveShortFrame>
 8015784:	4603      	mov	r3, r0
 8015786:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8015788:	89fb      	ldrh	r3, [r7, #14]
 801578a:	2b1d      	cmp	r3, #29
 801578c:	d00b      	beq.n	80157a6 <rfalNfcaPollerCheckPresence+0x42>
 801578e:	89fb      	ldrh	r3, [r7, #14]
 8015790:	2b15      	cmp	r3, #21
 8015792:	d008      	beq.n	80157a6 <rfalNfcaPollerCheckPresence+0x42>
 8015794:	89fb      	ldrh	r3, [r7, #14]
 8015796:	2b01      	cmp	r3, #1
 8015798:	d005      	beq.n	80157a6 <rfalNfcaPollerCheckPresence+0x42>
 801579a:	89fb      	ldrh	r3, [r7, #14]
 801579c:	2b09      	cmp	r3, #9
 801579e:	d002      	beq.n	80157a6 <rfalNfcaPollerCheckPresence+0x42>
 80157a0:	89fb      	ldrh	r3, [r7, #14]
 80157a2:	2b1b      	cmp	r3, #27
 80157a4:	d101      	bne.n	80157aa <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 80157a6:	2300      	movs	r3, #0
 80157a8:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 80157aa:	89fb      	ldrh	r3, [r7, #14]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3710      	adds	r7, #16
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}

080157b4 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	4603      	mov	r3, r0
 80157bc:	6039      	str	r1, [r7, #0]
 80157be:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 80157c0:	79fb      	ldrb	r3, [r7, #7]
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d101      	bne.n	80157ca <rfalNfcaPollerTechnologyDetection+0x16>
 80157c6:	2352      	movs	r3, #82	; 0x52
 80157c8:	e000      	b.n	80157cc <rfalNfcaPollerTechnologyDetection+0x18>
 80157ca:	2326      	movs	r3, #38	; 0x26
 80157cc:	6839      	ldr	r1, [r7, #0]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7ff ffc8 	bl	8015764 <rfalNfcaPollerCheckPresence>
 80157d4:	4603      	mov	r3, r0
 80157d6:	81fb      	strh	r3, [r7, #14]
 80157d8:	89fb      	ldrh	r3, [r7, #14]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <rfalNfcaPollerTechnologyDetection+0x2e>
 80157de:	89fb      	ldrh	r3, [r7, #14]
 80157e0:	e005      	b.n	80157ee <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 80157e2:	79fb      	ldrb	r3, [r7, #7]
 80157e4:	2b02      	cmp	r3, #2
 80157e6:	d001      	beq.n	80157ec <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 80157e8:	f000 fb60 	bl	8015eac <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 80157ec:	2300      	movs	r3, #0
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3710      	adds	r7, #16
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 80157f6:	b590      	push	{r4, r7, lr}
 80157f8:	b08f      	sub	sp, #60	; 0x3c
 80157fa:	af04      	add	r7, sp, #16
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	603b      	str	r3, [r7, #0]
 8015802:	4603      	mov	r3, r0
 8015804:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 8015806:	2300      	movs	r3, #0
 8015808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 801580c:	2303      	movs	r3, #3
 801580e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d008      	beq.n	801582a <rfalNfcaPollerSingleCollisionResolution+0x34>
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d005      	beq.n	801582a <rfalNfcaPollerSingleCollisionResolution+0x34>
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d002      	beq.n	801582a <rfalNfcaPollerSingleCollisionResolution+0x34>
 8015824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015826:	2b00      	cmp	r3, #0
 8015828:	d101      	bne.n	801582e <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 801582a:	2307      	movs	r3, #7
 801582c:	e1ad      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	2200      	movs	r2, #0
 8015832:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 8015834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015836:	2200      	movs	r2, #0
 8015838:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 801583a:	220a      	movs	r2, #10
 801583c:	2100      	movs	r1, #0
 801583e:	6838      	ldr	r0, [r7, #0]
 8015840:	f005 fdfc 	bl	801b43c <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8015844:	2300      	movs	r3, #0
 8015846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801584a:	e198      	b.n	8015b7e <rfalNfcaPollerSingleCollisionResolution+0x388>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 801584c:	f107 0318 	add.w	r3, r7, #24
 8015850:	2207      	movs	r2, #7
 8015852:	2100      	movs	r1, #0
 8015854:	4618      	mov	r0, r3
 8015856:	f005 fdf1 	bl	801b43c <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 801585a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	b2db      	uxtb	r3, r3
 8015862:	3b6d      	subs	r3, #109	; 0x6d
 8015864:	b2db      	uxtb	r3, r3
 8015866:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 8015868:	2302      	movs	r3, #2
 801586a:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 8015870:	2301      	movs	r3, #1
 8015872:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 8015876:	7d7b      	ldrb	r3, [r7, #21]
 8015878:	011b      	lsls	r3, r3, #4
 801587a:	b2da      	uxtb	r2, r3
 801587c:	7d3b      	ldrb	r3, [r7, #20]
 801587e:	f003 030f 	and.w	r3, r3, #15
 8015882:	b2db      	uxtb	r3, r3
 8015884:	4313      	orrs	r3, r2
 8015886:	b2db      	uxtb	r3, r3
 8015888:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 801588a:	7bfb      	ldrb	r3, [r7, #15]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d101      	bne.n	8015894 <rfalNfcaPollerSingleCollisionResolution+0x9e>
 8015890:	2302      	movs	r3, #2
 8015892:	e000      	b.n	8015896 <rfalNfcaPollerSingleCollisionResolution+0xa0>
 8015894:	2300      	movs	r3, #0
 8015896:	f887 3020 	strb.w	r3, [r7, #32]
 801589a:	f107 0316 	add.w	r3, r7, #22
 801589e:	f107 0214 	add.w	r2, r7, #20
 80158a2:	f107 0115 	add.w	r1, r7, #21
 80158a6:	f107 0018 	add.w	r0, r7, #24
 80158aa:	f240 6454 	movw	r4, #1620	; 0x654
 80158ae:	9400      	str	r4, [sp, #0]
 80158b0:	f003 ff32 	bl	8019718 <rfalISO14443ATransceiveAnticollisionFrame>
 80158b4:	4603      	mov	r3, r0
 80158b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80158b8:	7bfb      	ldrb	r3, [r7, #15]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d102      	bne.n	80158c4 <rfalNfcaPollerSingleCollisionResolution+0xce>
 80158be:	2005      	movs	r0, #5
 80158c0:	f7ee ff10 	bl	80046e4 <HAL_Delay>
 80158c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158c8:	1e5a      	subs	r2, r3, #1
 80158ca:	f887 2020 	strb.w	r2, [r7, #32]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d002      	beq.n	80158d8 <rfalNfcaPollerSingleCollisionResolution+0xe2>
 80158d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158d4:	2b04      	cmp	r3, #4
 80158d6:	d0e0      	beq.n	801589a <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 80158d8:	8afb      	ldrh	r3, [r7, #22]
 80158da:	3307      	adds	r3, #7
 80158dc:	08db      	lsrs	r3, r3, #3
 80158de:	b29b      	uxth	r3, r3
 80158e0:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 80158e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158e4:	2b04      	cmp	r3, #4
 80158e6:	d146      	bne.n	8015976 <rfalNfcaPollerSingleCollisionResolution+0x180>
                && (backtrackCnt != 0U) && !doBacktrack
 80158e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d042      	beq.n	8015976 <rfalNfcaPollerSingleCollisionResolution+0x180>
 80158f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158f4:	f083 0301 	eor.w	r3, r3, #1
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d03b      	beq.n	8015976 <rfalNfcaPollerSingleCollisionResolution+0x180>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 80158fe:	7d7b      	ldrb	r3, [r7, #21]
 8015900:	2b02      	cmp	r3, #2
 8015902:	d102      	bne.n	801590a <rfalNfcaPollerSingleCollisionResolution+0x114>
 8015904:	7d3b      	ldrb	r3, [r7, #20]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d035      	beq.n	8015976 <rfalNfcaPollerSingleCollisionResolution+0x180>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 801590a:	231d      	movs	r3, #29
 801590c:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 801590e:	f107 0310 	add.w	r3, r7, #16
 8015912:	4619      	mov	r1, r3
 8015914:	2026      	movs	r0, #38	; 0x26
 8015916:	f7ff ff25 	bl	8015764 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 801591a:	7d3b      	ldrb	r3, [r7, #20]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d106      	bne.n	801592e <rfalNfcaPollerSingleCollisionResolution+0x138>
                {
                    bitsTxRx = 7;
 8015920:	2307      	movs	r3, #7
 8015922:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 8015924:	7d7b      	ldrb	r3, [r7, #21]
 8015926:	3b01      	subs	r3, #1
 8015928:	b2db      	uxtb	r3, r3
 801592a:	757b      	strb	r3, [r7, #21]
 801592c:	e003      	b.n	8015936 <rfalNfcaPollerSingleCollisionResolution+0x140>
                }
                else
                {
                    bitsTxRx--;
 801592e:	7d3b      	ldrb	r3, [r7, #20]
 8015930:	3b01      	subs	r3, #1
 8015932:	b2db      	uxtb	r3, r3
 8015934:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8015936:	7d7b      	ldrb	r3, [r7, #21]
 8015938:	461a      	mov	r2, r3
 801593a:	f107 0318 	add.w	r3, r7, #24
 801593e:	4413      	add	r3, r2
 8015940:	781a      	ldrb	r2, [r3, #0]
 8015942:	7d3b      	ldrb	r3, [r7, #20]
 8015944:	4619      	mov	r1, r3
 8015946:	2301      	movs	r3, #1
 8015948:	408b      	lsls	r3, r1
 801594a:	b2db      	uxtb	r3, r3
 801594c:	4013      	ands	r3, r2
 801594e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8015952:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015956:	2b00      	cmp	r3, #0
 8015958:	d101      	bne.n	801595e <rfalNfcaPollerSingleCollisionResolution+0x168>
 801595a:	2301      	movs	r3, #1
 801595c:	e000      	b.n	8015960 <rfalNfcaPollerSingleCollisionResolution+0x16a>
 801595e:	2300      	movs	r3, #0
 8015960:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 8015964:	2301      	movs	r3, #1
 8015966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 801596a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801596e:	3b01      	subs	r3, #1
 8015970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 8015974:	e002      	b.n	801597c <rfalNfcaPollerSingleCollisionResolution+0x186>
            }
            else
            {
                doBacktrack = false;
 8015976:	2300      	movs	r3, #0
 8015978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 801597c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801597e:	2b1d      	cmp	r3, #29
 8015980:	d17e      	bne.n	8015a80 <rfalNfcaPollerSingleCollisionResolution+0x28a>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8015982:	7d7b      	ldrb	r3, [r7, #21]
 8015984:	461a      	mov	r2, r3
 8015986:	7d3b      	ldrb	r3, [r7, #20]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d001      	beq.n	8015990 <rfalNfcaPollerSingleCollisionResolution+0x19a>
 801598c:	2301      	movs	r3, #1
 801598e:	e000      	b.n	8015992 <rfalNfcaPollerSingleCollisionResolution+0x19c>
 8015990:	2300      	movs	r3, #0
 8015992:	4413      	add	r3, r2
 8015994:	2b07      	cmp	r3, #7
 8015996:	d901      	bls.n	801599c <rfalNfcaPollerSingleCollisionResolution+0x1a6>
                {
                    return ERR_PROTO;
 8015998:	230b      	movs	r3, #11
 801599a:	e0f6      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 801599c:	7d7b      	ldrb	r3, [r7, #21]
 801599e:	461a      	mov	r2, r3
 80159a0:	7d3b      	ldrb	r3, [r7, #20]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d001      	beq.n	80159aa <rfalNfcaPollerSingleCollisionResolution+0x1b4>
 80159a6:	2301      	movs	r3, #1
 80159a8:	e000      	b.n	80159ac <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 80159aa:	2300      	movs	r3, #0
 80159ac:	4413      	add	r3, r2
 80159ae:	2b06      	cmp	r3, #6
 80159b0:	d91a      	bls.n	80159e8 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
 80159b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d016      	beq.n	80159e8 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 80159ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159be:	3b01      	subs	r3, #1
 80159c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 80159c4:	2305      	movs	r3, #5
 80159c6:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 80159c8:	2307      	movs	r3, #7
 80159ca:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 80159cc:	7d7b      	ldrb	r3, [r7, #21]
 80159ce:	461a      	mov	r2, r3
 80159d0:	f107 0318 	add.w	r3, r7, #24
 80159d4:	4413      	add	r3, r2
 80159d6:	781a      	ldrb	r2, [r3, #0]
 80159d8:	7d3b      	ldrb	r3, [r7, #20]
 80159da:	4619      	mov	r1, r3
 80159dc:	2301      	movs	r3, #1
 80159de:	408b      	lsls	r3, r1
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	4013      	ands	r3, r2
 80159e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 80159e8:	7bfb      	ldrb	r3, [r7, #15]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d10b      	bne.n	8015a06 <rfalNfcaPollerSingleCollisionResolution+0x210>
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	f083 0301 	eor.w	r3, r3, #1
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d004      	beq.n	8015a06 <rfalNfcaPollerSingleCollisionResolution+0x210>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	2201      	movs	r2, #1
 8015a00:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 8015a02:	2312      	movs	r3, #18
 8015a04:	e0c1      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
                }
                
                *collPending = true;
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	2201      	movs	r2, #1
 8015a0a:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8015a0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d013      	beq.n	8015a3c <rfalNfcaPollerSingleCollisionResolution+0x246>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 8015a14:	7d7b      	ldrb	r3, [r7, #21]
 8015a16:	461a      	mov	r2, r3
 8015a18:	f107 0318 	add.w	r3, r7, #24
 8015a1c:	4413      	add	r3, r2
 8015a1e:	7819      	ldrb	r1, [r3, #0]
 8015a20:	7d3b      	ldrb	r3, [r7, #20]
 8015a22:	461a      	mov	r2, r3
 8015a24:	2301      	movs	r3, #1
 8015a26:	4093      	lsls	r3, r2
 8015a28:	b2da      	uxtb	r2, r3
 8015a2a:	7d7b      	ldrb	r3, [r7, #21]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f107 0318 	add.w	r3, r7, #24
 8015a32:	4403      	add	r3, r0
 8015a34:	430a      	orrs	r2, r1
 8015a36:	b2d2      	uxtb	r2, r2
 8015a38:	701a      	strb	r2, [r3, #0]
 8015a3a:	e014      	b.n	8015a66 <rfalNfcaPollerSingleCollisionResolution+0x270>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 8015a3c:	7d7b      	ldrb	r3, [r7, #21]
 8015a3e:	461a      	mov	r2, r3
 8015a40:	f107 0318 	add.w	r3, r7, #24
 8015a44:	4413      	add	r3, r2
 8015a46:	7819      	ldrb	r1, [r3, #0]
 8015a48:	7d3b      	ldrb	r3, [r7, #20]
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	4093      	lsls	r3, r2
 8015a50:	b2db      	uxtb	r3, r3
 8015a52:	43db      	mvns	r3, r3
 8015a54:	b2da      	uxtb	r2, r3
 8015a56:	7d7b      	ldrb	r3, [r7, #21]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f107 0318 	add.w	r3, r7, #24
 8015a5e:	4403      	add	r3, r0
 8015a60:	400a      	ands	r2, r1
 8015a62:	b2d2      	uxtb	r2, r2
 8015a64:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 8015a66:	7d3b      	ldrb	r3, [r7, #20]
 8015a68:	3301      	adds	r3, #1
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8015a6e:	7d3b      	ldrb	r3, [r7, #20]
 8015a70:	2b08      	cmp	r3, #8
 8015a72:	d105      	bne.n	8015a80 <rfalNfcaPollerSingleCollisionResolution+0x28a>
                {
                    bitsTxRx = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 8015a78:	7d7b      	ldrb	r3, [r7, #21]
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 8015a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a82:	2b1d      	cmp	r3, #29
 8015a84:	f43f aef4 	beq.w	8015870 <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 8015a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d001      	beq.n	8015a92 <rfalNfcaPollerSingleCollisionResolution+0x29c>
        {
            return ret;
 8015a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a90:	e07b      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 8015a92:	7bfb      	ldrb	r3, [r7, #15]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d104      	bne.n	8015aa2 <rfalNfcaPollerSingleCollisionResolution+0x2ac>
 8015a98:	8afb      	ldrh	r3, [r7, #22]
 8015a9a:	2b05      	cmp	r3, #5
 8015a9c:	d001      	beq.n	8015aa2 <rfalNfcaPollerSingleCollisionResolution+0x2ac>
        {
            return ERR_PROTO;
 8015a9e:	230b      	movs	r3, #11
 8015aa0:	e073      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8015aa2:	7fbc      	ldrb	r4, [r7, #30]
 8015aa4:	f107 0318 	add.w	r3, r7, #24
 8015aa8:	3302      	adds	r3, #2
 8015aaa:	2104      	movs	r1, #4
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7ff fe15 	bl	80156dc <rfalNfcaCalculateBcc>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	429c      	cmp	r4, r3
 8015ab6:	d001      	beq.n	8015abc <rfalNfcaPollerSingleCollisionResolution+0x2c6>
        {
            return ERR_PROTO;
 8015ab8:	230b      	movs	r3, #11
 8015aba:	e066      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8015abc:	2370      	movs	r3, #112	; 0x70
 8015abe:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8015ac0:	7bfb      	ldrb	r3, [r7, #15]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d101      	bne.n	8015aca <rfalNfcaPollerSingleCollisionResolution+0x2d4>
 8015ac6:	2302      	movs	r3, #2
 8015ac8:	e000      	b.n	8015acc <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 8015aca:	2300      	movs	r3, #0
 8015acc:	77fb      	strb	r3, [r7, #31]
 8015ace:	f107 0018 	add.w	r0, r7, #24
 8015ad2:	f240 6354 	movw	r3, #1620	; 0x654
 8015ad6:	9302      	str	r3, [sp, #8]
 8015ad8:	2300      	movs	r3, #0
 8015ada:	9301      	str	r3, [sp, #4]
 8015adc:	f107 0316 	add.w	r3, r7, #22
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	2107      	movs	r1, #7
 8015ae8:	f002 fd76 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8015aec:	4603      	mov	r3, r0
 8015aee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015af0:	7bfb      	ldrb	r3, [r7, #15]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d102      	bne.n	8015afc <rfalNfcaPollerSingleCollisionResolution+0x306>
 8015af6:	2005      	movs	r0, #5
 8015af8:	f7ee fdf4 	bl	80046e4 <HAL_Delay>
 8015afc:	7ffb      	ldrb	r3, [r7, #31]
 8015afe:	1e5a      	subs	r2, r3, #1
 8015b00:	77fa      	strb	r2, [r7, #31]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d002      	beq.n	8015b0c <rfalNfcaPollerSingleCollisionResolution+0x316>
 8015b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b08:	2b04      	cmp	r3, #4
 8015b0a:	d0e0      	beq.n	8015ace <rfalNfcaPollerSingleCollisionResolution+0x2d8>
        
        if( ret != ERR_NONE )
 8015b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d001      	beq.n	8015b16 <rfalNfcaPollerSingleCollisionResolution+0x320>
        {
            return ret;
 8015b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b14:	e039      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 8015b16:	8afb      	ldrh	r3, [r7, #22]
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d001      	beq.n	8015b20 <rfalNfcaPollerSingleCollisionResolution+0x32a>
        {
            return ERR_PROTO;
 8015b1c:	230b      	movs	r3, #11
 8015b1e:	e034      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8015b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d11b      	bne.n	8015b5e <rfalNfcaPollerSingleCollisionResolution+0x368>
 8015b26:	7ebb      	ldrb	r3, [r7, #26]
 8015b28:	2b88      	cmp	r3, #136	; 0x88
 8015b2a:	d118      	bne.n	8015b5e <rfalNfcaPollerSingleCollisionResolution+0x368>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8015b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	461a      	mov	r2, r3
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	1898      	adds	r0, r3, r2
 8015b36:	f107 0318 	add.w	r3, r7, #24
 8015b3a:	3302      	adds	r3, #2
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	2203      	movs	r2, #3
 8015b40:	4619      	mov	r1, r3
 8015b42:	f005 fc53 	bl	801b3ec <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8015b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	3303      	adds	r3, #3
 8015b4c:	b2da      	uxtb	r2, r3
 8015b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b50:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8015b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b56:	3301      	adds	r3, #1
 8015b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b5c:	e00f      	b.n	8015b7e <rfalNfcaPollerSingleCollisionResolution+0x388>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8015b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	461a      	mov	r2, r3
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	4413      	add	r3, r2
 8015b68:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8015b6c:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8015b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	3304      	adds	r3, #4
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b78:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	e005      	b.n	8015b8a <rfalNfcaPollerSingleCollisionResolution+0x394>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8015b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b82:	2b02      	cmp	r3, #2
 8015b84:	f67f ae62 	bls.w	801584c <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 8015b88:	230c      	movs	r3, #12
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	372c      	adds	r7, #44	; 0x2c
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd90      	pop	{r4, r7, pc}

08015b92 <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 8015b92:	b5b0      	push	{r4, r5, r7, lr}
 8015b94:	b08a      	sub	sp, #40	; 0x28
 8015b96:	af02      	add	r7, sp, #8
 8015b98:	60ba      	str	r2, [r7, #8]
 8015b9a:	607b      	str	r3, [r7, #4]
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	73fb      	strb	r3, [r7, #15]
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d002      	beq.n	8015bb0 <rfalNfcaPollerFullCollisionResolution+0x1e>
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d101      	bne.n	8015bb4 <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8015bb0:	2307      	movs	r3, #7
 8015bb2:	e105      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }
    
    *devCnt = 0;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8015bbe:	7bfb      	ldrb	r3, [r7, #15]
 8015bc0:	2b02      	cmp	r3, #2
 8015bc2:	d028      	beq.n	8015c16 <rfalNfcaPollerFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	1c59      	adds	r1, r3, #1
 8015bc8:	f107 0316 	add.w	r3, r7, #22
 8015bcc:	f240 6254 	movw	r2, #1620	; 0x654
 8015bd0:	9200      	str	r2, [sp, #0]
 8015bd2:	2210      	movs	r2, #16
 8015bd4:	2052      	movs	r0, #82	; 0x52
 8015bd6:	f003 fca3 	bl	8019520 <rfalISO14443ATransceiveShortFrame>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8015bde:	8bfb      	ldrh	r3, [r7, #30]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d010      	beq.n	8015c06 <rfalNfcaPollerFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8015be4:	7bfb      	ldrb	r3, [r7, #15]
 8015be6:	2b01      	cmp	r3, #1
 8015be8:	d00b      	beq.n	8015c02 <rfalNfcaPollerFullCollisionResolution+0x70>
 8015bea:	8bfb      	ldrh	r3, [r7, #30]
 8015bec:	2b1d      	cmp	r3, #29
 8015bee:	d00a      	beq.n	8015c06 <rfalNfcaPollerFullCollisionResolution+0x74>
 8015bf0:	8bfb      	ldrh	r3, [r7, #30]
 8015bf2:	2b15      	cmp	r3, #21
 8015bf4:	d007      	beq.n	8015c06 <rfalNfcaPollerFullCollisionResolution+0x74>
 8015bf6:	8bfb      	ldrh	r3, [r7, #30]
 8015bf8:	2b09      	cmp	r3, #9
 8015bfa:	d004      	beq.n	8015c06 <rfalNfcaPollerFullCollisionResolution+0x74>
 8015bfc:	8bfb      	ldrh	r3, [r7, #30]
 8015bfe:	2b1b      	cmp	r3, #27
 8015c00:	d001      	beq.n	8015c06 <rfalNfcaPollerFullCollisionResolution+0x74>
            {
                return ret;
 8015c02:	8bfb      	ldrh	r3, [r7, #30]
 8015c04:	e0dc      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 8015c06:	8bfb      	ldrh	r3, [r7, #30]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d104      	bne.n	8015c16 <rfalNfcaPollerFullCollisionResolution+0x84>
 8015c0c:	8afb      	ldrh	r3, [r7, #22]
 8015c0e:	2b10      	cmp	r3, #16
 8015c10:	d001      	beq.n	8015c16 <rfalNfcaPollerFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 8015c12:	230b      	movs	r3, #11
 8015c14:	e0d4      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	789b      	ldrb	r3, [r3, #2]
 8015c1a:	f003 030f 	and.w	r3, r3, #15
 8015c1e:	2b0c      	cmp	r3, #12
 8015c20:	d12a      	bne.n	8015c78 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015c22:	7bbb      	ldrb	r3, [r7, #14]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d027      	beq.n	8015c78 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015c28:	8bfb      	ldrh	r3, [r7, #30]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d124      	bne.n	8015c78 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8015c2e:	7bfb      	ldrb	r3, [r7, #15]
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d021      	beq.n	8015c78 <rfalNfcaPollerFullCollisionResolution+0xe6>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 8015c34:	f004 ffba 	bl	801abac <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	330f      	adds	r3, #15
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f004 ffd7 	bl	801abf0 <rfalT1TPollerRid>
 8015c42:	4603      	mov	r3, r0
 8015c44:	83fb      	strh	r3, [r7, #30]
 8015c46:	8bfb      	ldrh	r3, [r7, #30]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <rfalNfcaPollerFullCollisionResolution+0xbe>
 8015c4c:	8bfb      	ldrh	r3, [r7, #30]
 8015c4e:	e0b7      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2201      	movs	r2, #1
 8015c54:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	2201      	movs	r2, #1
 8015c60:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2204      	movs	r2, #4
 8015c66:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	3305      	adds	r3, #5
 8015c6c:	68ba      	ldr	r2, [r7, #8]
 8015c6e:	3211      	adds	r2, #17
 8015c70:	6812      	ldr	r2, [r2, #0]
 8015c72:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 8015c74:	2300      	movs	r3, #0
 8015c76:	e0a3      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 8015c78:	68ba      	ldr	r2, [r7, #8]
 8015c7a:	f107 0318 	add.w	r3, r7, #24
 8015c7e:	3201      	adds	r2, #1
 8015c80:	8812      	ldrh	r2, [r2, #0]
 8015c82:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 8015c84:	7bbb      	ldrb	r3, [r7, #14]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d008      	beq.n	8015c9c <rfalNfcaPollerFullCollisionResolution+0x10a>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 8015c8a:	7bbb      	ldrb	r3, [r7, #14]
 8015c8c:	2216      	movs	r2, #22
 8015c8e:	fb02 f303 	mul.w	r3, r2, r3
 8015c92:	461a      	mov	r2, r3
 8015c94:	2100      	movs	r1, #0
 8015c96:	68b8      	ldr	r0, [r7, #8]
 8015c98:	f005 fbd0 	bl	801b43c <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	f107 0218 	add.w	r2, r7, #24
 8015ca4:	8812      	ldrh	r2, [r2, #0]
 8015ca6:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	461a      	mov	r2, r3
 8015cae:	2316      	movs	r3, #22
 8015cb0:	fb02 f303 	mul.w	r3, r2, r3
 8015cb4:	68ba      	ldr	r2, [r7, #8]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	1cdc      	adds	r4, r3, #3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	2316      	movs	r3, #22
 8015cc2:	fb02 f303 	mul.w	r3, r2, r3
 8015cc6:	68ba      	ldr	r2, [r7, #8]
 8015cc8:	4413      	add	r3, r2
 8015cca:	1d5d      	adds	r5, r3, #5
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	461a      	mov	r2, r3
 8015cd2:	2316      	movs	r3, #22
 8015cd4:	fb02 f303 	mul.w	r3, r2, r3
 8015cd8:	68ba      	ldr	r2, [r7, #8]
 8015cda:	4413      	add	r3, r2
 8015cdc:	3304      	adds	r3, #4
 8015cde:	f107 011c 	add.w	r1, r7, #28
 8015ce2:	7bb8      	ldrb	r0, [r7, #14]
 8015ce4:	9300      	str	r3, [sp, #0]
 8015ce6:	462b      	mov	r3, r5
 8015ce8:	4622      	mov	r2, r4
 8015cea:	f7ff fd84 	bl	80157f6 <rfalNfcaPollerSingleCollisionResolution>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	83fb      	strh	r3, [r7, #30]
 8015cf2:	8bfb      	ldrh	r3, [r7, #30]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d001      	beq.n	8015cfc <rfalNfcaPollerFullCollisionResolution+0x16a>
 8015cf8:	8bfb      	ldrh	r3, [r7, #30]
 8015cfa:	e061      	b.n	8015dc0 <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	461a      	mov	r2, r3
 8015d02:	2316      	movs	r3, #22
 8015d04:	fb02 f303 	mul.w	r3, r2, r3
 8015d08:	68ba      	ldr	r2, [r7, #8]
 8015d0a:	4413      	add	r3, r2
 8015d0c:	78db      	ldrb	r3, [r3, #3]
 8015d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d12:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	461a      	mov	r2, r3
 8015d1a:	2316      	movs	r3, #22
 8015d1c:	fb02 f303 	mul.w	r3, r2, r3
 8015d20:	68ba      	ldr	r2, [r7, #8]
 8015d22:	4413      	add	r3, r2
 8015d24:	7f7a      	ldrb	r2, [r7, #29]
 8015d26:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	2316      	movs	r3, #22
 8015d30:	fb02 f303 	mul.w	r3, r2, r3
 8015d34:	68ba      	ldr	r2, [r7, #8]
 8015d36:	4413      	add	r3, r2
 8015d38:	2200      	movs	r2, #0
 8015d3a:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	3301      	adds	r3, #1
 8015d42:	b2da      	uxtb	r2, r3
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	7bba      	ldrb	r2, [r7, #14]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d92a      	bls.n	8015da8 <rfalNfcaPollerFullCollisionResolution+0x216>
 8015d52:	7f3b      	ldrb	r3, [r7, #28]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d102      	bne.n	8015d5e <rfalNfcaPollerFullCollisionResolution+0x1cc>
 8015d58:	7bfb      	ldrb	r3, [r7, #15]
 8015d5a:	2b02      	cmp	r3, #2
 8015d5c:	d024      	beq.n	8015da8 <rfalNfcaPollerFullCollisionResolution+0x216>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8015d5e:	f000 f8a5 	bl	8015eac <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	781b      	ldrb	r3, [r3, #0]
 8015d66:	461a      	mov	r2, r3
 8015d68:	2316      	movs	r3, #22
 8015d6a:	fb02 f303 	mul.w	r3, r2, r3
 8015d6e:	3b16      	subs	r3, #22
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	4413      	add	r3, r2
 8015d74:	2201      	movs	r2, #1
 8015d76:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	2316      	movs	r3, #22
 8015d80:	fb02 f303 	mul.w	r3, r2, r3
 8015d84:	68ba      	ldr	r2, [r7, #8]
 8015d86:	4413      	add	r3, r2
 8015d88:	3301      	adds	r3, #1
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	2026      	movs	r0, #38	; 0x26
 8015d8e:	f7ff fce9 	bl	8015764 <rfalNfcaPollerCheckPresence>
 8015d92:	4603      	mov	r3, r0
 8015d94:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8015d96:	8bfb      	ldrh	r3, [r7, #30]
 8015d98:	2b04      	cmp	r3, #4
 8015d9a:	d102      	bne.n	8015da2 <rfalNfcaPollerFullCollisionResolution+0x210>
            {
                /* No more devices found, exit */
                collPending = false;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8015da0:	e004      	b.n	8015dac <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 8015da2:	2301      	movs	r3, #1
 8015da4:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8015da6:	e001      	b.n	8015dac <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 8015da8:	2300      	movs	r3, #0
 8015daa:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	7bba      	ldrb	r2, [r7, #14]
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d903      	bls.n	8015dbe <rfalNfcaPollerFullCollisionResolution+0x22c>
 8015db6:	7f3b      	ldrb	r3, [r7, #28]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	f47f af75 	bne.w	8015ca8 <rfalNfcaPollerFullCollisionResolution+0x116>
    
    return ERR_NONE;
 8015dbe:	2300      	movs	r3, #0
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3720      	adds	r7, #32
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bdb0      	pop	{r4, r5, r7, pc}

08015dc8 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b08c      	sub	sp, #48	; 0x30
 8015dcc:	af04      	add	r7, sp, #16
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	607a      	str	r2, [r7, #4]
 8015dd4:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d005      	beq.n	8015de8 <rfalNfcaPollerSelect+0x20>
 8015ddc:	7afb      	ldrb	r3, [r7, #11]
 8015dde:	2b0a      	cmp	r3, #10
 8015de0:	d802      	bhi.n	8015de8 <rfalNfcaPollerSelect+0x20>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d101      	bne.n	8015dec <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 8015de8:	2307      	movs	r3, #7
 8015dea:	e058      	b.n	8015e9e <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 8015dec:	7afb      	ldrb	r3, [r7, #11]
 8015dee:	4a2e      	ldr	r2, [pc, #184]	; (8015ea8 <rfalNfcaPollerSelect+0xe0>)
 8015df0:	fba2 2303 	umull	r2, r3, r2, r3
 8015df4:	089b      	lsrs	r3, r3, #2
 8015df6:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	77fb      	strb	r3, [r7, #31]
 8015e00:	e048      	b.n	8015e94 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8015e02:	7ffb      	ldrb	r3, [r7, #31]
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	3b6d      	subs	r3, #109	; 0x6d
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8015e0e:	2370      	movs	r3, #112	; 0x70
 8015e10:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8015e12:	7f7a      	ldrb	r2, [r7, #29]
 8015e14:	7ffb      	ldrb	r3, [r7, #31]
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d00f      	beq.n	8015e3a <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 8015e1a:	2388      	movs	r3, #136	; 0x88
 8015e1c:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8015e1e:	7fbb      	ldrb	r3, [r7, #30]
 8015e20:	68fa      	ldr	r2, [r7, #12]
 8015e22:	18d1      	adds	r1, r2, r3
 8015e24:	f107 0310 	add.w	r3, r7, #16
 8015e28:	3303      	adds	r3, #3
 8015e2a:	2203      	movs	r2, #3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f005 fadd 	bl	801b3ec <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8015e32:	7fbb      	ldrb	r3, [r7, #30]
 8015e34:	3303      	adds	r3, #3
 8015e36:	77bb      	strb	r3, [r7, #30]
 8015e38:	e005      	b.n	8015e46 <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 8015e3a:	7fbb      	ldrb	r3, [r7, #30]
 8015e3c:	68fa      	ldr	r2, [r7, #12]
 8015e3e:	4413      	add	r3, r2
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 8015e46:	f107 0310 	add.w	r3, r7, #16
 8015e4a:	3302      	adds	r3, #2
 8015e4c:	2104      	movs	r1, #4
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ff fc44 	bl	80156dc <rfalNfcaCalculateBcc>
 8015e54:	4603      	mov	r3, r0
 8015e56:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8015e58:	f107 0010 	add.w	r0, r7, #16
 8015e5c:	f240 6354 	movw	r3, #1620	; 0x654
 8015e60:	9302      	str	r3, [sp, #8]
 8015e62:	2300      	movs	r3, #0
 8015e64:	9301      	str	r3, [sp, #4]
 8015e66:	f107 0318 	add.w	r3, r7, #24
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	2107      	movs	r1, #7
 8015e72:	f002 fbb1 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8015e76:	4603      	mov	r3, r0
 8015e78:	837b      	strh	r3, [r7, #26]
 8015e7a:	8b7b      	ldrh	r3, [r7, #26]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d001      	beq.n	8015e84 <rfalNfcaPollerSelect+0xbc>
 8015e80:	8b7b      	ldrh	r3, [r7, #26]
 8015e82:	e00c      	b.n	8015e9e <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 8015e84:	8b3b      	ldrh	r3, [r7, #24]
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d001      	beq.n	8015e8e <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 8015e8a:	230b      	movs	r3, #11
 8015e8c:	e007      	b.n	8015e9e <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8015e8e:	7ffb      	ldrb	r3, [r7, #31]
 8015e90:	3301      	adds	r3, #1
 8015e92:	77fb      	strb	r3, [r7, #31]
 8015e94:	7ffa      	ldrb	r2, [r7, #31]
 8015e96:	7f7b      	ldrb	r3, [r7, #29]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d9b2      	bls.n	8015e02 <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8015e9c:	2300      	movs	r3, #0
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3720      	adds	r7, #32
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	cccccccd 	.word	0xcccccccd

08015eac <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b086      	sub	sp, #24
 8015eb0:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8015eb2:	2350      	movs	r3, #80	; 0x50
 8015eb4:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8015eba:	1cfa      	adds	r2, r7, #3
 8015ebc:	1d38      	adds	r0, r7, #4
 8015ebe:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8015ec2:	9302      	str	r3, [sp, #8]
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	9301      	str	r3, [sp, #4]
 8015ec8:	2300      	movs	r3, #0
 8015eca:	9300      	str	r3, [sp, #0]
 8015ecc:	2301      	movs	r3, #1
 8015ece:	2102      	movs	r1, #2
 8015ed0:	f002 fb82 	bl	80185d8 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 8015ed4:	2300      	movs	r3, #0
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3708      	adds	r7, #8
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}

08015ede <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 8015ede:	b480      	push	{r7}
 8015ee0:	b083      	sub	sp, #12
 8015ee2:	af00      	add	r7, sp, #0
 8015ee4:	6078      	str	r0, [r7, #4]
 8015ee6:	460b      	mov	r3, r1
 8015ee8:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 8015eea:	887b      	ldrh	r3, [r7, #2]
 8015eec:	2b02      	cmp	r3, #2
 8015eee:	d108      	bne.n	8015f02 <rfalNfcaListenerIsSleepReq+0x24>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	2b50      	cmp	r3, #80	; 0x50
 8015ef6:	d104      	bne.n	8015f02 <rfalNfcaListenerIsSleepReq+0x24>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	3301      	adds	r3, #1
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d001      	beq.n	8015f06 <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 8015f02:	2300      	movs	r3, #0
 8015f04:	e000      	b.n	8015f08 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 8015f06:	2301      	movs	r3, #1
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	370c      	adds	r7, #12
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bc80      	pop	{r7}
 8015f10:	4770      	bx	lr

08015f12 <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 8015f12:	b480      	push	{r7}
 8015f14:	b083      	sub	sp, #12
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
 8015f1a:	460b      	mov	r3, r1
 8015f1c:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8015f1e:	78fb      	ldrb	r3, [r7, #3]
 8015f20:	2b0c      	cmp	r3, #12
 8015f22:	d004      	beq.n	8015f2e <rfalNfcbCheckSensbRes+0x1c>
 8015f24:	78fb      	ldrb	r3, [r7, #3]
 8015f26:	2b0d      	cmp	r3, #13
 8015f28:	d001      	beq.n	8015f2e <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 8015f2a:	230b      	movs	r3, #11
 8015f2c:	e00c      	b.n	8015f48 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	7a9b      	ldrb	r3, [r3, #10]
 8015f32:	f003 0308 	and.w	r3, r3, #8
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d103      	bne.n	8015f42 <rfalNfcbCheckSensbRes+0x30>
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	2b50      	cmp	r3, #80	; 0x50
 8015f40:	d001      	beq.n	8015f46 <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 8015f42:	230b      	movs	r3, #11
 8015f44:	e000      	b.n	8015f48 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bc80      	pop	{r7}
 8015f50:	4770      	bx	lr
	...

08015f54 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b082      	sub	sp, #8
 8015f58:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2100      	movs	r1, #0
 8015f5e:	2003      	movs	r0, #3
 8015f60:	f001 fd0a 	bl	8017978 <rfalSetMode>
 8015f64:	4603      	mov	r3, r0
 8015f66:	80fb      	strh	r3, [r7, #6]
 8015f68:	88fb      	ldrh	r3, [r7, #6]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d001      	beq.n	8015f72 <rfalNfcbPollerInitialize+0x1e>
 8015f6e:	88fb      	ldrh	r3, [r7, #6]
 8015f70:	e014      	b.n	8015f9c <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8015f72:	2001      	movs	r0, #1
 8015f74:	f002 f89c 	bl	80180b0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 8015f78:	480a      	ldr	r0, [pc, #40]	; (8015fa4 <rfalNfcbPollerInitialize+0x50>)
 8015f7a:	f002 f8d1 	bl	8018120 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 8015f7e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8015f82:	f002 f8b9 	bl	80180f8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8015f86:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8015f8a:	f002 f8a1 	bl	80180d0 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 8015f8e:	4b06      	ldr	r3, [pc, #24]	; (8015fa8 <rfalNfcbPollerInitialize+0x54>)
 8015f90:	2200      	movs	r2, #0
 8015f92:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 8015f94:	4b04      	ldr	r3, [pc, #16]	; (8015fa8 <rfalNfcbPollerInitialize+0x54>)
 8015f96:	2200      	movs	r2, #0
 8015f98:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 8015f9a:	2300      	movs	r3, #0
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3708      	adds	r7, #8
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	000108d8 	.word	0x000108d8
 8015fa8:	2000389c 	.word	0x2000389c

08015fac <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b08a      	sub	sp, #40	; 0x28
 8015fb0:	af04      	add	r7, sp, #16
 8015fb2:	60ba      	str	r2, [r7, #8]
 8015fb4:	607b      	str	r3, [r7, #4]
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	73fb      	strb	r3, [r7, #15]
 8015fba:	460b      	mov	r3, r1
 8015fbc:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 8015fbe:	7bfb      	ldrb	r3, [r7, #15]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d002      	beq.n	8015fca <rfalNfcbPollerCheckPresence+0x1e>
 8015fc4:	7bfb      	ldrb	r3, [r7, #15]
 8015fc6:	2b08      	cmp	r3, #8
 8015fc8:	d108      	bne.n	8015fdc <rfalNfcbPollerCheckPresence+0x30>
 8015fca:	7bbb      	ldrb	r3, [r7, #14]
 8015fcc:	2b04      	cmp	r3, #4
 8015fce:	d805      	bhi.n	8015fdc <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d002      	beq.n	8015fdc <rfalNfcbPollerCheckPresence+0x30>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d101      	bne.n	8015fe0 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 8015fdc:	2307      	movs	r3, #7
 8015fde:	e044      	b.n	801606a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8015fe6:	220d      	movs	r2, #13
 8015fe8:	2100      	movs	r1, #0
 8015fea:	68b8      	ldr	r0, [r7, #8]
 8015fec:	f005 fa26 	bl	801b43c <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 8015ff0:	2305      	movs	r3, #5
 8015ff2:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8015ff4:	4b1f      	ldr	r3, [pc, #124]	; (8016074 <rfalNfcbPollerCheckPresence+0xc8>)
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8015ffa:	4b1e      	ldr	r3, [pc, #120]	; (8016074 <rfalNfcbPollerCheckPresence+0xc8>)
 8015ffc:	785b      	ldrb	r3, [r3, #1]
 8015ffe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016002:	b2da      	uxtb	r2, r3
 8016004:	7bfb      	ldrb	r3, [r7, #15]
 8016006:	4313      	orrs	r3, r2
 8016008:	b2da      	uxtb	r2, r3
 801600a:	7bbb      	ldrb	r3, [r7, #14]
 801600c:	4313      	orrs	r3, r2
 801600e:	b2db      	uxtb	r3, r3
 8016010:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8016012:	f107 0010 	add.w	r0, r7, #16
 8016016:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 801601a:	9302      	str	r3, [sp, #8]
 801601c:	2300      	movs	r3, #0
 801601e:	9301      	str	r3, [sp, #4]
 8016020:	f107 0314 	add.w	r3, r7, #20
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	230d      	movs	r3, #13
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	2103      	movs	r1, #3
 801602c:	f002 fad4 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8016030:	4603      	mov	r3, r0
 8016032:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8016034:	8abb      	ldrh	r3, [r7, #20]
 8016036:	b2da      	uxtb	r2, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801603c:	8afb      	ldrh	r3, [r7, #22]
 801603e:	2b15      	cmp	r3, #21
 8016040:	d002      	beq.n	8016048 <rfalNfcbPollerCheckPresence+0x9c>
 8016042:	8afb      	ldrh	r3, [r7, #22]
 8016044:	2b09      	cmp	r3, #9
 8016046:	d104      	bne.n	8016052 <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2200      	movs	r2, #0
 801604c:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 801604e:	2300      	movs	r3, #0
 8016050:	e00b      	b.n	801606a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 8016052:	8afb      	ldrh	r3, [r7, #22]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d107      	bne.n	8016068 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	4619      	mov	r1, r3
 801605e:	68b8      	ldr	r0, [r7, #8]
 8016060:	f7ff ff57 	bl	8015f12 <rfalNfcbCheckSensbRes>
 8016064:	4603      	mov	r3, r0
 8016066:	e000      	b.n	801606a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 8016068:	8afb      	ldrh	r3, [r7, #22]
}
 801606a:	4618      	mov	r0, r3
 801606c:	3718      	adds	r7, #24
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}
 8016072:	bf00      	nop
 8016074:	2000389c 	.word	0x2000389c

08016078 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b08a      	sub	sp, #40	; 0x28
 801607c:	af04      	add	r7, sp, #16
 801607e:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d101      	bne.n	801608a <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 8016086:	2307      	movs	r3, #7
 8016088:	e024      	b.n	80160d4 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 801608a:	2350      	movs	r3, #80	; 0x50
 801608c:	733b      	strb	r3, [r7, #12]
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 8016092:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 8016096:	f107 0208 	add.w	r2, r7, #8
 801609a:	f107 000c 	add.w	r0, r7, #12
 801609e:	4b0f      	ldr	r3, [pc, #60]	; (80160dc <rfalNfcbPollerSleep+0x64>)
 80160a0:	9302      	str	r3, [sp, #8]
 80160a2:	2300      	movs	r3, #0
 80160a4:	9301      	str	r3, [sp, #4]
 80160a6:	f107 0314 	add.w	r3, r7, #20
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	2301      	movs	r3, #1
 80160ae:	2105      	movs	r1, #5
 80160b0:	f002 fa92 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 80160b4:	4603      	mov	r3, r0
 80160b6:	82fb      	strh	r3, [r7, #22]
 80160b8:	8afb      	ldrh	r3, [r7, #22]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d001      	beq.n	80160c2 <rfalNfcbPollerSleep+0x4a>
 80160be:	8afb      	ldrh	r3, [r7, #22]
 80160c0:	e008      	b.n	80160d4 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 80160c2:	8abb      	ldrh	r3, [r7, #20]
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	d102      	bne.n	80160ce <rfalNfcbPollerSleep+0x56>
 80160c8:	7a3b      	ldrb	r3, [r7, #8]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d001      	beq.n	80160d2 <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 80160ce:	230b      	movs	r3, #11
 80160d0:	e000      	b.n	80160d4 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 80160d2:	2300      	movs	r3, #0
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	0003a278 	.word	0x0003a278

080160e0 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b08a      	sub	sp, #40	; 0x28
 80160e4:	af04      	add	r7, sp, #16
 80160e6:	4603      	mov	r3, r0
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	607a      	str	r2, [r7, #4]
 80160ec:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d008      	beq.n	8016106 <rfalNfcbPollerSlotMarker+0x26>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d005      	beq.n	8016106 <rfalNfcbPollerSlotMarker+0x26>
 80160fa:	7bfb      	ldrb	r3, [r7, #15]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d002      	beq.n	8016106 <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 8016100:	7bfb      	ldrb	r3, [r7, #15]
 8016102:	2b10      	cmp	r3, #16
 8016104:	d901      	bls.n	801610a <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 8016106:	2307      	movs	r3, #7
 8016108:	e02f      	b.n	801616a <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 801610a:	7bfb      	ldrb	r3, [r7, #15]
 801610c:	011b      	lsls	r3, r3, #4
 801610e:	b25b      	sxtb	r3, r3
 8016110:	f043 0305 	orr.w	r3, r3, #5
 8016114:	b25b      	sxtb	r3, r3
 8016116:	b2db      	uxtb	r3, r3
 8016118:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 801611a:	f107 0014 	add.w	r0, r7, #20
 801611e:	4b15      	ldr	r3, [pc, #84]	; (8016174 <rfalNfcbPollerSlotMarker+0x94>)
 8016120:	9302      	str	r3, [sp, #8]
 8016122:	2300      	movs	r3, #0
 8016124:	9301      	str	r3, [sp, #4]
 8016126:	f107 0312 	add.w	r3, r7, #18
 801612a:	9300      	str	r3, [sp, #0]
 801612c:	230d      	movs	r3, #13
 801612e:	68ba      	ldr	r2, [r7, #8]
 8016130:	2101      	movs	r1, #1
 8016132:	f002 fa51 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8016136:	4603      	mov	r3, r0
 8016138:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 801613a:	8a7b      	ldrh	r3, [r7, #18]
 801613c:	b2da      	uxtb	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8016142:	8afb      	ldrh	r3, [r7, #22]
 8016144:	2b15      	cmp	r3, #21
 8016146:	d002      	beq.n	801614e <rfalNfcbPollerSlotMarker+0x6e>
 8016148:	8afb      	ldrh	r3, [r7, #22]
 801614a:	2b09      	cmp	r3, #9
 801614c:	d101      	bne.n	8016152 <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 801614e:	231d      	movs	r3, #29
 8016150:	e00b      	b.n	801616a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 8016152:	8afb      	ldrh	r3, [r7, #22]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d107      	bne.n	8016168 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	4619      	mov	r1, r3
 801615e:	68b8      	ldr	r0, [r7, #8]
 8016160:	f7ff fed7 	bl	8015f12 <rfalNfcbCheckSensbRes>
 8016164:	4603      	mov	r3, r0
 8016166:	e000      	b.n	801616a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 8016168:	8afb      	ldrh	r3, [r7, #22]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3718      	adds	r7, #24
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	0003a278 	.word	0x0003a278

08016178 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	4603      	mov	r3, r0
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	607a      	str	r2, [r7, #4]
 8016184:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	68ba      	ldr	r2, [r7, #8]
 801618a:	2100      	movs	r1, #0
 801618c:	2000      	movs	r0, #0
 801618e:	f7ff ff0d 	bl	8015fac <rfalNfcbPollerCheckPresence>
 8016192:	4603      	mov	r3, r0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3710      	adds	r7, #16
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b08a      	sub	sp, #40	; 0x28
 80161a0:	af04      	add	r7, sp, #16
 80161a2:	60ba      	str	r2, [r7, #8]
 80161a4:	607b      	str	r3, [r7, #4]
 80161a6:	4603      	mov	r3, r0
 80161a8:	73fb      	strb	r3, [r7, #15]
 80161aa:	460b      	mov	r3, r1
 80161ac:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 80161ae:	7bb9      	ldrb	r1, [r7, #14]
 80161b0:	7bf8      	ldrb	r0, [r7, #15]
 80161b2:	f107 0317 	add.w	r3, r7, #23
 80161b6:	9302      	str	r3, [sp, #8]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	9301      	str	r3, [sp, #4]
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	9300      	str	r3, [sp, #0]
 80161c0:	2304      	movs	r3, #4
 80161c2:	2200      	movs	r2, #0
 80161c4:	f000 f805 	bl	80161d2 <rfalNfcbPollerSlottedCollisionResolution>
 80161c8:	4603      	mov	r3, r0
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3718      	adds	r7, #24
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 80161d2:	b590      	push	{r4, r7, lr}
 80161d4:	b085      	sub	sp, #20
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	4604      	mov	r4, r0
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
 80161de:	461a      	mov	r2, r3
 80161e0:	4623      	mov	r3, r4
 80161e2:	71fb      	strb	r3, [r7, #7]
 80161e4:	4603      	mov	r3, r0
 80161e6:	71bb      	strb	r3, [r7, #6]
 80161e8:	460b      	mov	r3, r1
 80161ea:	717b      	strb	r3, [r7, #5]
 80161ec:	4613      	mov	r3, r2
 80161ee:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d011      	beq.n	801621a <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80161f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d00e      	beq.n	801621a <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80161fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d00b      	beq.n	801621a <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8016202:	797b      	ldrb	r3, [r7, #5]
 8016204:	2b04      	cmp	r3, #4
 8016206:	d808      	bhi.n	801621a <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8016208:	793b      	ldrb	r3, [r7, #4]
 801620a:	2b04      	cmp	r3, #4
 801620c:	d805      	bhi.n	801621a <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 801620e:	79fb      	ldrb	r3, [r7, #7]
 8016210:	2b02      	cmp	r3, #2
 8016212:	d104      	bne.n	801621e <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 8016214:	797b      	ldrb	r3, [r7, #5]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d001      	beq.n	801621e <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 801621a:	2307      	movs	r3, #7
 801621c:	e14c      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 801621e:	2300      	movs	r3, #0
 8016220:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 8016222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016224:	2200      	movs	r2, #0
 8016226:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 8016228:	2300      	movs	r3, #0
 801622a:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 801622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622e:	2200      	movs	r2, #0
 8016230:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8016232:	79fb      	ldrb	r3, [r7, #7]
 8016234:	2b02      	cmp	r3, #2
 8016236:	d010      	beq.n	801625a <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 8016238:	6a3b      	ldr	r3, [r7, #32]
 801623a:	1c5a      	adds	r2, r3, #1
 801623c:	6a3b      	ldr	r3, [r7, #32]
 801623e:	7979      	ldrb	r1, [r7, #5]
 8016240:	2008      	movs	r0, #8
 8016242:	f7ff feb3 	bl	8015fac <rfalNfcbPollerCheckPresence>
 8016246:	4603      	mov	r3, r0
 8016248:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 801624a:	89fb      	ldrh	r3, [r7, #14]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d004      	beq.n	801625a <rfalNfcbPollerSlottedCollisionResolution+0x88>
 8016250:	797b      	ldrb	r3, [r7, #5]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d101      	bne.n	801625a <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 8016256:	89fb      	ldrh	r3, [r7, #14]
 8016258:	e12e      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 801625a:	79fb      	ldrb	r3, [r7, #7]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d105      	bne.n	801626c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 8016260:	6a3b      	ldr	r3, [r7, #32]
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d101      	bne.n	801626c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 8016268:	2309      	movs	r3, #9
 801626a:	e125      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 801626c:	797b      	ldrb	r3, [r7, #5]
 801626e:	737b      	strb	r3, [r7, #13]
 8016270:	e11c      	b.n	80164ac <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 8016272:	79fb      	ldrb	r3, [r7, #7]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d11a      	bne.n	80162ae <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 8016278:	7afb      	ldrb	r3, [r7, #11]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d017      	beq.n	80162ae <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 801627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	461a      	mov	r2, r3
 8016284:	4613      	mov	r3, r2
 8016286:	011b      	lsls	r3, r3, #4
 8016288:	1a9b      	subs	r3, r3, r2
 801628a:	3b0f      	subs	r3, #15
 801628c:	6a3a      	ldr	r2, [r7, #32]
 801628e:	4413      	add	r3, r2
 8016290:	3302      	adds	r3, #2
 8016292:	4618      	mov	r0, r3
 8016294:	f7ff fef0 	bl	8016078 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 8016298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	461a      	mov	r2, r3
 801629e:	4613      	mov	r3, r2
 80162a0:	011b      	lsls	r3, r3, #4
 80162a2:	1a9b      	subs	r3, r3, r2
 80162a4:	3b0f      	subs	r3, #15
 80162a6:	6a3a      	ldr	r2, [r7, #32]
 80162a8:	4413      	add	r3, r2
 80162aa:	2201      	movs	r2, #1
 80162ac:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 80162ae:	7b7a      	ldrb	r2, [r7, #13]
 80162b0:	797b      	ldrb	r3, [r7, #5]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d103      	bne.n	80162be <rfalNfcbPollerSlottedCollisionResolution+0xec>
 80162b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d017      	beq.n	80162ee <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80162be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c0:	781b      	ldrb	r3, [r3, #0]
 80162c2:	461a      	mov	r2, r3
 80162c4:	4613      	mov	r3, r2
 80162c6:	011b      	lsls	r3, r3, #4
 80162c8:	1a9b      	subs	r3, r3, r2
 80162ca:	6a3a      	ldr	r2, [r7, #32]
 80162cc:	4413      	add	r3, r2
 80162ce:	1c58      	adds	r0, r3, #1
 80162d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	461a      	mov	r2, r3
 80162d6:	4613      	mov	r3, r2
 80162d8:	011b      	lsls	r3, r3, #4
 80162da:	1a9b      	subs	r3, r3, r2
 80162dc:	6a3a      	ldr	r2, [r7, #32]
 80162de:	4413      	add	r3, r2
 80162e0:	7b79      	ldrb	r1, [r7, #13]
 80162e2:	4602      	mov	r2, r0
 80162e4:	2000      	movs	r0, #0
 80162e6:	f7ff fe61 	bl	8015fac <rfalNfcbPollerCheckPresence>
 80162ea:	4603      	mov	r3, r0
 80162ec:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 80162f2:	2300      	movs	r3, #0
 80162f4:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 80162f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f8:	2200      	movs	r2, #0
 80162fa:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 80162fc:	7b3b      	ldrb	r3, [r7, #12]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d017      	beq.n	8016332 <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 8016302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	461a      	mov	r2, r3
 8016308:	4613      	mov	r3, r2
 801630a:	011b      	lsls	r3, r3, #4
 801630c:	1a9b      	subs	r3, r3, r2
 801630e:	6a3a      	ldr	r2, [r7, #32]
 8016310:	4413      	add	r3, r2
 8016312:	1c59      	adds	r1, r3, #1
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	461a      	mov	r2, r3
 801631a:	4613      	mov	r3, r2
 801631c:	011b      	lsls	r3, r3, #4
 801631e:	1a9b      	subs	r3, r3, r2
 8016320:	6a3a      	ldr	r2, [r7, #32]
 8016322:	4413      	add	r3, r2
 8016324:	461a      	mov	r2, r3
 8016326:	7b3b      	ldrb	r3, [r7, #12]
 8016328:	4618      	mov	r0, r3
 801632a:	f7ff fed9 	bl	80160e0 <rfalNfcbPollerSlotMarker>
 801632e:	4603      	mov	r3, r0
 8016330:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 8016332:	89fb      	ldrh	r3, [r7, #14]
 8016334:	2b04      	cmp	r3, #4
 8016336:	f000 809d 	beq.w	8016474 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 801633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	461a      	mov	r2, r3
 8016340:	4613      	mov	r3, r2
 8016342:	011b      	lsls	r3, r3, #4
 8016344:	1a9b      	subs	r3, r3, r2
 8016346:	6a3a      	ldr	r2, [r7, #32]
 8016348:	4413      	add	r3, r2
 801634a:	1c58      	adds	r0, r3, #1
 801634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	461a      	mov	r2, r3
 8016352:	4613      	mov	r3, r2
 8016354:	011b      	lsls	r3, r3, #4
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	6a3a      	ldr	r2, [r7, #32]
 801635a:	4413      	add	r3, r2
 801635c:	781b      	ldrb	r3, [r3, #0]
 801635e:	4619      	mov	r1, r3
 8016360:	f7ff fdd7 	bl	8015f12 <rfalNfcbCheckSensbRes>
 8016364:	4603      	mov	r3, r0
 8016366:	2b00      	cmp	r3, #0
 8016368:	d177      	bne.n	801645a <rfalNfcbPollerSlottedCollisionResolution+0x288>
 801636a:	89fb      	ldrh	r3, [r7, #14]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d174      	bne.n	801645a <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 8016370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	461a      	mov	r2, r3
 8016376:	4613      	mov	r3, r2
 8016378:	011b      	lsls	r3, r3, #4
 801637a:	1a9b      	subs	r3, r3, r2
 801637c:	6a3a      	ldr	r2, [r7, #32]
 801637e:	4413      	add	r3, r2
 8016380:	2200      	movs	r2, #0
 8016382:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8016384:	79fb      	ldrb	r3, [r7, #7]
 8016386:	2b01      	cmp	r3, #1
 8016388:	d107      	bne.n	801639a <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 801638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	3301      	adds	r3, #1
 8016390:	b2da      	uxtb	r2, r3
 8016392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016394:	701a      	strb	r2, [r3, #0]
                                return ret;
 8016396:	89fb      	ldrh	r3, [r7, #14]
 8016398:	e08e      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 801639a:	79fb      	ldrb	r3, [r7, #7]
 801639c:	2b02      	cmp	r3, #2
 801639e:	d12b      	bne.n	80163f8 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 80163a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	3301      	adds	r3, #1
 80163a6:	b2da      	uxtb	r2, r3
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 80163ac:	7afb      	ldrb	r3, [r7, #11]
 80163ae:	3301      	adds	r3, #1
 80163b0:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80163b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	79ba      	ldrb	r2, [r7, #6]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d902      	bls.n	80163c2 <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 80163bc:	7b7b      	ldrb	r3, [r7, #13]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d101      	bne.n	80163c6 <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 80163c2:	89fb      	ldrh	r3, [r7, #14]
 80163c4:	e078      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80163c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	461a      	mov	r2, r3
 80163cc:	4613      	mov	r3, r2
 80163ce:	011b      	lsls	r3, r3, #4
 80163d0:	1a9b      	subs	r3, r3, r2
 80163d2:	3b0f      	subs	r3, #15
 80163d4:	6a3a      	ldr	r2, [r7, #32]
 80163d6:	4413      	add	r3, r2
 80163d8:	3302      	adds	r3, #2
 80163da:	4618      	mov	r0, r3
 80163dc:	f7ff fe4c 	bl	8016078 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 80163e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	461a      	mov	r2, r3
 80163e6:	4613      	mov	r3, r2
 80163e8:	011b      	lsls	r3, r3, #4
 80163ea:	1a9b      	subs	r3, r3, r2
 80163ec:	3b0f      	subs	r3, #15
 80163ee:	6a3a      	ldr	r2, [r7, #32]
 80163f0:	4413      	add	r3, r2
 80163f2:	2201      	movs	r2, #1
 80163f4:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 80163f6:	e03c      	b.n	8016472 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80163f8:	79fb      	ldrb	r3, [r7, #7]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d139      	bne.n	8016472 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 80163fe:	7afb      	ldrb	r3, [r7, #11]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d017      	beq.n	8016434 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8016404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	461a      	mov	r2, r3
 801640a:	4613      	mov	r3, r2
 801640c:	011b      	lsls	r3, r3, #4
 801640e:	1a9b      	subs	r3, r3, r2
 8016410:	3b0f      	subs	r3, #15
 8016412:	6a3a      	ldr	r2, [r7, #32]
 8016414:	4413      	add	r3, r2
 8016416:	3302      	adds	r3, #2
 8016418:	4618      	mov	r0, r3
 801641a:	f7ff fe2d 	bl	8016078 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 801641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	461a      	mov	r2, r3
 8016424:	4613      	mov	r3, r2
 8016426:	011b      	lsls	r3, r3, #4
 8016428:	1a9b      	subs	r3, r3, r2
 801642a:	3b0f      	subs	r3, #15
 801642c:	6a3a      	ldr	r2, [r7, #32]
 801642e:	4413      	add	r3, r2
 8016430:	2201      	movs	r2, #1
 8016432:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 8016434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	3301      	adds	r3, #1
 801643a:	b2da      	uxtb	r2, r3
 801643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643e:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8016440:	7afb      	ldrb	r3, [r7, #11]
 8016442:	3301      	adds	r3, #1
 8016444:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	79ba      	ldrb	r2, [r7, #6]
 801644c:	429a      	cmp	r2, r3
 801644e:	d902      	bls.n	8016456 <rfalNfcbPollerSlottedCollisionResolution+0x284>
 8016450:	7b7b      	ldrb	r3, [r7, #13]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d10d      	bne.n	8016472 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 8016456:	89fb      	ldrh	r3, [r7, #14]
 8016458:	e02e      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 801645a:	79bb      	ldrb	r3, [r7, #6]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d104      	bne.n	801646a <rfalNfcbPollerSlottedCollisionResolution+0x298>
 8016460:	7b7b      	ldrb	r3, [r7, #13]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d101      	bne.n	801646a <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 8016466:	231d      	movs	r3, #29
 8016468:	e026      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 801646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646c:	2201      	movs	r2, #1
 801646e:	701a      	strb	r2, [r3, #0]
 8016470:	e000      	b.n	8016474 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8016472:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 8016474:	7b3b      	ldrb	r3, [r7, #12]
 8016476:	3301      	adds	r3, #1
 8016478:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 801647a:	7b7b      	ldrb	r3, [r7, #13]
 801647c:	2201      	movs	r2, #1
 801647e:	fa02 f303 	lsl.w	r3, r2, r3
 8016482:	b2db      	uxtb	r3, r3
 8016484:	7b3a      	ldrb	r2, [r7, #12]
 8016486:	429a      	cmp	r2, r3
 8016488:	f4ff af38 	bcc.w	80162fc <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 801648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648e:	781b      	ldrb	r3, [r3, #0]
 8016490:	f083 0301 	eor.w	r3, r3, #1
 8016494:	b2db      	uxtb	r3, r3
 8016496:	2b00      	cmp	r3, #0
 8016498:	d001      	beq.n	801649e <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 801649a:	2300      	movs	r3, #0
 801649c:	e00c      	b.n	80164b8 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 801649e:	7afb      	ldrb	r3, [r7, #11]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	f47f aee6 	bne.w	8016272 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 80164a6:	7b7b      	ldrb	r3, [r7, #13]
 80164a8:	3301      	adds	r3, #1
 80164aa:	737b      	strb	r3, [r7, #13]
 80164ac:	7b7a      	ldrb	r2, [r7, #13]
 80164ae:	793b      	ldrb	r3, [r7, #4]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	f67f aede 	bls.w	8016272 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3714      	adds	r7, #20
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd90      	pop	{r4, r7, pc}

080164c0 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 80164c0:	b480      	push	{r7}
 80164c2:	b085      	sub	sp, #20
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	4603      	mov	r3, r0
 80164c8:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 80164ca:	4a0a      	ldr	r2, [pc, #40]	; (80164f4 <rfalNfcbTR2ToFDT+0x34>)
 80164cc:	f107 0308 	add.w	r3, r7, #8
 80164d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164d4:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 80164d8:	79fb      	ldrb	r3, [r7, #7]
 80164da:	f003 0303 	and.w	r3, r3, #3
 80164de:	005b      	lsls	r3, r3, #1
 80164e0:	3310      	adds	r3, #16
 80164e2:	443b      	add	r3, r7
 80164e4:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3714      	adds	r7, #20
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bc80      	pop	{r7}
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	0801d008 	.word	0x0801d008

080164f8 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 80164f8:	b5b0      	push	{r4, r5, r7, lr}
 80164fa:	b08c      	sub	sp, #48	; 0x30
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	4611      	mov	r1, r2
 8016504:	461a      	mov	r2, r3
 8016506:	460b      	mov	r3, r1
 8016508:	71fb      	strb	r3, [r7, #7]
 801650a:	4613      	mov	r3, r2
 801650c:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 801650e:	e0e5      	b.n	80166dc <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 8016510:	2300      	movs	r3, #0
 8016512:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 8016516:	4b78      	ldr	r3, [pc, #480]	; (80166f8 <rfalNfcfComputeValidSENF+0x200>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	3b01      	subs	r3, #1
 801651c:	b2da      	uxtb	r2, r3
 801651e:	4b76      	ldr	r3, [pc, #472]	; (80166f8 <rfalNfcfComputeValidSENF+0x200>)
 8016520:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8016522:	4b75      	ldr	r3, [pc, #468]	; (80166f8 <rfalNfcfComputeValidSENF+0x200>)
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	461a      	mov	r2, r3
 8016528:	4613      	mov	r3, r2
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	4413      	add	r3, r2
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	4a71      	ldr	r2, [pc, #452]	; (80166f8 <rfalNfcfComputeValidSENF+0x200>)
 8016532:	4413      	add	r3, r2
 8016534:	3302      	adds	r3, #2
 8016536:	f107 0414 	add.w	r4, r7, #20
 801653a:	461d      	mov	r5, r3
 801653c:	6828      	ldr	r0, [r5, #0]
 801653e:	6869      	ldr	r1, [r5, #4]
 8016540:	68aa      	ldr	r2, [r5, #8]
 8016542:	68eb      	ldr	r3, [r5, #12]
 8016544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016546:	8a2b      	ldrh	r3, [r5, #16]
 8016548:	7caa      	ldrb	r2, [r5, #18]
 801654a:	8023      	strh	r3, [r4, #0]
 801654c:	4613      	mov	r3, r2
 801654e:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 8016550:	f107 0314 	add.w	r3, r7, #20
 8016554:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8016556:	2300      	movs	r3, #0
 8016558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801655c:	e01b      	b.n	8016596 <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 801655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016560:	1c98      	adds	r0, r3, #2
 8016562:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016566:	4613      	mov	r3, r2
 8016568:	00db      	lsls	r3, r3, #3
 801656a:	4413      	add	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	68fa      	ldr	r2, [r7, #12]
 8016572:	4413      	add	r3, r2
 8016574:	3302      	adds	r3, #2
 8016576:	2208      	movs	r2, #8
 8016578:	4619      	mov	r1, r3
 801657a:	f004 ff27 	bl	801b3cc <memcmp>
 801657e:	4603      	mov	r3, r0
 8016580:	2b00      	cmp	r3, #0
 8016582:	d103      	bne.n	801658c <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 8016584:	2301      	movs	r3, #1
 8016586:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 801658a:	e00a      	b.n	80165a2 <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 801658c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016590:	3301      	adds	r3, #1
 8016592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801659e:	429a      	cmp	r2, r3
 80165a0:	d3dd      	bcc.n	801655e <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 80165a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d006      	beq.n	80165b8 <rfalNfcfComputeValidSENF+0xc0>
 80165aa:	79bb      	ldrb	r3, [r7, #6]
 80165ac:	f083 0301 	eor.w	r3, r3, #1
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d000      	beq.n	80165b8 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 80165b6:	e091      	b.n	80166dc <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 80165b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	3b02      	subs	r3, #2
 80165be:	2b0f      	cmp	r3, #15
 80165c0:	f240 808c 	bls.w	80166dc <rfalNfcfComputeValidSENF+0x1e4>
 80165c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	3b02      	subs	r3, #2
 80165ca:	2b12      	cmp	r3, #18
 80165cc:	d900      	bls.n	80165d0 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 80165ce:	e085      	b.n	80166dc <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 80165d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d2:	785b      	ldrb	r3, [r3, #1]
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d000      	beq.n	80165da <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 80165d8:	e080      	b.n	80166dc <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 80165da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d02a      	beq.n	8016638 <rfalNfcfComputeValidSENF+0x140>
 80165e2:	79bb      	ldrb	r3, [r7, #6]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d027      	beq.n	8016638 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 80165e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ea:	7819      	ldrb	r1, [r3, #0]
 80165ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80165f0:	4613      	mov	r3, r2
 80165f2:	00db      	lsls	r3, r3, #3
 80165f4:	4413      	add	r3, r2
 80165f6:	005b      	lsls	r3, r3, #1
 80165f8:	4413      	add	r3, r2
 80165fa:	68fa      	ldr	r2, [r7, #12]
 80165fc:	4413      	add	r3, r2
 80165fe:	1e4a      	subs	r2, r1, #1
 8016600:	b2d2      	uxtb	r2, r2
 8016602:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8016604:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016608:	4613      	mov	r3, r2
 801660a:	00db      	lsls	r3, r3, #3
 801660c:	4413      	add	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	68fa      	ldr	r2, [r7, #12]
 8016614:	4413      	add	r3, r2
 8016616:	1c58      	adds	r0, r3, #1
 8016618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661a:	1c59      	adds	r1, r3, #1
 801661c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016620:	4613      	mov	r3, r2
 8016622:	00db      	lsls	r3, r3, #3
 8016624:	4413      	add	r3, r2
 8016626:	005b      	lsls	r3, r3, #1
 8016628:	4413      	add	r3, r2
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	4413      	add	r3, r2
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	461a      	mov	r2, r3
 8016632:	f004 fedb 	bl	801b3ec <memcpy>
            continue;
 8016636:	e051      	b.n	80166dc <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8016638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801663a:	7819      	ldrb	r1, [r3, #0]
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	461a      	mov	r2, r3
 8016642:	4613      	mov	r3, r2
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	4413      	add	r3, r2
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	4413      	add	r3, r2
 801664c:	68fa      	ldr	r2, [r7, #12]
 801664e:	4413      	add	r3, r2
 8016650:	1e4a      	subs	r2, r1, #1
 8016652:	b2d2      	uxtb	r2, r2
 8016654:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	461a      	mov	r2, r3
 801665c:	4613      	mov	r3, r2
 801665e:	00db      	lsls	r3, r3, #3
 8016660:	4413      	add	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	4413      	add	r3, r2
 801666a:	1c58      	adds	r0, r3, #1
 801666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666e:	1c59      	adds	r1, r3, #1
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	461a      	mov	r2, r3
 8016676:	4613      	mov	r3, r2
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	4413      	add	r3, r2
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	4413      	add	r3, r2
 8016680:	68fa      	ldr	r2, [r7, #12]
 8016682:	4413      	add	r3, r2
 8016684:	781b      	ldrb	r3, [r3, #0]
 8016686:	461a      	mov	r2, r3
 8016688:	f004 feb0 	bl	801b3ec <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	461a      	mov	r2, r3
 8016692:	4613      	mov	r3, r2
 8016694:	00db      	lsls	r3, r3, #3
 8016696:	4413      	add	r3, r2
 8016698:	005b      	lsls	r3, r3, #1
 801669a:	4413      	add	r3, r2
 801669c:	68fa      	ldr	r2, [r7, #12]
 801669e:	4413      	add	r3, r2
 80166a0:	789b      	ldrb	r3, [r3, #2]
 80166a2:	2b01      	cmp	r3, #1
 80166a4:	d10e      	bne.n	80166c4 <rfalNfcfComputeValidSENF+0x1cc>
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	461a      	mov	r2, r3
 80166ac:	4613      	mov	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	4413      	add	r3, r2
 80166b2:	005b      	lsls	r3, r3, #1
 80166b4:	4413      	add	r3, r2
 80166b6:	68fa      	ldr	r2, [r7, #12]
 80166b8:	4413      	add	r3, r2
 80166ba:	78db      	ldrb	r3, [r3, #3]
 80166bc:	2bfe      	cmp	r3, #254	; 0xfe
 80166be:	d101      	bne.n	80166c4 <rfalNfcfComputeValidSENF+0x1cc>
 80166c0:	2301      	movs	r3, #1
 80166c2:	e000      	b.n	80166c6 <rfalNfcfComputeValidSENF+0x1ce>
 80166c4:	2300      	movs	r3, #0
 80166c6:	f003 0301 	and.w	r3, r3, #1
 80166ca:	b2da      	uxtb	r2, r3
 80166cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166ce:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	3301      	adds	r3, #1
 80166d6:	b2da      	uxtb	r2, r3
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 80166dc:	4b06      	ldr	r3, [pc, #24]	; (80166f8 <rfalNfcfComputeValidSENF+0x200>)
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d005      	beq.n	80166f0 <rfalNfcfComputeValidSENF+0x1f8>
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	79fa      	ldrb	r2, [r7, #7]
 80166ea:	429a      	cmp	r2, r3
 80166ec:	f63f af10 	bhi.w	8016510 <rfalNfcfComputeValidSENF+0x18>
    }
}
 80166f0:	bf00      	nop
 80166f2:	3730      	adds	r7, #48	; 0x30
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bdb0      	pop	{r4, r5, r7, pc}
 80166f8:	200038a0 	.word	0x200038a0

080166fc <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	4603      	mov	r3, r0
 8016704:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8016706:	79fb      	ldrb	r3, [r7, #7]
 8016708:	2b01      	cmp	r3, #1
 801670a:	d004      	beq.n	8016716 <rfalNfcfPollerInitialize+0x1a>
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	2b02      	cmp	r3, #2
 8016710:	d001      	beq.n	8016716 <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 8016712:	2307      	movs	r3, #7
 8016714:	e01b      	b.n	801674e <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 8016716:	79fa      	ldrb	r2, [r7, #7]
 8016718:	79fb      	ldrb	r3, [r7, #7]
 801671a:	4619      	mov	r1, r3
 801671c:	2006      	movs	r0, #6
 801671e:	f001 f92b 	bl	8017978 <rfalSetMode>
 8016722:	4603      	mov	r3, r0
 8016724:	81fb      	strh	r3, [r7, #14]
 8016726:	89fb      	ldrh	r3, [r7, #14]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d001      	beq.n	8016730 <rfalNfcfPollerInitialize+0x34>
 801672c:	89fb      	ldrh	r3, [r7, #14]
 801672e:	e00e      	b.n	801674e <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8016730:	2001      	movs	r0, #1
 8016732:	f001 fcbd 	bl	80180b0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 8016736:	4808      	ldr	r0, [pc, #32]	; (8016758 <rfalNfcfPollerInitialize+0x5c>)
 8016738:	f001 fcf2 	bl	8018120 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 801673c:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8016740:	f001 fcda 	bl	80180f8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 8016744:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8016748:	f001 fcc2 	bl	80180d0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801674c:	2300      	movs	r3, #0
}
 801674e:	4618      	mov	r0, r3
 8016750:	3710      	adds	r7, #16
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	00042360 	.word	0x00042360

0801675c <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 801675c:	b590      	push	{r4, r7, lr}
 801675e:	b087      	sub	sp, #28
 8016760:	af04      	add	r7, sp, #16
 8016762:	603b      	str	r3, [r7, #0]
 8016764:	4603      	mov	r3, r0
 8016766:	71fb      	strb	r3, [r7, #7]
 8016768:	460b      	mov	r3, r1
 801676a:	80bb      	strh	r3, [r7, #4]
 801676c:	4613      	mov	r3, r2
 801676e:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8016770:	79fb      	ldrb	r3, [r7, #7]
 8016772:	3301      	adds	r3, #1
 8016774:	b2db      	uxtb	r3, r3
 8016776:	79bc      	ldrb	r4, [r7, #6]
 8016778:	88b9      	ldrh	r1, [r7, #4]
 801677a:	79f8      	ldrb	r0, [r7, #7]
 801677c:	69fa      	ldr	r2, [r7, #28]
 801677e:	9202      	str	r2, [sp, #8]
 8016780:	69ba      	ldr	r2, [r7, #24]
 8016782:	9201      	str	r2, [sp, #4]
 8016784:	9300      	str	r3, [sp, #0]
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	4622      	mov	r2, r4
 801678a:	f003 f95d 	bl	8019a48 <rfalFeliCaPoll>
 801678e:	4603      	mov	r3, r0
}
 8016790:	4618      	mov	r0, r3
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	bd90      	pop	{r4, r7, pc}

08016798 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 801679e:	4b0b      	ldr	r3, [pc, #44]	; (80167cc <rfalNfcfPollerCheckPresence+0x34>)
 80167a0:	2200      	movs	r2, #0
 80167a2:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 80167a4:	4b09      	ldr	r3, [pc, #36]	; (80167cc <rfalNfcfPollerCheckPresence+0x34>)
 80167a6:	2200      	movs	r2, #0
 80167a8:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80167aa:	4b09      	ldr	r3, [pc, #36]	; (80167d0 <rfalNfcfPollerCheckPresence+0x38>)
 80167ac:	9302      	str	r3, [sp, #8]
 80167ae:	4b07      	ldr	r3, [pc, #28]	; (80167cc <rfalNfcfPollerCheckPresence+0x34>)
 80167b0:	9301      	str	r3, [sp, #4]
 80167b2:	2304      	movs	r3, #4
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	4b07      	ldr	r3, [pc, #28]	; (80167d4 <rfalNfcfPollerCheckPresence+0x3c>)
 80167b8:	2200      	movs	r2, #0
 80167ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80167be:	2003      	movs	r0, #3
 80167c0:	f003 f942 	bl	8019a48 <rfalFeliCaPoll>
 80167c4:	4603      	mov	r3, r0
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	200038a0 	.word	0x200038a0
 80167d0:	200038a1 	.word	0x200038a1
 80167d4:	200038a2 	.word	0x200038a2

080167d8 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b088      	sub	sp, #32
 80167dc:	af02      	add	r7, sp, #8
 80167de:	60ba      	str	r2, [r7, #8]
 80167e0:	607b      	str	r3, [r7, #4]
 80167e2:	4603      	mov	r3, r0
 80167e4:	73fb      	strb	r3, [r7, #15]
 80167e6:	460b      	mov	r3, r1
 80167e8:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d002      	beq.n	80167f6 <rfalNfcfPollerCollisionResolution+0x1e>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d101      	bne.n	80167fa <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 80167f6:	2307      	movs	r3, #7
 80167f8:	e053      	b.n	80168a2 <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2200      	movs	r2, #0
 80167fe:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 8016800:	2300      	movs	r3, #0
 8016802:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8016804:	7bbb      	ldrb	r3, [r7, #14]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d001      	beq.n	801680e <rfalNfcfPollerCollisionResolution+0x36>
 801680a:	7bba      	ldrb	r2, [r7, #14]
 801680c:	e000      	b.n	8016810 <rfalNfcfPollerCollisionResolution+0x38>
 801680e:	2204      	movs	r2, #4
 8016810:	f107 0315 	add.w	r3, r7, #21
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	2300      	movs	r3, #0
 8016818:	6879      	ldr	r1, [r7, #4]
 801681a:	68b8      	ldr	r0, [r7, #8]
 801681c:	f7ff fe6c 	bl	80164f8 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	7bba      	ldrb	r2, [r7, #14]
 8016826:	429a      	cmp	r2, r3
 8016828:	d93a      	bls.n	80168a0 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2200      	movs	r2, #0
 801682e:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8016830:	4b1e      	ldr	r3, [pc, #120]	; (80168ac <rfalNfcfPollerCollisionResolution+0xd4>)
 8016832:	9301      	str	r3, [sp, #4]
 8016834:	4b1e      	ldr	r3, [pc, #120]	; (80168b0 <rfalNfcfPollerCollisionResolution+0xd8>)
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	4b1e      	ldr	r3, [pc, #120]	; (80168b4 <rfalNfcfPollerCollisionResolution+0xdc>)
 801683a:	2200      	movs	r2, #0
 801683c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016840:	200f      	movs	r0, #15
 8016842:	f7ff ff8b 	bl	801675c <rfalNfcfPollerPoll>
 8016846:	4603      	mov	r3, r0
 8016848:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 801684a:	8afb      	ldrh	r3, [r7, #22]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d108      	bne.n	8016862 <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8016850:	7bba      	ldrb	r2, [r7, #14]
 8016852:	f107 0315 	add.w	r3, r7, #21
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	2300      	movs	r3, #0
 801685a:	6879      	ldr	r1, [r7, #4]
 801685c:	68b8      	ldr	r0, [r7, #8]
 801685e:	f7ff fe4b 	bl	80164f8 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 8016862:	7d7b      	ldrb	r3, [r7, #21]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d01b      	beq.n	80168a0 <rfalNfcfPollerCollisionResolution+0xc8>
 8016868:	7bfb      	ldrb	r3, [r7, #15]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d118      	bne.n	80168a0 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 801686e:	4b0f      	ldr	r3, [pc, #60]	; (80168ac <rfalNfcfPollerCollisionResolution+0xd4>)
 8016870:	9301      	str	r3, [sp, #4]
 8016872:	4b0f      	ldr	r3, [pc, #60]	; (80168b0 <rfalNfcfPollerCollisionResolution+0xd8>)
 8016874:	9300      	str	r3, [sp, #0]
 8016876:	4b0f      	ldr	r3, [pc, #60]	; (80168b4 <rfalNfcfPollerCollisionResolution+0xdc>)
 8016878:	2201      	movs	r2, #1
 801687a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801687e:	200f      	movs	r0, #15
 8016880:	f7ff ff6c 	bl	801675c <rfalNfcfPollerPoll>
 8016884:	4603      	mov	r3, r0
 8016886:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 8016888:	8afb      	ldrh	r3, [r7, #22]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d108      	bne.n	80168a0 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 801688e:	7bba      	ldrb	r2, [r7, #14]
 8016890:	f107 0315 	add.w	r3, r7, #21
 8016894:	9300      	str	r3, [sp, #0]
 8016896:	2301      	movs	r3, #1
 8016898:	6879      	ldr	r1, [r7, #4]
 801689a:	68b8      	ldr	r0, [r7, #8]
 801689c:	f7ff fe2c 	bl	80164f8 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3718      	adds	r7, #24
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	200038a1 	.word	0x200038a1
 80168b0:	200038a0 	.word	0x200038a0
 80168b4:	200038a2 	.word	0x200038a2

080168b8 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b0a0      	sub	sp, #128	; 0x80
 80168bc:	af04      	add	r7, sp, #16
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
 80168c4:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d018      	beq.n	80168fe <rfalNfcfPollerCheck+0x46>
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d015      	beq.n	80168fe <rfalNfcfPollerCheck+0x46>
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d012      	beq.n	80168fe <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d00e      	beq.n	80168fe <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	7a1b      	ldrb	r3, [r3, #8]
 80168e4:	2b0f      	cmp	r3, #15
 80168e6:	d80a      	bhi.n	80168fe <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d006      	beq.n	80168fe <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	2b0f      	cmp	r3, #15
 80168f6:	d802      	bhi.n	80168fe <rfalNfcfPollerCheck+0x46>
 80168f8:	887b      	ldrh	r3, [r7, #2]
 80168fa:	2b0b      	cmp	r3, #11
 80168fc:	d801      	bhi.n	8016902 <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 80168fe:	2307      	movs	r3, #7
 8016900:	e110      	b.n	8016b24 <rfalNfcfPollerCheck+0x26c>
    }
    
    msgIt = 0;
 8016902:	2300      	movs	r3, #0
 8016904:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8016908:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801690c:	1c5a      	adds	r2, r3, #1
 801690e:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8016912:	3370      	adds	r3, #112	; 0x70
 8016914:	443b      	add	r3, r7
 8016916:	2206      	movs	r2, #6
 8016918:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 801691c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016920:	f107 0210 	add.w	r2, r7, #16
 8016924:	4413      	add	r3, r2
 8016926:	2208      	movs	r2, #8
 8016928:	68f9      	ldr	r1, [r7, #12]
 801692a:	4618      	mov	r0, r3
 801692c:	f004 fd5e 	bl	801b3ec <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8016930:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016934:	3308      	adds	r3, #8
 8016936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 801693a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801693e:	1c5a      	adds	r2, r3, #1
 8016940:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8016944:	4619      	mov	r1, r3
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	781a      	ldrb	r2, [r3, #0]
 801694a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 801694e:	443b      	add	r3, r7
 8016950:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8016954:	2300      	movs	r3, #0
 8016956:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 801695a:	e028      	b.n	80169ae <rfalNfcfPollerCheck+0xf6>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	685a      	ldr	r2, [r3, #4]
 8016960:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016964:	005b      	lsls	r3, r3, #1
 8016966:	4413      	add	r3, r2
 8016968:	881a      	ldrh	r2, [r3, #0]
 801696a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801696e:	1c59      	adds	r1, r3, #1
 8016970:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016974:	b2d2      	uxtb	r2, r2
 8016976:	3370      	adds	r3, #112	; 0x70
 8016978:	443b      	add	r3, r7
 801697a:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	685a      	ldr	r2, [r3, #4]
 8016982:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016986:	005b      	lsls	r3, r3, #1
 8016988:	4413      	add	r3, r2
 801698a:	881b      	ldrh	r3, [r3, #0]
 801698c:	0a1b      	lsrs	r3, r3, #8
 801698e:	b29a      	uxth	r2, r3
 8016990:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016994:	1c59      	adds	r1, r3, #1
 8016996:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 801699a:	b2d2      	uxtb	r2, r2
 801699c:	3370      	adds	r3, #112	; 0x70
 801699e:	443b      	add	r3, r7
 80169a0:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 80169a4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80169a8:	3301      	adds	r3, #1
 80169aa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d3d0      	bcc.n	801695c <rfalNfcfPollerCheck+0xa4>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 80169ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80169be:	1c5a      	adds	r2, r3, #1
 80169c0:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 80169c4:	4619      	mov	r1, r3
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	7a1a      	ldrb	r2, [r3, #8]
 80169ca:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80169ce:	443b      	add	r3, r7
 80169d0:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 80169d4:	2300      	movs	r3, #0
 80169d6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80169da:	e054      	b.n	8016a86 <rfalNfcfPollerCheck+0x1ce>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	68da      	ldr	r2, [r3, #12]
 80169e0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80169e4:	009b      	lsls	r3, r3, #2
 80169e6:	441a      	add	r2, r3
 80169e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80169ec:	1c59      	adds	r1, r3, #1
 80169ee:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 80169f2:	7812      	ldrb	r2, [r2, #0]
 80169f4:	3370      	adds	r3, #112	; 0x70
 80169f6:	443b      	add	r3, r7
 80169f8:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	68da      	ldr	r2, [r3, #12]
 8016a00:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	4413      	add	r3, r2
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	b25b      	sxtb	r3, r3
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	da11      	bge.n	8016a34 <rfalNfcfPollerCheck+0x17c>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	68da      	ldr	r2, [r3, #12]
 8016a14:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a18:	009b      	lsls	r3, r3, #2
 8016a1a:	4413      	add	r3, r2
 8016a1c:	885a      	ldrh	r2, [r3, #2]
 8016a1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a22:	1c59      	adds	r1, r3, #1
 8016a24:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016a28:	b2d2      	uxtb	r2, r2
 8016a2a:	3370      	adds	r3, #112	; 0x70
 8016a2c:	443b      	add	r3, r7
 8016a2e:	f803 2c60 	strb.w	r2, [r3, #-96]
 8016a32:	e023      	b.n	8016a7c <rfalNfcfPollerCheck+0x1c4>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	68da      	ldr	r2, [r3, #12]
 8016a38:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	4413      	add	r3, r2
 8016a40:	885a      	ldrh	r2, [r3, #2]
 8016a42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a46:	1c59      	adds	r1, r3, #1
 8016a48:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016a4c:	b2d2      	uxtb	r2, r2
 8016a4e:	3370      	adds	r3, #112	; 0x70
 8016a50:	443b      	add	r3, r7
 8016a52:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8016a56:	68bb      	ldr	r3, [r7, #8]
 8016a58:	68da      	ldr	r2, [r3, #12]
 8016a5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a5e:	009b      	lsls	r3, r3, #2
 8016a60:	4413      	add	r3, r2
 8016a62:	885b      	ldrh	r3, [r3, #2]
 8016a64:	0a1b      	lsrs	r3, r3, #8
 8016a66:	b29a      	uxth	r2, r3
 8016a68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a6c:	1c59      	adds	r1, r3, #1
 8016a6e:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8016a72:	b2d2      	uxtb	r2, r2
 8016a74:	3370      	adds	r3, #112	; 0x70
 8016a76:	443b      	add	r3, r7
 8016a78:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8016a7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8016a80:	3301      	adds	r3, #1
 8016a82:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	7a1b      	ldrb	r3, [r3, #8]
 8016a8a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d3a4      	bcc.n	80169dc <rfalNfcfPollerCheck+0x124>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8016a92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016a96:	b299      	uxth	r1, r3
 8016a98:	887a      	ldrh	r2, [r7, #2]
 8016a9a:	f107 0010 	add.w	r0, r7, #16
 8016a9e:	4b23      	ldr	r3, [pc, #140]	; (8016b2c <rfalNfcfPollerCheck+0x274>)
 8016aa0:	9302      	str	r3, [sp, #8]
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	9301      	str	r3, [sp, #4]
 8016aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016aa8:	9300      	str	r3, [sp, #0]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	f001 fd93 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 8016ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d12f      	bne.n	8016b20 <rfalNfcfPollerCheck+0x268>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8016ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ac8:	881b      	ldrh	r3, [r3, #0]
 8016aca:	2b0a      	cmp	r3, #10
 8016acc:	d803      	bhi.n	8016ad6 <rfalNfcfPollerCheck+0x21e>
        {
            ret = ERR_PROTO;
 8016ace:	230b      	movs	r3, #11
 8016ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8016ad4:	e024      	b.n	8016b20 <rfalNfcfPollerCheck+0x268>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8016ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ad8:	781b      	ldrb	r3, [r3, #0]
 8016ada:	2b07      	cmp	r3, #7
 8016adc:	d109      	bne.n	8016af2 <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8016ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ae0:	3309      	adds	r3, #9
 8016ae2:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d104      	bne.n	8016af2 <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 8016ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016aea:	330a      	adds	r3, #10
 8016aec:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d003      	beq.n	8016afa <rfalNfcfPollerCheck+0x242>
        {
            ret = ERR_REQUEST;
 8016af2:	2305      	movs	r3, #5
 8016af4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8016af8:	e012      	b.n	8016b20 <rfalNfcfPollerCheck+0x268>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 8016afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016afc:	881b      	ldrh	r3, [r3, #0]
 8016afe:	3b0c      	subs	r3, #12
 8016b00:	b29a      	uxth	r2, r3
 8016b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b04:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 8016b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b08:	881b      	ldrh	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d008      	beq.n	8016b20 <rfalNfcfPollerCheck+0x268>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8016b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b10:	f103 010b 	add.w	r1, r3, #11
 8016b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b16:	881b      	ldrh	r3, [r3, #0]
 8016b18:	461a      	mov	r2, r3
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f004 fc74 	bl	801b408 <memmove>
            }
        }
    }
    
    return ret;
 8016b20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3770      	adds	r7, #112	; 0x70
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}
 8016b2c:	02000010 	.word	0x02000010

08016b30 <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b08c      	sub	sp, #48	; 0x30
 8016b34:	af04      	add	r7, sp, #16
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]
 8016b3c:	807b      	strh	r3, [r7, #2]
    uint16_t   auxLen;
    uint8_t    *updateRes;
    ReturnCode ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d01b      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
 8016b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d018      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d015      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d012      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00e      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	7a1b      	ldrb	r3, [r3, #8]
 8016b62:	2b0d      	cmp	r3, #13
 8016b64:	d80a      	bhi.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d006      	beq.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	2b0f      	cmp	r3, #15
 8016b74:	d802      	bhi.n	8016b7c <rfalNfcfPollerUpdate+0x4c>
 8016b76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016b78:	2b0b      	cmp	r3, #11
 8016b7a:	d801      	bhi.n	8016b80 <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8016b7c:	2307      	movs	r3, #7
 8016b7e:	e0f2      	b.n	8016d66 <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	7a1b      	ldrb	r3, [r3, #8]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	0089      	lsls	r1, r1, #2
 8016b90:	440b      	add	r3, r1
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	4413      	add	r3, r2
 8016b98:	b29b      	uxth	r3, r3
 8016b9a:	005b      	lsls	r3, r3, #1
 8016b9c:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8016b9e:	3309      	adds	r3, #9
 8016ba0:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 8016ba2:	887a      	ldrh	r2, [r7, #2]
 8016ba4:	8b3b      	ldrh	r3, [r7, #24]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d201      	bcs.n	8016bae <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 8016baa:	2307      	movs	r3, #7
 8016bac:	e0db      	b.n	8016d66 <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 8016bb2:	8bbb      	ldrh	r3, [r7, #28]
 8016bb4:	1c5a      	adds	r2, r3, #1
 8016bb6:	83ba      	strh	r2, [r7, #28]
 8016bb8:	461a      	mov	r2, r3
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	4413      	add	r3, r2
 8016bbe:	2208      	movs	r2, #8
 8016bc0:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8016bc2:	8bbb      	ldrh	r3, [r7, #28]
 8016bc4:	687a      	ldr	r2, [r7, #4]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	2208      	movs	r2, #8
 8016bca:	68f9      	ldr	r1, [r7, #12]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f004 fc0d 	bl	801b3ec <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8016bd2:	8bbb      	ldrh	r3, [r7, #28]
 8016bd4:	3308      	adds	r3, #8
 8016bd6:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8016bd8:	8bbb      	ldrh	r3, [r7, #28]
 8016bda:	1c5a      	adds	r2, r3, #1
 8016bdc:	83ba      	strh	r2, [r7, #28]
 8016bde:	461a      	mov	r2, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	4413      	add	r3, r2
 8016be4:	68ba      	ldr	r2, [r7, #8]
 8016be6:	7812      	ldrb	r2, [r2, #0]
 8016be8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8016bea:	2300      	movs	r3, #0
 8016bec:	77fb      	strb	r3, [r7, #31]
 8016bee:	e020      	b.n	8016c32 <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	685a      	ldr	r2, [r3, #4]
 8016bf4:	7ffb      	ldrb	r3, [r7, #31]
 8016bf6:	005b      	lsls	r3, r3, #1
 8016bf8:	4413      	add	r3, r2
 8016bfa:	881a      	ldrh	r2, [r3, #0]
 8016bfc:	8bbb      	ldrh	r3, [r7, #28]
 8016bfe:	1c59      	adds	r1, r3, #1
 8016c00:	83b9      	strh	r1, [r7, #28]
 8016c02:	4619      	mov	r1, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	440b      	add	r3, r1
 8016c08:	b2d2      	uxtb	r2, r2
 8016c0a:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	685a      	ldr	r2, [r3, #4]
 8016c10:	7ffb      	ldrb	r3, [r7, #31]
 8016c12:	005b      	lsls	r3, r3, #1
 8016c14:	4413      	add	r3, r2
 8016c16:	881b      	ldrh	r3, [r3, #0]
 8016c18:	0a1b      	lsrs	r3, r3, #8
 8016c1a:	b29a      	uxth	r2, r3
 8016c1c:	8bbb      	ldrh	r3, [r7, #28]
 8016c1e:	1c59      	adds	r1, r3, #1
 8016c20:	83b9      	strh	r1, [r7, #28]
 8016c22:	4619      	mov	r1, r3
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	440b      	add	r3, r1
 8016c28:	b2d2      	uxtb	r2, r2
 8016c2a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8016c2c:	7ffb      	ldrb	r3, [r7, #31]
 8016c2e:	3301      	adds	r3, #1
 8016c30:	77fb      	strb	r3, [r7, #31]
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	7ffa      	ldrb	r2, [r7, #31]
 8016c38:	429a      	cmp	r2, r3
 8016c3a:	d3d9      	bcc.n	8016bf0 <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8016c3c:	8bbb      	ldrh	r3, [r7, #28]
 8016c3e:	1c5a      	adds	r2, r3, #1
 8016c40:	83ba      	strh	r2, [r7, #28]
 8016c42:	461a      	mov	r2, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	4413      	add	r3, r2
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	7a12      	ldrb	r2, [r2, #8]
 8016c4c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8016c4e:	2300      	movs	r3, #0
 8016c50:	77fb      	strb	r3, [r7, #31]
 8016c52:	e045      	b.n	8016ce0 <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	68da      	ldr	r2, [r3, #12]
 8016c58:	7ffb      	ldrb	r3, [r7, #31]
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	441a      	add	r2, r3
 8016c5e:	8bbb      	ldrh	r3, [r7, #28]
 8016c60:	1c59      	adds	r1, r3, #1
 8016c62:	83b9      	strh	r1, [r7, #28]
 8016c64:	4619      	mov	r1, r3
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	440b      	add	r3, r1
 8016c6a:	7812      	ldrb	r2, [r2, #0]
 8016c6c:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	68da      	ldr	r2, [r3, #12]
 8016c72:	7ffb      	ldrb	r3, [r7, #31]
 8016c74:	009b      	lsls	r3, r3, #2
 8016c76:	4413      	add	r3, r2
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	b25b      	sxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	da0e      	bge.n	8016c9e <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	68da      	ldr	r2, [r3, #12]
 8016c84:	7ffb      	ldrb	r3, [r7, #31]
 8016c86:	009b      	lsls	r3, r3, #2
 8016c88:	4413      	add	r3, r2
 8016c8a:	885a      	ldrh	r2, [r3, #2]
 8016c8c:	8bbb      	ldrh	r3, [r7, #28]
 8016c8e:	1c59      	adds	r1, r3, #1
 8016c90:	83b9      	strh	r1, [r7, #28]
 8016c92:	4619      	mov	r1, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	440b      	add	r3, r1
 8016c98:	b2d2      	uxtb	r2, r2
 8016c9a:	701a      	strb	r2, [r3, #0]
 8016c9c:	e01d      	b.n	8016cda <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	68da      	ldr	r2, [r3, #12]
 8016ca2:	7ffb      	ldrb	r3, [r7, #31]
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	4413      	add	r3, r2
 8016ca8:	885a      	ldrh	r2, [r3, #2]
 8016caa:	8bbb      	ldrh	r3, [r7, #28]
 8016cac:	1c59      	adds	r1, r3, #1
 8016cae:	83b9      	strh	r1, [r7, #28]
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	440b      	add	r3, r1
 8016cb6:	b2d2      	uxtb	r2, r2
 8016cb8:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	68da      	ldr	r2, [r3, #12]
 8016cbe:	7ffb      	ldrb	r3, [r7, #31]
 8016cc0:	009b      	lsls	r3, r3, #2
 8016cc2:	4413      	add	r3, r2
 8016cc4:	885b      	ldrh	r3, [r3, #2]
 8016cc6:	0a1b      	lsrs	r3, r3, #8
 8016cc8:	b29a      	uxth	r2, r3
 8016cca:	8bbb      	ldrh	r3, [r7, #28]
 8016ccc:	1c59      	adds	r1, r3, #1
 8016cce:	83b9      	strh	r1, [r7, #28]
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	440b      	add	r3, r1
 8016cd6:	b2d2      	uxtb	r2, r2
 8016cd8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8016cda:	7ffb      	ldrb	r3, [r7, #31]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	77fb      	strb	r3, [r7, #31]
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	7a1b      	ldrb	r3, [r3, #8]
 8016ce4:	7ffa      	ldrb	r2, [r7, #31]
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d3b4      	bcc.n	8016c54 <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	7a1b      	ldrb	r3, [r3, #8]
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	011b      	lsls	r3, r3, #4
 8016cf2:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 8016cf4:	8bbb      	ldrh	r3, [r7, #28]
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	8b3a      	ldrh	r2, [r7, #24]
 8016cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f004 fb74 	bl	801b3ec <memcpy>
    msgIt += auxLen;
 8016d04:	8bba      	ldrh	r2, [r7, #28]
 8016d06:	8b3b      	ldrh	r3, [r7, #24]
 8016d08:	4413      	add	r3, r2
 8016d0a:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8016d0c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d0e:	8bb9      	ldrh	r1, [r7, #28]
 8016d10:	4b17      	ldr	r3, [pc, #92]	; (8016d70 <rfalNfcfPollerUpdate+0x240>)
 8016d12:	9302      	str	r3, [sp, #8]
 8016d14:	2300      	movs	r3, #0
 8016d16:	9301      	str	r3, [sp, #4]
 8016d18:	f107 0312 	add.w	r3, r7, #18
 8016d1c:	9300      	str	r3, [sp, #0]
 8016d1e:	4613      	mov	r3, r2
 8016d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f001 fc58 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 8016d2c:	8b7b      	ldrh	r3, [r7, #26]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d118      	bne.n	8016d64 <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8016d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d34:	3301      	adds	r3, #1
 8016d36:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8016d38:	8a7b      	ldrh	r3, [r7, #18]
 8016d3a:	2b0a      	cmp	r3, #10
 8016d3c:	d802      	bhi.n	8016d44 <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8016d3e:	230b      	movs	r3, #11
 8016d40:	837b      	strh	r3, [r7, #26]
 8016d42:	e00f      	b.n	8016d64 <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	2b09      	cmp	r3, #9
 8016d4a:	d109      	bne.n	8016d60 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	3309      	adds	r3, #9
 8016d50:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d104      	bne.n	8016d60 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	330a      	adds	r3, #10
 8016d5a:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d001      	beq.n	8016d64 <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8016d60:	2305      	movs	r3, #5
 8016d62:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 8016d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3720      	adds	r7, #32
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	02000010 	.word	0x02000010

08016d74 <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 8016d74:	b480      	push	{r7}
 8016d76:	b083      	sub	sp, #12
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	71fb      	strb	r3, [r7, #7]
    switch(err)
 8016d7e:	79fb      	ldrb	r3, [r7, #7]
 8016d80:	3b01      	subs	r3, #1
 8016d82:	2b12      	cmp	r3, #18
 8016d84:	d82e      	bhi.n	8016de4 <rfalNfcvParseError+0x70>
 8016d86:	a201      	add	r2, pc, #4	; (adr r2, 8016d8c <rfalNfcvParseError+0x18>)
 8016d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d8c:	08016dd9 	.word	0x08016dd9
 8016d90:	08016ddd 	.word	0x08016ddd
 8016d94:	08016dd9 	.word	0x08016dd9
 8016d98:	08016de5 	.word	0x08016de5
 8016d9c:	08016de5 	.word	0x08016de5
 8016da0:	08016de5 	.word	0x08016de5
 8016da4:	08016de5 	.word	0x08016de5
 8016da8:	08016de5 	.word	0x08016de5
 8016dac:	08016de5 	.word	0x08016de5
 8016db0:	08016de5 	.word	0x08016de5
 8016db4:	08016de5 	.word	0x08016de5
 8016db8:	08016de5 	.word	0x08016de5
 8016dbc:	08016de5 	.word	0x08016de5
 8016dc0:	08016de5 	.word	0x08016de5
 8016dc4:	08016de5 	.word	0x08016de5
 8016dc8:	08016de5 	.word	0x08016de5
 8016dcc:	08016de5 	.word	0x08016de5
 8016dd0:	08016de5 	.word	0x08016de5
 8016dd4:	08016de1 	.word	0x08016de1
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 8016dd8:	2318      	movs	r3, #24
 8016dda:	e004      	b.n	8016de6 <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 8016ddc:	230b      	movs	r3, #11
 8016dde:	e002      	b.n	8016de6 <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 8016de0:	2319      	movs	r3, #25
 8016de2:	e000      	b.n	8016de6 <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 8016de4:	2305      	movs	r3, #5
    }
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	370c      	adds	r7, #12
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bc80      	pop	{r7}
 8016dee:	4770      	bx	lr

08016df0 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8016df6:	22ec      	movs	r2, #236	; 0xec
 8016df8:	21ec      	movs	r1, #236	; 0xec
 8016dfa:	2007      	movs	r0, #7
 8016dfc:	f000 fdbc 	bl	8017978 <rfalSetMode>
 8016e00:	4603      	mov	r3, r0
 8016e02:	80fb      	strh	r3, [r7, #6]
 8016e04:	88fb      	ldrh	r3, [r7, #6]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d001      	beq.n	8016e0e <rfalNfcvPollerInitialize+0x1e>
 8016e0a:	88fb      	ldrh	r3, [r7, #6]
 8016e0c:	e00e      	b.n	8016e2c <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8016e0e:	2001      	movs	r0, #1
 8016e10:	f001 f94e 	bl	80180b0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8016e14:	4807      	ldr	r0, [pc, #28]	; (8016e34 <rfalNfcvPollerInitialize+0x44>)
 8016e16:	f001 f983 	bl	8018120 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 8016e1a:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8016e1e:	f001 f96b 	bl	80180f8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8016e22:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8016e26:	f001 f953 	bl	80180d0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8016e2a:	2300      	movs	r3, #0
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3708      	adds	r7, #8
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}
 8016e34:	000108d8 	.word	0x000108d8

08016e38 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b086      	sub	sp, #24
 8016e3c:	af02      	add	r7, sp, #8
 8016e3e:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8016e40:	2300      	movs	r3, #0
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2200      	movs	r2, #0
 8016e48:	2100      	movs	r1, #0
 8016e4a:	2020      	movs	r0, #32
 8016e4c:	f000 f815 	bl	8016e7a <rfalNfcvPollerInventory>
 8016e50:	4603      	mov	r3, r0
 8016e52:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8016e54:	89fb      	ldrh	r3, [r7, #14]
 8016e56:	2b1d      	cmp	r3, #29
 8016e58:	d008      	beq.n	8016e6c <rfalNfcvPollerCheckPresence+0x34>
 8016e5a:	89fb      	ldrh	r3, [r7, #14]
 8016e5c:	2b15      	cmp	r3, #21
 8016e5e:	d005      	beq.n	8016e6c <rfalNfcvPollerCheckPresence+0x34>
 8016e60:	89fb      	ldrh	r3, [r7, #14]
 8016e62:	2b09      	cmp	r3, #9
 8016e64:	d002      	beq.n	8016e6c <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 8016e66:	89fb      	ldrh	r3, [r7, #14]
 8016e68:	2b0b      	cmp	r3, #11
 8016e6a:	d101      	bne.n	8016e70 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8016e70:	89fb      	ldrh	r3, [r7, #14]
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8016e7a:	b580      	push	{r7, lr}
 8016e7c:	b08c      	sub	sp, #48	; 0x30
 8016e7e:	af02      	add	r7, sp, #8
 8016e80:	60ba      	str	r2, [r7, #8]
 8016e82:	607b      	str	r3, [r7, #4]
 8016e84:	4603      	mov	r3, r0
 8016e86:	73fb      	strb	r3, [r7, #15]
 8016e88:	460b      	mov	r3, r1
 8016e8a:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d102      	bne.n	8016e98 <rfalNfcvPollerInventory+0x1e>
 8016e92:	7bbb      	ldrb	r3, [r7, #14]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d102      	bne.n	8016e9e <rfalNfcvPollerInventory+0x24>
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d101      	bne.n	8016ea2 <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 8016e9e:	2307      	movs	r3, #7
 8016ea0:	e04a      	b.n	8016f38 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8016ea2:	7bfb      	ldrb	r3, [r7, #15]
 8016ea4:	f043 0306 	orr.w	r3, r3, #6
 8016ea8:	b2db      	uxtb	r3, r3
 8016eaa:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 8016eac:	2301      	movs	r3, #1
 8016eae:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8016eb0:	7bbb      	ldrb	r3, [r7, #14]
 8016eb2:	7bfa      	ldrb	r2, [r7, #15]
 8016eb4:	2a20      	cmp	r2, #32
 8016eb6:	d101      	bne.n	8016ebc <rfalNfcvPollerInventory+0x42>
 8016eb8:	2240      	movs	r2, #64	; 0x40
 8016eba:	e000      	b.n	8016ebe <rfalNfcvPollerInventory+0x44>
 8016ebc:	223c      	movs	r2, #60	; 0x3c
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d806      	bhi.n	8016ed0 <rfalNfcvPollerInventory+0x56>
 8016ec2:	7bfb      	ldrb	r3, [r7, #15]
 8016ec4:	2b20      	cmp	r3, #32
 8016ec6:	d101      	bne.n	8016ecc <rfalNfcvPollerInventory+0x52>
 8016ec8:	2340      	movs	r3, #64	; 0x40
 8016eca:	e002      	b.n	8016ed2 <rfalNfcvPollerInventory+0x58>
 8016ecc:	233c      	movs	r3, #60	; 0x3c
 8016ece:	e000      	b.n	8016ed2 <rfalNfcvPollerInventory+0x58>
 8016ed0:	7bbb      	ldrb	r3, [r7, #14]
 8016ed2:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 8016ed4:	7ebb      	ldrb	r3, [r7, #26]
 8016ed6:	3307      	adds	r3, #7
 8016ed8:	08db      	lsrs	r3, r3, #3
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d00b      	beq.n	8016ef8 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 8016ee0:	7ebb      	ldrb	r3, [r7, #26]
 8016ee2:	3307      	adds	r3, #7
 8016ee4:	08db      	lsrs	r3, r3, #3
 8016ee6:	b29b      	uxth	r3, r3
 8016ee8:	461a      	mov	r2, r3
 8016eea:	f107 0318 	add.w	r3, r7, #24
 8016eee:	3303      	adds	r3, #3
 8016ef0:	68b9      	ldr	r1, [r7, #8]
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f004 fa7a 	bl	801b3ec <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8016ef8:	7ebb      	ldrb	r3, [r7, #26]
 8016efa:	3307      	adds	r3, #7
 8016efc:	08db      	lsrs	r3, r3, #3
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	3303      	adds	r3, #3
 8016f02:	b2d9      	uxtb	r1, r3
 8016f04:	f107 0018 	add.w	r0, r7, #24
 8016f08:	f107 0316 	add.w	r3, r7, #22
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	230c      	movs	r3, #12
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	f002 fcf9 	bl	8019908 <rfalISO15693TransceiveAnticollisionFrame>
 8016f16:	4603      	mov	r3, r0
 8016f18:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 8016f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d002      	beq.n	8016f26 <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 8016f20:	8afa      	ldrh	r2, [r7, #22]
 8016f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f24:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 8016f26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d104      	bne.n	8016f36 <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8016f2c:	8afb      	ldrh	r3, [r7, #22]
 8016f2e:	2b60      	cmp	r3, #96	; 0x60
 8016f30:	d001      	beq.n	8016f36 <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 8016f32:	230b      	movs	r3, #11
 8016f34:	e000      	b.n	8016f38 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 8016f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3728      	adds	r7, #40	; 0x28
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b0ae      	sub	sp, #184	; 0xb8
 8016f44:	af02      	add	r7, sp, #8
 8016f46:	60ba      	str	r2, [r7, #8]
 8016f48:	607b      	str	r3, [r7, #4]
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	73fb      	strb	r3, [r7, #15]
 8016f4e:	460b      	mov	r3, r1
 8016f50:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d002      	beq.n	8016f5e <rfalNfcvPollerCollisionResolution+0x1e>
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d101      	bne.n	8016f62 <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8016f5e:	2307      	movs	r3, #7
 8016f60:	e186      	b.n	8017270 <rfalNfcvPollerCollisionResolution+0x330>
    }

    /* Initialize parameters */
    *devCnt = 0;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2200      	movs	r2, #0
 8016f66:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 8016f74:	2300      	movs	r3, #0
 8016f76:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8016f7a:	f107 0314 	add.w	r3, r7, #20
 8016f7e:	2290      	movs	r2, #144	; 0x90
 8016f80:	2100      	movs	r1, #0
 8016f82:	4618      	mov	r0, r3
 8016f84:	f004 fa5a 	bl	801b43c <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 8016f88:	7bbb      	ldrb	r3, [r7, #14]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00a      	beq.n	8016fa4 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8016f8e:	7bba      	ldrb	r2, [r7, #14]
 8016f90:	4613      	mov	r3, r2
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	4413      	add	r3, r2
 8016f96:	009b      	lsls	r3, r3, #2
 8016f98:	4413      	add	r3, r2
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	2100      	movs	r1, #0
 8016f9e:	68b8      	ldr	r0, [r7, #8]
 8016fa0:	f004 fa4c 	bl	801b43c <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8016fa4:	7bfb      	ldrb	r3, [r7, #15]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d12b      	bne.n	8017002 <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	2200      	movs	r2, #0
 8016fae:	9200      	str	r2, [sp, #0]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	2020      	movs	r0, #32
 8016fb6:	f7ff ff60 	bl	8016e7a <rfalNfcvPollerInventory>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 8016fc0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016fc4:	2b04      	cmp	r3, #4
 8016fc6:	d101      	bne.n	8016fcc <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	e151      	b.n	8017270 <rfalNfcvPollerCollisionResolution+0x330>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 8016fcc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d107      	bne.n	8016fe4 <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	3301      	adds	r3, #1
 8016fda:	b2da      	uxtb	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e145      	b.n	8017270 <rfalNfcvPollerCollisionResolution+0x330>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8016fea:	2301      	movs	r3, #1
 8016fec:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 8016ff0:	7bbb      	ldrb	r3, [r7, #14]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d101      	bne.n	8016ffa <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 8016ff6:	231d      	movs	r3, #29
 8016ff8:	e13a      	b.n	8017270 <rfalNfcvPollerCollisionResolution+0x330>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8016ffa:	2004      	movs	r0, #4
 8016ffc:	f7ed fb72 	bl	80046e4 <HAL_Delay>
 8017000:	e005      	b.n	801700e <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 8017002:	2301      	movs	r3, #1
 8017004:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8017008:	2301      	movs	r3, #1
 801700a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 801700e:	2300      	movs	r3, #0
 8017010:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 8017014:	2300      	movs	r3, #0
 8017016:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 801701a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801701e:	2b00      	cmp	r3, #0
 8017020:	d129      	bne.n	8017076 <rfalNfcvPollerCollisionResolution+0x136>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8017022:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017026:	4613      	mov	r3, r2
 8017028:	00db      	lsls	r3, r3, #3
 801702a:	4413      	add	r3, r2
 801702c:	33b0      	adds	r3, #176	; 0xb0
 801702e:	443b      	add	r3, r7
 8017030:	3b9c      	subs	r3, #156	; 0x9c
 8017032:	7818      	ldrb	r0, [r3, #0]
 8017034:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017038:	f107 0114 	add.w	r1, r7, #20
 801703c:	4613      	mov	r3, r2
 801703e:	00db      	lsls	r3, r3, #3
 8017040:	4413      	add	r3, r2
 8017042:	440b      	add	r3, r1
 8017044:	1c59      	adds	r1, r3, #1
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	461a      	mov	r2, r3
 801704c:	4613      	mov	r3, r2
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	4413      	add	r3, r2
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	4413      	add	r3, r2
 8017056:	68ba      	ldr	r2, [r7, #8]
 8017058:	4413      	add	r3, r2
 801705a:	461a      	mov	r2, r3
 801705c:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8017060:	9300      	str	r3, [sp, #0]
 8017062:	4613      	mov	r3, r2
 8017064:	460a      	mov	r2, r1
 8017066:	4601      	mov	r1, r0
 8017068:	2000      	movs	r0, #0
 801706a:	f7ff ff06 	bl	8016e7a <rfalNfcvPollerInventory>
 801706e:	4603      	mov	r3, r0
 8017070:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8017074:	e013      	b.n	801709e <rfalNfcvPollerCollisionResolution+0x15e>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	461a      	mov	r2, r3
 801707c:	4613      	mov	r3, r2
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	4413      	add	r3, r2
 8017082:	009b      	lsls	r3, r3, #2
 8017084:	4413      	add	r3, r2
 8017086:	68ba      	ldr	r2, [r7, #8]
 8017088:	4413      	add	r3, r2
 801708a:	4618      	mov	r0, r3
 801708c:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8017090:	461a      	mov	r2, r3
 8017092:	210c      	movs	r1, #12
 8017094:	f002 fc98 	bl	80199c8 <rfalISO15693TransceiveEOFAnticollision>
 8017098:	4603      	mov	r3, r0
 801709a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 801709e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80170a2:	3301      	adds	r3, #1
 80170a4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 80170a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80170ac:	2b04      	cmp	r3, #4
 80170ae:	f000 80c3 	beq.w	8017238 <rfalNfcvPollerCollisionResolution+0x2f8>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80170b2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80170b6:	2b5f      	cmp	r3, #95	; 0x5f
 80170b8:	d802      	bhi.n	80170c0 <rfalNfcvPollerCollisionResolution+0x180>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80170ba:	2004      	movs	r0, #4
 80170bc:	f7ed fb12 	bl	80046e4 <HAL_Delay>
                }

                if( ret == ERR_NONE )
 80170c0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d10b      	bne.n	80170e0 <rfalNfcvPollerCollisionResolution+0x1a0>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80170c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80170cc:	2b60      	cmp	r3, #96	; 0x60
 80170ce:	f040 80b6 	bne.w	801723e <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	3301      	adds	r3, #1
 80170d8:	b2da      	uxtb	r2, r3
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	701a      	strb	r2, [r3, #0]
 80170de:	e0ae      	b.n	801723e <rfalNfcvPollerCollisionResolution+0x2fe>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 80170e0:	2301      	movs	r3, #1
 80170e2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 80170e6:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80170ea:	2b0f      	cmp	r3, #15
 80170ec:	f200 80a7 	bhi.w	801723e <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 80170f0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80170f4:	f107 0114 	add.w	r1, r7, #20
 80170f8:	4613      	mov	r3, r2
 80170fa:	00db      	lsls	r3, r3, #3
 80170fc:	4413      	add	r3, r2
 80170fe:	440b      	add	r3, r1
 8017100:	1c58      	adds	r0, r3, #1
 8017102:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017106:	f107 0114 	add.w	r1, r7, #20
 801710a:	4613      	mov	r3, r2
 801710c:	00db      	lsls	r3, r3, #3
 801710e:	4413      	add	r3, r2
 8017110:	440b      	add	r3, r1
 8017112:	3301      	adds	r3, #1
 8017114:	2208      	movs	r2, #8
 8017116:	4619      	mov	r1, r3
 8017118:	f004 f968 	bl	801b3ec <memcpy>
                        colPos = colFound[colIt].maskLen;
 801711c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017120:	4613      	mov	r3, r2
 8017122:	00db      	lsls	r3, r3, #3
 8017124:	4413      	add	r3, r2
 8017126:	33b0      	adds	r3, #176	; 0xb0
 8017128:	443b      	add	r3, r7
 801712a:	3b9c      	subs	r3, #156	; 0x9c
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8017132:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8017136:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801713a:	08db      	lsrs	r3, r3, #3
 801713c:	b2d8      	uxtb	r0, r3
 801713e:	4601      	mov	r1, r0
 8017140:	4613      	mov	r3, r2
 8017142:	00db      	lsls	r3, r3, #3
 8017144:	4413      	add	r3, r2
 8017146:	33b0      	adds	r3, #176	; 0xb0
 8017148:	443b      	add	r3, r7
 801714a:	440b      	add	r3, r1
 801714c:	3b9b      	subs	r3, #155	; 0x9b
 801714e:	7819      	ldrb	r1, [r3, #0]
 8017150:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8017154:	f003 0307 	and.w	r3, r3, #7
 8017158:	2201      	movs	r2, #1
 801715a:	fa02 f303 	lsl.w	r3, r2, r3
 801715e:	b2db      	uxtb	r3, r3
 8017160:	3b01      	subs	r3, #1
 8017162:	b2db      	uxtb	r3, r3
 8017164:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8017168:	400b      	ands	r3, r1
 801716a:	b2d9      	uxtb	r1, r3
 801716c:	4613      	mov	r3, r2
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	4413      	add	r3, r2
 8017172:	33b0      	adds	r3, #176	; 0xb0
 8017174:	443b      	add	r3, r7
 8017176:	4403      	add	r3, r0
 8017178:	3b9b      	subs	r3, #155	; 0x9b
 801717a:	460a      	mov	r2, r1
 801717c:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 801717e:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8017182:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8017186:	08db      	lsrs	r3, r3, #3
 8017188:	b2d8      	uxtb	r0, r3
 801718a:	4601      	mov	r1, r0
 801718c:	4613      	mov	r3, r2
 801718e:	00db      	lsls	r3, r3, #3
 8017190:	4413      	add	r3, r2
 8017192:	33b0      	adds	r3, #176	; 0xb0
 8017194:	443b      	add	r3, r7
 8017196:	440b      	add	r3, r1
 8017198:	3b9b      	subs	r3, #155	; 0x9b
 801719a:	7819      	ldrb	r1, [r3, #0]
 801719c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80171a0:	1e5a      	subs	r2, r3, #1
 80171a2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80171a6:	f003 0307 	and.w	r3, r3, #7
 80171aa:	fa02 f303 	lsl.w	r3, r2, r3
 80171ae:	b2db      	uxtb	r3, r3
 80171b0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80171b4:	430b      	orrs	r3, r1
 80171b6:	b2d9      	uxtb	r1, r3
 80171b8:	4613      	mov	r3, r2
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	4413      	add	r3, r2
 80171be:	33b0      	adds	r3, #176	; 0xb0
 80171c0:	443b      	add	r3, r7
 80171c2:	4403      	add	r3, r0
 80171c4:	3b9b      	subs	r3, #155	; 0x9b
 80171c6:	460a      	mov	r2, r1
 80171c8:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 80171ca:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80171ce:	1e5a      	subs	r2, r3, #1
 80171d0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80171d4:	f003 0307 	and.w	r3, r3, #7
 80171d8:	f1c3 0308 	rsb	r3, r3, #8
 80171dc:	fa22 f003 	lsr.w	r0, r2, r3
 80171e0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80171e4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80171e8:	08db      	lsrs	r3, r3, #3
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	1c59      	adds	r1, r3, #1
 80171ee:	b2c0      	uxtb	r0, r0
 80171f0:	4613      	mov	r3, r2
 80171f2:	00db      	lsls	r3, r3, #3
 80171f4:	4413      	add	r3, r2
 80171f6:	33b0      	adds	r3, #176	; 0xb0
 80171f8:	443b      	add	r3, r7
 80171fa:	440b      	add	r3, r1
 80171fc:	3b9b      	subs	r3, #155	; 0x9b
 80171fe:	4602      	mov	r2, r0
 8017200:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 8017202:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017206:	4613      	mov	r3, r2
 8017208:	00db      	lsls	r3, r3, #3
 801720a:	4413      	add	r3, r2
 801720c:	33b0      	adds	r3, #176	; 0xb0
 801720e:	443b      	add	r3, r7
 8017210:	3b9c      	subs	r3, #156	; 0x9c
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8017218:	3304      	adds	r3, #4
 801721a:	b2d9      	uxtb	r1, r3
 801721c:	4613      	mov	r3, r2
 801721e:	00db      	lsls	r3, r3, #3
 8017220:	4413      	add	r3, r2
 8017222:	33b0      	adds	r3, #176	; 0xb0
 8017224:	443b      	add	r3, r7
 8017226:	3b9c      	subs	r3, #156	; 0x9c
 8017228:	460a      	mov	r2, r1
 801722a:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 801722c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8017230:	3301      	adds	r3, #1
 8017232:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8017236:	e002      	b.n	801723e <rfalNfcvPollerCollisionResolution+0x2fe>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8017238:	2004      	movs	r0, #4
 801723a:	f7ed fa53 	bl	80046e4 <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	7bba      	ldrb	r2, [r7, #14]
 8017244:	429a      	cmp	r2, r3
 8017246:	d801      	bhi.n	801724c <rfalNfcvPollerCollisionResolution+0x30c>
            {
                return ERR_NONE;
 8017248:	2300      	movs	r3, #0
 801724a:	e011      	b.n	8017270 <rfalNfcvPollerCollisionResolution+0x330>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 801724c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8017250:	2b0f      	cmp	r3, #15
 8017252:	f67f aee2 	bls.w	801701a <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 8017256:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801725a:	3301      	adds	r3, #1
 801725c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 8017260:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8017264:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8017268:	429a      	cmp	r2, r3
 801726a:	f4ff aed0 	bcc.w	801700e <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 801726e:	2300      	movs	r3, #0
}
 8017270:	4618      	mov	r0, r3
 8017272:	37b0      	adds	r7, #176	; 0xb0
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}

08017278 <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b094      	sub	sp, #80	; 0x50
 801727c:	af06      	add	r7, sp, #24
 801727e:	4603      	mov	r3, r0
 8017280:	6039      	str	r1, [r7, #0]
 8017282:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d101      	bne.n	801728e <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 801728a:	2307      	movs	r3, #7
 801728c:	e012      	b.n	80172b4 <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801728e:	79f9      	ldrb	r1, [r7, #7]
 8017290:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8017294:	9304      	str	r3, [sp, #16]
 8017296:	232a      	movs	r3, #42	; 0x2a
 8017298:	9303      	str	r3, [sp, #12]
 801729a:	f107 030c 	add.w	r3, r7, #12
 801729e:	9302      	str	r3, [sp, #8]
 80172a0:	2300      	movs	r3, #0
 80172a2:	9301      	str	r3, [sp, #4]
 80172a4:	2300      	movs	r3, #0
 80172a6:	9300      	str	r3, [sp, #0]
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	2200      	movs	r2, #0
 80172ac:	2025      	movs	r0, #37	; 0x25
 80172ae:	f000 f9c5 	bl	801763c <rfalNfcvPollerTransceiveReq>
 80172b2:	4603      	mov	r3, r0
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3738      	adds	r7, #56	; 0x38
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b08c      	sub	sp, #48	; 0x30
 80172c0:	af06      	add	r7, sp, #24
 80172c2:	60b9      	str	r1, [r7, #8]
 80172c4:	607b      	str	r3, [r7, #4]
 80172c6:	4603      	mov	r3, r0
 80172c8:	73fb      	strb	r3, [r7, #15]
 80172ca:	4613      	mov	r3, r2
 80172cc:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 80172ce:	7bbb      	ldrb	r3, [r7, #14]
 80172d0:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 80172d2:	7bf9      	ldrb	r1, [r7, #15]
 80172d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d6:	9304      	str	r3, [sp, #16]
 80172d8:	8c3b      	ldrh	r3, [r7, #32]
 80172da:	9303      	str	r3, [sp, #12]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	9302      	str	r3, [sp, #8]
 80172e0:	2301      	movs	r3, #1
 80172e2:	9301      	str	r3, [sp, #4]
 80172e4:	f107 0317 	add.w	r3, r7, #23
 80172e8:	9300      	str	r3, [sp, #0]
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	2200      	movs	r2, #0
 80172ee:	2020      	movs	r0, #32
 80172f0:	f000 f9a4 	bl	801763c <rfalNfcvPollerTransceiveReq>
 80172f4:	4603      	mov	r3, r0
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3718      	adds	r7, #24
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}

080172fe <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 80172fe:	b580      	push	{r7, lr}
 8017300:	b09e      	sub	sp, #120	; 0x78
 8017302:	af06      	add	r7, sp, #24
 8017304:	60b9      	str	r1, [r7, #8]
 8017306:	607b      	str	r3, [r7, #4]
 8017308:	4603      	mov	r3, r0
 801730a:	73fb      	strb	r3, [r7, #15]
 801730c:	4613      	mov	r3, r2
 801730e:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 8017310:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017314:	2b00      	cmp	r3, #0
 8017316:	d006      	beq.n	8017326 <rfalNfcvPollerWriteSingleBlock+0x28>
 8017318:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801731c:	2b20      	cmp	r3, #32
 801731e:	d802      	bhi.n	8017326 <rfalNfcvPollerWriteSingleBlock+0x28>
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d101      	bne.n	801732a <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8017326:	2307      	movs	r3, #7
 8017328:	e034      	b.n	8017394 <rfalNfcvPollerWriteSingleBlock+0x96>
    }
    
    dataLen = 0U;
 801732a:	2300      	movs	r3, #0
 801732c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 8017330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017334:	1c5a      	adds	r2, r3, #1
 8017336:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 801733a:	3360      	adds	r3, #96	; 0x60
 801733c:	443b      	add	r3, r7
 801733e:	7bba      	ldrb	r2, [r7, #14]
 8017340:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 8017344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017348:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801734c:	4413      	add	r3, r2
 801734e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	4618      	mov	r0, r3
 8017356:	f004 f849 	bl	801b3ec <memcpy>
    dataLen += blockLen;
 801735a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801735e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017362:	4413      	add	r3, r2
 8017364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8017368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801736c:	b29b      	uxth	r3, r3
 801736e:	7bf9      	ldrb	r1, [r7, #15]
 8017370:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8017374:	9204      	str	r2, [sp, #16]
 8017376:	222a      	movs	r2, #42	; 0x2a
 8017378:	9203      	str	r2, [sp, #12]
 801737a:	f107 0210 	add.w	r2, r7, #16
 801737e:	9202      	str	r2, [sp, #8]
 8017380:	9301      	str	r3, [sp, #4]
 8017382:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	2200      	movs	r2, #0
 801738c:	2021      	movs	r0, #33	; 0x21
 801738e:	f000 f955 	bl	801763c <rfalNfcvPollerTransceiveReq>
 8017392:	4603      	mov	r3, r0
}
 8017394:	4618      	mov	r0, r3
 8017396:	3760      	adds	r7, #96	; 0x60
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b08a      	sub	sp, #40	; 0x28
 80173a0:	af06      	add	r7, sp, #24
 80173a2:	6039      	str	r1, [r7, #0]
 80173a4:	4611      	mov	r1, r2
 80173a6:	461a      	mov	r2, r3
 80173a8:	4603      	mov	r3, r0
 80173aa:	71fb      	strb	r3, [r7, #7]
 80173ac:	460b      	mov	r3, r1
 80173ae:	71bb      	strb	r3, [r7, #6]
 80173b0:	4613      	mov	r3, r2
 80173b2:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 80173b4:	2300      	movs	r3, #0
 80173b6:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 80173b8:	7bfb      	ldrb	r3, [r7, #15]
 80173ba:	1c5a      	adds	r2, r3, #1
 80173bc:	73fa      	strb	r2, [r7, #15]
 80173be:	3310      	adds	r3, #16
 80173c0:	443b      	add	r3, r7
 80173c2:	79ba      	ldrb	r2, [r7, #6]
 80173c4:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 80173c8:	7bfb      	ldrb	r3, [r7, #15]
 80173ca:	1c5a      	adds	r2, r3, #1
 80173cc:	73fa      	strb	r2, [r7, #15]
 80173ce:	3310      	adds	r3, #16
 80173d0:	443b      	add	r3, r7
 80173d2:	797a      	ldrb	r2, [r7, #5]
 80173d4:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 80173d8:	7bfb      	ldrb	r3, [r7, #15]
 80173da:	b29b      	uxth	r3, r3
 80173dc:	79f9      	ldrb	r1, [r7, #7]
 80173de:	6a3a      	ldr	r2, [r7, #32]
 80173e0:	9204      	str	r2, [sp, #16]
 80173e2:	8bba      	ldrh	r2, [r7, #28]
 80173e4:	9203      	str	r2, [sp, #12]
 80173e6:	69ba      	ldr	r2, [r7, #24]
 80173e8:	9202      	str	r2, [sp, #8]
 80173ea:	9301      	str	r3, [sp, #4]
 80173ec:	f107 030c 	add.w	r3, r7, #12
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	2200      	movs	r2, #0
 80173f6:	2023      	movs	r0, #35	; 0x23
 80173f8:	f000 f920 	bl	801763c <rfalNfcvPollerTransceiveReq>
 80173fc:	4603      	mov	r3, r0
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3710      	adds	r7, #16
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}

08017406 <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017406:	b580      	push	{r7, lr}
 8017408:	b08c      	sub	sp, #48	; 0x30
 801740a:	af06      	add	r7, sp, #24
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607b      	str	r3, [r7, #4]
 8017410:	4603      	mov	r3, r0
 8017412:	73fb      	strb	r3, [r7, #15]
 8017414:	4613      	mov	r3, r2
 8017416:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 8017418:	2300      	movs	r3, #0
 801741a:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 801741c:	7dfb      	ldrb	r3, [r7, #23]
 801741e:	1c5a      	adds	r2, r3, #1
 8017420:	75fa      	strb	r2, [r7, #23]
 8017422:	89ba      	ldrh	r2, [r7, #12]
 8017424:	b2d2      	uxtb	r2, r2
 8017426:	3318      	adds	r3, #24
 8017428:	443b      	add	r3, r7
 801742a:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 801742e:	89bb      	ldrh	r3, [r7, #12]
 8017430:	0a1b      	lsrs	r3, r3, #8
 8017432:	b29a      	uxth	r2, r3
 8017434:	7dfb      	ldrb	r3, [r7, #23]
 8017436:	1c59      	adds	r1, r3, #1
 8017438:	75f9      	strb	r1, [r7, #23]
 801743a:	b2d2      	uxtb	r2, r2
 801743c:	3318      	adds	r3, #24
 801743e:	443b      	add	r3, r7
 8017440:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8017444:	7dfb      	ldrb	r3, [r7, #23]
 8017446:	b29b      	uxth	r3, r3
 8017448:	7bf9      	ldrb	r1, [r7, #15]
 801744a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801744c:	9204      	str	r2, [sp, #16]
 801744e:	8c3a      	ldrh	r2, [r7, #32]
 8017450:	9203      	str	r2, [sp, #12]
 8017452:	687a      	ldr	r2, [r7, #4]
 8017454:	9202      	str	r2, [sp, #8]
 8017456:	9301      	str	r3, [sp, #4]
 8017458:	f107 0314 	add.w	r3, r7, #20
 801745c:	9300      	str	r3, [sp, #0]
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	2200      	movs	r2, #0
 8017462:	2030      	movs	r0, #48	; 0x30
 8017464:	f000 f8ea 	bl	801763c <rfalNfcvPollerTransceiveReq>
 8017468:	4603      	mov	r3, r0
}
 801746a:	4618      	mov	r0, r3
 801746c:	3718      	adds	r7, #24
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8017472:	b580      	push	{r7, lr}
 8017474:	b09e      	sub	sp, #120	; 0x78
 8017476:	af06      	add	r7, sp, #24
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607b      	str	r3, [r7, #4]
 801747c:	4603      	mov	r3, r0
 801747e:	73fb      	strb	r3, [r7, #15]
 8017480:	4613      	mov	r3, r2
 8017482:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 8017484:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017488:	2b00      	cmp	r3, #0
 801748a:	d003      	beq.n	8017494 <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 801748c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017490:	2b20      	cmp	r3, #32
 8017492:	d901      	bls.n	8017498 <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 8017494:	2307      	movs	r3, #7
 8017496:	e042      	b.n	801751e <rfalNfcvPollerExtendedWriteSingleBlock+0xac>
    }
    
    dataLen = 0U;
 8017498:	2300      	movs	r3, #0
 801749a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 801749e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174a2:	1c5a      	adds	r2, r3, #1
 80174a4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80174a8:	89ba      	ldrh	r2, [r7, #12]
 80174aa:	b2d2      	uxtb	r2, r2
 80174ac:	3360      	adds	r3, #96	; 0x60
 80174ae:	443b      	add	r3, r7
 80174b0:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 80174b4:	89bb      	ldrh	r3, [r7, #12]
 80174b6:	0a1b      	lsrs	r3, r3, #8
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174be:	1c59      	adds	r1, r3, #1
 80174c0:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 80174c4:	b2d2      	uxtb	r2, r2
 80174c6:	3360      	adds	r3, #96	; 0x60
 80174c8:	443b      	add	r3, r7
 80174ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 80174ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80174d6:	4413      	add	r3, r2
 80174d8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80174dc:	6879      	ldr	r1, [r7, #4]
 80174de:	4618      	mov	r0, r3
 80174e0:	f003 ff84 	bl	801b3ec <memcpy>
    dataLen += blockLen;
 80174e4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80174e8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80174ec:	4413      	add	r3, r2
 80174ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80174f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	7bf9      	ldrb	r1, [r7, #15]
 80174fa:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80174fe:	9204      	str	r2, [sp, #16]
 8017500:	222a      	movs	r2, #42	; 0x2a
 8017502:	9203      	str	r2, [sp, #12]
 8017504:	f107 0210 	add.w	r2, r7, #16
 8017508:	9202      	str	r2, [sp, #8]
 801750a:	9301      	str	r3, [sp, #4]
 801750c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017510:	9300      	str	r3, [sp, #0]
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	2200      	movs	r2, #0
 8017516:	2031      	movs	r0, #49	; 0x31
 8017518:	f000 f890 	bl	801763c <rfalNfcvPollerTransceiveReq>
 801751c:	4603      	mov	r3, r0
}
 801751e:	4618      	mov	r0, r3
 8017520:	3760      	adds	r7, #96	; 0x60
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}

08017526 <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8017526:	b580      	push	{r7, lr}
 8017528:	b08c      	sub	sp, #48	; 0x30
 801752a:	af06      	add	r7, sp, #24
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	4611      	mov	r1, r2
 8017530:	461a      	mov	r2, r3
 8017532:	4603      	mov	r3, r0
 8017534:	73fb      	strb	r3, [r7, #15]
 8017536:	460b      	mov	r3, r1
 8017538:	81bb      	strh	r3, [r7, #12]
 801753a:	4613      	mov	r3, r2
 801753c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 801753e:	2300      	movs	r3, #0
 8017540:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 8017542:	7dfb      	ldrb	r3, [r7, #23]
 8017544:	1c5a      	adds	r2, r3, #1
 8017546:	75fa      	strb	r2, [r7, #23]
 8017548:	89ba      	ldrh	r2, [r7, #12]
 801754a:	b2d2      	uxtb	r2, r2
 801754c:	3318      	adds	r3, #24
 801754e:	443b      	add	r3, r7
 8017550:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 8017554:	89bb      	ldrh	r3, [r7, #12]
 8017556:	0a1b      	lsrs	r3, r3, #8
 8017558:	b29a      	uxth	r2, r3
 801755a:	7dfb      	ldrb	r3, [r7, #23]
 801755c:	1c59      	adds	r1, r3, #1
 801755e:	75f9      	strb	r1, [r7, #23]
 8017560:	b2d2      	uxtb	r2, r2
 8017562:	3318      	adds	r3, #24
 8017564:	443b      	add	r3, r7
 8017566:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 801756a:	7dfb      	ldrb	r3, [r7, #23]
 801756c:	1c5a      	adds	r2, r3, #1
 801756e:	75fa      	strb	r2, [r7, #23]
 8017570:	88fa      	ldrh	r2, [r7, #6]
 8017572:	b2d2      	uxtb	r2, r2
 8017574:	3318      	adds	r3, #24
 8017576:	443b      	add	r3, r7
 8017578:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 801757c:	88fb      	ldrh	r3, [r7, #6]
 801757e:	0a1b      	lsrs	r3, r3, #8
 8017580:	b29a      	uxth	r2, r3
 8017582:	7dfb      	ldrb	r3, [r7, #23]
 8017584:	1c59      	adds	r1, r3, #1
 8017586:	75f9      	strb	r1, [r7, #23]
 8017588:	b2d2      	uxtb	r2, r2
 801758a:	3318      	adds	r3, #24
 801758c:	443b      	add	r3, r7
 801758e:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8017592:	7dfb      	ldrb	r3, [r7, #23]
 8017594:	b29b      	uxth	r3, r3
 8017596:	7bf9      	ldrb	r1, [r7, #15]
 8017598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801759a:	9204      	str	r2, [sp, #16]
 801759c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801759e:	9203      	str	r2, [sp, #12]
 80175a0:	6a3a      	ldr	r2, [r7, #32]
 80175a2:	9202      	str	r2, [sp, #8]
 80175a4:	9301      	str	r3, [sp, #4]
 80175a6:	f107 0310 	add.w	r3, r7, #16
 80175aa:	9300      	str	r3, [sp, #0]
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	2200      	movs	r2, #0
 80175b0:	2033      	movs	r0, #51	; 0x33
 80175b2:	f000 f843 	bl	801763c <rfalNfcvPollerTransceiveReq>
 80175b6:	4603      	mov	r3, r0
}
 80175b8:	4618      	mov	r0, r3
 80175ba:	3718      	adds	r7, #24
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b08a      	sub	sp, #40	; 0x28
 80175c4:	af06      	add	r7, sp, #24
 80175c6:	60b9      	str	r1, [r7, #8]
 80175c8:	607a      	str	r2, [r7, #4]
 80175ca:	461a      	mov	r2, r3
 80175cc:	4603      	mov	r3, r0
 80175ce:	73fb      	strb	r3, [r7, #15]
 80175d0:	4613      	mov	r3, r2
 80175d2:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 80175d4:	7bf9      	ldrb	r1, [r7, #15]
 80175d6:	69bb      	ldr	r3, [r7, #24]
 80175d8:	9304      	str	r3, [sp, #16]
 80175da:	89bb      	ldrh	r3, [r7, #12]
 80175dc:	9303      	str	r3, [sp, #12]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	9302      	str	r3, [sp, #8]
 80175e2:	2300      	movs	r3, #0
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	2300      	movs	r3, #0
 80175e8:	9300      	str	r3, [sp, #0]
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	2200      	movs	r2, #0
 80175ee:	202b      	movs	r0, #43	; 0x2b
 80175f0:	f000 f824 	bl	801763c <rfalNfcvPollerTransceiveReq>
 80175f4:	4603      	mov	r3, r0
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b08a      	sub	sp, #40	; 0x28
 8017602:	af06      	add	r7, sp, #24
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	607b      	str	r3, [r7, #4]
 8017608:	4603      	mov	r3, r0
 801760a:	73fb      	strb	r3, [r7, #15]
 801760c:	4613      	mov	r3, r2
 801760e:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 8017610:	7bba      	ldrb	r2, [r7, #14]
 8017612:	7bf9      	ldrb	r1, [r7, #15]
 8017614:	69fb      	ldr	r3, [r7, #28]
 8017616:	9304      	str	r3, [sp, #16]
 8017618:	8b3b      	ldrh	r3, [r7, #24]
 801761a:	9303      	str	r3, [sp, #12]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	9302      	str	r3, [sp, #8]
 8017620:	2300      	movs	r3, #0
 8017622:	9301      	str	r3, [sp, #4]
 8017624:	2300      	movs	r3, #0
 8017626:	9300      	str	r3, [sp, #0]
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	203b      	movs	r0, #59	; 0x3b
 801762c:	f000 f806 	bl	801763c <rfalNfcvPollerTransceiveReq>
 8017630:	4603      	mov	r3, r0
}
 8017632:	4618      	mov	r0, r3
 8017634:	3710      	adds	r7, #16
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b094      	sub	sp, #80	; 0x50
 8017640:	af04      	add	r7, sp, #16
 8017642:	603b      	str	r3, [r7, #0]
 8017644:	4603      	mov	r3, r0
 8017646:	71fb      	strb	r3, [r7, #7]
 8017648:	460b      	mov	r3, r1
 801764a:	71bb      	strb	r3, [r7, #6]
 801764c:	4613      	mov	r3, r2
 801764e:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 8017650:	2300      	movs	r3, #0
 8017652:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 8017656:	2300      	movs	r3, #0
 8017658:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 801765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801765e:	2b00      	cmp	r3, #0
 8017660:	d013      	beq.n	801768a <rfalNfcvPollerTransceiveReq+0x4e>
 8017662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017664:	2b00      	cmp	r3, #0
 8017666:	d010      	beq.n	801768a <rfalNfcvPollerTransceiveReq+0x4e>
 8017668:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801766c:	2b00      	cmp	r3, #0
 801766e:	d002      	beq.n	8017676 <rfalNfcvPollerTransceiveReq+0x3a>
 8017670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017672:	2b00      	cmp	r3, #0
 8017674:	d009      	beq.n	801768a <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 8017676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801767a:	683a      	ldr	r2, [r7, #0]
 801767c:	2a00      	cmp	r2, #0
 801767e:	d001      	beq.n	8017684 <rfalNfcvPollerTransceiveReq+0x48>
 8017680:	2229      	movs	r2, #41	; 0x29
 8017682:	e000      	b.n	8017686 <rfalNfcvPollerTransceiveReq+0x4a>
 8017684:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8017686:	429a      	cmp	r2, r3
 8017688:	d201      	bcs.n	801768e <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 801768a:	2307      	movs	r3, #7
 801768c:	e0ca      	b.n	8017824 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 801768e:	79fb      	ldrb	r3, [r7, #7]
 8017690:	2bc0      	cmp	r3, #192	; 0xc0
 8017692:	d017      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
 8017694:	79fb      	ldrb	r3, [r7, #7]
 8017696:	2bc4      	cmp	r3, #196	; 0xc4
 8017698:	d014      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
 801769a:	79fb      	ldrb	r3, [r7, #7]
 801769c:	2bc3      	cmp	r3, #195	; 0xc3
 801769e:	d011      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 80176a0:	79fb      	ldrb	r3, [r7, #7]
 80176a2:	2bc5      	cmp	r3, #197	; 0xc5
 80176a4:	d00e      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
 80176a6:	79fb      	ldrb	r3, [r7, #7]
 80176a8:	2bca      	cmp	r3, #202	; 0xca
 80176aa:	d00b      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 80176ac:	79fb      	ldrb	r3, [r7, #7]
 80176ae:	2bcb      	cmp	r3, #203	; 0xcb
 80176b0:	d008      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
 80176b2:	79fb      	ldrb	r3, [r7, #7]
 80176b4:	2bcc      	cmp	r3, #204	; 0xcc
 80176b6:	d005      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 80176b8:	79fb      	ldrb	r3, [r7, #7]
 80176ba:	2bcd      	cmp	r3, #205	; 0xcd
 80176bc:	d002      	beq.n	80176c4 <rfalNfcvPollerTransceiveReq+0x88>
 80176be:	79fb      	ldrb	r3, [r7, #7]
 80176c0:	2bce      	cmp	r3, #206	; 0xce
 80176c2:	d10c      	bne.n	80176de <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 80176c4:	f107 030f 	add.w	r3, r7, #15
 80176c8:	4619      	mov	r1, r3
 80176ca:	2000      	movs	r0, #0
 80176cc:	f000 fcca 	bl	8018064 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 80176d0:	21eb      	movs	r1, #235	; 0xeb
 80176d2:	20ff      	movs	r0, #255	; 0xff
 80176d4:	f000 fa62 	bl	8017b9c <rfalSetBitRate>
        
        fastMode = true;
 80176d8:	2301      	movs	r3, #1
 80176da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 80176de:	79bb      	ldrb	r3, [r7, #6]
 80176e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 80176e8:	79fb      	ldrb	r3, [r7, #7]
 80176ea:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 80176ec:	797b      	ldrb	r3, [r7, #5]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d009      	beq.n	8017706 <rfalNfcvPollerTransceiveReq+0xca>
    {
        req.payload.data[msgIt++] = param;
 80176f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80176f6:	1c5a      	adds	r2, r3, #1
 80176f8:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80176fc:	3340      	adds	r3, #64	; 0x40
 80176fe:	443b      	add	r3, r7
 8017700:	797a      	ldrb	r2, [r7, #5]
 8017702:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d015      	beq.n	8017738 <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 801770c:	7c3b      	ldrb	r3, [r7, #16]
 801770e:	f043 0320 	orr.w	r3, r3, #32
 8017712:	b2db      	uxtb	r3, r3
 8017714:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 8017716:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801771a:	f107 0210 	add.w	r2, r7, #16
 801771e:	4413      	add	r3, r2
 8017720:	3302      	adds	r3, #2
 8017722:	2208      	movs	r2, #8
 8017724:	6839      	ldr	r1, [r7, #0]
 8017726:	4618      	mov	r0, r3
 8017728:	f003 fe60 	bl	801b3ec <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 801772c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017730:	3308      	adds	r3, #8
 8017732:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8017736:	e004      	b.n	8017742 <rfalNfcvPollerTransceiveReq+0x106>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 8017738:	7c3b      	ldrb	r3, [r7, #16]
 801773a:	f043 0310 	orr.w	r3, r3, #16
 801773e:	b2db      	uxtb	r3, r3
 8017740:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 8017742:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8017746:	2b00      	cmp	r3, #0
 8017748:	d013      	beq.n	8017772 <rfalNfcvPollerTransceiveReq+0x136>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 801774a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801774e:	f107 0210 	add.w	r2, r7, #16
 8017752:	4413      	add	r3, r2
 8017754:	3302      	adds	r3, #2
 8017756:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801775a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801775c:	4618      	mov	r0, r3
 801775e:	f003 fe45 	bl	801b3ec <memcpy>
        msgIt += (uint8_t)dataLen;
 8017762:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8017766:	b2da      	uxtb	r2, r3
 8017768:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801776c:	4413      	add	r3, r2
 801776e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 8017772:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8017776:	b29b      	uxth	r3, r3
 8017778:	3302      	adds	r3, #2
 801777a:	b299      	uxth	r1, r3
 801777c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8017780:	f107 0010 	add.w	r0, r7, #16
 8017784:	4b29      	ldr	r3, [pc, #164]	; (801782c <rfalNfcvPollerTransceiveReq+0x1f0>)
 8017786:	9302      	str	r3, [sp, #8]
 8017788:	2300      	movs	r3, #0
 801778a:	9301      	str	r3, [sp, #4]
 801778c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801778e:	9300      	str	r3, [sp, #0]
 8017790:	4613      	mov	r3, r2
 8017792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017794:	f000 ff20 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8017798:	4603      	mov	r3, r0
 801779a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 801779c:	79bb      	ldrb	r3, [r7, #6]
 801779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d01b      	beq.n	80177de <rfalNfcvPollerTransceiveReq+0x1a2>
 80177a6:	79fb      	ldrb	r3, [r7, #7]
 80177a8:	2b21      	cmp	r3, #33	; 0x21
 80177aa:	d00e      	beq.n	80177ca <rfalNfcvPollerTransceiveReq+0x18e>
 80177ac:	79fb      	ldrb	r3, [r7, #7]
 80177ae:	2b24      	cmp	r3, #36	; 0x24
 80177b0:	d00b      	beq.n	80177ca <rfalNfcvPollerTransceiveReq+0x18e>
 80177b2:	79fb      	ldrb	r3, [r7, #7]
 80177b4:	2b22      	cmp	r3, #34	; 0x22
 80177b6:	d008      	beq.n	80177ca <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 80177b8:	79fb      	ldrb	r3, [r7, #7]
 80177ba:	2b31      	cmp	r3, #49	; 0x31
 80177bc:	d005      	beq.n	80177ca <rfalNfcvPollerTransceiveReq+0x18e>
 80177be:	79fb      	ldrb	r3, [r7, #7]
 80177c0:	2b32      	cmp	r3, #50	; 0x32
 80177c2:	d002      	beq.n	80177ca <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 80177c4:	79fb      	ldrb	r3, [r7, #7]
 80177c6:	2b34      	cmp	r3, #52	; 0x34
 80177c8:	d109      	bne.n	80177de <rfalNfcvPollerTransceiveReq+0x1a2>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 80177ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80177d2:	4619      	mov	r1, r3
 80177d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80177d6:	f002 f90d 	bl	80199f4 <rfalISO15693TransceiveEOF>
 80177da:	4603      	mov	r3, r0
 80177dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 80177de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d004      	beq.n	80177f0 <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 80177e6:	7bfb      	ldrb	r3, [r7, #15]
 80177e8:	4619      	mov	r1, r3
 80177ea:	20ff      	movs	r0, #255	; 0xff
 80177ec:	f000 f9d6 	bl	8017b9c <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 80177f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d001      	beq.n	80177fa <rfalNfcvPollerTransceiveReq+0x1be>
    {
        return ret;
 80177f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177f8:	e014      	b.n	8017824 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 80177fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d101      	bne.n	8017806 <rfalNfcvPollerTransceiveReq+0x1ca>
    {
        return ERR_PROTO;
 8017802:	230b      	movs	r3, #11
 8017804:	e00e      	b.n	8017824 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 8017806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	f003 0301 	and.w	r3, r3, #1
 801780e:	2b00      	cmp	r3, #0
 8017810:	d007      	beq.n	8017822 <rfalNfcvPollerTransceiveReq+0x1e6>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 8017812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017814:	3301      	adds	r3, #1
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	4618      	mov	r0, r3
 801781a:	f7ff faab 	bl	8016d74 <rfalNfcvParseError>
 801781e:	4603      	mov	r3, r0
 8017820:	e000      	b.n	8017824 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    return ERR_NONE;
 8017822:	2300      	movs	r3, #0
}
 8017824:	4618      	mov	r0, r3
 8017826:	3740      	adds	r7, #64	; 0x40
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}
 801782c:	00042360 	.word	0x00042360

08017830 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 8017834:	f7ec fd18 	bl	8004268 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 8017838:	f7eb fddc 	bl	80033f4 <st25r3911Initialize>

    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 801783c:	2000      	movs	r0, #0
 801783e:	f7eb ff99 	bl	8003774 <st25r3911CheckChipID>
 8017842:	4603      	mov	r3, r0
 8017844:	f083 0301 	eor.w	r3, r3, #1
 8017848:	b2db      	uxtb	r3, r3
 801784a:	2b00      	cmp	r3, #0
 801784c:	d001      	beq.n	8017852 <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 801784e:	2324      	movs	r3, #36	; 0x24
 8017850:	e052      	b.n	80178f8 <rfalInitialize+0xc8>
    }

    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 8017852:	2100      	movs	r1, #0
 8017854:	2001      	movs	r0, #1
 8017856:	f7ec fa5f 	bl	8003d18 <st25r3911WriteTestRegister>

    /*******************************************************************************/
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 801785a:	2000      	movs	r0, #0
 801785c:	f7f7 ff7e 	bl	800f75c <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 8017860:	2200      	movs	r2, #0
 8017862:	2130      	movs	r1, #48	; 0x30
 8017864:	2000      	movs	r0, #0
 8017866:	f7ec fb2c 	bl	8003ec2 <st25r3911ChangeRegisterBits>

    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 801786a:	2140      	movs	r1, #64	; 0x40
 801786c:	2009      	movs	r0, #9
 801786e:	f7ec fb0a 	bl	8003e86 <st25r3911SetRegisterBits>

    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017872:	2110      	movs	r1, #16
 8017874:	2009      	movs	r0, #9
 8017876:	f7ec fb06 	bl	8003e86 <st25r3911SetRegisterBits>

    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801787a:	f001 fe05 	bl	8019488 <rfalFIFOStatusClear>

    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 801787e:	4b1f      	ldr	r3, [pc, #124]	; (80178fc <rfalInitialize+0xcc>)
 8017880:	2201      	movs	r2, #1
 8017882:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 8017884:	4b1d      	ldr	r3, [pc, #116]	; (80178fc <rfalInitialize+0xcc>)
 8017886:	2200      	movs	r2, #0
 8017888:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 801788a:	4b1c      	ldr	r3, [pc, #112]	; (80178fc <rfalInitialize+0xcc>)
 801788c:	2200      	movs	r2, #0
 801788e:	711a      	strb	r2, [r3, #4]

    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 8017890:	4b1a      	ldr	r3, [pc, #104]	; (80178fc <rfalInitialize+0xcc>)
 8017892:	2200      	movs	r2, #0
 8017894:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 8017896:	4b19      	ldr	r3, [pc, #100]	; (80178fc <rfalInitialize+0xcc>)
 8017898:	2200      	movs	r2, #0
 801789a:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 801789c:	4b17      	ldr	r3, [pc, #92]	; (80178fc <rfalInitialize+0xcc>)
 801789e:	2200      	movs	r2, #0
 80178a0:	71da      	strb	r2, [r3, #7]

    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 80178a2:	4b16      	ldr	r3, [pc, #88]	; (80178fc <rfalInitialize+0xcc>)
 80178a4:	2200      	movs	r2, #0
 80178a6:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 80178a8:	4b14      	ldr	r3, [pc, #80]	; (80178fc <rfalInitialize+0xcc>)
 80178aa:	2200      	movs	r2, #0
 80178ac:	751a      	strb	r2, [r3, #20]

    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 80178ae:	4b13      	ldr	r3, [pc, #76]	; (80178fc <rfalInitialize+0xcc>)
 80178b0:	2200      	movs	r2, #0
 80178b2:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 80178b4:	4b11      	ldr	r3, [pc, #68]	; (80178fc <rfalInitialize+0xcc>)
 80178b6:	2200      	movs	r2, #0
 80178b8:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 80178ba:	4b10      	ldr	r3, [pc, #64]	; (80178fc <rfalInitialize+0xcc>)
 80178bc:	2200      	movs	r2, #0
 80178be:	609a      	str	r2, [r3, #8]

    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 80178c0:	4b0e      	ldr	r3, [pc, #56]	; (80178fc <rfalInitialize+0xcc>)
 80178c2:	2200      	movs	r2, #0
 80178c4:	641a      	str	r2, [r3, #64]	; 0x40

    gRFAL.callbacks.preTxRx  = NULL;
 80178c6:	4b0d      	ldr	r3, [pc, #52]	; (80178fc <rfalInitialize+0xcc>)
 80178c8:	2200      	movs	r2, #0
 80178ca:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 80178cc:	4b0b      	ldr	r3, [pc, #44]	; (80178fc <rfalInitialize+0xcc>)
 80178ce:	2200      	movs	r2, #0
 80178d0:	651a      	str	r2, [r3, #80]	; 0x50

#if RFAL_FEATURE_NFCV
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 80178d2:	4b0a      	ldr	r3, [pc, #40]	; (80178fc <rfalInitialize+0xcc>)
 80178d4:	2200      	movs	r2, #0
 80178d6:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
#endif /* RFAL_FEATURE_NFCV */

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 80178da:	4b08      	ldr	r3, [pc, #32]	; (80178fc <rfalInitialize+0xcc>)
 80178dc:	2200      	movs	r2, #0
 80178de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 80178e2:	4b06      	ldr	r3, [pc, #24]	; (80178fc <rfalInitialize+0xcc>)
 80178e4:	22ff      	movs	r2, #255	; 0xff
 80178e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 80178ea:	4b04      	ldr	r3, [pc, #16]	; (80178fc <rfalInitialize+0xcc>)
 80178ec:	2200      	movs	r2, #0
 80178ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


    /*******************************************************************************/
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 80178f2:	f000 f805 	bl	8017900 <rfalCalibrate>
    
    return ERR_NONE;
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	bd80      	pop	{r7, pc}
 80178fc:	200039e4 	.word	0x200039e4

08017900 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8017906:	4b1b      	ldr	r3, [pc, #108]	; (8017974 <rfalCalibrate+0x74>)
 8017908:	781b      	ldrb	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d101      	bne.n	8017912 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 801790e:	2321      	movs	r3, #33	; 0x21
 8017910:	e02b      	b.n	801796a <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 8017912:	2200      	movs	r2, #0
 8017914:	2180      	movs	r1, #128	; 0x80
 8017916:	202a      	movs	r0, #42	; 0x2a
 8017918:	f7eb ff0c 	bl	8003734 <st25r3911CheckReg>
 801791c:	4603      	mov	r3, r0
 801791e:	2b00      	cmp	r3, #0
 8017920:	d003      	beq.n	801792a <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 8017922:	1dbb      	adds	r3, r7, #6
 8017924:	4618      	mov	r0, r3
 8017926:	f7eb fd93 	bl	8003450 <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 801792a:	2200      	movs	r2, #0
 801792c:	2180      	movs	r1, #128	; 0x80
 801792e:	2021      	movs	r0, #33	; 0x21
 8017930:	f7eb ff00 	bl	8003734 <st25r3911CheckReg>
 8017934:	4603      	mov	r3, r0
 8017936:	2b00      	cmp	r3, #0
 8017938:	d010      	beq.n	801795c <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 801793a:	1dbb      	adds	r3, r7, #6
 801793c:	4618      	mov	r0, r3
 801793e:	f7eb fe08 	bl	8003552 <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 8017942:	1dbb      	adds	r3, r7, #6
 8017944:	4618      	mov	r0, r3
 8017946:	f7eb fe04 	bl	8003552 <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 801794a:	2200      	movs	r2, #0
 801794c:	2180      	movs	r1, #128	; 0x80
 801794e:	202a      	movs	r0, #42	; 0x2a
 8017950:	f7eb fef0 	bl	8003734 <st25r3911CheckReg>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d006      	beq.n	8017968 <rfalCalibrate+0x68>
 801795a:	e001      	b.n	8017960 <rfalCalibrate+0x60>
        return ERR_NONE; 
 801795c:	2300      	movs	r3, #0
 801795e:	e004      	b.n	801796a <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 8017960:	1dbb      	adds	r3, r7, #6
 8017962:	4618      	mov	r0, r3
 8017964:	f7eb fd74 	bl	8003450 <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 8017968:	2300      	movs	r3, #0
}
 801796a:	4618      	mov	r0, r3
 801796c:	3708      	adds	r7, #8
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	200039e4 	.word	0x200039e4

08017978 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0
 801797e:	4603      	mov	r3, r0
 8017980:	71fb      	strb	r3, [r7, #7]
 8017982:	460b      	mov	r3, r1
 8017984:	71bb      	strb	r3, [r7, #6]
 8017986:	4613      	mov	r3, r2
 8017988:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 801798a:	4b83      	ldr	r3, [pc, #524]	; (8017b98 <rfalSetMode+0x220>)
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d101      	bne.n	8017996 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8017992:	2321      	movs	r3, #33	; 0x21
 8017994:	e0fb      	b.n	8017b8e <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8017996:	79bb      	ldrb	r3, [r7, #6]
 8017998:	2bff      	cmp	r3, #255	; 0xff
 801799a:	d002      	beq.n	80179a2 <rfalSetMode+0x2a>
 801799c:	797b      	ldrb	r3, [r7, #5]
 801799e:	2bff      	cmp	r3, #255	; 0xff
 80179a0:	d101      	bne.n	80179a6 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 80179a2:	2307      	movs	r3, #7
 80179a4:	e0f3      	b.n	8017b8e <rfalSetMode+0x216>
    }
   
    switch( mode )
 80179a6:	79fb      	ldrb	r3, [r7, #7]
 80179a8:	3b01      	subs	r3, #1
 80179aa:	2b0c      	cmp	r3, #12
 80179ac:	f200 80db 	bhi.w	8017b66 <rfalSetMode+0x1ee>
 80179b0:	a201      	add	r2, pc, #4	; (adr r2, 80179b8 <rfalSetMode+0x40>)
 80179b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179b6:	bf00      	nop
 80179b8:	080179ed 	.word	0x080179ed
 80179bc:	08017a0f 	.word	0x08017a0f
 80179c0:	08017a31 	.word	0x08017a31
 80179c4:	08017a67 	.word	0x08017a67
 80179c8:	08017a9d 	.word	0x08017a9d
 80179cc:	08017ad3 	.word	0x08017ad3
 80179d0:	08017af5 	.word	0x08017af5
 80179d4:	08017af5 	.word	0x08017af5
 80179d8:	08017b0f 	.word	0x08017b0f
 80179dc:	08017b63 	.word	0x08017b63
 80179e0:	08017b63 	.word	0x08017b63
 80179e4:	08017b63 	.word	0x08017b63
 80179e8:	08017b39 	.word	0x08017b39
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 80179ec:	2104      	movs	r1, #4
 80179ee:	2002      	movs	r0, #2
 80179f0:	f7ec fa26 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 80179f4:	2108      	movs	r1, #8
 80179f6:	2003      	movs	r0, #3
 80179f8:	f7ec f9d6 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80179fc:	f240 1001 	movw	r0, #257	; 0x101
 8017a00:	f7f7 feac 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017a04:	f44f 7081 	mov.w	r0, #258	; 0x102
 8017a08:	f7f7 fea8 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017a0c:	e0ad      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017a0e:	2104      	movs	r1, #4
 8017a10:	2002      	movs	r0, #2
 8017a12:	f7ec fa15 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 8017a16:	2120      	movs	r1, #32
 8017a18:	2003      	movs	r0, #3
 8017a1a:	f7ec f9c5 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017a1e:	f240 1001 	movw	r0, #257	; 0x101
 8017a22:	f7f7 fe9b 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017a26:	f44f 7081 	mov.w	r0, #258	; 0x102
 8017a2a:	f7f7 fe97 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017a2e:	e09c      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017a30:	2104      	movs	r1, #4
 8017a32:	2002      	movs	r0, #2
 8017a34:	f7ec fa04 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017a38:	2110      	movs	r1, #16
 8017a3a:	2003      	movs	r0, #3
 8017a3c:	f7ec f9b4 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017a40:	2200      	movs	r2, #0
 8017a42:	21fc      	movs	r1, #252	; 0xfc
 8017a44:	2006      	movs	r0, #6
 8017a46:	f7ec fa3c 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	21f8      	movs	r1, #248	; 0xf8
 8017a4e:	2007      	movs	r0, #7
 8017a50:	f7ec fa37 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017a54:	f240 2001 	movw	r0, #513	; 0x201
 8017a58:	f7f7 fe80 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017a5c:	f240 2002 	movw	r0, #514	; 0x202
 8017a60:	f7f7 fe7c 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017a64:	e081      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017a66:	2104      	movs	r1, #4
 8017a68:	2002      	movs	r0, #2
 8017a6a:	f7ec f9e9 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017a6e:	2110      	movs	r1, #16
 8017a70:	2003      	movs	r0, #3
 8017a72:	f7ec f999 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017a76:	2200      	movs	r2, #0
 8017a78:	21fc      	movs	r1, #252	; 0xfc
 8017a7a:	2006      	movs	r0, #6
 8017a7c:	f7ec fa21 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017a80:	2228      	movs	r2, #40	; 0x28
 8017a82:	21f8      	movs	r1, #248	; 0xf8
 8017a84:	2007      	movs	r0, #7
 8017a86:	f7ec fa1c 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017a8a:	f240 2001 	movw	r0, #513	; 0x201
 8017a8e:	f7f7 fe65 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017a92:	f240 2002 	movw	r0, #514	; 0x202
 8017a96:	f7f7 fe61 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017a9a:	e066      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017a9c:	2104      	movs	r1, #4
 8017a9e:	2002      	movs	r0, #2
 8017aa0:	f7ec f9ce 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8017aa4:	2110      	movs	r1, #16
 8017aa6:	2003      	movs	r0, #3
 8017aa8:	f7ec f97e 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8017aac:	2200      	movs	r2, #0
 8017aae:	21fc      	movs	r1, #252	; 0xfc
 8017ab0:	2006      	movs	r0, #6
 8017ab2:	f7ec fa06 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8017ab6:	2230      	movs	r2, #48	; 0x30
 8017ab8:	21f8      	movs	r1, #248	; 0xf8
 8017aba:	2007      	movs	r0, #7
 8017abc:	f7ec fa01 	bl	8003ec2 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017ac0:	f240 2001 	movw	r0, #513	; 0x201
 8017ac4:	f7f7 fe4a 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017ac8:	f240 2002 	movw	r0, #514	; 0x202
 8017acc:	f7f7 fe46 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017ad0:	e04b      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017ad2:	2104      	movs	r1, #4
 8017ad4:	2002      	movs	r0, #2
 8017ad6:	f7ec f9b3 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 8017ada:	2118      	movs	r1, #24
 8017adc:	2003      	movs	r0, #3
 8017ade:	f7ec f963 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017ae2:	f240 4001 	movw	r0, #1025	; 0x401
 8017ae6:	f7f7 fe39 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017aea:	f240 4002 	movw	r0, #1026	; 0x402
 8017aee:	f7f7 fe35 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017af2:	e03a      	b.n	8017b6a <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8017af4:	2104      	movs	r1, #4
 8017af6:	2002      	movs	r0, #2
 8017af8:	f7ec f9a2 	bl	8003e40 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017afc:	f241 0001 	movw	r0, #4097	; 0x1001
 8017b00:	f7f7 fe2c 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b04:	f241 0002 	movw	r0, #4098	; 0x1002
 8017b08:	f7f7 fe28 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017b0c:	e02d      	b.n	8017b6a <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 8017b0e:	2101      	movs	r1, #1
 8017b10:	2003      	movs	r0, #3
 8017b12:	f7ec f949 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8017b16:	2160      	movs	r1, #96	; 0x60
 8017b18:	2040      	movs	r0, #64	; 0x40
 8017b1a:	f7eb fdd7 	bl	80036cc <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017b1e:	2110      	movs	r1, #16
 8017b20:	2009      	movs	r0, #9
 8017b22:	f7ec f9b0 	bl	8003e86 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017b26:	f640 0001 	movw	r0, #2049	; 0x801
 8017b2a:	f7f7 fe17 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b2e:	f640 0002 	movw	r0, #2050	; 0x802
 8017b32:	f7f7 fe13 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017b36:	e018      	b.n	8017b6a <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 8017b38:	2189      	movs	r1, #137	; 0x89
 8017b3a:	2003      	movs	r0, #3
 8017b3c:	f7ec f934 	bl	8003da8 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8017b40:	2160      	movs	r1, #96	; 0x60
 8017b42:	2040      	movs	r0, #64	; 0x40
 8017b44:	f7eb fdc2 	bl	80036cc <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8017b48:	2110      	movs	r1, #16
 8017b4a:	2009      	movs	r0, #9
 8017b4c:	f7ec f99b 	bl	8003e86 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8017b50:	f648 0001 	movw	r0, #34817	; 0x8801
 8017b54:	f7f7 fe02 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8017b58:	f648 0002 	movw	r0, #34818	; 0x8802
 8017b5c:	f7f7 fdfe 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017b60:	e003      	b.n	8017b6a <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 8017b62:	2318      	movs	r3, #24
 8017b64:	e013      	b.n	8017b8e <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8017b66:	230f      	movs	r3, #15
 8017b68:	e011      	b.n	8017b8e <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 8017b6a:	4b0b      	ldr	r3, [pc, #44]	; (8017b98 <rfalSetMode+0x220>)
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	2b02      	cmp	r3, #2
 8017b70:	bf38      	it	cc
 8017b72:	2302      	movcc	r3, #2
 8017b74:	b2da      	uxtb	r2, r3
 8017b76:	4b08      	ldr	r3, [pc, #32]	; (8017b98 <rfalSetMode+0x220>)
 8017b78:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 8017b7a:	4a07      	ldr	r2, [pc, #28]	; (8017b98 <rfalSetMode+0x220>)
 8017b7c:	79fb      	ldrb	r3, [r7, #7]
 8017b7e:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 8017b80:	797a      	ldrb	r2, [r7, #5]
 8017b82:	79bb      	ldrb	r3, [r7, #6]
 8017b84:	4611      	mov	r1, r2
 8017b86:	4618      	mov	r0, r3
 8017b88:	f000 f808 	bl	8017b9c <rfalSetBitRate>
 8017b8c:	4603      	mov	r3, r0
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3708      	adds	r7, #8
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	200039e4 	.word	0x200039e4

08017b9c <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b088      	sub	sp, #32
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	460a      	mov	r2, r1
 8017ba6:	71fb      	strb	r3, [r7, #7]
 8017ba8:	4613      	mov	r3, r2
 8017baa:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8017bac:	4b93      	ldr	r3, [pc, #588]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d101      	bne.n	8017bb8 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 8017bb4:	2321      	movs	r3, #33	; 0x21
 8017bb6:	e24a      	b.n	801804e <rfalSetBitRate+0x4b2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8017bb8:	79fb      	ldrb	r3, [r7, #7]
 8017bba:	2bff      	cmp	r3, #255	; 0xff
 8017bbc:	d102      	bne.n	8017bc4 <rfalSetBitRate+0x28>
 8017bbe:	4b8f      	ldr	r3, [pc, #572]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bc0:	789b      	ldrb	r3, [r3, #2]
 8017bc2:	e000      	b.n	8017bc6 <rfalSetBitRate+0x2a>
 8017bc4:	79fb      	ldrb	r3, [r7, #7]
 8017bc6:	4a8d      	ldr	r2, [pc, #564]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bc8:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8017bca:	79bb      	ldrb	r3, [r7, #6]
 8017bcc:	2bff      	cmp	r3, #255	; 0xff
 8017bce:	d102      	bne.n	8017bd6 <rfalSetBitRate+0x3a>
 8017bd0:	4b8a      	ldr	r3, [pc, #552]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bd2:	78db      	ldrb	r3, [r3, #3]
 8017bd4:	e000      	b.n	8017bd8 <rfalSetBitRate+0x3c>
 8017bd6:	79bb      	ldrb	r3, [r7, #6]
 8017bd8:	4a88      	ldr	r2, [pc, #544]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bda:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8017bdc:	4b87      	ldr	r3, [pc, #540]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bde:	785b      	ldrb	r3, [r3, #1]
 8017be0:	2b07      	cmp	r3, #7
 8017be2:	d012      	beq.n	8017c0a <rfalSetBitRate+0x6e>
 8017be4:	4b85      	ldr	r3, [pc, #532]	; (8017dfc <rfalSetBitRate+0x260>)
 8017be6:	785b      	ldrb	r3, [r3, #1]
 8017be8:	2b08      	cmp	r3, #8
 8017bea:	d00e      	beq.n	8017c0a <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8017bec:	4b83      	ldr	r3, [pc, #524]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bee:	789b      	ldrb	r3, [r3, #2]
 8017bf0:	4a82      	ldr	r2, [pc, #520]	; (8017dfc <rfalSetBitRate+0x260>)
 8017bf2:	78d2      	ldrb	r2, [r2, #3]
 8017bf4:	4611      	mov	r1, r2
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7eb fce6 	bl	80035c8 <st25r3911SetBitrate>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	83fb      	strh	r3, [r7, #30]
 8017c00:	8bfb      	ldrh	r3, [r7, #30]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d001      	beq.n	8017c0a <rfalSetBitRate+0x6e>
 8017c06:	8bfb      	ldrh	r3, [r7, #30]
 8017c08:	e221      	b.n	801804e <rfalSetBitRate+0x4b2>
    }
    
    
    switch( gRFAL.mode )
 8017c0a:	4b7c      	ldr	r3, [pc, #496]	; (8017dfc <rfalSetBitRate+0x260>)
 8017c0c:	785b      	ldrb	r3, [r3, #1]
 8017c0e:	2b0d      	cmp	r3, #13
 8017c10:	f200 821a 	bhi.w	8018048 <rfalSetBitRate+0x4ac>
 8017c14:	a201      	add	r2, pc, #4	; (adr r2, 8017c1c <rfalSetBitRate+0x80>)
 8017c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c1a:	bf00      	nop
 8017c1c:	08018045 	.word	0x08018045
 8017c20:	08017c55 	.word	0x08017c55
 8017c24:	08017c55 	.word	0x08017c55
 8017c28:	08017cdd 	.word	0x08017cdd
 8017c2c:	08017cdd 	.word	0x08017cdd
 8017c30:	08017cdd 	.word	0x08017cdd
 8017c34:	08017d6d 	.word	0x08017d6d
 8017c38:	08017e01 	.word	0x08017e01
 8017c3c:	08017e01 	.word	0x08017e01
 8017c40:	08017f35 	.word	0x08017f35
 8017c44:	08018045 	.word	0x08018045
 8017c48:	08018045 	.word	0x08018045
 8017c4c:	08018045 	.word	0x08018045
 8017c50:	08017fc5 	.word	0x08017fc5
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017c54:	2008      	movs	r0, #8
 8017c56:	f7f7 fd81 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017c5a:	4b68      	ldr	r3, [pc, #416]	; (8017dfc <rfalSetBitRate+0x260>)
 8017c5c:	789b      	ldrb	r3, [r3, #2]
 8017c5e:	2bea      	cmp	r3, #234	; 0xea
 8017c60:	d90c      	bls.n	8017c7c <rfalSetBitRate+0xe0>
 8017c62:	4b66      	ldr	r3, [pc, #408]	; (8017dfc <rfalSetBitRate+0x260>)
 8017c64:	789b      	ldrb	r3, [r3, #2]
 8017c66:	b29b      	uxth	r3, r3
 8017c68:	011b      	lsls	r3, r3, #4
 8017c6a:	b29b      	uxth	r3, r3
 8017c6c:	b2db      	uxtb	r3, r3
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017c74:	f043 0301 	orr.w	r3, r3, #1
 8017c78:	b29b      	uxth	r3, r3
 8017c7a:	e00d      	b.n	8017c98 <rfalSetBitRate+0xfc>
 8017c7c:	4b5f      	ldr	r3, [pc, #380]	; (8017dfc <rfalSetBitRate+0x260>)
 8017c7e:	789b      	ldrb	r3, [r3, #2]
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	3301      	adds	r3, #1
 8017c84:	b29b      	uxth	r3, r3
 8017c86:	011b      	lsls	r3, r3, #4
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017c92:	f043 0301 	orr.w	r3, r3, #1
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f7f7 fd5f 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017c9e:	4b57      	ldr	r3, [pc, #348]	; (8017dfc <rfalSetBitRate+0x260>)
 8017ca0:	78db      	ldrb	r3, [r3, #3]
 8017ca2:	2bea      	cmp	r3, #234	; 0xea
 8017ca4:	d90a      	bls.n	8017cbc <rfalSetBitRate+0x120>
 8017ca6:	4b55      	ldr	r3, [pc, #340]	; (8017dfc <rfalSetBitRate+0x260>)
 8017ca8:	78db      	ldrb	r3, [r3, #3]
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	011b      	lsls	r3, r3, #4
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	e00b      	b.n	8017cd4 <rfalSetBitRate+0x138>
 8017cbc:	4b4f      	ldr	r3, [pc, #316]	; (8017dfc <rfalSetBitRate+0x260>)
 8017cbe:	78db      	ldrb	r3, [r3, #3]
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	011b      	lsls	r3, r3, #4
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	b2db      	uxtb	r3, r3
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7f7 fd41 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017cda:	e1b7      	b.n	801804c <rfalSetBitRate+0x4b0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017cdc:	2008      	movs	r0, #8
 8017cde:	f7f7 fd3d 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017ce2:	4b46      	ldr	r3, [pc, #280]	; (8017dfc <rfalSetBitRate+0x260>)
 8017ce4:	789b      	ldrb	r3, [r3, #2]
 8017ce6:	2bea      	cmp	r3, #234	; 0xea
 8017ce8:	d90c      	bls.n	8017d04 <rfalSetBitRate+0x168>
 8017cea:	4b44      	ldr	r3, [pc, #272]	; (8017dfc <rfalSetBitRate+0x260>)
 8017cec:	789b      	ldrb	r3, [r3, #2]
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	011b      	lsls	r3, r3, #4
 8017cf2:	b29b      	uxth	r3, r3
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	b29b      	uxth	r3, r3
 8017cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017cfc:	f043 0301 	orr.w	r3, r3, #1
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	e00d      	b.n	8017d20 <rfalSetBitRate+0x184>
 8017d04:	4b3d      	ldr	r3, [pc, #244]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d06:	789b      	ldrb	r3, [r3, #2]
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	3301      	adds	r3, #1
 8017d0c:	b29b      	uxth	r3, r3
 8017d0e:	011b      	lsls	r3, r3, #4
 8017d10:	b29b      	uxth	r3, r3
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d1a:	f043 0301 	orr.w	r3, r3, #1
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7f7 fd1b 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017d26:	4b35      	ldr	r3, [pc, #212]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d28:	78db      	ldrb	r3, [r3, #3]
 8017d2a:	2bea      	cmp	r3, #234	; 0xea
 8017d2c:	d90c      	bls.n	8017d48 <rfalSetBitRate+0x1ac>
 8017d2e:	4b33      	ldr	r3, [pc, #204]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d30:	78db      	ldrb	r3, [r3, #3]
 8017d32:	b29b      	uxth	r3, r3
 8017d34:	011b      	lsls	r3, r3, #4
 8017d36:	b29b      	uxth	r3, r3
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	b29b      	uxth	r3, r3
 8017d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d40:	f043 0302 	orr.w	r3, r3, #2
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	e00d      	b.n	8017d64 <rfalSetBitRate+0x1c8>
 8017d48:	4b2c      	ldr	r3, [pc, #176]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d4a:	78db      	ldrb	r3, [r3, #3]
 8017d4c:	b29b      	uxth	r3, r3
 8017d4e:	3301      	adds	r3, #1
 8017d50:	b29b      	uxth	r3, r3
 8017d52:	011b      	lsls	r3, r3, #4
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017d5e:	f043 0302 	orr.w	r3, r3, #2
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7f7 fcf9 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017d6a:	e16f      	b.n	801804c <rfalSetBitRate+0x4b0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017d6c:	2008      	movs	r0, #8
 8017d6e:	f7f7 fcf5 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017d72:	4b22      	ldr	r3, [pc, #136]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d74:	789b      	ldrb	r3, [r3, #2]
 8017d76:	2bea      	cmp	r3, #234	; 0xea
 8017d78:	d90c      	bls.n	8017d94 <rfalSetBitRate+0x1f8>
 8017d7a:	4b20      	ldr	r3, [pc, #128]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d7c:	789b      	ldrb	r3, [r3, #2]
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	011b      	lsls	r3, r3, #4
 8017d82:	b29b      	uxth	r3, r3
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017d8c:	f043 0301 	orr.w	r3, r3, #1
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	e00d      	b.n	8017db0 <rfalSetBitRate+0x214>
 8017d94:	4b19      	ldr	r3, [pc, #100]	; (8017dfc <rfalSetBitRate+0x260>)
 8017d96:	789b      	ldrb	r3, [r3, #2]
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	b29b      	uxth	r3, r3
 8017d9e:	011b      	lsls	r3, r3, #4
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017daa:	f043 0301 	orr.w	r3, r3, #1
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7f7 fcd3 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017db6:	4b11      	ldr	r3, [pc, #68]	; (8017dfc <rfalSetBitRate+0x260>)
 8017db8:	78db      	ldrb	r3, [r3, #3]
 8017dba:	2bea      	cmp	r3, #234	; 0xea
 8017dbc:	d90c      	bls.n	8017dd8 <rfalSetBitRate+0x23c>
 8017dbe:	4b0f      	ldr	r3, [pc, #60]	; (8017dfc <rfalSetBitRate+0x260>)
 8017dc0:	78db      	ldrb	r3, [r3, #3]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	011b      	lsls	r3, r3, #4
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	b2db      	uxtb	r3, r3
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017dd0:	f043 0302 	orr.w	r3, r3, #2
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	e00d      	b.n	8017df4 <rfalSetBitRate+0x258>
 8017dd8:	4b08      	ldr	r3, [pc, #32]	; (8017dfc <rfalSetBitRate+0x260>)
 8017dda:	78db      	ldrb	r3, [r3, #3]
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	3301      	adds	r3, #1
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	011b      	lsls	r3, r3, #4
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017dee:	f043 0302 	orr.w	r3, r3, #2
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	4618      	mov	r0, r3
 8017df6:	f7f7 fcb1 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017dfa:	e127      	b.n	801804c <rfalSetBitRate+0x4b0>
 8017dfc:	200039e4 	.word	0x200039e4
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 8017e00:	4b95      	ldr	r3, [pc, #596]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e02:	78db      	ldrb	r3, [r3, #3]
 8017e04:	2bec      	cmp	r3, #236	; 0xec
 8017e06:	d00b      	beq.n	8017e20 <rfalSetBitRate+0x284>
 8017e08:	4b93      	ldr	r3, [pc, #588]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e0a:	78db      	ldrb	r3, [r3, #3]
 8017e0c:	2beb      	cmp	r3, #235	; 0xeb
 8017e0e:	d007      	beq.n	8017e20 <rfalSetBitRate+0x284>
 8017e10:	4b91      	ldr	r3, [pc, #580]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e12:	78db      	ldrb	r3, [r3, #3]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d003      	beq.n	8017e20 <rfalSetBitRate+0x284>
 8017e18:	4b8f      	ldr	r3, [pc, #572]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e1a:	78db      	ldrb	r3, [r3, #3]
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d107      	bne.n	8017e30 <rfalSetBitRate+0x294>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8017e20:	4b8d      	ldr	r3, [pc, #564]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e22:	789b      	ldrb	r3, [r3, #2]
 8017e24:	2bed      	cmp	r3, #237	; 0xed
 8017e26:	d005      	beq.n	8017e34 <rfalSetBitRate+0x298>
 8017e28:	4b8b      	ldr	r3, [pc, #556]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e2a:	789b      	ldrb	r3, [r3, #2]
 8017e2c:	2bec      	cmp	r3, #236	; 0xec
 8017e2e:	d001      	beq.n	8017e34 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8017e30:	2307      	movs	r3, #7
 8017e32:	e10c      	b.n	801804e <rfalSetBitRate+0x4b2>
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8017e34:	4b88      	ldr	r3, [pc, #544]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e36:	789b      	ldrb	r3, [r3, #2]
 8017e38:	2bed      	cmp	r3, #237	; 0xed
 8017e3a:	bf0c      	ite	eq
 8017e3c:	2301      	moveq	r3, #1
 8017e3e:	2300      	movne	r3, #0
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8017e44:	4b84      	ldr	r3, [pc, #528]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017e46:	78db      	ldrb	r3, [r3, #3]
 8017e48:	2beb      	cmp	r3, #235	; 0xeb
 8017e4a:	d006      	beq.n	8017e5a <rfalSetBitRate+0x2be>
 8017e4c:	2beb      	cmp	r3, #235	; 0xeb
 8017e4e:	dc0d      	bgt.n	8017e6c <rfalSetBitRate+0x2d0>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d005      	beq.n	8017e60 <rfalSetBitRate+0x2c4>
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	d006      	beq.n	8017e66 <rfalSetBitRate+0x2ca>
 8017e58:	e008      	b.n	8017e6c <rfalSetBitRate+0x2d0>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	613b      	str	r3, [r7, #16]
                            break;
 8017e5e:	e008      	b.n	8017e72 <rfalSetBitRate+0x2d6>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 8017e60:	2302      	movs	r3, #2
 8017e62:	613b      	str	r3, [r7, #16]
                            break;
 8017e64:	e005      	b.n	8017e72 <rfalSetBitRate+0x2d6>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 8017e66:	2303      	movs	r3, #3
 8017e68:	613b      	str	r3, [r7, #16]
                            break;
 8017e6a:	e002      	b.n	8017e72 <rfalSetBitRate+0x2d6>
                        default:
                            config.speedMode = 0;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	613b      	str	r3, [r7, #16]
                            break;
 8017e70:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 8017e72:	f107 0218 	add.w	r2, r7, #24
 8017e76:	f107 030c 	add.w	r3, r7, #12
 8017e7a:	4611      	mov	r1, r2
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7f7 fdc9 	bl	800fa14 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	785b      	ldrb	r3, [r3, #1]
 8017e86:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 8017e88:	69bb      	ldr	r3, [r7, #24]
 8017e8a:	789b      	ldrb	r3, [r3, #2]
 8017e8c:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	78db      	ldrb	r3, [r3, #3]
 8017e92:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	781b      	ldrb	r3, [r3, #0]
 8017e98:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 8017e9a:	f107 0314 	add.w	r3, r7, #20
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7eb fd52 	bl	8003948 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017ea4:	2008      	movs	r0, #8
 8017ea6:	f7f7 fc59 	bl	800f75c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017eaa:	4b6b      	ldr	r3, [pc, #428]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017eac:	789b      	ldrb	r3, [r3, #2]
 8017eae:	2bea      	cmp	r3, #234	; 0xea
 8017eb0:	d90c      	bls.n	8017ecc <rfalSetBitRate+0x330>
 8017eb2:	4b69      	ldr	r3, [pc, #420]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017eb4:	789b      	ldrb	r3, [r3, #2]
 8017eb6:	b29b      	uxth	r3, r3
 8017eb8:	011b      	lsls	r3, r3, #4
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017ec4:	f043 0301 	orr.w	r3, r3, #1
 8017ec8:	b29b      	uxth	r3, r3
 8017eca:	e00d      	b.n	8017ee8 <rfalSetBitRate+0x34c>
 8017ecc:	4b62      	ldr	r3, [pc, #392]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017ece:	789b      	ldrb	r3, [r3, #2]
 8017ed0:	b29b      	uxth	r3, r3
 8017ed2:	3301      	adds	r3, #1
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	011b      	lsls	r3, r3, #4
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	b2db      	uxtb	r3, r3
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017ee2:	f043 0301 	orr.w	r3, r3, #1
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7f7 fc37 	bl	800f75c <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017eee:	4b5a      	ldr	r3, [pc, #360]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017ef0:	78db      	ldrb	r3, [r3, #3]
 8017ef2:	2bea      	cmp	r3, #234	; 0xea
 8017ef4:	d90c      	bls.n	8017f10 <rfalSetBitRate+0x374>
 8017ef6:	4b58      	ldr	r3, [pc, #352]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017ef8:	78db      	ldrb	r3, [r3, #3]
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	011b      	lsls	r3, r3, #4
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017f08:	f043 0302 	orr.w	r3, r3, #2
 8017f0c:	b29b      	uxth	r3, r3
 8017f0e:	e00d      	b.n	8017f2c <rfalSetBitRate+0x390>
 8017f10:	4b51      	ldr	r3, [pc, #324]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f12:	78db      	ldrb	r3, [r3, #3]
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	3301      	adds	r3, #1
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	011b      	lsls	r3, r3, #4
 8017f1c:	b29b      	uxth	r3, r3
 8017f1e:	b2db      	uxtb	r3, r3
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017f26:	f043 0302 	orr.w	r3, r3, #2
 8017f2a:	b29b      	uxth	r3, r3
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f7f7 fc15 	bl	800f75c <rfalSetAnalogConfig>
                break;
 8017f32:	e08b      	b.n	801804c <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8017f34:	2008      	movs	r0, #8
 8017f36:	f7f7 fc11 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017f3a:	4b47      	ldr	r3, [pc, #284]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f3c:	789b      	ldrb	r3, [r3, #2]
 8017f3e:	2bea      	cmp	r3, #234	; 0xea
 8017f40:	d90c      	bls.n	8017f5c <rfalSetBitRate+0x3c0>
 8017f42:	4b45      	ldr	r3, [pc, #276]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f44:	789b      	ldrb	r3, [r3, #2]
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	011b      	lsls	r3, r3, #4
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	b2db      	uxtb	r3, r3
 8017f4e:	b29b      	uxth	r3, r3
 8017f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017f54:	f043 0301 	orr.w	r3, r3, #1
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	e00d      	b.n	8017f78 <rfalSetBitRate+0x3dc>
 8017f5c:	4b3e      	ldr	r3, [pc, #248]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f5e:	789b      	ldrb	r3, [r3, #2]
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	3301      	adds	r3, #1
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	011b      	lsls	r3, r3, #4
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	b29b      	uxth	r3, r3
 8017f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017f72:	f043 0301 	orr.w	r3, r3, #1
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7f7 fbef 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8017f7e:	4b36      	ldr	r3, [pc, #216]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f80:	78db      	ldrb	r3, [r3, #3]
 8017f82:	2bea      	cmp	r3, #234	; 0xea
 8017f84:	d90c      	bls.n	8017fa0 <rfalSetBitRate+0x404>
 8017f86:	4b34      	ldr	r3, [pc, #208]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017f88:	78db      	ldrb	r3, [r3, #3]
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	011b      	lsls	r3, r3, #4
 8017f8e:	b29b      	uxth	r3, r3
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017f98:	f043 0302 	orr.w	r3, r3, #2
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	e00d      	b.n	8017fbc <rfalSetBitRate+0x420>
 8017fa0:	4b2d      	ldr	r3, [pc, #180]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017fa2:	78db      	ldrb	r3, [r3, #3]
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	011b      	lsls	r3, r3, #4
 8017fac:	b29b      	uxth	r3, r3
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017fb6:	f043 0302 	orr.w	r3, r3, #2
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7f7 fbcd 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8017fc2:	e043      	b.n	801804c <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8017fc4:	2009      	movs	r0, #9
 8017fc6:	f7f7 fbc9 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8017fca:	4b23      	ldr	r3, [pc, #140]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017fcc:	789b      	ldrb	r3, [r3, #2]
 8017fce:	2bea      	cmp	r3, #234	; 0xea
 8017fd0:	d90a      	bls.n	8017fe8 <rfalSetBitRate+0x44c>
 8017fd2:	4b21      	ldr	r3, [pc, #132]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017fd4:	789b      	ldrb	r3, [r3, #2]
 8017fd6:	b29b      	uxth	r3, r3
 8017fd8:	011b      	lsls	r3, r3, #4
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	b2db      	uxtb	r3, r3
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	4b1e      	ldr	r3, [pc, #120]	; (801805c <rfalSetBitRate+0x4c0>)
 8017fe2:	4313      	orrs	r3, r2
 8017fe4:	b29b      	uxth	r3, r3
 8017fe6:	e00b      	b.n	8018000 <rfalSetBitRate+0x464>
 8017fe8:	4b1b      	ldr	r3, [pc, #108]	; (8018058 <rfalSetBitRate+0x4bc>)
 8017fea:	789b      	ldrb	r3, [r3, #2]
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	3301      	adds	r3, #1
 8017ff0:	b29b      	uxth	r3, r3
 8017ff2:	011b      	lsls	r3, r3, #4
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	4b18      	ldr	r3, [pc, #96]	; (801805c <rfalSetBitRate+0x4c0>)
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	4618      	mov	r0, r3
 8018002:	f7f7 fbab 	bl	800f75c <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8018006:	4b14      	ldr	r3, [pc, #80]	; (8018058 <rfalSetBitRate+0x4bc>)
 8018008:	78db      	ldrb	r3, [r3, #3]
 801800a:	2bea      	cmp	r3, #234	; 0xea
 801800c:	d90a      	bls.n	8018024 <rfalSetBitRate+0x488>
 801800e:	4b12      	ldr	r3, [pc, #72]	; (8018058 <rfalSetBitRate+0x4bc>)
 8018010:	78db      	ldrb	r3, [r3, #3]
 8018012:	b29b      	uxth	r3, r3
 8018014:	011b      	lsls	r3, r3, #4
 8018016:	b29b      	uxth	r3, r3
 8018018:	b2db      	uxtb	r3, r3
 801801a:	b29a      	uxth	r2, r3
 801801c:	4b10      	ldr	r3, [pc, #64]	; (8018060 <rfalSetBitRate+0x4c4>)
 801801e:	4313      	orrs	r3, r2
 8018020:	b29b      	uxth	r3, r3
 8018022:	e00b      	b.n	801803c <rfalSetBitRate+0x4a0>
 8018024:	4b0c      	ldr	r3, [pc, #48]	; (8018058 <rfalSetBitRate+0x4bc>)
 8018026:	78db      	ldrb	r3, [r3, #3]
 8018028:	b29b      	uxth	r3, r3
 801802a:	3301      	adds	r3, #1
 801802c:	b29b      	uxth	r3, r3
 801802e:	011b      	lsls	r3, r3, #4
 8018030:	b29b      	uxth	r3, r3
 8018032:	b2db      	uxtb	r3, r3
 8018034:	b29a      	uxth	r2, r3
 8018036:	4b0a      	ldr	r3, [pc, #40]	; (8018060 <rfalSetBitRate+0x4c4>)
 8018038:	4313      	orrs	r3, r2
 801803a:	b29b      	uxth	r3, r3
 801803c:	4618      	mov	r0, r3
 801803e:	f7f7 fb8d 	bl	800f75c <rfalSetAnalogConfig>
            break;
 8018042:	e003      	b.n	801804c <rfalSetBitRate+0x4b0>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 8018044:	2321      	movs	r3, #33	; 0x21
 8018046:	e002      	b.n	801804e <rfalSetBitRate+0x4b2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8018048:	230f      	movs	r3, #15
 801804a:	e000      	b.n	801804e <rfalSetBitRate+0x4b2>
    }
    
    return ERR_NONE;
 801804c:	2300      	movs	r3, #0
}
 801804e:	4618      	mov	r0, r3
 8018050:	3720      	adds	r7, #32
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}
 8018056:	bf00      	nop
 8018058:	200039e4 	.word	0x200039e4
 801805c:	ffff8801 	.word	0xffff8801
 8018060:	ffff8802 	.word	0xffff8802

08018064 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 8018064:	b480      	push	{r7}
 8018066:	b083      	sub	sp, #12
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 801806e:	4b0f      	ldr	r3, [pc, #60]	; (80180ac <rfalGetBitRate+0x48>)
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d003      	beq.n	801807e <rfalGetBitRate+0x1a>
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <rfalGetBitRate+0x48>)
 8018078:	785b      	ldrb	r3, [r3, #1]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d101      	bne.n	8018082 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 801807e:	2321      	movs	r3, #33	; 0x21
 8018080:	e00e      	b.n	80180a0 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d003      	beq.n	8018090 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 8018088:	4b08      	ldr	r3, [pc, #32]	; (80180ac <rfalGetBitRate+0x48>)
 801808a:	789a      	ldrb	r2, [r3, #2]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d003      	beq.n	801809e <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 8018096:	4b05      	ldr	r3, [pc, #20]	; (80180ac <rfalGetBitRate+0x48>)
 8018098:	78da      	ldrb	r2, [r3, #3]
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 801809e:	2300      	movs	r3, #0
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	370c      	adds	r7, #12
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bc80      	pop	{r7}
 80180a8:	4770      	bx	lr
 80180aa:	bf00      	nop
 80180ac:	200039e4 	.word	0x200039e4

080180b0 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 80180b0:	b480      	push	{r7}
 80180b2:	b083      	sub	sp, #12
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	4603      	mov	r3, r0
 80180b8:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 80180ba:	4a04      	ldr	r2, [pc, #16]	; (80180cc <rfalSetErrorHandling+0x1c>)
 80180bc:	79fb      	ldrb	r3, [r7, #7]
 80180be:	71d3      	strb	r3, [r2, #7]
}
 80180c0:	bf00      	nop
 80180c2:	370c      	adds	r7, #12
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bc80      	pop	{r7}
 80180c8:	4770      	bx	lr
 80180ca:	bf00      	nop
 80180cc:	200039e4 	.word	0x200039e4

080180d0 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 80180d0:	b480      	push	{r7}
 80180d2:	b083      	sub	sp, #12
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	4a05      	ldr	r2, [pc, #20]	; (80180f0 <rfalSetFDTPoll+0x20>)
 80180dc:	4293      	cmp	r3, r2
 80180de:	bf28      	it	cs
 80180e0:	4613      	movcs	r3, r2
 80180e2:	4a04      	ldr	r2, [pc, #16]	; (80180f4 <rfalSetFDTPoll+0x24>)
 80180e4:	6113      	str	r3, [r2, #16]
}
 80180e6:	bf00      	nop
 80180e8:	370c      	adds	r7, #12
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bc80      	pop	{r7}
 80180ee:	4770      	bx	lr
 80180f0:	0007fff8 	.word	0x0007fff8
 80180f4:	200039e4 	.word	0x200039e4

080180f8 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 80180f8:	b480      	push	{r7}
 80180fa:	b083      	sub	sp, #12
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8018106:	bf28      	it	cs
 8018108:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 801810c:	4a03      	ldr	r2, [pc, #12]	; (801811c <rfalSetFDTListen+0x24>)
 801810e:	60d3      	str	r3, [r2, #12]
}
 8018110:	bf00      	nop
 8018112:	370c      	adds	r7, #12
 8018114:	46bd      	mov	sp, r7
 8018116:	bc80      	pop	{r7}
 8018118:	4770      	bx	lr
 801811a:	bf00      	nop
 801811c:	200039e4 	.word	0x200039e4

08018120 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 8018120:	b480      	push	{r7}
 8018122:	b083      	sub	sp, #12
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	4a05      	ldr	r2, [pc, #20]	; (8018140 <rfalSetGT+0x20>)
 801812c:	4293      	cmp	r3, r2
 801812e:	bf28      	it	cs
 8018130:	4613      	movcs	r3, r2
 8018132:	4a04      	ldr	r2, [pc, #16]	; (8018144 <rfalSetGT+0x24>)
 8018134:	6093      	str	r3, [r2, #8]
}
 8018136:	bf00      	nop
 8018138:	370c      	adds	r7, #12
 801813a:	46bd      	mov	sp, r7
 801813c:	bc80      	pop	{r7}
 801813e:	4770      	bx	lr
 8018140:	040a8bc0 	.word	0x040a8bc0
 8018144:	200039e4 	.word	0x200039e4

08018148 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 8018148:	b580      	push	{r7, lr}
 801814a:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 801814c:	4b09      	ldr	r3, [pc, #36]	; (8018174 <rfalIsGTExpired+0x2c>)
 801814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018150:	2b00      	cmp	r3, #0
 8018152:	d00c      	beq.n	801816e <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8018154:	4b07      	ldr	r3, [pc, #28]	; (8018174 <rfalIsGTExpired+0x2c>)
 8018156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018158:	4618      	mov	r0, r3
 801815a:	f7ec fa3f 	bl	80045dc <timerIsExpired>
 801815e:	4603      	mov	r3, r0
 8018160:	f083 0301 	eor.w	r3, r3, #1
 8018164:	b2db      	uxtb	r3, r3
 8018166:	2b00      	cmp	r3, #0
 8018168:	d001      	beq.n	801816e <rfalIsGTExpired+0x26>
        {
            return false;
 801816a:	2300      	movs	r3, #0
 801816c:	e000      	b.n	8018170 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 801816e:	2301      	movs	r3, #1
}
 8018170:	4618      	mov	r0, r3
 8018172:	bd80      	pop	{r7, pc}
 8018174:	200039e4 	.word	0x200039e4

08018178 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b082      	sub	sp, #8
 801817c:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 801817e:	2280      	movs	r2, #128	; 0x80
 8018180:	2180      	movs	r1, #128	; 0x80
 8018182:	2002      	movs	r0, #2
 8018184:	f7eb fad6 	bl	8003734 <st25r3911CheckReg>
 8018188:	4603      	mov	r3, r0
 801818a:	f083 0301 	eor.w	r3, r3, #1
 801818e:	b2db      	uxtb	r3, r3
 8018190:	2b00      	cmp	r3, #0
 8018192:	d103      	bne.n	801819c <rfalFieldOnAndStartGT+0x24>
 8018194:	4b27      	ldr	r3, [pc, #156]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d101      	bne.n	80181a0 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 801819c:	2321      	movs	r3, #33	; 0x21
 801819e:	e044      	b.n	801822a <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 80181a0:	2300      	movs	r3, #0
 80181a2:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 80181a4:	2002      	movs	r0, #2
 80181a6:	f7f7 fad9 	bl	800f75c <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 80181aa:	2208      	movs	r2, #8
 80181ac:	2108      	movs	r1, #8
 80181ae:	2002      	movs	r0, #2
 80181b0:	f7eb fac0 	bl	8003734 <st25r3911CheckReg>
 80181b4:	4603      	mov	r3, r0
 80181b6:	f083 0301 	eor.w	r3, r3, #1
 80181ba:	b2db      	uxtb	r3, r3
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d106      	bne.n	80181ce <rfalFieldOnAndStartGT+0x56>
 80181c0:	4b1c      	ldr	r3, [pc, #112]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 80181c2:	791b      	ldrb	r3, [r3, #4]
 80181c4:	f083 0301 	eor.w	r3, r3, #1
 80181c8:	b2db      	uxtb	r3, r3
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d016      	beq.n	80181fc <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 80181ce:	2300      	movs	r3, #0
 80181d0:	22ff      	movs	r2, #255	; 0xff
 80181d2:	21ff      	movs	r1, #255	; 0xff
 80181d4:	20ca      	movs	r0, #202	; 0xca
 80181d6:	f7eb fb2d 	bl	8003834 <st25r3911PerformCollisionAvoidance>
 80181da:	4603      	mov	r3, r0
 80181dc:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 80181de:	2208      	movs	r2, #8
 80181e0:	2108      	movs	r1, #8
 80181e2:	2002      	movs	r0, #2
 80181e4:	f7eb faa6 	bl	8003734 <st25r3911CheckReg>
 80181e8:	4603      	mov	r3, r0
 80181ea:	461a      	mov	r2, r3
 80181ec:	4b11      	ldr	r3, [pc, #68]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 80181ee:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 80181f0:	4b10      	ldr	r3, [pc, #64]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 80181f2:	791b      	ldrb	r3, [r3, #4]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d001      	beq.n	80181fc <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 80181f8:	f7eb f8cb 	bl	8003392 <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 80181fc:	4b0d      	ldr	r3, [pc, #52]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 80181fe:	689b      	ldr	r3, [r3, #8]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d011      	beq.n	8018228 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 8018204:	4b0b      	ldr	r3, [pc, #44]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 8018206:	689b      	ldr	r3, [r3, #8]
 8018208:	f243 42f8 	movw	r2, #13560	; 0x34f8
 801820c:	4293      	cmp	r3, r2
 801820e:	bf38      	it	cc
 8018210:	4613      	movcc	r3, r2
 8018212:	4a09      	ldr	r2, [pc, #36]	; (8018238 <rfalFieldOnAndStartGT+0xc0>)
 8018214:	fba2 2303 	umull	r2, r3, r2, r3
 8018218:	0b1b      	lsrs	r3, r3, #12
 801821a:	b29b      	uxth	r3, r3
 801821c:	4618      	mov	r0, r3
 801821e:	f7ec f9cf 	bl	80045c0 <timerCalculateTimer>
 8018222:	4603      	mov	r3, r0
 8018224:	4a03      	ldr	r2, [pc, #12]	; (8018234 <rfalFieldOnAndStartGT+0xbc>)
 8018226:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 8018228:	88fb      	ldrh	r3, [r7, #6]
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	200039e4 	.word	0x200039e4
 8018238:	4d542005 	.word	0x4d542005

0801823c <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 801823c:	b580      	push	{r7, lr}
 801823e:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8018240:	4b08      	ldr	r3, [pc, #32]	; (8018264 <rfalFieldOff+0x28>)
 8018242:	7d1b      	ldrb	r3, [r3, #20]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d001      	beq.n	801824c <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8018248:	f000 faca 	bl	80187e0 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 801824c:	f7eb f8a9 	bl	80033a2 <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8018250:	2003      	movs	r0, #3
 8018252:	f7f7 fa83 	bl	800f75c <rfalSetAnalogConfig>
    gRFAL.field = false;
 8018256:	4b03      	ldr	r3, [pc, #12]	; (8018264 <rfalFieldOff+0x28>)
 8018258:	2200      	movs	r2, #0
 801825a:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 801825c:	2300      	movs	r3, #0
}
 801825e:	4618      	mov	r0, r3
 8018260:	bd80      	pop	{r7, pc}
 8018262:	bf00      	nop
 8018264:	200039e4 	.word	0x200039e4

08018268 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8018268:	b5b0      	push	{r4, r5, r7, lr}
 801826a:	b084      	sub	sp, #16
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d101      	bne.n	801827a <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 8018276:	2307      	movs	r3, #7
 8018278:	e11c      	b.n	80184b4 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 801827a:	4b90      	ldr	r3, [pc, #576]	; (80184bc <rfalStartTransceive+0x254>)
 801827c:	781b      	ldrb	r3, [r3, #0]
 801827e:	2b01      	cmp	r3, #1
 8018280:	f240 8117 	bls.w	80184b2 <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 8018284:	2208      	movs	r2, #8
 8018286:	2108      	movs	r1, #8
 8018288:	2002      	movs	r0, #2
 801828a:	f7eb fa53 	bl	8003734 <st25r3911CheckReg>
 801828e:	4603      	mov	r3, r0
 8018290:	f083 0301 	eor.w	r3, r3, #1
 8018294:	b2db      	uxtb	r3, r3
 8018296:	2b00      	cmp	r3, #0
 8018298:	d011      	beq.n	80182be <rfalStartTransceive+0x56>
 801829a:	4b88      	ldr	r3, [pc, #544]	; (80184bc <rfalStartTransceive+0x254>)
 801829c:	785b      	ldrb	r3, [r3, #1]
 801829e:	2b0a      	cmp	r3, #10
 80182a0:	d00d      	beq.n	80182be <rfalStartTransceive+0x56>
 80182a2:	4b86      	ldr	r3, [pc, #536]	; (80184bc <rfalStartTransceive+0x254>)
 80182a4:	785b      	ldrb	r3, [r3, #1]
 80182a6:	2b0b      	cmp	r3, #11
 80182a8:	d009      	beq.n	80182be <rfalStartTransceive+0x56>
 80182aa:	4b84      	ldr	r3, [pc, #528]	; (80184bc <rfalStartTransceive+0x254>)
 80182ac:	785b      	ldrb	r3, [r3, #1]
 80182ae:	2b0c      	cmp	r3, #12
 80182b0:	d005      	beq.n	80182be <rfalStartTransceive+0x56>
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d001      	beq.n	80182be <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 80182ba:	2321      	movs	r3, #33	; 0x21
 80182bc:	e0fa      	b.n	80184b4 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 80182be:	4b7f      	ldr	r3, [pc, #508]	; (80184bc <rfalStartTransceive+0x254>)
 80182c0:	687a      	ldr	r2, [r7, #4]
 80182c2:	f103 041c 	add.w	r4, r3, #28
 80182c6:	4615      	mov	r5, r2
 80182c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80182d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 80182d4:	4b79      	ldr	r3, [pc, #484]	; (80184bc <rfalStartTransceive+0x254>)
 80182d6:	68db      	ldr	r3, [r3, #12]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d031      	beq.n	8018340 <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 80182dc:	2340      	movs	r3, #64	; 0x40
 80182de:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 80182e0:	4b76      	ldr	r3, [pc, #472]	; (80184bc <rfalStartTransceive+0x254>)
 80182e2:	785b      	ldrb	r3, [r3, #1]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d103      	bne.n	80182f0 <rfalStartTransceive+0x88>
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80182ee:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 80182f0:	4b72      	ldr	r3, [pc, #456]	; (80184bc <rfalStartTransceive+0x254>)
 80182f2:	785b      	ldrb	r3, [r3, #1]
 80182f4:	2b02      	cmp	r3, #2
 80182f6:	d103      	bne.n	8018300 <rfalStartTransceive+0x98>
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80182fe:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8018300:	4b6e      	ldr	r3, [pc, #440]	; (80184bc <rfalStartTransceive+0x254>)
 8018302:	785b      	ldrb	r3, [r3, #1]
 8018304:	2b03      	cmp	r3, #3
 8018306:	d103      	bne.n	8018310 <rfalStartTransceive+0xa8>
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801830e:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8018310:	4b6a      	ldr	r3, [pc, #424]	; (80184bc <rfalStartTransceive+0x254>)
 8018312:	785b      	ldrb	r3, [r3, #1]
 8018314:	2b07      	cmp	r3, #7
 8018316:	d102      	bne.n	801831e <rfalStartTransceive+0xb6>
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	3380      	adds	r3, #128	; 0x80
 801831c:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 801831e:	4b67      	ldr	r3, [pc, #412]	; (80184bc <rfalStartTransceive+0x254>)
 8018320:	68db      	ldr	r3, [r3, #12]
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	429a      	cmp	r2, r3
 8018326:	d806      	bhi.n	8018336 <rfalStartTransceive+0xce>
 8018328:	4b64      	ldr	r3, [pc, #400]	; (80184bc <rfalStartTransceive+0x254>)
 801832a:	68da      	ldr	r2, [r3, #12]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	1ad3      	subs	r3, r2, r3
 8018330:	099b      	lsrs	r3, r3, #6
 8018332:	b2db      	uxtb	r3, r3
 8018334:	e000      	b.n	8018338 <rfalStartTransceive+0xd0>
 8018336:	2304      	movs	r3, #4
 8018338:	4619      	mov	r1, r3
 801833a:	200e      	movs	r0, #14
 801833c:	f7eb fd34 	bl	8003da8 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8018340:	4b5e      	ldr	r3, [pc, #376]	; (80184bc <rfalStartTransceive+0x254>)
 8018342:	785b      	ldrb	r3, [r3, #1]
 8018344:	2b09      	cmp	r3, #9
 8018346:	d053      	beq.n	80183f0 <rfalStartTransceive+0x188>
 8018348:	4b5c      	ldr	r3, [pc, #368]	; (80184bc <rfalStartTransceive+0x254>)
 801834a:	785b      	ldrb	r3, [r3, #1]
 801834c:	2b0d      	cmp	r3, #13
 801834e:	d04f      	beq.n	80183f0 <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8018350:	4b5a      	ldr	r3, [pc, #360]	; (80184bc <rfalStartTransceive+0x254>)
 8018352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018358:	d046      	beq.n	80183e8 <rfalStartTransceive+0x180>
 801835a:	4b58      	ldr	r3, [pc, #352]	; (80184bc <rfalStartTransceive+0x254>)
 801835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801835e:	2b00      	cmp	r3, #0
 8018360:	d042      	beq.n	80183e8 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 8018362:	4b56      	ldr	r3, [pc, #344]	; (80184bc <rfalStartTransceive+0x254>)
 8018364:	68da      	ldr	r2, [r3, #12]
 8018366:	4b55      	ldr	r3, [pc, #340]	; (80184bc <rfalStartTransceive+0x254>)
 8018368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801836a:	429a      	cmp	r2, r3
 801836c:	d301      	bcc.n	8018372 <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 801836e:	2307      	movs	r3, #7
 8018370:	e0a0      	b.n	80184b4 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 8018372:	2340      	movs	r3, #64	; 0x40
 8018374:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8018376:	4b51      	ldr	r3, [pc, #324]	; (80184bc <rfalStartTransceive+0x254>)
 8018378:	785b      	ldrb	r3, [r3, #1]
 801837a:	2b01      	cmp	r3, #1
 801837c:	d103      	bne.n	8018386 <rfalStartTransceive+0x11e>
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018384:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8018386:	4b4d      	ldr	r3, [pc, #308]	; (80184bc <rfalStartTransceive+0x254>)
 8018388:	785b      	ldrb	r3, [r3, #1]
 801838a:	2b02      	cmp	r3, #2
 801838c:	d103      	bne.n	8018396 <rfalStartTransceive+0x12e>
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018394:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 8018396:	4b49      	ldr	r3, [pc, #292]	; (80184bc <rfalStartTransceive+0x254>)
 8018398:	785b      	ldrb	r3, [r3, #1]
 801839a:	2b03      	cmp	r3, #3
 801839c:	d103      	bne.n	80183a6 <rfalStartTransceive+0x13e>
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80183a4:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 80183a6:	4b45      	ldr	r3, [pc, #276]	; (80184bc <rfalStartTransceive+0x254>)
 80183a8:	785b      	ldrb	r3, [r3, #1]
 80183aa:	2b06      	cmp	r3, #6
 80183ac:	d10b      	bne.n	80183c6 <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 80183ae:	4b43      	ldr	r3, [pc, #268]	; (80184bc <rfalStartTransceive+0x254>)
 80183b0:	789b      	ldrb	r3, [r3, #2]
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	d102      	bne.n	80183bc <rfalStartTransceive+0x154>
 80183b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183ba:	e001      	b.n	80183c0 <rfalStartTransceive+0x158>
 80183bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80183c0:	68fa      	ldr	r2, [r7, #12]
 80183c2:	4413      	add	r3, r2
 80183c4:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 80183c6:	4b3d      	ldr	r3, [pc, #244]	; (80184bc <rfalStartTransceive+0x254>)
 80183c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	4413      	add	r3, r2
 80183ce:	4a3c      	ldr	r2, [pc, #240]	; (80184c0 <rfalStartTransceive+0x258>)
 80183d0:	4293      	cmp	r3, r2
 80183d2:	bf28      	it	cs
 80183d4:	4613      	movcs	r3, r2
 80183d6:	4a39      	ldr	r2, [pc, #228]	; (80184bc <rfalStartTransceive+0x254>)
 80183d8:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80183da:	4b38      	ldr	r3, [pc, #224]	; (80184bc <rfalStartTransceive+0x254>)
 80183dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183de:	099b      	lsrs	r3, r3, #6
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7eb f9e9 	bl	80037b8 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80183e6:	e006      	b.n	80183f6 <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 80183e8:	2000      	movs	r0, #0
 80183ea:	f7eb f9e5 	bl	80037b8 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80183ee:	e002      	b.n	80183f6 <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 80183f0:	2080      	movs	r0, #128	; 0x80
 80183f2:	f7eb f9e1 	bl	80037b8 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 80183f6:	4b31      	ldr	r3, [pc, #196]	; (80184bc <rfalStartTransceive+0x254>)
 80183f8:	2203      	movs	r2, #3
 80183fa:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80183fc:	4b2f      	ldr	r3, [pc, #188]	; (80184bc <rfalStartTransceive+0x254>)
 80183fe:	220b      	movs	r2, #11
 8018400:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 8018402:	4b2e      	ldr	r3, [pc, #184]	; (80184bc <rfalStartTransceive+0x254>)
 8018404:	2202      	movs	r2, #2
 8018406:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 8018408:	4b2c      	ldr	r3, [pc, #176]	; (80184bc <rfalStartTransceive+0x254>)
 801840a:	2200      	movs	r2, #0
 801840c:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801840e:	4b2b      	ldr	r3, [pc, #172]	; (80184bc <rfalStartTransceive+0x254>)
 8018410:	785b      	ldrb	r3, [r3, #1]
 8018412:	2b07      	cmp	r3, #7
 8018414:	d003      	beq.n	801841e <rfalStartTransceive+0x1b6>
 8018416:	4b29      	ldr	r3, [pc, #164]	; (80184bc <rfalStartTransceive+0x254>)
 8018418:	785b      	ldrb	r3, [r3, #1]
 801841a:	2b08      	cmp	r3, #8
 801841c:	d128      	bne.n	8018470 <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 801841e:	4a27      	ldr	r2, [pc, #156]	; (80184bc <rfalStartTransceive+0x254>)
 8018420:	4b26      	ldr	r3, [pc, #152]	; (80184bc <rfalStartTransceive+0x254>)
 8018422:	f502 7473 	add.w	r4, r2, #972	; 0x3cc
 8018426:	f103 051c 	add.w	r5, r3, #28
 801842a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801842c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801842e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018432:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8018436:	4b21      	ldr	r3, [pc, #132]	; (80184bc <rfalStartTransceive+0x254>)
 8018438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801843c:	2b00      	cmp	r3, #0
 801843e:	d001      	beq.n	8018444 <rfalStartTransceive+0x1dc>
 8018440:	4b20      	ldr	r3, [pc, #128]	; (80184c4 <rfalStartTransceive+0x25c>)
 8018442:	e000      	b.n	8018446 <rfalStartTransceive+0x1de>
 8018444:	2300      	movs	r3, #0
 8018446:	4a1d      	ldr	r2, [pc, #116]	; (80184bc <rfalStartTransceive+0x254>)
 8018448:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 801844a:	4b1c      	ldr	r3, [pc, #112]	; (80184bc <rfalStartTransceive+0x254>)
 801844c:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8018450:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8018452:	4b1a      	ldr	r3, [pc, #104]	; (80184bc <rfalStartTransceive+0x254>)
 8018454:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018458:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 801845c:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8018460:	4a16      	ldr	r2, [pc, #88]	; (80184bc <rfalStartTransceive+0x254>)
 8018462:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8018464:	4b15      	ldr	r3, [pc, #84]	; (80184bc <rfalStartTransceive+0x254>)
 8018466:	69db      	ldr	r3, [r3, #28]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d001      	beq.n	8018470 <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 801846c:	2300      	movs	r3, #0
 801846e:	e021      	b.n	80184b4 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8018470:	4b12      	ldr	r3, [pc, #72]	; (80184bc <rfalStartTransceive+0x254>)
 8018472:	69db      	ldr	r3, [r3, #28]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d003      	beq.n	8018480 <rfalStartTransceive+0x218>
 8018478:	4b10      	ldr	r3, [pc, #64]	; (80184bc <rfalStartTransceive+0x254>)
 801847a:	8c1b      	ldrh	r3, [r3, #32]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d116      	bne.n	80184ae <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8018480:	f000 f9c4 	bl	801880c <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8018484:	4b0d      	ldr	r3, [pc, #52]	; (80184bc <rfalStartTransceive+0x254>)
 8018486:	785b      	ldrb	r3, [r3, #1]
 8018488:	2b09      	cmp	r3, #9
 801848a:	d003      	beq.n	8018494 <rfalStartTransceive+0x22c>
 801848c:	4b0b      	ldr	r3, [pc, #44]	; (80184bc <rfalStartTransceive+0x254>)
 801848e:	785b      	ldrb	r3, [r3, #1]
 8018490:	2b0d      	cmp	r3, #13
 8018492:	d103      	bne.n	801849c <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 8018494:	2108      	movs	r1, #8
 8018496:	2002      	movs	r0, #2
 8018498:	f7eb fcd2 	bl	8003e40 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801849c:	20d1      	movs	r0, #209	; 0xd1
 801849e:	f7eb fe11 	bl	80040c4 <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 80184a2:	20e3      	movs	r0, #227	; 0xe3
 80184a4:	f7eb fe0e 	bl	80040c4 <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80184a8:	4b04      	ldr	r3, [pc, #16]	; (80184bc <rfalStartTransceive+0x254>)
 80184aa:	2251      	movs	r2, #81	; 0x51
 80184ac:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 80184ae:	2300      	movs	r3, #0
 80184b0:	e000      	b.n	80184b4 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 80184b2:	2321      	movs	r3, #33	; 0x21
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bdb0      	pop	{r4, r5, r7, pc}
 80184bc:	200039e4 	.word	0x200039e4
 80184c0:	0ffff000 	.word	0x0ffff000
 80184c4:	20003ba4 	.word	0x20003ba4

080184c8 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 80184c8:	b480      	push	{r7}
 80184ca:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 80184cc:	4b08      	ldr	r3, [pc, #32]	; (80184f0 <rfalIsTransceiveInTx+0x28>)
 80184ce:	7d1b      	ldrb	r3, [r3, #20]
 80184d0:	2b0a      	cmp	r3, #10
 80184d2:	d905      	bls.n	80184e0 <rfalIsTransceiveInTx+0x18>
 80184d4:	4b06      	ldr	r3, [pc, #24]	; (80184f0 <rfalIsTransceiveInTx+0x28>)
 80184d6:	7d1b      	ldrb	r3, [r3, #20]
 80184d8:	2b50      	cmp	r3, #80	; 0x50
 80184da:	d801      	bhi.n	80184e0 <rfalIsTransceiveInTx+0x18>
 80184dc:	2301      	movs	r3, #1
 80184de:	e000      	b.n	80184e2 <rfalIsTransceiveInTx+0x1a>
 80184e0:	2300      	movs	r3, #0
 80184e2:	f003 0301 	and.w	r3, r3, #1
 80184e6:	b2db      	uxtb	r3, r3
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bc80      	pop	{r7}
 80184ee:	4770      	bx	lr
 80184f0:	200039e4 	.word	0x200039e4

080184f4 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 80184f4:	b480      	push	{r7}
 80184f6:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 80184f8:	4b05      	ldr	r3, [pc, #20]	; (8018510 <rfalIsTransceiveInRx+0x1c>)
 80184fa:	7d1b      	ldrb	r3, [r3, #20]
 80184fc:	2b50      	cmp	r3, #80	; 0x50
 80184fe:	bf8c      	ite	hi
 8018500:	2301      	movhi	r3, #1
 8018502:	2300      	movls	r3, #0
 8018504:	b2db      	uxtb	r3, r3
}
 8018506:	4618      	mov	r0, r3
 8018508:	46bd      	mov	sp, r7
 801850a:	bc80      	pop	{r7}
 801850c:	4770      	bx	lr
 801850e:	bf00      	nop
 8018510:	200039e4 	.word	0x200039e4

08018514 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b08c      	sub	sp, #48	; 0x30
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	607a      	str	r2, [r7, #4]
 801851e:	461a      	mov	r2, r3
 8018520:	460b      	mov	r3, r1
 8018522:	817b      	strh	r3, [r7, #10]
 8018524:	4613      	mov	r3, r2
 8018526:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	613b      	str	r3, [r7, #16]
 801852c:	897b      	ldrh	r3, [r7, #10]
 801852e:	00db      	lsls	r3, r3, #3
 8018530:	b29b      	uxth	r3, r3
 8018532:	82bb      	strh	r3, [r7, #20]
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	61bb      	str	r3, [r7, #24]
 8018538:	893b      	ldrh	r3, [r7, #8]
 801853a:	00db      	lsls	r3, r3, #3
 801853c:	b29b      	uxth	r3, r3
 801853e:	83bb      	strh	r3, [r7, #28]
 8018540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018542:	623b      	str	r3, [r7, #32]
 8018544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018546:	627b      	str	r3, [r7, #36]	; 0x24
 8018548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801854a:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 801854c:	f107 0310 	add.w	r3, r7, #16
 8018550:	4618      	mov	r0, r3
 8018552:	f7ff fe89 	bl	8018268 <rfalStartTransceive>
 8018556:	4603      	mov	r3, r0
 8018558:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801855a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801855c:	2b00      	cmp	r3, #0
 801855e:	d001      	beq.n	8018564 <rfalTransceiveBlockingTx+0x50>
 8018560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018562:	e002      	b.n	801856a <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 8018564:	f000 f805 	bl	8018572 <rfalTransceiveRunBlockingTx>
 8018568:	4603      	mov	r3, r0
}
 801856a:	4618      	mov	r0, r3
 801856c:	3730      	adds	r7, #48	; 0x30
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}

08018572 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 8018572:	b580      	push	{r7, lr}
 8018574:	b082      	sub	sp, #8
 8018576:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 8018578:	f000 f892 	bl	80186a0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 801857c:	f000 f880 	bl	8018680 <rfalGetTransceiveStatus>
 8018580:	4603      	mov	r3, r0
 8018582:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 8018584:	f7ff ffa0 	bl	80184c8 <rfalIsTransceiveInTx>
 8018588:	4603      	mov	r3, r0
 801858a:	2b00      	cmp	r3, #0
 801858c:	d002      	beq.n	8018594 <rfalTransceiveRunBlockingTx+0x22>
 801858e:	88fb      	ldrh	r3, [r7, #6]
 8018590:	2b02      	cmp	r3, #2
 8018592:	d0f1      	beq.n	8018578 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 8018594:	f7ff ffae 	bl	80184f4 <rfalIsTransceiveInRx>
 8018598:	4603      	mov	r3, r0
 801859a:	2b00      	cmp	r3, #0
 801859c:	d001      	beq.n	80185a2 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 801859e:	2300      	movs	r3, #0
 80185a0:	e000      	b.n	80185a4 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 80185a2:	88fb      	ldrh	r3, [r7, #6]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3708      	adds	r7, #8
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b082      	sub	sp, #8
 80185b0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 80185b2:	f000 f875 	bl	80186a0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 80185b6:	f000 f863 	bl	8018680 <rfalGetTransceiveStatus>
 80185ba:	4603      	mov	r3, r0
 80185bc:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 80185be:	f7ff ff99 	bl	80184f4 <rfalIsTransceiveInRx>
 80185c2:	4603      	mov	r3, r0
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d002      	beq.n	80185ce <rfalTransceiveBlockingRx+0x22>
 80185c8:	88fb      	ldrh	r3, [r7, #6]
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	d0f1      	beq.n	80185b2 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 80185ce:	88fb      	ldrh	r3, [r7, #6]
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b08a      	sub	sp, #40	; 0x28
 80185dc:	af04      	add	r7, sp, #16
 80185de:	60f8      	str	r0, [r7, #12]
 80185e0:	607a      	str	r2, [r7, #4]
 80185e2:	461a      	mov	r2, r3
 80185e4:	460b      	mov	r3, r1
 80185e6:	817b      	strh	r3, [r7, #10]
 80185e8:	4613      	mov	r3, r2
 80185ea:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 80185ec:	893a      	ldrh	r2, [r7, #8]
 80185ee:	8979      	ldrh	r1, [r7, #10]
 80185f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f2:	9302      	str	r3, [sp, #8]
 80185f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f6:	9301      	str	r3, [sp, #4]
 80185f8:	6a3b      	ldr	r3, [r7, #32]
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	4613      	mov	r3, r2
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	68f8      	ldr	r0, [r7, #12]
 8018602:	f7ff ff87 	bl	8018514 <rfalTransceiveBlockingTx>
 8018606:	4603      	mov	r3, r0
 8018608:	82fb      	strh	r3, [r7, #22]
 801860a:	8afb      	ldrh	r3, [r7, #22]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d001      	beq.n	8018614 <rfalTransceiveBlockingTxRx+0x3c>
 8018610:	8afb      	ldrh	r3, [r7, #22]
 8018612:	e00e      	b.n	8018632 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 8018614:	f7ff ffca 	bl	80185ac <rfalTransceiveBlockingRx>
 8018618:	4603      	mov	r3, r0
 801861a:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 801861c:	6a3b      	ldr	r3, [r7, #32]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d006      	beq.n	8018630 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 8018622:	6a3b      	ldr	r3, [r7, #32]
 8018624:	881b      	ldrh	r3, [r3, #0]
 8018626:	3307      	adds	r3, #7
 8018628:	08db      	lsrs	r3, r3, #3
 801862a:	b29a      	uxth	r2, r3
 801862c:	6a3b      	ldr	r3, [r7, #32]
 801862e:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 8018630:	8afb      	ldrh	r3, [r7, #22]
}
 8018632:	4618      	mov	r0, r3
 8018634:	3718      	adds	r7, #24
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
	...

0801863c <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 801863c:	b580      	push	{r7, lr}
 801863e:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 8018640:	4b0e      	ldr	r3, [pc, #56]	; (801867c <rfalRunTransceiveWorker+0x40>)
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	2b03      	cmp	r3, #3
 8018646:	d115      	bne.n	8018674 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8018648:	f7ff ff3e 	bl	80184c8 <rfalIsTransceiveInTx>
 801864c:	4603      	mov	r3, r0
 801864e:	2b00      	cmp	r3, #0
 8018650:	d005      	beq.n	801865e <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 8018652:	f000 f971 	bl	8018938 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 8018656:	f000 f813 	bl	8018680 <rfalGetTransceiveStatus>
 801865a:	4603      	mov	r3, r0
 801865c:	e00b      	b.n	8018676 <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 801865e:	f7ff ff49 	bl	80184f4 <rfalIsTransceiveInRx>
 8018662:	4603      	mov	r3, r0
 8018664:	2b00      	cmp	r3, #0
 8018666:	d005      	beq.n	8018674 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 8018668:	f000 fbb2 	bl	8018dd0 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 801866c:	f000 f808 	bl	8018680 <rfalGetTransceiveStatus>
 8018670:	4603      	mov	r3, r0
 8018672:	e000      	b.n	8018676 <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 8018674:	2321      	movs	r3, #33	; 0x21
}
 8018676:	4618      	mov	r0, r3
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	200039e4 	.word	0x200039e4

08018680 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 8018680:	b480      	push	{r7}
 8018682:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 8018684:	4b05      	ldr	r3, [pc, #20]	; (801869c <rfalGetTransceiveStatus+0x1c>)
 8018686:	7d1b      	ldrb	r3, [r3, #20]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d102      	bne.n	8018692 <rfalGetTransceiveStatus+0x12>
 801868c:	4b03      	ldr	r3, [pc, #12]	; (801869c <rfalGetTransceiveStatus+0x1c>)
 801868e:	8adb      	ldrh	r3, [r3, #22]
 8018690:	e000      	b.n	8018694 <rfalGetTransceiveStatus+0x14>
 8018692:	2302      	movs	r3, #2
}
 8018694:	4618      	mov	r0, r3
 8018696:	46bd      	mov	sp, r7
 8018698:	bc80      	pop	{r7}
 801869a:	4770      	bx	lr
 801869c:	200039e4 	.word	0x200039e4

080186a0 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 80186a4:	4b0b      	ldr	r3, [pc, #44]	; (80186d4 <rfalWorker+0x34>)
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	2b05      	cmp	r3, #5
 80186aa:	d00c      	beq.n	80186c6 <rfalWorker+0x26>
 80186ac:	2b05      	cmp	r3, #5
 80186ae:	dc0d      	bgt.n	80186cc <rfalWorker+0x2c>
 80186b0:	2b03      	cmp	r3, #3
 80186b2:	d002      	beq.n	80186ba <rfalWorker+0x1a>
 80186b4:	2b04      	cmp	r3, #4
 80186b6:	d003      	beq.n	80186c0 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 80186b8:	e008      	b.n	80186cc <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 80186ba:	f7ff ffbf 	bl	801863c <rfalRunTransceiveWorker>
            break;
 80186be:	e006      	b.n	80186ce <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 80186c0:	f001 fb0e 	bl	8019ce0 <rfalRunListenModeWorker>
            break;
 80186c4:	e003      	b.n	80186ce <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 80186c6:	f001 ff0f 	bl	801a4e8 <rfalRunWakeUpModeWorker>
            break;
 80186ca:	e000      	b.n	80186ce <rfalWorker+0x2e>
            break;
 80186cc:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 80186ce:	bf00      	nop
 80186d0:	bd80      	pop	{r7, pc}
 80186d2:	bf00      	nop
 80186d4:	200039e4 	.word	0x200039e4

080186d8 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 80186de:	f24d 13c2 	movw	r3, #53698	; 0xd1c2
 80186e2:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 80186e4:	f000 fedc 	bl	80194a0 <rfalFIFOStatusGetNumBytes>
 80186e8:	4603      	mov	r3, r0
 80186ea:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80186ec:	4b3b      	ldr	r3, [pc, #236]	; (80187dc <rfalErrorHandling+0x104>)
 80186ee:	79db      	ldrb	r3, [r3, #7]
 80186f0:	2b02      	cmp	r3, #2
 80186f2:	d141      	bne.n	8018778 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 80186f4:	f000 fee0 	bl	80194b8 <rfalFIFOStatusIsIncompleteByte>
 80186f8:	4603      	mov	r3, r0
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d104      	bne.n	8018708 <rfalErrorHandling+0x30>
 80186fe:	f000 feed 	bl	80194dc <rfalFIFOStatusIsMissingPar>
 8018702:	4603      	mov	r3, r0
 8018704:	2b00      	cmp	r3, #0
 8018706:	d001      	beq.n	801870c <rfalErrorHandling+0x34>
 8018708:	2301      	movs	r3, #1
 801870a:	e000      	b.n	801870e <rfalErrorHandling+0x36>
 801870c:	2300      	movs	r3, #0
 801870e:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 8018710:	79fb      	ldrb	r3, [r7, #7]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d005      	beq.n	8018722 <rfalErrorHandling+0x4a>
 8018716:	79bb      	ldrb	r3, [r7, #6]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d002      	beq.n	8018722 <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 801871c:	79fb      	ldrb	r3, [r7, #7]
 801871e:	3b01      	subs	r3, #1
 8018720:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 8018722:	4b2e      	ldr	r3, [pc, #184]	; (80187dc <rfalErrorHandling+0x104>)
 8018724:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018726:	461a      	mov	r2, r3
 8018728:	79fb      	ldrb	r3, [r7, #7]
 801872a:	4413      	add	r3, r2
 801872c:	2b03      	cmp	r3, #3
 801872e:	dc51      	bgt.n	80187d4 <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8018730:	4b2a      	ldr	r3, [pc, #168]	; (80187dc <rfalErrorHandling+0x104>)
 8018732:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 8018734:	2b1d      	cmp	r3, #29
 8018736:	d00e      	beq.n	8018756 <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8018738:	4b28      	ldr	r3, [pc, #160]	; (80187dc <rfalErrorHandling+0x104>)
 801873a:	8adb      	ldrh	r3, [r3, #22]
 801873c:	2b09      	cmp	r3, #9
 801873e:	d00a      	beq.n	8018756 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8018740:	4b26      	ldr	r3, [pc, #152]	; (80187dc <rfalErrorHandling+0x104>)
 8018742:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 8018744:	2b1b      	cmp	r3, #27
 8018746:	d006      	beq.n	8018756 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 8018748:	4b24      	ldr	r3, [pc, #144]	; (80187dc <rfalErrorHandling+0x104>)
 801874a:	8adb      	ldrh	r3, [r3, #22]
 801874c:	2b15      	cmp	r3, #21
 801874e:	d002      	beq.n	8018756 <rfalErrorHandling+0x7e>
 8018750:	79bb      	ldrb	r3, [r7, #6]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d03e      	beq.n	80187d4 <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 8018756:	1d3b      	adds	r3, r7, #4
 8018758:	2102      	movs	r1, #2
 801875a:	4618      	mov	r0, r3
 801875c:	f7eb fd04 	bl	8004168 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 8018760:	f000 fe92 	bl	8019488 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 8018764:	4b1d      	ldr	r3, [pc, #116]	; (80187dc <rfalErrorHandling+0x104>)
 8018766:	2200      	movs	r2, #0
 8018768:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 801876a:	4b1c      	ldr	r3, [pc, #112]	; (80187dc <rfalErrorHandling+0x104>)
 801876c:	2202      	movs	r2, #2
 801876e:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8018770:	4b1a      	ldr	r3, [pc, #104]	; (80187dc <rfalErrorHandling+0x104>)
 8018772:	2253      	movs	r2, #83	; 0x53
 8018774:	751a      	strb	r2, [r3, #20]
 8018776:	e02e      	b.n	80187d6 <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8018778:	4b18      	ldr	r3, [pc, #96]	; (80187dc <rfalErrorHandling+0x104>)
 801877a:	785b      	ldrb	r3, [r3, #1]
 801877c:	2b01      	cmp	r3, #1
 801877e:	d12a      	bne.n	80187d6 <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 8018780:	4b16      	ldr	r3, [pc, #88]	; (80187dc <rfalErrorHandling+0x104>)
 8018782:	8adb      	ldrh	r3, [r3, #22]
 8018784:	2b1b      	cmp	r3, #27
 8018786:	d003      	beq.n	8018790 <rfalErrorHandling+0xb8>
 8018788:	4b14      	ldr	r3, [pc, #80]	; (80187dc <rfalErrorHandling+0x104>)
 801878a:	8adb      	ldrh	r3, [r3, #22]
 801878c:	2b15      	cmp	r3, #21
 801878e:	d122      	bne.n	80187d6 <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 8018790:	f000 fe92 	bl	80194b8 <rfalFIFOStatusIsIncompleteByte>
 8018794:	4603      	mov	r3, r0
 8018796:	2b00      	cmp	r3, #0
 8018798:	d01d      	beq.n	80187d6 <rfalErrorHandling+0xfe>
 801879a:	79fb      	ldrb	r3, [r7, #7]
 801879c:	2b01      	cmp	r3, #1
 801879e:	d11a      	bne.n	80187d6 <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 80187a0:	4b0e      	ldr	r3, [pc, #56]	; (80187dc <rfalErrorHandling+0x104>)
 80187a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a4:	79fa      	ldrb	r2, [r7, #7]
 80187a6:	4611      	mov	r1, r2
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7eb fc3f 	bl	800402c <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 80187ae:	4b0b      	ldr	r3, [pc, #44]	; (80187dc <rfalErrorHandling+0x104>)
 80187b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d007      	beq.n	80187c6 <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 80187b6:	f000 fea3 	bl	8019500 <rfalFIFOGetNumIncompleteBits>
 80187ba:	4603      	mov	r3, r0
 80187bc:	461a      	mov	r2, r3
 80187be:	4b07      	ldr	r3, [pc, #28]	; (80187dc <rfalErrorHandling+0x104>)
 80187c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187c2:	b292      	uxth	r2, r2
 80187c4:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80187c6:	4b05      	ldr	r3, [pc, #20]	; (80187dc <rfalErrorHandling+0x104>)
 80187c8:	2228      	movs	r2, #40	; 0x28
 80187ca:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80187cc:	4b03      	ldr	r3, [pc, #12]	; (80187dc <rfalErrorHandling+0x104>)
 80187ce:	225a      	movs	r2, #90	; 0x5a
 80187d0:	751a      	strb	r2, [r3, #20]
 80187d2:	e000      	b.n	80187d6 <rfalErrorHandling+0xfe>
        return;
 80187d4:	bf00      	nop
            }
        }
    }
    
}
 80187d6:	3708      	adds	r7, #8
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	200039e4 	.word	0x200039e4

080187e0 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 80187e4:	21e0      	movs	r1, #224	; 0xe0
 80187e6:	2005      	movs	r0, #5
 80187e8:	f7eb fb2a 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80187ec:	2110      	movs	r1, #16
 80187ee:	200b      	movs	r0, #11
 80187f0:	f7eb fb49 	bl	8003e86 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 80187f4:	4b04      	ldr	r3, [pc, #16]	; (8018808 <rfalCleanupTransceive+0x28>)
 80187f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d002      	beq.n	8018802 <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 80187fc:	4b02      	ldr	r3, [pc, #8]	; (8018808 <rfalCleanupTransceive+0x28>)
 80187fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018800:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8018802:	bf00      	nop
 8018804:	bd80      	pop	{r7, pc}
 8018806:	bf00      	nop
 8018808:	200039e4 	.word	0x200039e4

0801880c <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b082      	sub	sp, #8
 8018810:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 8018812:	2102      	movs	r1, #2
 8018814:	2011      	movs	r0, #17
 8018816:	f7eb fb13 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801881a:	20c2      	movs	r0, #194	; 0xc2
 801881c:	f7eb fc52 	bl	80040c4 <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 8018820:	20d5      	movs	r0, #213	; 0xd5
 8018822:	f7eb fc4f 	bl	80040c4 <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8018826:	4b42      	ldr	r3, [pc, #264]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018828:	785b      	ldrb	r3, [r3, #1]
 801882a:	2b09      	cmp	r3, #9
 801882c:	d01c      	beq.n	8018868 <rfalPrepareTransceive+0x5c>
 801882e:	4b40      	ldr	r3, [pc, #256]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018830:	785b      	ldrb	r3, [r3, #1]
 8018832:	2b0d      	cmp	r3, #13
 8018834:	d018      	beq.n	8018868 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8018836:	4b3e      	ldr	r3, [pc, #248]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018838:	691b      	ldr	r3, [r3, #16]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d014      	beq.n	8018868 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 801883e:	4b3c      	ldr	r3, [pc, #240]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018840:	691b      	ldr	r3, [r3, #16]
 8018842:	f240 423b 	movw	r2, #1083	; 0x43b
 8018846:	4293      	cmp	r3, r2
 8018848:	d804      	bhi.n	8018854 <rfalPrepareTransceive+0x48>
 801884a:	4b39      	ldr	r3, [pc, #228]	; (8018930 <rfalPrepareTransceive+0x124>)
 801884c:	691b      	ldr	r3, [r3, #16]
 801884e:	08db      	lsrs	r3, r3, #3
 8018850:	b29b      	uxth	r3, r3
 8018852:	e005      	b.n	8018860 <rfalPrepareTransceive+0x54>
 8018854:	4b36      	ldr	r3, [pc, #216]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018856:	691b      	ldr	r3, [r3, #16]
 8018858:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801885c:	08db      	lsrs	r3, r3, #3
 801885e:	b29b      	uxth	r3, r3
 8018860:	2120      	movs	r1, #32
 8018862:	4618      	mov	r0, r3
 8018864:	f7ea ff32 	bl	80036cc <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8018868:	4b31      	ldr	r3, [pc, #196]	; (8018930 <rfalPrepareTransceive+0x124>)
 801886a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801886c:	2b00      	cmp	r3, #0
 801886e:	d002      	beq.n	8018876 <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 8018870:	4b2f      	ldr	r3, [pc, #188]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018874:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 8018876:	4b2f      	ldr	r3, [pc, #188]	; (8018934 <rfalPrepareTransceive+0x128>)
 8018878:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 801887a:	2300      	movs	r3, #0
 801887c:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 801887e:	4b2c      	ldr	r3, [pc, #176]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018882:	f003 0304 	and.w	r3, r3, #4
 8018886:	2b00      	cmp	r3, #0
 8018888:	d003      	beq.n	8018892 <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 801888a:	78fb      	ldrb	r3, [r7, #3]
 801888c:	f043 0320 	orr.w	r3, r3, #32
 8018890:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 8018892:	4b27      	ldr	r3, [pc, #156]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018896:	f003 0310 	and.w	r3, r3, #16
 801889a:	2b00      	cmp	r3, #0
 801889c:	d003      	beq.n	80188a6 <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 801889e:	78fb      	ldrb	r3, [r7, #3]
 80188a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188a4:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 80188a6:	4b22      	ldr	r3, [pc, #136]	; (8018930 <rfalPrepareTransceive+0x124>)
 80188a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188aa:	f003 0320 	and.w	r3, r3, #32
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d003      	beq.n	80188ba <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 80188b2:	78fb      	ldrb	r3, [r7, #3]
 80188b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80188b8:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 80188ba:	78fb      	ldrb	r3, [r7, #3]
 80188bc:	461a      	mov	r2, r3
 80188be:	21e0      	movs	r1, #224	; 0xe0
 80188c0:	2005      	movs	r0, #5
 80188c2:	f7eb fafe 	bl	8003ec2 <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 80188c6:	4b1a      	ldr	r3, [pc, #104]	; (8018930 <rfalPrepareTransceive+0x124>)
 80188c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188ca:	f003 0308 	and.w	r3, r3, #8
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d004      	beq.n	80188dc <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80188d2:	2110      	movs	r1, #16
 80188d4:	200b      	movs	r0, #11
 80188d6:	f7eb fab3 	bl	8003e40 <st25r3911ClrRegisterBits>
 80188da:	e003      	b.n	80188e4 <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 80188dc:	2110      	movs	r1, #16
 80188de:	200b      	movs	r0, #11
 80188e0:	f7eb fad1 	bl	8003e86 <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 80188e4:	4b12      	ldr	r3, [pc, #72]	; (8018930 <rfalPrepareTransceive+0x124>)
 80188e6:	79db      	ldrb	r3, [r3, #7]
 80188e8:	2b02      	cmp	r3, #2
 80188ea:	d104      	bne.n	80188f6 <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80188ec:	2102      	movs	r1, #2
 80188ee:	2011      	movs	r0, #17
 80188f0:	f7eb fac9 	bl	8003e86 <st25r3911SetRegisterBits>
 80188f4:	e003      	b.n	80188fe <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 80188f6:	2102      	movs	r1, #2
 80188f8:	2011      	movs	r0, #17
 80188fa:	f7eb faa1 	bl	8003e40 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80188fe:	4b0c      	ldr	r3, [pc, #48]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018900:	785b      	ldrb	r3, [r3, #1]
 8018902:	2b09      	cmp	r3, #9
 8018904:	d003      	beq.n	801890e <rfalPrepareTransceive+0x102>
 8018906:	4b0a      	ldr	r3, [pc, #40]	; (8018930 <rfalPrepareTransceive+0x124>)
 8018908:	785b      	ldrb	r3, [r3, #1]
 801890a:	2b0d      	cmp	r3, #13
 801890c:	d103      	bne.n	8018916 <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8018914:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f7eb fdca 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7eb fe03 	bl	8004528 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 8018922:	f000 fdb1 	bl	8019488 <rfalFIFOStatusClear>
}
 8018926:	bf00      	nop
 8018928:	3708      	adds	r7, #8
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	200039e4 	.word	0x200039e4
 8018934:	00f04078 	.word	0x00f04078

08018938 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 8018938:	b5b0      	push	{r4, r5, r7, lr}
 801893a:	b08a      	sub	sp, #40	; 0x28
 801893c:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 801893e:	2300      	movs	r3, #0
 8018940:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8018942:	2300      	movs	r3, #0
 8018944:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8018946:	4b95      	ldr	r3, [pc, #596]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018948:	7d1a      	ldrb	r2, [r3, #20]
 801894a:	4b94      	ldr	r3, [pc, #592]	; (8018b9c <rfalTransceiveTx+0x264>)
 801894c:	7d5b      	ldrb	r3, [r3, #21]
 801894e:	429a      	cmp	r2, r3
 8018950:	d003      	beq.n	801895a <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8018952:	4b92      	ldr	r3, [pc, #584]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018954:	7d1a      	ldrb	r2, [r3, #20]
 8018956:	4b91      	ldr	r3, [pc, #580]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018958:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 801895a:	4b90      	ldr	r3, [pc, #576]	; (8018b9c <rfalTransceiveTx+0x264>)
 801895c:	7d1b      	ldrb	r3, [r3, #20]
 801895e:	3b0b      	subs	r3, #11
 8018960:	2b08      	cmp	r3, #8
 8018962:	f200 8217 	bhi.w	8018d94 <rfalTransceiveTx+0x45c>
 8018966:	a201      	add	r2, pc, #4	; (adr r2, 801896c <rfalTransceiveTx+0x34>)
 8018968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801896c:	08018991 	.word	0x08018991
 8018970:	08018997 	.word	0x08018997
 8018974:	080189b5 	.word	0x080189b5
 8018978:	080189dd 	.word	0x080189dd
 801897c:	08018b2d 	.word	0x08018b2d
 8018980:	08018b69 	.word	0x08018b69
 8018984:	08018caf 	.word	0x08018caf
 8018988:	08018d25 	.word	0x08018d25
 801898c:	08018d6b 	.word	0x08018d6b
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 8018990:	4b82      	ldr	r3, [pc, #520]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018992:	220c      	movs	r2, #12
 8018994:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 8018996:	f7ff fbd7 	bl	8018148 <rfalIsGTExpired>
 801899a:	4603      	mov	r3, r0
 801899c:	f083 0301 	eor.w	r3, r3, #1
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f040 81fd 	bne.w	8018da2 <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 80189a8:	4b7c      	ldr	r3, [pc, #496]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189aa:	2200      	movs	r2, #0
 80189ac:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 80189ae:	4b7b      	ldr	r3, [pc, #492]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189b0:	220d      	movs	r2, #13
 80189b2:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 80189b4:	4b79      	ldr	r3, [pc, #484]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189b6:	785b      	ldrb	r3, [r3, #1]
 80189b8:	2b09      	cmp	r3, #9
 80189ba:	d00c      	beq.n	80189d6 <rfalTransceiveTx+0x9e>
 80189bc:	4b77      	ldr	r3, [pc, #476]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189be:	785b      	ldrb	r3, [r3, #1]
 80189c0:	2b0d      	cmp	r3, #13
 80189c2:	d008      	beq.n	80189d6 <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 80189c4:	2204      	movs	r2, #4
 80189c6:	2104      	movs	r1, #4
 80189c8:	202b      	movs	r0, #43	; 0x2b
 80189ca:	f7ea feb3 	bl	8003734 <st25r3911CheckReg>
 80189ce:	4603      	mov	r3, r0
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	f040 81e8 	bne.w	8018da6 <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 80189d6:	4b71      	ldr	r3, [pc, #452]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189d8:	220e      	movs	r2, #14
 80189da:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 80189dc:	f7ff ff16 	bl	801880c <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 80189e0:	2210      	movs	r2, #16
 80189e2:	2110      	movs	r1, #16
 80189e4:	2000      	movs	r0, #0
 80189e6:	f7ea fea5 	bl	8003734 <st25r3911CheckReg>
 80189ea:	4603      	mov	r3, r0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d001      	beq.n	80189f4 <rfalTransceiveTx+0xbc>
 80189f0:	2250      	movs	r2, #80	; 0x50
 80189f2:	e000      	b.n	80189f6 <rfalTransceiveTx+0xbe>
 80189f4:	2240      	movs	r2, #64	; 0x40
 80189f6:	4b69      	ldr	r3, [pc, #420]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189f8:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80189fa:	4b68      	ldr	r3, [pc, #416]	; (8018b9c <rfalTransceiveTx+0x264>)
 80189fc:	785b      	ldrb	r3, [r3, #1]
 80189fe:	2b07      	cmp	r3, #7
 8018a00:	d003      	beq.n	8018a0a <rfalTransceiveTx+0xd2>
 8018a02:	4b66      	ldr	r3, [pc, #408]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a04:	785b      	ldrb	r3, [r3, #1]
 8018a06:	2b08      	cmp	r3, #8
 8018a08:	d150      	bne.n	8018aac <rfalTransceiveTx+0x174>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 8018a0a:	4b64      	ldr	r3, [pc, #400]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8018a12:	4b62      	ldr	r3, [pc, #392]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a14:	69d8      	ldr	r0, [r3, #28]
 8018a16:	4b61      	ldr	r3, [pc, #388]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a18:	8c1b      	ldrh	r3, [r3, #32]
 8018a1a:	3307      	adds	r3, #7
 8018a1c:	08db      	lsrs	r3, r3, #3
 8018a1e:	b299      	uxth	r1, r3
 8018a20:	4b5e      	ldr	r3, [pc, #376]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018a26:	f003 0301 	and.w	r3, r3, #1
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	bf0c      	ite	eq
 8018a2e:	2301      	moveq	r3, #1
 8018a30:	2300      	movne	r3, #0
 8018a32:	b2da      	uxtb	r2, r3
 8018a34:	4b59      	ldr	r3, [pc, #356]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	bf0c      	ite	eq
 8018a42:	2301      	moveq	r3, #1
 8018a44:	2300      	movne	r3, #0
 8018a46:	b2dc      	uxtb	r4, r3
 8018a48:	4b54      	ldr	r3, [pc, #336]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a4a:	785b      	ldrb	r3, [r3, #1]
 8018a4c:	2b08      	cmp	r3, #8
 8018a4e:	bf0c      	ite	eq
 8018a50:	2301      	moveq	r3, #1
 8018a52:	2300      	movne	r3, #0
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	4d52      	ldr	r5, [pc, #328]	; (8018ba0 <rfalTransceiveTx+0x268>)
 8018a58:	9505      	str	r5, [sp, #20]
 8018a5a:	2560      	movs	r5, #96	; 0x60
 8018a5c:	9504      	str	r5, [sp, #16]
 8018a5e:	4d51      	ldr	r5, [pc, #324]	; (8018ba4 <rfalTransceiveTx+0x26c>)
 8018a60:	9503      	str	r5, [sp, #12]
 8018a62:	4d51      	ldr	r5, [pc, #324]	; (8018ba8 <rfalTransceiveTx+0x270>)
 8018a64:	9502      	str	r5, [sp, #8]
 8018a66:	4d51      	ldr	r5, [pc, #324]	; (8018bac <rfalTransceiveTx+0x274>)
 8018a68:	9501      	str	r5, [sp, #4]
 8018a6a:	9300      	str	r3, [sp, #0]
 8018a6c:	4623      	mov	r3, r4
 8018a6e:	f7f6 fff7 	bl	800fa60 <iso15693VCDCode>
 8018a72:	4603      	mov	r3, r0
 8018a74:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8018a76:	89fb      	ldrh	r3, [r7, #14]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d009      	beq.n	8018a90 <rfalTransceiveTx+0x158>
 8018a7c:	89fb      	ldrh	r3, [r7, #14]
 8018a7e:	2b0d      	cmp	r3, #13
 8018a80:	d006      	beq.n	8018a90 <rfalTransceiveTx+0x158>
                {
                    gRFAL.TxRx.status = ret;
 8018a82:	4a46      	ldr	r2, [pc, #280]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a84:	89fb      	ldrh	r3, [r7, #14]
 8018a86:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018a88:	4b44      	ldr	r3, [pc, #272]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a8a:	2213      	movs	r2, #19
 8018a8c:	751a      	strb	r2, [r3, #20]
                    break;
 8018a8e:	e191      	b.n	8018db4 <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 8018a90:	4b42      	ldr	r3, [pc, #264]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a92:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018a94:	00db      	lsls	r3, r3, #3
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7ea ff41 	bl	800391e <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 8018a9c:	4b3f      	ldr	r3, [pc, #252]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018a9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	4619      	mov	r1, r3
 8018aa4:	483f      	ldr	r0, [pc, #252]	; (8018ba4 <rfalTransceiveTx+0x26c>)
 8018aa6:	f7eb fa75 	bl	8003f94 <st25r3911WriteFifo>
 8018aaa:	e01c      	b.n	8018ae6 <rfalTransceiveTx+0x1ae>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 8018aac:	4b3b      	ldr	r3, [pc, #236]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018aae:	8c1b      	ldrh	r3, [r3, #32]
 8018ab0:	3307      	adds	r3, #7
 8018ab2:	08db      	lsrs	r3, r3, #3
 8018ab4:	b29a      	uxth	r2, r3
 8018ab6:	4b39      	ldr	r3, [pc, #228]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ab8:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 8018aba:	4b38      	ldr	r3, [pc, #224]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018abc:	8c1b      	ldrh	r3, [r3, #32]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7ea ff2d 	bl	800391e <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 8018ac4:	4b35      	ldr	r3, [pc, #212]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ac6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018ac8:	2b60      	cmp	r3, #96	; 0x60
 8018aca:	bf28      	it	cs
 8018acc:	2360      	movcs	r3, #96	; 0x60
 8018ace:	b29a      	uxth	r2, r3
 8018ad0:	4b32      	ldr	r3, [pc, #200]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 8018ad4:	4b31      	ldr	r3, [pc, #196]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ad6:	69db      	ldr	r3, [r3, #28]
 8018ad8:	4a30      	ldr	r2, [pc, #192]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ada:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8018adc:	b2d2      	uxtb	r2, r2
 8018ade:	4611      	mov	r1, r2
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f7eb fa57 	bl	8003f94 <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 8018ae6:	4b2d      	ldr	r3, [pc, #180]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018ae8:	795b      	ldrb	r3, [r3, #5]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d005      	beq.n	8018afa <rfalTransceiveTx+0x1c2>
 8018aee:	4b2b      	ldr	r3, [pc, #172]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018af0:	795b      	ldrb	r3, [r3, #5]
 8018af2:	4619      	mov	r1, r3
 8018af4:	2001      	movs	r0, #1
 8018af6:	f7eb f90f 	bl	8003d18 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8018afa:	4b28      	ldr	r3, [pc, #160]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018afe:	f003 0301 	and.w	r3, r3, #1
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d003      	beq.n	8018b0e <rfalTransceiveTx+0x1d6>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 8018b06:	20c5      	movs	r0, #197	; 0xc5
 8018b08:	f7eb fadc 	bl	80040c4 <st25r3911ExecuteCommand>
 8018b0c:	e002      	b.n	8018b14 <rfalTransceiveTx+0x1dc>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 8018b0e:	20c4      	movs	r0, #196	; 0xc4
 8018b10:	f7eb fad8 	bl	80040c4 <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8018b14:	4b21      	ldr	r3, [pc, #132]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b16:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018b18:	4b20      	ldr	r3, [pc, #128]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b1a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d201      	bcs.n	8018b24 <rfalTransceiveTx+0x1ec>
 8018b20:	220f      	movs	r2, #15
 8018b22:	e000      	b.n	8018b26 <rfalTransceiveTx+0x1ee>
 8018b24:	2211      	movs	r2, #17
 8018b26:	4b1d      	ldr	r3, [pc, #116]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b28:	751a      	strb	r2, [r3, #20]
            break;
 8018b2a:	e143      	b.n	8018db4 <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 8018b2c:	2048      	movs	r0, #72	; 0x48
 8018b2e:	f7eb fcbf 	bl	80044b0 <st25r3911GetInterrupt>
 8018b32:	4603      	mov	r3, r0
 8018b34:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f000 8136 	beq.w	8018daa <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d008      	beq.n	8018b5a <rfalTransceiveTx+0x222>
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	f003 0308 	and.w	r3, r3, #8
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d103      	bne.n	8018b5a <rfalTransceiveTx+0x222>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8018b52:	4b12      	ldr	r3, [pc, #72]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b54:	2210      	movs	r2, #16
 8018b56:	751a      	strb	r2, [r3, #20]
 8018b58:	e006      	b.n	8018b68 <rfalTransceiveTx+0x230>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8018b5a:	4b10      	ldr	r3, [pc, #64]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b5c:	2203      	movs	r2, #3
 8018b5e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018b60:	4b0e      	ldr	r3, [pc, #56]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b62:	2213      	movs	r2, #19
 8018b64:	751a      	strb	r2, [r3, #20]
                break;
 8018b66:	e125      	b.n	8018db4 <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8018b68:	4b0c      	ldr	r3, [pc, #48]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b6a:	785b      	ldrb	r3, [r3, #1]
 8018b6c:	2b07      	cmp	r3, #7
 8018b6e:	d003      	beq.n	8018b78 <rfalTransceiveTx+0x240>
 8018b70:	4b0a      	ldr	r3, [pc, #40]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b72:	785b      	ldrb	r3, [r3, #1]
 8018b74:	2b08      	cmp	r3, #8
 8018b76:	d16e      	bne.n	8018c56 <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8018b78:	4b08      	ldr	r3, [pc, #32]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b7a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018b7c:	461a      	mov	r2, r3
 8018b7e:	4b07      	ldr	r3, [pc, #28]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018b82:	1ad3      	subs	r3, r2, r3
 8018b84:	4a05      	ldr	r2, [pc, #20]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b86:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	da11      	bge.n	8018bb0 <rfalTransceiveTx+0x278>
 8018b8c:	4b03      	ldr	r3, [pc, #12]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b8e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8018b90:	4b02      	ldr	r3, [pc, #8]	; (8018b9c <rfalTransceiveTx+0x264>)
 8018b92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018b94:	1ad3      	subs	r3, r2, r3
 8018b96:	b29b      	uxth	r3, r3
 8018b98:	e00c      	b.n	8018bb4 <rfalTransceiveTx+0x27c>
 8018b9a:	bf00      	nop
 8018b9c:	200039e4 	.word	0x200039e4
 8018ba0:	20003a20 	.word	0x20003a20
 8018ba4:	20003ba4 	.word	0x20003ba4
 8018ba8:	20003dac 	.word	0x20003dac
 8018bac:	20003a1e 	.word	0x20003a1e
 8018bb0:	4b82      	ldr	r3, [pc, #520]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018bb2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8018bb4:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8018bb6:	89bb      	ldrh	r3, [r7, #12]
 8018bb8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8018bbc:	bf28      	it	cs
 8018bbe:	f44f 7302 	movcs.w	r3, #520	; 0x208
 8018bc2:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8018bc8:	4b7c      	ldr	r3, [pc, #496]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018bca:	69d8      	ldr	r0, [r3, #28]
 8018bcc:	4b7b      	ldr	r3, [pc, #492]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018bce:	8c1b      	ldrh	r3, [r3, #32]
 8018bd0:	3307      	adds	r3, #7
 8018bd2:	08db      	lsrs	r3, r3, #3
 8018bd4:	b299      	uxth	r1, r3
 8018bd6:	4b79      	ldr	r3, [pc, #484]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018bd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018bdc:	f003 0301 	and.w	r3, r3, #1
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	bf0c      	ite	eq
 8018be4:	2301      	moveq	r3, #1
 8018be6:	2300      	movne	r3, #0
 8018be8:	b2dc      	uxtb	r4, r3
 8018bea:	4b74      	ldr	r3, [pc, #464]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018bec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	bf0c      	ite	eq
 8018bf8:	2301      	moveq	r3, #1
 8018bfa:	2300      	movne	r3, #0
 8018bfc:	b2dd      	uxtb	r5, r3
 8018bfe:	4b6f      	ldr	r3, [pc, #444]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c00:	785b      	ldrb	r3, [r3, #1]
 8018c02:	2b08      	cmp	r3, #8
 8018c04:	bf0c      	ite	eq
 8018c06:	2301      	moveq	r3, #1
 8018c08:	2300      	movne	r3, #0
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	1dba      	adds	r2, r7, #6
 8018c0e:	9205      	str	r2, [sp, #20]
 8018c10:	89ba      	ldrh	r2, [r7, #12]
 8018c12:	9204      	str	r2, [sp, #16]
 8018c14:	4a6a      	ldr	r2, [pc, #424]	; (8018dc0 <rfalTransceiveTx+0x488>)
 8018c16:	9203      	str	r2, [sp, #12]
 8018c18:	4a6a      	ldr	r2, [pc, #424]	; (8018dc4 <rfalTransceiveTx+0x48c>)
 8018c1a:	9202      	str	r2, [sp, #8]
 8018c1c:	4a6a      	ldr	r2, [pc, #424]	; (8018dc8 <rfalTransceiveTx+0x490>)
 8018c1e:	9201      	str	r2, [sp, #4]
 8018c20:	9300      	str	r3, [sp, #0]
 8018c22:	462b      	mov	r3, r5
 8018c24:	4622      	mov	r2, r4
 8018c26:	f7f6 ff1b 	bl	800fa60 <iso15693VCDCode>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8018c2e:	89fb      	ldrh	r3, [r7, #14]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d009      	beq.n	8018c48 <rfalTransceiveTx+0x310>
 8018c34:	89fb      	ldrh	r3, [r7, #14]
 8018c36:	2b0d      	cmp	r3, #13
 8018c38:	d006      	beq.n	8018c48 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 8018c3a:	4a60      	ldr	r2, [pc, #384]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c3c:	89fb      	ldrh	r3, [r7, #14]
 8018c3e:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018c40:	4b5e      	ldr	r3, [pc, #376]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c42:	2213      	movs	r2, #19
 8018c44:	751a      	strb	r2, [r3, #20]
                    break;
 8018c46:	e0b5      	b.n	8018db4 <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 8018c48:	88fb      	ldrh	r3, [r7, #6]
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	485c      	ldr	r0, [pc, #368]	; (8018dc0 <rfalTransceiveTx+0x488>)
 8018c50:	f7eb f9a0 	bl	8003f94 <st25r3911WriteFifo>
            {
 8018c54:	e018      	b.n	8018c88 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8018c56:	4b59      	ldr	r3, [pc, #356]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c58:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8018c5a:	461a      	mov	r2, r3
 8018c5c:	4b57      	ldr	r3, [pc, #348]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018c60:	4619      	mov	r1, r3
 8018c62:	4b56      	ldr	r3, [pc, #344]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018c66:	1acb      	subs	r3, r1, r3
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	bfa8      	it	ge
 8018c6c:	4613      	movge	r3, r2
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 8018c72:	4b52      	ldr	r3, [pc, #328]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c74:	69db      	ldr	r3, [r3, #28]
 8018c76:	4a51      	ldr	r2, [pc, #324]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c78:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8018c7a:	4413      	add	r3, r2
 8018c7c:	88fa      	ldrh	r2, [r7, #6]
 8018c7e:	b2d2      	uxtb	r2, r2
 8018c80:	4611      	mov	r1, r2
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7eb f986 	bl	8003f94 <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 8018c88:	4b4c      	ldr	r3, [pc, #304]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c8a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018c8c:	88fb      	ldrh	r3, [r7, #6]
 8018c8e:	4413      	add	r3, r2
 8018c90:	b29a      	uxth	r2, r3
 8018c92:	4b4a      	ldr	r3, [pc, #296]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c94:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8018c96:	4b49      	ldr	r3, [pc, #292]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c98:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8018c9a:	4b48      	ldr	r3, [pc, #288]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018c9c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	d201      	bcs.n	8018ca6 <rfalTransceiveTx+0x36e>
 8018ca2:	220f      	movs	r2, #15
 8018ca4:	e000      	b.n	8018ca8 <rfalTransceiveTx+0x370>
 8018ca6:	2211      	movs	r2, #17
 8018ca8:	4b44      	ldr	r3, [pc, #272]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018caa:	751a      	strb	r2, [r3, #20]
            break;
 8018cac:	e082      	b.n	8018db4 <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 8018cae:	2048      	movs	r0, #72	; 0x48
 8018cb0:	f7eb fbfe 	bl	80044b0 <st25r3911GetInterrupt>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d077      	beq.n	8018dae <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 8018cbe:	68bb      	ldr	r3, [r7, #8]
 8018cc0:	f003 0308 	and.w	r3, r3, #8
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d021      	beq.n	8018d0c <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 8018cc8:	4b3c      	ldr	r3, [pc, #240]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018cca:	785b      	ldrb	r3, [r3, #1]
 8018ccc:	2b09      	cmp	r3, #9
 8018cce:	d003      	beq.n	8018cd8 <rfalTransceiveTx+0x3a0>
 8018cd0:	4b3a      	ldr	r3, [pc, #232]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018cd2:	785b      	ldrb	r3, [r3, #1]
 8018cd4:	2b0d      	cmp	r3, #13
 8018cd6:	d115      	bne.n	8018d04 <rfalTransceiveTx+0x3cc>
 8018cd8:	4b38      	ldr	r3, [pc, #224]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ce0:	d010      	beq.n	8018d04 <rfalTransceiveTx+0x3cc>
 8018ce2:	4b36      	ldr	r3, [pc, #216]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d00c      	beq.n	8018d04 <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 8018cea:	4b34      	ldr	r3, [pc, #208]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cee:	4a37      	ldr	r2, [pc, #220]	; (8018dcc <rfalTransceiveTx+0x494>)
 8018cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8018cf4:	0b1b      	lsrs	r3, r3, #12
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7eb fc61 	bl	80045c0 <timerCalculateTimer>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	4a2e      	ldr	r2, [pc, #184]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d02:	6453      	str	r3, [r2, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8018d04:	4b2d      	ldr	r3, [pc, #180]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d06:	2212      	movs	r2, #18
 8018d08:	751a      	strb	r2, [r3, #20]
 8018d0a:	e00b      	b.n	8018d24 <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 8018d0c:	68bb      	ldr	r3, [r7, #8]
 8018d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d14d      	bne.n	8018db2 <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8018d16:	4b29      	ldr	r3, [pc, #164]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d18:	2203      	movs	r2, #3
 8018d1a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018d1c:	4b27      	ldr	r3, [pc, #156]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d1e:	2213      	movs	r2, #19
 8018d20:	751a      	strb	r2, [r3, #20]
               break;
 8018d22:	e047      	b.n	8018db4 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8018d24:	4b25      	ldr	r3, [pc, #148]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d110      	bne.n	8018d4e <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8018d2c:	4b23      	ldr	r3, [pc, #140]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d2e:	799b      	ldrb	r3, [r3, #6]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d003      	beq.n	8018d3c <rfalTransceiveTx+0x404>
 8018d34:	2100      	movs	r1, #0
 8018d36:	2001      	movs	r0, #1
 8018d38:	f7ea ffee 	bl	8003d18 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 8018d3c:	f7ff fd50 	bl	80187e0 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 8018d40:	4b1e      	ldr	r3, [pc, #120]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d42:	2200      	movs	r2, #0
 8018d44:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 8018d46:	4b1d      	ldr	r3, [pc, #116]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d48:	2200      	movs	r2, #0
 8018d4a:	751a      	strb	r2, [r3, #20]
                break;
 8018d4c:	e032      	b.n	8018db4 <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 8018d4e:	4b1b      	ldr	r3, [pc, #108]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d50:	799b      	ldrb	r3, [r3, #6]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d005      	beq.n	8018d62 <rfalTransceiveTx+0x42a>
 8018d56:	4b19      	ldr	r3, [pc, #100]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d58:	799b      	ldrb	r3, [r3, #6]
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	2001      	movs	r0, #1
 8018d5e:	f7ea ffdb 	bl	8003d18 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8018d62:	4b16      	ldr	r3, [pc, #88]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d64:	2251      	movs	r2, #81	; 0x51
 8018d66:	751a      	strb	r2, [r3, #20]
            break;
 8018d68:	e024      	b.n	8018db4 <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8018d6a:	4b14      	ldr	r3, [pc, #80]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d6c:	8adb      	ldrh	r3, [r3, #22]
 8018d6e:	2b02      	cmp	r3, #2
 8018d70:	d102      	bne.n	8018d78 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 8018d72:	4b12      	ldr	r3, [pc, #72]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d74:	2208      	movs	r2, #8
 8018d76:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8018d78:	4b10      	ldr	r3, [pc, #64]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d7a:	799b      	ldrb	r3, [r3, #6]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d003      	beq.n	8018d88 <rfalTransceiveTx+0x450>
 8018d80:	2100      	movs	r1, #0
 8018d82:	2001      	movs	r0, #1
 8018d84:	f7ea ffc8 	bl	8003d18 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8018d88:	f7ff fd2a 	bl	80187e0 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8018d8c:	4b0b      	ldr	r3, [pc, #44]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d8e:	2200      	movs	r2, #0
 8018d90:	751a      	strb	r2, [r3, #20]
            break;
 8018d92:	e00f      	b.n	8018db4 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8018d94:	4b09      	ldr	r3, [pc, #36]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d96:	2208      	movs	r2, #8
 8018d98:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8018d9a:	4b08      	ldr	r3, [pc, #32]	; (8018dbc <rfalTransceiveTx+0x484>)
 8018d9c:	2213      	movs	r2, #19
 8018d9e:	751a      	strb	r2, [r3, #20]
            break;
 8018da0:	e008      	b.n	8018db4 <rfalTransceiveTx+0x47c>
                break;
 8018da2:	bf00      	nop
 8018da4:	e006      	b.n	8018db4 <rfalTransceiveTx+0x47c>
                   break;
 8018da6:	bf00      	nop
 8018da8:	e004      	b.n	8018db4 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 8018daa:	bf00      	nop
 8018dac:	e002      	b.n	8018db4 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 8018dae:	bf00      	nop
 8018db0:	e000      	b.n	8018db4 <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 8018db2:	bf00      	nop
    }
}
 8018db4:	bf00      	nop
 8018db6:	3710      	adds	r7, #16
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bdb0      	pop	{r4, r5, r7, pc}
 8018dbc:	200039e4 	.word	0x200039e4
 8018dc0:	20003ba4 	.word	0x20003ba4
 8018dc4:	20003dac 	.word	0x20003dac
 8018dc8:	20003a1e 	.word	0x20003a1e
 8018dcc:	4d542005 	.word	0x4d542005

08018dd0 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 8018dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dd2:	b089      	sub	sp, #36	; 0x24
 8018dd4:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8018dda:	4ba2      	ldr	r3, [pc, #648]	; (8019064 <rfalTransceiveRx+0x294>)
 8018ddc:	7d1a      	ldrb	r2, [r3, #20]
 8018dde:	4ba1      	ldr	r3, [pc, #644]	; (8019064 <rfalTransceiveRx+0x294>)
 8018de0:	7d5b      	ldrb	r3, [r3, #21]
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d003      	beq.n	8018dee <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8018de6:	4b9f      	ldr	r3, [pc, #636]	; (8019064 <rfalTransceiveRx+0x294>)
 8018de8:	7d1a      	ldrb	r2, [r3, #20]
 8018dea:	4b9e      	ldr	r3, [pc, #632]	; (8019064 <rfalTransceiveRx+0x294>)
 8018dec:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 8018dee:	4b9d      	ldr	r3, [pc, #628]	; (8019064 <rfalTransceiveRx+0x294>)
 8018df0:	7d1b      	ldrb	r3, [r3, #20]
 8018df2:	3b51      	subs	r3, #81	; 0x51
 8018df4:	2b09      	cmp	r3, #9
 8018df6:	f200 831e 	bhi.w	8019436 <rfalTransceiveRx+0x666>
 8018dfa:	a201      	add	r2, pc, #4	; (adr r2, 8018e00 <rfalTransceiveRx+0x30>)
 8018dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e00:	08018e29 	.word	0x08018e29
 8018e04:	080193b3 	.word	0x080193b3
 8018e08:	08018e61 	.word	0x08018e61
 8018e0c:	08018f6d 	.word	0x08018f6d
 8018e10:	080192f1 	.word	0x080192f1
 8018e14:	08018fc1 	.word	0x08018fc1
 8018e18:	080190d9 	.word	0x080190d9
 8018e1c:	080193ed 	.word	0x080193ed
 8018e20:	080192c9 	.word	0x080192c9
 8018e24:	08019389 	.word	0x08019389
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 8018e28:	4b8e      	ldr	r3, [pc, #568]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 8018e2e:	4b8d      	ldr	r3, [pc, #564]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e30:	2200      	movs	r2, #0
 8018e32:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8018e34:	4b8b      	ldr	r3, [pc, #556]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d003      	beq.n	8018e44 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8018e3c:	4b89      	ldr	r3, [pc, #548]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e40:	2200      	movs	r2, #0
 8018e42:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8018e44:	4b87      	ldr	r3, [pc, #540]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e46:	785b      	ldrb	r3, [r3, #1]
 8018e48:	2b09      	cmp	r3, #9
 8018e4a:	d003      	beq.n	8018e54 <rfalTransceiveRx+0x84>
 8018e4c:	4b85      	ldr	r3, [pc, #532]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e4e:	785b      	ldrb	r3, [r3, #1]
 8018e50:	2b0d      	cmp	r3, #13
 8018e52:	d101      	bne.n	8018e58 <rfalTransceiveRx+0x88>
 8018e54:	2252      	movs	r2, #82	; 0x52
 8018e56:	e000      	b.n	8018e5a <rfalTransceiveRx+0x8a>
 8018e58:	2253      	movs	r2, #83	; 0x53
 8018e5a:	4b82      	ldr	r3, [pc, #520]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e5c:	751a      	strb	r2, [r3, #20]
            break;
 8018e5e:	e2fa      	b.n	8019456 <rfalTransceiveRx+0x686>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8018e60:	4b80      	ldr	r3, [pc, #512]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e62:	785b      	ldrb	r3, [r3, #1]
 8018e64:	2b09      	cmp	r3, #9
 8018e66:	d003      	beq.n	8018e70 <rfalTransceiveRx+0xa0>
 8018e68:	4b7e      	ldr	r3, [pc, #504]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e6a:	785b      	ldrb	r3, [r3, #1]
 8018e6c:	2b0d      	cmp	r3, #13
 8018e6e:	d117      	bne.n	8018ea0 <rfalTransceiveRx+0xd0>
 8018e70:	4b7c      	ldr	r3, [pc, #496]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e78:	d012      	beq.n	8018ea0 <rfalTransceiveRx+0xd0>
 8018e7a:	4b7a      	ldr	r3, [pc, #488]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d00e      	beq.n	8018ea0 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 8018e82:	4b78      	ldr	r3, [pc, #480]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e86:	4618      	mov	r0, r3
 8018e88:	f7eb fba8 	bl	80045dc <timerIsExpired>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d006      	beq.n	8018ea0 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 8018e92:	4b74      	ldr	r3, [pc, #464]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e94:	2204      	movs	r2, #4
 8018e96:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018e98:	4b72      	ldr	r3, [pc, #456]	; (8019064 <rfalTransceiveRx+0x294>)
 8018e9a:	225a      	movs	r2, #90	; 0x5a
 8018e9c:	751a      	strb	r2, [r3, #20]
                    break;
 8018e9e:	e2da      	b.n	8019456 <rfalTransceiveRx+0x686>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 8018ea0:	f644 0030 	movw	r0, #18480	; 0x4830
 8018ea4:	f7eb fb04 	bl	80044b0 <st25r3911GetInterrupt>
 8018ea8:	4603      	mov	r3, r0
 8018eaa:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018eac:	68bb      	ldr	r3, [r7, #8]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	f000 82c8 	beq.w	8019444 <rfalTransceiveRx+0x674>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d00b      	beq.n	8018ed6 <rfalTransceiveRx+0x106>
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	f003 0320 	and.w	r3, r3, #32
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d106      	bne.n	8018ed6 <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8018ec8:	4b66      	ldr	r3, [pc, #408]	; (8019064 <rfalTransceiveRx+0x294>)
 8018eca:	2204      	movs	r2, #4
 8018ecc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018ece:	4b65      	ldr	r3, [pc, #404]	; (8019064 <rfalTransceiveRx+0x294>)
 8018ed0:	225a      	movs	r2, #90	; 0x5a
 8018ed2:	751a      	strb	r2, [r3, #20]
                break;
 8018ed4:	e2bf      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d015      	beq.n	8018f0c <rfalTransceiveRx+0x13c>
 8018ee0:	68bb      	ldr	r3, [r7, #8]
 8018ee2:	f003 0320 	and.w	r3, r3, #32
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d110      	bne.n	8018f0c <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 8018eea:	4b5e      	ldr	r3, [pc, #376]	; (8019064 <rfalTransceiveRx+0x294>)
 8018eec:	785b      	ldrb	r3, [r3, #1]
 8018eee:	2b09      	cmp	r3, #9
 8018ef0:	d003      	beq.n	8018efa <rfalTransceiveRx+0x12a>
 8018ef2:	4b5c      	ldr	r3, [pc, #368]	; (8019064 <rfalTransceiveRx+0x294>)
 8018ef4:	785b      	ldrb	r3, [r3, #1]
 8018ef6:	2b0d      	cmp	r3, #13
 8018ef8:	d101      	bne.n	8018efe <rfalTransceiveRx+0x12e>
 8018efa:	2204      	movs	r2, #4
 8018efc:	e000      	b.n	8018f00 <rfalTransceiveRx+0x130>
 8018efe:	2225      	movs	r2, #37	; 0x25
 8018f00:	4b58      	ldr	r3, [pc, #352]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f02:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f04:	4b57      	ldr	r3, [pc, #348]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f06:	225a      	movs	r2, #90	; 0x5a
 8018f08:	751a      	strb	r2, [r3, #20]
                break;
 8018f0a:	e2a4      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	f003 0320 	and.w	r3, r3, #32
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d015      	beq.n	8018f42 <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	f003 0310 	and.w	r3, r3, #16
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d006      	beq.n	8018f2e <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 8018f20:	4b50      	ldr	r3, [pc, #320]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f22:	2201      	movs	r2, #1
 8018f24:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8018f26:	4b4f      	ldr	r3, [pc, #316]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f28:	2256      	movs	r2, #86	; 0x56
 8018f2a:	751a      	strb	r2, [r3, #20]
                    break;
 8018f2c:	e293      	b.n	8019456 <rfalTransceiveRx+0x686>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8018f2e:	200a      	movs	r0, #10
 8018f30:	f7eb fb46 	bl	80045c0 <timerCalculateTimer>
 8018f34:	4603      	mov	r3, r0
 8018f36:	4a4b      	ldr	r2, [pc, #300]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f38:	6493      	str	r3, [r2, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8018f3a:	4b4a      	ldr	r3, [pc, #296]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f3c:	2254      	movs	r2, #84	; 0x54
 8018f3e:	751a      	strb	r2, [r3, #20]
 8018f40:	e014      	b.n	8018f6c <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 8018f42:	68bb      	ldr	r3, [r7, #8]
 8018f44:	f003 0310 	and.w	r3, r3, #16
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d008      	beq.n	8018f5e <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 8018f4c:	4b45      	ldr	r3, [pc, #276]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f4e:	2203      	movs	r2, #3
 8018f50:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f52:	4b44      	ldr	r3, [pc, #272]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f54:	225a      	movs	r2, #90	; 0x5a
 8018f56:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 8018f58:	f7ff fbbe 	bl	80186d8 <rfalErrorHandling>
                break;
 8018f5c:	e27b      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 8018f5e:	4b41      	ldr	r3, [pc, #260]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f60:	2203      	movs	r2, #3
 8018f62:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f64:	4b3f      	ldr	r3, [pc, #252]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f66:	225a      	movs	r2, #90	; 0x5a
 8018f68:	751a      	strb	r2, [r3, #20]
               break;
 8018f6a:	e274      	b.n	8019456 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 8018f6c:	f44f 6005 	mov.w	r0, #2128	; 0x850
 8018f70:	f7eb fa9e 	bl	80044b0 <st25r3911GetInterrupt>
 8018f74:	4603      	mov	r3, r0
 8018f76:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d10f      	bne.n	8018f9e <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8018f7e:	4b39      	ldr	r3, [pc, #228]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7eb fb2a 	bl	80045dc <timerIsExpired>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	f000 825c 	beq.w	8019448 <rfalTransceiveRx+0x678>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 8018f90:	4b34      	ldr	r3, [pc, #208]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f92:	2209      	movs	r2, #9
 8018f94:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8018f96:	4b33      	ldr	r3, [pc, #204]	; (8019064 <rfalTransceiveRx+0x294>)
 8018f98:	225a      	movs	r2, #90	; 0x5a
 8018f9a:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 8018f9c:	e254      	b.n	8019448 <rfalTransceiveRx+0x678>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d008      	beq.n	8018fba <rfalTransceiveRx+0x1ea>
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	f003 0310 	and.w	r3, r3, #16
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d103      	bne.n	8018fba <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 8018fb2:	4b2c      	ldr	r3, [pc, #176]	; (8019064 <rfalTransceiveRx+0x294>)
 8018fb4:	2255      	movs	r2, #85	; 0x55
 8018fb6:	751a      	strb	r2, [r3, #20]
                break;
 8018fb8:	e24d      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8018fba:	4b2a      	ldr	r3, [pc, #168]	; (8019064 <rfalTransceiveRx+0x294>)
 8018fbc:	2256      	movs	r2, #86	; 0x56
 8018fbe:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 8018fc0:	4829      	ldr	r0, [pc, #164]	; (8019068 <rfalTransceiveRx+0x298>)
 8018fc2:	f7eb fa75 	bl	80044b0 <st25r3911GetInterrupt>
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	4313      	orrs	r3, r2
 8018fcc:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d008      	beq.n	8018fea <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8018fd8:	4b22      	ldr	r3, [pc, #136]	; (8019064 <rfalTransceiveRx+0x294>)
 8018fda:	2209      	movs	r2, #9
 8018fdc:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8018fde:	4b21      	ldr	r3, [pc, #132]	; (8019064 <rfalTransceiveRx+0x294>)
 8018fe0:	2257      	movs	r2, #87	; 0x57
 8018fe2:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8018fe4:	f7ff fb78 	bl	80186d8 <rfalErrorHandling>
                break;
 8018fe8:	e235      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d00c      	beq.n	801900e <rfalTransceiveRx+0x23e>
 8018ff4:	4b1b      	ldr	r3, [pc, #108]	; (8019064 <rfalTransceiveRx+0x294>)
 8018ff6:	79db      	ldrb	r3, [r3, #7]
 8018ff8:	2b02      	cmp	r3, #2
 8018ffa:	d108      	bne.n	801900e <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8018ffc:	4b19      	ldr	r3, [pc, #100]	; (8019064 <rfalTransceiveRx+0x294>)
 8018ffe:	2209      	movs	r2, #9
 8019000:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8019002:	4b18      	ldr	r3, [pc, #96]	; (8019064 <rfalTransceiveRx+0x294>)
 8019004:	2257      	movs	r2, #87	; 0x57
 8019006:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8019008:	f7ff fb66 	bl	80186d8 <rfalErrorHandling>
                break;
 801900c:	e223      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019014:	2b00      	cmp	r3, #0
 8019016:	d008      	beq.n	801902a <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 8019018:	4b12      	ldr	r3, [pc, #72]	; (8019064 <rfalTransceiveRx+0x294>)
 801901a:	221b      	movs	r2, #27
 801901c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801901e:	4b11      	ldr	r3, [pc, #68]	; (8019064 <rfalTransceiveRx+0x294>)
 8019020:	2257      	movs	r2, #87	; 0x57
 8019022:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8019024:	f7ff fb58 	bl	80186d8 <rfalErrorHandling>
                break;
 8019028:	e215      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 801902a:	68bb      	ldr	r3, [r7, #8]
 801902c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019030:	2b00      	cmp	r3, #0
 8019032:	d008      	beq.n	8019046 <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 8019034:	4b0b      	ldr	r3, [pc, #44]	; (8019064 <rfalTransceiveRx+0x294>)
 8019036:	2215      	movs	r2, #21
 8019038:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801903a:	4b0a      	ldr	r3, [pc, #40]	; (8019064 <rfalTransceiveRx+0x294>)
 801903c:	2257      	movs	r2, #87	; 0x57
 801903e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8019040:	f7ff fb4a 	bl	80186d8 <rfalErrorHandling>
                break;
 8019044:	e207      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 8019046:	68bb      	ldr	r3, [r7, #8]
 8019048:	f003 0304 	and.w	r3, r3, #4
 801904c:	2b00      	cmp	r3, #0
 801904e:	d00d      	beq.n	801906c <rfalTransceiveRx+0x29c>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8019050:	4b04      	ldr	r3, [pc, #16]	; (8019064 <rfalTransceiveRx+0x294>)
 8019052:	221d      	movs	r2, #29
 8019054:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8019056:	4b03      	ldr	r3, [pc, #12]	; (8019064 <rfalTransceiveRx+0x294>)
 8019058:	2257      	movs	r2, #87	; 0x57
 801905a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801905c:	f7ff fb3c 	bl	80186d8 <rfalErrorHandling>
                break;
 8019060:	e1f9      	b.n	8019456 <rfalTransceiveRx+0x686>
 8019062:	bf00      	nop
 8019064:	200039e4 	.word	0x200039e4
 8019068:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019072:	2b00      	cmp	r3, #0
 8019074:	d00b      	beq.n	801908e <rfalTransceiveRx+0x2be>
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	f003 0310 	and.w	r3, r3, #16
 801907c:	2b00      	cmp	r3, #0
 801907e:	d106      	bne.n	801908e <rfalTransceiveRx+0x2be>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 8019080:	4b9a      	ldr	r3, [pc, #616]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019082:	2225      	movs	r2, #37	; 0x25
 8019084:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019086:	4b99      	ldr	r3, [pc, #612]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019088:	225a      	movs	r2, #90	; 0x5a
 801908a:	751a      	strb	r2, [r3, #20]
                 break;
 801908c:	e1e3      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	f003 0310 	and.w	r3, r3, #16
 8019094:	2b00      	cmp	r3, #0
 8019096:	d103      	bne.n	80190a0 <rfalTransceiveRx+0x2d0>
 8019098:	4b94      	ldr	r3, [pc, #592]	; (80192ec <rfalTransceiveRx+0x51c>)
 801909a:	7e1b      	ldrb	r3, [r3, #24]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d014      	beq.n	80190ca <rfalTransceiveRx+0x2fa>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 80190a0:	f000 fa0a 	bl	80194b8 <rfalFIFOStatusIsIncompleteByte>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d003      	beq.n	80190b2 <rfalTransceiveRx+0x2e2>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80190aa:	4b90      	ldr	r3, [pc, #576]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190ac:	2228      	movs	r2, #40	; 0x28
 80190ae:	82da      	strh	r2, [r3, #22]
 80190b0:	e007      	b.n	80190c2 <rfalTransceiveRx+0x2f2>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 80190b2:	f000 fa13 	bl	80194dc <rfalFIFOStatusIsMissingPar>
 80190b6:	4603      	mov	r3, r0
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d002      	beq.n	80190c2 <rfalTransceiveRx+0x2f2>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 80190bc:	4b8b      	ldr	r3, [pc, #556]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190be:	2209      	movs	r2, #9
 80190c0:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 80190c2:	4b8a      	ldr	r3, [pc, #552]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190c4:	2257      	movs	r2, #87	; 0x57
 80190c6:	751a      	strb	r2, [r3, #20]
 80190c8:	e006      	b.n	80190d8 <rfalTransceiveRx+0x308>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 80190ca:	4b88      	ldr	r3, [pc, #544]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190cc:	2203      	movs	r2, #3
 80190ce:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80190d0:	4b86      	ldr	r3, [pc, #536]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190d2:	225a      	movs	r2, #90	; 0x5a
 80190d4:	751a      	strb	r2, [r3, #20]
                break;
 80190d6:	e1be      	b.n	8019456 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 80190d8:	f000 f9e2 	bl	80194a0 <rfalFIFOStatusGetNumBytes>
 80190dc:	4603      	mov	r3, r0
 80190de:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 80190e0:	4b82      	ldr	r3, [pc, #520]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190e4:	f003 0302 	and.w	r3, r3, #2
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d11f      	bne.n	801912c <rfalTransceiveRx+0x35c>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 80190ec:	2240      	movs	r2, #64	; 0x40
 80190ee:	2140      	movs	r1, #64	; 0x40
 80190f0:	2009      	movs	r0, #9
 80190f2:	f7ea fb1f 	bl	8003734 <st25r3911CheckReg>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d017      	beq.n	801912c <rfalTransceiveRx+0x35c>
 80190fc:	4b7b      	ldr	r3, [pc, #492]	; (80192ec <rfalTransceiveRx+0x51c>)
 80190fe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8019100:	461a      	mov	r2, r3
 8019102:	7bfb      	ldrb	r3, [r7, #15]
 8019104:	4413      	add	r3, r2
 8019106:	2b00      	cmp	r3, #0
 8019108:	d010      	beq.n	801912c <rfalTransceiveRx+0x35c>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 801910a:	7bfb      	ldrb	r3, [r7, #15]
 801910c:	2b02      	cmp	r3, #2
 801910e:	d903      	bls.n	8019118 <rfalTransceiveRx+0x348>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 8019110:	7bfb      	ldrb	r3, [r7, #15]
 8019112:	3b02      	subs	r3, #2
 8019114:	73fb      	strb	r3, [r7, #15]
 8019116:	e009      	b.n	801912c <rfalTransceiveRx+0x35c>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 8019118:	4b74      	ldr	r3, [pc, #464]	; (80192ec <rfalTransceiveRx+0x51c>)
 801911a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801911c:	2b02      	cmp	r3, #2
 801911e:	d905      	bls.n	801912c <rfalTransceiveRx+0x35c>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 8019120:	4b72      	ldr	r3, [pc, #456]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019122:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8019124:	3b02      	subs	r3, #2
 8019126:	b29a      	uxth	r2, r3
 8019128:	4b70      	ldr	r3, [pc, #448]	; (80192ec <rfalTransceiveRx+0x51c>)
 801912a:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 801912c:	4b6f      	ldr	r3, [pc, #444]	; (80192ec <rfalTransceiveRx+0x51c>)
 801912e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019130:	7bfb      	ldrb	r3, [r7, #15]
 8019132:	b29b      	uxth	r3, r3
 8019134:	4413      	add	r3, r2
 8019136:	b29a      	uxth	r2, r3
 8019138:	4b6c      	ldr	r3, [pc, #432]	; (80192ec <rfalTransceiveRx+0x51c>)
 801913a:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 801913c:	4b6b      	ldr	r3, [pc, #428]	; (80192ec <rfalTransceiveRx+0x51c>)
 801913e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019140:	4b6a      	ldr	r3, [pc, #424]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019144:	3307      	adds	r3, #7
 8019146:	08db      	lsrs	r3, r3, #3
 8019148:	b29b      	uxth	r3, r3
 801914a:	429a      	cmp	r2, r3
 801914c:	d90f      	bls.n	801916e <rfalTransceiveRx+0x39e>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 801914e:	4b67      	ldr	r3, [pc, #412]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019152:	3307      	adds	r3, #7
 8019154:	08db      	lsrs	r3, r3, #3
 8019156:	b2da      	uxtb	r2, r3
 8019158:	4b64      	ldr	r3, [pc, #400]	; (80192ec <rfalTransceiveRx+0x51c>)
 801915a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801915c:	b2db      	uxtb	r3, r3
 801915e:	1ad3      	subs	r3, r2, r3
 8019160:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 8019162:	4b62      	ldr	r3, [pc, #392]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019164:	2201      	movs	r2, #1
 8019166:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019168:	4b60      	ldr	r3, [pc, #384]	; (80192ec <rfalTransceiveRx+0x51c>)
 801916a:	225a      	movs	r2, #90	; 0x5a
 801916c:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 801916e:	4b5f      	ldr	r3, [pc, #380]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019172:	4a5e      	ldr	r2, [pc, #376]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019174:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8019176:	4413      	add	r3, r2
 8019178:	7bfa      	ldrb	r2, [r7, #15]
 801917a:	4611      	mov	r1, r2
 801917c:	4618      	mov	r0, r3
 801917e:	f7ea ff55 	bl	800402c <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 8019182:	4b5a      	ldr	r3, [pc, #360]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019186:	2b00      	cmp	r3, #0
 8019188:	d019      	beq.n	80191be <rfalTransceiveRx+0x3ee>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 801918a:	4b58      	ldr	r3, [pc, #352]	; (80192ec <rfalTransceiveRx+0x51c>)
 801918c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801918e:	4b57      	ldr	r3, [pc, #348]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019192:	00d2      	lsls	r2, r2, #3
 8019194:	b292      	uxth	r2, r2
 8019196:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 8019198:	f000 f98e 	bl	80194b8 <rfalFIFOStatusIsIncompleteByte>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d00d      	beq.n	80191be <rfalTransceiveRx+0x3ee>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 80191a2:	f000 f9ad 	bl	8019500 <rfalFIFOGetNumIncompleteBits>
 80191a6:	4603      	mov	r3, r0
 80191a8:	f1c3 0208 	rsb	r2, r3, #8
 80191ac:	4b4f      	ldr	r3, [pc, #316]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b0:	8819      	ldrh	r1, [r3, #0]
 80191b2:	b292      	uxth	r2, r2
 80191b4:	4b4d      	ldr	r3, [pc, #308]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b8:	1a8a      	subs	r2, r1, r2
 80191ba:	b292      	uxth	r2, r2
 80191bc:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 80191be:	4b4b      	ldr	r3, [pc, #300]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191c0:	785b      	ldrb	r3, [r3, #1]
 80191c2:	2b07      	cmp	r3, #7
 80191c4:	d003      	beq.n	80191ce <rfalTransceiveRx+0x3fe>
 80191c6:	4b49      	ldr	r3, [pc, #292]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191c8:	785b      	ldrb	r3, [r3, #1]
 80191ca:	2b08      	cmp	r3, #8
 80191cc:	d165      	bne.n	801929a <rfalTransceiveRx+0x4ca>
 80191ce:	4b47      	ldr	r3, [pc, #284]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191d0:	8adb      	ldrh	r3, [r3, #22]
 80191d2:	2b02      	cmp	r3, #2
 80191d4:	d161      	bne.n	801929a <rfalTransceiveRx+0x4ca>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80191da:	4b44      	ldr	r3, [pc, #272]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80191de:	4b43      	ldr	r3, [pc, #268]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191e0:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 80191e2:	4b42      	ldr	r3, [pc, #264]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191e4:	f8d3 53d4 	ldr.w	r5, [r3, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 80191e8:	4b40      	ldr	r3, [pc, #256]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191ea:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80191ee:	3307      	adds	r3, #7
 80191f0:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80191f2:	b29e      	uxth	r6, r3
 80191f4:	4b3d      	ldr	r3, [pc, #244]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80191fa:	4a3c      	ldr	r2, [pc, #240]	; (80192ec <rfalTransceiveRx+0x51c>)
 80191fc:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 8019200:	493a      	ldr	r1, [pc, #232]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019202:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8019204:	2908      	cmp	r1, #8
 8019206:	bf0c      	ite	eq
 8019208:	2101      	moveq	r1, #1
 801920a:	2100      	movne	r1, #0
 801920c:	b2c9      	uxtb	r1, r1
 801920e:	9103      	str	r1, [sp, #12]
 8019210:	9202      	str	r2, [sp, #8]
 8019212:	9301      	str	r3, [sp, #4]
 8019214:	1dbb      	adds	r3, r7, #6
 8019216:	9300      	str	r3, [sp, #0]
 8019218:	4633      	mov	r3, r6
 801921a:	462a      	mov	r2, r5
 801921c:	4621      	mov	r1, r4
 801921e:	f7f6 fd93 	bl	800fd48 <iso15693VICCDecode>
 8019222:	4603      	mov	r3, r0
 8019224:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 8019226:	89bb      	ldrh	r3, [r7, #12]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d002      	beq.n	8019232 <rfalTransceiveRx+0x462>
 801922c:	89bb      	ldrh	r3, [r7, #12]
 801922e:	2b15      	cmp	r3, #21
 8019230:	d11f      	bne.n	8019272 <rfalTransceiveRx+0x4a2>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8019232:	4b2e      	ldr	r3, [pc, #184]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019234:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019238:	f003 0302 	and.w	r3, r3, #2
 801923c:	2b00      	cmp	r3, #0
 801923e:	d118      	bne.n	8019272 <rfalTransceiveRx+0x4a2>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8019240:	4b2a      	ldr	r3, [pc, #168]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019242:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8019246:	881b      	ldrh	r3, [r3, #0]
 8019248:	f003 0307 	and.w	r3, r3, #7
 801924c:	b29b      	uxth	r3, r3
 801924e:	2b00      	cmp	r3, #0
 8019250:	d10f      	bne.n	8019272 <rfalTransceiveRx+0x4a2>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8019252:	4b26      	ldr	r3, [pc, #152]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019254:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8019258:	881b      	ldrh	r3, [r3, #0]
 801925a:	2b0f      	cmp	r3, #15
 801925c:	d909      	bls.n	8019272 <rfalTransceiveRx+0x4a2>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 801925e:	4b23      	ldr	r3, [pc, #140]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019260:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8019264:	881a      	ldrh	r2, [r3, #0]
 8019266:	4b21      	ldr	r3, [pc, #132]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019268:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801926c:	3a10      	subs	r2, #16
 801926e:	b292      	uxth	r2, r2
 8019270:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8019272:	4a1e      	ldr	r2, [pc, #120]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019274:	4b1d      	ldr	r3, [pc, #116]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019276:	f102 041c 	add.w	r4, r2, #28
 801927a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801927e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 801928a:	89bb      	ldrh	r3, [r7, #12]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d001      	beq.n	8019294 <rfalTransceiveRx+0x4c4>
 8019290:	89bb      	ldrh	r3, [r7, #12]
 8019292:	e000      	b.n	8019296 <rfalTransceiveRx+0x4c6>
 8019294:	2302      	movs	r3, #2
 8019296:	4a15      	ldr	r2, [pc, #84]	; (80192ec <rfalTransceiveRx+0x51c>)
 8019298:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 801929a:	4b14      	ldr	r3, [pc, #80]	; (80192ec <rfalTransceiveRx+0x51c>)
 801929c:	8adb      	ldrh	r3, [r3, #22]
 801929e:	2b02      	cmp	r3, #2
 80192a0:	d003      	beq.n	80192aa <rfalTransceiveRx+0x4da>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 80192a2:	4b12      	ldr	r3, [pc, #72]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192a4:	225a      	movs	r2, #90	; 0x5a
 80192a6:	751a      	strb	r2, [r3, #20]
                break;
 80192a8:	e0d5      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 80192aa:	4b10      	ldr	r3, [pc, #64]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192ac:	785b      	ldrb	r3, [r3, #1]
 80192ae:	2b09      	cmp	r3, #9
 80192b0:	d003      	beq.n	80192ba <rfalTransceiveRx+0x4ea>
 80192b2:	4b0e      	ldr	r3, [pc, #56]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192b4:	785b      	ldrb	r3, [r3, #1]
 80192b6:	2b0d      	cmp	r3, #13
 80192b8:	d103      	bne.n	80192c2 <rfalTransceiveRx+0x4f2>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 80192ba:	4b0c      	ldr	r3, [pc, #48]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192bc:	2258      	movs	r2, #88	; 0x58
 80192be:	751a      	strb	r2, [r3, #20]
                break;
 80192c0:	e0c9      	b.n	8019456 <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 80192c2:	4b0a      	ldr	r3, [pc, #40]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192c4:	2259      	movs	r2, #89	; 0x59
 80192c6:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 80192c8:	4b08      	ldr	r3, [pc, #32]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192ca:	799b      	ldrb	r3, [r3, #6]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d003      	beq.n	80192d8 <rfalTransceiveRx+0x508>
 80192d0:	2100      	movs	r1, #0
 80192d2:	2001      	movs	r0, #1
 80192d4:	f7ea fd20 	bl	8003d18 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 80192d8:	f7ff fa82 	bl	80187e0 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 80192dc:	4b03      	ldr	r3, [pc, #12]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192de:	2200      	movs	r2, #0
 80192e0:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 80192e2:	4b02      	ldr	r3, [pc, #8]	; (80192ec <rfalTransceiveRx+0x51c>)
 80192e4:	2200      	movs	r2, #0
 80192e6:	751a      	strb	r2, [r3, #20]
            break;
 80192e8:	e0b5      	b.n	8019456 <rfalTransceiveRx+0x686>
 80192ea:	bf00      	nop
 80192ec:	200039e4 	.word	0x200039e4
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 80192f0:	200a      	movs	r0, #10
 80192f2:	f7eb f965 	bl	80045c0 <timerCalculateTimer>
 80192f6:	4603      	mov	r3, r0
 80192f8:	4a59      	ldr	r2, [pc, #356]	; (8019460 <rfalTransceiveRx+0x690>)
 80192fa:	6493      	str	r3, [r2, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 80192fc:	f000 f8d0 	bl	80194a0 <rfalFIFOStatusGetNumBytes>
 8019300:	4603      	mov	r3, r0
 8019302:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 8019304:	4b56      	ldr	r3, [pc, #344]	; (8019460 <rfalTransceiveRx+0x690>)
 8019306:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019308:	7bfb      	ldrb	r3, [r7, #15]
 801930a:	b29b      	uxth	r3, r3
 801930c:	4413      	add	r3, r2
 801930e:	b29a      	uxth	r2, r3
 8019310:	4b53      	ldr	r3, [pc, #332]	; (8019460 <rfalTransceiveRx+0x690>)
 8019312:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8019314:	4b52      	ldr	r3, [pc, #328]	; (8019460 <rfalTransceiveRx+0x690>)
 8019316:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019318:	4b51      	ldr	r3, [pc, #324]	; (8019460 <rfalTransceiveRx+0x690>)
 801931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801931c:	3307      	adds	r3, #7
 801931e:	08db      	lsrs	r3, r3, #3
 8019320:	b29b      	uxth	r3, r3
 8019322:	429a      	cmp	r2, r3
 8019324:	d90a      	bls.n	801933c <rfalTransceiveRx+0x56c>
 8019326:	4b4e      	ldr	r3, [pc, #312]	; (8019460 <rfalTransceiveRx+0x690>)
 8019328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801932a:	3307      	adds	r3, #7
 801932c:	08db      	lsrs	r3, r3, #3
 801932e:	b2da      	uxtb	r2, r3
 8019330:	4b4b      	ldr	r3, [pc, #300]	; (8019460 <rfalTransceiveRx+0x690>)
 8019332:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8019334:	b2db      	uxtb	r3, r3
 8019336:	1ad3      	subs	r3, r2, r3
 8019338:	b2db      	uxtb	r3, r3
 801933a:	e000      	b.n	801933e <rfalTransceiveRx+0x56e>
 801933c:	7bfb      	ldrb	r3, [r7, #15]
 801933e:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8019340:	4b47      	ldr	r3, [pc, #284]	; (8019460 <rfalTransceiveRx+0x690>)
 8019342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019344:	4a46      	ldr	r2, [pc, #280]	; (8019460 <rfalTransceiveRx+0x690>)
 8019346:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8019348:	4413      	add	r3, r2
 801934a:	7bba      	ldrb	r2, [r7, #14]
 801934c:	4611      	mov	r1, r2
 801934e:	4618      	mov	r0, r3
 8019350:	f7ea fe6c 	bl	800402c <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8019354:	4b42      	ldr	r3, [pc, #264]	; (8019460 <rfalTransceiveRx+0x690>)
 8019356:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8019358:	7bbb      	ldrb	r3, [r7, #14]
 801935a:	b29b      	uxth	r3, r3
 801935c:	4413      	add	r3, r2
 801935e:	b29a      	uxth	r2, r3
 8019360:	4b3f      	ldr	r3, [pc, #252]	; (8019460 <rfalTransceiveRx+0x690>)
 8019362:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 8019364:	7bba      	ldrb	r2, [r7, #14]
 8019366:	7bfb      	ldrb	r3, [r7, #15]
 8019368:	429a      	cmp	r2, r3
 801936a:	d207      	bcs.n	801937c <rfalTransceiveRx+0x5ac>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 801936c:	7bfa      	ldrb	r2, [r7, #15]
 801936e:	7bbb      	ldrb	r3, [r7, #14]
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	b2db      	uxtb	r3, r3
 8019374:	4619      	mov	r1, r3
 8019376:	2000      	movs	r0, #0
 8019378:	f7ea fe58 	bl	800402c <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 801937c:	f000 f884 	bl	8019488 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8019380:	4b37      	ldr	r3, [pc, #220]	; (8019460 <rfalTransceiveRx+0x690>)
 8019382:	2254      	movs	r2, #84	; 0x54
 8019384:	751a      	strb	r2, [r3, #20]
            break;
 8019386:	e066      	b.n	8019456 <rfalTransceiveRx+0x686>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8019388:	4b35      	ldr	r3, [pc, #212]	; (8019460 <rfalTransceiveRx+0x690>)
 801938a:	799b      	ldrb	r3, [r3, #6]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d003      	beq.n	8019398 <rfalTransceiveRx+0x5c8>
 8019390:	2100      	movs	r1, #0
 8019392:	2001      	movs	r0, #1
 8019394:	f7ea fcc0 	bl	8003d18 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8019398:	f7ff fa22 	bl	80187e0 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 801939c:	4b30      	ldr	r3, [pc, #192]	; (8019460 <rfalTransceiveRx+0x690>)
 801939e:	8adb      	ldrh	r3, [r3, #22]
 80193a0:	2b02      	cmp	r3, #2
 80193a2:	d102      	bne.n	80193aa <rfalTransceiveRx+0x5da>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 80193a4:	4b2e      	ldr	r3, [pc, #184]	; (8019460 <rfalTransceiveRx+0x690>)
 80193a6:	2208      	movs	r2, #8
 80193a8:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 80193aa:	4b2d      	ldr	r3, [pc, #180]	; (8019460 <rfalTransceiveRx+0x690>)
 80193ac:	2200      	movs	r2, #0
 80193ae:	751a      	strb	r2, [r3, #20]
            break;
 80193b0:	e051      	b.n	8019456 <rfalTransceiveRx+0x686>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 80193b2:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80193b6:	f7eb f87b 	bl	80044b0 <st25r3911GetInterrupt>
 80193ba:	4603      	mov	r3, r0
 80193bc:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d043      	beq.n	801944c <rfalTransceiveRx+0x67c>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d002      	beq.n	80193d4 <rfalTransceiveRx+0x604>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 80193ce:	4b24      	ldr	r3, [pc, #144]	; (8019460 <rfalTransceiveRx+0x690>)
 80193d0:	2253      	movs	r2, #83	; 0x53
 80193d2:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d038      	beq.n	8019450 <rfalTransceiveRx+0x680>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 80193de:	4b20      	ldr	r3, [pc, #128]	; (8019460 <rfalTransceiveRx+0x690>)
 80193e0:	2225      	movs	r2, #37	; 0x25
 80193e2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80193e4:	4b1e      	ldr	r3, [pc, #120]	; (8019460 <rfalTransceiveRx+0x690>)
 80193e6:	225a      	movs	r2, #90	; 0x5a
 80193e8:	751a      	strb	r2, [r3, #20]
            }
            break;
 80193ea:	e031      	b.n	8019450 <rfalTransceiveRx+0x680>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 80193ec:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80193f0:	f7eb f85e 	bl	80044b0 <st25r3911GetInterrupt>
 80193f4:	4603      	mov	r3, r0
 80193f6:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d02a      	beq.n	8019454 <rfalTransceiveRx+0x684>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 80193fe:	68bb      	ldr	r3, [r7, #8]
 8019400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019404:	2b00      	cmp	r3, #0
 8019406:	d003      	beq.n	8019410 <rfalTransceiveRx+0x640>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8019408:	4b15      	ldr	r3, [pc, #84]	; (8019460 <rfalTransceiveRx+0x690>)
 801940a:	2259      	movs	r2, #89	; 0x59
 801940c:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 801940e:	e022      	b.n	8019456 <rfalTransceiveRx+0x686>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019416:	2b00      	cmp	r3, #0
 8019418:	d006      	beq.n	8019428 <rfalTransceiveRx+0x658>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 801941a:	4b11      	ldr	r3, [pc, #68]	; (8019460 <rfalTransceiveRx+0x690>)
 801941c:	221d      	movs	r2, #29
 801941e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8019420:	4b0f      	ldr	r3, [pc, #60]	; (8019460 <rfalTransceiveRx+0x690>)
 8019422:	225a      	movs	r2, #90	; 0x5a
 8019424:	751a      	strb	r2, [r3, #20]
            break;
 8019426:	e016      	b.n	8019456 <rfalTransceiveRx+0x686>
               gRFAL.TxRx.status = ERR_IO;
 8019428:	4b0d      	ldr	r3, [pc, #52]	; (8019460 <rfalTransceiveRx+0x690>)
 801942a:	2203      	movs	r2, #3
 801942c:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801942e:	4b0c      	ldr	r3, [pc, #48]	; (8019460 <rfalTransceiveRx+0x690>)
 8019430:	225a      	movs	r2, #90	; 0x5a
 8019432:	751a      	strb	r2, [r3, #20]
            break;
 8019434:	e00f      	b.n	8019456 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8019436:	4b0a      	ldr	r3, [pc, #40]	; (8019460 <rfalTransceiveRx+0x690>)
 8019438:	2208      	movs	r2, #8
 801943a:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801943c:	4b08      	ldr	r3, [pc, #32]	; (8019460 <rfalTransceiveRx+0x690>)
 801943e:	225a      	movs	r2, #90	; 0x5a
 8019440:	751a      	strb	r2, [r3, #20]
            break;           
 8019442:	e008      	b.n	8019456 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8019444:	bf00      	nop
 8019446:	e006      	b.n	8019456 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 8019448:	bf00      	nop
 801944a:	e004      	b.n	8019456 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 801944c:	bf00      	nop
 801944e:	e002      	b.n	8019456 <rfalTransceiveRx+0x686>
            break;
 8019450:	bf00      	nop
 8019452:	e000      	b.n	8019456 <rfalTransceiveRx+0x686>
               break;  /* No interrupt to process */
 8019454:	bf00      	nop
    }    
}
 8019456:	bf00      	nop
 8019458:	3714      	adds	r7, #20
 801945a:	46bd      	mov	sp, r7
 801945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801945e:	bf00      	nop
 8019460:	200039e4 	.word	0x200039e4

08019464 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 8019464:	b580      	push	{r7, lr}
 8019466:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8019468:	4b05      	ldr	r3, [pc, #20]	; (8019480 <rfalFIFOStatusUpdate+0x1c>)
 801946a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801946e:	2bff      	cmp	r3, #255	; 0xff
 8019470:	d104      	bne.n	801947c <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 8019472:	2202      	movs	r2, #2
 8019474:	4903      	ldr	r1, [pc, #12]	; (8019484 <rfalFIFOStatusUpdate+0x20>)
 8019476:	201a      	movs	r0, #26
 8019478:	f7ea fbae 	bl	8003bd8 <st25r3911ReadMultipleRegisters>
    }
}
 801947c:	bf00      	nop
 801947e:	bd80      	pop	{r7, pc}
 8019480:	200039e4 	.word	0x200039e4
 8019484:	20003a22 	.word	0x20003a22

08019488 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8019488:	b480      	push	{r7}
 801948a:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 801948c:	4b03      	ldr	r3, [pc, #12]	; (801949c <rfalFIFOStatusClear+0x14>)
 801948e:	22ff      	movs	r2, #255	; 0xff
 8019490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8019494:	bf00      	nop
 8019496:	46bd      	mov	sp, r7
 8019498:	bc80      	pop	{r7}
 801949a:	4770      	bx	lr
 801949c:	200039e4 	.word	0x200039e4

080194a0 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 80194a4:	f7ff ffde 	bl	8019464 <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 80194a8:	4b02      	ldr	r3, [pc, #8]	; (80194b4 <rfalFIFOStatusGetNumBytes+0x14>)
 80194aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 80194ae:	4618      	mov	r0, r3
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	200039e4 	.word	0x200039e4

080194b8 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 80194bc:	f7ff ffd2 	bl	8019464 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 80194c0:	4b05      	ldr	r3, [pc, #20]	; (80194d8 <rfalFIFOStatusIsIncompleteByte+0x20>)
 80194c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80194c6:	f003 031e 	and.w	r3, r3, #30
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	bf14      	ite	ne
 80194ce:	2301      	movne	r3, #1
 80194d0:	2300      	moveq	r3, #0
 80194d2:	b2db      	uxtb	r3, r3
}
 80194d4:	4618      	mov	r0, r3
 80194d6:	bd80      	pop	{r7, pc}
 80194d8:	200039e4 	.word	0x200039e4

080194dc <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 80194e0:	f7ff ffc0 	bl	8019464 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 80194e4:	4b05      	ldr	r3, [pc, #20]	; (80194fc <rfalFIFOStatusIsMissingPar+0x20>)
 80194e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80194ea:	f003 0301 	and.w	r3, r3, #1
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	bf14      	ite	ne
 80194f2:	2301      	movne	r3, #1
 80194f4:	2300      	moveq	r3, #0
 80194f6:	b2db      	uxtb	r3, r3
}
 80194f8:	4618      	mov	r0, r3
 80194fa:	bd80      	pop	{r7, pc}
 80194fc:	200039e4 	.word	0x200039e4

08019500 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 8019500:	b580      	push	{r7, lr}
 8019502:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8019504:	f7ff ffae 	bl	8019464 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 8019508:	4b04      	ldr	r3, [pc, #16]	; (801951c <rfalFIFOGetNumIncompleteBits+0x1c>)
 801950a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801950e:	085b      	lsrs	r3, r3, #1
 8019510:	b2db      	uxtb	r3, r3
 8019512:	f003 0307 	and.w	r3, r3, #7
 8019516:	b2db      	uxtb	r3, r3
}
 8019518:	4618      	mov	r0, r3
 801951a:	bd80      	pop	{r7, pc}
 801951c:	200039e4 	.word	0x200039e4

08019520 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 8019520:	b580      	push	{r7, lr}
 8019522:	b086      	sub	sp, #24
 8019524:	af00      	add	r7, sp, #0
 8019526:	60b9      	str	r1, [r7, #8]
 8019528:	607b      	str	r3, [r7, #4]
 801952a:	4603      	mov	r3, r0
 801952c:	73fb      	strb	r3, [r7, #15]
 801952e:	4613      	mov	r3, r2
 8019530:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8019532:	2208      	movs	r2, #8
 8019534:	2108      	movs	r1, #8
 8019536:	2002      	movs	r0, #2
 8019538:	f7ea f8fc 	bl	8003734 <st25r3911CheckReg>
 801953c:	4603      	mov	r3, r0
 801953e:	f083 0301 	eor.w	r3, r3, #1
 8019542:	b2db      	uxtb	r3, r3
 8019544:	2b00      	cmp	r3, #0
 8019546:	d10b      	bne.n	8019560 <rfalISO14443ATransceiveShortFrame+0x40>
 8019548:	4b70      	ldr	r3, [pc, #448]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801954a:	781b      	ldrb	r3, [r3, #0]
 801954c:	2b01      	cmp	r3, #1
 801954e:	d907      	bls.n	8019560 <rfalISO14443ATransceiveShortFrame+0x40>
 8019550:	4b6e      	ldr	r3, [pc, #440]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019552:	785b      	ldrb	r3, [r3, #1]
 8019554:	2b01      	cmp	r3, #1
 8019556:	d005      	beq.n	8019564 <rfalISO14443ATransceiveShortFrame+0x44>
 8019558:	4b6c      	ldr	r3, [pc, #432]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801955a:	785b      	ldrb	r3, [r3, #1]
 801955c:	2b02      	cmp	r3, #2
 801955e:	d001      	beq.n	8019564 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 8019560:	2321      	movs	r3, #33	; 0x21
 8019562:	e0cf      	b.n	8019704 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d006      	beq.n	8019578 <rfalISO14443ATransceiveShortFrame+0x58>
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d003      	beq.n	8019578 <rfalISO14443ATransceiveShortFrame+0x58>
 8019570:	6a3b      	ldr	r3, [r7, #32]
 8019572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019576:	d101      	bne.n	801957c <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 8019578:	2307      	movs	r3, #7
 801957a:	e0c3      	b.n	8019704 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 801957c:	7bfb      	ldrb	r3, [r7, #15]
 801957e:	2b26      	cmp	r3, #38	; 0x26
 8019580:	d004      	beq.n	801958c <rfalISO14443ATransceiveShortFrame+0x6c>
 8019582:	2b52      	cmp	r3, #82	; 0x52
 8019584:	d105      	bne.n	8019592 <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 8019586:	23c7      	movs	r3, #199	; 0xc7
 8019588:	757b      	strb	r3, [r7, #21]
            break;
 801958a:	e004      	b.n	8019596 <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 801958c:	23c6      	movs	r3, #198	; 0xc6
 801958e:	757b      	strb	r3, [r7, #21]
            break;
 8019590:	e001      	b.n	8019596 <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 8019592:	2307      	movs	r3, #7
 8019594:	e0b6      	b.n	8019704 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 8019596:	2101      	movs	r1, #1
 8019598:	2005      	movs	r0, #5
 801959a:	f7ea fc74 	bl	8003e86 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801959e:	2180      	movs	r1, #128	; 0x80
 80195a0:	2009      	movs	r0, #9
 80195a2:	f7ea fc70 	bl	8003e86 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 80195a6:	bf00      	nop
 80195a8:	f7fe fdce 	bl	8018148 <rfalIsGTExpired>
 80195ac:	4603      	mov	r3, r0
 80195ae:	f083 0301 	eor.w	r3, r3, #1
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d1f7      	bne.n	80195a8 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 80195b8:	bf00      	nop
 80195ba:	2204      	movs	r2, #4
 80195bc:	2104      	movs	r1, #4
 80195be:	202b      	movs	r0, #43	; 0x2b
 80195c0:	f7ea f8b8 	bl	8003734 <st25r3911CheckReg>
 80195c4:	4603      	mov	r3, r0
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d1f7      	bne.n	80195ba <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 80195ca:	4b50      	ldr	r3, [pc, #320]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80195cc:	2200      	movs	r2, #0
 80195ce:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 80195d0:	4b4e      	ldr	r3, [pc, #312]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80195d2:	2203      	movs	r2, #3
 80195d4:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 80195d6:	4a4d      	ldr	r2, [pc, #308]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 80195dc:	7bbb      	ldrb	r3, [r7, #14]
 80195de:	b29a      	uxth	r2, r3
 80195e0:	4b4a      	ldr	r3, [pc, #296]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80195e2:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 80195e4:	4a49      	ldr	r2, [pc, #292]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 80195ea:	6a3b      	ldr	r3, [r7, #32]
 80195ec:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80195f0:	4a47      	ldr	r2, [pc, #284]	; (8019710 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 80195f2:	4293      	cmp	r3, r2
 80195f4:	bf28      	it	cs
 80195f6:	4613      	movcs	r3, r2
 80195f8:	099b      	lsrs	r3, r3, #6
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7ea f8dc 	bl	80037b8 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8019600:	4b42      	ldr	r3, [pc, #264]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019602:	68db      	ldr	r3, [r3, #12]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d010      	beq.n	801962a <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8019608:	4b40      	ldr	r3, [pc, #256]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801960a:	68db      	ldr	r3, [r3, #12]
 801960c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8019610:	d306      	bcc.n	8019620 <rfalISO14443ATransceiveShortFrame+0x100>
 8019612:	4b3e      	ldr	r3, [pc, #248]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019614:	68db      	ldr	r3, [r3, #12]
 8019616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801961a:	099b      	lsrs	r3, r3, #6
 801961c:	b2db      	uxtb	r3, r3
 801961e:	e000      	b.n	8019622 <rfalISO14443ATransceiveShortFrame+0x102>
 8019620:	2304      	movs	r3, #4
 8019622:	4619      	mov	r1, r3
 8019624:	200e      	movs	r0, #14
 8019626:	f7ea fbbf 	bl	8003da8 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 801962a:	4b38      	ldr	r3, [pc, #224]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801962c:	691b      	ldr	r3, [r3, #16]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d014      	beq.n	801965c <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 8019632:	4b36      	ldr	r3, [pc, #216]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019634:	691b      	ldr	r3, [r3, #16]
 8019636:	f240 423b 	movw	r2, #1083	; 0x43b
 801963a:	4293      	cmp	r3, r2
 801963c:	d804      	bhi.n	8019648 <rfalISO14443ATransceiveShortFrame+0x128>
 801963e:	4b33      	ldr	r3, [pc, #204]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019640:	691b      	ldr	r3, [r3, #16]
 8019642:	08db      	lsrs	r3, r3, #3
 8019644:	b29b      	uxth	r3, r3
 8019646:	e005      	b.n	8019654 <rfalISO14443ATransceiveShortFrame+0x134>
 8019648:	4b30      	ldr	r3, [pc, #192]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801964a:	691b      	ldr	r3, [r3, #16]
 801964c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8019650:	08db      	lsrs	r3, r3, #3
 8019652:	b29b      	uxth	r3, r3
 8019654:	2120      	movs	r1, #32
 8019656:	4618      	mov	r0, r3
 8019658:	f7ea f838 	bl	80036cc <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 801965c:	f7ff f8d6 	bl	801880c <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 8019660:	2004      	movs	r0, #4
 8019662:	f7ea ff25 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 8019666:	2004      	movs	r0, #4
 8019668:	f7ea ff5e 	bl	8004528 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 801966c:	4b27      	ldr	r3, [pc, #156]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801966e:	795b      	ldrb	r3, [r3, #5]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d005      	beq.n	8019680 <rfalISO14443ATransceiveShortFrame+0x160>
 8019674:	4b25      	ldr	r3, [pc, #148]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 8019676:	795b      	ldrb	r3, [r3, #5]
 8019678:	4619      	mov	r1, r3
 801967a:	2001      	movs	r0, #1
 801967c:	f7ea fb4c 	bl	8003d18 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 8019680:	2100      	movs	r1, #0
 8019682:	201e      	movs	r0, #30
 8019684:	f7ea fb90 	bl	8003da8 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 8019688:	7d7b      	ldrb	r3, [r7, #21]
 801968a:	4618      	mov	r0, r3
 801968c:	f7ea fd1a 	bl	80040c4 <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 8019690:	6a3b      	ldr	r3, [r7, #32]
 8019692:	f646 12ef 	movw	r2, #27119	; 0x69ef
 8019696:	4293      	cmp	r3, r2
 8019698:	d906      	bls.n	80196a8 <rfalISO14443ATransceiveShortFrame+0x188>
 801969a:	6a3b      	ldr	r3, [r7, #32]
 801969c:	4a1d      	ldr	r2, [pc, #116]	; (8019714 <rfalISO14443ATransceiveShortFrame+0x1f4>)
 801969e:	fba2 2303 	umull	r2, r3, r2, r3
 80196a2:	0b1b      	lsrs	r3, r3, #12
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	e000      	b.n	80196aa <rfalISO14443ATransceiveShortFrame+0x18a>
 80196a8:	2301      	movs	r3, #1
 80196aa:	4619      	mov	r1, r3
 80196ac:	2008      	movs	r0, #8
 80196ae:	f7ea feab 	bl	8004408 <st25r3911WaitForInterruptsTimed>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d102      	bne.n	80196be <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 80196b8:	2303      	movs	r3, #3
 80196ba:	82fb      	strh	r3, [r7, #22]
 80196bc:	e016      	b.n	80196ec <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 80196be:	4b13      	ldr	r3, [pc, #76]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196c0:	799b      	ldrb	r3, [r3, #6]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d005      	beq.n	80196d2 <rfalISO14443ATransceiveShortFrame+0x1b2>
 80196c6:	4b11      	ldr	r3, [pc, #68]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196c8:	799b      	ldrb	r3, [r3, #6]
 80196ca:	4619      	mov	r1, r3
 80196cc:	2001      	movs	r0, #1
 80196ce:	f7ea fb23 	bl	8003d18 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 80196d2:	4b0e      	ldr	r3, [pc, #56]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196d4:	2203      	movs	r2, #3
 80196d6:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80196d8:	4b0c      	ldr	r3, [pc, #48]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196da:	2251      	movs	r2, #81	; 0x51
 80196dc:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 80196de:	4b0b      	ldr	r3, [pc, #44]	; (801970c <rfalISO14443ATransceiveShortFrame+0x1ec>)
 80196e0:	2202      	movs	r2, #2
 80196e2:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 80196e4:	f7fe ff62 	bl	80185ac <rfalTransceiveBlockingRx>
 80196e8:	4603      	mov	r3, r0
 80196ea:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80196ec:	2004      	movs	r0, #4
 80196ee:	f7ea ff27 	bl	8004540 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80196f2:	2101      	movs	r1, #1
 80196f4:	2005      	movs	r0, #5
 80196f6:	f7ea fba3 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80196fa:	2180      	movs	r1, #128	; 0x80
 80196fc:	2009      	movs	r0, #9
 80196fe:	f7ea fb9f 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    return ret;
 8019702:	8afb      	ldrh	r3, [r7, #22]
}
 8019704:	4618      	mov	r0, r3
 8019706:	3718      	adds	r7, #24
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	200039e4 	.word	0x200039e4
 8019710:	0ffff000 	.word	0x0ffff000
 8019714:	4d542005 	.word	0x4d542005

08019718 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b08e      	sub	sp, #56	; 0x38
 801971c:	af00      	add	r7, sp, #0
 801971e:	60f8      	str	r0, [r7, #12]
 8019720:	60b9      	str	r1, [r7, #8]
 8019722:	607a      	str	r2, [r7, #4]
 8019724:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8019726:	4b77      	ldr	r3, [pc, #476]	; (8019904 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	2b01      	cmp	r3, #1
 801972c:	d903      	bls.n	8019736 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 801972e:	4b75      	ldr	r3, [pc, #468]	; (8019904 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 8019730:	785b      	ldrb	r3, [r3, #1]
 8019732:	2b01      	cmp	r3, #1
 8019734:	d001      	beq.n	801973a <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 8019736:	2321      	movs	r3, #33	; 0x21
 8019738:	e0df      	b.n	80198fa <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d008      	beq.n	8019752 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d005      	beq.n	8019752 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d002      	beq.n	8019752 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d101      	bne.n	8019756 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 8019752:	2307      	movs	r3, #7
 8019754:	e0d1      	b.n	80198fa <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8019756:	f240 1003 	movw	r0, #259	; 0x103
 801975a:	f7f5 ffff 	bl	800f75c <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 801975e:	2101      	movs	r1, #1
 8019760:	2005      	movs	r0, #5
 8019762:	f7ea fb90 	bl	8003e86 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 8019766:	2180      	movs	r1, #128	; 0x80
 8019768:	2009      	movs	r0, #9
 801976a:	f7ea fb8c 	bl	8003e86 <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 801976e:	230b      	movs	r3, #11
 8019770:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 8019776:	68bb      	ldr	r3, [r7, #8]
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	b29b      	uxth	r3, r3
 801977c:	00db      	lsls	r3, r3, #3
 801977e:	b29a      	uxth	r2, r3
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	b29b      	uxth	r3, r3
 8019786:	4413      	add	r3, r2
 8019788:	b29b      	uxth	r3, r3
 801978a:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	781b      	ldrb	r3, [r3, #0]
 8019790:	461a      	mov	r2, r3
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	4413      	add	r3, r2
 8019796:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8019798:	2328      	movs	r3, #40	; 0x28
 801979a:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 80197a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197a2:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 80197a4:	f107 0318 	add.w	r3, r7, #24
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7fe fd5d 	bl	8018268 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 80197ae:	2004      	movs	r0, #4
 80197b0:	f7ea fe7e 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 80197b4:	2004      	movs	r0, #4
 80197b6:	f7ea feb7 	bl	8004528 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 80197ba:	2300      	movs	r3, #0
 80197bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d02d      	beq.n	8019824 <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	461a      	mov	r2, r3
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	4413      	add	r3, r2
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	461a      	mov	r2, r3
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	781b      	ldrb	r3, [r3, #0]
 80197da:	f1c3 0308 	rsb	r3, r3, #8
 80197de:	409a      	lsls	r2, r3
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	4619      	mov	r1, r3
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	440b      	add	r3, r1
 80197ea:	b2d2      	uxtb	r2, r2
 80197ec:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	461a      	mov	r2, r3
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	4413      	add	r3, r2
 80197f8:	781b      	ldrb	r3, [r3, #0]
 80197fa:	461a      	mov	r2, r3
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	781b      	ldrb	r3, [r3, #0]
 8019800:	f1c3 0308 	rsb	r3, r3, #8
 8019804:	411a      	asrs	r2, r3
 8019806:	68bb      	ldr	r3, [r7, #8]
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	4619      	mov	r1, r3
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	440b      	add	r3, r1
 8019810:	b2d2      	uxtb	r2, r2
 8019812:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	781b      	ldrb	r3, [r3, #0]
 8019818:	461a      	mov	r2, r3
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	4413      	add	r3, r2
 801981e:	781b      	ldrb	r3, [r3, #0]
 8019820:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8019824:	f7fe fea5 	bl	8018572 <rfalTransceiveRunBlockingTx>
 8019828:	4603      	mov	r3, r0
 801982a:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 801982c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801982e:	2b00      	cmp	r3, #0
 8019830:	d14f      	bne.n	80198d2 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 8019832:	f7fe febb 	bl	80185ac <rfalTransceiveBlockingRx>
 8019836:	4603      	mov	r3, r0
 8019838:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d031      	beq.n	80198a6 <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	781b      	ldrb	r3, [r3, #0]
 8019846:	461a      	mov	r2, r3
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	4413      	add	r3, r2
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	461a      	mov	r2, r3
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	411a      	asrs	r2, r3
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	4619      	mov	r1, r3
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	440b      	add	r3, r1
 8019860:	b2d2      	uxtb	r2, r2
 8019862:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 8019864:	68bb      	ldr	r3, [r7, #8]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	461a      	mov	r2, r3
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	4413      	add	r3, r2
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	461a      	mov	r2, r3
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	781b      	ldrb	r3, [r3, #0]
 8019876:	409a      	lsls	r2, r3
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	781b      	ldrb	r3, [r3, #0]
 801987c:	4619      	mov	r1, r3
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	440b      	add	r3, r1
 8019882:	b2d2      	uxtb	r2, r2
 8019884:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	461a      	mov	r2, r3
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	4413      	add	r3, r2
 8019890:	7819      	ldrb	r1, [r3, #0]
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	781b      	ldrb	r3, [r3, #0]
 8019896:	461a      	mov	r2, r3
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	4413      	add	r3, r2
 801989c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80198a0:	430a      	orrs	r2, r1
 80198a2:	b2d2      	uxtb	r2, r2
 80198a4:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 80198a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80198a8:	2b1d      	cmp	r3, #29
 80198aa:	d112      	bne.n	80198d2 <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 80198ac:	f107 0317 	add.w	r3, r7, #23
 80198b0:	4619      	mov	r1, r3
 80198b2:	201c      	movs	r0, #28
 80198b4:	f7ea f942 	bl	8003b3c <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 80198b8:	7dfb      	ldrb	r3, [r7, #23]
 80198ba:	091b      	lsrs	r3, r3, #4
 80198bc:	b2da      	uxtb	r2, r3
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 80198c2:	7dfb      	ldrb	r3, [r7, #23]
 80198c4:	085b      	lsrs	r3, r3, #1
 80198c6:	b2db      	uxtb	r3, r3
 80198c8:	f003 0307 	and.w	r3, r3, #7
 80198cc:	b2da      	uxtb	r2, r3
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 80198d2:	2004      	movs	r0, #4
 80198d4:	f7ea fe34 	bl	8004540 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 80198d8:	2101      	movs	r1, #1
 80198da:	2005      	movs	r0, #5
 80198dc:	f7ea fab0 	bl	8003e40 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 80198e0:	2180      	movs	r1, #128	; 0x80
 80198e2:	2009      	movs	r0, #9
 80198e4:	f7ea faac 	bl	8003e40 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80198e8:	f240 1001 	movw	r0, #257	; 0x101
 80198ec:	f7f5 ff36 	bl	800f75c <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80198f0:	f44f 7081 	mov.w	r0, #258	; 0x102
 80198f4:	f7f5 ff32 	bl	800f75c <rfalSetAnalogConfig>
    
    return ret;
 80198f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80198fa:	4618      	mov	r0, r3
 80198fc:	3738      	adds	r7, #56	; 0x38
 80198fe:	46bd      	mov	sp, r7
 8019900:	bd80      	pop	{r7, pc}
 8019902:	bf00      	nop
 8019904:	200039e4 	.word	0x200039e4

08019908 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b08c      	sub	sp, #48	; 0x30
 801990c:	af00      	add	r7, sp, #0
 801990e:	60f8      	str	r0, [r7, #12]
 8019910:	607a      	str	r2, [r7, #4]
 8019912:	461a      	mov	r2, r3
 8019914:	460b      	mov	r3, r1
 8019916:	72fb      	strb	r3, [r7, #11]
 8019918:	4613      	mov	r3, r2
 801991a:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 801991c:	4b29      	ldr	r3, [pc, #164]	; (80199c4 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b01      	cmp	r3, #1
 8019922:	d903      	bls.n	801992c <rfalISO15693TransceiveAnticollisionFrame+0x24>
 8019924:	4b27      	ldr	r3, [pc, #156]	; (80199c4 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 8019926:	785b      	ldrb	r3, [r3, #1]
 8019928:	2b07      	cmp	r3, #7
 801992a:	d001      	beq.n	8019930 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 801992c:	2321      	movs	r3, #33	; 0x21
 801992e:	e045      	b.n	80199bc <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8019930:	f241 0003 	movw	r0, #4099	; 0x1003
 8019934:	f7f5 ff12 	bl	800f75c <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 8019938:	4b22      	ldr	r3, [pc, #136]	; (80199c4 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801993a:	2210      	movs	r2, #16
 801993c:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8019940:	7afb      	ldrb	r3, [r7, #11]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d101      	bne.n	801994a <rfalISO15693TransceiveAnticollisionFrame+0x42>
 8019946:	220b      	movs	r2, #11
 8019948:	e000      	b.n	801994c <rfalISO15693TransceiveAnticollisionFrame+0x44>
 801994a:	220a      	movs	r2, #10
 801994c:	7afb      	ldrb	r3, [r7, #11]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d101      	bne.n	8019956 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 8019952:	2340      	movs	r3, #64	; 0x40
 8019954:	e000      	b.n	8019958 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 8019956:	2300      	movs	r3, #0
 8019958:	4313      	orrs	r3, r2
 801995a:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8019960:	7afb      	ldrb	r3, [r7, #11]
 8019962:	b29b      	uxth	r3, r3
 8019964:	00db      	lsls	r3, r3, #3
 8019966:	b29b      	uxth	r3, r3
 8019968:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 801996e:	7abb      	ldrb	r3, [r7, #10]
 8019970:	b29b      	uxth	r3, r3
 8019972:	00db      	lsls	r3, r3, #3
 8019974:	b29b      	uxth	r3, r3
 8019976:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 8019978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801997a:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 801997c:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8019980:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 8019982:	f107 0310 	add.w	r3, r7, #16
 8019986:	4618      	mov	r0, r3
 8019988:	f7fe fc6e 	bl	8018268 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 801998c:	f7fe fdf1 	bl	8018572 <rfalTransceiveRunBlockingTx>
 8019990:	4603      	mov	r3, r0
 8019992:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 8019994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019996:	2b00      	cmp	r3, #0
 8019998:	d103      	bne.n	80199a2 <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 801999a:	f7fe fe07 	bl	80185ac <rfalTransceiveBlockingRx>
 801999e:	4603      	mov	r3, r0
 80199a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80199a2:	f241 0001 	movw	r0, #4097	; 0x1001
 80199a6:	f7f5 fed9 	bl	800f75c <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80199aa:	f241 0002 	movw	r0, #4098	; 0x1002
 80199ae:	f7f5 fed5 	bl	800f75c <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 80199b2:	4b04      	ldr	r3, [pc, #16]	; (80199c4 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 80199b4:	2200      	movs	r2, #0
 80199b6:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    return ret;
 80199ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80199bc:	4618      	mov	r0, r3
 80199be:	3730      	adds	r7, #48	; 0x30
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}
 80199c4:	200039e4 	.word	0x200039e4

080199c8 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b088      	sub	sp, #32
 80199cc:	af02      	add	r7, sp, #8
 80199ce:	60f8      	str	r0, [r7, #12]
 80199d0:	460b      	mov	r3, r1
 80199d2:	607a      	str	r2, [r7, #4]
 80199d4:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 80199d6:	7afa      	ldrb	r2, [r7, #11]
 80199d8:	f107 0017 	add.w	r0, r7, #23
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	9300      	str	r3, [sp, #0]
 80199e0:	4613      	mov	r3, r2
 80199e2:	68fa      	ldr	r2, [r7, #12]
 80199e4:	2100      	movs	r1, #0
 80199e6:	f7ff ff8f 	bl	8019908 <rfalISO15693TransceiveAnticollisionFrame>
 80199ea:	4603      	mov	r3, r0
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3718      	adds	r7, #24
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}

080199f4 <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b08a      	sub	sp, #40	; 0x28
 80199f8:	af04      	add	r7, sp, #16
 80199fa:	60f8      	str	r0, [r7, #12]
 80199fc:	460b      	mov	r3, r1
 80199fe:	607a      	str	r2, [r7, #4]
 8019a00:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8019a02:	4b10      	ldr	r3, [pc, #64]	; (8019a44 <rfalISO15693TransceiveEOF+0x50>)
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	2b01      	cmp	r3, #1
 8019a08:	d903      	bls.n	8019a12 <rfalISO15693TransceiveEOF+0x1e>
 8019a0a:	4b0e      	ldr	r3, [pc, #56]	; (8019a44 <rfalISO15693TransceiveEOF+0x50>)
 8019a0c:	785b      	ldrb	r3, [r3, #1]
 8019a0e:	2b07      	cmp	r3, #7
 8019a10:	d001      	beq.n	8019a16 <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 8019a12:	2321      	movs	r3, #33	; 0x21
 8019a14:	e012      	b.n	8019a3c <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 8019a16:	7afb      	ldrb	r3, [r7, #11]
 8019a18:	b29a      	uxth	r2, r3
 8019a1a:	f107 0015 	add.w	r0, r7, #21
 8019a1e:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8019a22:	9302      	str	r3, [sp, #8]
 8019a24:	2303      	movs	r3, #3
 8019a26:	9301      	str	r3, [sp, #4]
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	68fa      	ldr	r2, [r7, #12]
 8019a30:	2100      	movs	r1, #0
 8019a32:	f7fe fdd1 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 8019a36:	4603      	mov	r3, r0
 8019a38:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 8019a3a:	8afb      	ldrh	r3, [r7, #22]
}
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	3718      	adds	r7, #24
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}
 8019a44:	200039e4 	.word	0x200039e4

08019a48 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b08c      	sub	sp, #48	; 0x30
 8019a4c:	af04      	add	r7, sp, #16
 8019a4e:	603b      	str	r3, [r7, #0]
 8019a50:	4603      	mov	r3, r0
 8019a52:	71fb      	strb	r3, [r7, #7]
 8019a54:	460b      	mov	r3, r1
 8019a56:	80bb      	strh	r3, [r7, #4]
 8019a58:	4613      	mov	r3, r2
 8019a5a:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8019a5c:	4b6b      	ldr	r3, [pc, #428]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	2b01      	cmp	r3, #1
 8019a62:	d903      	bls.n	8019a6c <rfalFeliCaPoll+0x24>
 8019a64:	4b69      	ldr	r3, [pc, #420]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019a66:	785b      	ldrb	r3, [r3, #1]
 8019a68:	2b06      	cmp	r3, #6
 8019a6a:	d001      	beq.n	8019a70 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 8019a6c:	2321      	movs	r3, #33	; 0x21
 8019a6e:	e0c9      	b.n	8019c04 <rfalFeliCaPoll+0x1bc>
    }
    
    frameIdx    = 0;
 8019a70:	2300      	movs	r3, #0
 8019a72:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 8019a74:	2300      	movs	r3, #0
 8019a76:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 8019a7c:	79fb      	ldrb	r3, [r7, #7]
 8019a7e:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 8019a80:	7e7b      	ldrb	r3, [r7, #25]
 8019a82:	1c5a      	adds	r2, r3, #1
 8019a84:	767a      	strb	r2, [r7, #25]
 8019a86:	3320      	adds	r3, #32
 8019a88:	443b      	add	r3, r7
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8019a90:	88bb      	ldrh	r3, [r7, #4]
 8019a92:	0a1b      	lsrs	r3, r3, #8
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	7e7b      	ldrb	r3, [r7, #25]
 8019a98:	1c59      	adds	r1, r3, #1
 8019a9a:	7679      	strb	r1, [r7, #25]
 8019a9c:	b2d2      	uxtb	r2, r2
 8019a9e:	3320      	adds	r3, #32
 8019aa0:	443b      	add	r3, r7
 8019aa2:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8019aa6:	7e7b      	ldrb	r3, [r7, #25]
 8019aa8:	1c5a      	adds	r2, r3, #1
 8019aaa:	767a      	strb	r2, [r7, #25]
 8019aac:	88ba      	ldrh	r2, [r7, #4]
 8019aae:	b2d2      	uxtb	r2, r2
 8019ab0:	3320      	adds	r3, #32
 8019ab2:	443b      	add	r3, r7
 8019ab4:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 8019ab8:	7e7b      	ldrb	r3, [r7, #25]
 8019aba:	1c5a      	adds	r2, r3, #1
 8019abc:	767a      	strb	r2, [r7, #25]
 8019abe:	3320      	adds	r3, #32
 8019ac0:	443b      	add	r3, r7
 8019ac2:	79ba      	ldrb	r2, [r7, #6]
 8019ac4:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 8019ac8:	7e7b      	ldrb	r3, [r7, #25]
 8019aca:	1c5a      	adds	r2, r3, #1
 8019acc:	767a      	strb	r2, [r7, #25]
 8019ace:	3320      	adds	r3, #32
 8019ad0:	443b      	add	r3, r7
 8019ad2:	7efa      	ldrb	r2, [r7, #27]
 8019ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 8019ad8:	4b4c      	ldr	r3, [pc, #304]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019ada:	79db      	ldrb	r3, [r3, #7]
 8019adc:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8019ade:	2002      	movs	r0, #2
 8019ae0:	f7fe fae6 	bl	80180b0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 8019ae4:	7e7b      	ldrb	r3, [r7, #25]
 8019ae6:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 8019ae8:	7efb      	ldrb	r3, [r7, #27]
 8019aea:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 8019aec:	039b      	lsls	r3, r3, #14
 8019aee:	f107 0010 	add.w	r0, r7, #16
 8019af2:	9302      	str	r3, [sp, #8]
 8019af4:	2300      	movs	r3, #0
 8019af6:	9301      	str	r3, [sp, #4]
 8019af8:	f107 030e 	add.w	r3, r7, #14
 8019afc:	9300      	str	r3, [sp, #0]
 8019afe:	2314      	movs	r3, #20
 8019b00:	4a43      	ldr	r2, [pc, #268]	; (8019c10 <rfalFeliCaPoll+0x1c8>)
 8019b02:	f7fe fd07 	bl	8018514 <rfalTransceiveBlockingTx>
 8019b06:	4603      	mov	r3, r0
 8019b08:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 8019b0a:	8bfb      	ldrh	r3, [r7, #30]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d145      	bne.n	8019b9c <rfalFeliCaPoll+0x154>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 8019b10:	f7fe fd4c 	bl	80185ac <rfalTransceiveBlockingRx>
 8019b14:	4603      	mov	r3, r0
 8019b16:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8019b18:	8bfb      	ldrh	r3, [r7, #30]
 8019b1a:	2b04      	cmp	r3, #4
 8019b1c:	d102      	bne.n	8019b24 <rfalFeliCaPoll+0xdc>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 8019b1e:	2301      	movs	r3, #1
 8019b20:	76bb      	strb	r3, [r7, #26]
 8019b22:	e030      	b.n	8019b86 <rfalFeliCaPoll+0x13e>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8019b24:	20d1      	movs	r0, #209	; 0xd1
 8019b26:	f7ea facd 	bl	80040c4 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 8019b2a:	20d5      	movs	r0, #213	; 0xd5
 8019b2c:	f7ea faca 	bl	80040c4 <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 8019b30:	8bfb      	ldrh	r3, [r7, #30]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d10e      	bne.n	8019b54 <rfalFeliCaPoll+0x10c>
                {
                   devDetected++;
 8019b36:	7f7b      	ldrb	r3, [r7, #29]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 8019b3c:	7f7a      	ldrb	r2, [r7, #29]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	009b      	lsls	r3, r3, #2
 8019b42:	4413      	add	r3, r2
 8019b44:	009b      	lsls	r3, r3, #2
 8019b46:	3378      	adds	r3, #120	; 0x78
 8019b48:	4a30      	ldr	r2, [pc, #192]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019b4a:	4413      	add	r3, r2
 8019b4c:	3306      	adds	r3, #6
 8019b4e:	4a2f      	ldr	r2, [pc, #188]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019b50:	6253      	str	r3, [r2, #36]	; 0x24
 8019b52:	e002      	b.n	8019b5a <rfalFeliCaPoll+0x112>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 8019b54:	7f3b      	ldrb	r3, [r7, #28]
 8019b56:	3301      	adds	r3, #1
 8019b58:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	2102      	movs	r1, #2
 8019b5e:	202b      	movs	r0, #43	; 0x2b
 8019b60:	f7e9 fde8 	bl	8003734 <st25r3911CheckReg>
 8019b64:	4603      	mov	r3, r0
 8019b66:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 8019b68:	7ebb      	ldrb	r3, [r7, #26]
 8019b6a:	f083 0301 	eor.w	r3, r3, #1
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d008      	beq.n	8019b86 <rfalFeliCaPoll+0x13e>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 8019b74:	4b25      	ldr	r3, [pc, #148]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019b76:	2202      	movs	r2, #2
 8019b78:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 8019b7a:	4b24      	ldr	r3, [pc, #144]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019b7c:	2203      	movs	r2, #3
 8019b7e:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8019b80:	4b22      	ldr	r3, [pc, #136]	; (8019c0c <rfalFeliCaPoll+0x1c4>)
 8019b82:	2251      	movs	r2, #81	; 0x51
 8019b84:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 8019b86:	7efb      	ldrb	r3, [r7, #27]
 8019b88:	1e5a      	subs	r2, r3, #1
 8019b8a:	76fa      	strb	r2, [r7, #27]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d005      	beq.n	8019b9c <rfalFeliCaPoll+0x154>
 8019b90:	7ebb      	ldrb	r3, [r7, #26]
 8019b92:	f083 0301 	eor.w	r3, r3, #1
 8019b96:	b2db      	uxtb	r3, r3
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d1b9      	bne.n	8019b10 <rfalFeliCaPoll+0xc8>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 8019b9c:	7e3b      	ldrb	r3, [r7, #24]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7fe fa86 	bl	80180b0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d017      	beq.n	8019bda <rfalFeliCaPoll+0x192>
 8019baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d013      	beq.n	8019bda <rfalFeliCaPoll+0x192>
 8019bb2:	7f7b      	ldrb	r3, [r7, #29]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d010      	beq.n	8019bda <rfalFeliCaPoll+0x192>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 8019bb8:	7f7a      	ldrb	r2, [r7, #29]
 8019bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019bbe:	4293      	cmp	r3, r2
 8019bc0:	bf28      	it	cs
 8019bc2:	4613      	movcs	r3, r2
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	461a      	mov	r2, r3
 8019bc8:	4613      	mov	r3, r2
 8019bca:	009b      	lsls	r3, r3, #2
 8019bcc:	4413      	add	r3, r2
 8019bce:	009b      	lsls	r3, r3, #2
 8019bd0:	461a      	mov	r2, r3
 8019bd2:	490f      	ldr	r1, [pc, #60]	; (8019c10 <rfalFeliCaPoll+0x1c8>)
 8019bd4:	6838      	ldr	r0, [r7, #0]
 8019bd6:	f001 fc09 	bl	801b3ec <memcpy>
    }
    
    if( devicesDetected != NULL )
 8019bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d002      	beq.n	8019be6 <rfalFeliCaPoll+0x19e>
    {
        *devicesDetected = devDetected;
 8019be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be2:	7f7a      	ldrb	r2, [r7, #29]
 8019be4:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 8019be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d002      	beq.n	8019bf2 <rfalFeliCaPoll+0x1aa>
    {
        *collisionsDetected = colDetected;
 8019bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bee:	7f3a      	ldrb	r2, [r7, #28]
 8019bf0:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 8019bf2:	7f3b      	ldrb	r3, [r7, #28]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d104      	bne.n	8019c02 <rfalFeliCaPoll+0x1ba>
 8019bf8:	7f7b      	ldrb	r3, [r7, #29]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d101      	bne.n	8019c02 <rfalFeliCaPoll+0x1ba>
 8019bfe:	8bfb      	ldrh	r3, [r7, #30]
 8019c00:	e000      	b.n	8019c04 <rfalFeliCaPoll+0x1bc>
 8019c02:	2300      	movs	r3, #0
}
 8019c04:	4618      	mov	r0, r3
 8019c06:	3720      	adds	r7, #32
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	200039e4 	.word	0x200039e4
 8019c10:	20003a62 	.word	0x20003a62

08019c14 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 8019c18:	2240      	movs	r2, #64	; 0x40
 8019c1a:	2140      	movs	r1, #64	; 0x40
 8019c1c:	2030      	movs	r0, #48	; 0x30
 8019c1e:	f7e9 fd89 	bl	8003734 <st25r3911CheckReg>
 8019c22:	4603      	mov	r3, r0
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	bd80      	pop	{r7, pc}

08019c28 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b084      	sub	sp, #16
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	60f8      	str	r0, [r7, #12]
 8019c30:	60b9      	str	r1, [r7, #8]
 8019c32:	607a      	str	r2, [r7, #4]
 8019c34:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8019c36:	4b29      	ldr	r3, [pc, #164]	; (8019cdc <rfalListenStart+0xb4>)
 8019c38:	2200      	movs	r2, #0
 8019c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d109      	bne.n	8019c5c <rfalListenStart+0x34>
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d104      	bne.n	8019c5c <rfalListenStart+0x34>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d001      	beq.n	8019c60 <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 8019c5c:	2318      	movs	r3, #24
 8019c5e:	e038      	b.n	8019cd2 <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d032      	beq.n	8019cd0 <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 8019c6a:	4b1c      	ldr	r3, [pc, #112]	; (8019cdc <rfalListenStart+0xb4>)
 8019c6c:	2204      	movs	r2, #4
 8019c6e:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 8019c70:	4a1a      	ldr	r2, [pc, #104]	; (8019cdc <rfalListenStart+0xb4>)
 8019c72:	69bb      	ldr	r3, [r7, #24]
 8019c74:	6593      	str	r3, [r2, #88]	; 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 8019c76:	4a19      	ldr	r2, [pc, #100]	; (8019cdc <rfalListenStart+0xb4>)
 8019c78:	8bbb      	ldrh	r3, [r7, #28]
 8019c7a:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 8019c7e:	4a17      	ldr	r2, [pc, #92]	; (8019cdc <rfalListenStart+0xb4>)
 8019c80:	6a3b      	ldr	r3, [r7, #32]
 8019c82:	6613      	str	r3, [r2, #96]	; 0x60
        *gRFAL.Lm.rxLen   = 0;
 8019c84:	4b15      	ldr	r3, [pc, #84]	; (8019cdc <rfalListenStart+0xb4>)
 8019c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c88:	2200      	movs	r2, #0
 8019c8a:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 8019c8c:	4b13      	ldr	r3, [pc, #76]	; (8019cdc <rfalListenStart+0xb4>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 8019c94:	2200      	movs	r2, #0
 8019c96:	21e0      	movs	r1, #224	; 0xe0
 8019c98:	2011      	movs	r0, #17
 8019c9a:	f7ea f912 	bl	8003ec2 <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 8019c9e:	2102      	movs	r1, #2
 8019ca0:	200e      	movs	r0, #14
 8019ca2:	f7ea f881 	bl	8003da8 <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 8019ca6:	21e0      	movs	r1, #224	; 0xe0
 8019ca8:	2005      	movs	r0, #5
 8019caa:	f7ea f8c9 	bl	8003e40 <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8019cae:	2110      	movs	r1, #16
 8019cb0:	2009      	movs	r0, #9
 8019cb2:	f7ea f8e8 	bl	8003e86 <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 8019cb6:	2240      	movs	r2, #64	; 0x40
 8019cb8:	2140      	movs	r1, #64	; 0x40
 8019cba:	2002      	movs	r0, #2
 8019cbc:	f7ea f901 	bl	8003ec2 <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 8019cc0:	2006      	movs	r0, #6
 8019cc2:	f7f5 fd4b 	bl	800f75c <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8019cc6:	2001      	movs	r0, #1
 8019cc8:	f000 f960 	bl	8019f8c <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	e000      	b.n	8019cd2 <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 8019cd0:	2305      	movs	r3, #5
}
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	3710      	adds	r7, #16
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	bd80      	pop	{r7, pc}
 8019cda:	bf00      	nop
 8019cdc:	200039e4 	.word	0x200039e4

08019ce0 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 8019ce6:	4b81      	ldr	r3, [pc, #516]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	2b04      	cmp	r3, #4
 8019cec:	d001      	beq.n	8019cf2 <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 8019cee:	2321      	movs	r3, #33	; 0x21
 8019cf0:	e0f8      	b.n	8019ee4 <rfalRunListenModeWorker+0x204>
    }
    
    switch( gRFAL.Lm.state )
 8019cf2:	4b7e      	ldr	r3, [pc, #504]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019cf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019cf8:	3b01      	subs	r3, #1
 8019cfa:	2b0f      	cmp	r3, #15
 8019cfc:	f200 80e6 	bhi.w	8019ecc <rfalRunListenModeWorker+0x1ec>
 8019d00:	a201      	add	r2, pc, #4	; (adr r2, 8019d08 <rfalRunListenModeWorker+0x28>)
 8019d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d06:	bf00      	nop
 8019d08:	08019d49 	.word	0x08019d49
 8019d0c:	08019d6f 	.word	0x08019d6f
 8019d10:	08019ec9 	.word	0x08019ec9
 8019d14:	08019ecd 	.word	0x08019ecd
 8019d18:	08019ec9 	.word	0x08019ec9
 8019d1c:	08019ec9 	.word	0x08019ec9
 8019d20:	08019ec9 	.word	0x08019ec9
 8019d24:	08019ec9 	.word	0x08019ec9
 8019d28:	08019ec9 	.word	0x08019ec9
 8019d2c:	08019ed1 	.word	0x08019ed1
 8019d30:	08019ed1 	.word	0x08019ed1
 8019d34:	08019ec9 	.word	0x08019ec9
 8019d38:	08019ec9 	.word	0x08019ec9
 8019d3c:	08019ec9 	.word	0x08019ec9
 8019d40:	08019ec9 	.word	0x08019ec9
 8019d44:	08019ec9 	.word	0x08019ec9
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 8019d48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8019d4c:	f7ea fbb0 	bl	80044b0 <st25r3911GetInterrupt>
 8019d50:	4603      	mov	r3, r0
 8019d52:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	f000 80bc 	beq.w	8019ed4 <rfalRunListenModeWorker+0x1f4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f000 80b8 	beq.w	8019ed8 <rfalRunListenModeWorker+0x1f8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 8019d68:	2002      	movs	r0, #2
 8019d6a:	f000 f90f 	bl	8019f8c <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 8019d6e:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019d72:	f7ea fb9d 	bl	80044b0 <st25r3911GetInterrupt>
 8019d76:	4603      	mov	r3, r0
 8019d78:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	f000 80ad 	beq.w	8019edc <rfalRunListenModeWorker+0x1fc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d011      	beq.n	8019db0 <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 8019d8c:	1cbb      	adds	r3, r7, #2
 8019d8e:	4619      	mov	r1, r3
 8019d90:	201f      	movs	r0, #31
 8019d92:	f7e9 fed3 	bl	8003b3c <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8019d96:	78bb      	ldrb	r3, [r7, #2]
 8019d98:	091b      	lsrs	r3, r3, #4
 8019d9a:	b2db      	uxtb	r3, r3
 8019d9c:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 8019d9e:	78bb      	ldrb	r3, [r7, #2]
 8019da0:	2b02      	cmp	r3, #2
 8019da2:	d901      	bls.n	8019da8 <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 8019da4:	2302      	movs	r3, #2
 8019da6:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8019da8:	78ba      	ldrb	r2, [r7, #2]
 8019daa:	4b50      	ldr	r3, [pc, #320]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019dac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f003 0310 	and.w	r3, r3, #16
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d074      	beq.n	8019ea4 <rfalRunListenModeWorker+0x1c4>
 8019dba:	4b4c      	ldr	r3, [pc, #304]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019dbc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8019dc0:	2bff      	cmp	r3, #255	; 0xff
 8019dc2:	d06f      	beq.n	8019ea4 <rfalRunListenModeWorker+0x1c4>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 8019dc4:	484a      	ldr	r0, [pc, #296]	; (8019ef0 <rfalRunListenModeWorker+0x210>)
 8019dc6:	f7ea fb73 	bl	80044b0 <st25r3911GetInterrupt>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d109      	bne.n	8019dec <rfalRunListenModeWorker+0x10c>
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d104      	bne.n	8019dec <rfalRunListenModeWorker+0x10c>
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d012      	beq.n	8019e12 <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8019dec:	2101      	movs	r1, #1
 8019dee:	2003      	movs	r0, #3
 8019df0:	f7ea f826 	bl	8003e40 <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 8019df4:	20c2      	movs	r0, #194	; 0xc2
 8019df6:	f7ea f965 	bl	80040c4 <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 8019dfa:	20d1      	movs	r0, #209	; 0xd1
 8019dfc:	f7ea f962 	bl	80040c4 <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8019e00:	2101      	movs	r1, #1
 8019e02:	2003      	movs	r0, #3
 8019e04:	f7ea f83f 	bl	8003e86 <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 8019e08:	2108      	movs	r1, #8
 8019e0a:	2002      	movs	r0, #2
 8019e0c:	f7ea f818 	bl	8003e40 <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8019e10:	e067      	b.n	8019ee2 <rfalRunListenModeWorker+0x202>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 8019e12:	1cfb      	adds	r3, r7, #3
 8019e14:	4619      	mov	r1, r3
 8019e16:	201a      	movs	r0, #26
 8019e18:	f7e9 fe90 	bl	8003b3c <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 8019e1c:	78fa      	ldrb	r2, [r7, #3]
 8019e1e:	4b33      	ldr	r3, [pc, #204]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e22:	b292      	uxth	r2, r2
 8019e24:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8019e26:	4b31      	ldr	r3, [pc, #196]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e28:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019e2a:	4b30      	ldr	r3, [pc, #192]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e2e:	881a      	ldrh	r2, [r3, #0]
 8019e30:	4b2e      	ldr	r3, [pc, #184]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019e36:	3307      	adds	r3, #7
 8019e38:	08db      	lsrs	r3, r3, #3
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	429a      	cmp	r2, r3
 8019e3e:	d204      	bcs.n	8019e4a <rfalRunListenModeWorker+0x16a>
 8019e40:	4b2a      	ldr	r3, [pc, #168]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e44:	881b      	ldrh	r3, [r3, #0]
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	e005      	b.n	8019e56 <rfalRunListenModeWorker+0x176>
 8019e4a:	4b28      	ldr	r3, [pc, #160]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019e50:	3307      	adds	r3, #7
 8019e52:	08db      	lsrs	r3, r3, #3
 8019e54:	b2db      	uxtb	r3, r3
 8019e56:	4619      	mov	r1, r3
 8019e58:	f7ea f8e8 	bl	800402c <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8019e5c:	4b23      	ldr	r3, [pc, #140]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e60:	8819      	ldrh	r1, [r3, #0]
 8019e62:	4b22      	ldr	r3, [pc, #136]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e66:	881b      	ldrh	r3, [r3, #0]
 8019e68:	2b02      	cmp	r3, #2
 8019e6a:	bf28      	it	cs
 8019e6c:	2302      	movcs	r3, #2
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	4b1e      	ldr	r3, [pc, #120]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e74:	1a8a      	subs	r2, r1, r2
 8019e76:	b292      	uxth	r2, r2
 8019e78:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8019e7a:	4b1c      	ldr	r3, [pc, #112]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e7e:	881a      	ldrh	r2, [r3, #0]
 8019e80:	4b1a      	ldr	r3, [pc, #104]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e84:	00d2      	lsls	r2, r2, #3
 8019e86:	b292      	uxth	r2, r2
 8019e88:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 8019e8a:	4b18      	ldr	r3, [pc, #96]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e8c:	2201      	movs	r2, #1
 8019e8e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8019e92:	4b16      	ldr	r3, [pc, #88]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019e94:	799b      	ldrb	r3, [r3, #6]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d015      	beq.n	8019ec6 <rfalRunListenModeWorker+0x1e6>
 8019e9a:	2100      	movs	r1, #0
 8019e9c:	2001      	movs	r0, #1
 8019e9e:	f7e9 ff3b 	bl	8003d18 <st25r3911WriteTestRegister>
 8019ea2:	e010      	b.n	8019ec6 <rfalRunListenModeWorker+0x1e6>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d018      	beq.n	8019ee0 <rfalRunListenModeWorker+0x200>
 8019eae:	4b0f      	ldr	r3, [pc, #60]	; (8019eec <rfalRunListenModeWorker+0x20c>)
 8019eb0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019eb4:	f083 0301 	eor.w	r3, r3, #1
 8019eb8:	b2db      	uxtb	r3, r3
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d010      	beq.n	8019ee0 <rfalRunListenModeWorker+0x200>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8019ebe:	2001      	movs	r0, #1
 8019ec0:	f000 f864 	bl	8019f8c <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 8019ec4:	e00c      	b.n	8019ee0 <rfalRunListenModeWorker+0x200>
 8019ec6:	e00b      	b.n	8019ee0 <rfalRunListenModeWorker+0x200>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 8019ec8:	230c      	movs	r3, #12
 8019eca:	e00b      	b.n	8019ee4 <rfalRunListenModeWorker+0x204>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8019ecc:	2321      	movs	r3, #33	; 0x21
 8019ece:	e009      	b.n	8019ee4 <rfalRunListenModeWorker+0x204>
                break;
 8019ed0:	bf00      	nop
 8019ed2:	e006      	b.n	8019ee2 <rfalRunListenModeWorker+0x202>
              break;  /* No interrupt to process */
 8019ed4:	bf00      	nop
 8019ed6:	e004      	b.n	8019ee2 <rfalRunListenModeWorker+0x202>
                break;
 8019ed8:	bf00      	nop
 8019eda:	e002      	b.n	8019ee2 <rfalRunListenModeWorker+0x202>
                break;  /* No interrupt to process */
 8019edc:	bf00      	nop
 8019ede:	e000      	b.n	8019ee2 <rfalRunListenModeWorker+0x202>
            break;
 8019ee0:	bf00      	nop
    }
    return ERR_NONE;
 8019ee2:	2300      	movs	r3, #0
}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	3708      	adds	r7, #8
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd80      	pop	{r7, pc}
 8019eec:	200039e4 	.word	0x200039e4
 8019ef0:	00f00810 	.word	0x00f00810

08019ef4 <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8019ef8:	4b0b      	ldr	r3, [pc, #44]	; (8019f28 <rfalListenStop+0x34>)
 8019efa:	2200      	movs	r2, #0
 8019efc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 8019f00:	4b09      	ldr	r3, [pc, #36]	; (8019f28 <rfalListenStop+0x34>)
 8019f02:	799b      	ldrb	r3, [r3, #6]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d003      	beq.n	8019f10 <rfalListenStop+0x1c>
 8019f08:	2100      	movs	r1, #0
 8019f0a:	2001      	movs	r0, #1
 8019f0c:	f7e9 ff04 	bl	8003d18 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 8019f10:	f7fe f994 	bl	801823c <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 8019f14:	2108      	movs	r1, #8
 8019f16:	2003      	movs	r0, #3
 8019f18:	f7e9 ff46 	bl	8003da8 <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8019f1c:	2007      	movs	r0, #7
 8019f1e:	f7f5 fc1d 	bl	800f75c <rfalSetAnalogConfig>
        
    return ERR_NONE;
 8019f22:	2300      	movs	r3, #0
}
 8019f24:	4618      	mov	r0, r3
 8019f26:	bd80      	pop	{r7, pc}
 8019f28:	200039e4 	.word	0x200039e4

08019f2c <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8019f2c:	b480      	push	{r7}
 8019f2e:	b085      	sub	sp, #20
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	60b9      	str	r1, [r7, #8]
 8019f34:	607b      	str	r3, [r7, #4]
 8019f36:	4603      	mov	r3, r0
 8019f38:	73fb      	strb	r3, [r7, #15]
 8019f3a:	4613      	mov	r3, r2
 8019f3c:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 8019f3e:	2318      	movs	r3, #24
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3714      	adds	r7, #20
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bc80      	pop	{r7}
 8019f48:	4770      	bx	lr
	...

08019f4c <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b083      	sub	sp, #12
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
 8019f54:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d004      	beq.n	8019f66 <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 8019f5c:	4b0a      	ldr	r3, [pc, #40]	; (8019f88 <rfalListenGetState+0x3c>)
 8019f5e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d004      	beq.n	8019f76 <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 8019f6c:	4b06      	ldr	r3, [pc, #24]	; (8019f88 <rfalListenGetState+0x3c>)
 8019f6e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 8019f76:	4b04      	ldr	r3, [pc, #16]	; (8019f88 <rfalListenGetState+0x3c>)
 8019f78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	370c      	adds	r7, #12
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bc80      	pop	{r7}
 8019f84:	4770      	bx	lr
 8019f86:	bf00      	nop
 8019f88:	200039e4 	.word	0x200039e4

08019f8c <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b084      	sub	sp, #16
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	4603      	mov	r3, r0
 8019f94:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 8019f96:	4b62      	ldr	r3, [pc, #392]	; (801a120 <rfalListenSetState+0x194>)
 8019f98:	2200      	movs	r2, #0
 8019f9a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    newState          = newSt;
 8019f9e:	79fb      	ldrb	r3, [r7, #7]
 8019fa0:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 8019faa:	7bfb      	ldrb	r3, [r7, #15]
 8019fac:	3b01      	subs	r3, #1
 8019fae:	2b0f      	cmp	r3, #15
 8019fb0:	f200 80a2 	bhi.w	801a0f8 <rfalListenSetState+0x16c>
 8019fb4:	a201      	add	r2, pc, #4	; (adr r2, 8019fbc <rfalListenSetState+0x30>)
 8019fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fba:	bf00      	nop
 8019fbc:	08019ffd 	.word	0x08019ffd
 8019fc0:	0801a05b 	.word	0x0801a05b
 8019fc4:	0801a0f5 	.word	0x0801a0f5
 8019fc8:	0801a0f9 	.word	0x0801a0f9
 8019fcc:	0801a0f5 	.word	0x0801a0f5
 8019fd0:	0801a0f5 	.word	0x0801a0f5
 8019fd4:	0801a0f5 	.word	0x0801a0f5
 8019fd8:	0801a0f5 	.word	0x0801a0f5
 8019fdc:	0801a0f5 	.word	0x0801a0f5
 8019fe0:	0801a0fd 	.word	0x0801a0fd
 8019fe4:	0801a0fd 	.word	0x0801a0fd
 8019fe8:	0801a0f5 	.word	0x0801a0f5
 8019fec:	0801a0f5 	.word	0x0801a0f5
 8019ff0:	0801a0f5 	.word	0x0801a0f5
 8019ff4:	0801a0f5 	.word	0x0801a0f5
 8019ff8:	0801a0f5 	.word	0x0801a0f5
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 8019ffc:	2101      	movs	r1, #1
 8019ffe:	2003      	movs	r0, #3
 801a000:	f7e9 ff1e 	bl	8003e40 <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801a004:	20c2      	movs	r0, #194	; 0xc2
 801a006:	f7ea f85d 	bl	80040c4 <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801a00a:	2108      	movs	r1, #8
 801a00c:	2002      	movs	r0, #2
 801a00e:	f7e9 ff17 	bl	8003e40 <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 801a012:	2120      	movs	r1, #32
 801a014:	2005      	movs	r0, #5
 801a016:	f7e9 ff13 	bl	8003e40 <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801a01a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a01e:	f7ea fa8f 	bl	8004540 <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801a022:	4840      	ldr	r0, [pc, #256]	; (801a124 <rfalListenSetState+0x198>)
 801a024:	f7ea fa44 	bl	80044b0 <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801a028:	483f      	ldr	r0, [pc, #252]	; (801a128 <rfalListenSetState+0x19c>)
 801a02a:	f7ea fa7d 	bl	8004528 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 801a02e:	4b3c      	ldr	r3, [pc, #240]	; (801a120 <rfalListenSetState+0x194>)
 801a030:	22ff      	movs	r2, #255	; 0xff
 801a032:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 801a036:	2181      	movs	r1, #129	; 0x81
 801a038:	2003      	movs	r0, #3
 801a03a:	f7e9 feb5 	bl	8003da8 <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 801a03e:	2100      	movs	r1, #0
 801a040:	2004      	movs	r0, #4
 801a042:	f7e9 feb1 	bl	8003da8 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 801a046:	f7ff fde5 	bl	8019c14 <rfalIsExtFieldOn>
 801a04a:	4603      	mov	r3, r0
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d057      	beq.n	801a100 <rfalListenSetState+0x174>
                {
                    reSetState = true;
 801a050:	2301      	movs	r3, #1
 801a052:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 801a054:	2302      	movs	r3, #2
 801a056:	73fb      	strb	r3, [r7, #15]
                }
                break;
 801a058:	e052      	b.n	801a100 <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801a05a:	2101      	movs	r1, #1
 801a05c:	2003      	movs	r0, #3
 801a05e:	f7e9 feef 	bl	8003e40 <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801a062:	20c2      	movs	r0, #194	; 0xc2
 801a064:	f7ea f82e 	bl	80040c4 <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801a068:	2101      	movs	r1, #1
 801a06a:	2003      	movs	r0, #3
 801a06c:	f7e9 ff0b 	bl	8003e86 <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801a070:	2108      	movs	r1, #8
 801a072:	2002      	movs	r0, #2
 801a074:	f7e9 fee4 	bl	8003e40 <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801a078:	20d5      	movs	r0, #213	; 0xd5
 801a07a:	f7ea f823 	bl	80040c4 <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 801a07e:	f107 030b 	add.w	r3, r7, #11
 801a082:	4619      	mov	r1, r3
 801a084:	200a      	movs	r0, #10
 801a086:	f7e9 fd59 	bl	8003b3c <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801a08a:	7afb      	ldrb	r3, [r7, #11]
 801a08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a090:	b2db      	uxtb	r3, r3
 801a092:	4619      	mov	r1, r3
 801a094:	200a      	movs	r0, #10
 801a096:	f7e9 fe87 	bl	8003da8 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 801a09a:	7afb      	ldrb	r3, [r7, #11]
 801a09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a0a0:	b2db      	uxtb	r3, r3
 801a0a2:	4619      	mov	r1, r3
 801a0a4:	200a      	movs	r0, #10
 801a0a6:	f7e9 fe7f 	bl	8003da8 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801a0aa:	7afb      	ldrb	r3, [r7, #11]
 801a0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0b0:	b2db      	uxtb	r3, r3
 801a0b2:	4619      	mov	r1, r3
 801a0b4:	200a      	movs	r0, #10
 801a0b6:	f7e9 fe77 	bl	8003da8 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801a0ba:	20d1      	movs	r0, #209	; 0xd1
 801a0bc:	f7ea f802 	bl	80040c4 <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 801a0c0:	2240      	movs	r2, #64	; 0x40
 801a0c2:	2140      	movs	r1, #64	; 0x40
 801a0c4:	2030      	movs	r0, #48	; 0x30
 801a0c6:	f7e9 fb35 	bl	8003734 <st25r3911CheckReg>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	f083 0301 	eor.w	r3, r3, #1
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d003      	beq.n	801a0de <rfalListenSetState+0x152>
                {
                    reSetState = true;
 801a0d6:	2301      	movs	r3, #1
 801a0d8:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 801a0da:	2301      	movs	r3, #1
 801a0dc:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 801a0de:	4b10      	ldr	r3, [pc, #64]	; (801a120 <rfalListenSetState+0x194>)
 801a0e0:	799b      	ldrb	r3, [r3, #6]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d00e      	beq.n	801a104 <rfalListenSetState+0x178>
 801a0e6:	4b0e      	ldr	r3, [pc, #56]	; (801a120 <rfalListenSetState+0x194>)
 801a0e8:	799b      	ldrb	r3, [r3, #6]
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	2001      	movs	r0, #1
 801a0ee:	f7e9 fe13 	bl	8003d18 <st25r3911WriteTestRegister>
                break;
 801a0f2:	e007      	b.n	801a104 <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 801a0f4:	2318      	movs	r3, #24
 801a0f6:	e00f      	b.n	801a118 <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 801a0f8:	2321      	movs	r3, #33	; 0x21
 801a0fa:	e00d      	b.n	801a118 <rfalListenSetState+0x18c>
                break;
 801a0fc:	bf00      	nop
 801a0fe:	e002      	b.n	801a106 <rfalListenSetState+0x17a>
                break;
 801a100:	bf00      	nop
 801a102:	e000      	b.n	801a106 <rfalListenSetState+0x17a>
                break;
 801a104:	bf00      	nop
        }
    }
    while( reSetState );
 801a106:	7bbb      	ldrb	r3, [r7, #14]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	f47f af4c 	bne.w	8019fa6 <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 801a10e:	4a04      	ldr	r2, [pc, #16]	; (801a120 <rfalListenSetState+0x194>)
 801a110:	7bfb      	ldrb	r3, [r7, #15]
 801a112:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 801a116:	89bb      	ldrh	r3, [r7, #12]
}
 801a118:	4618      	mov	r0, r3
 801a11a:	3710      	adds	r7, #16
 801a11c:	46bd      	mov	sp, r7
 801a11e:	bd80      	pop	{r7, pc}
 801a120:	200039e4 	.word	0x200039e4
 801a124:	00f01930 	.word	0x00f01930
 801a128:	00f01910 	.word	0x00f01910

0801a12c <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 801a12c:	b5b0      	push	{r4, r5, r7, lr}
 801a12e:	b086      	sub	sp, #24
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d130      	bne.n	801a19c <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 801a13a:	4bad      	ldr	r3, [pc, #692]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a13c:	2214      	movs	r2, #20
 801a13e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gRFAL.wum.cfg.irqTout     = false;
 801a142:	4bab      	ldr	r3, [pc, #684]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a144:	2200      	movs	r2, #0
 801a146:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 801a14a:	4ba9      	ldr	r3, [pc, #676]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 801a152:	4ba7      	ldr	r3, [pc, #668]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a154:	2201      	movs	r2, #1
 801a156:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 801a15a:	4ba5      	ldr	r3, [pc, #660]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a15c:	2201      	movs	r2, #1
 801a15e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 801a162:	4ba3      	ldr	r3, [pc, #652]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a164:	2200      	movs	r2, #0
 801a166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 801a16a:	4ba1      	ldr	r3, [pc, #644]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a16c:	2202      	movs	r2, #2
 801a16e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 801a172:	4b9f      	ldr	r3, [pc, #636]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a174:	22ff      	movs	r2, #255	; 0xff
 801a176:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 801a17a:	4b9d      	ldr	r3, [pc, #628]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a17c:	2200      	movs	r2, #0
 801a17e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 801a182:	4b9b      	ldr	r3, [pc, #620]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a184:	2202      	movs	r2, #2
 801a186:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 801a18a:	4b99      	ldr	r3, [pc, #612]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a18c:	22ff      	movs	r2, #255	; 0xff
 801a18e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 801a192:	4b97      	ldr	r3, [pc, #604]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a194:	2200      	movs	r2, #0
 801a196:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801a19a:	e00e      	b.n	801a1ba <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 801a19c:	4b94      	ldr	r3, [pc, #592]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	3369      	adds	r3, #105	; 0x69
 801a1a2:	6811      	ldr	r1, [r2, #0]
 801a1a4:	6855      	ldr	r5, [r2, #4]
 801a1a6:	6894      	ldr	r4, [r2, #8]
 801a1a8:	68d0      	ldr	r0, [r2, #12]
 801a1aa:	6019      	str	r1, [r3, #0]
 801a1ac:	605d      	str	r5, [r3, #4]
 801a1ae:	609c      	str	r4, [r3, #8]
 801a1b0:	60d8      	str	r0, [r3, #12]
 801a1b2:	6911      	ldr	r1, [r2, #16]
 801a1b4:	6119      	str	r1, [r3, #16]
 801a1b6:	7d12      	ldrb	r2, [r2, #20]
 801a1b8:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801a1ba:	4b8d      	ldr	r3, [pc, #564]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d009      	beq.n	801a1d8 <rfalWakeUpModeStart+0xac>
 801a1c4:	4b8a      	ldr	r3, [pc, #552]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1c6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d121      	bne.n	801a212 <rfalWakeUpModeStart+0xe6>
 801a1ce:	4b88      	ldr	r3, [pc, #544]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1d0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d11c      	bne.n	801a212 <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a1d8:	4b85      	ldr	r3, [pc, #532]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1da:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a1de:	f083 0301 	eor.w	r3, r3, #1
 801a1e2:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d00f      	beq.n	801a208 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a1e8:	4b81      	ldr	r3, [pc, #516]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1ea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a1ee:	f083 0301 	eor.w	r3, r3, #1
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d007      	beq.n	801a208 <rfalWakeUpModeStart+0xdc>
 801a1f8:	4b7d      	ldr	r3, [pc, #500]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a1fa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a1fe:	f083 0301 	eor.w	r3, r3, #1
 801a202:	b2db      	uxtb	r3, r3
 801a204:	2b00      	cmp	r3, #0
 801a206:	d104      	bne.n	801a212 <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 801a208:	4b79      	ldr	r3, [pc, #484]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a20a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d001      	beq.n	801a216 <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 801a212:	2307      	movs	r3, #7
 801a214:	e14f      	b.n	801a4b6 <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801a216:	2300      	movs	r3, #0
 801a218:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 801a21a:	f7e9 f8c2 	bl	80033a2 <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801a21e:	2110      	movs	r1, #16
 801a220:	2009      	movs	r0, #9
 801a222:	f7e9 fe0d 	bl	8003e40 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 801a226:	2208      	movs	r2, #8
 801a228:	21f8      	movs	r1, #248	; 0xf8
 801a22a:	2003      	movs	r0, #3
 801a22c:	f7e9 fe49 	bl	8003ec2 <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 801a230:	2004      	movs	r0, #4
 801a232:	f7f5 fa93 	bl	800f75c <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 801a236:	4b6e      	ldr	r3, [pc, #440]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a238:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801a23c:	011b      	lsls	r3, r3, #4
 801a23e:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 801a240:	4b6b      	ldr	r3, [pc, #428]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a242:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801a246:	2b0f      	cmp	r3, #15
 801a248:	d802      	bhi.n	801a250 <rfalWakeUpModeStart+0x124>
 801a24a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801a24e:	e000      	b.n	801a252 <rfalWakeUpModeStart+0x126>
 801a250:	2200      	movs	r2, #0
 801a252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a256:	4313      	orrs	r3, r2
 801a258:	b25b      	sxtb	r3, r3
 801a25a:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 801a25c:	4b64      	ldr	r3, [pc, #400]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a25e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801a262:	2b00      	cmp	r3, #0
 801a264:	d007      	beq.n	801a276 <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 801a266:	7dfb      	ldrb	r3, [r7, #23]
 801a268:	f043 0308 	orr.w	r3, r3, #8
 801a26c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a274:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 801a276:	4b5e      	ldr	r3, [pc, #376]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a278:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d04c      	beq.n	801a31a <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 801a280:	4b5b      	ldr	r3, [pc, #364]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a282:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801a286:	011b      	lsls	r3, r3, #4
 801a288:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 801a28a:	4b59      	ldr	r3, [pc, #356]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a28c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801a290:	2b00      	cmp	r3, #0
 801a292:	d001      	beq.n	801a298 <rfalWakeUpModeStart+0x16c>
 801a294:	2208      	movs	r2, #8
 801a296:	e000      	b.n	801a29a <rfalWakeUpModeStart+0x16e>
 801a298:	2200      	movs	r2, #0
 801a29a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	b25b      	sxtb	r3, r3
 801a2a2:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 801a2a4:	4b52      	ldr	r3, [pc, #328]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a2a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801a2aa:	005b      	lsls	r3, r3, #1
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	b25b      	sxtb	r3, r3
 801a2b0:	f003 0306 	and.w	r3, r3, #6
 801a2b4:	b25a      	sxtb	r2, r3
 801a2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2ba:	4313      	orrs	r3, r2
 801a2bc:	b25b      	sxtb	r3, r3
 801a2be:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 801a2c0:	4b4b      	ldr	r3, [pc, #300]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a2c2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801a2c6:	b25a      	sxtb	r2, r3
 801a2c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2cc:	4313      	orrs	r3, r2
 801a2ce:	b25b      	sxtb	r3, r3
 801a2d0:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 801a2d2:	7bfb      	ldrb	r3, [r7, #15]
 801a2d4:	4619      	mov	r1, r3
 801a2d6:	2032      	movs	r0, #50	; 0x32
 801a2d8:	f7e9 fd66 	bl	8003da8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 801a2dc:	4b44      	ldr	r3, [pc, #272]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a2de:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801a2e2:	f083 0301 	eor.w	r3, r3, #1
 801a2e6:	b2db      	uxtb	r3, r3
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d00e      	beq.n	801a30a <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 801a2ec:	4b40      	ldr	r3, [pc, #256]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a2ee:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801a2f2:	2bff      	cmp	r3, #255	; 0xff
 801a2f4:	d102      	bne.n	801a2fc <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 801a2f6:	483f      	ldr	r0, [pc, #252]	; (801a3f4 <rfalWakeUpModeStart+0x2c8>)
 801a2f8:	f7e9 f901 	bl	80034fe <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 801a2fc:	4b3c      	ldr	r3, [pc, #240]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a2fe:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801a302:	4619      	mov	r1, r3
 801a304:	2033      	movs	r0, #51	; 0x33
 801a306:	f7e9 fd4f 	bl	8003da8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 801a30a:	7dfb      	ldrb	r3, [r7, #23]
 801a30c:	f043 0304 	orr.w	r3, r3, #4
 801a310:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 801a312:	693b      	ldr	r3, [r7, #16]
 801a314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a318:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 801a31a:	4b35      	ldr	r3, [pc, #212]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a31c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801a320:	2b00      	cmp	r3, #0
 801a322:	d04c      	beq.n	801a3be <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 801a324:	4b32      	ldr	r3, [pc, #200]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a326:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 801a32a:	011b      	lsls	r3, r3, #4
 801a32c:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 801a32e:	4b30      	ldr	r3, [pc, #192]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a330:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801a334:	2b00      	cmp	r3, #0
 801a336:	d001      	beq.n	801a33c <rfalWakeUpModeStart+0x210>
 801a338:	2208      	movs	r2, #8
 801a33a:	e000      	b.n	801a33e <rfalWakeUpModeStart+0x212>
 801a33c:	2200      	movs	r2, #0
 801a33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a342:	4313      	orrs	r3, r2
 801a344:	b25b      	sxtb	r3, r3
 801a346:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 801a348:	4b29      	ldr	r3, [pc, #164]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a34a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801a34e:	005b      	lsls	r3, r3, #1
 801a350:	b2db      	uxtb	r3, r3
 801a352:	b25b      	sxtb	r3, r3
 801a354:	f003 0306 	and.w	r3, r3, #6
 801a358:	b25a      	sxtb	r2, r3
 801a35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a35e:	4313      	orrs	r3, r2
 801a360:	b25b      	sxtb	r3, r3
 801a362:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 801a364:	4b22      	ldr	r3, [pc, #136]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a366:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801a36a:	b25a      	sxtb	r2, r3
 801a36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a370:	4313      	orrs	r3, r2
 801a372:	b25b      	sxtb	r3, r3
 801a374:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 801a376:	7bfb      	ldrb	r3, [r7, #15]
 801a378:	4619      	mov	r1, r3
 801a37a:	2036      	movs	r0, #54	; 0x36
 801a37c:	f7e9 fd14 	bl	8003da8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 801a380:	4b1b      	ldr	r3, [pc, #108]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a382:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801a386:	f083 0301 	eor.w	r3, r3, #1
 801a38a:	b2db      	uxtb	r3, r3
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d00e      	beq.n	801a3ae <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801a390:	4b17      	ldr	r3, [pc, #92]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a392:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a396:	2bff      	cmp	r3, #255	; 0xff
 801a398:	d102      	bne.n	801a3a0 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 801a39a:	4817      	ldr	r0, [pc, #92]	; (801a3f8 <rfalWakeUpModeStart+0x2cc>)
 801a39c:	f7e9 f8bd 	bl	800351a <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 801a3a0:	4b13      	ldr	r3, [pc, #76]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a3a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	2037      	movs	r0, #55	; 0x37
 801a3aa:	f7e9 fcfd 	bl	8003da8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 801a3ae:	7dfb      	ldrb	r3, [r7, #23]
 801a3b0:	f043 0302 	orr.w	r3, r3, #2
 801a3b4:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 801a3b6:	693b      	ldr	r3, [r7, #16]
 801a3b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a3bc:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 801a3be:	4b0c      	ldr	r3, [pc, #48]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a3c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d05a      	beq.n	801a47e <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 801a3c8:	2188      	movs	r1, #136	; 0x88
 801a3ca:	2002      	movs	r0, #2
 801a3cc:	f7e9 fd38 	bl	8003e40 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 801a3d0:	2000      	movs	r0, #0
 801a3d2:	f7e9 f8cc 	bl	800356e <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 801a3d6:	4b06      	ldr	r3, [pc, #24]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a3d8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801a3dc:	011b      	lsls	r3, r3, #4
 801a3de:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 801a3e0:	4b03      	ldr	r3, [pc, #12]	; (801a3f0 <rfalWakeUpModeStart+0x2c4>)
 801a3e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d008      	beq.n	801a3fc <rfalWakeUpModeStart+0x2d0>
 801a3ea:	2208      	movs	r2, #8
 801a3ec:	e007      	b.n	801a3fe <rfalWakeUpModeStart+0x2d2>
 801a3ee:	bf00      	nop
 801a3f0:	200039e4 	.word	0x200039e4
 801a3f4:	20003a52 	.word	0x20003a52
 801a3f8:	20003a58 	.word	0x20003a58
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a402:	4313      	orrs	r3, r2
 801a404:	b25b      	sxtb	r3, r3
 801a406:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 801a408:	4b2d      	ldr	r3, [pc, #180]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a40a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801a40e:	005b      	lsls	r3, r3, #1
 801a410:	b2db      	uxtb	r3, r3
 801a412:	b25b      	sxtb	r3, r3
 801a414:	f003 0306 	and.w	r3, r3, #6
 801a418:	b25a      	sxtb	r2, r3
 801a41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a41e:	4313      	orrs	r3, r2
 801a420:	b25b      	sxtb	r3, r3
 801a422:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 801a424:	4b26      	ldr	r3, [pc, #152]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a426:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801a42a:	b25a      	sxtb	r2, r3
 801a42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a430:	4313      	orrs	r3, r2
 801a432:	b25b      	sxtb	r3, r3
 801a434:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 801a436:	7bfb      	ldrb	r3, [r7, #15]
 801a438:	4619      	mov	r1, r3
 801a43a:	203a      	movs	r0, #58	; 0x3a
 801a43c:	f7e9 fcb4 	bl	8003da8 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 801a440:	4b1f      	ldr	r3, [pc, #124]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a442:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801a446:	f083 0301 	eor.w	r3, r3, #1
 801a44a:	b2db      	uxtb	r3, r3
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d00e      	beq.n	801a46e <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801a450:	4b1b      	ldr	r3, [pc, #108]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a452:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801a456:	2bff      	cmp	r3, #255	; 0xff
 801a458:	d102      	bne.n	801a460 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 801a45a:	481a      	ldr	r0, [pc, #104]	; (801a4c4 <rfalWakeUpModeStart+0x398>)
 801a45c:	f7e9 f86b 	bl	8003536 <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 801a460:	4b17      	ldr	r3, [pc, #92]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a462:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801a466:	4619      	mov	r1, r3
 801a468:	203b      	movs	r0, #59	; 0x3b
 801a46a:	f7e9 fc9d 	bl	8003da8 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 801a46e:	7dfb      	ldrb	r3, [r7, #23]
 801a470:	f043 0301 	orr.w	r3, r3, #1
 801a474:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a47c:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801a47e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a482:	f7ea f85d 	bl	8004540 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 801a486:	6938      	ldr	r0, [r7, #16]
 801a488:	f7ea f812 	bl	80044b0 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 801a48c:	6938      	ldr	r0, [r7, #16]
 801a48e:	f7ea f84b 	bl	8004528 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 801a492:	7dfb      	ldrb	r3, [r7, #23]
 801a494:	4619      	mov	r1, r3
 801a496:	2031      	movs	r0, #49	; 0x31
 801a498:	f7e9 fc86 	bl	8003da8 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 801a49c:	2204      	movs	r2, #4
 801a49e:	2184      	movs	r1, #132	; 0x84
 801a4a0:	2002      	movs	r0, #2
 801a4a2:	f7e9 fd0e 	bl	8003ec2 <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 801a4a6:	4b06      	ldr	r3, [pc, #24]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a4a8:	2201      	movs	r2, #1
 801a4aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 801a4ae:	4b04      	ldr	r3, [pc, #16]	; (801a4c0 <rfalWakeUpModeStart+0x394>)
 801a4b0:	2205      	movs	r2, #5
 801a4b2:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 801a4b4:	2300      	movs	r3, #0
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3718      	adds	r7, #24
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bdb0      	pop	{r4, r5, r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	200039e4 	.word	0x200039e4
 801a4c4:	20003a5e 	.word	0x20003a5e

0801a4c8 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 801a4c8:	b480      	push	{r7}
 801a4ca:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 801a4cc:	4b05      	ldr	r3, [pc, #20]	; (801a4e4 <rfalWakeUpModeHasWoke+0x1c>)
 801a4ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a4d2:	2b01      	cmp	r3, #1
 801a4d4:	bf8c      	ite	hi
 801a4d6:	2301      	movhi	r3, #1
 801a4d8:	2300      	movls	r3, #0
 801a4da:	b2db      	uxtb	r3, r3
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bc80      	pop	{r7}
 801a4e2:	4770      	bx	lr
 801a4e4:	200039e4 	.word	0x200039e4

0801a4e8 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b082      	sub	sp, #8
 801a4ec:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 801a4ee:	4b1c      	ldr	r3, [pc, #112]	; (801a560 <rfalRunWakeUpModeWorker+0x78>)
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	2b05      	cmp	r3, #5
 801a4f4:	d129      	bne.n	801a54a <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 801a4f6:	4b1a      	ldr	r3, [pc, #104]	; (801a560 <rfalRunWakeUpModeWorker+0x78>)
 801a4f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a4fc:	3b01      	subs	r3, #1
 801a4fe:	2b01      	cmp	r3, #1
 801a500:	d825      	bhi.n	801a54e <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 801a502:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801a506:	f7e9 ffd3 	bl	80044b0 <st25r3911GetInterrupt>
 801a50a:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d01f      	beq.n	801a552 <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d003      	beq.n	801a524 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a51c:	4b10      	ldr	r3, [pc, #64]	; (801a560 <rfalRunWakeUpModeWorker+0x78>)
 801a51e:	2202      	movs	r2, #2
 801a520:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d003      	beq.n	801a536 <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a52e:	4b0c      	ldr	r3, [pc, #48]	; (801a560 <rfalRunWakeUpModeWorker+0x78>)
 801a530:	2202      	movs	r2, #2
 801a532:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d00a      	beq.n	801a556 <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801a540:	4b07      	ldr	r3, [pc, #28]	; (801a560 <rfalRunWakeUpModeWorker+0x78>)
 801a542:	2202      	movs	r2, #2
 801a544:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            break;
 801a548:	e005      	b.n	801a556 <rfalRunWakeUpModeWorker+0x6e>
        return;
 801a54a:	bf00      	nop
 801a54c:	e004      	b.n	801a558 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 801a54e:	bf00      	nop
 801a550:	e002      	b.n	801a558 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 801a552:	bf00      	nop
 801a554:	e000      	b.n	801a558 <rfalRunWakeUpModeWorker+0x70>
            break;
 801a556:	bf00      	nop
    }
}
 801a558:	3708      	adds	r7, #8
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}
 801a55e:	bf00      	nop
 801a560:	200039e4 	.word	0x200039e4

0801a564 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 801a564:	b580      	push	{r7, lr}
 801a566:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 801a568:	4b0f      	ldr	r3, [pc, #60]	; (801a5a8 <rfalWakeUpModeStop+0x44>)
 801a56a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d101      	bne.n	801a576 <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 801a572:	2321      	movs	r3, #33	; 0x21
 801a574:	e015      	b.n	801a5a2 <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 801a576:	4b0c      	ldr	r3, [pc, #48]	; (801a5a8 <rfalWakeUpModeStop+0x44>)
 801a578:	2200      	movs	r2, #0
 801a57a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801a57e:	2110      	movs	r1, #16
 801a580:	2009      	movs	r0, #9
 801a582:	f7e9 fc80 	bl	8003e86 <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 801a586:	2104      	movs	r1, #4
 801a588:	2002      	movs	r0, #2
 801a58a:	f7e9 fc59 	bl	8003e40 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 801a58e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801a592:	f7e9 ffd5 	bl	8004540 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 801a596:	f7e8 ff0c 	bl	80033b2 <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 801a59a:	2005      	movs	r0, #5
 801a59c:	f7f5 f8de 	bl	800f75c <rfalSetAnalogConfig>
      
    return ERR_NONE;
 801a5a0:	2300      	movs	r3, #0
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	bd80      	pop	{r7, pc}
 801a5a6:	bf00      	nop
 801a5a8:	200039e4 	.word	0x200039e4

0801a5ac <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	80fb      	strh	r3, [r7, #6]
 801a5b6:	460b      	mov	r3, r1
 801a5b8:	717b      	strb	r3, [r7, #5]
 801a5ba:	4613      	mov	r3, r2
 801a5bc:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 801a5be:	88fb      	ldrh	r3, [r7, #6]
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	793a      	ldrb	r2, [r7, #4]
 801a5c4:	7979      	ldrb	r1, [r7, #5]
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	f7e9 fc7b 	bl	8003ec2 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 801a5cc:	2300      	movs	r3, #0
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3708      	adds	r7, #8
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd80      	pop	{r7, pc}

0801a5d6 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801a5d6:	b580      	push	{r7, lr}
 801a5d8:	b082      	sub	sp, #8
 801a5da:	af00      	add	r7, sp, #0
 801a5dc:	4603      	mov	r3, r0
 801a5de:	80fb      	strh	r3, [r7, #6]
 801a5e0:	460b      	mov	r3, r1
 801a5e2:	717b      	strb	r3, [r7, #5]
 801a5e4:	4613      	mov	r3, r2
 801a5e6:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 801a5e8:	88fb      	ldrh	r3, [r7, #6]
 801a5ea:	b2db      	uxtb	r3, r3
 801a5ec:	793a      	ldrb	r2, [r7, #4]
 801a5ee:	7979      	ldrb	r1, [r7, #5]
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7e9 fca5 	bl	8003f40 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 801a5f6:	2300      	movs	r3, #0
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3708      	adds	r7, #8
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}

0801a600 <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b086      	sub	sp, #24
 801a604:	af00      	add	r7, sp, #0
 801a606:	4603      	mov	r3, r0
 801a608:	60b9      	str	r1, [r7, #8]
 801a60a:	607a      	str	r2, [r7, #4]
 801a60c:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 801a60e:	2300      	movs	r3, #0
 801a610:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801a612:	2300      	movs	r3, #0
 801a614:	75fb      	strb	r3, [r7, #23]
 801a616:	e072      	b.n	801a6fe <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 801a618:	2001      	movs	r0, #1
 801a61a:	f7ea f863 	bl	80046e4 <HAL_Delay>
        
        if( i==0U )
 801a61e:	7dfb      	ldrb	r3, [r7, #23]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d107      	bne.n	801a634 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 801a624:	f107 0312 	add.w	r3, r7, #18
 801a628:	4618      	mov	r0, r3
 801a62a:	f000 f8c6 	bl	801a7ba <rfalSt25tbPollerPcall>
 801a62e:	4603      	mov	r3, r0
 801a630:	82bb      	strh	r3, [r7, #20]
 801a632:	e008      	b.n	801a646 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 801a634:	f107 0212 	add.w	r2, r7, #18
 801a638:	7dfb      	ldrb	r3, [r7, #23]
 801a63a:	4611      	mov	r1, r2
 801a63c:	4618      	mov	r0, r3
 801a63e:	f000 f8e2 	bl	801a806 <rfalSt25tbPollerSlotMarker>
 801a642:	4603      	mov	r3, r0
 801a644:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 801a646:	8abb      	ldrh	r3, [r7, #20]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d148      	bne.n	801a6de <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	781b      	ldrb	r3, [r3, #0]
 801a650:	461a      	mov	r2, r3
 801a652:	4613      	mov	r3, r2
 801a654:	009b      	lsls	r3, r3, #2
 801a656:	4413      	add	r3, r2
 801a658:	005b      	lsls	r3, r3, #1
 801a65a:	461a      	mov	r2, r3
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	4413      	add	r3, r2
 801a660:	7cba      	ldrb	r2, [r7, #18]
 801a662:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	461a      	mov	r2, r3
 801a66a:	4613      	mov	r3, r2
 801a66c:	009b      	lsls	r3, r3, #2
 801a66e:	4413      	add	r3, r2
 801a670:	005b      	lsls	r3, r3, #1
 801a672:	461a      	mov	r2, r3
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	4413      	add	r3, r2
 801a678:	2200      	movs	r2, #0
 801a67a:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 801a67c:	7cbb      	ldrb	r3, [r7, #18]
 801a67e:	4618      	mov	r0, r3
 801a680:	f000 f8f4 	bl	801a86c <rfalSt25tbPollerSelect>
 801a684:	4603      	mov	r3, r0
 801a686:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	781b      	ldrb	r3, [r3, #0]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d00b      	beq.n	801a6a8 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	781b      	ldrb	r3, [r3, #0]
 801a694:	461a      	mov	r2, r3
 801a696:	4613      	mov	r3, r2
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	4413      	add	r3, r2
 801a69c:	005b      	lsls	r3, r3, #1
 801a69e:	3b0a      	subs	r3, #10
 801a6a0:	68ba      	ldr	r2, [r7, #8]
 801a6a2:	4413      	add	r3, r2
 801a6a4:	2201      	movs	r2, #1
 801a6a6:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 801a6a8:	8abb      	ldrh	r3, [r7, #20]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d10d      	bne.n	801a6ca <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	781b      	ldrb	r3, [r3, #0]
 801a6b2:	461a      	mov	r2, r3
 801a6b4:	4613      	mov	r3, r2
 801a6b6:	009b      	lsls	r3, r3, #2
 801a6b8:	4413      	add	r3, r2
 801a6ba:	005b      	lsls	r3, r3, #1
 801a6bc:	461a      	mov	r2, r3
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	4413      	add	r3, r2
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f000 f8fd 	bl	801a8c4 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 801a6ca:	8abb      	ldrh	r3, [r7, #20]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d10e      	bne.n	801a6ee <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	3301      	adds	r3, #1
 801a6d6:	b2da      	uxtb	r2, r3
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	701a      	strb	r2, [r3, #0]
 801a6dc:	e007      	b.n	801a6ee <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801a6de:	8abb      	ldrh	r3, [r7, #20]
 801a6e0:	2b15      	cmp	r3, #21
 801a6e2:	d002      	beq.n	801a6ea <rfalSt25tbPollerDoCollisionResolution+0xea>
 801a6e4:	8abb      	ldrh	r3, [r7, #20]
 801a6e6:	2b09      	cmp	r3, #9
 801a6e8:	d101      	bne.n	801a6ee <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	7bfa      	ldrb	r2, [r7, #15]
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d906      	bls.n	801a706 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801a6f8:	7dfb      	ldrb	r3, [r7, #23]
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	75fb      	strb	r3, [r7, #23]
 801a6fe:	7dfb      	ldrb	r3, [r7, #23]
 801a700:	2b0f      	cmp	r3, #15
 801a702:	d989      	bls.n	801a618 <rfalSt25tbPollerDoCollisionResolution+0x18>
 801a704:	e000      	b.n	801a708 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 801a706:	bf00      	nop
        }
    }
    return col;
 801a708:	7cfb      	ldrb	r3, [r7, #19]
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3718      	adds	r7, #24
 801a70e:	46bd      	mov	sp, r7
 801a710:	bd80      	pop	{r7, pc}

0801a712 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 801a712:	b580      	push	{r7, lr}
 801a714:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 801a716:	f7fb fc1d 	bl	8015f54 <rfalNfcbPollerInitialize>
 801a71a:	4603      	mov	r3, r0
}
 801a71c:	4618      	mov	r0, r3
 801a71e:	bd80      	pop	{r7, pc}

0801a720 <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 801a728:	2300      	movs	r3, #0
 801a72a:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 801a72c:	f107 030d 	add.w	r3, r7, #13
 801a730:	4618      	mov	r0, r3
 801a732:	f000 f815 	bl	801a760 <rfalSt25tbPollerInitiate>
 801a736:	4603      	mov	r3, r0
 801a738:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801a73a:	89fb      	ldrh	r3, [r7, #14]
 801a73c:	2b15      	cmp	r3, #21
 801a73e:	d002      	beq.n	801a746 <rfalSt25tbPollerCheckPresence+0x26>
 801a740:	89fb      	ldrh	r3, [r7, #14]
 801a742:	2b09      	cmp	r3, #9
 801a744:	d101      	bne.n	801a74a <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 801a746:	2300      	movs	r3, #0
 801a748:	e006      	b.n	801a758 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d002      	beq.n	801a756 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 801a750:	7b7a      	ldrb	r2, [r7, #13]
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801a756:	89fb      	ldrh	r3, [r7, #14]
}
 801a758:	4618      	mov	r0, r3
 801a75a:	3710      	adds	r7, #16
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}

0801a760 <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b08a      	sub	sp, #40	; 0x28
 801a764:	af04      	add	r7, sp, #16
 801a766:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 801a768:	2306      	movs	r3, #6
 801a76a:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 801a76c:	2300      	movs	r3, #0
 801a76e:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a770:	f107 020c 	add.w	r2, r7, #12
 801a774:	f107 0010 	add.w	r0, r7, #16
 801a778:	f241 036d 	movw	r3, #4205	; 0x106d
 801a77c:	9302      	str	r3, [sp, #8]
 801a77e:	2300      	movs	r3, #0
 801a780:	9301      	str	r3, [sp, #4]
 801a782:	f107 0314 	add.w	r3, r7, #20
 801a786:	9300      	str	r3, [sp, #0]
 801a788:	2303      	movs	r3, #3
 801a78a:	2102      	movs	r1, #2
 801a78c:	f7fd ff24 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801a790:	4603      	mov	r3, r0
 801a792:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a794:	8afb      	ldrh	r3, [r7, #22]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d104      	bne.n	801a7a4 <rfalSt25tbPollerInitiate+0x44>
 801a79a:	8abb      	ldrh	r3, [r7, #20]
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d001      	beq.n	801a7a4 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 801a7a0:	230b      	movs	r3, #11
 801a7a2:	e006      	b.n	801a7b2 <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d002      	beq.n	801a7b0 <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 801a7aa:	7b3a      	ldrb	r2, [r7, #12]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801a7b0:	8afb      	ldrh	r3, [r7, #22]
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	3718      	adds	r7, #24
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}

0801a7ba <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 801a7ba:	b580      	push	{r7, lr}
 801a7bc:	b088      	sub	sp, #32
 801a7be:	af04      	add	r7, sp, #16
 801a7c0:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 801a7c2:	2306      	movs	r3, #6
 801a7c4:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 801a7c6:	2304      	movs	r3, #4
 801a7c8:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a7ca:	f107 0008 	add.w	r0, r7, #8
 801a7ce:	f241 036d 	movw	r3, #4205	; 0x106d
 801a7d2:	9302      	str	r3, [sp, #8]
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	9301      	str	r3, [sp, #4]
 801a7d8:	f107 030c 	add.w	r3, r7, #12
 801a7dc:	9300      	str	r3, [sp, #0]
 801a7de:	2301      	movs	r3, #1
 801a7e0:	687a      	ldr	r2, [r7, #4]
 801a7e2:	2102      	movs	r1, #2
 801a7e4:	f7fd fef8 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a7ec:	89fb      	ldrh	r3, [r7, #14]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d104      	bne.n	801a7fc <rfalSt25tbPollerPcall+0x42>
 801a7f2:	89bb      	ldrh	r3, [r7, #12]
 801a7f4:	2b01      	cmp	r3, #1
 801a7f6:	d001      	beq.n	801a7fc <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 801a7f8:	230b      	movs	r3, #11
 801a7fa:	e000      	b.n	801a7fe <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 801a7fc:	89fb      	ldrh	r3, [r7, #14]
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3710      	adds	r7, #16
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}

0801a806 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 801a806:	b580      	push	{r7, lr}
 801a808:	b088      	sub	sp, #32
 801a80a:	af04      	add	r7, sp, #16
 801a80c:	4603      	mov	r3, r0
 801a80e:	6039      	str	r1, [r7, #0]
 801a810:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 801a812:	79fb      	ldrb	r3, [r7, #7]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d002      	beq.n	801a81e <rfalSt25tbPollerSlotMarker+0x18>
 801a818:	79fb      	ldrb	r3, [r7, #7]
 801a81a:	2b0f      	cmp	r3, #15
 801a81c:	d901      	bls.n	801a822 <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 801a81e:	2307      	movs	r3, #7
 801a820:	e020      	b.n	801a864 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 801a822:	79fb      	ldrb	r3, [r7, #7]
 801a824:	011b      	lsls	r3, r3, #4
 801a826:	b2db      	uxtb	r3, r3
 801a828:	f043 0306 	orr.w	r3, r3, #6
 801a82c:	b2db      	uxtb	r3, r3
 801a82e:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a830:	f107 000b 	add.w	r0, r7, #11
 801a834:	f241 036d 	movw	r3, #4205	; 0x106d
 801a838:	9302      	str	r3, [sp, #8]
 801a83a:	2300      	movs	r3, #0
 801a83c:	9301      	str	r3, [sp, #4]
 801a83e:	f107 030c 	add.w	r3, r7, #12
 801a842:	9300      	str	r3, [sp, #0]
 801a844:	2301      	movs	r3, #1
 801a846:	683a      	ldr	r2, [r7, #0]
 801a848:	2101      	movs	r1, #1
 801a84a:	f7fd fec5 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801a84e:	4603      	mov	r3, r0
 801a850:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801a852:	89fb      	ldrh	r3, [r7, #14]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d104      	bne.n	801a862 <rfalSt25tbPollerSlotMarker+0x5c>
 801a858:	89bb      	ldrh	r3, [r7, #12]
 801a85a:	2b01      	cmp	r3, #1
 801a85c:	d001      	beq.n	801a862 <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 801a85e:	230b      	movs	r3, #11
 801a860:	e000      	b.n	801a864 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 801a862:	89fb      	ldrh	r3, [r7, #14]
}
 801a864:	4618      	mov	r0, r3
 801a866:	3710      	adds	r7, #16
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}

0801a86c <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b08a      	sub	sp, #40	; 0x28
 801a870:	af04      	add	r7, sp, #16
 801a872:	4603      	mov	r3, r0
 801a874:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 801a876:	230e      	movs	r3, #14
 801a878:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 801a87a:	79fb      	ldrb	r3, [r7, #7]
 801a87c:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a87e:	f107 020f 	add.w	r2, r7, #15
 801a882:	f107 0010 	add.w	r0, r7, #16
 801a886:	f241 036d 	movw	r3, #4205	; 0x106d
 801a88a:	9302      	str	r3, [sp, #8]
 801a88c:	2300      	movs	r3, #0
 801a88e:	9301      	str	r3, [sp, #4]
 801a890:	f107 0314 	add.w	r3, r7, #20
 801a894:	9300      	str	r3, [sp, #0]
 801a896:	2301      	movs	r3, #1
 801a898:	2102      	movs	r1, #2
 801a89a:	f7fd fe9d 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 801a8a2:	8afb      	ldrh	r3, [r7, #22]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d108      	bne.n	801a8ba <rfalSt25tbPollerSelect+0x4e>
 801a8a8:	8abb      	ldrh	r3, [r7, #20]
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d103      	bne.n	801a8b6 <rfalSt25tbPollerSelect+0x4a>
 801a8ae:	7bfb      	ldrb	r3, [r7, #15]
 801a8b0:	79fa      	ldrb	r2, [r7, #7]
 801a8b2:	429a      	cmp	r2, r3
 801a8b4:	d001      	beq.n	801a8ba <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 801a8b6:	230b      	movs	r3, #11
 801a8b8:	e000      	b.n	801a8bc <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 801a8ba:	8afb      	ldrh	r3, [r7, #22]
}
 801a8bc:	4618      	mov	r0, r3
 801a8be:	3718      	adds	r7, #24
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}

0801a8c4 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b088      	sub	sp, #32
 801a8c8:	af04      	add	r7, sp, #16
 801a8ca:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 801a8cc:	230b      	movs	r3, #11
 801a8ce:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801a8d0:	f107 000b 	add.w	r0, r7, #11
 801a8d4:	f241 036d 	movw	r3, #4205	; 0x106d
 801a8d8:	9302      	str	r3, [sp, #8]
 801a8da:	2300      	movs	r3, #0
 801a8dc:	9301      	str	r3, [sp, #4]
 801a8de:	f107 030c 	add.w	r3, r7, #12
 801a8e2:	9300      	str	r3, [sp, #0]
 801a8e4:	2308      	movs	r3, #8
 801a8e6:	687a      	ldr	r2, [r7, #4]
 801a8e8:	2101      	movs	r1, #1
 801a8ea:	f7fd fe75 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 801a8f2:	89fb      	ldrh	r3, [r7, #14]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d104      	bne.n	801a902 <rfalSt25tbPollerGetUID+0x3e>
 801a8f8:	89bb      	ldrh	r3, [r7, #12]
 801a8fa:	2b08      	cmp	r3, #8
 801a8fc:	d001      	beq.n	801a902 <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 801a8fe:	230b      	movs	r3, #11
 801a900:	e000      	b.n	801a904 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 801a902:	89fb      	ldrh	r3, [r7, #14]
}
 801a904:	4618      	mov	r0, r3
 801a906:	3710      	adds	r7, #16
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}

0801a90c <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b086      	sub	sp, #24
 801a910:	af00      	add	r7, sp, #0
 801a912:	4603      	mov	r3, r0
 801a914:	60b9      	str	r1, [r7, #8]
 801a916:	607a      	str	r2, [r7, #4]
 801a918:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d005      	beq.n	801a92c <rfalSt25tbPollerCollisionResolution+0x20>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d002      	beq.n	801a92c <rfalSt25tbPollerCollisionResolution+0x20>
 801a926:	7bfb      	ldrb	r3, [r7, #15]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d101      	bne.n	801a930 <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 801a92c:	2307      	movs	r3, #7
 801a92e:	e05c      	b.n	801a9ea <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2200      	movs	r2, #0
 801a934:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 801a936:	f107 0314 	add.w	r3, r7, #20
 801a93a:	4618      	mov	r0, r3
 801a93c:	f7ff ff10 	bl	801a760 <rfalSt25tbPollerInitiate>
 801a940:	4603      	mov	r3, r0
 801a942:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 801a944:	8afb      	ldrh	r3, [r7, #22]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d139      	bne.n	801a9be <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	461a      	mov	r2, r3
 801a950:	4613      	mov	r3, r2
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	4413      	add	r3, r2
 801a956:	005b      	lsls	r3, r3, #1
 801a958:	461a      	mov	r2, r3
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	4413      	add	r3, r2
 801a95e:	7d3a      	ldrb	r2, [r7, #20]
 801a960:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	781b      	ldrb	r3, [r3, #0]
 801a966:	461a      	mov	r2, r3
 801a968:	4613      	mov	r3, r2
 801a96a:	009b      	lsls	r3, r3, #2
 801a96c:	4413      	add	r3, r2
 801a96e:	005b      	lsls	r3, r3, #1
 801a970:	461a      	mov	r2, r3
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	4413      	add	r3, r2
 801a976:	2200      	movs	r2, #0
 801a978:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 801a97a:	7d3b      	ldrb	r3, [r7, #20]
 801a97c:	4618      	mov	r0, r3
 801a97e:	f7ff ff75 	bl	801a86c <rfalSt25tbPollerSelect>
 801a982:	4603      	mov	r3, r0
 801a984:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 801a986:	8afb      	ldrh	r3, [r7, #22]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d10f      	bne.n	801a9ac <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	781b      	ldrb	r3, [r3, #0]
 801a990:	461a      	mov	r2, r3
 801a992:	4613      	mov	r3, r2
 801a994:	009b      	lsls	r3, r3, #2
 801a996:	4413      	add	r3, r2
 801a998:	005b      	lsls	r3, r3, #1
 801a99a:	461a      	mov	r2, r3
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	4413      	add	r3, r2
 801a9a0:	3301      	adds	r3, #1
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f7ff ff8e 	bl	801a8c4 <rfalSt25tbPollerGetUID>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 801a9ac:	8afb      	ldrh	r3, [r7, #22]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d105      	bne.n	801a9be <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	781b      	ldrb	r3, [r3, #0]
 801a9b6:	3301      	adds	r3, #1
 801a9b8:	b2da      	uxtb	r2, r3
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	7bfa      	ldrb	r2, [r7, #15]
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d90f      	bls.n	801a9e8 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 801a9c8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	68b9      	ldr	r1, [r7, #8]
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7ff fe16 	bl	801a600 <rfalSt25tbPollerDoCollisionResolution>
 801a9d4:	4603      	mov	r3, r0
 801a9d6:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 801a9d8:	7d7b      	ldrb	r3, [r7, #21]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d004      	beq.n	801a9e8 <rfalSt25tbPollerCollisionResolution+0xdc>
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	781b      	ldrb	r3, [r3, #0]
 801a9e2:	7bfa      	ldrb	r2, [r7, #15]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d8ef      	bhi.n	801a9c8 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 801a9e8:	2300      	movs	r3, #0
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	3718      	adds	r7, #24
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}

0801a9f2 <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801a9f2:	b580      	push	{r7, lr}
 801a9f4:	b08c      	sub	sp, #48	; 0x30
 801a9f6:	af06      	add	r7, sp, #24
 801a9f8:	60b9      	str	r1, [r7, #8]
 801a9fa:	607b      	str	r3, [r7, #4]
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	73fb      	strb	r3, [r7, #15]
 801aa00:	4613      	mov	r3, r2
 801aa02:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 801aa04:	2300      	movs	r3, #0
 801aa06:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801aa08:	7dfb      	ldrb	r3, [r7, #23]
 801aa0a:	1c5a      	adds	r2, r3, #1
 801aa0c:	75fa      	strb	r2, [r7, #23]
 801aa0e:	89ba      	ldrh	r2, [r7, #12]
 801aa10:	b2d2      	uxtb	r2, r2
 801aa12:	3318      	adds	r3, #24
 801aa14:	443b      	add	r3, r7
 801aa16:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801aa1a:	89bb      	ldrh	r3, [r7, #12]
 801aa1c:	0a1b      	lsrs	r3, r3, #8
 801aa1e:	b29a      	uxth	r2, r3
 801aa20:	7dfb      	ldrb	r3, [r7, #23]
 801aa22:	1c59      	adds	r1, r3, #1
 801aa24:	75f9      	strb	r1, [r7, #23]
 801aa26:	b2d2      	uxtb	r2, r2
 801aa28:	3318      	adds	r3, #24
 801aa2a:	443b      	add	r3, r7
 801aa2c:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801aa30:	7bfb      	ldrb	r3, [r7, #15]
 801aa32:	f043 0308 	orr.w	r3, r3, #8
 801aa36:	b2d9      	uxtb	r1, r3
 801aa38:	7dfb      	ldrb	r3, [r7, #23]
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa3e:	9204      	str	r2, [sp, #16]
 801aa40:	8c3a      	ldrh	r2, [r7, #32]
 801aa42:	9203      	str	r2, [sp, #12]
 801aa44:	687a      	ldr	r2, [r7, #4]
 801aa46:	9202      	str	r2, [sp, #8]
 801aa48:	9301      	str	r3, [sp, #4]
 801aa4a:	f107 0314 	add.w	r3, r7, #20
 801aa4e:	9300      	str	r3, [sp, #0]
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	2200      	movs	r2, #0
 801aa54:	2020      	movs	r0, #32
 801aa56:	f7fc fdf1 	bl	801763c <rfalNfcvPollerTransceiveReq>
 801aa5a:	4603      	mov	r3, r0
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3718      	adds	r7, #24
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}

0801aa64 <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b09e      	sub	sp, #120	; 0x78
 801aa68:	af06      	add	r7, sp, #24
 801aa6a:	60b9      	str	r1, [r7, #8]
 801aa6c:	607b      	str	r3, [r7, #4]
 801aa6e:	4603      	mov	r3, r0
 801aa70:	73fb      	strb	r3, [r7, #15]
 801aa72:	4613      	mov	r3, r2
 801aa74:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801aa76:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d006      	beq.n	801aa8c <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801aa7e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801aa82:	2b20      	cmp	r3, #32
 801aa84:	d802      	bhi.n	801aa8c <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d101      	bne.n	801aa90 <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 801aa8c:	2307      	movs	r3, #7
 801aa8e:	e045      	b.n	801ab1c <rfalST25xVPollerM24LRWriteSingleBlock+0xb8>
    }
    
    dataLen = 0U;
 801aa90:	2300      	movs	r3, #0
 801aa92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801aa96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801aa9a:	1c5a      	adds	r2, r3, #1
 801aa9c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 801aaa0:	89ba      	ldrh	r2, [r7, #12]
 801aaa2:	b2d2      	uxtb	r2, r2
 801aaa4:	3360      	adds	r3, #96	; 0x60
 801aaa6:	443b      	add	r3, r7
 801aaa8:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801aaac:	89bb      	ldrh	r3, [r7, #12]
 801aaae:	0a1b      	lsrs	r3, r3, #8
 801aab0:	b29a      	uxth	r2, r3
 801aab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801aab6:	1c59      	adds	r1, r3, #1
 801aab8:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 801aabc:	b2d2      	uxtb	r2, r2
 801aabe:	3360      	adds	r3, #96	; 0x60
 801aac0:	443b      	add	r3, r7
 801aac2:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 801aac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801aaca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801aace:	4413      	add	r3, r2
 801aad0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801aad4:	6879      	ldr	r1, [r7, #4]
 801aad6:	4618      	mov	r0, r3
 801aad8:	f000 fc88 	bl	801b3ec <memcpy>
    dataLen += blockLen;
 801aadc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801aae0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801aae4:	4413      	add	r3, r2
 801aae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801aaea:	7bfb      	ldrb	r3, [r7, #15]
 801aaec:	f043 0308 	orr.w	r3, r3, #8
 801aaf0:	b2d9      	uxtb	r1, r3
 801aaf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801aafc:	9204      	str	r2, [sp, #16]
 801aafe:	222a      	movs	r2, #42	; 0x2a
 801ab00:	9203      	str	r2, [sp, #12]
 801ab02:	f107 0210 	add.w	r2, r7, #16
 801ab06:	9202      	str	r2, [sp, #8]
 801ab08:	9301      	str	r3, [sp, #4]
 801ab0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ab0e:	9300      	str	r3, [sp, #0]
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	2200      	movs	r2, #0
 801ab14:	2021      	movs	r0, #33	; 0x21
 801ab16:	f7fc fd91 	bl	801763c <rfalNfcvPollerTransceiveReq>
 801ab1a:	4603      	mov	r3, r0
}
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	3760      	adds	r7, #96	; 0x60
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}

0801ab24 <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b08a      	sub	sp, #40	; 0x28
 801ab28:	af06      	add	r7, sp, #24
 801ab2a:	6039      	str	r1, [r7, #0]
 801ab2c:	4611      	mov	r1, r2
 801ab2e:	461a      	mov	r2, r3
 801ab30:	4603      	mov	r3, r0
 801ab32:	71fb      	strb	r3, [r7, #7]
 801ab34:	460b      	mov	r3, r1
 801ab36:	80bb      	strh	r3, [r7, #4]
 801ab38:	4613      	mov	r3, r2
 801ab3a:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801ab40:	7bfb      	ldrb	r3, [r7, #15]
 801ab42:	1c5a      	adds	r2, r3, #1
 801ab44:	73fa      	strb	r2, [r7, #15]
 801ab46:	88ba      	ldrh	r2, [r7, #4]
 801ab48:	b2d2      	uxtb	r2, r2
 801ab4a:	3310      	adds	r3, #16
 801ab4c:	443b      	add	r3, r7
 801ab4e:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801ab52:	88bb      	ldrh	r3, [r7, #4]
 801ab54:	0a1b      	lsrs	r3, r3, #8
 801ab56:	b29a      	uxth	r2, r3
 801ab58:	7bfb      	ldrb	r3, [r7, #15]
 801ab5a:	1c59      	adds	r1, r3, #1
 801ab5c:	73f9      	strb	r1, [r7, #15]
 801ab5e:	b2d2      	uxtb	r2, r2
 801ab60:	3310      	adds	r3, #16
 801ab62:	443b      	add	r3, r7
 801ab64:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 801ab68:	7bfb      	ldrb	r3, [r7, #15]
 801ab6a:	1c5a      	adds	r2, r3, #1
 801ab6c:	73fa      	strb	r2, [r7, #15]
 801ab6e:	3310      	adds	r3, #16
 801ab70:	443b      	add	r3, r7
 801ab72:	79ba      	ldrb	r2, [r7, #6]
 801ab74:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801ab78:	79fb      	ldrb	r3, [r7, #7]
 801ab7a:	f043 0308 	orr.w	r3, r3, #8
 801ab7e:	b2d9      	uxtb	r1, r3
 801ab80:	7bfb      	ldrb	r3, [r7, #15]
 801ab82:	b29b      	uxth	r3, r3
 801ab84:	6a3a      	ldr	r2, [r7, #32]
 801ab86:	9204      	str	r2, [sp, #16]
 801ab88:	8bba      	ldrh	r2, [r7, #28]
 801ab8a:	9203      	str	r2, [sp, #12]
 801ab8c:	69ba      	ldr	r2, [r7, #24]
 801ab8e:	9202      	str	r2, [sp, #8]
 801ab90:	9301      	str	r3, [sp, #4]
 801ab92:	f107 0308 	add.w	r3, r7, #8
 801ab96:	9300      	str	r3, [sp, #0]
 801ab98:	683b      	ldr	r3, [r7, #0]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	2023      	movs	r0, #35	; 0x23
 801ab9e:	f7fc fd4d 	bl	801763c <rfalNfcvPollerTransceiveReq>
 801aba2:	4603      	mov	r3, r0
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3710      	adds	r7, #16
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b082      	sub	sp, #8
 801abb0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 801abb2:	2200      	movs	r2, #0
 801abb4:	2100      	movs	r1, #0
 801abb6:	2002      	movs	r0, #2
 801abb8:	f7fc fede 	bl	8017978 <rfalSetMode>
 801abbc:	4603      	mov	r3, r0
 801abbe:	80fb      	strh	r3, [r7, #6]
 801abc0:	88fb      	ldrh	r3, [r7, #6]
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d001      	beq.n	801abca <rfalT1TPollerInitialize+0x1e>
 801abc6:	88fb      	ldrh	r3, [r7, #6]
 801abc8:	e00e      	b.n	801abe8 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801abca:	2001      	movs	r0, #1
 801abcc:	f7fd fa70 	bl	80180b0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 801abd0:	2000      	movs	r0, #0
 801abd2:	f7fd faa5 	bl	8018120 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 801abd6:	f240 4094 	movw	r0, #1172	; 0x494
 801abda:	f7fd fa8d 	bl	80180f8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 801abde:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801abe2:	f7fd fa75 	bl	80180d0 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801abe6:	2300      	movs	r3, #0
}
 801abe8:	4618      	mov	r0, r3
 801abea:	3708      	adds	r7, #8
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b08a      	sub	sp, #40	; 0x28
 801abf4:	af04      	add	r7, sp, #16
 801abf6:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d101      	bne.n	801ac02 <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 801abfe:	2307      	movs	r3, #7
 801ac00:	e02a      	b.n	801ac58 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 801ac02:	f107 030c 	add.w	r3, r7, #12
 801ac06:	2207      	movs	r2, #7
 801ac08:	2100      	movs	r1, #0
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f000 fc16 	bl	801b43c <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 801ac10:	2378      	movs	r3, #120	; 0x78
 801ac12:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 801ac14:	f107 000c 	add.w	r0, r7, #12
 801ac18:	f640 13a8 	movw	r3, #2472	; 0x9a8
 801ac1c:	9302      	str	r3, [sp, #8]
 801ac1e:	2300      	movs	r3, #0
 801ac20:	9301      	str	r3, [sp, #4]
 801ac22:	f107 030a 	add.w	r3, r7, #10
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	2306      	movs	r3, #6
 801ac2a:	687a      	ldr	r2, [r7, #4]
 801ac2c:	2107      	movs	r1, #7
 801ac2e:	f7fd fcd3 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801ac32:	4603      	mov	r3, r0
 801ac34:	82fb      	strh	r3, [r7, #22]
 801ac36:	8afb      	ldrh	r3, [r7, #22]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d001      	beq.n	801ac40 <rfalT1TPollerRid+0x50>
 801ac3c:	8afb      	ldrh	r3, [r7, #22]
 801ac3e:	e00b      	b.n	801ac58 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 801ac40:	897b      	ldrh	r3, [r7, #10]
 801ac42:	2b06      	cmp	r3, #6
 801ac44:	d105      	bne.n	801ac52 <rfalT1TPollerRid+0x62>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	781b      	ldrb	r3, [r3, #0]
 801ac4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ac4e:	2b10      	cmp	r3, #16
 801ac50:	d001      	beq.n	801ac56 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801ac52:	230b      	movs	r3, #11
 801ac54:	e000      	b.n	801ac58 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 801ac56:	2300      	movs	r3, #0
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3718      	adds	r7, #24
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}

0801ac60 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b08a      	sub	sp, #40	; 0x28
 801ac64:	af04      	add	r7, sp, #16
 801ac66:	60b9      	str	r1, [r7, #8]
 801ac68:	607b      	str	r3, [r7, #4]
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	73fb      	strb	r3, [r7, #15]
 801ac6e:	4613      	mov	r3, r2
 801ac70:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d002      	beq.n	801ac7e <rfalT2TPollerRead+0x1e>
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d101      	bne.n	801ac82 <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 801ac7e:	2307      	movs	r3, #7
 801ac80:	e023      	b.n	801acca <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 801ac82:	2330      	movs	r3, #48	; 0x30
 801ac84:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 801ac86:	7bfb      	ldrb	r3, [r7, #15]
 801ac88:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801ac8a:	89ba      	ldrh	r2, [r7, #12]
 801ac8c:	f107 0014 	add.w	r0, r7, #20
 801ac90:	4b10      	ldr	r3, [pc, #64]	; (801acd4 <rfalT2TPollerRead+0x74>)
 801ac92:	9302      	str	r3, [sp, #8]
 801ac94:	2300      	movs	r3, #0
 801ac96:	9301      	str	r3, [sp, #4]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	9300      	str	r3, [sp, #0]
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	68ba      	ldr	r2, [r7, #8]
 801aca0:	2102      	movs	r1, #2
 801aca2:	f7fd fc99 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801aca6:	4603      	mov	r3, r0
 801aca8:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801acaa:	8afb      	ldrh	r3, [r7, #22]
 801acac:	2b28      	cmp	r3, #40	; 0x28
 801acae:	d10b      	bne.n	801acc8 <rfalT2TPollerRead+0x68>
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	881b      	ldrh	r3, [r3, #0]
 801acb4:	2b01      	cmp	r3, #1
 801acb6:	d107      	bne.n	801acc8 <rfalT2TPollerRead+0x68>
 801acb8:	68bb      	ldr	r3, [r7, #8]
 801acba:	781b      	ldrb	r3, [r3, #0]
 801acbc:	f003 030f 	and.w	r3, r3, #15
 801acc0:	2b0a      	cmp	r3, #10
 801acc2:	d001      	beq.n	801acc8 <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 801acc4:	230b      	movs	r3, #11
 801acc6:	e000      	b.n	801acca <rfalT2TPollerRead+0x6a>
    }
    return ret;
 801acc8:	8afb      	ldrh	r3, [r7, #22]
 }
 801acca:	4618      	mov	r0, r3
 801accc:	3718      	adds	r7, #24
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop
 801acd4:	000108d8 	.word	0x000108d8

0801acd8 <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 801acd8:	b580      	push	{r7, lr}
 801acda:	b08a      	sub	sp, #40	; 0x28
 801acdc:	af04      	add	r7, sp, #16
 801acde:	4603      	mov	r3, r0
 801ace0:	6039      	str	r1, [r7, #0]
 801ace2:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 801ace4:	23a2      	movs	r3, #162	; 0xa2
 801ace6:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 801ace8:	79fb      	ldrb	r3, [r7, #7]
 801acea:	747b      	strb	r3, [r7, #17]
 801acec:	683b      	ldr	r3, [r7, #0]
 801acee:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 801acf0:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801acf4:	f107 020f 	add.w	r2, r7, #15
 801acf8:	f107 0010 	add.w	r0, r7, #16
 801acfc:	4b11      	ldr	r3, [pc, #68]	; (801ad44 <rfalT2TPollerWrite+0x6c>)
 801acfe:	9302      	str	r3, [sp, #8]
 801ad00:	2300      	movs	r3, #0
 801ad02:	9301      	str	r3, [sp, #4]
 801ad04:	f107 030c 	add.w	r3, r7, #12
 801ad08:	9300      	str	r3, [sp, #0]
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	2106      	movs	r1, #6
 801ad0e:	f7fd fc63 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801ad12:	4603      	mov	r3, r0
 801ad14:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 801ad16:	8afb      	ldrh	r3, [r7, #22]
 801ad18:	2b28      	cmp	r3, #40	; 0x28
 801ad1a:	d002      	beq.n	801ad22 <rfalT2TPollerWrite+0x4a>
 801ad1c:	8afb      	ldrh	r3, [r7, #22]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d10b      	bne.n	801ad3a <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 801ad22:	230b      	movs	r3, #11
 801ad24:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 801ad26:	89bb      	ldrh	r3, [r7, #12]
 801ad28:	2b01      	cmp	r3, #1
 801ad2a:	d106      	bne.n	801ad3a <rfalT2TPollerWrite+0x62>
 801ad2c:	7bfb      	ldrb	r3, [r7, #15]
 801ad2e:	f003 030f 	and.w	r3, r3, #15
 801ad32:	2b0a      	cmp	r3, #10
 801ad34:	d101      	bne.n	801ad3a <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 801ad36:	2300      	movs	r3, #0
 801ad38:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 801ad3a:	8afb      	ldrh	r3, [r7, #22]
 }
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3718      	adds	r7, #24
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	000108d8 	.word	0x000108d8

0801ad48 <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b08a      	sub	sp, #40	; 0x28
 801ad4c:	af04      	add	r7, sp, #16
 801ad4e:	4603      	mov	r3, r0
 801ad50:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 801ad52:	23c2      	movs	r3, #194	; 0xc2
 801ad54:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 801ad56:	23ff      	movs	r3, #255	; 0xff
 801ad58:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801ad5a:	f107 020f 	add.w	r2, r7, #15
 801ad5e:	f107 0014 	add.w	r0, r7, #20
 801ad62:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801ad66:	9302      	str	r3, [sp, #8]
 801ad68:	2300      	movs	r3, #0
 801ad6a:	9301      	str	r3, [sp, #4]
 801ad6c:	f107 030c 	add.w	r3, r7, #12
 801ad70:	9300      	str	r3, [sp, #0]
 801ad72:	2301      	movs	r3, #1
 801ad74:	2102      	movs	r1, #2
 801ad76:	f7fd fc2f 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 801ad7e:	8afb      	ldrh	r3, [r7, #22]
 801ad80:	2b28      	cmp	r3, #40	; 0x28
 801ad82:	d004      	beq.n	801ad8e <rfalT2TPollerSectorSelect+0x46>
 801ad84:	8afb      	ldrh	r3, [r7, #22]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d001      	beq.n	801ad8e <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 801ad8a:	8afb      	ldrh	r3, [r7, #22]
 801ad8c:	e036      	b.n	801adfc <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801ad8e:	8afb      	ldrh	r3, [r7, #22]
 801ad90:	2b28      	cmp	r3, #40	; 0x28
 801ad92:	d107      	bne.n	801ada4 <rfalT2TPollerSectorSelect+0x5c>
 801ad94:	89bb      	ldrh	r3, [r7, #12]
 801ad96:	2b01      	cmp	r3, #1
 801ad98:	d104      	bne.n	801ada4 <rfalT2TPollerSectorSelect+0x5c>
 801ad9a:	7bfb      	ldrb	r3, [r7, #15]
 801ad9c:	f003 030f 	and.w	r3, r3, #15
 801ada0:	2b0a      	cmp	r3, #10
 801ada2:	d001      	beq.n	801ada8 <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 801ada4:	230b      	movs	r3, #11
 801ada6:	e029      	b.n	801adfc <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 801ada8:	79fb      	ldrb	r3, [r7, #7]
 801adaa:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 801adac:	f107 0310 	add.w	r3, r7, #16
 801adb0:	3301      	adds	r3, #1
 801adb2:	2203      	movs	r2, #3
 801adb4:	2100      	movs	r1, #0
 801adb6:	4618      	mov	r0, r3
 801adb8:	f000 fb40 	bl	801b43c <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801adbc:	f107 020f 	add.w	r2, r7, #15
 801adc0:	f107 0010 	add.w	r0, r7, #16
 801adc4:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801adc8:	9302      	str	r3, [sp, #8]
 801adca:	2300      	movs	r3, #0
 801adcc:	9301      	str	r3, [sp, #4]
 801adce:	f107 030c 	add.w	r3, r7, #12
 801add2:	9300      	str	r3, [sp, #0]
 801add4:	2301      	movs	r3, #1
 801add6:	2104      	movs	r1, #4
 801add8:	f7fd fbfe 	bl	80185d8 <rfalTransceiveBlockingTxRx>
 801addc:	4603      	mov	r3, r0
 801adde:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 801ade0:	8afb      	ldrh	r3, [r7, #22]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d002      	beq.n	801adec <rfalT2TPollerSectorSelect+0xa4>
 801ade6:	8afb      	ldrh	r3, [r7, #22]
 801ade8:	2b28      	cmp	r3, #40	; 0x28
 801adea:	d101      	bne.n	801adf0 <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 801adec:	230b      	movs	r3, #11
 801adee:	e005      	b.n	801adfc <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 801adf0:	8afb      	ldrh	r3, [r7, #22]
 801adf2:	2b04      	cmp	r3, #4
 801adf4:	d101      	bne.n	801adfa <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 801adf6:	2300      	movs	r3, #0
 801adf8:	e000      	b.n	801adfc <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 801adfa:	8afb      	ldrh	r3, [r7, #22]
 }
 801adfc:	4618      	mov	r0, r3
 801adfe:	3718      	adds	r7, #24
 801ae00:	46bd      	mov	sp, r7
 801ae02:	bd80      	pop	{r7, pc}

0801ae04 <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( rfalT4tCApduParam *apduParam )
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b084      	sub	sp, #16
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d007      	beq.n	801ae22 <rfalT4TPollerComposeCAPDU+0x1e>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	689b      	ldr	r3, [r3, #8]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d003      	beq.n	801ae22 <rfalT4TPollerComposeCAPDU+0x1e>
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	68db      	ldr	r3, [r3, #12]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d101      	bne.n	801ae26 <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 801ae22:	2307      	movs	r3, #7
 801ae24:	e085      	b.n	801af32 <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 801ae26:	2300      	movs	r3, #0
 801ae28:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	68db      	ldr	r3, [r3, #12]
 801ae2e:	2200      	movs	r2, #0
 801ae30:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	795b      	ldrb	r3, [r3, #5]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d026      	beq.n	801ae88 <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	791b      	ldrb	r3, [r3, #4]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d101      	bne.n	801ae46 <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 801ae42:	2307      	movs	r3, #7
 801ae44:	e075      	b.n	801af32 <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 801ae46:	2305      	movs	r3, #5
 801ae48:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 801ae4a:	7b7b      	ldrb	r3, [r7, #13]
 801ae4c:	687a      	ldr	r2, [r7, #4]
 801ae4e:	7912      	ldrb	r2, [r2, #4]
 801ae50:	4413      	add	r3, r2
 801ae52:	461a      	mov	r2, r3
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	79db      	ldrb	r3, [r3, #7]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d001      	beq.n	801ae60 <rfalT4TPollerComposeCAPDU+0x5c>
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	e000      	b.n	801ae62 <rfalT4TPollerComposeCAPDU+0x5e>
 801ae60:	2300      	movs	r3, #0
 801ae62:	4413      	add	r3, r2
 801ae64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae68:	d901      	bls.n	801ae6e <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 801ae6a:	2301      	movs	r3, #1
 801ae6c:	e061      	b.n	801af32 <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	689a      	ldr	r2, [r3, #8]
 801ae72:	7b7b      	ldrb	r3, [r7, #13]
 801ae74:	4413      	add	r3, r2
 801ae76:	1cd8      	adds	r0, r3, #3
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	689b      	ldr	r3, [r3, #8]
 801ae7c:	1cd9      	adds	r1, r3, #3
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	791b      	ldrb	r3, [r3, #4]
 801ae82:	461a      	mov	r2, r3
 801ae84:	f000 fac0 	bl	801b408 <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	689a      	ldr	r2, [r3, #8]
 801ae8c:	89fb      	ldrh	r3, [r7, #14]
 801ae8e:	1c59      	adds	r1, r3, #1
 801ae90:	81f9      	strh	r1, [r7, #14]
 801ae92:	4618      	mov	r0, r3
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	7819      	ldrb	r1, [r3, #0]
 801ae98:	1813      	adds	r3, r2, r0
 801ae9a:	460a      	mov	r2, r1
 801ae9c:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	689a      	ldr	r2, [r3, #8]
 801aea2:	89fb      	ldrh	r3, [r7, #14]
 801aea4:	1c59      	adds	r1, r3, #1
 801aea6:	81f9      	strh	r1, [r7, #14]
 801aea8:	4618      	mov	r0, r3
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	7859      	ldrb	r1, [r3, #1]
 801aeae:	1813      	adds	r3, r2, r0
 801aeb0:	460a      	mov	r2, r1
 801aeb2:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	689a      	ldr	r2, [r3, #8]
 801aeb8:	89fb      	ldrh	r3, [r7, #14]
 801aeba:	1c59      	adds	r1, r3, #1
 801aebc:	81f9      	strh	r1, [r7, #14]
 801aebe:	4618      	mov	r0, r3
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	7899      	ldrb	r1, [r3, #2]
 801aec4:	1813      	adds	r3, r2, r0
 801aec6:	460a      	mov	r2, r1
 801aec8:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	689a      	ldr	r2, [r3, #8]
 801aece:	89fb      	ldrh	r3, [r7, #14]
 801aed0:	1c59      	adds	r1, r3, #1
 801aed2:	81f9      	strh	r1, [r7, #14]
 801aed4:	4618      	mov	r0, r3
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	78d9      	ldrb	r1, [r3, #3]
 801aeda:	1813      	adds	r3, r2, r0
 801aedc:	460a      	mov	r2, r1
 801aede:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	795b      	ldrb	r3, [r3, #5]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d010      	beq.n	801af0a <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	689a      	ldr	r2, [r3, #8]
 801aeec:	89fb      	ldrh	r3, [r7, #14]
 801aeee:	1c59      	adds	r1, r3, #1
 801aef0:	81f9      	strh	r1, [r7, #14]
 801aef2:	4618      	mov	r0, r3
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	7919      	ldrb	r1, [r3, #4]
 801aef8:	1813      	adds	r3, r2, r0
 801aefa:	460a      	mov	r2, r1
 801aefc:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	791b      	ldrb	r3, [r3, #4]
 801af02:	b29a      	uxth	r2, r3
 801af04:	89fb      	ldrh	r3, [r7, #14]
 801af06:	4413      	add	r3, r2
 801af08:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	79db      	ldrb	r3, [r3, #7]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d00a      	beq.n	801af28 <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	689a      	ldr	r2, [r3, #8]
 801af16:	89fb      	ldrh	r3, [r7, #14]
 801af18:	1c59      	adds	r1, r3, #1
 801af1a:	81f9      	strh	r1, [r7, #14]
 801af1c:	4618      	mov	r0, r3
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	7999      	ldrb	r1, [r3, #6]
 801af22:	1813      	adds	r3, r2, r0
 801af24:	460a      	mov	r2, r1
 801af26:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	68db      	ldr	r3, [r3, #12]
 801af2c:	89fa      	ldrh	r2, [r7, #14]
 801af2e:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 801af30:	2300      	movs	r3, #0
}
 801af32:	4618      	mov	r0, r3
 801af34:	3710      	adds	r7, #16
 801af36:	46bd      	mov	sp, r7
 801af38:	bd80      	pop	{r7, pc}

0801af3a <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 801af3a:	b480      	push	{r7}
 801af3c:	b083      	sub	sp, #12
 801af3e:	af00      	add	r7, sp, #0
 801af40:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d003      	beq.n	801af50 <rfalT4TPollerParseRAPDU+0x16>
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d101      	bne.n	801af54 <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 801af50:	2307      	movs	r3, #7
 801af52:	e029      	b.n	801afa8 <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	889b      	ldrh	r3, [r3, #4]
 801af58:	2b01      	cmp	r3, #1
 801af5a:	d801      	bhi.n	801af60 <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 801af5c:	230b      	movs	r3, #11
 801af5e:	e023      	b.n	801afa8 <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	889b      	ldrh	r3, [r3, #4]
 801af64:	3b02      	subs	r3, #2
 801af66:	b29a      	uxth	r2, r3
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	687a      	ldr	r2, [r7, #4]
 801af72:	88d2      	ldrh	r2, [r2, #6]
 801af74:	4413      	add	r3, r2
 801af76:	78db      	ldrb	r3, [r3, #3]
 801af78:	021b      	lsls	r3, r3, #8
 801af7a:	b21a      	sxth	r2, r3
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	6879      	ldr	r1, [r7, #4]
 801af82:	88c9      	ldrh	r1, [r1, #6]
 801af84:	440b      	add	r3, r1
 801af86:	3303      	adds	r3, #3
 801af88:	3301      	adds	r3, #1
 801af8a:	781b      	ldrb	r3, [r3, #0]
 801af8c:	b21b      	sxth	r3, r3
 801af8e:	4313      	orrs	r3, r2
 801af90:	b21b      	sxth	r3, r3
 801af92:	b29a      	uxth	r2, r3
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	891b      	ldrh	r3, [r3, #8]
 801af9c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 801afa0:	d101      	bne.n	801afa6 <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 801afa2:	2300      	movs	r3, #0
 801afa4:	e000      	b.n	801afa8 <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 801afa6:	2305      	movs	r3, #5
}
 801afa8:	4618      	mov	r0, r3
 801afaa:	370c      	adds	r7, #12
 801afac:	46bd      	mov	sp, r7
 801afae:	bc80      	pop	{r7}
 801afb0:	4770      	bx	lr

0801afb2 <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 801afb2:	b580      	push	{r7, lr}
 801afb4:	b088      	sub	sp, #32
 801afb6:	af00      	add	r7, sp, #0
 801afb8:	60f8      	str	r0, [r7, #12]
 801afba:	60b9      	str	r1, [r7, #8]
 801afbc:	603b      	str	r3, [r7, #0]
 801afbe:	4613      	mov	r3, r2
 801afc0:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801afc2:	2300      	movs	r3, #0
 801afc4:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801afc6:	23a4      	movs	r3, #164	; 0xa4
 801afc8:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 801afca:	2304      	movs	r3, #4
 801afcc:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801afce:	2300      	movs	r3, #0
 801afd0:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 801afd2:	79fb      	ldrb	r3, [r7, #7]
 801afd4:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801afd6:	2300      	movs	r3, #0
 801afd8:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801afda:	2301      	movs	r3, #1
 801afdc:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801afde:	2301      	movs	r3, #1
 801afe0:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801afe6:	683b      	ldr	r3, [r7, #0]
 801afe8:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 801afea:	79fb      	ldrb	r3, [r7, #7]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d006      	beq.n	801affe <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 801aff0:	69bb      	ldr	r3, [r7, #24]
 801aff2:	3303      	adds	r3, #3
 801aff4:	79fa      	ldrb	r2, [r7, #7]
 801aff6:	68b9      	ldr	r1, [r7, #8]
 801aff8:	4618      	mov	r0, r3
 801affa:	f000 f9f7 	bl	801b3ec <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801affe:	f107 0310 	add.w	r3, r7, #16
 801b002:	4618      	mov	r0, r3
 801b004:	f7ff fefe 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b008:	4603      	mov	r3, r0
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3720      	adds	r7, #32
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}

0801b012 <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801b012:	b580      	push	{r7, lr}
 801b014:	b088      	sub	sp, #32
 801b016:	af00      	add	r7, sp, #0
 801b018:	60f8      	str	r0, [r7, #12]
 801b01a:	60b9      	str	r1, [r7, #8]
 801b01c:	603b      	str	r3, [r7, #0]
 801b01e:	4613      	mov	r3, r2
 801b020:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b022:	2300      	movs	r3, #0
 801b024:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801b026:	23a4      	movs	r3, #164	; 0xa4
 801b028:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801b02a:	2300      	movs	r3, #0
 801b02c:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 801b02e:	230c      	movs	r3, #12
 801b030:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801b032:	79fb      	ldrb	r3, [r7, #7]
 801b034:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801b036:	2300      	movs	r3, #0
 801b038:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801b03a:	2301      	movs	r3, #1
 801b03c:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b03e:	2300      	movs	r3, #0
 801b040:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801b04a:	79fb      	ldrb	r3, [r7, #7]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d006      	beq.n	801b05e <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801b050:	69bb      	ldr	r3, [r7, #24]
 801b052:	3303      	adds	r3, #3
 801b054:	79fa      	ldrb	r2, [r7, #7]
 801b056:	68b9      	ldr	r1, [r7, #8]
 801b058:	4618      	mov	r0, r3
 801b05a:	f000 f9c7 	bl	801b3ec <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b05e:	f107 0310 	add.w	r3, r7, #16
 801b062:	4618      	mov	r0, r3
 801b064:	f7ff fece 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b068:	4603      	mov	r3, r0
}
 801b06a:	4618      	mov	r0, r3
 801b06c:	3720      	adds	r7, #32
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}

0801b072 <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801b072:	b580      	push	{r7, lr}
 801b074:	b088      	sub	sp, #32
 801b076:	af00      	add	r7, sp, #0
 801b078:	60f8      	str	r0, [r7, #12]
 801b07a:	60b9      	str	r1, [r7, #8]
 801b07c:	603b      	str	r3, [r7, #0]
 801b07e:	4613      	mov	r3, r2
 801b080:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b082:	2300      	movs	r3, #0
 801b084:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801b086:	23a4      	movs	r3, #164	; 0xa4
 801b088:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801b08a:	2300      	movs	r3, #0
 801b08c:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801b08e:	2300      	movs	r3, #0
 801b090:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801b092:	79fb      	ldrb	r3, [r7, #7]
 801b094:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801b096:	2300      	movs	r3, #0
 801b098:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801b09a:	2301      	movs	r3, #1
 801b09c:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801b0aa:	79fb      	ldrb	r3, [r7, #7]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d006      	beq.n	801b0be <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801b0b0:	69bb      	ldr	r3, [r7, #24]
 801b0b2:	3303      	adds	r3, #3
 801b0b4:	79fa      	ldrb	r2, [r7, #7]
 801b0b6:	68b9      	ldr	r1, [r7, #8]
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	f000 f997 	bl	801b3ec <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b0be:	f107 0310 	add.w	r3, r7, #16
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f7ff fe9e 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b0c8:	4603      	mov	r3, r0
}
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	3720      	adds	r7, #32
 801b0ce:	46bd      	mov	sp, r7
 801b0d0:	bd80      	pop	{r7, pc}

0801b0d2 <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801b0d2:	b580      	push	{r7, lr}
 801b0d4:	b088      	sub	sp, #32
 801b0d6:	af00      	add	r7, sp, #0
 801b0d8:	60f8      	str	r0, [r7, #12]
 801b0da:	607b      	str	r3, [r7, #4]
 801b0dc:	460b      	mov	r3, r1
 801b0de:	817b      	strh	r3, [r7, #10]
 801b0e0:	4613      	mov	r3, r2
 801b0e2:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 801b0e8:	23b0      	movs	r3, #176	; 0xb0
 801b0ea:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801b0ec:	897b      	ldrh	r3, [r7, #10]
 801b0ee:	0a1b      	lsrs	r3, r3, #8
 801b0f0:	b29b      	uxth	r3, r3
 801b0f2:	b2db      	uxtb	r3, r3
 801b0f4:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801b0f6:	897b      	ldrh	r3, [r7, #10]
 801b0f8:	b2db      	uxtb	r3, r3
 801b0fa:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 801b0fc:	7a7b      	ldrb	r3, [r7, #9]
 801b0fe:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 801b100:	2300      	movs	r3, #0
 801b102:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801b104:	2301      	movs	r3, #1
 801b106:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b110:	f107 0310 	add.w	r3, r7, #16
 801b114:	4618      	mov	r0, r3
 801b116:	f7ff fe75 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b11a:	4603      	mov	r3, r0
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	3720      	adds	r7, #32
 801b120:	46bd      	mov	sp, r7
 801b122:	bd80      	pop	{r7, pc}

0801b124 <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801b124:	b580      	push	{r7, lr}
 801b126:	b08a      	sub	sp, #40	; 0x28
 801b128:	af00      	add	r7, sp, #0
 801b12a:	60f8      	str	r0, [r7, #12]
 801b12c:	60b9      	str	r1, [r7, #8]
 801b12e:	603b      	str	r3, [r7, #0]
 801b130:	4613      	mov	r3, r2
 801b132:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b134:	2300      	movs	r3, #0
 801b136:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 801b138:	23b1      	movs	r3, #177	; 0xb1
 801b13a:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801b13c:	2300      	movs	r3, #0
 801b13e:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801b140:	2300      	movs	r3, #0
 801b142:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 801b144:	79fb      	ldrb	r3, [r7, #7]
 801b146:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 801b148:	2301      	movs	r3, #1
 801b14a:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 801b14c:	2301      	movs	r3, #1
 801b14e:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 801b158:	2300      	movs	r3, #0
 801b15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801b15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b162:	1c5a      	adds	r2, r3, #1
 801b164:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b168:	461a      	mov	r2, r3
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	4413      	add	r3, r2
 801b16e:	2254      	movs	r2, #84	; 0x54
 801b170:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801b172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b176:	1c5a      	adds	r2, r3, #1
 801b178:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b17c:	461a      	mov	r2, r3
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	4413      	add	r3, r2
 801b182:	2203      	movs	r2, #3
 801b184:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801b186:	68bb      	ldr	r3, [r7, #8]
 801b188:	0c1a      	lsrs	r2, r3, #16
 801b18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b18e:	1c59      	adds	r1, r3, #1
 801b190:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b194:	4619      	mov	r1, r3
 801b196:	b2d2      	uxtb	r2, r2
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	440b      	add	r3, r1
 801b19c:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	0a1a      	lsrs	r2, r3, #8
 801b1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1a6:	1c59      	adds	r1, r3, #1
 801b1a8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	b2d2      	uxtb	r2, r2
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	440b      	add	r3, r1
 801b1b4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801b1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1ba:	1c5a      	adds	r2, r3, #1
 801b1bc:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	68bb      	ldr	r3, [r7, #8]
 801b1c4:	b2da      	uxtb	r2, r3
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	440b      	add	r3, r1
 801b1ca:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 801b1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1d0:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b1d2:	f107 0314 	add.w	r3, r7, #20
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7ff fe14 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b1dc:	4603      	mov	r3, r0
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3728      	adds	r7, #40	; 0x28
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}

0801b1e6 <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801b1e6:	b580      	push	{r7, lr}
 801b1e8:	b088      	sub	sp, #32
 801b1ea:	af00      	add	r7, sp, #0
 801b1ec:	60f8      	str	r0, [r7, #12]
 801b1ee:	607a      	str	r2, [r7, #4]
 801b1f0:	461a      	mov	r2, r3
 801b1f2:	460b      	mov	r3, r1
 801b1f4:	817b      	strh	r3, [r7, #10]
 801b1f6:	4613      	mov	r3, r2
 801b1f8:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 801b1fe:	23d6      	movs	r3, #214	; 0xd6
 801b200:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801b202:	897b      	ldrh	r3, [r7, #10]
 801b204:	0a1b      	lsrs	r3, r3, #8
 801b206:	b29b      	uxth	r3, r3
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801b20c:	897b      	ldrh	r3, [r7, #10]
 801b20e:	b2db      	uxtb	r3, r3
 801b210:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 801b212:	7a7b      	ldrb	r3, [r7, #9]
 801b214:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 801b216:	2301      	movs	r3, #1
 801b218:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801b21a:	2300      	movs	r3, #0
 801b21c:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b224:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 801b226:	7a7b      	ldrb	r3, [r7, #9]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d006      	beq.n	801b23a <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 801b22c:	69bb      	ldr	r3, [r7, #24]
 801b22e:	3303      	adds	r3, #3
 801b230:	7a7a      	ldrb	r2, [r7, #9]
 801b232:	6879      	ldr	r1, [r7, #4]
 801b234:	4618      	mov	r0, r3
 801b236:	f000 f8d9 	bl	801b3ec <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b23a:	f107 0310 	add.w	r3, r7, #16
 801b23e:	4618      	mov	r0, r3
 801b240:	f7ff fde0 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b244:	4603      	mov	r3, r0
}
 801b246:	4618      	mov	r0, r3
 801b248:	3720      	adds	r7, #32
 801b24a:	46bd      	mov	sp, r7
 801b24c:	bd80      	pop	{r7, pc}

0801b24e <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801b24e:	b580      	push	{r7, lr}
 801b250:	b08a      	sub	sp, #40	; 0x28
 801b252:	af00      	add	r7, sp, #0
 801b254:	60f8      	str	r0, [r7, #12]
 801b256:	60b9      	str	r1, [r7, #8]
 801b258:	607a      	str	r2, [r7, #4]
 801b25a:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801b25c:	2300      	movs	r3, #0
 801b25e:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 801b260:	23d7      	movs	r3, #215	; 0xd7
 801b262:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801b264:	2300      	movs	r3, #0
 801b266:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801b268:	2300      	movs	r3, #0
 801b26a:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 801b26c:	2301      	movs	r3, #1
 801b26e:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 801b270:	2300      	movs	r3, #0
 801b272:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b27a:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 801b27c:	2300      	movs	r3, #0
 801b27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801b282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b286:	1c5a      	adds	r2, r3, #1
 801b288:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b28c:	461a      	mov	r2, r3
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	4413      	add	r3, r2
 801b292:	2254      	movs	r2, #84	; 0x54
 801b294:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801b296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b29a:	1c5a      	adds	r2, r3, #1
 801b29c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b2a0:	461a      	mov	r2, r3
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	2203      	movs	r2, #3
 801b2a8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	0c1a      	lsrs	r2, r3, #16
 801b2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2b2:	1c59      	adds	r1, r3, #1
 801b2b4:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b2b8:	4619      	mov	r1, r3
 801b2ba:	b2d2      	uxtb	r2, r2
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	440b      	add	r3, r1
 801b2c0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	0a1a      	lsrs	r2, r3, #8
 801b2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801b2d0:	4619      	mov	r1, r3
 801b2d2:	b2d2      	uxtb	r2, r2
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	440b      	add	r3, r1
 801b2d8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801b2da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2de:	1c5a      	adds	r2, r3, #1
 801b2e0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b2e4:	4619      	mov	r1, r3
 801b2e6:	68bb      	ldr	r3, [r7, #8]
 801b2e8:	b2da      	uxtb	r2, r3
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	440b      	add	r3, r1
 801b2ee:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 801b2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2f4:	1c5a      	adds	r2, r3, #1
 801b2f6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b2fa:	461a      	mov	r2, r3
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	4413      	add	r3, r2
 801b300:	2253      	movs	r2, #83	; 0x53
 801b302:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 801b304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b308:	1c5a      	adds	r2, r3, #1
 801b30a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801b30e:	461a      	mov	r2, r3
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	4413      	add	r3, r2
 801b314:	78fa      	ldrb	r2, [r7, #3]
 801b316:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 801b318:	78fa      	ldrb	r2, [r7, #3]
 801b31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b31e:	4413      	add	r3, r2
 801b320:	2bfe      	cmp	r3, #254	; 0xfe
 801b322:	d806      	bhi.n	801b332 <rfalT4TPollerComposeWriteDataODO+0xe4>
 801b324:	78fa      	ldrb	r2, [r7, #3]
 801b326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b32a:	4413      	add	r3, r2
 801b32c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b330:	d301      	bcc.n	801b336 <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 801b332:	2301      	movs	r3, #1
 801b334:	e01b      	b.n	801b36e <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 801b336:	78fb      	ldrb	r3, [r7, #3]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d009      	beq.n	801b350 <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 801b33c:	69fa      	ldr	r2, [r7, #28]
 801b33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b342:	4413      	add	r3, r2
 801b344:	3303      	adds	r3, #3
 801b346:	78fa      	ldrb	r2, [r7, #3]
 801b348:	6879      	ldr	r1, [r7, #4]
 801b34a:	4618      	mov	r0, r3
 801b34c:	f000 f84e 	bl	801b3ec <memcpy>
    }
    dataIt += dataLen;
 801b350:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b354:	78fb      	ldrb	r3, [r7, #3]
 801b356:	4413      	add	r3, r2
 801b358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 801b35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b360:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801b362:	f107 0314 	add.w	r3, r7, #20
 801b366:	4618      	mov	r0, r3
 801b368:	f7ff fd4c 	bl	801ae04 <rfalT4TPollerComposeCAPDU>
 801b36c:	4603      	mov	r3, r0
}
 801b36e:	4618      	mov	r0, r3
 801b370:	3728      	adds	r7, #40	; 0x28
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}
	...

0801b378 <__errno>:
 801b378:	4b01      	ldr	r3, [pc, #4]	; (801b380 <__errno+0x8>)
 801b37a:	6818      	ldr	r0, [r3, #0]
 801b37c:	4770      	bx	lr
 801b37e:	bf00      	nop
 801b380:	20000120 	.word	0x20000120

0801b384 <__libc_init_array>:
 801b384:	b570      	push	{r4, r5, r6, lr}
 801b386:	2600      	movs	r6, #0
 801b388:	4d0c      	ldr	r5, [pc, #48]	; (801b3bc <__libc_init_array+0x38>)
 801b38a:	4c0d      	ldr	r4, [pc, #52]	; (801b3c0 <__libc_init_array+0x3c>)
 801b38c:	1b64      	subs	r4, r4, r5
 801b38e:	10a4      	asrs	r4, r4, #2
 801b390:	42a6      	cmp	r6, r4
 801b392:	d109      	bne.n	801b3a8 <__libc_init_array+0x24>
 801b394:	f000 fcc6 	bl	801bd24 <_init>
 801b398:	2600      	movs	r6, #0
 801b39a:	4d0a      	ldr	r5, [pc, #40]	; (801b3c4 <__libc_init_array+0x40>)
 801b39c:	4c0a      	ldr	r4, [pc, #40]	; (801b3c8 <__libc_init_array+0x44>)
 801b39e:	1b64      	subs	r4, r4, r5
 801b3a0:	10a4      	asrs	r4, r4, #2
 801b3a2:	42a6      	cmp	r6, r4
 801b3a4:	d105      	bne.n	801b3b2 <__libc_init_array+0x2e>
 801b3a6:	bd70      	pop	{r4, r5, r6, pc}
 801b3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3ac:	4798      	blx	r3
 801b3ae:	3601      	adds	r6, #1
 801b3b0:	e7ee      	b.n	801b390 <__libc_init_array+0xc>
 801b3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3b6:	4798      	blx	r3
 801b3b8:	3601      	adds	r6, #1
 801b3ba:	e7f2      	b.n	801b3a2 <__libc_init_array+0x1e>
 801b3bc:	0801d758 	.word	0x0801d758
 801b3c0:	0801d758 	.word	0x0801d758
 801b3c4:	0801d758 	.word	0x0801d758
 801b3c8:	0801d75c 	.word	0x0801d75c

0801b3cc <memcmp>:
 801b3cc:	b510      	push	{r4, lr}
 801b3ce:	3901      	subs	r1, #1
 801b3d0:	4402      	add	r2, r0
 801b3d2:	4290      	cmp	r0, r2
 801b3d4:	d101      	bne.n	801b3da <memcmp+0xe>
 801b3d6:	2000      	movs	r0, #0
 801b3d8:	e005      	b.n	801b3e6 <memcmp+0x1a>
 801b3da:	7803      	ldrb	r3, [r0, #0]
 801b3dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b3e0:	42a3      	cmp	r3, r4
 801b3e2:	d001      	beq.n	801b3e8 <memcmp+0x1c>
 801b3e4:	1b18      	subs	r0, r3, r4
 801b3e6:	bd10      	pop	{r4, pc}
 801b3e8:	3001      	adds	r0, #1
 801b3ea:	e7f2      	b.n	801b3d2 <memcmp+0x6>

0801b3ec <memcpy>:
 801b3ec:	440a      	add	r2, r1
 801b3ee:	4291      	cmp	r1, r2
 801b3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b3f4:	d100      	bne.n	801b3f8 <memcpy+0xc>
 801b3f6:	4770      	bx	lr
 801b3f8:	b510      	push	{r4, lr}
 801b3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3fe:	4291      	cmp	r1, r2
 801b400:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b404:	d1f9      	bne.n	801b3fa <memcpy+0xe>
 801b406:	bd10      	pop	{r4, pc}

0801b408 <memmove>:
 801b408:	4288      	cmp	r0, r1
 801b40a:	b510      	push	{r4, lr}
 801b40c:	eb01 0402 	add.w	r4, r1, r2
 801b410:	d902      	bls.n	801b418 <memmove+0x10>
 801b412:	4284      	cmp	r4, r0
 801b414:	4623      	mov	r3, r4
 801b416:	d807      	bhi.n	801b428 <memmove+0x20>
 801b418:	1e43      	subs	r3, r0, #1
 801b41a:	42a1      	cmp	r1, r4
 801b41c:	d008      	beq.n	801b430 <memmove+0x28>
 801b41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b422:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b426:	e7f8      	b.n	801b41a <memmove+0x12>
 801b428:	4601      	mov	r1, r0
 801b42a:	4402      	add	r2, r0
 801b42c:	428a      	cmp	r2, r1
 801b42e:	d100      	bne.n	801b432 <memmove+0x2a>
 801b430:	bd10      	pop	{r4, pc}
 801b432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b43a:	e7f7      	b.n	801b42c <memmove+0x24>

0801b43c <memset>:
 801b43c:	4603      	mov	r3, r0
 801b43e:	4402      	add	r2, r0
 801b440:	4293      	cmp	r3, r2
 801b442:	d100      	bne.n	801b446 <memset+0xa>
 801b444:	4770      	bx	lr
 801b446:	f803 1b01 	strb.w	r1, [r3], #1
 801b44a:	e7f9      	b.n	801b440 <memset+0x4>

0801b44c <_vsniprintf_r>:
 801b44c:	b530      	push	{r4, r5, lr}
 801b44e:	4614      	mov	r4, r2
 801b450:	2c00      	cmp	r4, #0
 801b452:	4605      	mov	r5, r0
 801b454:	461a      	mov	r2, r3
 801b456:	b09b      	sub	sp, #108	; 0x6c
 801b458:	da05      	bge.n	801b466 <_vsniprintf_r+0x1a>
 801b45a:	238b      	movs	r3, #139	; 0x8b
 801b45c:	6003      	str	r3, [r0, #0]
 801b45e:	f04f 30ff 	mov.w	r0, #4294967295
 801b462:	b01b      	add	sp, #108	; 0x6c
 801b464:	bd30      	pop	{r4, r5, pc}
 801b466:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b46a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b46e:	bf0c      	ite	eq
 801b470:	4623      	moveq	r3, r4
 801b472:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b476:	9302      	str	r3, [sp, #8]
 801b478:	9305      	str	r3, [sp, #20]
 801b47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b47e:	9100      	str	r1, [sp, #0]
 801b480:	9104      	str	r1, [sp, #16]
 801b482:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b486:	4669      	mov	r1, sp
 801b488:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b48a:	f000 f875 	bl	801b578 <_svfiprintf_r>
 801b48e:	1c43      	adds	r3, r0, #1
 801b490:	bfbc      	itt	lt
 801b492:	238b      	movlt	r3, #139	; 0x8b
 801b494:	602b      	strlt	r3, [r5, #0]
 801b496:	2c00      	cmp	r4, #0
 801b498:	d0e3      	beq.n	801b462 <_vsniprintf_r+0x16>
 801b49a:	2200      	movs	r2, #0
 801b49c:	9b00      	ldr	r3, [sp, #0]
 801b49e:	701a      	strb	r2, [r3, #0]
 801b4a0:	e7df      	b.n	801b462 <_vsniprintf_r+0x16>
	...

0801b4a4 <vsniprintf>:
 801b4a4:	b507      	push	{r0, r1, r2, lr}
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	460a      	mov	r2, r1
 801b4ac:	4601      	mov	r1, r0
 801b4ae:	4803      	ldr	r0, [pc, #12]	; (801b4bc <vsniprintf+0x18>)
 801b4b0:	6800      	ldr	r0, [r0, #0]
 801b4b2:	f7ff ffcb 	bl	801b44c <_vsniprintf_r>
 801b4b6:	b003      	add	sp, #12
 801b4b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4bc:	20000120 	.word	0x20000120

0801b4c0 <__ssputs_r>:
 801b4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4c4:	688e      	ldr	r6, [r1, #8]
 801b4c6:	4682      	mov	sl, r0
 801b4c8:	429e      	cmp	r6, r3
 801b4ca:	460c      	mov	r4, r1
 801b4cc:	4690      	mov	r8, r2
 801b4ce:	461f      	mov	r7, r3
 801b4d0:	d838      	bhi.n	801b544 <__ssputs_r+0x84>
 801b4d2:	898a      	ldrh	r2, [r1, #12]
 801b4d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b4d8:	d032      	beq.n	801b540 <__ssputs_r+0x80>
 801b4da:	6825      	ldr	r5, [r4, #0]
 801b4dc:	6909      	ldr	r1, [r1, #16]
 801b4de:	3301      	adds	r3, #1
 801b4e0:	eba5 0901 	sub.w	r9, r5, r1
 801b4e4:	6965      	ldr	r5, [r4, #20]
 801b4e6:	444b      	add	r3, r9
 801b4e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b4f0:	106d      	asrs	r5, r5, #1
 801b4f2:	429d      	cmp	r5, r3
 801b4f4:	bf38      	it	cc
 801b4f6:	461d      	movcc	r5, r3
 801b4f8:	0553      	lsls	r3, r2, #21
 801b4fa:	d531      	bpl.n	801b560 <__ssputs_r+0xa0>
 801b4fc:	4629      	mov	r1, r5
 801b4fe:	f000 fb47 	bl	801bb90 <_malloc_r>
 801b502:	4606      	mov	r6, r0
 801b504:	b950      	cbnz	r0, 801b51c <__ssputs_r+0x5c>
 801b506:	230c      	movs	r3, #12
 801b508:	f04f 30ff 	mov.w	r0, #4294967295
 801b50c:	f8ca 3000 	str.w	r3, [sl]
 801b510:	89a3      	ldrh	r3, [r4, #12]
 801b512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b516:	81a3      	strh	r3, [r4, #12]
 801b518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b51c:	464a      	mov	r2, r9
 801b51e:	6921      	ldr	r1, [r4, #16]
 801b520:	f7ff ff64 	bl	801b3ec <memcpy>
 801b524:	89a3      	ldrh	r3, [r4, #12]
 801b526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b52e:	81a3      	strh	r3, [r4, #12]
 801b530:	6126      	str	r6, [r4, #16]
 801b532:	444e      	add	r6, r9
 801b534:	6026      	str	r6, [r4, #0]
 801b536:	463e      	mov	r6, r7
 801b538:	6165      	str	r5, [r4, #20]
 801b53a:	eba5 0509 	sub.w	r5, r5, r9
 801b53e:	60a5      	str	r5, [r4, #8]
 801b540:	42be      	cmp	r6, r7
 801b542:	d900      	bls.n	801b546 <__ssputs_r+0x86>
 801b544:	463e      	mov	r6, r7
 801b546:	4632      	mov	r2, r6
 801b548:	4641      	mov	r1, r8
 801b54a:	6820      	ldr	r0, [r4, #0]
 801b54c:	f7ff ff5c 	bl	801b408 <memmove>
 801b550:	68a3      	ldr	r3, [r4, #8]
 801b552:	2000      	movs	r0, #0
 801b554:	1b9b      	subs	r3, r3, r6
 801b556:	60a3      	str	r3, [r4, #8]
 801b558:	6823      	ldr	r3, [r4, #0]
 801b55a:	4433      	add	r3, r6
 801b55c:	6023      	str	r3, [r4, #0]
 801b55e:	e7db      	b.n	801b518 <__ssputs_r+0x58>
 801b560:	462a      	mov	r2, r5
 801b562:	f000 fb89 	bl	801bc78 <_realloc_r>
 801b566:	4606      	mov	r6, r0
 801b568:	2800      	cmp	r0, #0
 801b56a:	d1e1      	bne.n	801b530 <__ssputs_r+0x70>
 801b56c:	4650      	mov	r0, sl
 801b56e:	6921      	ldr	r1, [r4, #16]
 801b570:	f000 faa6 	bl	801bac0 <_free_r>
 801b574:	e7c7      	b.n	801b506 <__ssputs_r+0x46>
	...

0801b578 <_svfiprintf_r>:
 801b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b57c:	4698      	mov	r8, r3
 801b57e:	898b      	ldrh	r3, [r1, #12]
 801b580:	4607      	mov	r7, r0
 801b582:	061b      	lsls	r3, r3, #24
 801b584:	460d      	mov	r5, r1
 801b586:	4614      	mov	r4, r2
 801b588:	b09d      	sub	sp, #116	; 0x74
 801b58a:	d50e      	bpl.n	801b5aa <_svfiprintf_r+0x32>
 801b58c:	690b      	ldr	r3, [r1, #16]
 801b58e:	b963      	cbnz	r3, 801b5aa <_svfiprintf_r+0x32>
 801b590:	2140      	movs	r1, #64	; 0x40
 801b592:	f000 fafd 	bl	801bb90 <_malloc_r>
 801b596:	6028      	str	r0, [r5, #0]
 801b598:	6128      	str	r0, [r5, #16]
 801b59a:	b920      	cbnz	r0, 801b5a6 <_svfiprintf_r+0x2e>
 801b59c:	230c      	movs	r3, #12
 801b59e:	603b      	str	r3, [r7, #0]
 801b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5a4:	e0d1      	b.n	801b74a <_svfiprintf_r+0x1d2>
 801b5a6:	2340      	movs	r3, #64	; 0x40
 801b5a8:	616b      	str	r3, [r5, #20]
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b5ae:	2320      	movs	r3, #32
 801b5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b5b4:	2330      	movs	r3, #48	; 0x30
 801b5b6:	f04f 0901 	mov.w	r9, #1
 801b5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b764 <_svfiprintf_r+0x1ec>
 801b5c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b5c6:	4623      	mov	r3, r4
 801b5c8:	469a      	mov	sl, r3
 801b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5ce:	b10a      	cbz	r2, 801b5d4 <_svfiprintf_r+0x5c>
 801b5d0:	2a25      	cmp	r2, #37	; 0x25
 801b5d2:	d1f9      	bne.n	801b5c8 <_svfiprintf_r+0x50>
 801b5d4:	ebba 0b04 	subs.w	fp, sl, r4
 801b5d8:	d00b      	beq.n	801b5f2 <_svfiprintf_r+0x7a>
 801b5da:	465b      	mov	r3, fp
 801b5dc:	4622      	mov	r2, r4
 801b5de:	4629      	mov	r1, r5
 801b5e0:	4638      	mov	r0, r7
 801b5e2:	f7ff ff6d 	bl	801b4c0 <__ssputs_r>
 801b5e6:	3001      	adds	r0, #1
 801b5e8:	f000 80aa 	beq.w	801b740 <_svfiprintf_r+0x1c8>
 801b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5ee:	445a      	add	r2, fp
 801b5f0:	9209      	str	r2, [sp, #36]	; 0x24
 801b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	f000 80a2 	beq.w	801b740 <_svfiprintf_r+0x1c8>
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	f04f 32ff 	mov.w	r2, #4294967295
 801b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b606:	f10a 0a01 	add.w	sl, sl, #1
 801b60a:	9304      	str	r3, [sp, #16]
 801b60c:	9307      	str	r3, [sp, #28]
 801b60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b612:	931a      	str	r3, [sp, #104]	; 0x68
 801b614:	4654      	mov	r4, sl
 801b616:	2205      	movs	r2, #5
 801b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b61c:	4851      	ldr	r0, [pc, #324]	; (801b764 <_svfiprintf_r+0x1ec>)
 801b61e:	f000 fa41 	bl	801baa4 <memchr>
 801b622:	9a04      	ldr	r2, [sp, #16]
 801b624:	b9d8      	cbnz	r0, 801b65e <_svfiprintf_r+0xe6>
 801b626:	06d0      	lsls	r0, r2, #27
 801b628:	bf44      	itt	mi
 801b62a:	2320      	movmi	r3, #32
 801b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b630:	0711      	lsls	r1, r2, #28
 801b632:	bf44      	itt	mi
 801b634:	232b      	movmi	r3, #43	; 0x2b
 801b636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b63a:	f89a 3000 	ldrb.w	r3, [sl]
 801b63e:	2b2a      	cmp	r3, #42	; 0x2a
 801b640:	d015      	beq.n	801b66e <_svfiprintf_r+0xf6>
 801b642:	4654      	mov	r4, sl
 801b644:	2000      	movs	r0, #0
 801b646:	f04f 0c0a 	mov.w	ip, #10
 801b64a:	9a07      	ldr	r2, [sp, #28]
 801b64c:	4621      	mov	r1, r4
 801b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b652:	3b30      	subs	r3, #48	; 0x30
 801b654:	2b09      	cmp	r3, #9
 801b656:	d94e      	bls.n	801b6f6 <_svfiprintf_r+0x17e>
 801b658:	b1b0      	cbz	r0, 801b688 <_svfiprintf_r+0x110>
 801b65a:	9207      	str	r2, [sp, #28]
 801b65c:	e014      	b.n	801b688 <_svfiprintf_r+0x110>
 801b65e:	eba0 0308 	sub.w	r3, r0, r8
 801b662:	fa09 f303 	lsl.w	r3, r9, r3
 801b666:	4313      	orrs	r3, r2
 801b668:	46a2      	mov	sl, r4
 801b66a:	9304      	str	r3, [sp, #16]
 801b66c:	e7d2      	b.n	801b614 <_svfiprintf_r+0x9c>
 801b66e:	9b03      	ldr	r3, [sp, #12]
 801b670:	1d19      	adds	r1, r3, #4
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	9103      	str	r1, [sp, #12]
 801b676:	2b00      	cmp	r3, #0
 801b678:	bfbb      	ittet	lt
 801b67a:	425b      	neglt	r3, r3
 801b67c:	f042 0202 	orrlt.w	r2, r2, #2
 801b680:	9307      	strge	r3, [sp, #28]
 801b682:	9307      	strlt	r3, [sp, #28]
 801b684:	bfb8      	it	lt
 801b686:	9204      	strlt	r2, [sp, #16]
 801b688:	7823      	ldrb	r3, [r4, #0]
 801b68a:	2b2e      	cmp	r3, #46	; 0x2e
 801b68c:	d10c      	bne.n	801b6a8 <_svfiprintf_r+0x130>
 801b68e:	7863      	ldrb	r3, [r4, #1]
 801b690:	2b2a      	cmp	r3, #42	; 0x2a
 801b692:	d135      	bne.n	801b700 <_svfiprintf_r+0x188>
 801b694:	9b03      	ldr	r3, [sp, #12]
 801b696:	3402      	adds	r4, #2
 801b698:	1d1a      	adds	r2, r3, #4
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	9203      	str	r2, [sp, #12]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	bfb8      	it	lt
 801b6a2:	f04f 33ff 	movlt.w	r3, #4294967295
 801b6a6:	9305      	str	r3, [sp, #20]
 801b6a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801b768 <_svfiprintf_r+0x1f0>
 801b6ac:	2203      	movs	r2, #3
 801b6ae:	4650      	mov	r0, sl
 801b6b0:	7821      	ldrb	r1, [r4, #0]
 801b6b2:	f000 f9f7 	bl	801baa4 <memchr>
 801b6b6:	b140      	cbz	r0, 801b6ca <_svfiprintf_r+0x152>
 801b6b8:	2340      	movs	r3, #64	; 0x40
 801b6ba:	eba0 000a 	sub.w	r0, r0, sl
 801b6be:	fa03 f000 	lsl.w	r0, r3, r0
 801b6c2:	9b04      	ldr	r3, [sp, #16]
 801b6c4:	3401      	adds	r4, #1
 801b6c6:	4303      	orrs	r3, r0
 801b6c8:	9304      	str	r3, [sp, #16]
 801b6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6ce:	2206      	movs	r2, #6
 801b6d0:	4826      	ldr	r0, [pc, #152]	; (801b76c <_svfiprintf_r+0x1f4>)
 801b6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b6d6:	f000 f9e5 	bl	801baa4 <memchr>
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	d038      	beq.n	801b750 <_svfiprintf_r+0x1d8>
 801b6de:	4b24      	ldr	r3, [pc, #144]	; (801b770 <_svfiprintf_r+0x1f8>)
 801b6e0:	bb1b      	cbnz	r3, 801b72a <_svfiprintf_r+0x1b2>
 801b6e2:	9b03      	ldr	r3, [sp, #12]
 801b6e4:	3307      	adds	r3, #7
 801b6e6:	f023 0307 	bic.w	r3, r3, #7
 801b6ea:	3308      	adds	r3, #8
 801b6ec:	9303      	str	r3, [sp, #12]
 801b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6f0:	4433      	add	r3, r6
 801b6f2:	9309      	str	r3, [sp, #36]	; 0x24
 801b6f4:	e767      	b.n	801b5c6 <_svfiprintf_r+0x4e>
 801b6f6:	460c      	mov	r4, r1
 801b6f8:	2001      	movs	r0, #1
 801b6fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801b6fe:	e7a5      	b.n	801b64c <_svfiprintf_r+0xd4>
 801b700:	2300      	movs	r3, #0
 801b702:	f04f 0c0a 	mov.w	ip, #10
 801b706:	4619      	mov	r1, r3
 801b708:	3401      	adds	r4, #1
 801b70a:	9305      	str	r3, [sp, #20]
 801b70c:	4620      	mov	r0, r4
 801b70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b712:	3a30      	subs	r2, #48	; 0x30
 801b714:	2a09      	cmp	r2, #9
 801b716:	d903      	bls.n	801b720 <_svfiprintf_r+0x1a8>
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d0c5      	beq.n	801b6a8 <_svfiprintf_r+0x130>
 801b71c:	9105      	str	r1, [sp, #20]
 801b71e:	e7c3      	b.n	801b6a8 <_svfiprintf_r+0x130>
 801b720:	4604      	mov	r4, r0
 801b722:	2301      	movs	r3, #1
 801b724:	fb0c 2101 	mla	r1, ip, r1, r2
 801b728:	e7f0      	b.n	801b70c <_svfiprintf_r+0x194>
 801b72a:	ab03      	add	r3, sp, #12
 801b72c:	9300      	str	r3, [sp, #0]
 801b72e:	462a      	mov	r2, r5
 801b730:	4638      	mov	r0, r7
 801b732:	4b10      	ldr	r3, [pc, #64]	; (801b774 <_svfiprintf_r+0x1fc>)
 801b734:	a904      	add	r1, sp, #16
 801b736:	f3af 8000 	nop.w
 801b73a:	1c42      	adds	r2, r0, #1
 801b73c:	4606      	mov	r6, r0
 801b73e:	d1d6      	bne.n	801b6ee <_svfiprintf_r+0x176>
 801b740:	89ab      	ldrh	r3, [r5, #12]
 801b742:	065b      	lsls	r3, r3, #25
 801b744:	f53f af2c 	bmi.w	801b5a0 <_svfiprintf_r+0x28>
 801b748:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b74a:	b01d      	add	sp, #116	; 0x74
 801b74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b750:	ab03      	add	r3, sp, #12
 801b752:	9300      	str	r3, [sp, #0]
 801b754:	462a      	mov	r2, r5
 801b756:	4638      	mov	r0, r7
 801b758:	4b06      	ldr	r3, [pc, #24]	; (801b774 <_svfiprintf_r+0x1fc>)
 801b75a:	a904      	add	r1, sp, #16
 801b75c:	f000 f87c 	bl	801b858 <_printf_i>
 801b760:	e7eb      	b.n	801b73a <_svfiprintf_r+0x1c2>
 801b762:	bf00      	nop
 801b764:	0801d71a 	.word	0x0801d71a
 801b768:	0801d720 	.word	0x0801d720
 801b76c:	0801d724 	.word	0x0801d724
 801b770:	00000000 	.word	0x00000000
 801b774:	0801b4c1 	.word	0x0801b4c1

0801b778 <_printf_common>:
 801b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b77c:	4616      	mov	r6, r2
 801b77e:	4699      	mov	r9, r3
 801b780:	688a      	ldr	r2, [r1, #8]
 801b782:	690b      	ldr	r3, [r1, #16]
 801b784:	4607      	mov	r7, r0
 801b786:	4293      	cmp	r3, r2
 801b788:	bfb8      	it	lt
 801b78a:	4613      	movlt	r3, r2
 801b78c:	6033      	str	r3, [r6, #0]
 801b78e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b792:	460c      	mov	r4, r1
 801b794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b798:	b10a      	cbz	r2, 801b79e <_printf_common+0x26>
 801b79a:	3301      	adds	r3, #1
 801b79c:	6033      	str	r3, [r6, #0]
 801b79e:	6823      	ldr	r3, [r4, #0]
 801b7a0:	0699      	lsls	r1, r3, #26
 801b7a2:	bf42      	ittt	mi
 801b7a4:	6833      	ldrmi	r3, [r6, #0]
 801b7a6:	3302      	addmi	r3, #2
 801b7a8:	6033      	strmi	r3, [r6, #0]
 801b7aa:	6825      	ldr	r5, [r4, #0]
 801b7ac:	f015 0506 	ands.w	r5, r5, #6
 801b7b0:	d106      	bne.n	801b7c0 <_printf_common+0x48>
 801b7b2:	f104 0a19 	add.w	sl, r4, #25
 801b7b6:	68e3      	ldr	r3, [r4, #12]
 801b7b8:	6832      	ldr	r2, [r6, #0]
 801b7ba:	1a9b      	subs	r3, r3, r2
 801b7bc:	42ab      	cmp	r3, r5
 801b7be:	dc28      	bgt.n	801b812 <_printf_common+0x9a>
 801b7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b7c4:	1e13      	subs	r3, r2, #0
 801b7c6:	6822      	ldr	r2, [r4, #0]
 801b7c8:	bf18      	it	ne
 801b7ca:	2301      	movne	r3, #1
 801b7cc:	0692      	lsls	r2, r2, #26
 801b7ce:	d42d      	bmi.n	801b82c <_printf_common+0xb4>
 801b7d0:	4649      	mov	r1, r9
 801b7d2:	4638      	mov	r0, r7
 801b7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b7d8:	47c0      	blx	r8
 801b7da:	3001      	adds	r0, #1
 801b7dc:	d020      	beq.n	801b820 <_printf_common+0xa8>
 801b7de:	6823      	ldr	r3, [r4, #0]
 801b7e0:	68e5      	ldr	r5, [r4, #12]
 801b7e2:	f003 0306 	and.w	r3, r3, #6
 801b7e6:	2b04      	cmp	r3, #4
 801b7e8:	bf18      	it	ne
 801b7ea:	2500      	movne	r5, #0
 801b7ec:	6832      	ldr	r2, [r6, #0]
 801b7ee:	f04f 0600 	mov.w	r6, #0
 801b7f2:	68a3      	ldr	r3, [r4, #8]
 801b7f4:	bf08      	it	eq
 801b7f6:	1aad      	subeq	r5, r5, r2
 801b7f8:	6922      	ldr	r2, [r4, #16]
 801b7fa:	bf08      	it	eq
 801b7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b800:	4293      	cmp	r3, r2
 801b802:	bfc4      	itt	gt
 801b804:	1a9b      	subgt	r3, r3, r2
 801b806:	18ed      	addgt	r5, r5, r3
 801b808:	341a      	adds	r4, #26
 801b80a:	42b5      	cmp	r5, r6
 801b80c:	d11a      	bne.n	801b844 <_printf_common+0xcc>
 801b80e:	2000      	movs	r0, #0
 801b810:	e008      	b.n	801b824 <_printf_common+0xac>
 801b812:	2301      	movs	r3, #1
 801b814:	4652      	mov	r2, sl
 801b816:	4649      	mov	r1, r9
 801b818:	4638      	mov	r0, r7
 801b81a:	47c0      	blx	r8
 801b81c:	3001      	adds	r0, #1
 801b81e:	d103      	bne.n	801b828 <_printf_common+0xb0>
 801b820:	f04f 30ff 	mov.w	r0, #4294967295
 801b824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b828:	3501      	adds	r5, #1
 801b82a:	e7c4      	b.n	801b7b6 <_printf_common+0x3e>
 801b82c:	2030      	movs	r0, #48	; 0x30
 801b82e:	18e1      	adds	r1, r4, r3
 801b830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b834:	1c5a      	adds	r2, r3, #1
 801b836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b83a:	4422      	add	r2, r4
 801b83c:	3302      	adds	r3, #2
 801b83e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b842:	e7c5      	b.n	801b7d0 <_printf_common+0x58>
 801b844:	2301      	movs	r3, #1
 801b846:	4622      	mov	r2, r4
 801b848:	4649      	mov	r1, r9
 801b84a:	4638      	mov	r0, r7
 801b84c:	47c0      	blx	r8
 801b84e:	3001      	adds	r0, #1
 801b850:	d0e6      	beq.n	801b820 <_printf_common+0xa8>
 801b852:	3601      	adds	r6, #1
 801b854:	e7d9      	b.n	801b80a <_printf_common+0x92>
	...

0801b858 <_printf_i>:
 801b858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b85c:	7e0f      	ldrb	r7, [r1, #24]
 801b85e:	4691      	mov	r9, r2
 801b860:	2f78      	cmp	r7, #120	; 0x78
 801b862:	4680      	mov	r8, r0
 801b864:	460c      	mov	r4, r1
 801b866:	469a      	mov	sl, r3
 801b868:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b86e:	d807      	bhi.n	801b880 <_printf_i+0x28>
 801b870:	2f62      	cmp	r7, #98	; 0x62
 801b872:	d80a      	bhi.n	801b88a <_printf_i+0x32>
 801b874:	2f00      	cmp	r7, #0
 801b876:	f000 80d9 	beq.w	801ba2c <_printf_i+0x1d4>
 801b87a:	2f58      	cmp	r7, #88	; 0x58
 801b87c:	f000 80a4 	beq.w	801b9c8 <_printf_i+0x170>
 801b880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b888:	e03a      	b.n	801b900 <_printf_i+0xa8>
 801b88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b88e:	2b15      	cmp	r3, #21
 801b890:	d8f6      	bhi.n	801b880 <_printf_i+0x28>
 801b892:	a101      	add	r1, pc, #4	; (adr r1, 801b898 <_printf_i+0x40>)
 801b894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b898:	0801b8f1 	.word	0x0801b8f1
 801b89c:	0801b905 	.word	0x0801b905
 801b8a0:	0801b881 	.word	0x0801b881
 801b8a4:	0801b881 	.word	0x0801b881
 801b8a8:	0801b881 	.word	0x0801b881
 801b8ac:	0801b881 	.word	0x0801b881
 801b8b0:	0801b905 	.word	0x0801b905
 801b8b4:	0801b881 	.word	0x0801b881
 801b8b8:	0801b881 	.word	0x0801b881
 801b8bc:	0801b881 	.word	0x0801b881
 801b8c0:	0801b881 	.word	0x0801b881
 801b8c4:	0801ba13 	.word	0x0801ba13
 801b8c8:	0801b935 	.word	0x0801b935
 801b8cc:	0801b9f5 	.word	0x0801b9f5
 801b8d0:	0801b881 	.word	0x0801b881
 801b8d4:	0801b881 	.word	0x0801b881
 801b8d8:	0801ba35 	.word	0x0801ba35
 801b8dc:	0801b881 	.word	0x0801b881
 801b8e0:	0801b935 	.word	0x0801b935
 801b8e4:	0801b881 	.word	0x0801b881
 801b8e8:	0801b881 	.word	0x0801b881
 801b8ec:	0801b9fd 	.word	0x0801b9fd
 801b8f0:	682b      	ldr	r3, [r5, #0]
 801b8f2:	1d1a      	adds	r2, r3, #4
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	602a      	str	r2, [r5, #0]
 801b8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b900:	2301      	movs	r3, #1
 801b902:	e0a4      	b.n	801ba4e <_printf_i+0x1f6>
 801b904:	6820      	ldr	r0, [r4, #0]
 801b906:	6829      	ldr	r1, [r5, #0]
 801b908:	0606      	lsls	r6, r0, #24
 801b90a:	f101 0304 	add.w	r3, r1, #4
 801b90e:	d50a      	bpl.n	801b926 <_printf_i+0xce>
 801b910:	680e      	ldr	r6, [r1, #0]
 801b912:	602b      	str	r3, [r5, #0]
 801b914:	2e00      	cmp	r6, #0
 801b916:	da03      	bge.n	801b920 <_printf_i+0xc8>
 801b918:	232d      	movs	r3, #45	; 0x2d
 801b91a:	4276      	negs	r6, r6
 801b91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b920:	230a      	movs	r3, #10
 801b922:	485e      	ldr	r0, [pc, #376]	; (801ba9c <_printf_i+0x244>)
 801b924:	e019      	b.n	801b95a <_printf_i+0x102>
 801b926:	680e      	ldr	r6, [r1, #0]
 801b928:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b92c:	602b      	str	r3, [r5, #0]
 801b92e:	bf18      	it	ne
 801b930:	b236      	sxthne	r6, r6
 801b932:	e7ef      	b.n	801b914 <_printf_i+0xbc>
 801b934:	682b      	ldr	r3, [r5, #0]
 801b936:	6820      	ldr	r0, [r4, #0]
 801b938:	1d19      	adds	r1, r3, #4
 801b93a:	6029      	str	r1, [r5, #0]
 801b93c:	0601      	lsls	r1, r0, #24
 801b93e:	d501      	bpl.n	801b944 <_printf_i+0xec>
 801b940:	681e      	ldr	r6, [r3, #0]
 801b942:	e002      	b.n	801b94a <_printf_i+0xf2>
 801b944:	0646      	lsls	r6, r0, #25
 801b946:	d5fb      	bpl.n	801b940 <_printf_i+0xe8>
 801b948:	881e      	ldrh	r6, [r3, #0]
 801b94a:	2f6f      	cmp	r7, #111	; 0x6f
 801b94c:	bf0c      	ite	eq
 801b94e:	2308      	moveq	r3, #8
 801b950:	230a      	movne	r3, #10
 801b952:	4852      	ldr	r0, [pc, #328]	; (801ba9c <_printf_i+0x244>)
 801b954:	2100      	movs	r1, #0
 801b956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b95a:	6865      	ldr	r5, [r4, #4]
 801b95c:	2d00      	cmp	r5, #0
 801b95e:	bfa8      	it	ge
 801b960:	6821      	ldrge	r1, [r4, #0]
 801b962:	60a5      	str	r5, [r4, #8]
 801b964:	bfa4      	itt	ge
 801b966:	f021 0104 	bicge.w	r1, r1, #4
 801b96a:	6021      	strge	r1, [r4, #0]
 801b96c:	b90e      	cbnz	r6, 801b972 <_printf_i+0x11a>
 801b96e:	2d00      	cmp	r5, #0
 801b970:	d04d      	beq.n	801ba0e <_printf_i+0x1b6>
 801b972:	4615      	mov	r5, r2
 801b974:	fbb6 f1f3 	udiv	r1, r6, r3
 801b978:	fb03 6711 	mls	r7, r3, r1, r6
 801b97c:	5dc7      	ldrb	r7, [r0, r7]
 801b97e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b982:	4637      	mov	r7, r6
 801b984:	42bb      	cmp	r3, r7
 801b986:	460e      	mov	r6, r1
 801b988:	d9f4      	bls.n	801b974 <_printf_i+0x11c>
 801b98a:	2b08      	cmp	r3, #8
 801b98c:	d10b      	bne.n	801b9a6 <_printf_i+0x14e>
 801b98e:	6823      	ldr	r3, [r4, #0]
 801b990:	07de      	lsls	r6, r3, #31
 801b992:	d508      	bpl.n	801b9a6 <_printf_i+0x14e>
 801b994:	6923      	ldr	r3, [r4, #16]
 801b996:	6861      	ldr	r1, [r4, #4]
 801b998:	4299      	cmp	r1, r3
 801b99a:	bfde      	ittt	le
 801b99c:	2330      	movle	r3, #48	; 0x30
 801b99e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b9a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b9a6:	1b52      	subs	r2, r2, r5
 801b9a8:	6122      	str	r2, [r4, #16]
 801b9aa:	464b      	mov	r3, r9
 801b9ac:	4621      	mov	r1, r4
 801b9ae:	4640      	mov	r0, r8
 801b9b0:	f8cd a000 	str.w	sl, [sp]
 801b9b4:	aa03      	add	r2, sp, #12
 801b9b6:	f7ff fedf 	bl	801b778 <_printf_common>
 801b9ba:	3001      	adds	r0, #1
 801b9bc:	d14c      	bne.n	801ba58 <_printf_i+0x200>
 801b9be:	f04f 30ff 	mov.w	r0, #4294967295
 801b9c2:	b004      	add	sp, #16
 801b9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9c8:	4834      	ldr	r0, [pc, #208]	; (801ba9c <_printf_i+0x244>)
 801b9ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b9ce:	6829      	ldr	r1, [r5, #0]
 801b9d0:	6823      	ldr	r3, [r4, #0]
 801b9d2:	f851 6b04 	ldr.w	r6, [r1], #4
 801b9d6:	6029      	str	r1, [r5, #0]
 801b9d8:	061d      	lsls	r5, r3, #24
 801b9da:	d514      	bpl.n	801ba06 <_printf_i+0x1ae>
 801b9dc:	07df      	lsls	r7, r3, #31
 801b9de:	bf44      	itt	mi
 801b9e0:	f043 0320 	orrmi.w	r3, r3, #32
 801b9e4:	6023      	strmi	r3, [r4, #0]
 801b9e6:	b91e      	cbnz	r6, 801b9f0 <_printf_i+0x198>
 801b9e8:	6823      	ldr	r3, [r4, #0]
 801b9ea:	f023 0320 	bic.w	r3, r3, #32
 801b9ee:	6023      	str	r3, [r4, #0]
 801b9f0:	2310      	movs	r3, #16
 801b9f2:	e7af      	b.n	801b954 <_printf_i+0xfc>
 801b9f4:	6823      	ldr	r3, [r4, #0]
 801b9f6:	f043 0320 	orr.w	r3, r3, #32
 801b9fa:	6023      	str	r3, [r4, #0]
 801b9fc:	2378      	movs	r3, #120	; 0x78
 801b9fe:	4828      	ldr	r0, [pc, #160]	; (801baa0 <_printf_i+0x248>)
 801ba00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ba04:	e7e3      	b.n	801b9ce <_printf_i+0x176>
 801ba06:	0659      	lsls	r1, r3, #25
 801ba08:	bf48      	it	mi
 801ba0a:	b2b6      	uxthmi	r6, r6
 801ba0c:	e7e6      	b.n	801b9dc <_printf_i+0x184>
 801ba0e:	4615      	mov	r5, r2
 801ba10:	e7bb      	b.n	801b98a <_printf_i+0x132>
 801ba12:	682b      	ldr	r3, [r5, #0]
 801ba14:	6826      	ldr	r6, [r4, #0]
 801ba16:	1d18      	adds	r0, r3, #4
 801ba18:	6961      	ldr	r1, [r4, #20]
 801ba1a:	6028      	str	r0, [r5, #0]
 801ba1c:	0635      	lsls	r5, r6, #24
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	d501      	bpl.n	801ba26 <_printf_i+0x1ce>
 801ba22:	6019      	str	r1, [r3, #0]
 801ba24:	e002      	b.n	801ba2c <_printf_i+0x1d4>
 801ba26:	0670      	lsls	r0, r6, #25
 801ba28:	d5fb      	bpl.n	801ba22 <_printf_i+0x1ca>
 801ba2a:	8019      	strh	r1, [r3, #0]
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	4615      	mov	r5, r2
 801ba30:	6123      	str	r3, [r4, #16]
 801ba32:	e7ba      	b.n	801b9aa <_printf_i+0x152>
 801ba34:	682b      	ldr	r3, [r5, #0]
 801ba36:	2100      	movs	r1, #0
 801ba38:	1d1a      	adds	r2, r3, #4
 801ba3a:	602a      	str	r2, [r5, #0]
 801ba3c:	681d      	ldr	r5, [r3, #0]
 801ba3e:	6862      	ldr	r2, [r4, #4]
 801ba40:	4628      	mov	r0, r5
 801ba42:	f000 f82f 	bl	801baa4 <memchr>
 801ba46:	b108      	cbz	r0, 801ba4c <_printf_i+0x1f4>
 801ba48:	1b40      	subs	r0, r0, r5
 801ba4a:	6060      	str	r0, [r4, #4]
 801ba4c:	6863      	ldr	r3, [r4, #4]
 801ba4e:	6123      	str	r3, [r4, #16]
 801ba50:	2300      	movs	r3, #0
 801ba52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba56:	e7a8      	b.n	801b9aa <_printf_i+0x152>
 801ba58:	462a      	mov	r2, r5
 801ba5a:	4649      	mov	r1, r9
 801ba5c:	4640      	mov	r0, r8
 801ba5e:	6923      	ldr	r3, [r4, #16]
 801ba60:	47d0      	blx	sl
 801ba62:	3001      	adds	r0, #1
 801ba64:	d0ab      	beq.n	801b9be <_printf_i+0x166>
 801ba66:	6823      	ldr	r3, [r4, #0]
 801ba68:	079b      	lsls	r3, r3, #30
 801ba6a:	d413      	bmi.n	801ba94 <_printf_i+0x23c>
 801ba6c:	68e0      	ldr	r0, [r4, #12]
 801ba6e:	9b03      	ldr	r3, [sp, #12]
 801ba70:	4298      	cmp	r0, r3
 801ba72:	bfb8      	it	lt
 801ba74:	4618      	movlt	r0, r3
 801ba76:	e7a4      	b.n	801b9c2 <_printf_i+0x16a>
 801ba78:	2301      	movs	r3, #1
 801ba7a:	4632      	mov	r2, r6
 801ba7c:	4649      	mov	r1, r9
 801ba7e:	4640      	mov	r0, r8
 801ba80:	47d0      	blx	sl
 801ba82:	3001      	adds	r0, #1
 801ba84:	d09b      	beq.n	801b9be <_printf_i+0x166>
 801ba86:	3501      	adds	r5, #1
 801ba88:	68e3      	ldr	r3, [r4, #12]
 801ba8a:	9903      	ldr	r1, [sp, #12]
 801ba8c:	1a5b      	subs	r3, r3, r1
 801ba8e:	42ab      	cmp	r3, r5
 801ba90:	dcf2      	bgt.n	801ba78 <_printf_i+0x220>
 801ba92:	e7eb      	b.n	801ba6c <_printf_i+0x214>
 801ba94:	2500      	movs	r5, #0
 801ba96:	f104 0619 	add.w	r6, r4, #25
 801ba9a:	e7f5      	b.n	801ba88 <_printf_i+0x230>
 801ba9c:	0801d72b 	.word	0x0801d72b
 801baa0:	0801d73c 	.word	0x0801d73c

0801baa4 <memchr>:
 801baa4:	4603      	mov	r3, r0
 801baa6:	b510      	push	{r4, lr}
 801baa8:	b2c9      	uxtb	r1, r1
 801baaa:	4402      	add	r2, r0
 801baac:	4293      	cmp	r3, r2
 801baae:	4618      	mov	r0, r3
 801bab0:	d101      	bne.n	801bab6 <memchr+0x12>
 801bab2:	2000      	movs	r0, #0
 801bab4:	e003      	b.n	801babe <memchr+0x1a>
 801bab6:	7804      	ldrb	r4, [r0, #0]
 801bab8:	3301      	adds	r3, #1
 801baba:	428c      	cmp	r4, r1
 801babc:	d1f6      	bne.n	801baac <memchr+0x8>
 801babe:	bd10      	pop	{r4, pc}

0801bac0 <_free_r>:
 801bac0:	b538      	push	{r3, r4, r5, lr}
 801bac2:	4605      	mov	r5, r0
 801bac4:	2900      	cmp	r1, #0
 801bac6:	d040      	beq.n	801bb4a <_free_r+0x8a>
 801bac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bacc:	1f0c      	subs	r4, r1, #4
 801bace:	2b00      	cmp	r3, #0
 801bad0:	bfb8      	it	lt
 801bad2:	18e4      	addlt	r4, r4, r3
 801bad4:	f000 f910 	bl	801bcf8 <__malloc_lock>
 801bad8:	4a1c      	ldr	r2, [pc, #112]	; (801bb4c <_free_r+0x8c>)
 801bada:	6813      	ldr	r3, [r2, #0]
 801badc:	b933      	cbnz	r3, 801baec <_free_r+0x2c>
 801bade:	6063      	str	r3, [r4, #4]
 801bae0:	6014      	str	r4, [r2, #0]
 801bae2:	4628      	mov	r0, r5
 801bae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bae8:	f000 b90c 	b.w	801bd04 <__malloc_unlock>
 801baec:	42a3      	cmp	r3, r4
 801baee:	d908      	bls.n	801bb02 <_free_r+0x42>
 801baf0:	6820      	ldr	r0, [r4, #0]
 801baf2:	1821      	adds	r1, r4, r0
 801baf4:	428b      	cmp	r3, r1
 801baf6:	bf01      	itttt	eq
 801baf8:	6819      	ldreq	r1, [r3, #0]
 801bafa:	685b      	ldreq	r3, [r3, #4]
 801bafc:	1809      	addeq	r1, r1, r0
 801bafe:	6021      	streq	r1, [r4, #0]
 801bb00:	e7ed      	b.n	801bade <_free_r+0x1e>
 801bb02:	461a      	mov	r2, r3
 801bb04:	685b      	ldr	r3, [r3, #4]
 801bb06:	b10b      	cbz	r3, 801bb0c <_free_r+0x4c>
 801bb08:	42a3      	cmp	r3, r4
 801bb0a:	d9fa      	bls.n	801bb02 <_free_r+0x42>
 801bb0c:	6811      	ldr	r1, [r2, #0]
 801bb0e:	1850      	adds	r0, r2, r1
 801bb10:	42a0      	cmp	r0, r4
 801bb12:	d10b      	bne.n	801bb2c <_free_r+0x6c>
 801bb14:	6820      	ldr	r0, [r4, #0]
 801bb16:	4401      	add	r1, r0
 801bb18:	1850      	adds	r0, r2, r1
 801bb1a:	4283      	cmp	r3, r0
 801bb1c:	6011      	str	r1, [r2, #0]
 801bb1e:	d1e0      	bne.n	801bae2 <_free_r+0x22>
 801bb20:	6818      	ldr	r0, [r3, #0]
 801bb22:	685b      	ldr	r3, [r3, #4]
 801bb24:	4401      	add	r1, r0
 801bb26:	6011      	str	r1, [r2, #0]
 801bb28:	6053      	str	r3, [r2, #4]
 801bb2a:	e7da      	b.n	801bae2 <_free_r+0x22>
 801bb2c:	d902      	bls.n	801bb34 <_free_r+0x74>
 801bb2e:	230c      	movs	r3, #12
 801bb30:	602b      	str	r3, [r5, #0]
 801bb32:	e7d6      	b.n	801bae2 <_free_r+0x22>
 801bb34:	6820      	ldr	r0, [r4, #0]
 801bb36:	1821      	adds	r1, r4, r0
 801bb38:	428b      	cmp	r3, r1
 801bb3a:	bf01      	itttt	eq
 801bb3c:	6819      	ldreq	r1, [r3, #0]
 801bb3e:	685b      	ldreq	r3, [r3, #4]
 801bb40:	1809      	addeq	r1, r1, r0
 801bb42:	6021      	streq	r1, [r4, #0]
 801bb44:	6063      	str	r3, [r4, #4]
 801bb46:	6054      	str	r4, [r2, #4]
 801bb48:	e7cb      	b.n	801bae2 <_free_r+0x22>
 801bb4a:	bd38      	pop	{r3, r4, r5, pc}
 801bb4c:	20003dd0 	.word	0x20003dd0

0801bb50 <sbrk_aligned>:
 801bb50:	b570      	push	{r4, r5, r6, lr}
 801bb52:	4e0e      	ldr	r6, [pc, #56]	; (801bb8c <sbrk_aligned+0x3c>)
 801bb54:	460c      	mov	r4, r1
 801bb56:	6831      	ldr	r1, [r6, #0]
 801bb58:	4605      	mov	r5, r0
 801bb5a:	b911      	cbnz	r1, 801bb62 <sbrk_aligned+0x12>
 801bb5c:	f000 f8bc 	bl	801bcd8 <_sbrk_r>
 801bb60:	6030      	str	r0, [r6, #0]
 801bb62:	4621      	mov	r1, r4
 801bb64:	4628      	mov	r0, r5
 801bb66:	f000 f8b7 	bl	801bcd8 <_sbrk_r>
 801bb6a:	1c43      	adds	r3, r0, #1
 801bb6c:	d00a      	beq.n	801bb84 <sbrk_aligned+0x34>
 801bb6e:	1cc4      	adds	r4, r0, #3
 801bb70:	f024 0403 	bic.w	r4, r4, #3
 801bb74:	42a0      	cmp	r0, r4
 801bb76:	d007      	beq.n	801bb88 <sbrk_aligned+0x38>
 801bb78:	1a21      	subs	r1, r4, r0
 801bb7a:	4628      	mov	r0, r5
 801bb7c:	f000 f8ac 	bl	801bcd8 <_sbrk_r>
 801bb80:	3001      	adds	r0, #1
 801bb82:	d101      	bne.n	801bb88 <sbrk_aligned+0x38>
 801bb84:	f04f 34ff 	mov.w	r4, #4294967295
 801bb88:	4620      	mov	r0, r4
 801bb8a:	bd70      	pop	{r4, r5, r6, pc}
 801bb8c:	20003dd4 	.word	0x20003dd4

0801bb90 <_malloc_r>:
 801bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb94:	1ccd      	adds	r5, r1, #3
 801bb96:	f025 0503 	bic.w	r5, r5, #3
 801bb9a:	3508      	adds	r5, #8
 801bb9c:	2d0c      	cmp	r5, #12
 801bb9e:	bf38      	it	cc
 801bba0:	250c      	movcc	r5, #12
 801bba2:	2d00      	cmp	r5, #0
 801bba4:	4607      	mov	r7, r0
 801bba6:	db01      	blt.n	801bbac <_malloc_r+0x1c>
 801bba8:	42a9      	cmp	r1, r5
 801bbaa:	d905      	bls.n	801bbb8 <_malloc_r+0x28>
 801bbac:	230c      	movs	r3, #12
 801bbae:	2600      	movs	r6, #0
 801bbb0:	603b      	str	r3, [r7, #0]
 801bbb2:	4630      	mov	r0, r6
 801bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbb8:	4e2e      	ldr	r6, [pc, #184]	; (801bc74 <_malloc_r+0xe4>)
 801bbba:	f000 f89d 	bl	801bcf8 <__malloc_lock>
 801bbbe:	6833      	ldr	r3, [r6, #0]
 801bbc0:	461c      	mov	r4, r3
 801bbc2:	bb34      	cbnz	r4, 801bc12 <_malloc_r+0x82>
 801bbc4:	4629      	mov	r1, r5
 801bbc6:	4638      	mov	r0, r7
 801bbc8:	f7ff ffc2 	bl	801bb50 <sbrk_aligned>
 801bbcc:	1c43      	adds	r3, r0, #1
 801bbce:	4604      	mov	r4, r0
 801bbd0:	d14d      	bne.n	801bc6e <_malloc_r+0xde>
 801bbd2:	6834      	ldr	r4, [r6, #0]
 801bbd4:	4626      	mov	r6, r4
 801bbd6:	2e00      	cmp	r6, #0
 801bbd8:	d140      	bne.n	801bc5c <_malloc_r+0xcc>
 801bbda:	6823      	ldr	r3, [r4, #0]
 801bbdc:	4631      	mov	r1, r6
 801bbde:	4638      	mov	r0, r7
 801bbe0:	eb04 0803 	add.w	r8, r4, r3
 801bbe4:	f000 f878 	bl	801bcd8 <_sbrk_r>
 801bbe8:	4580      	cmp	r8, r0
 801bbea:	d13a      	bne.n	801bc62 <_malloc_r+0xd2>
 801bbec:	6821      	ldr	r1, [r4, #0]
 801bbee:	3503      	adds	r5, #3
 801bbf0:	1a6d      	subs	r5, r5, r1
 801bbf2:	f025 0503 	bic.w	r5, r5, #3
 801bbf6:	3508      	adds	r5, #8
 801bbf8:	2d0c      	cmp	r5, #12
 801bbfa:	bf38      	it	cc
 801bbfc:	250c      	movcc	r5, #12
 801bbfe:	4638      	mov	r0, r7
 801bc00:	4629      	mov	r1, r5
 801bc02:	f7ff ffa5 	bl	801bb50 <sbrk_aligned>
 801bc06:	3001      	adds	r0, #1
 801bc08:	d02b      	beq.n	801bc62 <_malloc_r+0xd2>
 801bc0a:	6823      	ldr	r3, [r4, #0]
 801bc0c:	442b      	add	r3, r5
 801bc0e:	6023      	str	r3, [r4, #0]
 801bc10:	e00e      	b.n	801bc30 <_malloc_r+0xa0>
 801bc12:	6822      	ldr	r2, [r4, #0]
 801bc14:	1b52      	subs	r2, r2, r5
 801bc16:	d41e      	bmi.n	801bc56 <_malloc_r+0xc6>
 801bc18:	2a0b      	cmp	r2, #11
 801bc1a:	d916      	bls.n	801bc4a <_malloc_r+0xba>
 801bc1c:	1961      	adds	r1, r4, r5
 801bc1e:	42a3      	cmp	r3, r4
 801bc20:	6025      	str	r5, [r4, #0]
 801bc22:	bf18      	it	ne
 801bc24:	6059      	strne	r1, [r3, #4]
 801bc26:	6863      	ldr	r3, [r4, #4]
 801bc28:	bf08      	it	eq
 801bc2a:	6031      	streq	r1, [r6, #0]
 801bc2c:	5162      	str	r2, [r4, r5]
 801bc2e:	604b      	str	r3, [r1, #4]
 801bc30:	4638      	mov	r0, r7
 801bc32:	f104 060b 	add.w	r6, r4, #11
 801bc36:	f000 f865 	bl	801bd04 <__malloc_unlock>
 801bc3a:	f026 0607 	bic.w	r6, r6, #7
 801bc3e:	1d23      	adds	r3, r4, #4
 801bc40:	1af2      	subs	r2, r6, r3
 801bc42:	d0b6      	beq.n	801bbb2 <_malloc_r+0x22>
 801bc44:	1b9b      	subs	r3, r3, r6
 801bc46:	50a3      	str	r3, [r4, r2]
 801bc48:	e7b3      	b.n	801bbb2 <_malloc_r+0x22>
 801bc4a:	6862      	ldr	r2, [r4, #4]
 801bc4c:	42a3      	cmp	r3, r4
 801bc4e:	bf0c      	ite	eq
 801bc50:	6032      	streq	r2, [r6, #0]
 801bc52:	605a      	strne	r2, [r3, #4]
 801bc54:	e7ec      	b.n	801bc30 <_malloc_r+0xa0>
 801bc56:	4623      	mov	r3, r4
 801bc58:	6864      	ldr	r4, [r4, #4]
 801bc5a:	e7b2      	b.n	801bbc2 <_malloc_r+0x32>
 801bc5c:	4634      	mov	r4, r6
 801bc5e:	6876      	ldr	r6, [r6, #4]
 801bc60:	e7b9      	b.n	801bbd6 <_malloc_r+0x46>
 801bc62:	230c      	movs	r3, #12
 801bc64:	4638      	mov	r0, r7
 801bc66:	603b      	str	r3, [r7, #0]
 801bc68:	f000 f84c 	bl	801bd04 <__malloc_unlock>
 801bc6c:	e7a1      	b.n	801bbb2 <_malloc_r+0x22>
 801bc6e:	6025      	str	r5, [r4, #0]
 801bc70:	e7de      	b.n	801bc30 <_malloc_r+0xa0>
 801bc72:	bf00      	nop
 801bc74:	20003dd0 	.word	0x20003dd0

0801bc78 <_realloc_r>:
 801bc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc7c:	4680      	mov	r8, r0
 801bc7e:	4614      	mov	r4, r2
 801bc80:	460e      	mov	r6, r1
 801bc82:	b921      	cbnz	r1, 801bc8e <_realloc_r+0x16>
 801bc84:	4611      	mov	r1, r2
 801bc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc8a:	f7ff bf81 	b.w	801bb90 <_malloc_r>
 801bc8e:	b92a      	cbnz	r2, 801bc9c <_realloc_r+0x24>
 801bc90:	f7ff ff16 	bl	801bac0 <_free_r>
 801bc94:	4625      	mov	r5, r4
 801bc96:	4628      	mov	r0, r5
 801bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc9c:	f000 f838 	bl	801bd10 <_malloc_usable_size_r>
 801bca0:	4284      	cmp	r4, r0
 801bca2:	4607      	mov	r7, r0
 801bca4:	d802      	bhi.n	801bcac <_realloc_r+0x34>
 801bca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bcaa:	d812      	bhi.n	801bcd2 <_realloc_r+0x5a>
 801bcac:	4621      	mov	r1, r4
 801bcae:	4640      	mov	r0, r8
 801bcb0:	f7ff ff6e 	bl	801bb90 <_malloc_r>
 801bcb4:	4605      	mov	r5, r0
 801bcb6:	2800      	cmp	r0, #0
 801bcb8:	d0ed      	beq.n	801bc96 <_realloc_r+0x1e>
 801bcba:	42bc      	cmp	r4, r7
 801bcbc:	4622      	mov	r2, r4
 801bcbe:	4631      	mov	r1, r6
 801bcc0:	bf28      	it	cs
 801bcc2:	463a      	movcs	r2, r7
 801bcc4:	f7ff fb92 	bl	801b3ec <memcpy>
 801bcc8:	4631      	mov	r1, r6
 801bcca:	4640      	mov	r0, r8
 801bccc:	f7ff fef8 	bl	801bac0 <_free_r>
 801bcd0:	e7e1      	b.n	801bc96 <_realloc_r+0x1e>
 801bcd2:	4635      	mov	r5, r6
 801bcd4:	e7df      	b.n	801bc96 <_realloc_r+0x1e>
	...

0801bcd8 <_sbrk_r>:
 801bcd8:	b538      	push	{r3, r4, r5, lr}
 801bcda:	2300      	movs	r3, #0
 801bcdc:	4d05      	ldr	r5, [pc, #20]	; (801bcf4 <_sbrk_r+0x1c>)
 801bcde:	4604      	mov	r4, r0
 801bce0:	4608      	mov	r0, r1
 801bce2:	602b      	str	r3, [r5, #0]
 801bce4:	f7e7 faf4 	bl	80032d0 <_sbrk>
 801bce8:	1c43      	adds	r3, r0, #1
 801bcea:	d102      	bne.n	801bcf2 <_sbrk_r+0x1a>
 801bcec:	682b      	ldr	r3, [r5, #0]
 801bcee:	b103      	cbz	r3, 801bcf2 <_sbrk_r+0x1a>
 801bcf0:	6023      	str	r3, [r4, #0]
 801bcf2:	bd38      	pop	{r3, r4, r5, pc}
 801bcf4:	20003dd8 	.word	0x20003dd8

0801bcf8 <__malloc_lock>:
 801bcf8:	4801      	ldr	r0, [pc, #4]	; (801bd00 <__malloc_lock+0x8>)
 801bcfa:	f000 b811 	b.w	801bd20 <__retarget_lock_acquire_recursive>
 801bcfe:	bf00      	nop
 801bd00:	20003ddc 	.word	0x20003ddc

0801bd04 <__malloc_unlock>:
 801bd04:	4801      	ldr	r0, [pc, #4]	; (801bd0c <__malloc_unlock+0x8>)
 801bd06:	f000 b80c 	b.w	801bd22 <__retarget_lock_release_recursive>
 801bd0a:	bf00      	nop
 801bd0c:	20003ddc 	.word	0x20003ddc

0801bd10 <_malloc_usable_size_r>:
 801bd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd14:	1f18      	subs	r0, r3, #4
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	bfbc      	itt	lt
 801bd1a:	580b      	ldrlt	r3, [r1, r0]
 801bd1c:	18c0      	addlt	r0, r0, r3
 801bd1e:	4770      	bx	lr

0801bd20 <__retarget_lock_acquire_recursive>:
 801bd20:	4770      	bx	lr

0801bd22 <__retarget_lock_release_recursive>:
 801bd22:	4770      	bx	lr

0801bd24 <_init>:
 801bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd26:	bf00      	nop
 801bd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd2a:	bc08      	pop	{r3}
 801bd2c:	469e      	mov	lr, r3
 801bd2e:	4770      	bx	lr

0801bd30 <_fini>:
 801bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd32:	bf00      	nop
 801bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd36:	bc08      	pop	{r3}
 801bd38:	469e      	mov	lr, r3
 801bd3a:	4770      	bx	lr
