
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002026c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  080203b0  080203b0  000303b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802219c  0802219c  000402fc  2**0
                  CONTENTS
  4 .ARM          00000008  0802219c  0802219c  0003219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080221a4  080221a4  000402fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080221a4  080221a4  000321a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080221a8  080221a8  000321a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  080221ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d40  200002fc  080224a8  000402fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000403c  080224a8  0004403c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000402fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036935  00000000  00000000  00040325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081df  00000000  00000000  00076c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002648  00000000  00000000  0007ee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022e8  00000000  00000000  00081488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dad  00000000  00000000  00083770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c997  00000000  00000000  000a951d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8485  00000000  00000000  000e5eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae78  00000000  00000000  0019e38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002fc 	.word	0x200002fc
 800015c:	00000000 	.word	0x00000000
 8000160:	08020394 	.word	0x08020394

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000300 	.word	0x20000300
 800017c:	08020394 	.word	0x08020394

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b976 	b.w	8000e9c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4688      	mov	r8, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14d      	bne.n	8000c74 <__udivmoddi4+0xac>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d968      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b152      	cbz	r2, 8000bfa <__udivmoddi4+0x32>
 8000be4:	fa01 f302 	lsl.w	r3, r1, r2
 8000be8:	f1c2 0120 	rsb	r1, r2, #32
 8000bec:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	ea41 0803 	orr.w	r8, r1, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bfe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	fb01 8817 	mls	r8, r1, r7, r8
 8000c0a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x66>
 8000c18:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c20:	f080 811e 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f240 811b 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c2a:	3f02      	subs	r7, #2
 8000c2c:	4463      	add	r3, ip
 8000c2e:	1a1b      	subs	r3, r3, r0
 8000c30:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c34:	fb01 3310 	mls	r3, r1, r0, r3
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8109 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8106 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa8>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	40d4      	lsrs	r4, r2
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	f000 80ee 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e9c6 0500 	strd	r0, r5, [r6]
 8000c84:	4608      	mov	r0, r1
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80fc 	bhi.w	8000e94 <__udivmoddi4+0x2cc>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb65 0303 	sbc.w	r3, r5, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d0e2      	beq.n	8000c70 <__udivmoddi4+0xa8>
 8000caa:	e9c6 4800 	strd	r4, r8, [r6]
 8000cae:	e7df      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8091 	bne.w	8000de0 <__udivmoddi4+0x218>
 8000cbe:	eba1 000c 	sub.w	r0, r1, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc8:	fa1f fe8c 	uxth.w	lr, ip
 8000ccc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cd0:	fb07 0013 	mls	r0, r7, r3, r0
 8000cd4:	0c25      	lsrs	r5, r4, #16
 8000cd6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	42a8      	cmp	r0, r5
 8000cee:	f200 80ce 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a2d      	subs	r5, r5, r0
 8000cf6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cfa:	fb07 5510 	mls	r5, r7, r0, r5
 8000cfe:	fb0e fe00 	mul.w	lr, lr, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80b6 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79e      	b.n	8000c66 <__udivmoddi4+0x9e>
 8000d28:	f1c1 0720 	rsb	r7, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fbba f8f9 	udiv	r8, sl, r9
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d4a:	408d      	lsls	r5, r1
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	431d      	orrs	r5, r3
 8000d52:	fa00 f301 	lsl.w	r3, r0, r1
 8000d56:	fb08 f00e 	mul.w	r0, r8, lr
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d60:	42a0      	cmp	r0, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4464      	add	r4, ip
 8000d80:	1a24      	subs	r4, r4, r0
 8000d82:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d86:	fb09 4410 	mls	r4, r9, r0, r4
 8000d8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9502 	umull	r9, r5, r0, r2
 8000db2:	eba4 040e 	sub.w	r4, r4, lr
 8000db6:	42ac      	cmp	r4, r5
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46ae      	mov	lr, r5
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2d0>
 8000dc4:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc8:	eb64 040e 	sbc.w	r4, r4, lr
 8000dcc:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd0:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	f1c2 0120 	rsb	r1, r2, #32
 8000de8:	fa25 f301 	lsr.w	r3, r5, r1
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa20 f101 	lsr.w	r1, r0, r1
 8000df4:	4095      	lsls	r5, r2
 8000df6:	430d      	orrs	r5, r1
 8000df8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dfc:	fb07 3311 	mls	r3, r7, r1, r3
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	0c28      	lsrs	r0, r5, #16
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e0e:	4283      	cmp	r3, r0
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0000 	adds.w	r0, ip, r0
 8000e1a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	4283      	cmp	r3, r0
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3902      	subs	r1, #2
 8000e26:	4460      	add	r0, ip
 8000e28:	1ac0      	subs	r0, r0, r3
 8000e2a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e2e:	fb07 0013 	mls	r0, r7, r3, r0
 8000e32:	b2ad      	uxth	r5, r5
 8000e34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e38:	fb03 f00e 	mul.w	r0, r3, lr
 8000e3c:	42a8      	cmp	r0, r5
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0505 	adds.w	r5, ip, r5
 8000e44:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	42a8      	cmp	r0, r5
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4465      	add	r5, ip
 8000e52:	1a28      	subs	r0, r5, r0
 8000e54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e707      	b.n	8000c70 <__udivmoddi4+0xa8>
 8000e60:	462f      	mov	r7, r5
 8000e62:	e6e4      	b.n	8000c2e <__udivmoddi4+0x66>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f9      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4643      	mov	r3, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4641      	mov	r1, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	4464      	add	r4, ip
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	e747      	b.n	8000d1e <__udivmoddi4+0x156>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4465      	add	r5, ip
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e706      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa8>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <MX_ADC_Init+0xd0>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ece:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f18:	f004 fc0c 	bl	8005734 <HAL_ADC_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC_Init+0x86>
  {
    Error_Handler();
 8000f22:	f000 fd57 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f38:	f004 fdec 	bl	8005b14 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f42:	f000 fd47 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f46:	2310      	movs	r3, #16
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC_Init+0xcc>)
 8000f54:	f004 fdde 	bl	8005b14 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 8000f5e:	f000 fd39 	bl	80019d4 <Error_Handler>
  }

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000318 	.word	0x20000318
 8000f70:	40012400 	.word	0x40012400

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a29      	ldr	r2, [pc, #164]	; (8001038 <HAL_ADC_MspInit+0xc4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d14b      	bne.n	800102e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_ADC_MspInit+0xc8>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	; (8001040 <HAL_ADC_MspInit+0xcc>)
 8000fda:	f005 faed 	bl	80065b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_ADC_MspInit+0xd4>)
 8000fe2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8000ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8001008:	2220      	movs	r2, #32
 800100a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8001014:	f005 f8d0 	bl	80061b8 <HAL_DMA_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800101e:	f000 fcd9 	bl	80019d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 8001026:	645a      	str	r2, [r3, #68]	; 0x44
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_ADC_MspInit+0xd0>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012400 	.word	0x40012400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	2000036c 	.word	0x2000036c
 8001048:	40026008 	.word	0x40026008
 800104c:	00000000 	.word	0x00000000

08001050 <SYS_GetMCUTemperature>:
}

/* USER CODE BEGIN 1 */

int16_t SYS_GetMCUTemperature (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    uint16_t calibrate_value = (uint16_t)(3.3 * ADC_Value[1] / 3.0);
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SYS_GetMCUTemperature+0x80>)
 8001058:	885b      	ldrh	r3, [r3, #2]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f9ea 	bl	8000434 <__aeabi_i2d>
 8001060:	a319      	add	r3, pc, #100	; (adr r3, 80010c8 <SYS_GetMCUTemperature+0x78>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff fa4f 	bl	8000508 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <SYS_GetMCUTemperature+0x84>)
 8001078:	f7ff fb70 	bl	800075c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd18 	bl	8000ab8 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	80fb      	strh	r3, [r7, #6]

   return (int16_t)((80*100/(TS_CAL2 - TS_CAL1)*(calibrate_value - TS_CAL1))/100 + 30);
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <SYS_GetMCUTemperature+0x88>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <SYS_GetMCUTemperature+0x8c>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800109c:	fb92 f3f3 	sdiv	r3, r2, r3
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <SYS_GetMCUTemperature+0x8c>)
 80010a4:	8809      	ldrh	r1, [r1, #0]
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <SYS_GetMCUTemperature+0x90>)
 80010ae:	fb82 1203 	smull	r1, r2, r2, r3
 80010b2:	1152      	asrs	r2, r2, #5
 80010b4:	17db      	asrs	r3, r3, #31
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	331e      	adds	r3, #30
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21b      	sxth	r3, r3
   //return (int16_t)((80/(TS_CAL2 - TS_CAL1)*(calibrate_value - TS_CAL1)) + 30);
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	66666666 	.word	0x66666666
 80010cc:	400a6666 	.word	0x400a6666
 80010d0:	20000610 	.word	0x20000610
 80010d4:	40080000 	.word	0x40080000
 80010d8:	1ff800fe 	.word	0x1ff800fe
 80010dc:	1ff800fa 	.word	0x1ff800fa
 80010e0:	51eb851f 	.word	0x51eb851f
 80010e4:	00000000 	.word	0x00000000

080010e8 <ADC_GetTrimmerVoltage>:

float ADC_GetTrimmerVoltage (void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	return ((3.3 * ADC_Value[0])/ADC_RESOLUTION);
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <ADC_GetTrimmerVoltage+0x50>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f99f 	bl	8000434 <__aeabi_i2d>
 80010f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001128 <ADC_GetTrimmerVoltage+0x40>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa04 	bl	8000508 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a309      	add	r3, pc, #36	; (adr r3, 8001130 <ADC_GetTrimmerVoltage+0x48>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fb25 	bl	800075c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fced 	bl	8000af8 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	66666666 	.word	0x66666666
 800112c:	400a6666 	.word	0x400a6666
 8001130:	00000000 	.word	0x00000000
 8001134:	40affe00 	.word	0x40affe00
 8001138:	20000610 	.word	0x20000610

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_DMA_Init+0x38>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <MX_DMA_Init+0x38>)
 8001148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_DMA_Init+0x38>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	200b      	movs	r0, #11
 8001160:	f004 fff3 	bl	800614a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001164:	200b      	movs	r0, #11
 8001166:	f005 f80c 	bl	8006182 <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <MX_GPIO_Init+0x114>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a3e      	ldr	r2, [pc, #248]	; (800128c <MX_GPIO_Init+0x114>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <MX_GPIO_Init+0x114>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <MX_GPIO_Init+0x114>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a38      	ldr	r2, [pc, #224]	; (800128c <MX_GPIO_Init+0x114>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <MX_GPIO_Init+0x114>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <MX_GPIO_Init+0x114>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a32      	ldr	r2, [pc, #200]	; (800128c <MX_GPIO_Init+0x114>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <MX_GPIO_Init+0x114>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0x114>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <MX_GPIO_Init+0x114>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0x114>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_GPIO_Init+0x118>)
 80011f6:	f005 fb86 	bl	8006906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2171      	movs	r1, #113	; 0x71
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <MX_GPIO_Init+0x11c>)
 8001200:	f005 fb81 	bl	8006906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800120a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	481f      	ldr	r0, [pc, #124]	; (8001298 <MX_GPIO_Init+0x120>)
 800121c:	f005 f9cc 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001224:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4816      	ldr	r0, [pc, #88]	; (8001290 <MX_GPIO_Init+0x118>)
 8001236:	f005 f9bf 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_FIELD_Pin;
 800123a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x118>)
 8001254:	f005 f9b0 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8001258:	2371      	movs	r3, #113	; 0x71
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_GPIO_Init+0x11c>)
 8001270:	f005 f9a2 	bl	80065b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2006      	movs	r0, #6
 800127a:	f004 ff66 	bl	800614a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800127e:	2006      	movs	r0, #6
 8001280:	f004 ff7f 	bl	8006182 <HAL_NVIC_EnableIRQ>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800

0800129c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x40 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f023 030f 	bic.w	r3, r3, #15
 80012ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f043 030c 	orr.w	r3, r3, #12
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	f043 030c 	orr.w	r3, r3, #12
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2304      	movs	r3, #4
 80012e6:	2140      	movs	r1, #64	; 0x40
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <lcd_send_cmd+0x5c>)
 80012ea:	f005 fca3 	bl	8006c34 <HAL_I2C_Master_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200003b0 	.word	0x200003b0

080012fc <lcd_send_data>:

void lcd_send_data (char data)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f023 030f 	bic.w	r3, r3, #15
 800130c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	f043 030d 	orr.w	r3, r3, #13
 800131a:	b2db      	uxtb	r3, r3
 800131c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f043 0309 	orr.w	r3, r3, #9
 8001324:	b2db      	uxtb	r3, r3
 8001326:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	f043 030d 	orr.w	r3, r3, #13
 800132e:	b2db      	uxtb	r3, r3
 8001330:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	f043 0309 	orr.w	r3, r3, #9
 8001338:	b2db      	uxtb	r3, r3
 800133a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2304      	movs	r3, #4
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <lcd_send_data+0x5c>)
 800134a:	f005 fc73 	bl	8006c34 <HAL_I2C_Master_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003b0 	.word	0x200003b0

0800135c <lcd_clear>:

void lcd_clear (void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001362:	2080      	movs	r0, #128	; 0x80
 8001364:	f7ff ff9a 	bl	800129c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	e005      	b.n	800137a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800136e:	2020      	movs	r0, #32
 8001370:	f7ff ffc4 	bl	80012fc <lcd_send_data>
	for (int i=0; i<70; i++)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b45      	cmp	r3, #69	; 0x45
 800137e:	ddf6      	ble.n	800136e <lcd_clear+0x12>
	}
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
    switch (row)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <lcd_put_cur+0x18>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <lcd_put_cur+0x22>
 80013a0:	e009      	b.n	80013b6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	603b      	str	r3, [r7, #0]
            break;
 80013aa:	e004      	b.n	80013b6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013b2:	603b      	str	r3, [r7, #0]
            break;
 80013b4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff6e 	bl	800129c <lcd_send_cmd>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <lcd_init>:


void lcd_init (void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80013cc:	2032      	movs	r0, #50	; 0x32
 80013ce:	f004 f98f 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80013d2:	2030      	movs	r0, #48	; 0x30
 80013d4:	f7ff ff62 	bl	800129c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80013d8:	2005      	movs	r0, #5
 80013da:	f004 f989 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80013de:	2030      	movs	r0, #48	; 0x30
 80013e0:	f7ff ff5c 	bl	800129c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80013e4:	2001      	movs	r0, #1
 80013e6:	f004 f983 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80013ea:	2030      	movs	r0, #48	; 0x30
 80013ec:	f7ff ff56 	bl	800129c <lcd_send_cmd>
	HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f004 f97d 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80013f6:	2020      	movs	r0, #32
 80013f8:	f7ff ff50 	bl	800129c <lcd_send_cmd>
	HAL_Delay(10);
 80013fc:	200a      	movs	r0, #10
 80013fe:	f004 f977 	bl	80056f0 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001402:	2028      	movs	r0, #40	; 0x28
 8001404:	f7ff ff4a 	bl	800129c <lcd_send_cmd>
	HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f004 f971 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800140e:	2008      	movs	r0, #8
 8001410:	f7ff ff44 	bl	800129c <lcd_send_cmd>
	HAL_Delay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f004 f96b 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff ff3e 	bl	800129c <lcd_send_cmd>
	HAL_Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f004 f965 	bl	80056f0 <HAL_Delay>
	HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f004 f962 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800142c:	2006      	movs	r0, #6
 800142e:	f7ff ff35 	bl	800129c <lcd_send_cmd>
	HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f004 f95c 	bl	80056f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001438:	200c      	movs	r0, #12
 800143a:	f7ff ff2f 	bl	800129c <lcd_send_cmd>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800144a:	e006      	b.n	800145a <lcd_send_string+0x18>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff51 	bl	80012fc <lcd_send_data>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f4      	bne.n	800144c <lcd_send_string+0xa>
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f005 fa7f 	bl	80069ac <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f000 fa8e 	bl	80019d4 <Error_Handler>
  }

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200003b0 	.word	0x200003b0
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_I2C_MspInit+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d138      	bne.n	800155c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001514:	2304      	movs	r3, #4
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <HAL_I2C_MspInit+0xa4>)
 8001520:	f005 f84a 	bl	80065b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6253      	str	r3, [r2, #36]	; 0x24
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_I2C_MspInit+0xa0>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	201f      	movs	r0, #31
 8001542:	f004 fe02 	bl	800614a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001546:	201f      	movs	r0, #31
 8001548:	f004 fe1b 	bl	8006182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2020      	movs	r0, #32
 8001552:	f004 fdfa 	bl	800614a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001556:	2020      	movs	r0, #32
 8001558:	f004 fe13 	bl	8006182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005400 	.word	0x40005400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400

08001570 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 8001578:	4a03      	ldr	r2, [pc, #12]	; (8001588 <logUsartInit+0x18>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000608 	.word	0x20000608

0800158c <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <logUsartTx+0x34>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 80015a0:	2326      	movs	r3, #38	; 0x26
 80015a2:	e008      	b.n	80015b6 <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <logUsartTx+0x34>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f008 fef3 	bl	800a39a <HAL_UART_Transmit>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000608 	.word	0x20000608

080015c4 <logUsart>:

int logUsart(const char* format, ...)
{
 80015c4:	b40f      	push	{r0, r1, r2, r3}
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b0c2      	sub	sp, #264	; 0x108
 80015ca:	af00      	add	r7, sp, #0
  #if (USE_LOGGER == LOGGER_ON)
  {  
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 80015cc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80015d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80015d4:	4638      	mov	r0, r7
 80015d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015da:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	f01c fc95 	bl	801df10 <vsniprintf>
 80015e6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 80015ea:	463b      	mov	r3, r7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fdc7 	bl	8000180 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	463b      	mov	r3, r7
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ffc6 	bl	800158c <logUsartTx>
    return cnt;
 8001600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8001604:	4618      	mov	r0, r3
 8001606:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001610:	b004      	add	sp, #16
 8001612:	4770      	bx	lr

08001614 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <hex2Str+0xe8>)
 8001624:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <hex2Str+0xec>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	4a35      	ldr	r2, [pc, #212]	; (8001704 <hex2Str+0xf0>)
 800162e:	4413      	add	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <hex2Str+0xec>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <hex2Str+0x36>
    {
      pout[0] = 0;     
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e042      	b.n	80016d0 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b40      	cmp	r3, #64	; 0x40
 800164e:	bf28      	it	cs
 8001650:	2340      	movcs	r3, #64	; 0x40
 8001652:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8001654:	e01c      	b.n	8001690 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	441a      	add	r2, r3
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	61b9      	str	r1, [r7, #24]
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	61fa      	str	r2, [r7, #28]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	441a      	add	r2, r3
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	61b9      	str	r1, [r7, #24]
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	3301      	adds	r3, #1
 800168e:	75fb      	strb	r3, [r7, #23]
 8001690:	7dfa      	ldrb	r2, [r7, #23]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	429a      	cmp	r2, r3
 8001698:	d3dd      	bcc.n	8001656 <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	441a      	add	r2, r3
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	61b9      	str	r1, [r7, #24]
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	441a      	add	r2, r3
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <hex2Str+0xec>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <hex2Str+0xec>)
 80016da:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <hex2Str+0xec>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <hex2Str+0xec>)
 80016e8:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	01db      	lsls	r3, r3, #7
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <hex2Str+0xf0>)
 80016f0:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	080203b0 	.word	0x080203b0
 8001700:	20000604 	.word	0x20000604
 8001704:	20000404 	.word	0x20000404

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170e:	f003 ff81 	bl	8005614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001712:	f000 f8c5 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001716:	f7ff fd2f 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 800171a:	f7ff fd0f 	bl	800113c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800171e:	f002 fd79 	bl	8004214 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001722:	f002 fad5 	bl	8003cd0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001726:	f002 fd4b 	bl	80041c0 <MX_UART4_Init>
  MX_I2C1_Init();
 800172a:	f7ff fe9f 	bl	800146c <MX_I2C1_Init>
  MX_ADC_Init();
 800172e:	f7ff fbb7 	bl	8000ea0 <MX_ADC_Init>
  MX_TIM2_Init();
 8001732:	f002 fcdd 	bl	80040f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001736:	484c      	ldr	r0, [pc, #304]	; (8001868 <main+0x160>)
 8001738:	f008 fb70 	bl	8009e1c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc,ADC_Value, 2);
 800173c:	2202      	movs	r2, #2
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <main+0x164>)
 8001740:	484b      	ldr	r0, [pc, #300]	; (8001870 <main+0x168>)
 8001742:	f004 f93d 	bl	80059c0 <HAL_ADC_Start_DMA>
  /* Initialize driver*/
  spiInit(&hspi1);
 8001746:	484b      	ldr	r0, [pc, #300]	; (8001874 <main+0x16c>)
 8001748:	f002 fb3c 	bl	8003dc4 <spiInit>

  /* Initialize LCD*/
  lcd_init ();
 800174c:	f7ff fe3c 	bl	80013c8 <lcd_init>
  lcd_put_cur(0, 0);
 8001750:	2100      	movs	r1, #0
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fe19 	bl	800138a <lcd_put_cur>
  lcd_send_string(strLcdLine1);
 8001758:	4847      	ldr	r0, [pc, #284]	; (8001878 <main+0x170>)
 800175a:	f7ff fe72 	bl	8001442 <lcd_send_string>
  lcd_put_cur(1, 0);
 800175e:	2100      	movs	r1, #0
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fe12 	bl	800138a <lcd_put_cur>
  lcd_send_string(strLcdLine2);
 8001766:	4845      	ldr	r0, [pc, #276]	; (800187c <main+0x174>)
 8001768:	f7ff fe6b 	bl	8001442 <lcd_send_string>

  /* Initialize log module */
  logUsartInit(&huart2);
 800176c:	4844      	ldr	r0, [pc, #272]	; (8001880 <main+0x178>)
 800176e:	f7ff feff 	bl	8001570 <logUsartInit>

  platformLog("Welcome to the NFC enabler application\r\n");
 8001772:	4844      	ldr	r0, [pc, #272]	; (8001884 <main+0x17c>)
 8001774:	f7ff ff26 	bl	80015c4 <logUsart>


  if( !demoIni() )
 8001778:	f000 f992 	bl	8001aa0 <demoIni>
 800177c:	4603      	mov	r3, r0
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <main+0xb8>
    {
      /*
      * in case the rfal initalization failed signal it by flashing all LED
      * and stoping all operations
      */
      platformLog("Initialization failed..\r\n");
 8001788:	483f      	ldr	r0, [pc, #252]	; (8001888 <main+0x180>)
 800178a:	f7ff ff1b 	bl	80015c4 <logUsart>
      while(1)
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800178e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001792:	483e      	ldr	r0, [pc, #248]	; (800188c <main+0x184>)
 8001794:	f005 f8cf 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001798:	2101      	movs	r1, #1
 800179a:	483d      	ldr	r0, [pc, #244]	; (8001890 <main+0x188>)
 800179c:	f005 f8cb 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80017a0:	2110      	movs	r1, #16
 80017a2:	483a      	ldr	r0, [pc, #232]	; (800188c <main+0x184>)
 80017a4:	f005 f8c7 	bl	8006936 <HAL_GPIO_TogglePin>
        //platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80017a8:	2110      	movs	r1, #16
 80017aa:	4839      	ldr	r0, [pc, #228]	; (8001890 <main+0x188>)
 80017ac:	f005 f8c3 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80017b0:	2120      	movs	r1, #32
 80017b2:	4837      	ldr	r0, [pc, #220]	; (8001890 <main+0x188>)
 80017b4:	f005 f8bf 	bl	8006936 <HAL_GPIO_TogglePin>
        platformDelay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f003 ff99 	bl	80056f0 <HAL_Delay>
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80017be:	e7e6      	b.n	800178e <main+0x86>
      }
    }
    else
    {
      platformLog("Initialization succeeded..\r\n");
 80017c0:	4834      	ldr	r0, [pc, #208]	; (8001894 <main+0x18c>)
 80017c2:	f7ff feff 	bl	80015c4 <logUsart>
      for (int i = 0; i < 6; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	e01a      	b.n	8001802 <main+0xfa>
      {
        platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	482e      	ldr	r0, [pc, #184]	; (800188c <main+0x184>)
 80017d2:	f005 f8b0 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80017d6:	2101      	movs	r1, #1
 80017d8:	482d      	ldr	r0, [pc, #180]	; (8001890 <main+0x188>)
 80017da:	f005 f8ac 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80017de:	2110      	movs	r1, #16
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <main+0x184>)
 80017e2:	f005 f8a8 	bl	8006936 <HAL_GPIO_TogglePin>
        //platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
        platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80017e6:	2110      	movs	r1, #16
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <main+0x188>)
 80017ea:	f005 f8a4 	bl	8006936 <HAL_GPIO_TogglePin>
        platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80017ee:	2120      	movs	r1, #32
 80017f0:	4827      	ldr	r0, [pc, #156]	; (8001890 <main+0x188>)
 80017f2:	f005 f8a0 	bl	8006936 <HAL_GPIO_TogglePin>
        platformDelay(200);
 80017f6:	20c8      	movs	r0, #200	; 0xc8
 80017f8:	f003 ff7a 	bl	80056f0 <HAL_Delay>
      for (int i = 0; i < 6; i++)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b05      	cmp	r3, #5
 8001806:	dde1      	ble.n	80017cc <main+0xc4>
      }

      platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001808:	2200      	movs	r2, #0
 800180a:	2101      	movs	r1, #1
 800180c:	4820      	ldr	r0, [pc, #128]	; (8001890 <main+0x188>)
 800180e:	f005 f87a 	bl	8006906 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001812:	2200      	movs	r2, #0
 8001814:	2110      	movs	r1, #16
 8001816:	481d      	ldr	r0, [pc, #116]	; (800188c <main+0x184>)
 8001818:	f005 f875 	bl	8006906 <HAL_GPIO_WritePin>
      //platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
      platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800181c:	2200      	movs	r2, #0
 800181e:	2110      	movs	r1, #16
 8001820:	481b      	ldr	r0, [pc, #108]	; (8001890 <main+0x188>)
 8001822:	f005 f870 	bl	8006906 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	4819      	ldr	r0, [pc, #100]	; (8001890 <main+0x188>)
 800182c:	f005 f86b 	bl	8006906 <HAL_GPIO_WritePin>
      platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <main+0x184>)
 8001838:	f005 f865 	bl	8006906 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 /* Run Demo Application */
	 demoCycle();
 800183c:	f000 f98a 	bl	8001b54 <demoCycle>

	 printf("Temperature : %d\n\r", SYS_GetMCUTemperature());
 8001840:	f7ff fc06 	bl	8001050 <SYS_GetMCUTemperature>
 8001844:	4603      	mov	r3, r0
 8001846:	4619      	mov	r1, r3
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <main+0x190>)
 800184a:	f01c fafd 	bl	801de48 <iprintf>
	 printf("Voltage : %.3f\n\r", ADC_GetTrimmerVoltage());
 800184e:	f7ff fc4b 	bl	80010e8 <ADC_GetTrimmerVoltage>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fdff 	bl	8000458 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <main+0x194>)
 8001860:	f01c faf2 	bl	801de48 <iprintf>
	 demoCycle();
 8001864:	e7ea      	b.n	800183c <main+0x134>
 8001866:	bf00      	nop
 8001868:	200032bc 	.word	0x200032bc
 800186c:	20000610 	.word	0x20000610
 8001870:	20000318 	.word	0x20000318
 8001874:	20003260 	.word	0x20003260
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20003340 	.word	0x20003340
 8001884:	080203c4 	.word	0x080203c4
 8001888:	080203f0 	.word	0x080203f0
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	0802040c 	.word	0x0802040c
 8001898:	0802042c 	.word	0x0802042c
 800189c:	08020440 	.word	0x08020440

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b092      	sub	sp, #72	; 0x48
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2234      	movs	r2, #52	; 0x34
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f01b fe62 	bl	801d578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <SystemClock_Config+0x98>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <SystemClock_Config+0x98>)
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d2:	2302      	movs	r3, #2
 80018d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018da:	2310      	movs	r3, #16
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80018e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 f964 	bl	8008bc4 <HAL_RCC_OscConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001902:	f000 f867 	bl	80019d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001906:	230f      	movs	r3, #15
 8001908:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190a:	2303      	movs	r3, #3
 800190c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f007 fc80 	bl	8009224 <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800192a:	f000 f853 	bl	80019d4 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3748      	adds	r7, #72	; 0x48
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000

0800193c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001944:	1d39      	adds	r1, r7, #4
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	2201      	movs	r2, #1
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <__io_putchar+0x20>)
 800194e:	f008 fd24 	bl	800a39a <HAL_UART_Transmit>
    return ch;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20003340 	.word	0x20003340

08001960 <ringbell>:

void ringbell(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
	uint8_t Track2 = 0x11;
 8001966:	2311      	movs	r3, #17
 8001968:	73fb      	strb	r3, [r7, #15]
	uint8_t volume = 0x1E;
 800196a:	231e      	movs	r3, #30
 800196c:	73bb      	strb	r3, [r7, #14]
	uint8_t play2[6] = {0xAA,0x07,0x02,0x00,Track2,Track2+0xB3};
 800196e:	23aa      	movs	r3, #170	; 0xaa
 8001970:	723b      	strb	r3, [r7, #8]
 8001972:	2307      	movs	r3, #7
 8001974:	727b      	strb	r3, [r7, #9]
 8001976:	2302      	movs	r3, #2
 8001978:	72bb      	strb	r3, [r7, #10]
 800197a:	2300      	movs	r3, #0
 800197c:	72fb      	strb	r3, [r7, #11]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	733b      	strb	r3, [r7, #12]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3b4d      	subs	r3, #77	; 0x4d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	737b      	strb	r3, [r7, #13]
	uint8_t soundlvl[5] = {0xAA,0x13,0x01,volume,volume+0xBE};
 800198a:	23aa      	movs	r3, #170	; 0xaa
 800198c:	703b      	strb	r3, [r7, #0]
 800198e:	2313      	movs	r3, #19
 8001990:	707b      	strb	r3, [r7, #1]
 8001992:	2301      	movs	r3, #1
 8001994:	70bb      	strb	r3, [r7, #2]
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	70fb      	strb	r3, [r7, #3]
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	3b42      	subs	r3, #66	; 0x42
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart4, play2, 6, 500);
 80019a2:	f107 0108 	add.w	r1, r7, #8
 80019a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019aa:	2206      	movs	r2, #6
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <ringbell+0x70>)
 80019ae:	f008 fcf4 	bl	800a39a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, soundlvl, 5, 500);
 80019b2:	4639      	mov	r1, r7
 80019b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b8:	2205      	movs	r2, #5
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <ringbell+0x70>)
 80019bc:	f008 fced 	bl	800a39a <HAL_UART_Transmit>
	HAL_Delay(1000);
 80019c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c4:	f003 fe94 	bl	80056f0 <HAL_Delay>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200032fc 	.word	0x200032fc

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	481f      	ldr	r0, [pc, #124]	; (8001a68 <checkUserButton+0x88>)
 80019ea:	f004 ff75 	bl	80068d8 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d036      	beq.n	8001a62 <checkUserButton+0x82>
    {
        ndefDemoFeature++;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <checkUserButton+0x8c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <checkUserButton+0x8c>)
 80019fe:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <checkUserButton+0x8c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <checkUserButton+0x8c>)
 8001a0c:	701a      	strb	r2, [r3, #0]

        ledsOff();
 8001a0e:	f001 fb27 	bl	8003060 <ledsOff>
        ndefDemoPrevFeature = ndefDemoFeature;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <checkUserButton+0x8c>)
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <checkUserButton+0x90>)
 8001a18:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <checkUserButton+0x8c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <checkUserButton+0x94>)
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <checkUserButton+0x98>)
 8001a2a:	f7ff fdcb 	bl	80015c4 <logUsart>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8001a2e:	bf00      	nop
 8001a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <checkUserButton+0x88>)
 8001a36:	f004 ff4f 	bl	80068d8 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d1f7      	bne.n	8001a30 <checkUserButton+0x50>
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <checkUserButton+0x8c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00c      	beq.n	8001a62 <checkUserButton+0x82>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8001a48:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a4c:	f003 fdbe 	bl	80055cc <timerCalculateTimer>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <checkUserButton+0x9c>)
 8001a54:	6013      	str	r3, [r2, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8001a56:	20fa      	movs	r0, #250	; 0xfa
 8001a58:	f003 fdb8 	bl	80055cc <timerCalculateTimer>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <checkUserButton+0xa0>)
 8001a60:	6013      	str	r3, [r2, #0]
        }
    }
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	20001178 	.word	0x20001178
 8001a70:	200000a3 	.word	0x200000a3
 8001a74:	20000060 	.word	0x20000060
 8001a78:	080204a4 	.word	0x080204a4
 8001a7c:	2000317c 	.word	0x2000317c
 8001a80:	20003180 	.word	0x20003180

08001a84 <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    //uint32_t i;
    
    //platformLog("Use the User button to cycle among the different modes:\r\n");

    platformLog("%s\r\n", ndefDemoFeatureDescription[0]);
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <ndefShowDemoUsage+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <ndefShowDemoUsage+0x18>)
 8001a90:	f7ff fd98 	bl	80015c4 <logUsart>
//    {
//        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
//    }
    //platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
#endif /* NDEF_FEATURE_ALL */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000060 	.word	0x20000060
 8001a9c:	080204a4 	.word	0x080204a4

08001aa0 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
//        verbose = true;
//    }
//#endif
    ndefShowDemoUsage();
 8001aa6:	f7ff ffed 	bl	8001a84 <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8001aaa:	f011 ff41 	bl	8013930 <rfalNfcInitialize>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d140      	bne.n	8001b3a <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <demoIni+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <demoIni+0xa4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <demoIni+0xa4>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <demoIni+0xa4>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <demoIni+0xa4>)
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <demoIni+0xa8>)
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ada:	c303      	stmia	r3!, {r0, r1}
 8001adc:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <demoIni+0xa4>)
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <demoIni+0xac>)
 8001ae2:	f103 0512 	add.w	r5, r3, #18
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	6028      	str	r0, [r5, #0]
 8001aec:	6069      	str	r1, [r5, #4]
 8001aee:	60aa      	str	r2, [r5, #8]
 8001af0:	60eb      	str	r3, [r5, #12]
 8001af2:	6820      	ldr	r0, [r4, #0]
 8001af4:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <demoIni+0xa4>)
 8001af8:	2214      	movs	r2, #20
 8001afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <demoIni+0xa4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <demoIni+0xa4>)
 8001b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b0a:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <demoIni+0xa4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <demoIni+0xa4>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <demoIni+0xa4>)
 8001b1e:	222f      	movs	r2, #47	; 0x2f
 8001b20:	805a      	strh	r2, [r3, #2]
#if defined(ST25R3911) || defined(ST25R3916)
        discParam.techs2Find   |= RFAL_NFC_POLL_TECH_AP2P;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <demoIni+0xa4>)
 8001b24:	885b      	ldrh	r3, [r3, #2]
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <demoIni+0xa4>)
 8001b2e:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <demoIni+0xb0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
        return true;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <demoIni+0x9c>
    }
    return false;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}
 8001b44:	2000071c 	.word	0x2000071c
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	200007a0 	.word	0x200007a0

08001b54 <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b09a      	sub	sp, #104	; 0x68
 8001b58:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8001b64:	f011 ffde 	bl	8013b24 <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8001b68:	4ba8      	ldr	r3, [pc, #672]	; (8001e0c <demoCycle+0x2b8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00d      	beq.n	8001b8c <demoCycle+0x38>
 8001b70:	4ba7      	ldr	r3, [pc, #668]	; (8001e10 <demoCycle+0x2bc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fd37 	bl	80055e8 <timerIsExpired>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8001b80:	48a4      	ldr	r0, [pc, #656]	; (8001e14 <demoCycle+0x2c0>)
 8001b82:	f7ff fd1f 	bl	80015c4 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8001b86:	4ba1      	ldr	r3, [pc, #644]	; (8001e0c <demoCycle+0x2b8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8001b8c:	4b9f      	ldr	r3, [pc, #636]	; (8001e0c <demoCycle+0x2b8>)
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4ba1      	ldr	r3, [pc, #644]	; (8001e18 <demoCycle+0x2c4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d00d      	beq.n	8001bb4 <demoCycle+0x60>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8001b98:	4b9c      	ldr	r3, [pc, #624]	; (8001e0c <demoCycle+0x2b8>)
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	4b9e      	ldr	r3, [pc, #632]	; (8001e18 <demoCycle+0x2c4>)
 8001b9e:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8001ba0:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <demoCycle+0x2b8>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <demoCycle+0x2c8>)
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	4619      	mov	r1, r3
 8001bae:	489c      	ldr	r0, [pc, #624]	; (8001e20 <demoCycle+0x2cc>)
 8001bb0:	f7ff fd08 	bl	80015c4 <logUsart>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8001bb4:	4b95      	ldr	r3, [pc, #596]	; (8001e0c <demoCycle+0x2b8>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d025      	beq.n	8001c08 <demoCycle+0xb4>
    {
        if( platformTimerIsExpired(timerLed) )
 8001bbc:	4b99      	ldr	r3, [pc, #612]	; (8001e24 <demoCycle+0x2d0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fd11 	bl	80055e8 <timerIsExpired>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d014      	beq.n	8001bf6 <demoCycle+0xa2>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8001bcc:	20fa      	movs	r0, #250	; 0xfa
 8001bce:	f003 fcfd 	bl	80055cc <timerCalculateTimer>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a93      	ldr	r2, [pc, #588]	; (8001e24 <demoCycle+0x2d0>)
 8001bd6:	6013      	str	r3, [r2, #0]
            ledOn = !ledOn;
 8001bd8:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <demoCycle+0x2d4>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <demoCycle+0x2d4>)
 8001bf4:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8001bf6:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <demoCycle+0x2d4>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <demoCycle+0xb0>
        {
            ledsOn();
 8001bfe:	f001 fa0d 	bl	800301c <ledsOn>
 8001c02:	e001      	b.n	8001c08 <demoCycle+0xb4>
        }
        else
        {
            ledsOff();
 8001c04:	f001 fa2c 	bl	8003060 <ledsOff>
        }
    }
    
    checkUserButton();
 8001c08:	f7ff feea 	bl	80019e0 <checkUserButton>
    
    switch( state )
 8001c0c:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <demoCycle+0x2d8>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d002      	beq.n	8001c1a <demoCycle+0xc6>
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d00c      	beq.n	8001c32 <demoCycle+0xde>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8001c18:	e238      	b.n	800208c <demoCycle+0x538>
            ledsOff();
 8001c1a:	f001 fa21 	bl	8003060 <ledsOff>
            rfalNfcDeactivate( false );
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f011 ff2e 	bl	8013a80 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 8001c24:	4882      	ldr	r0, [pc, #520]	; (8001e30 <demoCycle+0x2dc>)
 8001c26:	f011 fe9f 	bl	8013968 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8001c2a:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <demoCycle+0x2d8>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
            break;
 8001c30:	e22c      	b.n	800208c <demoCycle+0x538>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8001c32:	f011 ff47 	bl	8013ac4 <rfalNfcGetState>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b1d      	cmp	r3, #29
 8001c3a:	f240 8226 	bls.w	800208a <demoCycle+0x536>
 8001c3e:	f011 ff41 	bl	8013ac4 <rfalNfcGetState>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b21      	cmp	r3, #33	; 0x21
 8001c46:	f200 8220 	bhi.w	800208a <demoCycle+0x536>
                rfalNfcGetActiveDevice( &nfcDevice );
 8001c4a:	487a      	ldr	r0, [pc, #488]	; (8001e34 <demoCycle+0x2e0>)
 8001c4c:	f011 ff44 	bl	8013ad8 <rfalNfcGetActiveDevice>
                ledsOff();
 8001c50:	f001 fa06 	bl	8003060 <ledsOff>
                platformDelay(50);
 8001c54:	2032      	movs	r0, #50	; 0x32
 8001c56:	f003 fd4b 	bl	80056f0 <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <demoCycle+0x2c4>)
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8001c60:	4b74      	ldr	r3, [pc, #464]	; (8001e34 <demoCycle+0x2e0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	f200 8202 	bhi.w	8002070 <demoCycle+0x51c>
 8001c6c:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <demoCycle+0x120>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001c8d 	.word	0x08001c8d
 8001c78:	08001dc5 	.word	0x08001dc5
 8001c7c:	08001eb9 	.word	0x08001eb9
 8001c80:	08001f7d 	.word	0x08001f7d
 8001c84:	08002019 	.word	0x08002019
 8001c88:	08002043 	.word	0x08002043
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4869      	ldr	r0, [pc, #420]	; (8001e38 <demoCycle+0x2e4>)
 8001c92:	f004 fe38 	bl	8006906 <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <demoCycle+0x2e0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b60      	cmp	r3, #96	; 0x60
 8001c9e:	d033      	beq.n	8001d08 <demoCycle+0x1b4>
 8001ca0:	2b60      	cmp	r3, #96	; 0x60
 8001ca2:	dc43      	bgt.n	8001d2c <demoCycle+0x1d8>
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d02f      	beq.n	8001d08 <demoCycle+0x1b4>
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	dc3f      	bgt.n	8001d2c <demoCycle+0x1d8>
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d002      	beq.n	8001cb6 <demoCycle+0x162>
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d012      	beq.n	8001cda <demoCycle+0x186>
 8001cb4:	e03a      	b.n	8001d2c <demoCycle+0x1d8>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <demoCycle+0x2e0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <demoCycle+0x2e0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	7f1b      	ldrb	r3, [r3, #28]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f7ff fca5 	bl	8001614 <hex2Str>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	485b      	ldr	r0, [pc, #364]	; (8001e3c <demoCycle+0x2e8>)
 8001cd0:	f7ff fc78 	bl	80015c4 <logUsart>
                                rfalNfcaPollerSleep();
 8001cd4:	f016 f988 	bl	8017fe8 <rfalNfcaPollerSleep>
                                break;
 8001cd8:	e03f      	b.n	8001d5a <demoCycle+0x206>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <demoCycle+0x2e0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <demoCycle+0x2e0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	7f1b      	ldrb	r3, [r3, #28]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f7ff fc93 	bl	8001614 <hex2Str>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4853      	ldr	r0, [pc, #332]	; (8001e40 <demoCycle+0x2ec>)
 8001cf4:	f7ff fc66 	bl	80015c4 <logUsart>
                                demoNdef(nfcDevice);
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <demoCycle+0x2e0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 faed 	bl	80022dc <demoNdef>
                                rfalIsoDepDeselect(); 
 8001d02:	f010 fedf 	bl	8012ac4 <rfalIsoDepDeselect>
                                break;
 8001d06:	e028      	b.n	8001d5a <demoCycle+0x206>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001d08:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <demoCycle+0x2e0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <demoCycle+0x2e0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	7f1b      	ldrb	r3, [r3, #28]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f7ff fc7c 	bl	8001614 <hex2Str>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4848      	ldr	r0, [pc, #288]	; (8001e44 <demoCycle+0x2f0>)
 8001d22:	f7ff fc4f 	bl	80015c4 <logUsart>
                                demoP2P();
 8001d26:	f000 f9c9 	bl	80020bc <demoP2P>
                                break;
 8001d2a:	e016      	b.n	8001d5a <demoCycle+0x206>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <demoCycle+0x2e0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <demoCycle+0x2e0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7f1b      	ldrb	r3, [r3, #28]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f7ff fc6a 	bl	8001614 <hex2Str>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	4840      	ldr	r0, [pc, #256]	; (8001e48 <demoCycle+0x2f4>)
 8001d46:	f7ff fc3d 	bl	80015c4 <logUsart>
                                demoNdef(nfcDevice);
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <demoCycle+0x2e0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fac4 	bl	80022dc <demoNdef>
                                rfalNfcaPollerSleep();
 8001d54:	f016 f948 	bl	8017fe8 <rfalNfcaPollerSleep>
                                break;
 8001d58:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001d5a:	483c      	ldr	r0, [pc, #240]	; (8001e4c <demoCycle+0x2f8>)
 8001d5c:	f7ff fc32 	bl	80015c4 <logUsart>
                        rfalNfcaPollerInitialize();
 8001d60:	f015 fd7a 	bl	8017858 <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8001d64:	e024      	b.n	8001db0 <demoCycle+0x25c>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <demoCycle+0x2e0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <demoCycle+0x22a>
 8001d70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	f040 817b 	bne.w	8002074 <demoCycle+0x520>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <demoCycle+0x2e0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d00e      	beq.n	8001da6 <demoCycle+0x252>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <demoCycle+0x2e0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	1d98      	adds	r0, r3, #6
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <demoCycle+0x2e0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	795b      	ldrb	r3, [r3, #5]
 8001d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f016 f8b3 	bl	8017f04 <rfalNfcaPollerSelect>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8167 	bne.w	8002074 <demoCycle+0x520>
                            rfalNfcaPollerSleep();
 8001da6:	f016 f91f 	bl	8017fe8 <rfalNfcaPollerSleep>
                            platformDelay(130);
 8001daa:	2082      	movs	r0, #130	; 0x82
 8001dac:	f003 fca0 	bl	80056f0 <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8001db0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db4:	4619      	mov	r1, r3
 8001db6:	2052      	movs	r0, #82	; 0x52
 8001db8:	f015 fd72 	bl	80178a0 <rfalNfcaPollerCheckPresence>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0d1      	beq.n	8001d66 <demoCycle+0x212>
                        break;
 8001dc2:	e157      	b.n	8002074 <demoCycle+0x520>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <demoCycle+0x2e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <demoCycle+0x2e0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	7f1b      	ldrb	r3, [r3, #28]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7ff fc1e 	bl	8001614 <hex2Str>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <demoCycle+0x2fc>)
 8001dde:	f7ff fbf1 	bl	80015c4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2110      	movs	r1, #16
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <demoCycle+0x300>)
 8001de8:	f004 fd8d 	bl	8006906 <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <demoCycle+0x2e0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02e      	beq.n	8001e58 <demoCycle+0x304>
                            demoNdef(nfcDevice);
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <demoCycle+0x2e0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fa6c 	bl	80022dc <demoNdef>
                            rfalIsoDepDeselect();
 8001e04:	f010 fe5e 	bl	8012ac4 <rfalIsoDepDeselect>
 8001e08:	e02c      	b.n	8001e64 <demoCycle+0x310>
 8001e0a:	bf00      	nop
 8001e0c:	20001178 	.word	0x20001178
 8001e10:	2000317c 	.word	0x2000317c
 8001e14:	080204ac 	.word	0x080204ac
 8001e18:	200000a3 	.word	0x200000a3
 8001e1c:	20000060 	.word	0x20000060
 8001e20:	080204a4 	.word	0x080204a4
 8001e24:	20003180 	.word	0x20003180
 8001e28:	20003184 	.word	0x20003184
 8001e2c:	200007a0 	.word	0x200007a0
 8001e30:	2000071c 	.word	0x2000071c
 8001e34:	20003188 	.word	0x20003188
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	080204d4 	.word	0x080204d4
 8001e40:	08020508 	.word	0x08020508
 8001e44:	08020538 	.word	0x08020538
 8001e48:	08020564 	.word	0x08020564
 8001e4c:	0802058c 	.word	0x0802058c
 8001e50:	080205c8 	.word	0x080205c8
 8001e54:	40020000 	.word	0x40020000
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <demoCycle+0x540>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f016 f9a8 	bl	80181b4 <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001e64:	488c      	ldr	r0, [pc, #560]	; (8002098 <demoCycle+0x544>)
 8001e66:	f7ff fbad 	bl	80015c4 <logUsart>
                        rfalNfcbPollerInitialize();
 8001e6a:	f016 f911 	bl	8018090 <rfalNfcbPollerInitialize>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8001e6e:	e015      	b.n	8001e9c <demoCycle+0x348>
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8001e70:	4b88      	ldr	r3, [pc, #544]	; (8002094 <demoCycle+0x540>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1cd9      	adds	r1, r3, #3
 8001e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f01b fb42 	bl	801d508 <memcmp>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d114      	bne.n	8001eb4 <demoCycle+0x360>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <demoCycle+0x540>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3303      	adds	r3, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f016 f98f 	bl	80181b4 <rfalNfcbPollerSleep>
                            platformDelay(130);
 8001e96:	2082      	movs	r0, #130	; 0x82
 8001e98:	f003 fc2a 	bl	80056f0 <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8001e9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001ea0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f016 f91e 	bl	80180e8 <rfalNfcbPollerCheckPresence>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0de      	beq.n	8001e70 <demoCycle+0x31c>
                        break;
 8001eb2:	e0e0      	b.n	8002076 <demoCycle+0x522>
                                break;
 8001eb4:	bf00      	nop
                        break;
 8001eb6:	e0de      	b.n	8002076 <demoCycle+0x522>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <demoCycle+0x540>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	78db      	ldrb	r3, [r3, #3]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d116      	bne.n	8001ef0 <demoCycle+0x39c>
 8001ec2:	4b74      	ldr	r3, [pc, #464]	; (8002094 <demoCycle+0x540>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	2bfe      	cmp	r3, #254	; 0xfe
 8001eca:	d111      	bne.n	8001ef0 <demoCycle+0x39c>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <demoCycle+0x540>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	4b70      	ldr	r3, [pc, #448]	; (8002094 <demoCycle+0x540>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7ff fb9a 	bl	8001614 <hex2Str>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	486d      	ldr	r0, [pc, #436]	; (800209c <demoCycle+0x548>)
 8001ee6:	f7ff fb6d 	bl	80015c4 <logUsart>
                            demoP2P();
 8001eea:	f000 f8e7 	bl	80020bc <demoP2P>
 8001eee:	e013      	b.n	8001f18 <demoCycle+0x3c4>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <demoCycle+0x540>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <demoCycle+0x540>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	7f1b      	ldrb	r3, [r3, #28]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f7ff fb88 	bl	8001614 <hex2Str>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4865      	ldr	r0, [pc, #404]	; (80020a0 <demoCycle+0x54c>)
 8001f0a:	f7ff fb5b 	bl	80015c4 <logUsart>
                            demoNdef(nfcDevice);
 8001f0e:	4b61      	ldr	r3, [pc, #388]	; (8002094 <demoCycle+0x540>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f9e2 	bl	80022dc <demoNdef>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001f18:	485f      	ldr	r0, [pc, #380]	; (8002098 <demoCycle+0x544>)
 8001f1a:	f7ff fb53 	bl	80015c4 <logUsart>
                        devCnt = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        rfalNfcfPollerInitialize( RFAL_BR_212 );
 8001f24:	2001      	movs	r0, #1
 8001f26:	f016 fc87 	bl	8018838 <rfalNfcfPollerInitialize>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001f2a:	e012      	b.n	8001f52 <demoCycle+0x3fe>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	3301      	adds	r3, #1
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 8001f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f36:	1c58      	adds	r0, r3, #1
 8001f38:	4b56      	ldr	r3, [pc, #344]	; (8002094 <demoCycle+0x540>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	2208      	movs	r2, #8
 8001f40:	4619      	mov	r1, r3
 8001f42:	f01b fae1 	bl	801d508 <memcmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d115      	bne.n	8001f78 <demoCycle+0x424>
                            platformDelay(130);
 8001f4c:	2082      	movs	r0, #130	; 0x82
 8001f4e:	f003 fbcf 	bl	80056f0 <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8001f52:	f107 0220 	add.w	r2, r7, #32
 8001f56:	f107 031f 	add.w	r3, r7, #31
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f016 fc94 	bl	8018898 <rfalNfcfPollerPoll>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0da      	beq.n	8001f2c <demoCycle+0x3d8>
                        break;
 8001f76:	e07e      	b.n	8002076 <demoCycle+0x522>
                                break;
 8001f78:	bf00      	nop
                        break;
 8001f7a:	e07c      	b.n	8002076 <demoCycle+0x522>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <demoCycle+0x540>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6999      	ldr	r1, [r3, #24]
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <demoCycle+0x540>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7f1b      	ldrb	r3, [r3, #28]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f01b facb 	bl	801d528 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	3307      	adds	r3, #7
 8001f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f9c:	e00f      	b.n	8001fbe <demoCycle+0x46a>
 8001f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb4:	1e5a      	subs	r2, r3, #1
 8001fb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fb8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3eb      	bcc.n	8001f9e <demoCycle+0x44a>
                            platformLog(" test ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2108      	movs	r1, #8
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb22 	bl	8001614 <hex2Str>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4833      	ldr	r0, [pc, #204]	; (80020a4 <demoCycle+0x550>)
 8001fd6:	f7ff faf5 	bl	80015c4 <logUsart>
                            demoNdef(nfcDevice);
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <demoCycle+0x540>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f97c 	bl	80022dc <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8001fe4:	482c      	ldr	r0, [pc, #176]	; (8002098 <demoCycle+0x544>)
 8001fe6:	f7ff faed 	bl	80015c4 <logUsart>
                            rfalNfcvPollerInitialize();
 8001fea:	f016 ff9f 	bl	8018f2c <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001fee:	e002      	b.n	8001ff6 <demoCycle+0x4a2>
                                platformDelay(130);
 8001ff0:	2082      	movs	r0, #130	; 0x82
 8001ff2:	f003 fb7d 	bl	80056f0 <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <demoCycle+0x540>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1cda      	adds	r2, r3, #3
 8001ffc:	f107 0110 	add.w	r1, r7, #16
 8002000:	f107 030e 	add.w	r3, r7, #14
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	2140      	movs	r1, #64	; 0x40
 800200a:	2020      	movs	r0, #32
 800200c:	f016 ffd3 	bl	8018fb6 <rfalNfcvPollerInventory>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ec      	beq.n	8001ff0 <demoCycle+0x49c>
                        break;
 8002016:	e02e      	b.n	8002076 <demoCycle+0x522>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <demoCycle+0x540>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <demoCycle+0x540>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	7f1b      	ldrb	r3, [r3, #28]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff faf4 	bl	8001614 <hex2Str>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	481d      	ldr	r0, [pc, #116]	; (80020a8 <demoCycle+0x554>)
 8002032:	f7ff fac7 	bl	80015c4 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8002036:	2201      	movs	r2, #1
 8002038:	2110      	movs	r1, #16
 800203a:	481c      	ldr	r0, [pc, #112]	; (80020ac <demoCycle+0x558>)
 800203c:	f004 fc63 	bl	8006906 <HAL_GPIO_WritePin>
                        break;
 8002040:	e019      	b.n	8002076 <demoCycle+0x522>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <demoCycle+0x540>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <demoCycle+0x540>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	7f1b      	ldrb	r3, [r3, #28]
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fadf 	bl	8001614 <hex2Str>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4815      	ldr	r0, [pc, #84]	; (80020b0 <demoCycle+0x55c>)
 800205c:	f7ff fab2 	bl	80015c4 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8002060:	2201      	movs	r2, #1
 8002062:	2120      	movs	r1, #32
 8002064:	4813      	ldr	r0, [pc, #76]	; (80020b4 <demoCycle+0x560>)
 8002066:	f004 fc4e 	bl	8006906 <HAL_GPIO_WritePin>
                        demoP2P();
 800206a:	f000 f827 	bl	80020bc <demoP2P>
                        break;
 800206e:	e002      	b.n	8002076 <demoCycle+0x522>
                        break;
 8002070:	bf00      	nop
 8002072:	e000      	b.n	8002076 <demoCycle+0x522>
                        break;
 8002074:	bf00      	nop
                rfalNfcDeactivate( false );
 8002076:	2000      	movs	r0, #0
 8002078:	f011 fd02 	bl	8013a80 <rfalNfcDeactivate>
                platformDelay( 500 );
 800207c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002080:	f003 fb36 	bl	80056f0 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <demoCycle+0x564>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
            break;
 800208a:	bf00      	nop
    }
}
 800208c:	bf00      	nop
 800208e:	3760      	adds	r7, #96	; 0x60
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20003188 	.word	0x20003188
 8002098:	0802058c 	.word	0x0802058c
 800209c:	080205f0 	.word	0x080205f0
 80020a0:	0802061c 	.word	0x0802061c
 80020a4:	08020640 	.word	0x08020640
 80020a8:	0802066c 	.word	0x0802066c
 80020ac:	40020000 	.word	0x40020000
 80020b0:	0802068c 	.word	0x0802068c
 80020b4:	40020400 	.word	0x40020400
 80020b8:	200007a0 	.word	0x200007a0

080020bc <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b0d5      	sub	sp, #340	; 0x154
 80020c0:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 80020c2:	4865      	ldr	r0, [pc, #404]	; (8002258 <demoP2P+0x19c>)
 80020c4:	f7ff fa7e 	bl	80015c4 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 80020c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020cc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	9100      	str	r1, [sp, #0]
 80020d6:	211a      	movs	r1, #26
 80020d8:	4860      	ldr	r0, [pc, #384]	; (800225c <demoP2P+0x1a0>)
 80020da:	f000 f8db 	bl	8002294 <demoTransceiveBlocking>
 80020de:	4603      	mov	r3, r0
 80020e0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80020e4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <demoP2P+0x38>
    {
        platformLog("failed.");
 80020ec:	485c      	ldr	r0, [pc, #368]	; (8002260 <demoP2P+0x1a4>)
 80020ee:	f7ff fa69 	bl	80015c4 <logUsart>
        return;
 80020f2:	e0ac      	b.n	800224e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 80020f4:	485b      	ldr	r0, [pc, #364]	; (8002264 <demoP2P+0x1a8>)
 80020f6:	f7ff fa65 	bl	80015c4 <logUsart>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 80020fa:	463b      	mov	r3, r7
 80020fc:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <demoP2P+0x1ac>)
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f00a fe99 	bl	800ce38 <ndefRtdUri>
 8002106:	4603      	mov	r3, r0
 8002108:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 800210c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002110:	463b      	mov	r3, r7
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f00a ff7d 	bl	800d014 <ndefRtdUriToRecord>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002122:	4313      	orrs	r3, r2
 8002124:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 8002128:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800212c:	4618      	mov	r0, r3
 800212e:	f008 fb13 	bl	800a758 <ndefMessageInit>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800213a:	4313      	orrs	r3, r2
 800213c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8002140:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002144:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fb52 	bl	800a7f4 <ndefMessageAppend>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002158:	4313      	orrs	r3, r2
 800215a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <demoP2P+0x1b0>)
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <demoP2P+0x1b4>)
 8002162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002166:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <demoP2P+0x1b8>)
 800216c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 8002170:	23f7      	movs	r3, #247	; 0xf7
 8002172:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 8002176:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800217a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f008 fbe5 	bl	800a950 <ndefMessageEncode>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800218e:	4313      	orrs	r3, r2
 8002190:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 8002194:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <demoP2P+0x1b0>)
 800219c:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <demoP2P+0x1b0>)
 80021a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 80021a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021a8:	3309      	adds	r3, #9
 80021aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 80021ae:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <demoP2P+0x108>
    {
        platformLog("NDEF message creation failed\r\n", err);
 80021b6:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80021ba:	4619      	mov	r1, r3
 80021bc:	482e      	ldr	r0, [pc, #184]	; (8002278 <demoP2P+0x1bc>)
 80021be:	f7ff fa01 	bl	80015c4 <logUsart>
        return;
 80021c2:	e044      	b.n	800224e <demoP2P+0x192>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 80021c4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	482b      	ldr	r0, [pc, #172]	; (800227c <demoP2P+0x1c0>)
 80021ce:	f001 fc4b 	bl	8003a68 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.ST.com .. ");
 80021d2:	482b      	ldr	r0, [pc, #172]	; (8002280 <demoP2P+0x1c4>)
 80021d4:	f7ff f9f6 	bl	80015c4 <logUsart>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 80021d8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80021dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021e0:	b299      	uxth	r1, r3
 80021e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021e6:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80021ea:	f04f 34ff 	mov.w	r4, #4294967295
 80021ee:	9400      	str	r4, [sp, #0]
 80021f0:	f000 f850 	bl	8002294 <demoTransceiveBlocking>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 80021fa:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <demoP2P+0x14e>
    {
        platformLog("failed.");
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <demoP2P+0x1a4>)
 8002204:	f7ff f9de 	bl	80015c4 <logUsart>
        return;
 8002208:	e021      	b.n	800224e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 800220a:	4816      	ldr	r0, [pc, #88]	; (8002264 <demoP2P+0x1a8>)
 800220c:	f7ff f9da 	bl	80015c4 <logUsart>


    platformLog(" Device present, maintaining connection ");
 8002210:	481c      	ldr	r0, [pc, #112]	; (8002284 <demoP2P+0x1c8>)
 8002212:	f7ff f9d7 	bl	80015c4 <logUsart>
    while(err == ERR_NONE) 
 8002216:	e013      	b.n	8002240 <demoP2P+0x184>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 8002218:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800221c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	9100      	str	r1, [sp, #0]
 8002226:	2102      	movs	r1, #2
 8002228:	4817      	ldr	r0, [pc, #92]	; (8002288 <demoP2P+0x1cc>)
 800222a:	f000 f833 	bl	8002294 <demoTransceiveBlocking>
 800222e:	4603      	mov	r3, r0
 8002230:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 8002234:	4815      	ldr	r0, [pc, #84]	; (800228c <demoP2P+0x1d0>)
 8002236:	f7ff f9c5 	bl	80015c4 <logUsart>
        platformDelay(50);
 800223a:	2032      	movs	r0, #50	; 0x32
 800223c:	f003 fa58 	bl	80056f0 <HAL_Delay>
    while(err == ERR_NONE) 
 8002240:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0e7      	beq.n	8002218 <demoP2P+0x15c>
    }
    platformLog("\r\n Device removed.\r\n");
 8002248:	4811      	ldr	r0, [pc, #68]	; (8002290 <demoP2P+0x1d4>)
 800224a:	f7ff f9bb 	bl	80015c4 <logUsart>
}
 800224e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	080206b8 	.word	0x080206b8
 800225c:	2000002c 	.word	0x2000002c
 8002260:	080206d0 	.word	0x080206d0
 8002264:	080206d8 	.word	0x080206d8
 8002268:	20000048 	.word	0x20000048
 800226c:	2000061c 	.word	0x2000061c
 8002270:	080216b4 	.word	0x080216b4
 8002274:	20000625 	.word	0x20000625
 8002278:	080206e8 	.word	0x080206e8
 800227c:	08020708 	.word	0x08020708
 8002280:	08020724 	.word	0x08020724
 8002284:	08020744 	.word	0x08020744
 8002288:	20000618 	.word	0x20000618
 800228c:	08020770 	.word	0x08020770
 8002290:	08020774 	.word	0x08020774

08002294 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	460b      	mov	r3, r1
 80022a2:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f011 fe1c 	bl	8013eec <rfalNfcDataExchangeStart>
 80022b4:	4603      	mov	r3, r0
 80022b6:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 80022b8:	8afb      	ldrh	r3, [r7, #22]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 80022be:	f011 fc31 	bl	8013b24 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 80022c2:	f011 ff2d 	bl	8014120 <rfalNfcDataExchangeGetStatus>
 80022c6:	4603      	mov	r3, r0
 80022c8:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 80022ca:	8afb      	ldrh	r3, [r7, #22]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d0f6      	beq.n	80022be <demoTransceiveBlocking+0x2a>
    }
    return err;
 80022d0:	8afb      	ldrh	r3, [r7, #22]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80022e8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80022ec:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 80022ee:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80022f2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	48b4      	ldr	r0, [pc, #720]	; (80025cc <demoNdef+0x2f0>)
 80022fa:	f00a ff5b 	bl	800d1b4 <ndefPollerContextInitialization>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8002304:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <demoNdef+0x3e>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 800230c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002310:	4619      	mov	r1, r3
 8002312:	48af      	ldr	r0, [pc, #700]	; (80025d0 <demoNdef+0x2f4>)
 8002314:	f7ff f956 	bl	80015c4 <logUsart>
        return;
 8002318:	e27a      	b.n	8002810 <demoNdef+0x534>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 800231a:	4bae      	ldr	r3, [pc, #696]	; (80025d4 <demoNdef+0x2f8>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8002324:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <demoNdef+0x66>
    {
        ndefDumpSysInfo(&ndefCtx);
 800233c:	48a3      	ldr	r0, [pc, #652]	; (80025cc <demoNdef+0x2f0>)
 800233e:	f000 fc25 	bl	8002b8c <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8002342:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002346:	4619      	mov	r1, r3
 8002348:	48a0      	ldr	r0, [pc, #640]	; (80025cc <demoNdef+0x2f0>)
 800234a:	f00a ff61 	bl	800d210 <ndefPollerNdefDetect>
 800234e:	4603      	mov	r3, r0
 8002350:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8002354:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <demoNdef+0x96>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 800235c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002360:	4619      	mov	r1, r3
 8002362:	489d      	ldr	r0, [pc, #628]	; (80025d8 <demoNdef+0x2fc>)
 8002364:	f7ff f92e 	bl	80015c4 <logUsart>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 8002368:	4b9c      	ldr	r3, [pc, #624]	; (80025dc <demoNdef+0x300>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d01b      	beq.n	80023a8 <demoNdef+0xcc>
        {
            return;
 8002370:	e24e      	b.n	8002810 <demoNdef+0x534>
        }
    }
    else
    {
        platformLog("%s NDEF is detected.\r\n", ndefStates[info.state]);
 8002372:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8002376:	461a      	mov	r2, r3
 8002378:	4b99      	ldr	r3, [pc, #612]	; (80025e0 <demoNdef+0x304>)
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	4619      	mov	r1, r3
 8002380:	4898      	ldr	r0, [pc, #608]	; (80025e4 <demoNdef+0x308>)
 8002382:	f7ff f91f 	bl	80015c4 <logUsart>
        ndefCCDump(&ndefCtx);
 8002386:	4891      	ldr	r0, [pc, #580]	; (80025cc <demoNdef+0x2f0>)
 8002388:	f000 fbae 	bl	8002ae8 <ndefCCDump>

        if( verbose )
 800238c:	4b91      	ldr	r3, [pc, #580]	; (80025d4 <demoNdef+0x2f8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <demoNdef+0xcc>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 8002394:	4b8d      	ldr	r3, [pc, #564]	; (80025cc <demoNdef+0x2f0>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a8c      	ldr	r2, [pc, #560]	; (80025cc <demoNdef+0x2f0>)
 800239c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80023a0:	4619      	mov	r1, r3
 80023a2:	4891      	ldr	r0, [pc, #580]	; (80025e8 <demoNdef+0x30c>)
 80023a4:	f7ff f90e 	bl	80015c4 <logUsart>
        }
    }

    switch( ndefDemoFeature )
 80023a8:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <demoNdef+0x300>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	f200 8228 	bhi.w	8002802 <demoNdef+0x526>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <demoNdef+0xdc>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	0800248d 	.word	0x0800248d
 80023c0:	08002619 	.word	0x08002619
 80023c4:	080027ab 	.word	0x080027ab
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 80023c8:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f000 821e 	beq.w	800280e <demoNdef+0x532>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 80023d2:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	4984      	ldr	r1, [pc, #528]	; (80025ec <demoNdef+0x310>)
 80023dc:	487b      	ldr	r0, [pc, #492]	; (80025cc <demoNdef+0x2f0>)
 80023de:	f00a ff34 	bl	800d24a <ndefPollerReadRawMessage>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80023e8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <demoNdef+0x122>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 80023f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80023f4:	4619      	mov	r1, r3
 80023f6:	487e      	ldr	r0, [pc, #504]	; (80025f0 <demoNdef+0x314>)
 80023f8:	f7ff f8e4 	bl	80015c4 <logUsart>
                return;
 80023fc:	e208      	b.n	8002810 <demoNdef+0x534>
            }
            if( verbose )
 80023fe:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <demoNdef+0x2f8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00e      	beq.n	8002424 <demoNdef+0x148>
            {
                bufRawMessage.buffer = rawMessageBuf;
 8002406:	4b79      	ldr	r3, [pc, #484]	; (80025ec <demoNdef+0x310>)
 8002408:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 800240c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002410:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 8002414:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <demoNdef+0x2f8>)
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800241c:	4619      	mov	r1, r3
 800241e:	4875      	ldr	r0, [pc, #468]	; (80025f4 <demoNdef+0x318>)
 8002420:	f001 fb22 	bl	8003a68 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 8002424:	4b71      	ldr	r3, [pc, #452]	; (80025ec <demoNdef+0x310>)
 8002426:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 800242a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800242e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 8002432:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8002436:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f008 fa2e 	bl	800a89e <ndefMessageDecode>
 8002442:	4603      	mov	r3, r0
 8002444:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8002448:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <demoNdef+0x182>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8002450:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002454:	4619      	mov	r1, r3
 8002456:	4868      	ldr	r0, [pc, #416]	; (80025f8 <demoNdef+0x31c>)
 8002458:	f7ff f8b4 	bl	80015c4 <logUsart>
                return;
 800245c:	e1d8      	b.n	8002810 <demoNdef+0x534>
            }
            err = ndefMessageDump(&message, verbose);
 800245e:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <demoNdef+0x2f8>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f000 ff29 	bl	80032c0 <ndefMessageDump>
 800246e:	4603      	mov	r3, r0
 8002470:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8002474:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 81c6 	beq.w	800280a <demoNdef+0x52e>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 800247e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002482:	4619      	mov	r1, r3
 8002484:	485d      	ldr	r0, [pc, #372]	; (80025fc <demoNdef+0x320>)
 8002486:	f7ff f89d 	bl	80015c4 <logUsart>
                return;
 800248a:	e1c1      	b.n	8002810 <demoNdef+0x534>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <demoNdef+0x300>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 8002492:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002496:	4618      	mov	r0, r3
 8002498:	f008 f95e 	bl	800a758 <ndefMessageInit>
 800249c:	4603      	mov	r3, r0
 800249e:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 80024a2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80024a6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80024aa:	4a55      	ldr	r2, [pc, #340]	; (8002600 <demoNdef+0x324>)
 80024ac:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 80024ae:	4854      	ldr	r0, [pc, #336]	; (8002600 <demoNdef+0x324>)
 80024b0:	f7fd fe66 	bl	8000180 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80024bc:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80024c0:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 80024c2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80024c6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80024ca:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <demoNdef+0x328>)
 80024cc:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 80024ce:	484d      	ldr	r0, [pc, #308]	; (8002604 <demoNdef+0x328>)
 80024d0:	f7fd fe56 	bl	8000180 <strlen>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80024da:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80024de:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024e8:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80024ec:	2100      	movs	r1, #0
 80024ee:	f00a faa5 	bl	800ca3c <ndefRtdText>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 8002500:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8002504:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f00a fbba 	bl	800cc84 <ndefRtdTextToRecord>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002518:	4313      	orrs	r3, r2
 800251a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 800251e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8002522:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f008 f963 	bl	800a7f4 <ndefMessageAppend>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002536:	4313      	orrs	r3, r2
 8002538:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800253c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <demoNdef+0x276>
            {
                platformLog("Message creation failed\r\n", err);
 8002544:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002548:	4619      	mov	r1, r3
 800254a:	482f      	ldr	r0, [pc, #188]	; (8002608 <demoNdef+0x32c>)
 800254c:	f7ff f83a 	bl	80015c4 <logUsart>
                return;
 8002550:	e15e      	b.n	8002810 <demoNdef+0x534>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8002552:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002556:	4619      	mov	r1, r3
 8002558:	481c      	ldr	r0, [pc, #112]	; (80025cc <demoNdef+0x2f0>)
 800255a:	f00a ff4d 	bl	800d3f8 <ndefPollerWriteMessage>
 800255e:	4603      	mov	r3, r0
 8002560:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8002564:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <demoNdef+0x29e>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 800256c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002570:	4619      	mov	r1, r3
 8002572:	4826      	ldr	r0, [pc, #152]	; (800260c <demoNdef+0x330>)
 8002574:	f7ff f826 	bl	80015c4 <logUsart>
                return;
 8002578:	e14a      	b.n	8002810 <demoNdef+0x534>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 800257a:	4825      	ldr	r0, [pc, #148]	; (8002610 <demoNdef+0x334>)
 800257c:	f7ff f822 	bl	80015c4 <logUsart>
            if( verbose )
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <demoNdef+0x2f8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01d      	beq.n	80025c4 <demoNdef+0x2e8>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <demoNdef+0x310>)
 800258a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 800258e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002592:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 8002596:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800259a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f008 f9d5 	bl	800a950 <ndefMessageEncode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 80025ac:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <demoNdef+0x2e8>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <demoNdef+0x2f8>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80025bc:	4619      	mov	r1, r3
 80025be:	4815      	ldr	r0, [pc, #84]	; (8002614 <demoNdef+0x338>)
 80025c0:	f001 fa52 	bl	8003a68 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 80025c4:	f000 fd0e 	bl	8002fe4 <LedNotificationWriteDone>
            break;
 80025c8:	e120      	b.n	800280c <demoNdef+0x530>
 80025ca:	bf00      	nop
 80025cc:	200007a4 	.word	0x200007a4
 80025d0:	0802078c 	.word	0x0802078c
 80025d4:	20001179 	.word	0x20001179
 80025d8:	080207d0 	.word	0x080207d0
 80025dc:	20001178 	.word	0x20001178
 80025e0:	20000050 	.word	0x20000050
 80025e4:	08020808 	.word	0x08020808
 80025e8:	08020820 	.word	0x08020820
 80025ec:	2000117c 	.word	0x2000117c
 80025f0:	0802083c 	.word	0x0802083c
 80025f4:	08020880 	.word	0x08020880
 80025f8:	08020890 	.word	0x08020890
 80025fc:	080208d4 	.word	0x080208d4
 8002600:	20000090 	.word	0x20000090
 8002604:	20000078 	.word	0x20000078
 8002608:	08020914 	.word	0x08020914
 800260c:	08020930 	.word	0x08020930
 8002610:	08020970 	.word	0x08020970
 8002614:	0802098c 	.word	0x0802098c

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 8002618:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <demoNdef+0x53c>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 800261e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002622:	4618      	mov	r0, r3
 8002624:	f008 f898 	bl	800a758 <ndefMessageInit>
 8002628:	4603      	mov	r3, r0
 800262a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 800262e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8002632:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <demoNdef+0x540>)
 8002638:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 800263a:	4878      	ldr	r0, [pc, #480]	; (800281c <demoNdef+0x540>)
 800263c:	f7fd fda0 	bl	8000180 <strlen>
 8002640:	4602      	mov	r2, r0
 8002642:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8002646:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800264a:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 800264c:	f107 0214 	add.w	r2, r7, #20
 8002650:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f00a fbee 	bl	800ce38 <ndefRtdUri>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002664:	4313      	orrs	r3, r2
 8002666:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 800266a:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800266e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f00a fccd 	bl	800d014 <ndefRtdUriToRecord>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002682:	4313      	orrs	r3, r2
 8002684:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 8002688:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800268c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8002690:	4a63      	ldr	r2, [pc, #396]	; (8002820 <demoNdef+0x544>)
 8002692:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 8002694:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8002698:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800269c:	220e      	movs	r2, #14
 800269e:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f00a fcd6 	bl	800d05c <ndefRtdAar>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 80026be:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80026c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00a fd49 	bl	800d160 <ndefRtdAarToRecord>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 80026dc:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80026e0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f008 f884 	bl	800a7f4 <ndefMessageAppend>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 80026fa:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80026fe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f008 f875 	bl	800a7f4 <ndefMessageAppend>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002712:	4313      	orrs	r3, r2
 8002714:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <demoNdef+0x548>)
 800271a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 8002726:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800272a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f008 f90d 	bl	800a950 <ndefMessageEncode>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800273e:	4313      	orrs	r3, r2
 8002740:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8002744:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <demoNdef+0x47e>
            {
                platformLog("Raw message creation failed\r\n", err);
 800274c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002750:	4619      	mov	r1, r3
 8002752:	4835      	ldr	r0, [pc, #212]	; (8002828 <demoNdef+0x54c>)
 8002754:	f7fe ff36 	bl	80015c4 <logUsart>
                return;
 8002758:	e05a      	b.n	8002810 <demoNdef+0x534>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 800275a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800275e:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8002762:	4619      	mov	r1, r3
 8002764:	4831      	ldr	r0, [pc, #196]	; (800282c <demoNdef+0x550>)
 8002766:	f00a fd91 	bl	800d28c <ndefPollerWriteRawMessage>
 800276a:	4603      	mov	r3, r0
 800276c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8002770:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <demoNdef+0x4aa>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 8002778:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800277c:	4619      	mov	r1, r3
 800277e:	482c      	ldr	r0, [pc, #176]	; (8002830 <demoNdef+0x554>)
 8002780:	f7fe ff20 	bl	80015c4 <logUsart>
                return;
 8002784:	e044      	b.n	8002810 <demoNdef+0x534>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 8002786:	482b      	ldr	r0, [pc, #172]	; (8002834 <demoNdef+0x558>)
 8002788:	f7fe ff1c 	bl	80015c4 <logUsart>
            if( verbose )
 800278c:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <demoNdef+0x55c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <demoNdef+0x4c8>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <demoNdef+0x55c>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800279c:	4619      	mov	r1, r3
 800279e:	4827      	ldr	r0, [pc, #156]	; (800283c <demoNdef+0x560>)
 80027a0:	f001 f962 	bl	8003a68 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 80027a4:	f000 fc1e 	bl	8002fe4 <LedNotificationWriteDone>
            break;
 80027a8:	e030      	b.n	800280c <demoNdef+0x530>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <demoNdef+0x53c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 80027b0:	481e      	ldr	r0, [pc, #120]	; (800282c <demoNdef+0x550>)
 80027b2:	f000 fbdf 	bl	8002f74 <ndefIsSTTag>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <demoNdef+0x4ee>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 80027c2:	481f      	ldr	r0, [pc, #124]	; (8002840 <demoNdef+0x564>)
 80027c4:	f7fe fefe 	bl	80015c4 <logUsart>
                return;
 80027c8:	e022      	b.n	8002810 <demoNdef+0x534>
            }
            platformLog("Formatting Tag...\r\n");
 80027ca:	481e      	ldr	r0, [pc, #120]	; (8002844 <demoNdef+0x568>)
 80027cc:	f7fe fefa 	bl	80015c4 <logUsart>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	4815      	ldr	r0, [pc, #84]	; (800282c <demoNdef+0x550>)
 80027d6:	f00a fd78 	bl	800d2ca <ndefPollerTagFormat>
 80027da:	4603      	mov	r3, r0
 80027dc:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80027e0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <demoNdef+0x51a>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 80027e8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80027ec:	4619      	mov	r1, r3
 80027ee:	4816      	ldr	r0, [pc, #88]	; (8002848 <demoNdef+0x56c>)
 80027f0:	f7fe fee8 	bl	80015c4 <logUsart>
                return;
 80027f4:	e00c      	b.n	8002810 <demoNdef+0x534>
            }
            platformLog("Tag formatted\r\n");
 80027f6:	4815      	ldr	r0, [pc, #84]	; (800284c <demoNdef+0x570>)
 80027f8:	f7fe fee4 	bl	80015c4 <logUsart>
            LedNotificationWriteDone();
 80027fc:	f000 fbf2 	bl	8002fe4 <LedNotificationWriteDone>
            break;
 8002800:	e004      	b.n	800280c <demoNdef+0x530>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <demoNdef+0x53c>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
            break;     
 8002808:	e000      	b.n	800280c <demoNdef+0x530>
            break;
 800280a:	bf00      	nop
    }
    return;
 800280c:	e000      	b.n	8002810 <demoNdef+0x534>
                return;
 800280e:	bf00      	nop
}
 8002810:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20001178 	.word	0x20001178
 800281c:	20000070 	.word	0x20000070
 8002820:	20000094 	.word	0x20000094
 8002824:	2000117c 	.word	0x2000117c
 8002828:	08020998 	.word	0x08020998
 800282c:	200007a4 	.word	0x200007a4
 8002830:	080209b8 	.word	0x080209b8
 8002834:	080209fc 	.word	0x080209fc
 8002838:	20001179 	.word	0x20001179
 800283c:	0802098c 	.word	0x0802098c
 8002840:	08020a1c 	.word	0x08020a1c
 8002844:	08020a5c 	.word	0x08020a5c
 8002848:	08020a70 	.word	0x08020a70
 800284c:	08020aac 	.word	0x08020aac

08002850 <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af04      	add	r7, sp, #16
 8002856:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800285e:	461c      	mov	r4, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002866:	461d      	mov	r5, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800286e:	461e      	mov	r6, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002876:	4619      	mov	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8002886:	4610      	mov	r0, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800288e:	9203      	str	r2, [sp, #12]
 8002890:	9002      	str	r0, [sp, #8]
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9100      	str	r1, [sp, #0]
 8002896:	4633      	mov	r3, r6
 8002898:	462a      	mov	r2, r5
 800289a:	4621      	mov	r1, r4
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <ndefT2TCCDump+0x74>)
 800289e:	f7fe fe91 	bl	80015c4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	339c      	adds	r3, #156	; 0x9c
 80028a6:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 80028a8:	2304      	movs	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <ndefT2TCCDump+0x78>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4619      	mov	r1, r3
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <ndefT2TCCDump+0x7c>)
 80028b8:	f001 f8d6 	bl	8003a68 <ndefBufferDump>
  
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c4:	08020abc 	.word	0x08020abc
 80028c8:	20001179 	.word	0x20001179
 80028cc:	08020b20 	.word	0x08020b20

080028d0 <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 80028d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d2:	b08b      	sub	sp, #44	; 0x2c
 80028d4:	af06      	add	r7, sp, #24
 80028d6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80028de:	461d      	mov	r5, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80028e6:	461e      	mov	r6, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80028ee:	469c      	mov	ip, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80028fe:	4611      	mov	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8002906:	4610      	mov	r0, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800290e:	4614      	mov	r4, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 8002916:	9204      	str	r2, [sp, #16]
 8002918:	9403      	str	r4, [sp, #12]
 800291a:	9002      	str	r0, [sp, #8]
 800291c:	9101      	str	r1, [sp, #4]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4663      	mov	r3, ip
 8002922:	4632      	mov	r2, r6
 8002924:	4629      	mov	r1, r5
 8002926:	480a      	ldr	r0, [pc, #40]	; (8002950 <ndefT3TAIBDump+0x80>)
 8002928:	f7fe fe4c 	bl	80015c4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	339c      	adds	r3, #156	; 0x9c
 8002930:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 8002932:	2310      	movs	r3, #16
 8002934:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <ndefT3TAIBDump+0x84>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	; (8002958 <ndefT3TAIBDump+0x88>)
 8002942:	f001 f891 	bl	8003a68 <ndefBufferDump>
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	bf00      	nop
 8002950:	08020b30 	.word	0x08020b30
 8002954:	20001179 	.word	0x20001179
 8002958:	08020b20 	.word	0x08020b20

0800295c <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b08b      	sub	sp, #44	; 0x2c
 8002960:	af06      	add	r7, sp, #24
 8002962:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800296a:	461e      	mov	r6, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002972:	469c      	mov	ip, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800297a:	469e      	mov	lr, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002982:	4619      	mov	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800298a:	4618      	mov	r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002992:	461c      	mov	r4, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80029a0:	4615      	mov	r5, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 80029a8:	9205      	str	r2, [sp, #20]
 80029aa:	9504      	str	r5, [sp, #16]
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	9402      	str	r4, [sp, #8]
 80029b0:	9001      	str	r0, [sp, #4]
 80029b2:	9100      	str	r1, [sp, #0]
 80029b4:	4673      	mov	r3, lr
 80029b6:	4662      	mov	r2, ip
 80029b8:	4631      	mov	r1, r6
 80029ba:	480b      	ldr	r0, [pc, #44]	; (80029e8 <ndefT4TCCDump+0x8c>)
 80029bc:	f7fe fe02 	bl	80015c4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	339c      	adds	r3, #156	; 0x9c
 80029c4:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80029cc:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <ndefT4TCCDump+0x90>)
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <ndefT4TCCDump+0x94>)
 80029da:	f001 f845 	bl	8003a68 <ndefBufferDump>
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08020b90 	.word	0x08020b90
 80029ec:	20001179 	.word	0x20001179
 80029f0:	08020c08 	.word	0x08020c08

080029f4 <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b08b      	sub	sp, #44	; 0x2c
 80029f8:	af06      	add	r7, sp, #24
 80029fa:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002a02:	4619      	mov	r1, r3
 8002a04:	4831      	ldr	r0, [pc, #196]	; (8002acc <ndefT5TCCDump+0xd8>)
 8002a06:	f7fe fddd 	bl	80015c4 <logUsart>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002a10:	461d      	mov	r5, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002a18:	461e      	mov	r6, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002a20:	469c      	mov	ip, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a28:	4619      	mov	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002a30:	4618      	mov	r0, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8002a40:	4614      	mov	r4, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8002a48:	9204      	str	r2, [sp, #16]
 8002a4a:	9403      	str	r4, [sp, #12]
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	9001      	str	r0, [sp, #4]
 8002a50:	9100      	str	r1, [sp, #0]
 8002a52:	4663      	mov	r3, ip
 8002a54:	4632      	mov	r2, r6
 8002a56:	4629      	mov	r1, r5
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <ndefT5TCCDump+0xdc>)
 8002a5a:	f7fe fdb3 	bl	80015c4 <logUsart>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <ndefT5TCCDump+0x78>
 8002a68:	2358      	movs	r3, #88	; 0x58
 8002a6a:	e000      	b.n	8002a6e <ndefT5TCCDump+0x7a>
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4818      	ldr	r0, [pc, #96]	; (8002ad4 <ndefT5TCCDump+0xe0>)
 8002a72:	f7fe fda7 	bl	80015c4 <logUsart>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <ndefT5TCCDump+0x90>
 8002a80:	2358      	movs	r3, #88	; 0x58
 8002a82:	e000      	b.n	8002a86 <ndefT5TCCDump+0x92>
 8002a84:	2320      	movs	r3, #32
 8002a86:	4619      	mov	r1, r3
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <ndefT5TCCDump+0xe4>)
 8002a8a:	f7fe fd9b 	bl	80015c4 <logUsart>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <ndefT5TCCDump+0xa8>
 8002a98:	2358      	movs	r3, #88	; 0x58
 8002a9a:	e000      	b.n	8002a9e <ndefT5TCCDump+0xaa>
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480e      	ldr	r0, [pc, #56]	; (8002adc <ndefT5TCCDump+0xe8>)
 8002aa2:	f7fe fd8f 	bl	80015c4 <logUsart>
    bufCcBuf.buffer = ctx->ccBuf;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	339c      	adds	r3, #156	; 0x9c
 8002aaa:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ab2:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <ndefT5TCCDump+0xec>)
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	4619      	mov	r1, r3
 8002abe:	4809      	ldr	r0, [pc, #36]	; (8002ae4 <ndefT5TCCDump+0xf0>)
 8002ac0:	f000 ffd2 	bl	8003a68 <ndefBufferDump>
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002acc:	08020c1c 	.word	0x08020c1c
 8002ad0:	08020c34 	.word	0x08020c34
 8002ad4:	08020ca8 	.word	0x08020ca8
 8002ad8:	08020cc0 	.word	0x08020cc0
 8002adc:	08020ce0 	.word	0x08020ce0
 8002ae0:	20001179 	.word	0x20001179
 8002ae4:	08020b20 	.word	0x08020b20

08002ae8 <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03c      	beq.n	8002b70 <ndefCCDump+0x88>
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <ndefCCDump+0x94>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d135      	bne.n	8002b70 <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d101      	bne.n	8002b10 <ndefCCDump+0x28>
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <ndefCCDump+0x98>)
 8002b0e:	e000      	b.n	8002b12 <ndefCCDump+0x2a>
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <ndefCCDump+0x9c>)
 8002b12:	4619      	mov	r1, r3
 8002b14:	481c      	ldr	r0, [pc, #112]	; (8002b88 <ndefCCDump+0xa0>)
 8002b16:	f7fe fd55 	bl	80015c4 <logUsart>
    switch( ctx->device.type )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d828      	bhi.n	8002b74 <ndefCCDump+0x8c>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <ndefCCDump+0x40>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b59 	.word	0x08002b59
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b69 	.word	0x08002b69
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <ndefCCDump+0x5e>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d004      	beq.n	8002b4e <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 8002b44:	e007      	b.n	8002b56 <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fe82 	bl	8002850 <ndefT2TCCDump>
                    break;
 8002b4c:	e003      	b.n	8002b56 <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ff04 	bl	800295c <ndefT4TCCDump>
                    break;
 8002b54:	bf00      	nop
            }
            break;
 8002b56:	e00e      	b.n	8002b76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff feff 	bl	800295c <ndefT4TCCDump>
            break;
 8002b5e:	e00a      	b.n	8002b76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff feb5 	bl	80028d0 <ndefT3TAIBDump>
            break;
 8002b66:	e006      	b.n	8002b76 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff43 	bl	80029f4 <ndefT5TCCDump>
            break;
 8002b6e:	e002      	b.n	8002b76 <ndefCCDump+0x8e>
        return;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <ndefCCDump+0x8e>
        default:
            break;
 8002b74:	bf00      	nop
    }
}
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20001179 	.word	0x20001179
 8002b80:	08020cf8 	.word	0x08020cf8
 8002b84:	08020d1c 	.word	0x08020d1c
 8002b88:	08020d38 	.word	0x08020d38

08002b8c <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 81d6 	beq.w	8002f48 <ndefDumpSysInfo+0x3bc>
 8002b9c:	4ba4      	ldr	r3, [pc, #656]	; (8002e30 <ndefDumpSysInfo+0x2a4>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 81ce 	bne.w	8002f48 <ndefDumpSysInfo+0x3bc>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8002bb2:	f083 0301 	eor.w	r3, r3, #1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 81c7 	bne.w	8002f4c <ndefDumpSysInfo+0x3c0>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	33be      	adds	r3, #190	; 0xbe
 8002bc2:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8002bc4:	489b      	ldr	r0, [pc, #620]	; (8002e34 <ndefDumpSysInfo+0x2a8>)
 8002bc6:	f7fe fcfd 	bl	80015c4 <logUsart>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	7b9b      	ldrb	r3, [r3, #14]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4897      	ldr	r0, [pc, #604]	; (8002e38 <ndefDumpSysInfo+0x2ac>)
 8002bdc:	f7fe fcf2 	bl	80015c4 <logUsart>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	7b9b      	ldrb	r3, [r3, #14]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	7bdb      	ldrb	r3, [r3, #15]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4892      	ldr	r0, [pc, #584]	; (8002e3c <ndefDumpSysInfo+0x2b0>)
 8002bf4:	f7fe fce6 	bl	80015c4 <logUsart>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	7b9b      	ldrb	r3, [r3, #14]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7c1b      	ldrb	r3, [r3, #16]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	488c      	ldr	r0, [pc, #560]	; (8002e40 <ndefDumpSysInfo+0x2b4>)
 8002c10:	f7fe fcd8 	bl	80015c4 <logUsart>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	7b9b      	ldrb	r3, [r3, #14]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	7c5b      	ldrb	r3, [r3, #17]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4884      	ldr	r0, [pc, #528]	; (8002e44 <ndefDumpSysInfo+0x2b8>)
 8002c32:	f7fe fcc7 	bl	80015c4 <logUsart>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	7b9b      	ldrb	r3, [r3, #14]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	7c9b      	ldrb	r3, [r3, #18]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	487e      	ldr	r0, [pc, #504]	; (8002e48 <ndefDumpSysInfo+0x2bc>)
 8002c4e:	f7fe fcb9 	bl	80015c4 <logUsart>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	7b9b      	ldrb	r3, [r3, #14]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8176 	beq.w	8002f50 <ndefDumpSysInfo+0x3c4>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	7a9b      	ldrb	r3, [r3, #10]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <ndefDumpSysInfo+0xe8>
 8002c70:	2358      	movs	r3, #88	; 0x58
 8002c72:	e000      	b.n	8002c76 <ndefDumpSysInfo+0xea>
 8002c74:	2320      	movs	r3, #32
 8002c76:	4619      	mov	r1, r3
 8002c78:	4874      	ldr	r0, [pc, #464]	; (8002e4c <ndefDumpSysInfo+0x2c0>)
 8002c7a:	f7fe fca3 	bl	80015c4 <logUsart>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	7a9b      	ldrb	r3, [r3, #10]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <ndefDumpSysInfo+0x106>
 8002c8e:	2358      	movs	r3, #88	; 0x58
 8002c90:	e000      	b.n	8002c94 <ndefDumpSysInfo+0x108>
 8002c92:	2320      	movs	r3, #32
 8002c94:	4619      	mov	r1, r3
 8002c96:	486e      	ldr	r0, [pc, #440]	; (8002e50 <ndefDumpSysInfo+0x2c4>)
 8002c98:	f7fe fc94 	bl	80015c4 <logUsart>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	7a9b      	ldrb	r3, [r3, #10]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <ndefDumpSysInfo+0x124>
 8002cac:	2358      	movs	r3, #88	; 0x58
 8002cae:	e000      	b.n	8002cb2 <ndefDumpSysInfo+0x126>
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4867      	ldr	r0, [pc, #412]	; (8002e54 <ndefDumpSysInfo+0x2c8>)
 8002cb6:	f7fe fc85 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	7a9b      	ldrb	r3, [r3, #10]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <ndefDumpSysInfo+0x142>
 8002cca:	2358      	movs	r3, #88	; 0x58
 8002ccc:	e000      	b.n	8002cd0 <ndefDumpSysInfo+0x144>
 8002cce:	2320      	movs	r3, #32
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4861      	ldr	r0, [pc, #388]	; (8002e58 <ndefDumpSysInfo+0x2cc>)
 8002cd4:	f7fe fc76 	bl	80015c4 <logUsart>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	7a9b      	ldrb	r3, [r3, #10]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <ndefDumpSysInfo+0x160>
 8002ce8:	2358      	movs	r3, #88	; 0x58
 8002cea:	e000      	b.n	8002cee <ndefDumpSysInfo+0x162>
 8002cec:	2320      	movs	r3, #32
 8002cee:	4619      	mov	r1, r3
 8002cf0:	485a      	ldr	r0, [pc, #360]	; (8002e5c <ndefDumpSysInfo+0x2d0>)
 8002cf2:	f7fe fc67 	bl	80015c4 <logUsart>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	7a9b      	ldrb	r3, [r3, #10]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <ndefDumpSysInfo+0x17e>
 8002d06:	2358      	movs	r3, #88	; 0x58
 8002d08:	e000      	b.n	8002d0c <ndefDumpSysInfo+0x180>
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4854      	ldr	r0, [pc, #336]	; (8002e60 <ndefDumpSysInfo+0x2d4>)
 8002d10:	f7fe fc58 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	7a9b      	ldrb	r3, [r3, #10]
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <ndefDumpSysInfo+0x19c>
 8002d24:	2358      	movs	r3, #88	; 0x58
 8002d26:	e000      	b.n	8002d2a <ndefDumpSysInfo+0x19e>
 8002d28:	2320      	movs	r3, #32
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	484d      	ldr	r0, [pc, #308]	; (8002e64 <ndefDumpSysInfo+0x2d8>)
 8002d2e:	f7fe fc49 	bl	80015c4 <logUsart>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	7a9b      	ldrb	r3, [r3, #10]
 8002d36:	09db      	lsrs	r3, r3, #7
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <ndefDumpSysInfo+0x1ba>
 8002d42:	2358      	movs	r3, #88	; 0x58
 8002d44:	e000      	b.n	8002d48 <ndefDumpSysInfo+0x1bc>
 8002d46:	2320      	movs	r3, #32
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4847      	ldr	r0, [pc, #284]	; (8002e68 <ndefDumpSysInfo+0x2dc>)
 8002d4c:	f7fe fc3a 	bl	80015c4 <logUsart>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	7adb      	ldrb	r3, [r3, #11]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <ndefDumpSysInfo+0x1d4>
 8002d5c:	2358      	movs	r3, #88	; 0x58
 8002d5e:	e000      	b.n	8002d62 <ndefDumpSysInfo+0x1d6>
 8002d60:	2320      	movs	r3, #32
 8002d62:	4619      	mov	r1, r3
 8002d64:	4841      	ldr	r0, [pc, #260]	; (8002e6c <ndefDumpSysInfo+0x2e0>)
 8002d66:	f7fe fc2d 	bl	80015c4 <logUsart>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	7adb      	ldrb	r3, [r3, #11]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <ndefDumpSysInfo+0x1f2>
 8002d7a:	2358      	movs	r3, #88	; 0x58
 8002d7c:	e000      	b.n	8002d80 <ndefDumpSysInfo+0x1f4>
 8002d7e:	2320      	movs	r3, #32
 8002d80:	4619      	mov	r1, r3
 8002d82:	483b      	ldr	r0, [pc, #236]	; (8002e70 <ndefDumpSysInfo+0x2e4>)
 8002d84:	f7fe fc1e 	bl	80015c4 <logUsart>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	7adb      	ldrb	r3, [r3, #11]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <ndefDumpSysInfo+0x210>
 8002d98:	2358      	movs	r3, #88	; 0x58
 8002d9a:	e000      	b.n	8002d9e <ndefDumpSysInfo+0x212>
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4834      	ldr	r0, [pc, #208]	; (8002e74 <ndefDumpSysInfo+0x2e8>)
 8002da2:	f7fe fc0f 	bl	80015c4 <logUsart>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	7adb      	ldrb	r3, [r3, #11]
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <ndefDumpSysInfo+0x22e>
 8002db6:	2358      	movs	r3, #88	; 0x58
 8002db8:	e000      	b.n	8002dbc <ndefDumpSysInfo+0x230>
 8002dba:	2320      	movs	r3, #32
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	482e      	ldr	r0, [pc, #184]	; (8002e78 <ndefDumpSysInfo+0x2ec>)
 8002dc0:	f7fe fc00 	bl	80015c4 <logUsart>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	7adb      	ldrb	r3, [r3, #11]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <ndefDumpSysInfo+0x24c>
 8002dd4:	2358      	movs	r3, #88	; 0x58
 8002dd6:	e000      	b.n	8002dda <ndefDumpSysInfo+0x24e>
 8002dd8:	2320      	movs	r3, #32
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4827      	ldr	r0, [pc, #156]	; (8002e7c <ndefDumpSysInfo+0x2f0>)
 8002dde:	f7fe fbf1 	bl	80015c4 <logUsart>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	7adb      	ldrb	r3, [r3, #11]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <ndefDumpSysInfo+0x26a>
 8002df2:	2358      	movs	r3, #88	; 0x58
 8002df4:	e000      	b.n	8002df8 <ndefDumpSysInfo+0x26c>
 8002df6:	2320      	movs	r3, #32
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4821      	ldr	r0, [pc, #132]	; (8002e80 <ndefDumpSysInfo+0x2f4>)
 8002dfc:	f7fe fbe2 	bl	80015c4 <logUsart>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	7adb      	ldrb	r3, [r3, #11]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <ndefDumpSysInfo+0x288>
 8002e10:	2358      	movs	r3, #88	; 0x58
 8002e12:	e000      	b.n	8002e16 <ndefDumpSysInfo+0x28a>
 8002e14:	2320      	movs	r3, #32
 8002e16:	4619      	mov	r1, r3
 8002e18:	481a      	ldr	r0, [pc, #104]	; (8002e84 <ndefDumpSysInfo+0x2f8>)
 8002e1a:	f7fe fbd3 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	7b1b      	ldrb	r3, [r3, #12]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02e      	beq.n	8002e88 <ndefDumpSysInfo+0x2fc>
 8002e2a:	2358      	movs	r3, #88	; 0x58
 8002e2c:	e02d      	b.n	8002e8a <ndefDumpSysInfo+0x2fe>
 8002e2e:	bf00      	nop
 8002e30:	20001179 	.word	0x20001179
 8002e34:	08020d3c 	.word	0x08020d3c
 8002e38:	08020d54 	.word	0x08020d54
 8002e3c:	08020d78 	.word	0x08020d78
 8002e40:	08020d8c 	.word	0x08020d8c
 8002e44:	08020d9c 	.word	0x08020d9c
 8002e48:	08020dc0 	.word	0x08020dc0
 8002e4c:	08020dd4 	.word	0x08020dd4
 8002e50:	08020e00 	.word	0x08020e00
 8002e54:	08020e2c 	.word	0x08020e2c
 8002e58:	08020e58 	.word	0x08020e58
 8002e5c:	08020e84 	.word	0x08020e84
 8002e60:	08020eb0 	.word	0x08020eb0
 8002e64:	08020edc 	.word	0x08020edc
 8002e68:	08020f08 	.word	0x08020f08
 8002e6c:	08020f34 	.word	0x08020f34
 8002e70:	08020f60 	.word	0x08020f60
 8002e74:	08020f8c 	.word	0x08020f8c
 8002e78:	08020fb8 	.word	0x08020fb8
 8002e7c:	08020fe4 	.word	0x08020fe4
 8002e80:	08021010 	.word	0x08021010
 8002e84:	0802103c 	.word	0x0802103c
 8002e88:	2320      	movs	r3, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4832      	ldr	r0, [pc, #200]	; (8002f58 <ndefDumpSysInfo+0x3cc>)
 8002e8e:	f7fe fb99 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <ndefDumpSysInfo+0x31a>
 8002ea2:	2358      	movs	r3, #88	; 0x58
 8002ea4:	e000      	b.n	8002ea8 <ndefDumpSysInfo+0x31c>
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	482c      	ldr	r0, [pc, #176]	; (8002f5c <ndefDumpSysInfo+0x3d0>)
 8002eac:	f7fe fb8a 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	7b1b      	ldrb	r3, [r3, #12]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <ndefDumpSysInfo+0x338>
 8002ec0:	2358      	movs	r3, #88	; 0x58
 8002ec2:	e000      	b.n	8002ec6 <ndefDumpSysInfo+0x33a>
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4825      	ldr	r0, [pc, #148]	; (8002f60 <ndefDumpSysInfo+0x3d4>)
 8002eca:	f7fe fb7b 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <ndefDumpSysInfo+0x356>
 8002ede:	2358      	movs	r3, #88	; 0x58
 8002ee0:	e000      	b.n	8002ee4 <ndefDumpSysInfo+0x358>
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481f      	ldr	r0, [pc, #124]	; (8002f64 <ndefDumpSysInfo+0x3d8>)
 8002ee8:	f7fe fb6c 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	7b1b      	ldrb	r3, [r3, #12]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <ndefDumpSysInfo+0x374>
 8002efc:	2358      	movs	r3, #88	; 0x58
 8002efe:	e000      	b.n	8002f02 <ndefDumpSysInfo+0x376>
 8002f00:	2320      	movs	r3, #32
 8002f02:	4619      	mov	r1, r3
 8002f04:	4818      	ldr	r0, [pc, #96]	; (8002f68 <ndefDumpSysInfo+0x3dc>)
 8002f06:	f7fe fb5d 	bl	80015c4 <logUsart>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	7b1b      	ldrb	r3, [r3, #12]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <ndefDumpSysInfo+0x392>
 8002f1a:	2358      	movs	r3, #88	; 0x58
 8002f1c:	e000      	b.n	8002f20 <ndefDumpSysInfo+0x394>
 8002f1e:	2320      	movs	r3, #32
 8002f20:	4619      	mov	r1, r3
 8002f22:	4812      	ldr	r0, [pc, #72]	; (8002f6c <ndefDumpSysInfo+0x3e0>)
 8002f24:	f7fe fb4e 	bl	80015c4 <logUsart>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	7b1b      	ldrb	r3, [r3, #12]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <ndefDumpSysInfo+0x3b0>
 8002f38:	2358      	movs	r3, #88	; 0x58
 8002f3a:	e000      	b.n	8002f3e <ndefDumpSysInfo+0x3b2>
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480b      	ldr	r0, [pc, #44]	; (8002f70 <ndefDumpSysInfo+0x3e4>)
 8002f42:	f7fe fb3f 	bl	80015c4 <logUsart>
    }
    return;
 8002f46:	e003      	b.n	8002f50 <ndefDumpSysInfo+0x3c4>
        return;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <ndefDumpSysInfo+0x3c6>
        return;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <ndefDumpSysInfo+0x3c6>
    return;
 8002f50:	bf00      	nop
}
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	08021068 	.word	0x08021068
 8002f5c:	08021094 	.word	0x08021094
 8002f60:	080210c0 	.word	0x080210c0
 8002f64:	080210ec 	.word	0x080210ec
 8002f68:	08021118 	.word	0x08021118
 8002f6c:	08021144 	.word	0x08021144
 8002f70:	08021170 	.word	0x08021170

08002f74 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <ndefIsSTTag+0x16>
    {   
        return ret;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	e026      	b.n	8002fd8 <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d81c      	bhi.n	8002fcc <ndefIsSTTag+0x58>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <ndefIsSTTag+0x24>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002fcd 	.word	0x08002fcd
 8002fa0:	08002fcd 	.word	0x08002fcd
 8002fa4:	08002fbf 	.word	0x08002fbf
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	795b      	ldrb	r3, [r3, #5]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00f      	beq.n	8002fd0 <ndefIsSTTag+0x5c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	799b      	ldrb	r3, [r3, #6]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d10b      	bne.n	8002fd0 <ndefIsSTTag+0x5c>
            {  
                ret = true;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002fbc:	e008      	b.n	8002fd0 <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7a5b      	ldrb	r3, [r3, #9]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d106      	bne.n	8002fd4 <ndefIsSTTag+0x60>
            {  
                ret = true;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002fca:	e003      	b.n	8002fd4 <ndefIsSTTag+0x60>
        default:
            break;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <ndefIsSTTag+0x62>
            break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <ndefIsSTTag+0x62>
            break;
 8002fd4:	bf00      	nop
    }
    return (ret);
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e00c      	b.n	800300a <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 8002ff0:	f000 f814 	bl	800301c <ledsOn>
        platformDelay(100);
 8002ff4:	2064      	movs	r0, #100	; 0x64
 8002ff6:	f002 fb7b 	bl	80056f0 <HAL_Delay>

        ledsOff();
 8002ffa:	f000 f831 	bl	8003060 <ledsOff>
        platformDelay(100);
 8002ffe:	2064      	movs	r0, #100	; 0x64
 8003000:	f002 fb76 	bl	80056f0 <HAL_Delay>
    for (i = 0; i < 3; i++)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3301      	adds	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d9ef      	bls.n	8002ff0 <LedNotificationWriteDone+0xc>
    }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <ledsOn>:

static void ledsOn(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003020:	2201      	movs	r2, #1
 8003022:	2101      	movs	r1, #1
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <ledsOn+0x3c>)
 8003026:	f003 fc6e 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800302a:	2201      	movs	r2, #1
 800302c:	2110      	movs	r1, #16
 800302e:	480b      	ldr	r0, [pc, #44]	; (800305c <ledsOn+0x40>)
 8003030:	f003 fc69 	bl	8006906 <HAL_GPIO_WritePin>
    //platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003034:	2201      	movs	r2, #1
 8003036:	2110      	movs	r1, #16
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <ledsOn+0x3c>)
 800303a:	f003 fc64 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800303e:	2201      	movs	r2, #1
 8003040:	2120      	movs	r1, #32
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <ledsOn+0x3c>)
 8003044:	f003 fc5f 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8003048:	2201      	movs	r2, #1
 800304a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800304e:	4803      	ldr	r0, [pc, #12]	; (800305c <ledsOn+0x40>)
 8003050:	f003 fc59 	bl	8006906 <HAL_GPIO_WritePin>
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40020400 	.word	0x40020400
 800305c:	40020000 	.word	0x40020000

08003060 <ledsOff>:

static void ledsOff(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8003064:	2200      	movs	r2, #0
 8003066:	2101      	movs	r1, #1
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <ledsOff+0x3c>)
 800306a:	f003 fc4c 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800306e:	2200      	movs	r2, #0
 8003070:	2110      	movs	r1, #16
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <ledsOff+0x40>)
 8003074:	f003 fc47 	bl	8006906 <HAL_GPIO_WritePin>
    //platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003078:	2200      	movs	r2, #0
 800307a:	2110      	movs	r1, #16
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <ledsOff+0x3c>)
 800307e:	f003 fc42 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8003082:	2200      	movs	r2, #0
 8003084:	2120      	movs	r1, #32
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <ledsOff+0x3c>)
 8003088:	f003 fc3d 	bl	8006906 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003092:	4803      	ldr	r0, [pc, #12]	; (80030a0 <ledsOff+0x40>)
 8003094:	f003 fc37 	bl	8006906 <HAL_GPIO_WritePin>
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020000 	.word	0x40020000

080030a4 <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <isPrintableASCII+0x16>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <isPrintableASCII+0x1a>
    {
        return false;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e018      	b.n	80030f0 <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e010      	b.n	80030e6 <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b1f      	cmp	r3, #31
 80030ce:	d905      	bls.n	80030dc <isPrintableASCII+0x38>
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b7e      	cmp	r3, #126	; 0x7e
 80030da:	d901      	bls.n	80030e0 <isPrintableASCII+0x3c>
        {
            return false;
 80030dc:	2300      	movs	r3, #0
 80030de:	e007      	b.n	80030f0 <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3ea      	bcc.n	80030c4 <isPrintableASCII+0x20>
        }
    }

    return true;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b098      	sub	sp, #96	; 0x60
 8003100:	af04      	add	r7, sp, #16
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <ndefRecordDump+0x188>)
 800310a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800310e:	461d      	mov	r5, r3
 8003110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003114:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 800311c:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <ndefRecordDump+0x18c>)
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 8003126:	4859      	ldr	r0, [pc, #356]	; (800328c <ndefRecordDump+0x190>)
 8003128:	f7fe fa4c 	bl	80015c4 <logUsart>
        return ERR_NONE;
 800312c:	2300      	movs	r3, #0
 800312e:	e0a4      	b.n	800327a <ndefRecordDump+0x17e>
    }

    if (ndefHeaderIsSetMB(record))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	09db      	lsrs	r3, r3, #7
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d103      	bne.n	8003144 <ndefRecordDump+0x48>
    {
        index = 1U;
 800313c:	4b54      	ldr	r3, [pc, #336]	; (8003290 <ndefRecordDump+0x194>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e004      	b.n	800314e <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 8003144:	4b52      	ldr	r3, [pc, #328]	; (8003290 <ndefRecordDump+0x194>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a51      	ldr	r2, [pc, #324]	; (8003290 <ndefRecordDump+0x194>)
 800314c:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <ndefRecordDump+0x68>
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <ndefRecordDump+0x198>)
 8003162:	e000      	b.n	8003166 <ndefRecordDump+0x6a>
 8003164:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <ndefRecordDump+0x19c>)
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 8003168:	4b49      	ldr	r3, [pc, #292]	; (8003290 <ndefRecordDump+0x194>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316e:	4619      	mov	r1, r3
 8003170:	484a      	ldr	r0, [pc, #296]	; (800329c <ndefRecordDump+0x1a0>)
 8003172:	f7fe fa27 	bl	80015c4 <logUsart>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fba6 	bl	80038c8 <ndefRecordDumpType>
 800317c:	4603      	mov	r3, r0
 800317e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 8003188:	4845      	ldr	r0, [pc, #276]	; (80032a0 <ndefRecordDump+0x1a4>)
 800318a:	f7fe fa1b 	bl	80015c4 <logUsart>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	09db      	lsrs	r3, r3, #7
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461d      	mov	r5, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	f003 0001 	and.w	r0, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	f003 0401 	and.w	r4, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	08d2      	lsrs	r2, r2, #3
 80031bc:	f002 0201 	and.w	r2, r2, #1
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	7809      	ldrb	r1, [r1, #0]
 80031c4:	f001 0107 	and.w	r1, r1, #7
 80031c8:	9102      	str	r1, [sp, #8]
 80031ca:	9201      	str	r2, [sp, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4623      	mov	r3, r4
 80031d0:	4602      	mov	r2, r0
 80031d2:	4629      	mov	r1, r5
 80031d4:	4833      	ldr	r0, [pc, #204]	; (80032a4 <ndefRecordDump+0x1a8>)
 80031d6:	f7fe f9f5 	bl	80015c4 <logUsart>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 80031da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <ndefRecordDump+0xec>
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d047      	beq.n	8003278 <ndefRecordDump+0x17c>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3350      	adds	r3, #80	; 0x50
 80031f4:	443b      	add	r3, r7
 80031f6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80031fa:	4619      	mov	r1, r3
 80031fc:	482a      	ldr	r0, [pc, #168]	; (80032a8 <ndefRecordDump+0x1ac>)
 80031fe:	f7fe f9e1 	bl	80015c4 <logUsart>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 8003202:	f107 021c 	add.w	r2, r7, #28
 8003206:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f007 fcb5 	bl	800ab7c <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <ndefRecordDump+0x12e>
 800321a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <ndefRecordDump+0x12e>
        {
            platformLog(" Empty NDEF record\r\n");
 8003222:	4822      	ldr	r0, [pc, #136]	; (80032ac <ndefRecordDump+0x1b0>)
 8003224:	f7fe f9ce 	bl	80015c4 <logUsart>
 8003228:	e006      	b.n	8003238 <ndefRecordDump+0x13c>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <ndefRecordDump+0x1b4>)
 8003230:	4619      	mov	r1, r3
 8003232:	4820      	ldr	r0, [pc, #128]	; (80032b4 <ndefRecordDump+0x1b8>)
 8003234:	f000 fd2e 	bl	8003c94 <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <ndefRecordDump+0x162>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f007 fd21 	bl	800ac92 <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <ndefRecordDump+0x1b4>)
 8003256:	4619      	mov	r1, r3
 8003258:	4817      	ldr	r0, [pc, #92]	; (80032b8 <ndefRecordDump+0x1bc>)
 800325a:	f000 fd1b 	bl	8003c94 <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f007 fd66 	bl	800ad36 <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	4812      	ldr	r0, [pc, #72]	; (80032bc <ndefRecordDump+0x1c0>)
 8003274:	f000 fbf8 	bl	8003a68 <ndefBufferDump>
    }

    return ERR_NONE;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3750      	adds	r7, #80	; 0x50
 800327e:	46bd      	mov	sp, r7
 8003280:	bdb0      	pop	{r4, r5, r7, pc}
 8003282:	bf00      	nop
 8003284:	080213d0 	.word	0x080213d0
 8003288:	08021304 	.word	0x08021304
 800328c:	08021308 	.word	0x08021308
 8003290:	20003190 	.word	0x20003190
 8003294:	08021314 	.word	0x08021314
 8003298:	08021324 	.word	0x08021324
 800329c:	08021338 	.word	0x08021338
 80032a0:	08021348 	.word	0x08021348
 80032a4:	08021360 	.word	0x08021360
 80032a8:	0802137c 	.word	0x0802137c
 80032ac:	08021394 	.word	0x08021394
 80032b0:	080213ac 	.word	0x080213ac
 80032b4:	080213b0 	.word	0x080213b0
 80032b8:	080213bc 	.word	0x080213bc
 80032bc:	080213c4 	.word	0x080213c4

080032c0 <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 80032d2:	4816      	ldr	r0, [pc, #88]	; (800332c <ndefMessageDump+0x6c>)
 80032d4:	f7fe f976 	bl	80015c4 <logUsart>
        return ERR_NONE;
 80032d8:	2300      	movs	r3, #0
 80032da:	e023      	b.n	8003324 <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 80032dc:	4814      	ldr	r0, [pc, #80]	; (8003330 <ndefMessageDump+0x70>)
 80032de:	f7fe f971 	bl	80015c4 <logUsart>
    }

    record = ndefMessageGetFirstRecord(message);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <ndefMessageDump+0x2e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	e000      	b.n	80032f0 <ndefMessageDump+0x30>
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 80032f2:	e013      	b.n	800331c <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7ff feff 	bl	80030fc <ndefRecordDump>
 80032fe:	4603      	mov	r3, r0
 8003300:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <ndefMessageDump+0x4c>
        {
            return err;
 8003308:	897b      	ldrh	r3, [r7, #10]
 800330a:	e00b      	b.n	8003324 <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <ndefMessageDump+0x58>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	e000      	b.n	800331a <ndefMessageDump+0x5a>
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e8      	bne.n	80032f4 <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	080213f0 	.word	0x080213f0
 8003330:	08021408 	.word	0x08021408

08003334 <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 8003342:	2307      	movs	r3, #7
 8003344:	e009      	b.n	800335a <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 800334e:	2307      	movs	r3, #7
 8003350:	e003      	b.n	800335a <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <ndefEmptyTypeDump+0x30>)
 8003354:	f7fe f936 	bl	80015c4 <logUsart>

    return ERR_NONE;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08021420 	.word	0x08021420

08003368 <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b094      	sub	sp, #80	; 0x50
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 8003370:	4b40      	ldr	r3, [pc, #256]	; (8003474 <ndefRtdDeviceInfoDump+0x10c>)
 8003372:	f107 040c 	add.w	r4, r7, #12
 8003376:	461d      	mov	r5, r3
 8003378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 8003386:	2307      	movs	r3, #7
 8003388:	e070      	b.n	800346c <ndefRtdDeviceInfoDump+0x104>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 8003392:	2307      	movs	r3, #7
 8003394:	e06a      	b.n	800346c <ndefRtdDeviceInfoDump+0x104>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f009 f97f 	bl	800c6a0 <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 80033a2:	4835      	ldr	r0, [pc, #212]	; (8003478 <ndefRtdDeviceInfoDump+0x110>)
 80033a4:	f7fe f90e 	bl	80015c4 <logUsart>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	e05a      	b.n	8003464 <ndefRtdDeviceInfoDump+0xfc>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 80033ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	3350      	adds	r3, #80	; 0x50
 80033b4:	443b      	add	r3, r7
 80033b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04f      	beq.n	800345e <ndefRtdDeviceInfoDump+0xf6>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	3350      	adds	r3, #80	; 0x50
 80033c4:	443b      	add	r3, r7
 80033c6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	3350      	adds	r3, #80	; 0x50
 80033ce:	443b      	add	r3, r7
 80033d0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4829      	ldr	r0, [pc, #164]	; (800347c <ndefRtdDeviceInfoDump+0x114>)
 80033d8:	f7fe f8f4 	bl	80015c4 <logUsart>

            if (type != NDEF_DEVICE_INFO_UUID)
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d01d      	beq.n	800341e <ndefRtdDeviceInfoDump+0xb6>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e6:	e00f      	b.n	8003408 <ndefRtdDeviceInfoDump+0xa0>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 80033e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	3350      	adds	r3, #80	; 0x50
 80033ee:	443b      	add	r3, r7
 80033f0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	4413      	add	r3, r2
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4820      	ldr	r0, [pc, #128]	; (8003480 <ndefRtdDeviceInfoDump+0x118>)
 80033fe:	f7fe f8e1 	bl	80015c4 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003404:	3301      	adds	r3, #1
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	3350      	adds	r3, #80	; 0x50
 800340e:	443b      	add	r3, r7
 8003410:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8003414:	461a      	mov	r2, r3
 8003416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003418:	4293      	cmp	r3, r2
 800341a:	d3e5      	bcc.n	80033e8 <ndefRtdDeviceInfoDump+0x80>
 800341c:	e01c      	b.n	8003458 <ndefRtdDeviceInfoDump+0xf0>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800341e:	2300      	movs	r3, #0
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
 8003422:	e00f      	b.n	8003444 <ndefRtdDeviceInfoDump+0xdc>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 8003424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3350      	adds	r3, #80	; 0x50
 800342a:	443b      	add	r3, r7
 800342c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8003430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4812      	ldr	r0, [pc, #72]	; (8003484 <ndefRtdDeviceInfoDump+0x11c>)
 800343a:	f7fe f8c3 	bl	80015c4 <logUsart>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	3301      	adds	r3, #1
 8003442:	64bb      	str	r3, [r7, #72]	; 0x48
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3350      	adds	r3, #80	; 0x50
 800344a:	443b      	add	r3, r7
 800344c:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8003450:	461a      	mov	r2, r3
 8003452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003454:	4293      	cmp	r3, r2
 8003456:	d3e5      	bcc.n	8003424 <ndefRtdDeviceInfoDump+0xbc>
                }
            }
            platformLog("\r\n");
 8003458:	480b      	ldr	r0, [pc, #44]	; (8003488 <ndefRtdDeviceInfoDump+0x120>)
 800345a:	f7fe f8b3 	bl	80015c4 <logUsart>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	3301      	adds	r3, #1
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003466:	2b04      	cmp	r3, #4
 8003468:	d9a1      	bls.n	80033ae <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3750      	adds	r7, #80	; 0x50
 8003470:	46bd      	mov	sp, r7
 8003472:	bdb0      	pop	{r4, r5, r7, pc}
 8003474:	08021460 	.word	0x08021460
 8003478:	08021430 	.word	0x08021430
 800347c:	08021448 	.word	0x08021448
 8003480:	08021450 	.word	0x08021450
 8003484:	08021454 	.word	0x08021454
 8003488:	0802145c 	.word	0x0802145c

0800348c <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 800349a:	2307      	movs	r3, #7
 800349c:	e027      	b.n	80034ee <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d001      	beq.n	80034aa <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 80034a6:	2307      	movs	r3, #7
 80034a8:	e021      	b.n	80034ee <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	f107 0214 	add.w	r2, r7, #20
 80034b2:	f107 011f 	add.w	r1, r7, #31
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f009 fb24 	bl	800cb04 <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <ndefRtdTextDump+0x6c>)
 80034c2:	4619      	mov	r1, r3
 80034c4:	480d      	ldr	r0, [pc, #52]	; (80034fc <ndefRtdTextDump+0x70>)
 80034c6:	f000 fb33 	bl	8003b30 <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <ndefRtdTextDump+0x48>
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <ndefRtdTextDump+0x74>)
 80034d2:	e000      	b.n	80034d6 <ndefRtdTextDump+0x4a>
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <ndefRtdTextDump+0x78>)
 80034d6:	4619      	mov	r1, r3
 80034d8:	480b      	ldr	r0, [pc, #44]	; (8003508 <ndefRtdTextDump+0x7c>)
 80034da:	f7fe f873 	bl	80015c4 <logUsart>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <ndefRtdTextDump+0x80>)
 80034e4:	4619      	mov	r1, r3
 80034e6:	480a      	ldr	r0, [pc, #40]	; (8003510 <ndefRtdTextDump+0x84>)
 80034e8:	f000 fbd4 	bl	8003c94 <ndefBuffer8Print>

    return ERR_NONE;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	08021304 	.word	0x08021304
 80034fc:	08021474 	.word	0x08021474
 8003500:	08021480 	.word	0x08021480
 8003504:	08021488 	.word	0x08021488
 8003508:	08021490 	.word	0x08021490
 800350c:	08021498 	.word	0x08021498
 8003510:	080214a0 	.word	0x080214a0

08003514 <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 8003522:	2307      	movs	r3, #7
 8003524:	e01c      	b.n	8003560 <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d001      	beq.n	8003532 <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 800352e:	2307      	movs	r3, #7
 8003530:	e016      	b.n	8003560 <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 8003532:	f107 0208 	add.w	r2, r7, #8
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f009 fcc7 	bl	800ced0 <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <ndefRtdUriDump+0x54>)
 8003548:	4619      	mov	r1, r3
 800354a:	4808      	ldr	r0, [pc, #32]	; (800356c <ndefRtdUriDump+0x58>)
 800354c:	f000 faf0 	bl	8003b30 <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <ndefRtdUriDump+0x5c>)
 8003556:	4619      	mov	r1, r3
 8003558:	4806      	ldr	r0, [pc, #24]	; (8003574 <ndefRtdUriDump+0x60>)
 800355a:	f000 fae9 	bl	8003b30 <ndefBufferPrint>

    return ERR_NONE;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	080214b4 	.word	0x080214b4
 800356c:	080214b8 	.word	0x080214b8
 8003570:	0802145c 	.word	0x0802145c
 8003574:	08021304 	.word	0x08021304

08003578 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 8003586:	2307      	movs	r3, #7
 8003588:	e013      	b.n	80035b2 <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d001      	beq.n	8003596 <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 8003592:	2307      	movs	r3, #7
 8003594:	e00d      	b.n	80035b2 <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f009 fd95 	bl	800d0cc <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <ndefRtdAarDump+0x44>)
 80035a8:	4619      	mov	r1, r3
 80035aa:	4805      	ldr	r0, [pc, #20]	; (80035c0 <ndefRtdAarDump+0x48>)
 80035ac:	f000 fac0 	bl	8003b30 <ndefBufferPrint>

    return ERR_NONE;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	0802145c 	.word	0x0802145c
 80035c0:	080214c0 	.word	0x080214c0

080035c4 <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b096      	sub	sp, #88	; 0x58
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <ndefMediaVCardTranslate+0xb8>)
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	4611      	mov	r1, r2
 80035d6:	2248      	movs	r2, #72	; 0x48
 80035d8:	4618      	mov	r0, r3
 80035da:	f019 ffa5 	bl	801d528 <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <ndefMediaVCardTranslate+0x26>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 80035ea:	230b      	movs	r3, #11
 80035ec:	e041      	b.n	8003672 <ndefMediaVCardTranslate+0xae>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	657b      	str	r3, [r7, #84]	; 0x54
 80035f2:	e032      	b.n	800365a <ndefMediaVCardTranslate+0x96>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681c      	ldr	r4, [r3, #0]
 80035f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	3358      	adds	r3, #88	; 0x58
 80035fe:	443b      	add	r3, r7
 8003600:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8003604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	3358      	adds	r3, #88	; 0x58
 800360a:	443b      	add	r3, r7
 800360c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc fdb5 	bl	8000180 <strlen>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	4629      	mov	r1, r5
 800361c:	4620      	mov	r0, r4
 800361e:	f019 ff73 	bl	801d508 <memcmp>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d115      	bne.n	8003654 <ndefMediaVCardTranslate+0x90>
        {
            bufTranslation->buffer = translate[i].english;
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3358      	adds	r3, #88	; 0x58
 800362e:	443b      	add	r3, r7
 8003630:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 8003638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3358      	adds	r3, #88	; 0x58
 800363e:	443b      	add	r3, r7
 8003640:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc fd9b 	bl	8000180 <strlen>
 800364a:	4602      	mov	r2, r0
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 8003650:	2300      	movs	r3, #0
 8003652:	e00e      	b.n	8003672 <ndefMediaVCardTranslate+0xae>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 8003654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003656:	3301      	adds	r3, #1
 8003658:	657b      	str	r3, [r7, #84]	; 0x54
 800365a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365c:	2b08      	cmp	r3, #8
 800365e:	d9c9      	bls.n	80035f4 <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3758      	adds	r7, #88	; 0x58
 8003676:	46bd      	mov	sp, r7
 8003678:	bdb0      	pop	{r4, r5, r7, pc}
 800367a:	bf00      	nop
 800367c:	080214ec 	.word	0x080214ec

08003680 <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b0a6      	sub	sp, #152	; 0x98
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 8003688:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <ndefMediaVCardDump+0x184>)
 800368a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800368e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003692:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 8003696:	4a5c      	ldr	r2, [pc, #368]	; (8003808 <ndefMediaVCardDump+0x188>)
 8003698:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800369c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a0:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 80036a4:	4a59      	ldr	r2, [pc, #356]	; (800380c <ndefMediaVCardDump+0x18c>)
 80036a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ae:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 80036b2:	4a57      	ldr	r2, [pc, #348]	; (8003810 <ndefMediaVCardDump+0x190>)
 80036b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036bc:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 80036c0:	4a54      	ldr	r2, [pc, #336]	; (8003814 <ndefMediaVCardDump+0x194>)
 80036c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ca:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <ndefMediaVCardDump+0x198>)
 80036d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80036d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036d8:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 80036dc:	4a4f      	ldr	r2, [pc, #316]	; (800381c <ndefMediaVCardDump+0x19c>)
 80036de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036e6:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 80036ea:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <ndefMediaVCardDump+0x1a0>)
 80036ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036f4:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <ndefMediaVCardDump+0x1a4>)
 80036fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003702:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 8003706:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003718:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
 800371e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
 8003724:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
 800372a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003730:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003734:	643b      	str	r3, [r7, #64]	; 0x40
 8003736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 8003742:	2307      	movs	r3, #7
 8003744:	e059      	b.n	80037fa <ndefMediaVCardDump+0x17a>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d001      	beq.n	8003752 <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 800374e:	2307      	movs	r3, #7
 8003750:	e053      	b.n	80037fa <ndefMediaVCardDump+0x17a>
    }

    platformLog(" vCard decoded: \r\n");
 8003752:	4835      	ldr	r0, [pc, #212]	; (8003828 <ndefMediaVCardDump+0x1a8>)
 8003754:	f7fd ff36 	bl	80015c4 <logUsart>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800375e:	e047      	b.n	80037f0 <ndefMediaVCardDump+0x170>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8003760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	3398      	adds	r3, #152	; 0x98
 8003768:	443b      	add	r3, r7
 800376a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800376e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	f107 021c 	add.w	r2, r7, #28
 800377a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f008 fb7a 	bl	800be78 <ndefGetVCard>

        if (bufValue.buffer != NULL)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02d      	beq.n	80037e6 <ndefMediaVCardDump+0x166>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	4619      	mov	r1, r3
 8003790:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003794:	f7ff ff16 	bl	80035c4 <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <ndefMediaVCardDump+0x1ac>)
 800379e:	4619      	mov	r1, r3
 80037a0:	4823      	ldr	r0, [pc, #140]	; (8003830 <ndefMediaVCardDump+0x1b0>)
 80037a2:	f000 f9c5 	bl	8003b30 <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <ndefMediaVCardDump+0x13a>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <ndefMediaVCardDump+0x1b4>)
 80037b2:	4619      	mov	r1, r3
 80037b4:	4820      	ldr	r0, [pc, #128]	; (8003838 <ndefMediaVCardDump+0x1b8>)
 80037b6:	f000 f9bb 	bl	8003b30 <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 80037ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037c4:	4618      	mov	r0, r3
 80037c6:	f019 fe9f 	bl	801d508 <memcmp>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <ndefMediaVCardDump+0x160>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4a19      	ldr	r2, [pc, #100]	; (800383c <ndefMediaVCardDump+0x1bc>)
 80037d6:	4619      	mov	r1, r3
 80037d8:	4819      	ldr	r0, [pc, #100]	; (8003840 <ndefMediaVCardDump+0x1c0>)
 80037da:	f000 f9a9 	bl	8003b30 <ndefBufferPrint>
 80037de:	e002      	b.n	80037e6 <ndefMediaVCardDump+0x166>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <ndefMediaVCardDump+0x1c4>)
 80037e2:	f7fd feef 	bl	80015c4 <logUsart>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 80037e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037ea:	3301      	adds	r3, #1
 80037ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d9b3      	bls.n	8003760 <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3798      	adds	r7, #152	; 0x98
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08021570 	.word	0x08021570
 8003808:	08021578 	.word	0x08021578
 800380c:	08021580 	.word	0x08021580
 8003810:	08021588 	.word	0x08021588
 8003814:	08021590 	.word	0x08021590
 8003818:	08021598 	.word	0x08021598
 800381c:	080215a0 	.word	0x080215a0
 8003820:	080215a8 	.word	0x080215a8
 8003824:	080215b0 	.word	0x080215b0
 8003828:	08021534 	.word	0x08021534
 800382c:	08021304 	.word	0x08021304
 8003830:	08021548 	.word	0x08021548
 8003834:	080214b4 	.word	0x080214b4
 8003838:	0802154c 	.word	0x0802154c
 800383c:	0802145c 	.word	0x0802145c
 8003840:	08021550 	.word	0x08021550
 8003844:	08021554 	.word	0x08021554

08003848 <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 8003856:	2307      	movs	r3, #7
 8003858:	e028      	b.n	80038ac <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b07      	cmp	r3, #7
 8003860:	d001      	beq.n	8003866 <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 8003862:	2307      	movs	r3, #7
 8003864:	e022      	b.n	80038ac <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f007 fe57 	bl	800b520 <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 8003872:	4810      	ldr	r0, [pc, #64]	; (80038b4 <ndefMediaWifiDump+0x6c>)
 8003874:	f7fd fea6 	bl	80015c4 <logUsart>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2200      	movs	r2, #0
 800387e:	4619      	mov	r1, r3
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <ndefMediaWifiDump+0x70>)
 8003882:	f000 f8f1 	bl	8003a68 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	3308      	adds	r3, #8
 800388c:	2200      	movs	r2, #0
 800388e:	4619      	mov	r1, r3
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <ndefMediaWifiDump+0x74>)
 8003892:	f000 f8e9 	bl	8003a68 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 8003896:	7f3b      	ldrb	r3, [r7, #28]
 8003898:	4619      	mov	r1, r3
 800389a:	4809      	ldr	r0, [pc, #36]	; (80038c0 <ndefMediaWifiDump+0x78>)
 800389c:	f7fd fe92 	bl	80015c4 <logUsart>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 80038a0:	7f7b      	ldrb	r3, [r7, #29]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4807      	ldr	r0, [pc, #28]	; (80038c4 <ndefMediaWifiDump+0x7c>)
 80038a6:	f7fd fe8d 	bl	80015c4 <logUsart>

    return ERR_NONE;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	080215b8 	.word	0x080215b8
 80038b8:	080215cc 	.word	0x080215cc
 80038bc:	080215dc 	.word	0x080215dc
 80038c0:	080215ec 	.word	0x080215ec
 80038c4:	08021604 	.word	0x08021604

080038c8 <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b0c8      	sub	sp, #288	; 0x120
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80038d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038d6:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 80038d8:	f107 020c 	add.w	r2, r7, #12
 80038dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80038e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038e4:	4611      	mov	r1, r2
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	f007 ffec 	bl	800b8c4 <ndefRecordToType>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 80038f2:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <ndefRecordDumpType+0x38>
    {
        return err;
 80038fa:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80038fe:	e02d      	b.n	800395c <ndefRecordDumpType+0x94>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003906:	e024      	b.n	8003952 <ndefRecordDumpType+0x8a>
    {
        if (type.id == typeDumpTable[i].typeId)
 8003908:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800390c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	4915      	ldr	r1, [pc, #84]	; (8003968 <ndefRecordDumpType+0xa0>)
 8003914:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003918:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800391c:	429a      	cmp	r2, r3
 800391e:	d113      	bne.n	8003948 <ndefRecordDumpType+0x80>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <ndefRecordDumpType+0xa0>)
 8003922:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <ndefRecordDumpType+0x80>
            {
                return typeDumpTable[i].dump(&type);
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <ndefRecordDumpType+0xa0>)
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f107 020c 	add.w	r2, r7, #12
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
 8003944:	4603      	mov	r3, r0
 8003946:	e009      	b.n	800395c <ndefRecordDumpType+0x94>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 8003948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394c:	3301      	adds	r3, #1
 800394e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003952:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003956:	2b06      	cmp	r3, #6
 8003958:	d9d6      	bls.n	8003908 <ndefRecordDumpType+0x40>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 800395a:	230f      	movs	r3, #15
}
 800395c:	4618      	mov	r0, r3
 800395e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	080216c4 	.word	0x080216c4

0800396c <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 8003980:	2307      	movs	r3, #7
 8003982:	e05e      	b.n	8003a42 <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4831      	ldr	r0, [pc, #196]	; (8003a4c <ndefBufferDumpLine+0xe0>)
 8003988:	f7fd fe1c 	bl	80015c4 <logUsart>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e00c      	b.n	80039ac <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4413      	add	r3, r2
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	482b      	ldr	r0, [pc, #172]	; (8003a50 <ndefBufferDumpLine+0xe4>)
 80039a2:	f7fd fe0f 	bl	80015c4 <logUsart>
    for (j = 0; j < remaining; j++)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3ee      	bcc.n	8003992 <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e005      	b.n	80039c6 <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 80039ba:	4826      	ldr	r0, [pc, #152]	; (8003a54 <ndefBufferDumpLine+0xe8>)
 80039bc:	f7fd fe02 	bl	80015c4 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3f3      	bcc.n	80039ba <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 80039d2:	4821      	ldr	r0, [pc, #132]	; (8003a58 <ndefBufferDumpLine+0xec>)
 80039d4:	f7fd fdf6 	bl	80015c4 <logUsart>
    for (j = 0; j < remaining; j++)
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e01a      	b.n	8003a14 <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fb5a 	bl	80030a4 <isPrintableASCII>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <ndefBufferDumpLine+0x98>
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	e000      	b.n	8003a06 <ndefBufferDumpLine+0x9a>
 8003a04:	232e      	movs	r3, #46	; 0x2e
 8003a06:	4619      	mov	r1, r3
 8003a08:	4814      	ldr	r0, [pc, #80]	; (8003a5c <ndefBufferDumpLine+0xf0>)
 8003a0a:	f7fd fddb 	bl	80015c4 <logUsart>
    for (j = 0; j < remaining; j++)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3e0      	bcc.n	80039de <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e005      	b.n	8003a2e <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 8003a22:	480f      	ldr	r0, [pc, #60]	; (8003a60 <ndefBufferDumpLine+0xf4>)
 8003a24:	f7fd fdce 	bl	80015c4 <logUsart>
    for (j = 0; j < lineLength - remaining; j++)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3f3      	bcc.n	8003a22 <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 8003a3a:	480a      	ldr	r0, [pc, #40]	; (8003a64 <ndefBufferDumpLine+0xf8>)
 8003a3c:	f7fd fdc2 	bl	80015c4 <logUsart>

    return ERR_NONE;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08021618 	.word	0x08021618
 8003a50:	08021624 	.word	0x08021624
 8003a54:	0802162c 	.word	0x0802162c
 8003a58:	08021630 	.word	0x08021630
 8003a5c:	08021634 	.word	0x08021634
 8003a60:	08021638 	.word	0x08021638
 8003a64:	0802163c 	.word	0x0802163c

08003a68 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8003a76:	2320      	movs	r3, #32
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <ndefBufferDump+0x22>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e045      	b.n	8003b1a <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68f9      	ldr	r1, [r7, #12]
 8003aa2:	4820      	ldr	r0, [pc, #128]	; (8003b24 <ndefBufferDump+0xbc>)
 8003aa4:	f7fd fd8e 	bl	80015c4 <logUsart>
    if (bufPayload->buffer == NULL)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8003ab0:	481d      	ldr	r0, [pc, #116]	; (8003b28 <ndefBufferDump+0xc0>)
 8003ab2:	f7fd fd87 	bl	80015c4 <logUsart>
        return ERR_NONE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e02f      	b.n	8003b1a <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8003ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d201      	bcs.n	8003ad4 <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e012      	b.n	8003b00 <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	bf28      	it	cs
 8003ae6:	4613      	movcs	r3, r2
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	f7ff ff3e 	bl	800396c <ndefBufferDumpLine>
        remaining -= lineLength;
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3e8      	bcc.n	8003ada <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d202      	bcs.n	8003b18 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 8003b12:	4806      	ldr	r0, [pc, #24]	; (8003b2c <ndefBufferDump+0xc4>)
 8003b14:	f7fd fd56 	bl	80015c4 <logUsart>
    }

    return ERR_NONE;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08021644 	.word	0x08021644
 8003b28:	08021658 	.word	0x08021658
 8003b2c:	08021678 	.word	0x08021678

08003b30 <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint8_t test = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	76fb      	strb	r3, [r7, #27]
    char valtension[5];

    line2 = ADC_GetTrimmerVoltage();
 8003b40:	f7fd fad2 	bl	80010e8 <ADC_GetTrimmerVoltage>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a4b      	ldr	r2, [pc, #300]	; (8003c74 <ndefBufferPrint+0x144>)
 8003b48:	6013      	str	r3, [r2, #0]

    sprintf (valtension, "%.2f", line2);
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <ndefBufferPrint+0x144>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fc82 	bl	8000458 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	f107 0014 	add.w	r0, r7, #20
 8003b5c:	4946      	ldr	r1, [pc, #280]	; (8003c78 <ndefBufferPrint+0x148>)
 8003b5e:	f01a f98b 	bl	801de78 <siprintf>

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <ndefBufferPrint+0x4c>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <ndefBufferPrint+0x4c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <ndefBufferPrint+0x4c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <ndefBufferPrint+0x50>
    {
        return ERR_PARAM;
 8003b7c:	2307      	movs	r3, #7
 8003b7e:	e074      	b.n	8003c6a <ndefBufferPrint+0x13a>
    }

    platformLog("%s", prefix);
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	483e      	ldr	r0, [pc, #248]	; (8003c7c <ndefBufferPrint+0x14c>)
 8003b84:	f7fd fd1e 	bl	80015c4 <logUsart>
    for (i = 0; i < bufString->length; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	e00e      	b.n	8003bac <ndefBufferPrint+0x7c>
    {
        platformLog("%c", bufString->buffer[i]);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4839      	ldr	r0, [pc, #228]	; (8003c80 <ndefBufferPrint+0x150>)
 8003b9c:	f7fd fd12 	bl	80015c4 <logUsart>
        test++;
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	76fb      	strb	r3, [r7, #27]
    for (i = 0; i < bufString->length; i++)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3eb      	bcc.n	8003b8e <ndefBufferPrint+0x5e>
    }
    platformLog("%s", suffix);
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4830      	ldr	r0, [pc, #192]	; (8003c7c <ndefBufferPrint+0x14c>)
 8003bba:	f7fd fd03 	bl	80015c4 <logUsart>

    switch(test)
 8003bbe:	7efb      	ldrb	r3, [r7, #27]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d036      	beq.n	8003c32 <ndefBufferPrint+0x102>
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	dc4b      	bgt.n	8003c60 <ndefBufferPrint+0x130>
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d002      	beq.n	8003bd2 <ndefBufferPrint+0xa2>
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d017      	beq.n	8003c00 <ndefBufferPrint+0xd0>
 8003bd0:	e046      	b.n	8003c60 <ndefBufferPrint+0x130>
            {
                case 2:
                	platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	482b      	ldr	r0, [pc, #172]	; (8003c84 <ndefBufferPrint+0x154>)
 8003bd8:	f002 fe95 	bl	8006906 <HAL_GPIO_WritePin>
                	ringbell();
 8003bdc:	f7fd fec0 	bl	8001960 <ringbell>
                	lcd_clear();
 8003be0:	f7fd fbbc 	bl	800135c <lcd_clear>
                	lcd_put_cur(1, 0);
 8003be4:	2100      	movs	r1, #0
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7fd fbcf 	bl	800138a <lcd_put_cur>
                	lcd_clear();
 8003bec:	f7fd fbb6 	bl	800135c <lcd_clear>
                	lcd_put_cur(0, 0);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fd fbc9 	bl	800138a <lcd_put_cur>
                	lcd_send_string(line1);
 8003bf8:	4823      	ldr	r0, [pc, #140]	; (8003c88 <ndefBufferPrint+0x158>)
 8003bfa:	f7fd fc22 	bl	8001442 <lcd_send_string>
                    break;
 8003bfe:	e033      	b.n	8003c68 <ndefBufferPrint+0x138>
                case 4:
                    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003c00:	2201      	movs	r2, #1
 8003c02:	2110      	movs	r1, #16
 8003c04:	481f      	ldr	r0, [pc, #124]	; (8003c84 <ndefBufferPrint+0x154>)
 8003c06:	f002 fe7e 	bl	8006906 <HAL_GPIO_WritePin>
                    ringbell();
 8003c0a:	f7fd fea9 	bl	8001960 <ringbell>
                    lcd_clear();
 8003c0e:	f7fd fba5 	bl	800135c <lcd_clear>
                    lcd_put_cur(1, 0);
 8003c12:	2100      	movs	r1, #0
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fd fbb8 	bl	800138a <lcd_put_cur>
                    lcd_clear();
 8003c1a:	f7fd fb9f 	bl	800135c <lcd_clear>
                    lcd_put_cur(0, 0);
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fd fbb2 	bl	800138a <lcd_put_cur>
                    lcd_send_string(valtension);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fc09 	bl	8001442 <lcd_send_string>
                    break;
 8003c30:	e01a      	b.n	8003c68 <ndefBufferPrint+0x138>
                case 5:
                    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8003c32:	2201      	movs	r2, #1
 8003c34:	2110      	movs	r1, #16
 8003c36:	4813      	ldr	r0, [pc, #76]	; (8003c84 <ndefBufferPrint+0x154>)
 8003c38:	f002 fe65 	bl	8006906 <HAL_GPIO_WritePin>
                    ringbell();
 8003c3c:	f7fd fe90 	bl	8001960 <ringbell>
                    lcd_clear();
 8003c40:	f7fd fb8c 	bl	800135c <lcd_clear>
                    lcd_put_cur(1, 0);
 8003c44:	2100      	movs	r1, #0
 8003c46:	2001      	movs	r0, #1
 8003c48:	f7fd fb9f 	bl	800138a <lcd_put_cur>
                    lcd_clear();
 8003c4c:	f7fd fb86 	bl	800135c <lcd_clear>
                    lcd_put_cur(0, 0);
 8003c50:	2100      	movs	r1, #0
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fd fb99 	bl	800138a <lcd_put_cur>
                    lcd_send_string(line3);
 8003c58:	480c      	ldr	r0, [pc, #48]	; (8003c8c <ndefBufferPrint+0x15c>)
 8003c5a:	f7fd fbf2 	bl	8001442 <lcd_send_string>
                    break;
 8003c5e:	e003      	b.n	8003c68 <ndefBufferPrint+0x138>

                default:
                	platformLog("Selection exit\r\n");
 8003c60:	480b      	ldr	r0, [pc, #44]	; (8003c90 <ndefBufferPrint+0x160>)
 8003c62:	f7fd fcaf 	bl	80015c4 <logUsart>
                    break;
 8003c66:	bf00      	nop
            }

    //platformLog("%d\n\r", test);

    return ERR_NONE;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000318c 	.word	0x2000318c
 8003c78:	0802168c 	.word	0x0802168c
 8003c7c:	08021694 	.word	0x08021694
 8003c80:	08021450 	.word	0x08021450
 8003c84:	40020400 	.word	0x40020400
 8003c88:	200000a4 	.word	0x200000a4
 8003c8c:	200000ac 	.word	0x200000ac
 8003c90:	08021698 	.word	0x08021698

08003c94 <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00d      	b.n	8003cc6 <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	791b      	ldrb	r3, [r3, #4]
 8003cb4:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8003cb6:	f107 0310 	add.w	r3, r7, #16
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff36 	bl	8003b30 <ndefBufferPrint>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cd6:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <MX_SPI1_Init+0x68>)
 8003cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d04:	2218      	movs	r2, #24
 8003d06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d1c:	220a      	movs	r2, #10
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d20:	4804      	ldr	r0, [pc, #16]	; (8003d34 <MX_SPI1_Init+0x64>)
 8003d22:	f005 fd45 	bl	80097b0 <HAL_SPI_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d2c:	f7fd fe52 	bl	80019d4 <Error_Handler>
  }

}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20003260 	.word	0x20003260
 8003d38:	40013000 	.word	0x40013000

08003d3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_SPI_MspInit+0x7c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d127      	bne.n	8003dae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	61d3      	str	r3, [r2, #28]
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_SPI_MspInit+0x80>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d8e:	23e0      	movs	r3, #224	; 0xe0
 8003d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d9e:	2305      	movs	r3, #5
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	4619      	mov	r1, r3
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <HAL_SPI_MspInit+0x84>)
 8003daa:	f002 fc05 	bl	80065b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003dae:	bf00      	nop
 8003db0:	3728      	adds	r7, #40	; 0x28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40013000 	.word	0x40013000
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40020000 	.word	0x40020000

08003dc4 <spiInit>:
  }
}

/* USER CODE BEGIN 1 */
void spiInit(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <spiInit+0x28>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	2000325c 	.word	0x2000325c

08003df0 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <spiTxRx+0x6c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <spiTxRx+0x1a>
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e024      	b.n	8003e54 <spiTxRx+0x64>

  if(length > SPI_BUF_LEN)
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b61      	cmp	r3, #97	; 0x61
 8003e0e:	d901      	bls.n	8003e14 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01f      	b.n	8003e54 <spiTxRx+0x64>
  }

  /* Initialize Tx data*/
  if(txData != NULL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	480f      	ldr	r0, [pc, #60]	; (8003e60 <spiTxRx+0x70>)
 8003e22:	f019 fb81 	bl	801d528 <memcpy>
 8003e26:	e005      	b.n	8003e34 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	480c      	ldr	r0, [pc, #48]	; (8003e60 <spiTxRx+0x70>)
 8003e30:	f019 fba2 	bl	801d578 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <spiTxRx+0x6c>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <spiTxRx+0x52>
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	e000      	b.n	8003e44 <spiTxRx+0x54>
 8003e42:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <spiTxRx+0x74>)
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e4a:	9100      	str	r1, [sp, #0]
 8003e4c:	4904      	ldr	r1, [pc, #16]	; (8003e60 <spiTxRx+0x70>)
 8003e4e:	f005 fd38 	bl	80098c2 <HAL_SPI_TransmitReceive>
 8003e52:	4603      	mov	r3, r0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000325c 	.word	0x2000325c
 8003e60:	20003194 	.word	0x20003194
 8003e64:	200031f8 	.word	0x200031f8

08003e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e78:	6253      	str	r3, [r2, #36]	; 0x24
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6213      	str	r3, [r2, #32]
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6253      	str	r3, [r2, #36]	; 0x24
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_MspInit+0x5c>)
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003eb6:	2007      	movs	r0, #7
 8003eb8:	f002 f93c 	bl	8006134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <NMI_Handler+0x4>

08003ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed2:	e7fe      	b.n	8003ed2 <HardFault_Handler+0x4>

08003ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <MemManage_Handler+0x4>

08003eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <BusFault_Handler+0x4>

08003ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <UsageFault_Handler+0x4>

08003ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f0e:	f001 fbd3 	bl	80056b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f002 fd24 	bl	8006968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 8003f20:	f001 f9c2 	bl	80052a8 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <DMA1_Channel1_IRQHandler+0x10>)
 8003f2e:	f002 fa58 	bl	80063e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	2000036c 	.word	0x2000036c

08003f3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <I2C1_EV_IRQHandler+0x10>)
 8003f42:	f002 ff75 	bl	8006e30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200003b0 	.word	0x200003b0

08003f50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <I2C1_ER_IRQHandler+0x10>)
 8003f56:	f003 f8dc 	bl	8007112 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200003b0 	.word	0x200003b0

08003f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
	return 1;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <_kill>:

int _kill(int pid, int sig)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f7c:	f019 fa9a 	bl	801d4b4 <__errno>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2216      	movs	r2, #22
 8003f84:	601a      	str	r2, [r3, #0]
	return -1;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_exit>:

void _exit (int status)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffe7 	bl	8003f72 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fa4:	e7fe      	b.n	8003fa4 <_exit+0x12>

08003fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e00a      	b.n	8003fce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fb8:	f3af 8000 	nop.w
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	60ba      	str	r2, [r7, #8]
 8003fc4:	b2ca      	uxtb	r2, r1
 8003fc6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	dbf0      	blt.n	8003fb8 <_read+0x12>
	}

return len;
 8003fd6:	687b      	ldr	r3, [r7, #4]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e009      	b.n	8004006 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd fc9e 	bl	800193c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	dbf1      	blt.n	8003ff2 <_write+0x12>
	}
	return len;
 800400e:	687b      	ldr	r3, [r7, #4]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_close>:

int _close(int file)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	return -1;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800403e:	605a      	str	r2, [r3, #4]
	return 0;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <_isatty>:

int _isatty(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	return 1;
 8004054:	2301      	movs	r3, #1
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	return 0;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <_sbrk+0x5c>)
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <_sbrk+0x60>)
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800408c:	4b13      	ldr	r3, [pc, #76]	; (80040dc <_sbrk+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <_sbrk+0x64>)
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <_sbrk+0x68>)
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <_sbrk+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d207      	bcs.n	80040b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040a8:	f019 fa04 	bl	801d4b4 <__errno>
 80040ac:	4603      	mov	r3, r0
 80040ae:	220c      	movs	r2, #12
 80040b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e009      	b.n	80040cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <_sbrk+0x64>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <_sbrk+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <_sbrk+0x64>)
 80040c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20014000 	.word	0x20014000
 80040d8:	00000400 	.word	0x00000400
 80040dc:	200032b8 	.word	0x200032b8
 80040e0:	20004040 	.word	0x20004040

080040e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004104:	463b      	mov	r3, r7
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <MX_TIM2_Init+0x94>)
 800410e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <MX_TIM2_Init+0x94>)
 8004116:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800411a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <MX_TIM2_Init+0x94>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <MX_TIM2_Init+0x94>)
 8004124:	2264      	movs	r2, #100	; 0x64
 8004126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <MX_TIM2_Init+0x94>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <MX_TIM2_Init+0x94>)
 8004130:	2200      	movs	r2, #0
 8004132:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004134:	4813      	ldr	r0, [pc, #76]	; (8004184 <MX_TIM2_Init+0x94>)
 8004136:	f005 fe31 	bl	8009d9c <HAL_TIM_Base_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004140:	f7fd fc48 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	4619      	mov	r1, r3
 8004150:	480c      	ldr	r0, [pc, #48]	; (8004184 <MX_TIM2_Init+0x94>)
 8004152:	f005 fead 	bl	8009eb0 <HAL_TIM_ConfigClockSource>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800415c:	f7fd fc3a 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004160:	2320      	movs	r3, #32
 8004162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004168:	463b      	mov	r3, r7
 800416a:	4619      	mov	r1, r3
 800416c:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_TIM2_Init+0x94>)
 800416e:	f006 f869 	bl	800a244 <HAL_TIMEx_MasterConfigSynchronization>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004178:	f7fd fc2c 	bl	80019d4 <Error_Handler>
  }

}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200032bc 	.word	0x200032bc

08004188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d10b      	bne.n	80041b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_TIM_Base_MspInit+0x34>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	4a07      	ldr	r2, [pc, #28]	; (80041bc <HAL_TIM_Base_MspInit+0x34>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6253      	str	r3, [r2, #36]	; 0x24
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_TIM_Base_MspInit+0x34>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	40023800 	.word	0x40023800

080041c0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <MX_UART4_Init+0x4c>)
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <MX_UART4_Init+0x50>)
 80041c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <MX_UART4_Init+0x4c>)
 80041cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80041d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <MX_UART4_Init+0x4c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <MX_UART4_Init+0x4c>)
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <MX_UART4_Init+0x4c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <MX_UART4_Init+0x4c>)
 80041e6:	220c      	movs	r2, #12
 80041e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <MX_UART4_Init+0x4c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_UART4_Init+0x4c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041f6:	4805      	ldr	r0, [pc, #20]	; (800420c <MX_UART4_Init+0x4c>)
 80041f8:	f006 f882 	bl	800a300 <HAL_UART_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004202:	f7fd fbe7 	bl	80019d4 <Error_Handler>
  }

}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200032fc 	.word	0x200032fc
 8004210:	40004c00 	.word	0x40004c00

08004214 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <MX_USART2_UART_Init+0x50>)
 800421c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800423a:	220c      	movs	r2, #12
 800423c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <MX_USART2_UART_Init+0x4c>)
 800424c:	f006 f858 	bl	800a300 <HAL_UART_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004256:	f7fd fbbd 	bl	80019d4 <Error_Handler>
  }

}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20003340 	.word	0x20003340
 8004264:	40004400 	.word	0x40004400

08004268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 031c 	add.w	r3, r7, #28
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2e      	ldr	r2, [pc, #184]	; (8004340 <HAL_UART_MspInit+0xd8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d129      	bne.n	80042de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800428a:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <HAL_UART_MspInit+0xdc>)
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <HAL_UART_MspInit+0xdc>)
 8004290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004294:	6253      	str	r3, [r2, #36]	; 0x24
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_UART_MspInit+0xdc>)
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a27      	ldr	r2, [pc, #156]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	61d3      	str	r3, [r2, #28]
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c4:	2301      	movs	r3, #1
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c8:	2303      	movs	r3, #3
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042cc:	2308      	movs	r3, #8
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042d0:	f107 031c 	add.w	r3, r7, #28
 80042d4:	4619      	mov	r1, r3
 80042d6:	481c      	ldr	r0, [pc, #112]	; (8004348 <HAL_UART_MspInit+0xe0>)
 80042d8:	f002 f96e 	bl	80065b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80042dc:	e02c      	b.n	8004338 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_UART_MspInit+0xe4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d127      	bne.n	8004338 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042e8:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	6253      	str	r3, [r2, #36]	; 0x24
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_UART_MspInit+0xdc>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004300:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_UART_MspInit+0xdc>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	4a0f      	ldr	r2, [pc, #60]	; (8004344 <HAL_UART_MspInit+0xdc>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	61d3      	str	r3, [r2, #28]
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <HAL_UART_MspInit+0xdc>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004318:	230c      	movs	r3, #12
 800431a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004324:	2303      	movs	r3, #3
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004328:	2307      	movs	r3, #7
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 031c 	add.w	r3, r7, #28
 8004330:	4619      	mov	r1, r3
 8004332:	4807      	ldr	r0, [pc, #28]	; (8004350 <HAL_UART_MspInit+0xe8>)
 8004334:	f002 f940 	bl	80065b8 <HAL_GPIO_Init>
}
 8004338:	bf00      	nop
 800433a:	3730      	adds	r7, #48	; 0x30
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40004c00 	.word	0x40004c00
 8004344:	40023800 	.word	0x40023800
 8004348:	40020800 	.word	0x40020800
 800434c:	40004400 	.word	0x40004400
 8004350:	40020000 	.word	0x40020000

08004354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004354:	480c      	ldr	r0, [pc, #48]	; (8004388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004356:	490d      	ldr	r1, [pc, #52]	; (800438c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800435c:	e002      	b.n	8004364 <LoopCopyDataInit>

0800435e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800435e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004362:	3304      	adds	r3, #4

08004364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004368:	d3f9      	bcc.n	800435e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800436c:	4c0a      	ldr	r4, [pc, #40]	; (8004398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004370:	e001      	b.n	8004376 <LoopFillZerobss>

08004372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004374:	3204      	adds	r2, #4

08004376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004378:	d3fb      	bcc.n	8004372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800437a:	f7ff feb3 	bl	80040e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800437e:	f019 f89f 	bl	801d4c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004382:	f7fd f9c1 	bl	8001708 <main>
  bx lr
 8004386:	4770      	bx	lr
  ldr r0, =_sdata
 8004388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800438c:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004390:	080221ac 	.word	0x080221ac
  ldr r2, =_sbss
 8004394:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8004398:	2000403c 	.word	0x2000403c

0800439c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800439c:	e7fe      	b.n	800439c <ADC1_IRQHandler>

0800439e <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80043a2:	2148      	movs	r1, #72	; 0x48
 80043a4:	2002      	movs	r0, #2
 80043a6:	f000 fd74 	bl	8004e92 <st25r3911SetRegisterBits>
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}

080043ae <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80043b2:	2148      	movs	r1, #72	; 0x48
 80043b4:	2002      	movs	r0, #2
 80043b6:	f000 fd49 	bl	8004e4c <st25r3911ClrRegisterBits>
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}

080043be <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	2002      	movs	r0, #2
 80043c8:	f000 f9ba 	bl	8004740 <st25r3911CheckReg>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d011      	beq.n	80043fc <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 80043d8:	2080      	movs	r0, #128	; 0x80
 80043da:	f001 f86f 	bl	80054bc <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80043de:	2080      	movs	r0, #128	; 0x80
 80043e0:	f001 f8a8 	bl	8005534 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	2100      	movs	r1, #0
 80043e8:	2002      	movs	r0, #2
 80043ea:	f000 fd86 	bl	8004efa <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 80043ee:	210a      	movs	r1, #10
 80043f0:	2080      	movs	r0, #128	; 0x80
 80043f2:	f001 f80f 	bl	8005414 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 80043f6:	2080      	movs	r0, #128	; 0x80
 80043f8:	f001 f8a8 	bl	800554c <st25r3911DisableInterrupts>
    }
    
}
 80043fc:	bf00      	nop
 80043fe:	bd80      	pop	{r7, pc}

08004400 <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8004406:	20c1      	movs	r0, #193	; 0xc1
 8004408:	f000 fe62 	bl	80050d0 <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 800440c:	2100      	movs	r1, #0
 800440e:	2002      	movs	r0, #2
 8004410:	f000 fcd0 	bl	8004db4 <st25r3911WriteRegister>

    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0,
 8004414:	2218      	movs	r2, #24
 8004416:	2100      	movs	r1, #0
 8004418:	2001      	movs	r0, #1
 800441a:	f000 fd6e 	bl	8004efa <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 800441e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004422:	f001 f893 	bl	800554c <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 8004426:	f001 f89d 	bl	8005564 <st25r3911ClearInterrupts>

    st25r3911OscOn();
 800442a:	f7ff ffc8 	bl	80043be <st25r3911OscOn>

    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 800442e:	2000      	movs	r0, #0
 8004430:	f000 f928 	bl	8004684 <st25r3911MeasureVoltage>
 8004434:	4603      	mov	r3, r0
 8004436:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800443e:	d201      	bcs.n	8004444 <st25r3911Initialize+0x44>
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	e000      	b.n	8004446 <st25r3911Initialize+0x46>
 8004444:	2300      	movs	r3, #0
 8004446:	461a      	mov	r2, r3
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	2001      	movs	r0, #1
 800444c:	f000 fd55 	bl	8004efa <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 8004450:	f7ff ffad 	bl	80043ae <st25r3911TxRxOff>
    
    return;
 8004454:	bf00      	nop
}
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 8004464:	2300      	movs	r3, #0
 8004466:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	202a      	movs	r0, #42	; 0x2a
 800446c:	f000 fd11 	bl	8004e92 <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	202a      	movs	r0, #42	; 0x2a
 8004474:	f000 fcea 	bl	8004e4c <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 8004478:	f107 030d 	add.w	r3, r7, #13
 800447c:	2205      	movs	r2, #5
 800447e:	212b      	movs	r1, #43	; 0x2b
 8004480:	20d6      	movs	r0, #214	; 0xd6
 8004482:	f000 fad5 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 8004486:	f107 030c 	add.w	r3, r7, #12
 800448a:	4619      	mov	r1, r3
 800448c:	2001      	movs	r0, #1
 800448e:	f000 fb5b 	bl	8004b48 <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 8004492:	7b7b      	ldrb	r3, [r7, #13]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	b2db      	uxtb	r3, r3
 8004498:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	3b05      	subs	r3, #5
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02b      	beq.n	8004500 <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 80044a8:	7b3b      	ldrb	r3, [r7, #12]
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da16      	bge.n	80044de <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80044b6:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	7b7b      	ldrb	r3, [r7, #13]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4619      	mov	r1, r3
 80044c2:	0089      	lsls	r1, r1, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	4619      	mov	r1, r3
 80044c8:	0088      	lsls	r0, r1, #2
 80044ca:	4619      	mov	r1, r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	440b      	add	r3, r1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e010      	b.n	8004500 <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f640 723c 	movw	r2, #3900	; 0xf3c
 80044e4:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	7b7b      	ldrb	r3, [r7, #13]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	0109      	lsls	r1, r1, #4
 80044f2:	1acb      	subs	r3, r1, r3
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 8004500:	89fb      	ldrh	r3, [r7, #14]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	220a      	movs	r2, #10
 8004516:	2120      	movs	r1, #32
 8004518:	20d3      	movs	r0, #211	; 0xd3
 800451a:	f000 fa89 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	220a      	movs	r2, #10
 8004532:	2120      	movs	r1, #32
 8004534:	20d9      	movs	r0, #217	; 0xd9
 8004536:	f000 fa7b 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	220a      	movs	r2, #10
 800454e:	2120      	movs	r1, #32
 8004550:	20de      	movs	r0, #222	; 0xde
 8004552:	f000 fa6d 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	220a      	movs	r2, #10
 800456a:	2123      	movs	r1, #35	; 0x23
 800456c:	20d8      	movs	r0, #216	; 0xd8
 800456e:	f000 fa5f 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 8004582:	21f8      	movs	r1, #248	; 0xf8
 8004584:	202e      	movs	r0, #46	; 0x2e
 8004586:	f000 fc61 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 800458a:	f107 030d 	add.w	r3, r7, #13
 800458e:	2204      	movs	r2, #4
 8004590:	212f      	movs	r1, #47	; 0x2f
 8004592:	20dd      	movs	r0, #221	; 0xdd
 8004594:	f000 fa4c 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>
 8004598:	4603      	mov	r3, r0
 800459a:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80045a6:	7b7b      	ldrb	r3, [r7, #13]
 80045a8:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80045b0:	89fb      	ldrh	r3, [r7, #14]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e008      	b.n	80045cc <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 80045c0:	7b7b      	ldrb	r3, [r7, #13]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	460a      	mov	r2, r1
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 80045e4:	f107 030f 	add.w	r3, r7, #15
 80045e8:	4619      	mov	r1, r3
 80045ea:	2004      	movs	r0, #4
 80045ec:	f000 faac 	bl	8004b48 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 80045f0:	79bb      	ldrb	r3, [r7, #6]
 80045f2:	2bff      	cmp	r3, #255	; 0xff
 80045f4:	d00e      	beq.n	8004614 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 80045f6:	79bb      	ldrb	r3, [r7, #6]
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d901      	bls.n	8004600 <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80045fc:	2307      	movs	r3, #7
 80045fe:	e025      	b.n	800464c <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	f023 030f 	bic.w	r3, r3, #15
 8004606:	b2db      	uxtb	r3, r3
 8004608:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	79bb      	ldrb	r3, [r7, #6]
 800460e:	4313      	orrs	r3, r2
 8004610:	b2db      	uxtb	r3, r3
 8004612:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	2bff      	cmp	r3, #255	; 0xff
 8004618:	d012      	beq.n	8004640 <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	2b06      	cmp	r3, #6
 800461e:	d901      	bls.n	8004624 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 8004620:	2307      	movs	r3, #7
 8004622:	e013      	b.n	800464c <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2db      	uxtb	r3, r3
 800462c:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	b25a      	sxtb	r2, r3
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	b25b      	sxtb	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	b25b      	sxtb	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	4619      	mov	r1, r3
 8004644:	2004      	movs	r0, #4
 8004646:	f000 fbb5 	bl	8004db4 <st25r3911WriteRegister>
    
    return ERR_NONE;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	461a      	mov	r2, r3
 8004662:	2106      	movs	r1, #6
 8004664:	202a      	movs	r0, #42	; 0x2a
 8004666:	f000 fc32 	bl	8004ece <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 800466a:	f107 030f 	add.w	r3, r7, #15
 800466e:	220a      	movs	r2, #10
 8004670:	2120      	movs	r1, #32
 8004672:	20df      	movs	r0, #223	; 0xdf
 8004674:	f000 f9dc 	bl	8004a30 <st25r3911ExecuteCommandAndGetResult>

    return result;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ffdf 	bl	8004654 <st25r3911MeasurePowerSupply>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	0052      	lsls	r2, r2, #1
 80046a2:	441a      	add	r2, r3
 80046a4:	00d2      	lsls	r2, r2, #3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <st25r3911MeasureVoltage+0x50>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	89bb      	ldrh	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	81bb      	strh	r3, [r7, #12]

    return mV;
 80046c8:	89bb      	ldrh	r3, [r7, #12]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	10624dd3 	.word	0x10624dd3

080046d8 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	460a      	mov	r2, r1
 80046e2:	80fb      	strh	r3, [r7, #6]
 80046e4:	4613      	mov	r3, r2
 80046e6:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f811 	bl	8004712 <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 80046f0:	797b      	ldrb	r3, [r7, #5]
 80046f2:	461a      	mov	r2, r3
 80046f4:	21e0      	movs	r1, #224	; 0xe0
 80046f6:	2011      	movs	r0, #17
 80046f8:	f000 fbff 	bl	8004efa <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 80046fc:	797b      	ldrb	r3, [r7, #5]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 8004702:	20e0      	movs	r0, #224	; 0xe0
 8004704:	f000 fce4 	bl	80050d0 <st25r3911ExecuteCommand>
    }

    return;
 8004708:	bf00      	nop
 800470a:	bf00      	nop
}
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b29b      	uxth	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	4619      	mov	r1, r3
 8004726:	2012      	movs	r0, #18
 8004728:	f000 fb44 	bl	8004db4 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	4619      	mov	r1, r3
 8004732:	2013      	movs	r0, #19
 8004734:	f000 fb3e 	bl	8004db4 <st25r3911WriteRegister>

    return;
 8004738:	bf00      	nop
}
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	460b      	mov	r3, r1
 800474c:	71bb      	strb	r3, [r7, #6]
 800474e:	4613      	mov	r3, r2
 8004750:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 8004756:	f107 020f 	add.w	r2, r7, #15
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f9f2 	bl	8004b48 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	79bb      	ldrb	r3, [r7, #6]
 8004768:	4013      	ands	r3, r2
 800476a:	b2db      	uxtb	r3, r3
 800476c:	797a      	ldrb	r2, [r7, #5]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 800478c:	f107 030f 	add.w	r3, r7, #15
 8004790:	4619      	mov	r1, r3
 8004792:	203f      	movs	r0, #63	; 0x3f
 8004794:	f000 f9d8 	bl	8004b48 <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d001      	beq.n	80047a6 <st25r3911CheckChipID+0x26>
    {
        return false;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e009      	b.n	80047ba <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 80047b8:	2301      	movs	r3, #1
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <st25r3911SetNoResponseTime_64fcs+0x78>)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d312      	bcc.n	800480c <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 80047e6:	2301      	movs	r3, #1
 80047e8:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	333f      	adds	r3, #63	; 0x3f
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d304      	bcc.n	8004804 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 80047fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047fe:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 8004800:	2307      	movs	r3, #7
 8004802:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	019b      	lsls	r3, r3, #6
 8004808:	4a0c      	ldr	r2, [pc, #48]	; (800483c <st25r3911SetNoResponseTime_64fcs+0x78>)
 800480a:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 800480c:	7b7b      	ldrb	r3, [r7, #13]
 800480e:	461a      	mov	r2, r3
 8004810:	2101      	movs	r1, #1
 8004812:	2011      	movs	r0, #17
 8004814:	f000 fb71 	bl	8004efa <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	200f      	movs	r0, #15
 8004822:	f000 fac7 	bl	8004db4 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	2010      	movs	r0, #16
 800482e:	f000 fac1 	bl	8004db4 <st25r3911WriteRegister>

    return err;
 8004832:	89fb      	ldrh	r3, [r7, #14]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20003384 	.word	0x20003384

08004840 <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	4604      	mov	r4, r0
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4623      	mov	r3, r4
 8004850:	71fb      	strb	r3, [r7, #7]
 8004852:	4603      	mov	r3, r0
 8004854:	71bb      	strb	r3, [r7, #6]
 8004856:	460b      	mov	r3, r1
 8004858:	717b      	strb	r3, [r7, #5]
 800485a:	4613      	mov	r3, r2
 800485c:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	2bc8      	cmp	r3, #200	; 0xc8
 8004862:	d007      	beq.n	8004874 <st25r3911PerformCollisionAvoidance+0x34>
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	2bca      	cmp	r3, #202	; 0xca
 8004868:	d004      	beq.n	8004874 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	2bc9      	cmp	r3, #201	; 0xc9
 800486e:	d001      	beq.n	8004874 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 8004870:	2307      	movs	r3, #7
 8004872:	e056      	b.n	8004922 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8004874:	79bb      	ldrb	r3, [r7, #6]
 8004876:	2bff      	cmp	r3, #255	; 0xff
 8004878:	d102      	bne.n	8004880 <st25r3911PerformCollisionAvoidance+0x40>
 800487a:	797b      	ldrb	r3, [r7, #5]
 800487c:	2bff      	cmp	r3, #255	; 0xff
 800487e:	d01e      	beq.n	80048be <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8004884:	79bb      	ldrb	r3, [r7, #6]
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	d003      	beq.n	8004892 <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004890:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8004892:	797b      	ldrb	r3, [r7, #5]
 8004894:	2bff      	cmp	r3, #255	; 0xff
 8004896:	d003      	beq.n	80048a0 <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	f043 030f 	orr.w	r3, r3, #15
 800489e:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 80048a0:	79bb      	ldrb	r3, [r7, #6]
 80048a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	797b      	ldrb	r3, [r7, #5]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4313      	orrs	r3, r2
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	4619      	mov	r1, r3
 80048b8:	2029      	movs	r0, #41	; 0x29
 80048ba:	f000 fb08 	bl	8004ece <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 80048be:	793b      	ldrb	r3, [r7, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	2103      	movs	r1, #3
 80048ca:	2009      	movs	r0, #9
 80048cc:	f000 fb15 	bl	8004efa <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80048d0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80048d4:	f000 fe2e 	bl	8005534 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 80048d8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80048dc:	f000 fdee 	bl	80054bc <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbf4 	bl	80050d0 <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 80048e8:	210a      	movs	r1, #10
 80048ea:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80048ee:	f000 fd91 	bl	8005414 <st25r3911WaitForInterruptsTimed>
 80048f2:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 80048f4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80048f8:	f000 fde0 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 80048fc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8004900:	f000 fe24 	bl	800554c <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 800490e:	231d      	movs	r3, #29
 8004910:	e007      	b.n	8004922 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 8004920:	230c      	movs	r3, #12
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bd90      	pop	{r4, r7, pc}

0800492a <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	201e      	movs	r0, #30
 800493a:	f000 fa3b 	bl	8004db4 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	201d      	movs	r0, #29
 8004948:	f000 fa34 	bl	8004db4 <st25r3911WriteRegister>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d016      	beq.n	8004996 <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8004968:	2378      	movs	r3, #120	; 0x78
 800496a:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d903      	bls.n	800497c <st25r3911StreamConfigure+0x28>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d901      	bls.n	8004980 <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 800497c:	2307      	movs	r3, #7
 800497e:	e053      	b.n	8004a28 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	f1c3 0304 	rsb	r3, r3, #4
 8004988:	b2db      	uxtb	r3, r3
 800498a:	015b      	lsls	r3, r3, #5
 800498c:	b2da      	uxtb	r2, r3
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	4313      	orrs	r3, r2
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e01b      	b.n	80049ce <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8004996:	2370      	movs	r3, #112	; 0x70
 8004998:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d903      	bls.n	80049aa <st25r3911StreamConfigure+0x56>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d901      	bls.n	80049ae <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 80049aa:	2307      	movs	r3, #7
 80049ac:	e03c      	b.n	8004a28 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	f1c3 0306 	rsb	r3, r3, #6
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	4313      	orrs	r3, r2
 80049c0:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	78db      	ldrb	r3, [r3, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 80049ca:	2307      	movs	r3, #7
 80049cc:	e02c      	b.n	8004a28 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	789b      	ldrb	r3, [r3, #2]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <st25r3911StreamConfigure+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	789b      	ldrb	r3, [r3, #2]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	d901      	bls.n	80049e2 <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 80049de:	2307      	movs	r3, #7
 80049e0:	e022      	b.n	8004a28 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	78db      	ldrb	r3, [r3, #3]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d901      	bls.n	80049fe <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 80049fa:	2307      	movs	r3, #7
 80049fc:	e014      	b.n	8004a28 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	b25a      	sxtb	r2, r3
 8004a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4619      	mov	r1, r3
 8004a14:	2008      	movs	r0, #8
 8004a16:	f000 f9cd 	bl	8004db4 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2178      	movs	r1, #120	; 0x78
 8004a20:	2003      	movs	r0, #3
 8004a22:	f000 fa54 	bl	8004ece <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	71bb      	strb	r3, [r7, #6]
 8004a40:	4613      	mov	r3, r2
 8004a42:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8004a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a48:	f000 fd74 	bl	8005534 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8004a4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a50:	f000 fd34 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fb3a 	bl	80050d0 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8004a5c:	797b      	ldrb	r3, [r7, #5]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a66:	f000 fcd5 	bl	8005414 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8004a6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a6e:	f000 fd6d 	bl	800554c <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8004a78:	79bb      	ldrb	r3, [r7, #6]
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f863 	bl	8004b48 <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	db0b      	blt.n	8004ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	f003 021f 	and.w	r2, r3, #31
 8004aa4:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <__NVIC_EnableIRQ+0x34>)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	2001      	movs	r0, #1
 8004aae:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db12      	blt.n	8004afc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	490a      	ldr	r1, [pc, #40]	; (8004b08 <__NVIC_DisableIRQ+0x44>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	3320      	adds	r3, #32
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004af0:	f3bf 8f4f 	dsb	sy
}
 8004af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004af6:	f3bf 8f6f 	isb	sy
}
 8004afa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e100 	.word	0xe000e100

08004b0c <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <st25r3911CheckFieldSetLED+0x24>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8004b22:	2201      	movs	r2, #1
 8004b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b28:	4806      	ldr	r0, [pc, #24]	; (8004b44 <st25r3911CheckFieldSetLED+0x38>)
 8004b2a:	f001 feec 	bl	8006906 <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8004b2e:	e005      	b.n	8004b3c <st25r3911CheckFieldSetLED+0x30>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b36:	4803      	ldr	r0, [pc, #12]	; (8004b44 <st25r3911CheckFieldSetLED+0x38>)
 8004b38:	f001 fee5 	bl	8006906 <HAL_GPIO_WritePin>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40020000 	.word	0x40020000

08004b48 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <st25r3911ReadRegister+0x94>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <st25r3911ReadRegister+0x94>)
 8004b5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b60:	f3bf 8f4f 	dsb	sy
}
 8004b64:	bf00      	nop
 8004b66:	2006      	movs	r0, #6
 8004b68:	f7ff ffac 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004b6c:	f3bf 8f4f 	dsb	sy
}
 8004b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b72:	f3bf 8f6f 	isb	sy
}
 8004b76:	bf00      	nop
    platformSpiSelect();
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	4818      	ldr	r0, [pc, #96]	; (8004be0 <st25r3911ReadRegister+0x98>)
 8004b7e:	f001 fec2 	bl	8006906 <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8004b90:	f107 010c 	add.w	r1, r7, #12
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	2202      	movs	r2, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff f928 	bl	8003df0 <spiTxRx>
  
    if(value != NULL)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <st25r3911ReadRegister+0x64>
    {
      *value = buf[1];
 8004ba6:	7b7a      	ldrb	r2, [r7, #13]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8004bac:	2201      	movs	r2, #1
 8004bae:	2140      	movs	r1, #64	; 0x40
 8004bb0:	480b      	ldr	r0, [pc, #44]	; (8004be0 <st25r3911ReadRegister+0x98>)
 8004bb2:	f001 fea8 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <st25r3911ReadRegister+0x94>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <st25r3911ReadRegister+0x94>)
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <st25r3911ReadRegister+0x94>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <st25r3911ReadRegister+0x8a>
 8004bca:	2006      	movs	r0, #6
 8004bcc:	f7ff ff5e 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
}
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2000060c 	.word	0x2000060c
 8004be0:	40020400 	.word	0x40020400

08004be4 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	71fb      	strb	r3, [r7, #7]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 8004bfe:	79bb      	ldrb	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d037      	beq.n	8004c74 <st25r3911ReadMultipleRegisters+0x90>
    {
        platformProtectST25R391xComm();
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <st25r3911ReadMultipleRegisters+0x98>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <st25r3911ReadMultipleRegisters+0x98>)
 8004c0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c10:	f3bf 8f4f 	dsb	sy
}
 8004c14:	bf00      	nop
 8004c16:	2006      	movs	r0, #6
 8004c18:	f7ff ff54 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004c1c:	f3bf 8f4f 	dsb	sy
}
 8004c20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c22:	f3bf 8f6f 	isb	sy
}
 8004c26:	bf00      	nop
        platformSpiSelect();
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2140      	movs	r1, #64	; 0x40
 8004c2c:	4814      	ldr	r0, [pc, #80]	; (8004c80 <st25r3911ReadMultipleRegisters+0x9c>)
 8004c2e:	f001 fe6a 	bl	8006906 <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 8004c32:	f107 030f 	add.w	r3, r7, #15
 8004c36:	2201      	movs	r2, #1
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f8d8 	bl	8003df0 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 8004c40:	79bb      	ldrb	r3, [r7, #6]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7ff f8d1 	bl	8003df0 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	480b      	ldr	r0, [pc, #44]	; (8004c80 <st25r3911ReadMultipleRegisters+0x9c>)
 8004c54:	f001 fe57 	bl	8006906 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <st25r3911ReadMultipleRegisters+0x98>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <st25r3911ReadMultipleRegisters+0x98>)
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <st25r3911ReadMultipleRegisters+0x98>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <st25r3911ReadMultipleRegisters+0x90>
 8004c6c:	2006      	movs	r0, #6
 8004c6e:	f7ff ff0d 	bl	8004a8c <__NVIC_EnableIRQ>
    }
    
    return;
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
}
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	2000060c 	.word	0x2000060c
 8004c80:	40020400 	.word	0x40020400

08004c84 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <st25r3911ReadTestRegister+0x98>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <st25r3911ReadTestRegister+0x98>)
 8004c9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c9c:	f3bf 8f4f 	dsb	sy
}
 8004ca0:	bf00      	nop
 8004ca2:	2006      	movs	r0, #6
 8004ca4:	f7ff ff0e 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca8:	f3bf 8f4f 	dsb	sy
}
 8004cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cae:	f3bf 8f6f 	isb	sy
}
 8004cb2:	bf00      	nop
    platformSpiSelect();
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2140      	movs	r1, #64	; 0x40
 8004cb8:	4819      	ldr	r0, [pc, #100]	; (8004d20 <st25r3911ReadTestRegister+0x9c>)
 8004cba:	f001 fe24 	bl	8006906 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8004cbe:	23fc      	movs	r3, #252	; 0xfc
 8004cc0:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 8004cd0:	f107 010c 	add.w	r1, r7, #12
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	2203      	movs	r2, #3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f888 	bl	8003df0 <spiTxRx>
    
    if(value != NULL)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <st25r3911ReadTestRegister+0x68>
    {
      *value = buf[2];
 8004ce6:	7bba      	ldrb	r2, [r7, #14]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8004cec:	2201      	movs	r2, #1
 8004cee:	2140      	movs	r1, #64	; 0x40
 8004cf0:	480b      	ldr	r0, [pc, #44]	; (8004d20 <st25r3911ReadTestRegister+0x9c>)
 8004cf2:	f001 fe08 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <st25r3911ReadTestRegister+0x98>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <st25r3911ReadTestRegister+0x98>)
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <st25r3911ReadTestRegister+0x98>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <st25r3911ReadTestRegister+0x8e>
 8004d0a:	2006      	movs	r0, #6
 8004d0c:	f7ff febe 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
}
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000060c 	.word	0x2000060c
 8004d20:	40020400 	.word	0x40020400

08004d24 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	71fb      	strb	r3, [r7, #7]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <st25r3911WriteTestRegister+0x88>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <st25r3911WriteTestRegister+0x88>)
 8004d3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d40:	f3bf 8f4f 	dsb	sy
}
 8004d44:	bf00      	nop
 8004d46:	2006      	movs	r0, #6
 8004d48:	f7ff febc 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004d4c:	f3bf 8f4f 	dsb	sy
}
 8004d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d52:	f3bf 8f6f 	isb	sy
}
 8004d56:	bf00      	nop
    platformSpiSelect();
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2140      	movs	r1, #64	; 0x40
 8004d5c:	4814      	ldr	r0, [pc, #80]	; (8004db0 <st25r3911WriteTestRegister+0x8c>)
 8004d5e:	f001 fdd2 	bl	8006906 <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8004d62:	23fc      	movs	r3, #252	; 0xfc
 8004d64:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8004d6a:	79bb      	ldrb	r3, [r7, #6]
 8004d6c:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 8004d6e:	f107 030c 	add.w	r3, r7, #12
 8004d72:	2203      	movs	r2, #3
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f83a 	bl	8003df0 <spiTxRx>
  
    platformSpiDeselect();
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	2140      	movs	r1, #64	; 0x40
 8004d80:	480b      	ldr	r0, [pc, #44]	; (8004db0 <st25r3911WriteTestRegister+0x8c>)
 8004d82:	f001 fdc0 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <st25r3911WriteTestRegister+0x88>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <st25r3911WriteTestRegister+0x88>)
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <st25r3911WriteTestRegister+0x88>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <st25r3911WriteTestRegister+0x7e>
 8004d9a:	2006      	movs	r0, #6
 8004d9c:	f7ff fe76 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
}
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	2000060c 	.word	0x2000060c
 8004db0:	40020400 	.word	0x40020400

08004db4 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	71fb      	strb	r3, [r7, #7]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 8004dca:	79bb      	ldrb	r3, [r7, #6]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fe9d 	bl	8004b0c <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <st25r3911WriteRegister+0x90>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <st25r3911WriteRegister+0x90>)
 8004ddc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dde:	f3bf 8f4f 	dsb	sy
}
 8004de2:	bf00      	nop
 8004de4:	2006      	movs	r0, #6
 8004de6:	f7ff fe6d 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004dea:	f3bf 8f4f 	dsb	sy
}
 8004dee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004df0:	f3bf 8f6f 	isb	sy
}
 8004df4:	bf00      	nop
    platformSpiSelect();
 8004df6:	2200      	movs	r2, #0
 8004df8:	2140      	movs	r1, #64	; 0x40
 8004dfa:	4813      	ldr	r0, [pc, #76]	; (8004e48 <st25r3911WriteRegister+0x94>)
 8004dfc:	f001 fd83 	bl	8006906 <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 8004e04:	79bb      	ldrb	r3, [r7, #6]
 8004e06:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe ffed 	bl	8003df0 <spiTxRx>
    
    platformSpiDeselect();
 8004e16:	2201      	movs	r2, #1
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	480b      	ldr	r0, [pc, #44]	; (8004e48 <st25r3911WriteRegister+0x94>)
 8004e1c:	f001 fd73 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <st25r3911WriteRegister+0x90>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <st25r3911WriteRegister+0x90>)
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <st25r3911WriteRegister+0x90>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <st25r3911WriteRegister+0x88>
 8004e34:	2006      	movs	r0, #6
 8004e36:	f7ff fe29 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
}
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	2000060c 	.word	0x2000060c
 8004e48:	40020400 	.word	0x40020400

08004e4c <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	460a      	mov	r2, r1
 8004e56:	71fb      	strb	r3, [r7, #7]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8004e5c:	f107 020f 	add.w	r2, r7, #15
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fe6f 	bl	8004b48 <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8004e6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	b25a      	sxtb	r2, r3
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	b25b      	sxtb	r3, r3
 8004e76:	4013      	ands	r3, r2
 8004e78:	b25b      	sxtb	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff95 	bl	8004db4 <st25r3911WriteRegister>
    
    return;
 8004e8a:	bf00      	nop
}
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	71fb      	strb	r3, [r7, #7]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8004ea2:	f107 020f 	add.w	r2, r7, #15
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fe4c 	bl	8004b48 <st25r3911ReadRegister>
    tmp |= set_mask;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	79bb      	ldrb	r3, [r7, #6]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff77 	bl	8004db4 <st25r3911WriteRegister>
    
    return;
 8004ec6:	bf00      	nop
}
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	71fb      	strb	r3, [r7, #7]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	71bb      	strb	r3, [r7, #6]
 8004edc:	4613      	mov	r3, r2
 8004ede:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 8004ee0:	79ba      	ldrb	r2, [r7, #6]
 8004ee2:	797b      	ldrb	r3, [r7, #5]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	79b9      	ldrb	r1, [r7, #6]
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f804 	bl	8004efa <st25r3911ModifyRegister>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	4603      	mov	r3, r0
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	460b      	mov	r3, r1
 8004f06:	71bb      	strb	r3, [r7, #6]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8004f0c:	f107 020f 	add.w	r2, r7, #15
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fe17 	bl	8004b48 <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8004f1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	4013      	ands	r3, r2
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	797b      	ldrb	r3, [r7, #5]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ff38 	bl	8004db4 <st25r3911WriteRegister>

    return;
 8004f44:	bf00      	nop
}
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
 8004f56:	460b      	mov	r3, r1
 8004f58:	71bb      	strb	r3, [r7, #6]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8004f5e:	f107 020e 	add.w	r2, r7, #14
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fe8c 	bl	8004c84 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8004f6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	b25a      	sxtb	r2, r3
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	4013      	ands	r3, r2
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 8004f7e:	797a      	ldrb	r2, [r7, #5]
 8004f80:	79bb      	ldrb	r3, [r7, #6]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8004f8c:	7bfa      	ldrb	r2, [r7, #15]
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fec6 	bl	8004d24 <st25r3911WriteTestRegister>
    
    return;
 8004f98:	bf00      	nop
}
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d037      	beq.n	8005026 <st25r3911WriteFifo+0x86>
    {  
        platformProtectST25R391xComm();
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <st25r3911WriteFifo+0x90>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <st25r3911WriteFifo+0x90>)
 8004fc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc2:	f3bf 8f4f 	dsb	sy
}
 8004fc6:	bf00      	nop
 8004fc8:	2006      	movs	r0, #6
 8004fca:	f7ff fd7b 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fce:	f3bf 8f4f 	dsb	sy
}
 8004fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fd4:	f3bf 8f6f 	isb	sy
}
 8004fd8:	bf00      	nop
        platformSpiSelect();
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2140      	movs	r1, #64	; 0x40
 8004fde:	4815      	ldr	r0, [pc, #84]	; (8005034 <st25r3911WriteFifo+0x94>)
 8004fe0:	f001 fc91 	bl	8006906 <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8004fe4:	f107 030f 	add.w	r3, r7, #15
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe feff 	bl	8003df0 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fe fef8 	bl	8003df0 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8005000:	2201      	movs	r2, #1
 8005002:	2140      	movs	r1, #64	; 0x40
 8005004:	480b      	ldr	r0, [pc, #44]	; (8005034 <st25r3911WriteFifo+0x94>)
 8005006:	f001 fc7e 	bl	8006906 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <st25r3911WriteFifo+0x90>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	3b01      	subs	r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <st25r3911WriteFifo+0x90>)
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <st25r3911WriteFifo+0x90>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <st25r3911WriteFifo+0x86>
 800501e:	2006      	movs	r0, #6
 8005020:	f7ff fd34 	bl	8004a8c <__NVIC_EnableIRQ>
    }

    return;
 8005024:	bf00      	nop
 8005026:	bf00      	nop
}
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000060c 	.word	0x2000060c
 8005034:	40020400 	.word	0x40020400

08005038 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8005044:	23bf      	movs	r3, #191	; 0xbf
 8005046:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d037      	beq.n	80050be <st25r3911ReadFifo+0x86>
    {
        platformProtectST25R391xComm();
 800504e:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <st25r3911ReadFifo+0x90>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <st25r3911ReadFifo+0x90>)
 8005058:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800505a:	f3bf 8f4f 	dsb	sy
}
 800505e:	bf00      	nop
 8005060:	2006      	movs	r0, #6
 8005062:	f7ff fd2f 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005066:	f3bf 8f4f 	dsb	sy
}
 800506a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800506c:	f3bf 8f6f 	isb	sy
}
 8005070:	bf00      	nop
        platformSpiSelect();
 8005072:	2200      	movs	r2, #0
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	4815      	ldr	r0, [pc, #84]	; (80050cc <st25r3911ReadFifo+0x94>)
 8005078:	f001 fc45 	bl	8006906 <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 800507c:	f107 030f 	add.w	r3, r7, #15
 8005080:	2201      	movs	r2, #1
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe feb3 	bl	8003df0 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	2000      	movs	r0, #0
 8005094:	f7fe feac 	bl	8003df0 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 8005098:	2201      	movs	r2, #1
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	480b      	ldr	r0, [pc, #44]	; (80050cc <st25r3911ReadFifo+0x94>)
 800509e:	f001 fc32 	bl	8006906 <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <st25r3911ReadFifo+0x90>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <st25r3911ReadFifo+0x90>)
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <st25r3911ReadFifo+0x90>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <st25r3911ReadFifo+0x86>
 80050b6:	2006      	movs	r0, #6
 80050b8:	f7ff fce8 	bl	8004a8c <__NVIC_EnableIRQ>
    }

    return;
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
}
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	2000060c 	.word	0x2000060c
 80050cc:	40020400 	.word	0x40020400

080050d0 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2bc3      	cmp	r3, #195	; 0xc3
 80050de:	d908      	bls.n	80050f2 <st25r3911ExecuteCommand+0x22>
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2bca      	cmp	r3, #202	; 0xca
 80050e4:	d805      	bhi.n	80050f2 <st25r3911ExecuteCommand+0x22>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80050e6:	2200      	movs	r2, #0
 80050e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ec:	481e      	ldr	r0, [pc, #120]	; (8005168 <st25r3911ExecuteCommand+0x98>)
 80050ee:	f001 fc0a 	bl	8006906 <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <st25r3911ExecuteCommand+0x9c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <st25r3911ExecuteCommand+0x9c>)
 8005106:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005108:	f3bf 8f4f 	dsb	sy
}
 800510c:	bf00      	nop
 800510e:	2006      	movs	r0, #6
 8005110:	f7ff fcd8 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005114:	f3bf 8f4f 	dsb	sy
}
 8005118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800511a:	f3bf 8f6f 	isb	sy
}
 800511e:	bf00      	nop
    platformSpiSelect();
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	; 0x40
 8005124:	4812      	ldr	r0, [pc, #72]	; (8005170 <st25r3911ExecuteCommand+0xa0>)
 8005126:	f001 fbee 	bl	8006906 <HAL_GPIO_WritePin>

    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 800512a:	f107 030f 	add.w	r3, r7, #15
 800512e:	2201      	movs	r2, #1
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fe5c 	bl	8003df0 <spiTxRx>

    platformSpiDeselect();
 8005138:	2201      	movs	r2, #1
 800513a:	2140      	movs	r1, #64	; 0x40
 800513c:	480c      	ldr	r0, [pc, #48]	; (8005170 <st25r3911ExecuteCommand+0xa0>)
 800513e:	f001 fbe2 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <st25r3911ExecuteCommand+0x9c>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <st25r3911ExecuteCommand+0x9c>)
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <st25r3911ExecuteCommand+0x9c>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <st25r3911ExecuteCommand+0x8e>
 8005156:	2006      	movs	r0, #6
 8005158:	f7ff fc98 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 800515c:	bf00      	nop
 800515e:	bf00      	nop
}
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40020000 	.word	0x40020000
 800516c:	2000060c 	.word	0x2000060c
 8005170:	40020400 	.word	0x40020400

08005174 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <st25r3911ExecuteCommands+0x78>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	4b18      	ldr	r3, [pc, #96]	; (80051ec <st25r3911ExecuteCommands+0x78>)
 800518a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800518c:	f3bf 8f4f 	dsb	sy
}
 8005190:	bf00      	nop
 8005192:	2006      	movs	r0, #6
 8005194:	f7ff fc96 	bl	8004ac4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005198:	f3bf 8f4f 	dsb	sy
}
 800519c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800519e:	f3bf 8f6f 	isb	sy
}
 80051a2:	bf00      	nop
    platformSpiSelect();
 80051a4:	2200      	movs	r2, #0
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	4811      	ldr	r0, [pc, #68]	; (80051f0 <st25r3911ExecuteCommands+0x7c>)
 80051aa:	f001 fbac 	bl	8006906 <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fe fe1a 	bl	8003df0 <spiTxRx>
    
    platformSpiDeselect();
 80051bc:	2201      	movs	r2, #1
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	480b      	ldr	r0, [pc, #44]	; (80051f0 <st25r3911ExecuteCommands+0x7c>)
 80051c2:	f001 fba0 	bl	8006906 <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <st25r3911ExecuteCommands+0x78>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <st25r3911ExecuteCommands+0x78>)
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <st25r3911ExecuteCommands+0x78>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <st25r3911ExecuteCommands+0x6e>
 80051da:	2006      	movs	r0, #6
 80051dc:	f7ff fc56 	bl	8004a8c <__NVIC_EnableIRQ>

    return;
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
}
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	2000060c 	.word	0x2000060c
 80051f0:	40020400 	.word	0x40020400

080051f4 <__NVIC_EnableIRQ>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	db0b      	blt.n	800521e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	f003 021f 	and.w	r2, r3, #31
 800520c:	4906      	ldr	r1, [pc, #24]	; (8005228 <__NVIC_EnableIRQ+0x34>)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2001      	movs	r0, #1
 8005216:	fa00 f202 	lsl.w	r2, r0, r2
 800521a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100

0800522c <__NVIC_DisableIRQ>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db12      	blt.n	8005264 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	f003 021f 	and.w	r2, r3, #31
 8005244:	490a      	ldr	r1, [pc, #40]	; (8005270 <__NVIC_DisableIRQ+0x44>)
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2001      	movs	r0, #1
 800524e:	fa00 f202 	lsl.w	r2, r0, r2
 8005252:	3320      	adds	r3, #32
 8005254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005258:	f3bf 8f4f 	dsb	sy
}
 800525c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800525e:	f3bf 8f6f 	isb	sy
}
 8005262:	bf00      	nop
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e100 	.word	0xe000e100

08005274 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <st25r3911InitInterrupts+0x2c>)
 800527a:	2200      	movs	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <st25r3911InitInterrupts+0x2c>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <st25r3911InitInterrupts+0x2c>)
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <st25r3911InitInterrupts+0x2c>)
 800528c:	2200      	movs	r2, #0
 800528e:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8005290:	2200      	movs	r2, #0
 8005292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005296:	4803      	ldr	r0, [pc, #12]	; (80052a4 <st25r3911InitInterrupts+0x30>)
 8005298:	f001 fb35 	bl	8006906 <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20003388 	.word	0x20003388
 80052a4:	40020000 	.word	0x40020000

080052a8 <st25r3911Isr>:

void st25r3911Isr( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 80052ac:	f000 f80c 	bl	80052c8 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <st25r3911Isr+0x1c>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 80052b8:	4b02      	ldr	r3, [pc, #8]	; (80052c4 <st25r3911Isr+0x1c>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4798      	blx	r3
    }
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20003388 	.word	0x20003388

080052c8 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 80052d2:	463b      	mov	r3, r7
 80052d4:	2203      	movs	r2, #3
 80052d6:	21ff      	movs	r1, #255	; 0xff
 80052d8:	4618      	mov	r0, r3
 80052da:	f018 f94d 	bl	801d578 <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80052de:	e01f      	b.n	8005320 <st25r3911CheckForReceivedInterrupts+0x58>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 80052e0:	463b      	mov	r3, r7
 80052e2:	2203      	movs	r2, #3
 80052e4:	4619      	mov	r1, r3
 80052e6:	2017      	movs	r0, #23
 80052e8:	f7ff fc7c 	bl	8004be4 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 80052ec:	783b      	ldrb	r3, [r7, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <st25r3911CheckForReceivedInterrupts+0x3a>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80052f6:	2201      	movs	r2, #1
 80052f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052fc:	4820      	ldr	r0, [pc, #128]	; (8005380 <st25r3911CheckForReceivedInterrupts+0xb8>)
 80052fe:	f001 fb02 	bl	8006906 <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 8005302:	783b      	ldrb	r3, [r7, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4313      	orrs	r3, r2
 800530a:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 800530c:	787b      	ldrb	r3, [r7, #1]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4313      	orrs	r3, r2
 8005314:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 8005316:	78bb      	ldrb	r3, [r7, #2]
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 8005320:	2101      	movs	r1, #1
 8005322:	4817      	ldr	r0, [pc, #92]	; (8005380 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8005324:	f001 fad8 	bl	80068d8 <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d0d8      	beq.n	80052e0 <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	3301      	adds	r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8005338:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800533a:	f3bf 8f4f 	dsb	sy
}
 800533e:	bf00      	nop
 8005340:	2006      	movs	r0, #6
 8005342:	f7ff ff73 	bl	800522c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005346:	f3bf 8f4f 	dsb	sy
}
 800534a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800534c:	f3bf 8f6f 	isb	sy
}
 8005350:	bf00      	nop
    st25r3911interrupt.status |= irqStatus;
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <st25r3911CheckForReceivedInterrupts+0xc0>)
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4313      	orrs	r3, r2
 800535a:	4a0b      	ldr	r2, [pc, #44]	; (8005388 <st25r3911CheckForReceivedInterrupts+0xc0>)
 800535c:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <st25r3911CheckForReceivedInterrupts+0xb0>
 8005372:	2006      	movs	r0, #6
 8005374:	f7ff ff3e 	bl	80051f4 <__NVIC_EnableIRQ>
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40020000 	.word	0x40020000
 8005384:	2000060c 	.word	0x2000060c
 8005388:	20003388 	.word	0x20003388

0800538c <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	43da      	mvns	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	401a      	ands	r2, r3
 80053a4:	6939      	ldr	r1, [r7, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	400b      	ands	r3, r1
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 80053ae:	4b18      	ldr	r3, [pc, #96]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	4013      	ands	r3, r2
 80053b8:	4a15      	ldr	r2, [pc, #84]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 80053ba:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 80053bc:	4b14      	ldr	r3, [pc, #80]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 80053c6:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
 80053cc:	e019      	b.n	8005402 <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	3314      	adds	r3, #20
 80053e2:	b2d8      	uxtb	r0, r3
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <st25r3911ModifyInterrupts+0x84>)
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7ff fcde 	bl	8004db4 <st25r3911WriteRegister>
 80053f8:	e000      	b.n	80053fc <st25r3911ModifyInterrupts+0x70>
            continue;
 80053fa:	bf00      	nop
    for (i=0; i<3U ; i++)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	3301      	adds	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d9e2      	bls.n	80053ce <st25r3911ModifyInterrupts+0x42>
    }
    return;
 8005408:	bf00      	nop
}
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20003388 	.word	0x20003388

08005414 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f8d2 	bl	80055cc <timerCalculateTimer>
 8005428:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 800542a:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <st25r3911WaitForInterruptsTimed+0xa0>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4013      	ands	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f8d7 	bl	80055e8 <timerIsExpired>
 800543a:	4603      	mov	r3, r0
 800543c:	f083 0301 	eor.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <st25r3911WaitForInterruptsTimed+0x38>
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <st25r3911WaitForInterruptsTimed+0x3e>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0eb      	beq.n	800542a <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <st25r3911WaitForInterruptsTimed+0xa4>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <st25r3911WaitForInterruptsTimed+0xa4>)
 8005466:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005468:	f3bf 8f4f 	dsb	sy
}
 800546c:	bf00      	nop
 800546e:	2006      	movs	r0, #6
 8005470:	f7ff fedc 	bl	800522c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8005474:	f3bf 8f4f 	dsb	sy
}
 8005478:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800547a:	f3bf 8f6f 	isb	sy
}
 800547e:	bf00      	nop
    st25r3911interrupt.status &= ~status;
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <st25r3911WaitForInterruptsTimed+0xa0>)
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	43db      	mvns	r3, r3
 8005488:	4013      	ands	r3, r2
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <st25r3911WaitForInterruptsTimed+0xa0>)
 800548c:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <st25r3911WaitForInterruptsTimed+0xa4>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	3b01      	subs	r3, #1
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <st25r3911WaitForInterruptsTimed+0xa4>)
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <st25r3911WaitForInterruptsTimed+0xa4>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <st25r3911WaitForInterruptsTimed+0x94>
 80054a2:	2006      	movs	r0, #6
 80054a4:	f7ff fea6 	bl	80051f4 <__NVIC_EnableIRQ>
    
    return status;
 80054a8:	68bb      	ldr	r3, [r7, #8]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20003388 	.word	0x20003388
 80054b8:	2000060c 	.word	0x2000060c

080054bc <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <st25r3911GetInterrupt+0x70>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4013      	ands	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d025      	beq.n	8005520 <st25r3911GetInterrupt+0x64>
    {
        platformProtectST25R391xIrqStatus();
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <st25r3911GetInterrupt+0x74>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <st25r3911GetInterrupt+0x74>)
 80054de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80054e0:	f3bf 8f4f 	dsb	sy
}
 80054e4:	bf00      	nop
 80054e6:	2006      	movs	r0, #6
 80054e8:	f7ff fea0 	bl	800522c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80054ec:	f3bf 8f4f 	dsb	sy
}
 80054f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054f2:	f3bf 8f6f 	isb	sy
}
 80054f6:	bf00      	nop
        st25r3911interrupt.status &= ~irqs;
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <st25r3911GetInterrupt+0x70>)
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	43db      	mvns	r3, r3
 8005500:	4013      	ands	r3, r2
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <st25r3911GetInterrupt+0x70>)
 8005504:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <st25r3911GetInterrupt+0x74>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	3b01      	subs	r3, #1
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <st25r3911GetInterrupt+0x74>)
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <st25r3911GetInterrupt+0x74>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <st25r3911GetInterrupt+0x64>
 800551a:	2006      	movs	r0, #6
 800551c:	f7ff fe6a 	bl	80051f4 <__NVIC_EnableIRQ>
    }
    return irqs;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20003388 	.word	0x20003388
 8005530:	2000060c 	.word	0x2000060c

08005534 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ff24 	bl	800538c <st25r3911ModifyInterrupts>
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	2000      	movs	r0, #0
 8005558:	f7ff ff18 	bl	800538c <st25r3911ModifyInterrupts>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	2203      	movs	r2, #3
 800556e:	4619      	mov	r1, r3
 8005570:	2017      	movs	r0, #23
 8005572:	f7ff fb37 	bl	8004be4 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <st25r3911ClearInterrupts+0x60>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <st25r3911ClearInterrupts+0x60>)
 8005580:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005582:	f3bf 8f4f 	dsb	sy
}
 8005586:	bf00      	nop
 8005588:	2006      	movs	r0, #6
 800558a:	f7ff fe4f 	bl	800522c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800558e:	f3bf 8f4f 	dsb	sy
}
 8005592:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005594:	f3bf 8f6f 	isb	sy
}
 8005598:	bf00      	nop
    st25r3911interrupt.status = 0;
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <st25r3911ClearInterrupts+0x64>)
 800559c:	2200      	movs	r2, #0
 800559e:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <st25r3911ClearInterrupts+0x60>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <st25r3911ClearInterrupts+0x60>)
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <st25r3911ClearInterrupts+0x60>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <st25r3911ClearInterrupts+0x58>
 80055b4:	2006      	movs	r0, #6
 80055b6:	f7ff fe1d 	bl	80051f4 <__NVIC_EnableIRQ>
    return;
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
}
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	2000060c 	.word	0x2000060c
 80055c8:	20003388 	.word	0x20003388

080055cc <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 80055d6:	f000 f881 	bl	80056dc <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	4413      	add	r3, r2
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80055f0:	f000 f874 	bl	80056dc <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	da01      	bge.n	800560a <timerIsExpired+0x22>
  {
    return true;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <timerIsExpired+0x24>
  }
  
  return false;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800561e:	2003      	movs	r0, #3
 8005620:	f000 fd88 	bl	8006134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005624:	2000      	movs	r0, #0
 8005626:	f000 f80d 	bl	8005644 <HAL_InitTick>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	71fb      	strb	r3, [r7, #7]
 8005634:	e001      	b.n	800563a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005636:	f7fe fc17 	bl	8003e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800563a:	79fb      	ldrb	r3, [r7, #7]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <HAL_InitTick+0x68>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d022      	beq.n	800569e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <HAL_InitTick+0x6c>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <HAL_InitTick+0x68>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005664:	fbb1 f3f3 	udiv	r3, r1, r3
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd96 	bl	800619e <HAL_SYSTICK_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10f      	bne.n	8005698 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d809      	bhi.n	8005692 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800567e:	2200      	movs	r2, #0
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	f04f 30ff 	mov.w	r0, #4294967295
 8005686:	f000 fd60 	bl	800614a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <HAL_InitTick+0x70>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e007      	b.n	80056a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	e004      	b.n	80056a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
 800569c:	e001      	b.n	80056a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200000bc 	.word	0x200000bc
 80056b0:	200000b4 	.word	0x200000b4
 80056b4:	200000b8 	.word	0x200000b8

080056b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_IncTick+0x1c>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_IncTick+0x20>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <HAL_IncTick+0x1c>)
 80056c8:	6013      	str	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20003398 	.word	0x20003398
 80056d8:	200000bc 	.word	0x200000bc

080056dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return uwTick;
 80056e0:	4b02      	ldr	r3, [pc, #8]	; (80056ec <HAL_GetTick+0x10>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	20003398 	.word	0x20003398

080056f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056f8:	f7ff fff0 	bl	80056dc <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d004      	beq.n	8005714 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_Delay+0x40>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005714:	bf00      	nop
 8005716:	f7ff ffe1 	bl	80056dc <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8f7      	bhi.n	8005716 <HAL_Delay+0x26>
  {
  }
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200000bc 	.word	0x200000bc

08005734 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08e      	sub	sp, #56	; 0x38
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e127      	b.n	80059a4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d115      	bne.n	800578e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005770:	4b8e      	ldr	r3, [pc, #568]	; (80059ac <HAL_ADC_Init+0x278>)
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4a8d      	ldr	r2, [pc, #564]	; (80059ac <HAL_ADC_Init+0x278>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6213      	str	r3, [r2, #32]
 800577c:	4b8b      	ldr	r3, [pc, #556]	; (80059ac <HAL_ADC_Init+0x278>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fb fbf3 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 80ff 	bne.w	800599a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057a4:	f023 0302 	bic.w	r3, r3, #2
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80057b0:	4b7f      	ldr	r3, [pc, #508]	; (80059b0 <HAL_ADC_Init+0x27c>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	497c      	ldr	r1, [pc, #496]	; (80059b0 <HAL_ADC_Init+0x27c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80057ca:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d2:	4619      	mov	r1, r3
 80057d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80057ee:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80057f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057fc:	4619      	mov	r1, r3
 80057fe:	2302      	movs	r3, #2
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8005816:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581a:	4313      	orrs	r3, r2
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	2b10      	cmp	r3, #16
 8005824:	d007      	beq.n	8005836 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800582e:	4313      	orrs	r3, r2
 8005830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005832:	4313      	orrs	r3, r2
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d04f      	beq.n	80058e4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584a:	4313      	orrs	r3, r2
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005856:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6912      	ldr	r2, [r2, #16]
 800585c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005860:	d003      	beq.n	800586a <HAL_ADC_Init+0x136>
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6912      	ldr	r2, [r2, #16]
 8005866:	2a01      	cmp	r2, #1
 8005868:	d102      	bne.n	8005870 <HAL_ADC_Init+0x13c>
 800586a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586e:	e000      	b.n	8005872 <HAL_ADC_Init+0x13e>
 8005870:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8005872:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005876:	4313      	orrs	r3, r2
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d125      	bne.n	80058d0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	3b01      	subs	r3, #1
 8005894:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005898:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	fa92 f2a2 	rbit	r2, r2
 80058a0:	617a      	str	r2, [r7, #20]
  return result;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	fab2 f282 	clz	r2, r2
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	4093      	lsls	r3, r2
 80058ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	4313      	orrs	r3, r2
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	e00b      	b.n	80058d0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	f043 0201 	orr.w	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <HAL_ADC_Init+0x280>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <HAL_ADC_Init+0x284>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005900:	d003      	beq.n	800590a <HAL_ADC_Init+0x1d6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d119      	bne.n	800593e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	3b01      	subs	r3, #1
 800591a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800591e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	fa92 f2a2 	rbit	r2, r2
 8005926:	60fa      	str	r2, [r7, #12]
  return result;
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	fab2 f282 	clz	r2, r2
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	fa03 f202 	lsl.w	r2, r3, r2
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
 800593c:	e007      	b.n	800594e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_ADC_Init+0x288>)
 8005956:	4013      	ands	r3, r2
 8005958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800595a:	429a      	cmp	r2, r3
 800595c:	d10b      	bne.n	8005976 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	f023 0303 	bic.w	r3, r3, #3
 800596c:	f043 0201 	orr.w	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	64da      	str	r2, [r3, #76]	; 0x4c
 8005974:	e014      	b.n	80059a0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f023 0312 	bic.w	r3, r3, #18
 800597e:	f043 0210 	orr.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005998:	e002      	b.n	80059a0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80059a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3738      	adds	r7, #56	; 0x38
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40012700 	.word	0x40012700
 80059b4:	fcfc16ff 	.word	0xfcfc16ff
 80059b8:	c0fff189 	.word	0xc0fff189
 80059bc:	bf80fffe 	.word	0xbf80fffe

080059c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_ADC_Start_DMA+0x1e>
 80059da:	2302      	movs	r3, #2
 80059dc:	e074      	b.n	8005ac8 <HAL_ADC_Start_DMA+0x108>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fa00 	bl	8005dec <ADC_Enable>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d167      	bne.n	8005ac6 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d106      	bne.n	8005a44 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	f023 0206 	bic.w	r2, r3, #6
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50
 8005a42:	e002      	b.n	8005a4a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <HAL_ADC_Start_DMA+0x110>)
 8005a58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <HAL_ADC_Start_DMA+0x114>)
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <HAL_ADC_Start_DMA+0x118>)
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005a82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3358      	adds	r3, #88	; 0x58
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f000 fbfc 	bl	80062a0 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ac4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	08005ea5 	.word	0x08005ea5
 8005ad4:	08005f4d 	.word	0x08005f4d
 8005ad8:	08005f69 	.word	0x08005f69

08005adc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x20>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e14f      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x2c0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d81c      	bhi.n	8005b7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	3b05      	subs	r3, #5
 8005b56:	221f      	movs	r2, #31
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	4019      	ands	r1, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3b05      	subs	r3, #5
 8005b70:	fa00 f203 	lsl.w	r2, r0, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b7c:	e07e      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d81c      	bhi.n	8005bc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	3b23      	subs	r3, #35	; 0x23
 8005b98:	221f      	movs	r2, #31
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	4019      	ands	r1, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	3b23      	subs	r3, #35	; 0x23
 8005bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bbe:	e05d      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b12      	cmp	r3, #18
 8005bc6:	d81c      	bhi.n	8005c02 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3b41      	subs	r3, #65	; 0x41
 8005bda:	221f      	movs	r2, #31
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	4019      	ands	r1, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3b41      	subs	r3, #65	; 0x41
 8005bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
 8005c00:	e03c      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b18      	cmp	r3, #24
 8005c08:	d81c      	bhi.n	8005c44 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	3b5f      	subs	r3, #95	; 0x5f
 8005c1c:	221f      	movs	r2, #31
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	4019      	ands	r1, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	3b5f      	subs	r3, #95	; 0x5f
 8005c36:	fa00 f203 	lsl.w	r2, r0, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34
 8005c42:	e01b      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	3b7d      	subs	r3, #125	; 0x7d
 8005c56:	221f      	movs	r2, #31
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	4019      	ands	r1, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3b7d      	subs	r3, #125	; 0x7d
 8005c70:	fa00 f203 	lsl.w	r2, r0, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b09      	cmp	r3, #9
 8005c82:	d81a      	bhi.n	8005cba <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6959      	ldr	r1, [r3, #20]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	2207      	movs	r2, #7
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	4019      	ands	r1, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6898      	ldr	r0, [r3, #8]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	fa00 f203 	lsl.w	r2, r0, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	615a      	str	r2, [r3, #20]
 8005cb8:	e05d      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b13      	cmp	r3, #19
 8005cc0:	d81c      	bhi.n	8005cfc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6919      	ldr	r1, [r3, #16]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3b1e      	subs	r3, #30
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	4019      	ands	r1, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6898      	ldr	r0, [r3, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	4413      	add	r3, r2
 8005cec:	3b1e      	subs	r3, #30
 8005cee:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	e03c      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b1d      	cmp	r3, #29
 8005d02:	d81c      	bhi.n	8005d3e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68d9      	ldr	r1, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	3b3c      	subs	r3, #60	; 0x3c
 8005d16:	2207      	movs	r2, #7
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	4019      	ands	r1, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6898      	ldr	r0, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b3c      	subs	r3, #60	; 0x3c
 8005d30:	fa00 f203 	lsl.w	r2, r0, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e01b      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3b5a      	subs	r3, #90	; 0x5a
 8005d50:	2207      	movs	r2, #7
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	43db      	mvns	r3, r3
 8005d58:	4019      	ands	r1, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6898      	ldr	r0, [r3, #8]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	3b5a      	subs	r3, #90	; 0x5a
 8005d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d003      	beq.n	8005d86 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d82:	2b11      	cmp	r3, #17
 8005d84:	d121      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005d86:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11b      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d9c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d111      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	0c9a      	lsrs	r2, r3, #18
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005dbc:	e002      	b.n	8005dc4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f9      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012700 	.word	0x40012700
 8005de4:	200000b4 	.word	0x200000b4
 8005de8:	431bde83 	.word	0x431bde83

08005dec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d043      	beq.n	8005e92 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <ADC_Enable+0xb0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <ADC_Enable+0xb4>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	0c9a      	lsrs	r2, r3, #18
 8005e26:	4613      	mov	r3, r2
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005e2e:	e002      	b.n	8005e36 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f9      	bne.n	8005e30 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005e3c:	f7ff fc4e 	bl	80056dc <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e42:	e01f      	b.n	8005e84 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005e44:	f7ff fc4a 	bl	80056dc <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d918      	bls.n	8005e84 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d011      	beq.n	8005e84 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e64:	f043 0210 	orr.w	r2, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	f043 0201 	orr.w	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e007      	b.n	8005e94 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d1d8      	bne.n	8005e44 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	200000b4 	.word	0x200000b4
 8005ea0:	431bde83 	.word	0x431bde83

08005ea4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d13d      	bne.n	8005f3a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d12c      	bne.n	8005f32 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d127      	bne.n	8005f32 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d119      	bne.n	8005f32 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0220 	bic.w	r2, r2, #32
 8005f0c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fdd2 	bl	8005adc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005f38:	e004      	b.n	8005f44 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff fdc7 	bl	8005aee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff fdb6 	bl	8005b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <__NVIC_SetPriorityGrouping>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fce:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	60d3      	str	r3, [r2, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <__NVIC_GetPriorityGrouping>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <__NVIC_GetPriorityGrouping+0x18>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	f003 0307 	and.w	r3, r3, #7
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <__NVIC_EnableIRQ>:
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800600a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600e:	2b00      	cmp	r3, #0
 8006010:	db0b      	blt.n	800602a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	f003 021f 	and.w	r2, r3, #31
 8006018:	4906      	ldr	r1, [pc, #24]	; (8006034 <__NVIC_EnableIRQ+0x34>)
 800601a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2001      	movs	r0, #1
 8006022:	fa00 f202 	lsl.w	r2, r0, r2
 8006026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	e000e100 	.word	0xe000e100

08006038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	6039      	str	r1, [r7, #0]
 8006042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db0a      	blt.n	8006062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	490c      	ldr	r1, [pc, #48]	; (8006084 <__NVIC_SetPriority+0x4c>)
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	440b      	add	r3, r1
 800605c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006060:	e00a      	b.n	8006078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4908      	ldr	r1, [pc, #32]	; (8006088 <__NVIC_SetPriority+0x50>)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3b04      	subs	r3, #4
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	440b      	add	r3, r1
 8006076:	761a      	strb	r2, [r3, #24]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000e100 	.word	0xe000e100
 8006088:	e000ed00 	.word	0xe000ed00

0800608c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f1c3 0307 	rsb	r3, r3, #7
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	bf28      	it	cs
 80060aa:	2304      	movcs	r3, #4
 80060ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3304      	adds	r3, #4
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d902      	bls.n	80060bc <NVIC_EncodePriority+0x30>
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	3b03      	subs	r3, #3
 80060ba:	e000      	b.n	80060be <NVIC_EncodePriority+0x32>
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060c0:	f04f 32ff 	mov.w	r2, #4294967295
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43da      	mvns	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	401a      	ands	r2, r3
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060d4:	f04f 31ff 	mov.w	r1, #4294967295
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	43d9      	mvns	r1, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060e4:	4313      	orrs	r3, r2
         );
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3724      	adds	r7, #36	; 0x24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006100:	d301      	bcc.n	8006106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006102:	2301      	movs	r3, #1
 8006104:	e00f      	b.n	8006126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006106:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <SysTick_Config+0x40>)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800610e:	210f      	movs	r1, #15
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	f7ff ff90 	bl	8006038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <SysTick_Config+0x40>)
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800611e:	4b04      	ldr	r3, [pc, #16]	; (8006130 <SysTick_Config+0x40>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000e010 	.word	0xe000e010

08006134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff ff2d 	bl	8005f9c <__NVIC_SetPriorityGrouping>
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	4603      	mov	r3, r0
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
 8006156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800615c:	f7ff ff42 	bl	8005fe4 <__NVIC_GetPriorityGrouping>
 8006160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	6978      	ldr	r0, [r7, #20]
 8006168:	f7ff ff90 	bl	800608c <NVIC_EncodePriority>
 800616c:	4602      	mov	r2, r0
 800616e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ff5f 	bl	8006038 <__NVIC_SetPriority>
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	4603      	mov	r3, r0
 800618a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800618c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff ff35 	bl	8006000 <__NVIC_EnableIRQ>
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff ffa2 	bl	80060f0 <SysTick_Config>
 80061ac:	4603      	mov	r3, r0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e059      	b.n	800627e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	4b2d      	ldr	r3, [pc, #180]	; (8006288 <HAL_DMA_Init+0xd0>)
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d80f      	bhi.n	80061f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_DMA_Init+0xd4>)
 80061de:	4413      	add	r3, r2
 80061e0:	4a2b      	ldr	r2, [pc, #172]	; (8006290 <HAL_DMA_Init+0xd8>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	009a      	lsls	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <HAL_DMA_Init+0xdc>)
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80061f4:	e00e      	b.n	8006214 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b26      	ldr	r3, [pc, #152]	; (8006298 <HAL_DMA_Init+0xe0>)
 80061fe:	4413      	add	r3, r2
 8006200:	4a23      	ldr	r2, [pc, #140]	; (8006290 <HAL_DMA_Init+0xd8>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	091b      	lsrs	r3, r3, #4
 8006208:	009a      	lsls	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a22      	ldr	r2, [pc, #136]	; (800629c <HAL_DMA_Init+0xe4>)
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	40026407 	.word	0x40026407
 800628c:	bffd9ff8 	.word	0xbffd9ff8
 8006290:	cccccccd 	.word	0xcccccccd
 8006294:	40026000 	.word	0x40026000
 8006298:	bffd9bf8 	.word	0xbffd9bf8
 800629c:	40026400 	.word	0x40026400

080062a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_DMA_Start_IT+0x20>
 80062bc:	2302      	movs	r3, #2
 80062be:	e04b      	b.n	8006358 <HAL_DMA_Start_IT+0xb8>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d13a      	bne.n	800634a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f92e 	bl	800655a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 020e 	orr.w	r2, r2, #14
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e00f      	b.n	8006338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 020a 	orr.w	r2, r2, #10
 8006336:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e005      	b.n	8006356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d005      	beq.n	8006384 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2204      	movs	r2, #4
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
 8006382:	e029      	b.n	80063d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 020e 	bic.w	r2, r2, #14
 8006392:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f003 021c 	and.w	r2, r3, #28
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f202 	lsl.w	r2, r1, r2
 80063b6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
    }
  }
  return status;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 031c 	and.w	r3, r3, #28
 8006402:	2204      	movs	r2, #4
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d026      	beq.n	800645c <HAL_DMA_IRQHandler+0x7a>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d021      	beq.n	800645c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0204 	bic.w	r2, r2, #4
 8006434:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f003 021c 	and.w	r2, r3, #28
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	2104      	movs	r1, #4
 8006444:	fa01 f202 	lsl.w	r2, r1, r2
 8006448:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d071      	beq.n	8006536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800645a:	e06c      	b.n	8006536 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	f003 031c 	and.w	r3, r3, #28
 8006464:	2202      	movs	r2, #2
 8006466:	409a      	lsls	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d02e      	beq.n	80064ce <HAL_DMA_IRQHandler+0xec>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d029      	beq.n	80064ce <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 020a 	bic.w	r2, r2, #10
 8006496:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	f003 021c 	and.w	r2, r3, #28
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	2102      	movs	r1, #2
 80064ae:	fa01 f202 	lsl.w	r2, r1, r2
 80064b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d038      	beq.n	8006536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80064cc:	e033      	b.n	8006536 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f003 031c 	and.w	r3, r3, #28
 80064d6:	2208      	movs	r2, #8
 80064d8:	409a      	lsls	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02a      	beq.n	8006538 <HAL_DMA_IRQHandler+0x156>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d025      	beq.n	8006538 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 020e 	bic.w	r2, r2, #14
 80064fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f003 021c 	and.w	r2, r3, #28
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f202 	lsl.w	r2, r1, r2
 800650e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006536:	bf00      	nop
 8006538:	bf00      	nop
}
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800654e:	b2db      	uxtb	r3, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f003 021c 	and.w	r2, r3, #28
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2101      	movs	r1, #1
 8006576:	fa01 f202 	lsl.w	r2, r1, r2
 800657a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b10      	cmp	r3, #16
 800658a:	d108      	bne.n	800659e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800659c:	e007      	b.n	80065ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80065ce:	e160      	b.n	8006892 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	2101      	movs	r1, #1
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8152 	beq.w	800688c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d005      	beq.n	8006600 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d130      	bne.n	8006662 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	2203      	movs	r2, #3
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4013      	ands	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006636:	2201      	movs	r2, #1
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4013      	ands	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	f003 0201 	and.w	r2, r3, #1
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b03      	cmp	r3, #3
 800666c:	d017      	beq.n	800669e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	2203      	movs	r2, #3
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4013      	ands	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d123      	bne.n	80066f2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	08da      	lsrs	r2, r3, #3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3208      	adds	r2, #8
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	220f      	movs	r2, #15
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4013      	ands	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	08da      	lsrs	r2, r3, #3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3208      	adds	r2, #8
 80066ec:	6939      	ldr	r1, [r7, #16]
 80066ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	2203      	movs	r2, #3
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4013      	ands	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f003 0203 	and.w	r2, r3, #3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80ac 	beq.w	800688c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006734:	4b5e      	ldr	r3, [pc, #376]	; (80068b0 <HAL_GPIO_Init+0x2f8>)
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	4a5d      	ldr	r2, [pc, #372]	; (80068b0 <HAL_GPIO_Init+0x2f8>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6213      	str	r3, [r2, #32]
 8006740:	4b5b      	ldr	r3, [pc, #364]	; (80068b0 <HAL_GPIO_Init+0x2f8>)
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800674c:	4a59      	ldr	r2, [pc, #356]	; (80068b4 <HAL_GPIO_Init+0x2fc>)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	089b      	lsrs	r3, r3, #2
 8006752:	3302      	adds	r3, #2
 8006754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006758:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	220f      	movs	r2, #15
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	43db      	mvns	r3, r3
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4013      	ands	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a51      	ldr	r2, [pc, #324]	; (80068b8 <HAL_GPIO_Init+0x300>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d025      	beq.n	80067c4 <HAL_GPIO_Init+0x20c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a50      	ldr	r2, [pc, #320]	; (80068bc <HAL_GPIO_Init+0x304>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d01f      	beq.n	80067c0 <HAL_GPIO_Init+0x208>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a4f      	ldr	r2, [pc, #316]	; (80068c0 <HAL_GPIO_Init+0x308>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d019      	beq.n	80067bc <HAL_GPIO_Init+0x204>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a4e      	ldr	r2, [pc, #312]	; (80068c4 <HAL_GPIO_Init+0x30c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_GPIO_Init+0x200>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a4d      	ldr	r2, [pc, #308]	; (80068c8 <HAL_GPIO_Init+0x310>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00d      	beq.n	80067b4 <HAL_GPIO_Init+0x1fc>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a4c      	ldr	r2, [pc, #304]	; (80068cc <HAL_GPIO_Init+0x314>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <HAL_GPIO_Init+0x1f8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a4b      	ldr	r2, [pc, #300]	; (80068d0 <HAL_GPIO_Init+0x318>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_GPIO_Init+0x1f4>
 80067a8:	2306      	movs	r3, #6
 80067aa:	e00c      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067ac:	2307      	movs	r3, #7
 80067ae:	e00a      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067b0:	2305      	movs	r3, #5
 80067b2:	e008      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067b4:	2304      	movs	r3, #4
 80067b6:	e006      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067b8:	2303      	movs	r3, #3
 80067ba:	e004      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067bc:	2302      	movs	r3, #2
 80067be:	e002      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <HAL_GPIO_Init+0x20e>
 80067c4:	2300      	movs	r3, #0
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f002 0203 	and.w	r2, r2, #3
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	4093      	lsls	r3, r2
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80067d6:	4937      	ldr	r1, [pc, #220]	; (80068b4 <HAL_GPIO_Init+0x2fc>)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	3302      	adds	r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067e4:	4b3b      	ldr	r3, [pc, #236]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4013      	ands	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006808:	4a32      	ldr	r2, [pc, #200]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	43db      	mvns	r3, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006832:	4a28      	ldr	r2, [pc, #160]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006838:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	43db      	mvns	r3, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	43db      	mvns	r3, r3
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4013      	ands	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <HAL_GPIO_Init+0x31c>)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3301      	adds	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f ae97 	bne.w	80065d0 <HAL_GPIO_Init+0x18>
  }
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40020000 	.word	0x40020000
 80068bc:	40020400 	.word	0x40020400
 80068c0:	40020800 	.word	0x40020800
 80068c4:	40020c00 	.word	0x40020c00
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40021400 	.word	0x40021400
 80068d0:	40021800 	.word	0x40021800
 80068d4:	40010400 	.word	0x40010400

080068d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e001      	b.n	80068fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr

08006906 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	807b      	strh	r3, [r7, #2]
 8006912:	4613      	mov	r3, r2
 8006914:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006916:	787b      	ldrb	r3, [r7, #1]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800691c:	887a      	ldrh	r2, [r7, #2]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006922:	e003      	b.n	800692c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006924:	887b      	ldrh	r3, [r7, #2]
 8006926:	041a      	lsls	r2, r3, #16
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	619a      	str	r2, [r3, #24]
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr

08006936 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006948:	887a      	ldrh	r2, [r7, #2]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4013      	ands	r3, r2
 800694e:	041a      	lsls	r2, r3, #16
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	43d9      	mvns	r1, r3
 8006954:	887b      	ldrh	r3, [r7, #2]
 8006956:	400b      	ands	r3, r1
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	619a      	str	r2, [r3, #24]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800697e:	4a05      	ldr	r2, [pc, #20]	; (8006994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006984:	88fb      	ldrh	r3, [r7, #6]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f806 	bl	8006998 <HAL_GPIO_EXTI_Callback>
  }
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40010400 	.word	0x40010400

08006998 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e12b      	b.n	8006c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fa fd78 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2224      	movs	r2, #36	; 0x24
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a10:	f002 fe46 	bl	80096a0 <HAL_RCC_GetPCLK1Freq>
 8006a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4a81      	ldr	r2, [pc, #516]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d807      	bhi.n	8006a30 <HAL_I2C_Init+0x84>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a80      	ldr	r2, [pc, #512]	; (8006c24 <HAL_I2C_Init+0x278>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf94      	ite	ls
 8006a28:	2301      	movls	r3, #1
 8006a2a:	2300      	movhi	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	e006      	b.n	8006a3e <HAL_I2C_Init+0x92>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <HAL_I2C_Init+0x27c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bf94      	ite	ls
 8006a38:	2301      	movls	r3, #1
 8006a3a:	2300      	movhi	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0e7      	b.n	8006c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a78      	ldr	r2, [pc, #480]	; (8006c2c <HAL_I2C_Init+0x280>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	0c9b      	lsrs	r3, r3, #18
 8006a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a6a      	ldr	r2, [pc, #424]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d802      	bhi.n	8006a80 <HAL_I2C_Init+0xd4>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	e009      	b.n	8006a94 <HAL_I2C_Init+0xe8>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	4a69      	ldr	r2, [pc, #420]	; (8006c30 <HAL_I2C_Init+0x284>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	3301      	adds	r3, #1
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	495c      	ldr	r1, [pc, #368]	; (8006c20 <HAL_I2C_Init+0x274>)
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	d819      	bhi.n	8006ae8 <HAL_I2C_Init+0x13c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1e59      	subs	r1, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ac8:	400b      	ands	r3, r1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_I2C_Init+0x138>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1e59      	subs	r1, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae2:	e051      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e04f      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d111      	bne.n	8006b14 <HAL_I2C_Init+0x168>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	1e58      	subs	r0, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	440b      	add	r3, r1
 8006afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b02:	3301      	adds	r3, #1
 8006b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2301      	moveq	r3, #1
 8006b0e:	2300      	movne	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	e012      	b.n	8006b3a <HAL_I2C_Init+0x18e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1e58      	subs	r0, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	0099      	lsls	r1, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_I2C_Init+0x196>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10e      	bne.n	8006b68 <HAL_I2C_Init+0x1bc>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1e58      	subs	r0, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	440b      	add	r3, r1
 8006b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b66:	e00f      	b.n	8006b88 <HAL_I2C_Init+0x1dc>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1e58      	subs	r0, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	0099      	lsls	r1, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6911      	ldr	r1, [r2, #16]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68d2      	ldr	r2, [r2, #12]
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	000186a0 	.word	0x000186a0
 8006c24:	001e847f 	.word	0x001e847f
 8006c28:	003d08ff 	.word	0x003d08ff
 8006c2c:	431bde83 	.word	0x431bde83
 8006c30:	10624dd3 	.word	0x10624dd3

08006c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	460b      	mov	r3, r1
 8006c42:	817b      	strh	r3, [r7, #10]
 8006c44:	4613      	mov	r3, r2
 8006c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c48:	f7fe fd48 	bl	80056dc <HAL_GetTick>
 8006c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	f040 80e0 	bne.w	8006e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2319      	movs	r3, #25
 8006c62:	2201      	movs	r2, #1
 8006c64:	4970      	ldr	r1, [pc, #448]	; (8006e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 fdda 	bl	8008820 <I2C_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
 8006c74:	e0d3      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2C_Master_Transmit+0x50>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e0cc      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d007      	beq.n	8006caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0201 	orr.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2210      	movs	r2, #16
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	893a      	ldrh	r2, [r7, #8]
 8006cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a50      	ldr	r2, [pc, #320]	; (8006e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006cec:	8979      	ldrh	r1, [r7, #10]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f001 fc6a 	bl	80085cc <I2C_MasterRequestWrite>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e08d      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006d18:	e066      	b.n	8006de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 fe54 	bl	80089cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d107      	bne.n	8006d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e06b      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d11b      	bne.n	8006dbc <HAL_I2C_Master_Transmit+0x188>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d017      	beq.n	8006dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	6a39      	ldr	r1, [r7, #32]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 fe44 	bl	8008a4e <I2C_WaitOnBTFFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d107      	bne.n	8006de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e01a      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d194      	bne.n	8006d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e000      	b.n	8006e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	00100002 	.word	0x00100002
 8006e2c:	ffff0000 	.word	0xffff0000

08006e30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d003      	beq.n	8006e68 <HAL_I2C_EV_IRQHandler+0x38>
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	f040 80c1 	bne.w	8006fea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <HAL_I2C_EV_IRQHandler+0x6e>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e88:	d003      	beq.n	8006e92 <HAL_I2C_EV_IRQHandler+0x62>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e90:	d101      	bne.n	8006e96 <HAL_I2C_EV_IRQHandler+0x66>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_I2C_EV_IRQHandler+0x68>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f000 8132 	beq.w	8007102 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <HAL_I2C_EV_IRQHandler+0x92>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d006      	beq.n	8006ec2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fe6b 	bl	8008b90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fd6f 	bl	800799e <I2C_Master_SB>
 8006ec0:	e092      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	0a5b      	lsrs	r3, r3, #9
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fde4 	bl	8007aa8 <I2C_Master_ADD10>
 8006ee0:	e082      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_I2C_EV_IRQHandler+0xd2>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	0a5b      	lsrs	r3, r3, #9
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fdfd 	bl	8007afa <I2C_Master_ADDR>
 8006f00:	e072      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	089b      	lsrs	r3, r3, #2
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d03b      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1c:	f000 80f3 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	09db      	lsrs	r3, r3, #7
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00f      	beq.n	8006f4c <HAL_I2C_EV_IRQHandler+0x11c>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	0a9b      	lsrs	r3, r3, #10
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <HAL_I2C_EV_IRQHandler+0x11c>
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f9e9 	bl	800731c <I2C_MasterTransmit_TXE>
 8006f4a:	e04d      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80d6 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	0a5b      	lsrs	r3, r3, #9
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80cf 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b21      	cmp	r3, #33	; 0x21
 8006f6c:	d103      	bne.n	8006f76 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa70 	bl	8007454 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f74:	e0c7      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	f040 80c4 	bne.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fade 	bl	8007540 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f84:	e0bf      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	f000 80b7 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	099b      	lsrs	r3, r3, #6
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x194>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x194>
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fb53 	bl	8007668 <I2C_MasterReceive_RXNE>
 8006fc2:	e011      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 809a 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8093 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fbf2 	bl	80077ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fe6:	e08e      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006fe8:	e08d      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e007      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d012      	beq.n	800703e <HAL_I2C_EV_IRQHandler+0x20e>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	0a5b      	lsrs	r3, r3, #9
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007034:	69b9      	ldr	r1, [r7, #24]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 ffab 	bl	8007f92 <I2C_Slave_ADDR>
 800703c:	e066      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x22e>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	0a5b      	lsrs	r3, r3, #9
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 ffe6 	bl	8008028 <I2C_Slave_STOPF>
 800705c:	e056      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b21      	cmp	r3, #33	; 0x21
 8007062:	d002      	beq.n	800706a <HAL_I2C_EV_IRQHandler+0x23a>
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b29      	cmp	r3, #41	; 0x29
 8007068:	d125      	bne.n	80070b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	09db      	lsrs	r3, r3, #7
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00f      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x266>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	0a9b      	lsrs	r3, r3, #10
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x266>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	089b      	lsrs	r3, r3, #2
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fec3 	bl	8007e1a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007094:	e039      	b.n	800710a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d033      	beq.n	800710a <HAL_I2C_EV_IRQHandler+0x2da>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	0a5b      	lsrs	r3, r3, #9
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d02d      	beq.n	800710a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fef0 	bl	8007e94 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b4:	e029      	b.n	800710a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	099b      	lsrs	r3, r3, #6
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	0a9b      	lsrs	r3, r3, #10
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	089b      	lsrs	r3, r3, #2
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fefa 	bl	8007ed4 <I2C_SlaveReceive_RXNE>
 80070e0:	e014      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 ff28 	bl	8007f50 <I2C_SlaveReceive_BTF>
 8007100:	e004      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007102:	bf00      	nop
 8007104:	e002      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800710a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800710c:	3720      	adds	r7, #32
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b08a      	sub	sp, #40	; 0x28
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800712a:	2300      	movs	r3, #0
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007134:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	0a1b      	lsrs	r3, r3, #8
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <HAL_I2C_ER_IRQHandler+0x4e>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800715e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	0a5b      	lsrs	r3, r3, #9
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <HAL_I2C_ER_IRQHandler+0x78>
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	f043 0302 	orr.w	r3, r3, #2
 800717e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007188:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	0a9b      	lsrs	r3, r3, #10
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d03f      	beq.n	8007216 <HAL_I2C_ER_IRQHandler+0x104>
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d039      	beq.n	8007216 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80071a2:	7efb      	ldrb	r3, [r7, #27]
 80071a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80071bc:	7ebb      	ldrb	r3, [r7, #26]
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d112      	bne.n	80071e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10f      	bne.n	80071e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	2b21      	cmp	r3, #33	; 0x21
 80071cc:	d008      	beq.n	80071e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80071ce:	7cfb      	ldrb	r3, [r7, #19]
 80071d0:	2b29      	cmp	r3, #41	; 0x29
 80071d2:	d005      	beq.n	80071e0 <HAL_I2C_ER_IRQHandler+0xce>
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	2b28      	cmp	r3, #40	; 0x28
 80071d8:	d106      	bne.n	80071e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b21      	cmp	r3, #33	; 0x21
 80071de:	d103      	bne.n	80071e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f851 	bl	8008288 <I2C_Slave_AF>
 80071e6:	e016      	b.n	8007216 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	f043 0304 	orr.w	r3, r3, #4
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80071fa:	7efb      	ldrb	r3, [r7, #27]
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d002      	beq.n	8007206 <HAL_I2C_ER_IRQHandler+0xf4>
 8007200:	7efb      	ldrb	r3, [r7, #27]
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d107      	bne.n	8007216 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	0adb      	lsrs	r3, r3, #11
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00e      	beq.n	8007240 <HAL_I2C_ER_IRQHandler+0x12e>
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	f043 0308 	orr.w	r3, r3, #8
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800723e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 f888 	bl	8008368 <I2C_ITError>
  }
}
 8007258:	bf00      	nop
 800725a:	3728      	adds	r7, #40	; 0x28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr

08007272 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
 80072b4:	4613      	mov	r3, r2
 80072b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr

080072e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007332:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	2b00      	cmp	r3, #0
 8007340:	d150      	bne.n	80073e4 <I2C_MasterTransmit_TXE+0xc8>
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b21      	cmp	r3, #33	; 0x21
 8007346:	d14d      	bne.n	80073e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b08      	cmp	r3, #8
 800734c:	d01d      	beq.n	800738a <I2C_MasterTransmit_TXE+0x6e>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b20      	cmp	r3, #32
 8007352:	d01a      	beq.n	800738a <I2C_MasterTransmit_TXE+0x6e>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800735a:	d016      	beq.n	800738a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800736a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2211      	movs	r2, #17
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff ff6c 	bl	8007260 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007388:	e060      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007398:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d107      	bne.n	80073d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff81 	bl	80072d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073d2:	e03b      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff3f 	bl	8007260 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073e2:	e033      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b21      	cmp	r3, #33	; 0x21
 80073e8:	d005      	beq.n	80073f6 <I2C_MasterTransmit_TXE+0xda>
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d12d      	bne.n	800744c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	2b22      	cmp	r3, #34	; 0x22
 80073f4:	d12a      	bne.n	800744c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007410:	e01c      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d103      	bne.n	8007426 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f88e 	bl	8007540 <I2C_MemoryTransmit_TXE_BTF>
}
 8007424:	e012      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800744a:	e7ff      	b.n	800744c <I2C_MasterTransmit_TXE+0x130>
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b21      	cmp	r3, #33	; 0x21
 800746c:	d164      	bne.n	8007538 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d012      	beq.n	800749e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800749c:	e04c      	b.n	8007538 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d01d      	beq.n	80074e0 <I2C_MasterTransmit_BTF+0x8c>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d01a      	beq.n	80074e0 <I2C_MasterTransmit_BTF+0x8c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074b0:	d016      	beq.n	80074e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2211      	movs	r2, #17
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fec1 	bl	8007260 <HAL_I2C_MasterTxCpltCallback>
}
 80074de:	e02b      	b.n	8007538 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d107      	bne.n	800752a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fed6 	bl	80072d4 <HAL_I2C_MemTxCpltCallback>
}
 8007528:	e006      	b.n	8007538 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fe94 	bl	8007260 <HAL_I2C_MasterTxCpltCallback>
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11d      	bne.n	8007594 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10b      	bne.n	8007578 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007576:	e073      	b.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757c:	b29b      	uxth	r3, r3
 800757e:	121b      	asrs	r3, r3, #8
 8007580:	b2da      	uxtb	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007592:	e065      	b.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10b      	bne.n	80075b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075b2:	e055      	b.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d151      	bne.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b22      	cmp	r3, #34	; 0x22
 80075c0:	d10d      	bne.n	80075de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075dc:	e040      	b.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b21      	cmp	r3, #33	; 0x21
 80075ec:	d112      	bne.n	8007614 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007612:	e025      	b.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d120      	bne.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b21      	cmp	r3, #33	; 0x21
 8007622:	d11d      	bne.n	8007660 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007632:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007642:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fe3a 	bl	80072d4 <HAL_I2C_MemTxCpltCallback>
}
 8007660:	bf00      	nop
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	f040 80a2 	bne.w	80077c2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d921      	bls.n	80076d0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	f040 8082 	bne.w	80077c2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076cc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80076ce:	e078      	b.n	80077c2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d074      	beq.n	80077c2 <I2C_MasterReceive_RXNE+0x15a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d002      	beq.n	80076e4 <I2C_MasterReceive_RXNE+0x7c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d16e      	bne.n	80077c2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f9f3 	bl	8008ad0 <I2C_WaitOnSTOPRequestThroughIT>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d142      	bne.n	8007776 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800770e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d10a      	bne.n	8007760 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fdc4 	bl	80072e6 <HAL_I2C_MemRxCpltCallback>
}
 800775e:	e030      	b.n	80077c2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2212      	movs	r2, #18
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fd7f 	bl	8007272 <HAL_I2C_MasterRxCpltCallback>
}
 8007774:	e025      	b.n	80077c2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007784:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fd9b 	bl	80072f8 <HAL_I2C_ErrorCallback>
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d11b      	bne.n	800781a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007818:	e0bd      	b.n	8007996 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b03      	cmp	r3, #3
 8007822:	d129      	bne.n	8007878 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007832:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d00a      	beq.n	8007850 <I2C_MasterReceive_BTF+0x86>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d007      	beq.n	8007850 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007876:	e08e      	b.n	8007996 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d176      	bne.n	8007970 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d002      	beq.n	800788e <I2C_MasterReceive_BTF+0xc4>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b10      	cmp	r3, #16
 800788c:	d108      	bne.n	80078a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e019      	b.n	80078d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d002      	beq.n	80078ac <I2C_MasterReceive_BTF+0xe2>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d108      	bne.n	80078be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e00a      	b.n	80078d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d007      	beq.n	80078d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800792e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d10a      	bne.n	800795a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff fcc7 	bl	80072e6 <HAL_I2C_MemRxCpltCallback>
}
 8007958:	e01d      	b.n	8007996 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2212      	movs	r2, #18
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff fc82 	bl	8007272 <HAL_I2C_MasterRxCpltCallback>
}
 800796e:	e012      	b.n	8007996 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d117      	bne.n	80079e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80079cc:	e067      	b.n	8007a9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	611a      	str	r2, [r3, #16]
}
 80079e0:	e05d      	b.n	8007a9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ea:	d133      	bne.n	8007a54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b21      	cmp	r3, #33	; 0x21
 80079f6:	d109      	bne.n	8007a0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a08:	611a      	str	r2, [r3, #16]
 8007a0a:	e008      	b.n	8007a1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <I2C_Master_SB+0x92>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d108      	bne.n	8007a42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d032      	beq.n	8007a9e <I2C_Master_SB+0x100>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02d      	beq.n	8007a9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a50:	605a      	str	r2, [r3, #4]
}
 8007a52:	e024      	b.n	8007a9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10e      	bne.n	8007a7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	11db      	asrs	r3, r3, #7
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0306 	and.w	r3, r3, #6
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f063 030f 	orn	r3, r3, #15
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	611a      	str	r2, [r3, #16]
}
 8007a78:	e011      	b.n	8007a9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d10d      	bne.n	8007a9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	11db      	asrs	r3, r3, #7
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 0306 	and.w	r3, r3, #6
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f063 030e 	orn	r3, r3, #14
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	611a      	str	r2, [r3, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <I2C_Master_ADD10+0x26>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <I2C_Master_ADD10+0x48>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aee:	605a      	str	r2, [r3, #4]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b091      	sub	sp, #68	; 0x44
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b22      	cmp	r3, #34	; 0x22
 8007b22:	f040 8169 	bne.w	8007df8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10f      	bne.n	8007b4e <I2C_Master_ADDR+0x54>
 8007b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d10b      	bne.n	8007b4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b36:	2300      	movs	r3, #0
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	e160      	b.n	8007e10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d11d      	bne.n	8007b92 <I2C_Master_ADDR+0x98>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b5e:	d118      	bne.n	8007b92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b60:	2300      	movs	r3, #0
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8007b90:	e13e      	b.n	8007e10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d113      	bne.n	8007bc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e115      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	f040 808a 	bne.w	8007ce4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bd6:	d137      	bne.n	8007c48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf6:	d113      	bne.n	8007c20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c08:	2300      	movs	r3, #0
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	e0e7      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c20:	2300      	movs	r3, #0
 8007c22:	623b      	str	r3, [r7, #32]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	623b      	str	r3, [r7, #32]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	623b      	str	r3, [r7, #32]
 8007c34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e0d3      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d02e      	beq.n	8007cac <I2C_Master_ADDR+0x1b2>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d02b      	beq.n	8007cac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	2b12      	cmp	r3, #18
 8007c58:	d102      	bne.n	8007c60 <I2C_Master_ADDR+0x166>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d125      	bne.n	8007cac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d00e      	beq.n	8007c84 <I2C_Master_ADDR+0x18a>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d00b      	beq.n	8007c84 <I2C_Master_ADDR+0x18a>
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d008      	beq.n	8007c84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e007      	b.n	8007c94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	e0a1      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	61bb      	str	r3, [r7, #24]
 8007cd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e085      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d14d      	bne.n	8007d8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d016      	beq.n	8007d22 <I2C_Master_ADDR+0x228>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d013      	beq.n	8007d22 <I2C_Master_ADDR+0x228>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d010      	beq.n	8007d22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	e007      	b.n	8007d32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d40:	d117      	bne.n	8007d72 <I2C_Master_ADDR+0x278>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d48:	d00b      	beq.n	8007d62 <I2C_Master_ADDR+0x268>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d008      	beq.n	8007d62 <I2C_Master_ADDR+0x268>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d005      	beq.n	8007d62 <I2C_Master_ADDR+0x268>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d002      	beq.n	8007d62 <I2C_Master_ADDR+0x268>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d107      	bne.n	8007d72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	e032      	b.n	8007df0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da8:	d117      	bne.n	8007dda <I2C_Master_ADDR+0x2e0>
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007db0:	d00b      	beq.n	8007dca <I2C_Master_ADDR+0x2d0>
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d008      	beq.n	8007dca <I2C_Master_ADDR+0x2d0>
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d005      	beq.n	8007dca <I2C_Master_ADDR+0x2d0>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d002      	beq.n	8007dca <I2C_Master_ADDR+0x2d0>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d107      	bne.n	8007dda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007df6:	e00b      	b.n	8007e10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
}
 8007e0e:	e7ff      	b.n	8007e10 <I2C_Master_ADDR+0x316>
 8007e10:	bf00      	nop
 8007e12:	3744      	adds	r7, #68	; 0x44
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02b      	beq.n	8007e8c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d114      	bne.n	8007e8c <I2C_SlaveTransmit_TXE+0x72>
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b29      	cmp	r3, #41	; 0x29
 8007e66:	d111      	bne.n	8007e8c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2221      	movs	r2, #33	; 0x21
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2228      	movs	r2, #40	; 0x28
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff f9fc 	bl	8007284 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02c      	beq.n	8007f48 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d114      	bne.n	8007f48 <I2C_SlaveReceive_RXNE+0x74>
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b2a      	cmp	r3, #42	; 0x2a
 8007f22:	d111      	bne.n	8007f48 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2222      	movs	r2, #34	; 0x22
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2228      	movs	r2, #40	; 0x28
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff f9a7 	bl	8007296 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d012      	beq.n	8007f88 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr

08007f92 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fac:	2b28      	cmp	r3, #40	; 0x28
 8007fae:	d127      	bne.n	8008000 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fbe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	09db      	lsrs	r3, r3, #7
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	81bb      	strh	r3, [r7, #12]
 8007fe2:	e002      	b.n	8007fea <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007ff2:	89ba      	ldrh	r2, [r7, #12]
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff f955 	bl	80072a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ffe:	e00e      	b.n	800801e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008036:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008046:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008048:	2300      	movs	r3, #0
 800804a:	60bb      	str	r3, [r7, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008074:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008084:	d172      	bne.n	800816c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b22      	cmp	r3, #34	; 0x22
 800808a:	d002      	beq.n	8008092 <I2C_Slave_STOPF+0x6a>
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	2b2a      	cmp	r3, #42	; 0x2a
 8008090:	d135      	bne.n	80080fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	b29a      	uxth	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fa38 	bl	8006540 <HAL_DMA_GetState>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d049      	beq.n	800816a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	4a69      	ldr	r2, [pc, #420]	; (8008280 <I2C_Slave_STOPF+0x258>)
 80080dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe f93c 	bl	8006360 <HAL_DMA_Abort_IT>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d03d      	beq.n	800816a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080fc:	e035      	b.n	800816a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008130:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fa02 	bl	8006540 <HAL_DMA_GetState>
 800813c:	4603      	mov	r3, r0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d014      	beq.n	800816c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	4a4e      	ldr	r2, [pc, #312]	; (8008280 <I2C_Slave_STOPF+0x258>)
 8008148:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe f906 	bl	8006360 <HAL_DMA_Abort_IT>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d008      	beq.n	800816c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	e000      	b.n	800816c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800816a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d03e      	beq.n	80081f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b04      	cmp	r3, #4
 8008182:	d112      	bne.n	80081aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d112      	bne.n	80081de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	f043 0204 	orr.w	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8b3 	bl	8008368 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008202:	e039      	b.n	8008278 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b2a      	cmp	r3, #42	; 0x2a
 8008208:	d109      	bne.n	800821e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2228      	movs	r2, #40	; 0x28
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff f83c 	bl	8007296 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b28      	cmp	r3, #40	; 0x28
 8008228:	d111      	bne.n	800824e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <I2C_Slave_STOPF+0x25c>)
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff f83b 	bl	80072c2 <HAL_I2C_ListenCpltCallback>
}
 800824c:	e014      	b.n	8008278 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	2b22      	cmp	r3, #34	; 0x22
 8008254:	d002      	beq.n	800825c <I2C_Slave_STOPF+0x234>
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b22      	cmp	r3, #34	; 0x22
 800825a:	d10d      	bne.n	8008278 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff f80f 	bl	8007296 <HAL_I2C_SlaveRxCpltCallback>
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	080086d1 	.word	0x080086d1
 8008284:	ffff0000 	.word	0xffff0000

08008288 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008296:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d002      	beq.n	80082aa <I2C_Slave_AF+0x22>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d129      	bne.n	80082fe <I2C_Slave_AF+0x76>
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b28      	cmp	r3, #40	; 0x28
 80082ae:	d126      	bne.n	80082fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <I2C_Slave_AF+0xdc>)
 80082b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fe ffe3 	bl	80072c2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80082fc:	e02e      	b.n	800835c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b21      	cmp	r3, #33	; 0x21
 8008302:	d126      	bne.n	8008352 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a17      	ldr	r2, [pc, #92]	; (8008364 <I2C_Slave_AF+0xdc>)
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2221      	movs	r2, #33	; 0x21
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800832e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008338:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008348:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe ff9a 	bl	8007284 <HAL_I2C_SlaveTxCpltCallback>
}
 8008350:	e004      	b.n	800835c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800835a:	615a      	str	r2, [r3, #20]
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	ffff0000 	.word	0xffff0000

08008368 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008376:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800837e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b10      	cmp	r3, #16
 8008384:	d002      	beq.n	800838c <I2C_ITError+0x24>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d10a      	bne.n	80083a2 <I2C_ITError+0x3a>
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b22      	cmp	r3, #34	; 0x22
 8008390:	d107      	bne.n	80083a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083a8:	2b28      	cmp	r3, #40	; 0x28
 80083aa:	d107      	bne.n	80083bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2228      	movs	r2, #40	; 0x28
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083ba:	e015      	b.n	80083e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d00a      	beq.n	80083e2 <I2C_ITError+0x7a>
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b60      	cmp	r3, #96	; 0x60
 80083d0:	d007      	beq.n	80083e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f6:	d162      	bne.n	80084be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008406:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b01      	cmp	r3, #1
 8008414:	d020      	beq.n	8008458 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	4a6a      	ldr	r2, [pc, #424]	; (80085c4 <I2C_ITError+0x25c>)
 800841c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	4618      	mov	r0, r3
 8008424:	f7fd ff9c 	bl	8006360 <HAL_DMA_Abort_IT>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8089 	beq.w	8008542 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008452:	4610      	mov	r0, r2
 8008454:	4798      	blx	r3
 8008456:	e074      	b.n	8008542 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	4a59      	ldr	r2, [pc, #356]	; (80085c4 <I2C_ITError+0x25c>)
 800845e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	4618      	mov	r0, r3
 8008466:	f7fd ff7b 	bl	8006360 <HAL_DMA_Abort_IT>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d068      	beq.n	8008542 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d10b      	bne.n	8008496 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	e041      	b.n	8008542 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b60      	cmp	r3, #96	; 0x60
 80084c8:	d125      	bne.n	8008516 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d10b      	bne.n	80084fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0201 	bic.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fe fefb 	bl	800730a <HAL_I2C_AbortCpltCallback>
 8008514:	e015      	b.n	8008542 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d10b      	bne.n	800853c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fe fedb 	bl	80072f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10e      	bne.n	8008570 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800856c:	2b00      	cmp	r3, #0
 800856e:	d007      	beq.n	8008580 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008586:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d113      	bne.n	80085bc <I2C_ITError+0x254>
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b28      	cmp	r3, #40	; 0x28
 8008598:	d110      	bne.n	80085bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a0a      	ldr	r2, [pc, #40]	; (80085c8 <I2C_ITError+0x260>)
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fe fe83 	bl	80072c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	080086d1 	.word	0x080086d1
 80085c8:	ffff0000 	.word	0xffff0000

080085cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	460b      	mov	r3, r1
 80085da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d006      	beq.n	80085f6 <I2C_MasterRequestWrite+0x2a>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d003      	beq.n	80085f6 <I2C_MasterRequestWrite+0x2a>
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085f4:	d108      	bne.n	8008608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e00b      	b.n	8008620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	2b12      	cmp	r3, #18
 800860e:	d107      	bne.n	8008620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800861e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f8f7 	bl	8008820 <I2C_WaitOnFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00d      	beq.n	8008654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008646:	d103      	bne.n	8008650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e035      	b.n	80086c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800865c:	d108      	bne.n	8008670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800865e:	897b      	ldrh	r3, [r7, #10]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800866c:	611a      	str	r2, [r3, #16]
 800866e:	e01b      	b.n	80086a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008670:	897b      	ldrh	r3, [r7, #10]
 8008672:	11db      	asrs	r3, r3, #7
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f063 030f 	orn	r3, r3, #15
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	490e      	ldr	r1, [pc, #56]	; (80086c8 <I2C_MasterRequestWrite+0xfc>)
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 f91d 	bl	80088ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e010      	b.n	80086c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800869e:	897b      	ldrh	r3, [r7, #10]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	4907      	ldr	r1, [pc, #28]	; (80086cc <I2C_MasterRequestWrite+0x100>)
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 f90d 	bl	80088ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	00010008 	.word	0x00010008
 80086cc:	00010002 	.word	0x00010002

080086d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086ea:	4b4b      	ldr	r3, [pc, #300]	; (8008818 <I2C_DMAAbort+0x148>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	08db      	lsrs	r3, r3, #3
 80086f0:	4a4a      	ldr	r2, [pc, #296]	; (800881c <I2C_DMAAbort+0x14c>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	0a1a      	lsrs	r2, r3, #8
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	00da      	lsls	r2, r3, #3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0220 	orr.w	r2, r3, #32
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008716:	e00a      	b.n	800872e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3b01      	subs	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d0ea      	beq.n	8008704 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	2200      	movs	r2, #0
 800873c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	2200      	movs	r2, #0
 800874c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800875c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2200      	movs	r2, #0
 8008762:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	2200      	movs	r2, #0
 8008772:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	2200      	movs	r2, #0
 8008782:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b60      	cmp	r3, #96	; 0x60
 800879e:	d10e      	bne.n	80087be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087b6:	6978      	ldr	r0, [r7, #20]
 80087b8:	f7fe fda7 	bl	800730a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087bc:	e027      	b.n	800880e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087be:	7cfb      	ldrb	r3, [r7, #19]
 80087c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087c4:	2b28      	cmp	r3, #40	; 0x28
 80087c6:	d117      	bne.n	80087f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2228      	movs	r2, #40	; 0x28
 80087f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087f6:	e007      	b.n	8008808 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008808:	6978      	ldr	r0, [r7, #20]
 800880a:	f7fe fd75 	bl	80072f8 <HAL_I2C_ErrorCallback>
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200000b4 	.word	0x200000b4
 800881c:	14f8b589 	.word	0x14f8b589

08008820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4613      	mov	r3, r2
 800882e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008830:	e025      	b.n	800887e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d021      	beq.n	800887e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7fc ff4f 	bl	80056dc <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d116      	bne.n	800887e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f043 0220 	orr.w	r2, r3, #32
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e023      	b.n	80088c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	0c1b      	lsrs	r3, r3, #16
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b01      	cmp	r3, #1
 8008886:	d10d      	bne.n	80088a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	43da      	mvns	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4013      	ands	r3, r2
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	bf0c      	ite	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	2300      	movne	r3, #0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	e00c      	b.n	80088be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	43da      	mvns	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4013      	ands	r3, r2
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bf0c      	ite	eq
 80088b6:	2301      	moveq	r3, #1
 80088b8:	2300      	movne	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d0b6      	beq.n	8008832 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088dc:	e051      	b.n	8008982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ec:	d123      	bne.n	8008936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008906:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f043 0204 	orr.w	r2, r3, #4
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e046      	b.n	80089c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d021      	beq.n	8008982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893e:	f7fc fecd 	bl	80056dc <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d116      	bne.n	8008982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f043 0220 	orr.w	r2, r3, #32
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e020      	b.n	80089c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	0c1b      	lsrs	r3, r3, #16
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10c      	bne.n	80089a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	43da      	mvns	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4013      	ands	r3, r2
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	bf14      	ite	ne
 800899e:	2301      	movne	r3, #1
 80089a0:	2300      	moveq	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	e00b      	b.n	80089be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	43da      	mvns	r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4013      	ands	r3, r2
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf14      	ite	ne
 80089b8:	2301      	movne	r3, #1
 80089ba:	2300      	moveq	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d18d      	bne.n	80088de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d8:	e02d      	b.n	8008a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 f8aa 	bl	8008b34 <I2C_IsAcknowledgeFailed>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e02d      	b.n	8008a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d021      	beq.n	8008a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089f2:	f7fc fe73 	bl	80056dc <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d302      	bcc.n	8008a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d116      	bne.n	8008a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f043 0220 	orr.w	r2, r3, #32
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e007      	b.n	8008a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	2b80      	cmp	r3, #128	; 0x80
 8008a42:	d1ca      	bne.n	80089da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a5a:	e02d      	b.n	8008ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f869 	bl	8008b34 <I2C_IsAcknowledgeFailed>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e02d      	b.n	8008ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d021      	beq.n	8008ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a74:	f7fc fe32 	bl	80056dc <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d302      	bcc.n	8008a8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d116      	bne.n	8008ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	f043 0220 	orr.w	r2, r3, #32
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e007      	b.n	8008ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d1ca      	bne.n	8008a5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008adc:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae8:	0a1a      	lsrs	r2, r3, #8
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e008      	b.n	8008b20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b1c:	d0e9      	beq.n	8008af2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bc80      	pop	{r7}
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	200000b4 	.word	0x200000b4
 8008b30:	14f8b589 	.word	0x14f8b589

08008b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4a:	d11b      	bne.n	8008b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	f043 0204 	orr.w	r2, r3, #4
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008ba0:	d103      	bne.n	8008baa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ba8:	e007      	b.n	8008bba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008bb2:	d102      	bne.n	8008bba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bc80      	pop	{r7}
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e31d      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd6:	4b94      	ldr	r3, [pc, #592]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 030c 	and.w	r3, r3, #12
 8008bde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008be0:	4b91      	ldr	r3, [pc, #580]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d07b      	beq.n	8008cee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d006      	beq.n	8008c0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b0c      	cmp	r3, #12
 8008c00:	d10f      	bne.n	8008c22 <HAL_RCC_OscConfig+0x5e>
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c08:	d10b      	bne.n	8008c22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c0a:	4b87      	ldr	r3, [pc, #540]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d06a      	beq.n	8008cec <HAL_RCC_OscConfig+0x128>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d166      	bne.n	8008cec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e2f7      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d106      	bne.n	8008c38 <HAL_RCC_OscConfig+0x74>
 8008c2a:	4b7f      	ldr	r3, [pc, #508]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a7e      	ldr	r2, [pc, #504]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	e02d      	b.n	8008c94 <HAL_RCC_OscConfig+0xd0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10c      	bne.n	8008c5a <HAL_RCC_OscConfig+0x96>
 8008c40:	4b79      	ldr	r3, [pc, #484]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a78      	ldr	r2, [pc, #480]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	4b76      	ldr	r3, [pc, #472]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a75      	ldr	r2, [pc, #468]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	e01c      	b.n	8008c94 <HAL_RCC_OscConfig+0xd0>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d10c      	bne.n	8008c7c <HAL_RCC_OscConfig+0xb8>
 8008c62:	4b71      	ldr	r3, [pc, #452]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a70      	ldr	r2, [pc, #448]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	4b6e      	ldr	r3, [pc, #440]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a6d      	ldr	r2, [pc, #436]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	e00b      	b.n	8008c94 <HAL_RCC_OscConfig+0xd0>
 8008c7c:	4b6a      	ldr	r3, [pc, #424]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a69      	ldr	r2, [pc, #420]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	4b67      	ldr	r3, [pc, #412]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a66      	ldr	r2, [pc, #408]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d013      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c9c:	f7fc fd1e 	bl	80056dc <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ca4:	f7fc fd1a 	bl	80056dc <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b64      	cmp	r3, #100	; 0x64
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e2ad      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cb6:	4b5c      	ldr	r3, [pc, #368]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0f0      	beq.n	8008ca4 <HAL_RCC_OscConfig+0xe0>
 8008cc2:	e014      	b.n	8008cee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc4:	f7fc fd0a 	bl	80056dc <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ccc:	f7fc fd06 	bl	80056dc <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b64      	cmp	r3, #100	; 0x64
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e299      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cde:	4b52      	ldr	r3, [pc, #328]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <HAL_RCC_OscConfig+0x108>
 8008cea:	e000      	b.n	8008cee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d05a      	beq.n	8008db0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d005      	beq.n	8008d0c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b0c      	cmp	r3, #12
 8008d04:	d119      	bne.n	8008d3a <HAL_RCC_OscConfig+0x176>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d116      	bne.n	8008d3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d0c:	4b46      	ldr	r3, [pc, #280]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <HAL_RCC_OscConfig+0x160>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d001      	beq.n	8008d24 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e276      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d24:	4b40      	ldr	r3, [pc, #256]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	493d      	ldr	r1, [pc, #244]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d38:	e03a      	b.n	8008db0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d020      	beq.n	8008d84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d42:	4b3a      	ldr	r3, [pc, #232]	; (8008e2c <HAL_RCC_OscConfig+0x268>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d48:	f7fc fcc8 	bl	80056dc <HAL_GetTick>
 8008d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d50:	f7fc fcc4 	bl	80056dc <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e257      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d62:	4b31      	ldr	r3, [pc, #196]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f0      	beq.n	8008d50 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d6e:	4b2e      	ldr	r3, [pc, #184]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	492a      	ldr	r1, [pc, #168]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	604b      	str	r3, [r1, #4]
 8008d82:	e015      	b.n	8008db0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d84:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <HAL_RCC_OscConfig+0x268>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d8a:	f7fc fca7 	bl	80056dc <HAL_GetTick>
 8008d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d90:	e008      	b.n	8008da4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d92:	f7fc fca3 	bl	80056dc <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e236      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008da4:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f0      	bne.n	8008d92 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 80b8 	beq.w	8008f2e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d170      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008dc4:	4b18      	ldr	r3, [pc, #96]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <HAL_RCC_OscConfig+0x218>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e21a      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1a      	ldr	r2, [r3, #32]
 8008de0:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d921      	bls.n	8008e30 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fc7d 	bl	80096f0 <RCC_SetFlashLatencyFromMSIRange>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e208      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	4906      	ldr	r1, [pc, #24]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e12:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	061b      	lsls	r3, r3, #24
 8008e20:	4901      	ldr	r1, [pc, #4]	; (8008e28 <HAL_RCC_OscConfig+0x264>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	604b      	str	r3, [r1, #4]
 8008e26:	e020      	b.n	8008e6a <HAL_RCC_OscConfig+0x2a6>
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e30:	4b99      	ldr	r3, [pc, #612]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	4996      	ldr	r1, [pc, #600]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e42:	4b95      	ldr	r3, [pc, #596]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	4991      	ldr	r1, [pc, #580]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fc48 	bl	80096f0 <RCC_SetFlashLatencyFromMSIRange>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e1d3      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	0b5b      	lsrs	r3, r3, #13
 8008e70:	3301      	adds	r3, #1
 8008e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008e7a:	4a87      	ldr	r2, [pc, #540]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008e7c:	6892      	ldr	r2, [r2, #8]
 8008e7e:	0912      	lsrs	r2, r2, #4
 8008e80:	f002 020f 	and.w	r2, r2, #15
 8008e84:	4985      	ldr	r1, [pc, #532]	; (800909c <HAL_RCC_OscConfig+0x4d8>)
 8008e86:	5c8a      	ldrb	r2, [r1, r2]
 8008e88:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008e8a:	4a85      	ldr	r2, [pc, #532]	; (80090a0 <HAL_RCC_OscConfig+0x4dc>)
 8008e8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008e8e:	4b85      	ldr	r3, [pc, #532]	; (80090a4 <HAL_RCC_OscConfig+0x4e0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fc fbd6 	bl	8005644 <HAL_InitTick>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d045      	beq.n	8008f2e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	e1b5      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d029      	beq.n	8008f02 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008eae:	4b7e      	ldr	r3, [pc, #504]	; (80090a8 <HAL_RCC_OscConfig+0x4e4>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb4:	f7fc fc12 	bl	80056dc <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ebc:	f7fc fc0e 	bl	80056dc <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e1a1      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008ece:	4b72      	ldr	r3, [pc, #456]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008eda:	4b6f      	ldr	r3, [pc, #444]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	496c      	ldr	r1, [pc, #432]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008eec:	4b6a      	ldr	r3, [pc, #424]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	061b      	lsls	r3, r3, #24
 8008efa:	4967      	ldr	r1, [pc, #412]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	604b      	str	r3, [r1, #4]
 8008f00:	e015      	b.n	8008f2e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008f02:	4b69      	ldr	r3, [pc, #420]	; (80090a8 <HAL_RCC_OscConfig+0x4e4>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f08:	f7fc fbe8 	bl	80056dc <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f10:	f7fc fbe4 	bl	80056dc <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e177      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f22:	4b5d      	ldr	r3, [pc, #372]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0308 	and.w	r3, r3, #8
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d030      	beq.n	8008f9c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d016      	beq.n	8008f70 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f42:	4b5a      	ldr	r3, [pc, #360]	; (80090ac <HAL_RCC_OscConfig+0x4e8>)
 8008f44:	2201      	movs	r2, #1
 8008f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f48:	f7fc fbc8 	bl	80056dc <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f50:	f7fc fbc4 	bl	80056dc <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e157      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f62:	4b4d      	ldr	r3, [pc, #308]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f0      	beq.n	8008f50 <HAL_RCC_OscConfig+0x38c>
 8008f6e:	e015      	b.n	8008f9c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f70:	4b4e      	ldr	r3, [pc, #312]	; (80090ac <HAL_RCC_OscConfig+0x4e8>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f76:	f7fc fbb1 	bl	80056dc <HAL_GetTick>
 8008f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f7e:	f7fc fbad 	bl	80056dc <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e140      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f90:	4b41      	ldr	r3, [pc, #260]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f0      	bne.n	8008f7e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80b5 	beq.w	8009114 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008faa:	2300      	movs	r3, #0
 8008fac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fae:	4b3a      	ldr	r3, [pc, #232]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10d      	bne.n	8008fd6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fba:	4b37      	ldr	r3, [pc, #220]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	4a36      	ldr	r2, [pc, #216]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	6253      	str	r3, [r2, #36]	; 0x24
 8008fc6:	4b34      	ldr	r3, [pc, #208]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fd6:	4b36      	ldr	r3, [pc, #216]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d118      	bne.n	8009014 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fe2:	4b33      	ldr	r3, [pc, #204]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a32      	ldr	r2, [pc, #200]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 8008fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fee:	f7fc fb75 	bl	80056dc <HAL_GetTick>
 8008ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ff4:	e008      	b.n	8009008 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff6:	f7fc fb71 	bl	80056dc <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b64      	cmp	r3, #100	; 0x64
 8009002:	d901      	bls.n	8009008 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e104      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009008:	4b29      	ldr	r3, [pc, #164]	; (80090b0 <HAL_RCC_OscConfig+0x4ec>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0f0      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d106      	bne.n	800902a <HAL_RCC_OscConfig+0x466>
 800901c:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 800901e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009020:	4a1d      	ldr	r2, [pc, #116]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009026:	6353      	str	r3, [r2, #52]	; 0x34
 8009028:	e02d      	b.n	8009086 <HAL_RCC_OscConfig+0x4c2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <HAL_RCC_OscConfig+0x488>
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009036:	4a18      	ldr	r2, [pc, #96]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800903c:	6353      	str	r3, [r2, #52]	; 0x34
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	4a15      	ldr	r2, [pc, #84]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009048:	6353      	str	r3, [r2, #52]	; 0x34
 800904a:	e01c      	b.n	8009086 <HAL_RCC_OscConfig+0x4c2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b05      	cmp	r3, #5
 8009052:	d10c      	bne.n	800906e <HAL_RCC_OscConfig+0x4aa>
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	4a0f      	ldr	r2, [pc, #60]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 800905a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800905e:	6353      	str	r3, [r2, #52]	; 0x34
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009064:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906a:	6353      	str	r3, [r2, #52]	; 0x34
 800906c:	e00b      	b.n	8009086 <HAL_RCC_OscConfig+0x4c2>
 800906e:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	4a09      	ldr	r2, [pc, #36]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009078:	6353      	str	r3, [r2, #52]	; 0x34
 800907a:	4b07      	ldr	r3, [pc, #28]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 800907c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907e:	4a06      	ldr	r2, [pc, #24]	; (8009098 <HAL_RCC_OscConfig+0x4d4>)
 8009080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009084:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d024      	beq.n	80090d8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800908e:	f7fc fb25 	bl	80056dc <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009094:	e019      	b.n	80090ca <HAL_RCC_OscConfig+0x506>
 8009096:	bf00      	nop
 8009098:	40023800 	.word	0x40023800
 800909c:	08021708 	.word	0x08021708
 80090a0:	200000b4 	.word	0x200000b4
 80090a4:	200000b8 	.word	0x200000b8
 80090a8:	42470020 	.word	0x42470020
 80090ac:	42470680 	.word	0x42470680
 80090b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090b4:	f7fc fb12 	bl	80056dc <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e0a3      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ca:	4b54      	ldr	r3, [pc, #336]	; (800921c <HAL_RCC_OscConfig+0x658>)
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0ee      	beq.n	80090b4 <HAL_RCC_OscConfig+0x4f0>
 80090d6:	e014      	b.n	8009102 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090d8:	f7fc fb00 	bl	80056dc <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090de:	e00a      	b.n	80090f6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090e0:	f7fc fafc 	bl	80056dc <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e08d      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090f6:	4b49      	ldr	r3, [pc, #292]	; (800921c <HAL_RCC_OscConfig+0x658>)
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1ee      	bne.n	80090e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009102:	7ffb      	ldrb	r3, [r7, #31]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d105      	bne.n	8009114 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009108:	4b44      	ldr	r3, [pc, #272]	; (800921c <HAL_RCC_OscConfig+0x658>)
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	4a43      	ldr	r2, [pc, #268]	; (800921c <HAL_RCC_OscConfig+0x658>)
 800910e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009112:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d079      	beq.n	8009210 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d056      	beq.n	80091d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b02      	cmp	r3, #2
 8009128:	d13b      	bne.n	80091a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800912a:	4b3d      	ldr	r3, [pc, #244]	; (8009220 <HAL_RCC_OscConfig+0x65c>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009130:	f7fc fad4 	bl	80056dc <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009138:	f7fc fad0 	bl	80056dc <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e063      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800914a:	4b34      	ldr	r3, [pc, #208]	; (800921c <HAL_RCC_OscConfig+0x658>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f0      	bne.n	8009138 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009156:	4b31      	ldr	r3, [pc, #196]	; (800921c <HAL_RCC_OscConfig+0x658>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4319      	orrs	r1, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916c:	430b      	orrs	r3, r1
 800916e:	492b      	ldr	r1, [pc, #172]	; (800921c <HAL_RCC_OscConfig+0x658>)
 8009170:	4313      	orrs	r3, r2
 8009172:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009174:	4b2a      	ldr	r3, [pc, #168]	; (8009220 <HAL_RCC_OscConfig+0x65c>)
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800917a:	f7fc faaf 	bl	80056dc <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009182:	f7fc faab 	bl	80056dc <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e03e      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009194:	4b21      	ldr	r3, [pc, #132]	; (800921c <HAL_RCC_OscConfig+0x658>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <HAL_RCC_OscConfig+0x5be>
 80091a0:	e036      	b.n	8009210 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091a2:	4b1f      	ldr	r3, [pc, #124]	; (8009220 <HAL_RCC_OscConfig+0x65c>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a8:	f7fc fa98 	bl	80056dc <HAL_GetTick>
 80091ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091b0:	f7fc fa94 	bl	80056dc <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e027      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091c2:	4b16      	ldr	r3, [pc, #88]	; (800921c <HAL_RCC_OscConfig+0x658>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1f0      	bne.n	80091b0 <HAL_RCC_OscConfig+0x5ec>
 80091ce:	e01f      	b.n	8009210 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e01a      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <HAL_RCC_OscConfig+0x658>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d10d      	bne.n	800920c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d106      	bne.n	800920c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009208:	429a      	cmp	r2, r3
 800920a:	d001      	beq.n	8009210 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	40023800 	.word	0x40023800
 8009220:	42470060 	.word	0x42470060

08009224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e11a      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009238:	4b8f      	ldr	r3, [pc, #572]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d919      	bls.n	800927a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d105      	bne.n	8009258 <HAL_RCC_ClockConfig+0x34>
 800924c:	4b8a      	ldr	r3, [pc, #552]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a89      	ldr	r2, [pc, #548]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 8009252:	f043 0304 	orr.w	r3, r3, #4
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	4b87      	ldr	r3, [pc, #540]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f023 0201 	bic.w	r2, r3, #1
 8009260:	4985      	ldr	r1, [pc, #532]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	4313      	orrs	r3, r2
 8009266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009268:	4b83      	ldr	r3, [pc, #524]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d001      	beq.n	800927a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e0f9      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009286:	4b7d      	ldr	r3, [pc, #500]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	497a      	ldr	r1, [pc, #488]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009294:	4313      	orrs	r3, r2
 8009296:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 808e 	beq.w	80093c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d107      	bne.n	80092be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ae:	4b73      	ldr	r3, [pc, #460]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d121      	bne.n	80092fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e0d7      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d107      	bne.n	80092d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092c6:	4b6d      	ldr	r3, [pc, #436]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d115      	bne.n	80092fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e0cb      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d107      	bne.n	80092ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092de:	4b67      	ldr	r3, [pc, #412]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e0bf      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80092ee:	4b63      	ldr	r3, [pc, #396]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e0b7      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092fe:	4b5f      	ldr	r3, [pc, #380]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f023 0203 	bic.w	r2, r3, #3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	495c      	ldr	r1, [pc, #368]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 800930c:	4313      	orrs	r3, r2
 800930e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009310:	f7fc f9e4 	bl	80056dc <HAL_GetTick>
 8009314:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d112      	bne.n	8009344 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800931e:	e00a      	b.n	8009336 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009320:	f7fc f9dc 	bl	80056dc <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	f241 3288 	movw	r2, #5000	; 0x1388
 800932e:	4293      	cmp	r3, r2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e09b      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009336:	4b51      	ldr	r3, [pc, #324]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 030c 	and.w	r3, r3, #12
 800933e:	2b08      	cmp	r3, #8
 8009340:	d1ee      	bne.n	8009320 <HAL_RCC_ClockConfig+0xfc>
 8009342:	e03e      	b.n	80093c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d112      	bne.n	8009372 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800934c:	e00a      	b.n	8009364 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800934e:	f7fc f9c5 	bl	80056dc <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	4293      	cmp	r3, r2
 800935e:	d901      	bls.n	8009364 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e084      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009364:	4b45      	ldr	r3, [pc, #276]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 030c 	and.w	r3, r3, #12
 800936c:	2b0c      	cmp	r3, #12
 800936e:	d1ee      	bne.n	800934e <HAL_RCC_ClockConfig+0x12a>
 8009370:	e027      	b.n	80093c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d11d      	bne.n	80093b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800937a:	e00a      	b.n	8009392 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800937c:	f7fc f9ae 	bl	80056dc <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f241 3288 	movw	r2, #5000	; 0x1388
 800938a:	4293      	cmp	r3, r2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e06d      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009392:	4b3a      	ldr	r3, [pc, #232]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 030c 	and.w	r3, r3, #12
 800939a:	2b04      	cmp	r3, #4
 800939c:	d1ee      	bne.n	800937c <HAL_RCC_ClockConfig+0x158>
 800939e:	e010      	b.n	80093c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093a0:	f7fc f99c 	bl	80056dc <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e05b      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093b6:	4b31      	ldr	r3, [pc, #196]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 030c 	and.w	r3, r3, #12
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1ee      	bne.n	80093a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093c2:	4b2d      	ldr	r3, [pc, #180]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d219      	bcs.n	8009404 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d105      	bne.n	80093e2 <HAL_RCC_ClockConfig+0x1be>
 80093d6:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a27      	ldr	r2, [pc, #156]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093dc:	f043 0304 	orr.w	r3, r3, #4
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	4b25      	ldr	r3, [pc, #148]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f023 0201 	bic.w	r2, r3, #1
 80093ea:	4923      	ldr	r1, [pc, #140]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f2:	4b21      	ldr	r3, [pc, #132]	; (8009478 <HAL_RCC_ClockConfig+0x254>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d001      	beq.n	8009404 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e034      	b.n	800946e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d008      	beq.n	8009422 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009410:	4b1a      	ldr	r3, [pc, #104]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4917      	ldr	r1, [pc, #92]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 800941e:	4313      	orrs	r3, r2
 8009420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	490f      	ldr	r1, [pc, #60]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 800943e:	4313      	orrs	r3, r2
 8009440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009442:	f000 f823 	bl	800948c <HAL_RCC_GetSysClockFreq>
 8009446:	4602      	mov	r2, r0
 8009448:	4b0c      	ldr	r3, [pc, #48]	; (800947c <HAL_RCC_ClockConfig+0x258>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	490b      	ldr	r1, [pc, #44]	; (8009480 <HAL_RCC_ClockConfig+0x25c>)
 8009454:	5ccb      	ldrb	r3, [r1, r3]
 8009456:	fa22 f303 	lsr.w	r3, r2, r3
 800945a:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <HAL_RCC_ClockConfig+0x260>)
 800945c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <HAL_RCC_ClockConfig+0x264>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fc f8ee 	bl	8005644 <HAL_InitTick>
 8009468:	4603      	mov	r3, r0
 800946a:	72fb      	strb	r3, [r7, #11]

  return status;
 800946c:	7afb      	ldrb	r3, [r7, #11]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40023c00 	.word	0x40023c00
 800947c:	40023800 	.word	0x40023800
 8009480:	08021708 	.word	0x08021708
 8009484:	200000b4 	.word	0x200000b4
 8009488:	200000b8 	.word	0x200000b8

0800948c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b092      	sub	sp, #72	; 0x48
 8009492:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8009494:	4b79      	ldr	r3, [pc, #484]	; (800967c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	f003 030c 	and.w	r3, r3, #12
 80094a0:	2b0c      	cmp	r3, #12
 80094a2:	d00d      	beq.n	80094c0 <HAL_RCC_GetSysClockFreq+0x34>
 80094a4:	2b0c      	cmp	r3, #12
 80094a6:	f200 80d5 	bhi.w	8009654 <HAL_RCC_GetSysClockFreq+0x1c8>
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d002      	beq.n	80094b4 <HAL_RCC_GetSysClockFreq+0x28>
 80094ae:	2b08      	cmp	r3, #8
 80094b0:	d003      	beq.n	80094ba <HAL_RCC_GetSysClockFreq+0x2e>
 80094b2:	e0cf      	b.n	8009654 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094b4:	4b72      	ldr	r3, [pc, #456]	; (8009680 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80094b8:	e0da      	b.n	8009670 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80094ba:	4b72      	ldr	r3, [pc, #456]	; (8009684 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80094bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80094be:	e0d7      	b.n	8009670 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	0c9b      	lsrs	r3, r3, #18
 80094c4:	f003 020f 	and.w	r2, r3, #15
 80094c8:	4b6f      	ldr	r3, [pc, #444]	; (8009688 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80094ca:	5c9b      	ldrb	r3, [r3, r2]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80094ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d0:	0d9b      	lsrs	r3, r3, #22
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	3301      	adds	r3, #1
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094da:	4b68      	ldr	r3, [pc, #416]	; (800967c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d05d      	beq.n	80095a2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	2200      	movs	r2, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	4611      	mov	r1, r2
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	4622      	mov	r2, r4
 80094f4:	462b      	mov	r3, r5
 80094f6:	f04f 0000 	mov.w	r0, #0
 80094fa:	f04f 0100 	mov.w	r1, #0
 80094fe:	0159      	lsls	r1, r3, #5
 8009500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009504:	0150      	lsls	r0, r2, #5
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4621      	mov	r1, r4
 800950c:	1a51      	subs	r1, r2, r1
 800950e:	6139      	str	r1, [r7, #16]
 8009510:	4629      	mov	r1, r5
 8009512:	eb63 0301 	sbc.w	r3, r3, r1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	f04f 0200 	mov.w	r2, #0
 800951c:	f04f 0300 	mov.w	r3, #0
 8009520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009524:	4659      	mov	r1, fp
 8009526:	018b      	lsls	r3, r1, #6
 8009528:	4651      	mov	r1, sl
 800952a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800952e:	4651      	mov	r1, sl
 8009530:	018a      	lsls	r2, r1, #6
 8009532:	46d4      	mov	ip, sl
 8009534:	ebb2 080c 	subs.w	r8, r2, ip
 8009538:	4659      	mov	r1, fp
 800953a:	eb63 0901 	sbc.w	r9, r3, r1
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800954a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800954e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009552:	4690      	mov	r8, r2
 8009554:	4699      	mov	r9, r3
 8009556:	4623      	mov	r3, r4
 8009558:	eb18 0303 	adds.w	r3, r8, r3
 800955c:	60bb      	str	r3, [r7, #8]
 800955e:	462b      	mov	r3, r5
 8009560:	eb49 0303 	adc.w	r3, r9, r3
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009572:	4629      	mov	r1, r5
 8009574:	024b      	lsls	r3, r1, #9
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	4604      	mov	r4, r0
 800957c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8009580:	4601      	mov	r1, r0
 8009582:	024a      	lsls	r2, r1, #9
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	2200      	movs	r2, #0
 800958c:	62bb      	str	r3, [r7, #40]	; 0x28
 800958e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009594:	f7f7 fb00 	bl	8000b98 <__aeabi_uldivmod>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4613      	mov	r3, r2
 800959e:	647b      	str	r3, [r7, #68]	; 0x44
 80095a0:	e055      	b.n	800964e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	2200      	movs	r2, #0
 80095a6:	623b      	str	r3, [r7, #32]
 80095a8:	627a      	str	r2, [r7, #36]	; 0x24
 80095aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80095ae:	4642      	mov	r2, r8
 80095b0:	464b      	mov	r3, r9
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f04f 0100 	mov.w	r1, #0
 80095ba:	0159      	lsls	r1, r3, #5
 80095bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095c0:	0150      	lsls	r0, r2, #5
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	46c4      	mov	ip, r8
 80095c8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	468c      	mov	ip, r1
 80095d2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80095e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80095e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80095ea:	ebb2 040a 	subs.w	r4, r2, sl
 80095ee:	eb63 050b 	sbc.w	r5, r3, fp
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	00eb      	lsls	r3, r5, #3
 80095fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009600:	00e2      	lsls	r2, r4, #3
 8009602:	4614      	mov	r4, r2
 8009604:	461d      	mov	r5, r3
 8009606:	4603      	mov	r3, r0
 8009608:	18e3      	adds	r3, r4, r3
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	460b      	mov	r3, r1
 800960e:	eb45 0303 	adc.w	r3, r5, r3
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009620:	4629      	mov	r1, r5
 8009622:	028b      	lsls	r3, r1, #10
 8009624:	4620      	mov	r0, r4
 8009626:	4629      	mov	r1, r5
 8009628:	4604      	mov	r4, r0
 800962a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800962e:	4601      	mov	r1, r0
 8009630:	028a      	lsls	r2, r1, #10
 8009632:	4610      	mov	r0, r2
 8009634:	4619      	mov	r1, r3
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	2200      	movs	r2, #0
 800963a:	61bb      	str	r3, [r7, #24]
 800963c:	61fa      	str	r2, [r7, #28]
 800963e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009642:	f7f7 faa9 	bl	8000b98 <__aeabi_uldivmod>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4613      	mov	r3, r2
 800964c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800964e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009650:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009652:	e00d      	b.n	8009670 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009654:	4b09      	ldr	r3, [pc, #36]	; (800967c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	0b5b      	lsrs	r3, r3, #13
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	3301      	adds	r3, #1
 8009664:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009668:	fa02 f303 	lsl.w	r3, r2, r3
 800966c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800966e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8009672:	4618      	mov	r0, r3
 8009674:	3748      	adds	r7, #72	; 0x48
 8009676:	46bd      	mov	sp, r7
 8009678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800967c:	40023800 	.word	0x40023800
 8009680:	00f42400 	.word	0x00f42400
 8009684:	007a1200 	.word	0x007a1200
 8009688:	080216fc 	.word	0x080216fc

0800968c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009690:	4b02      	ldr	r3, [pc, #8]	; (800969c <HAL_RCC_GetHCLKFreq+0x10>)
 8009692:	681b      	ldr	r3, [r3, #0]
}
 8009694:	4618      	mov	r0, r3
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr
 800969c:	200000b4 	.word	0x200000b4

080096a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096a4:	f7ff fff2 	bl	800968c <HAL_RCC_GetHCLKFreq>
 80096a8:	4602      	mov	r2, r0
 80096aa:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	4903      	ldr	r1, [pc, #12]	; (80096c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096b6:	5ccb      	ldrb	r3, [r1, r3]
 80096b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096bc:	4618      	mov	r0, r3
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	40023800 	.word	0x40023800
 80096c4:	08021718 	.word	0x08021718

080096c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096cc:	f7ff ffde 	bl	800968c <HAL_RCC_GetHCLKFreq>
 80096d0:	4602      	mov	r2, r0
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	0adb      	lsrs	r3, r3, #11
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	4903      	ldr	r1, [pc, #12]	; (80096ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80096de:	5ccb      	ldrb	r3, [r1, r3]
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40023800 	.word	0x40023800
 80096ec:	08021718 	.word	0x08021718

080096f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096f8:	2300      	movs	r3, #0
 80096fa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80096fc:	4b29      	ldr	r3, [pc, #164]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d12c      	bne.n	8009762 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009708:	4b26      	ldr	r3, [pc, #152]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009714:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e016      	b.n	800974e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009720:	4b20      	ldr	r3, [pc, #128]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800972a:	6253      	str	r3, [r2, #36]	; 0x24
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009738:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8009740:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009742:	4b18      	ldr	r3, [pc, #96]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009754:	d105      	bne.n	8009762 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800975c:	d101      	bne.n	8009762 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800975e:	2301      	movs	r3, #1
 8009760:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d105      	bne.n	8009774 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8009768:	4b10      	ldr	r3, [pc, #64]	; (80097ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a0f      	ldr	r2, [pc, #60]	; (80097ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800976e:	f043 0304 	orr.w	r3, r3, #4
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f023 0201 	bic.w	r2, r3, #1
 800977c:	490b      	ldr	r1, [pc, #44]	; (80097ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009784:	4b09      	ldr	r3, [pc, #36]	; (80097ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	429a      	cmp	r2, r3
 8009790:	d001      	beq.n	8009796 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40007000 	.word	0x40007000
 80097ac:	40023c00 	.word	0x40023c00

080097b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e07b      	b.n	80098ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d108      	bne.n	80097dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d2:	d009      	beq.n	80097e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	61da      	str	r2, [r3, #28]
 80097da:	e005      	b.n	80097e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fa fa9a 	bl	8003d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800981e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009862:	431a      	orrs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986c:	ea42 0103 	orr.w	r1, r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	0c1b      	lsrs	r3, r3, #16
 8009886:	f003 0104 	and.w	r1, r3, #4
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	f003 0210 	and.w	r2, r3, #16
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b08c      	sub	sp, #48	; 0x30
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098d0:	2301      	movs	r3, #1
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <HAL_SPI_TransmitReceive+0x26>
 80098e4:	2302      	movs	r3, #2
 80098e6:	e18a      	b.n	8009bfe <HAL_SPI_TransmitReceive+0x33c>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098f0:	f7fb fef4 	bl	80056dc <HAL_GetTick>
 80098f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800990a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800990e:	2b01      	cmp	r3, #1
 8009910:	d00f      	beq.n	8009932 <HAL_SPI_TransmitReceive+0x70>
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009918:	d107      	bne.n	800992a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <HAL_SPI_TransmitReceive+0x68>
 8009922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009926:	2b04      	cmp	r3, #4
 8009928:	d003      	beq.n	8009932 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800992a:	2302      	movs	r3, #2
 800992c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009930:	e15b      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_SPI_TransmitReceive+0x82>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <HAL_SPI_TransmitReceive+0x82>
 800993e:	887b      	ldrh	r3, [r7, #2]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800994a:	e14e      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b04      	cmp	r3, #4
 8009956:	d003      	beq.n	8009960 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2205      	movs	r2, #5
 800995c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	887a      	ldrh	r2, [r7, #2]
 8009970:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	887a      	ldrh	r2, [r7, #2]
 8009976:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	887a      	ldrh	r2, [r7, #2]
 8009982:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	887a      	ldrh	r2, [r7, #2]
 8009988:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b40      	cmp	r3, #64	; 0x40
 80099a2:	d007      	beq.n	80099b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099bc:	d178      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_SPI_TransmitReceive+0x10a>
 80099c6:	8b7b      	ldrh	r3, [r7, #26]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d166      	bne.n	8009a9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	881a      	ldrh	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	1c9a      	adds	r2, r3, #2
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099f0:	e053      	b.n	8009a9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d11b      	bne.n	8009a38 <HAL_SPI_TransmitReceive+0x176>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d016      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x176>
 8009a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d113      	bne.n	8009a38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	881a      	ldrh	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a20:	1c9a      	adds	r2, r3, #2
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d119      	bne.n	8009a7a <HAL_SPI_TransmitReceive+0x1b8>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d014      	beq.n	8009a7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	b292      	uxth	r2, r2
 8009a5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	1c9a      	adds	r2, r3, #2
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a76:	2301      	movs	r3, #1
 8009a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a7a:	f7fb fe2f 	bl	80056dc <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d807      	bhi.n	8009a9a <HAL_SPI_TransmitReceive+0x1d8>
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d003      	beq.n	8009a9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a98:	e0a7      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1a6      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x130>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1a1      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x130>
 8009aae:	e07c      	b.n	8009baa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_SPI_TransmitReceive+0x1fc>
 8009ab8:	8b7b      	ldrh	r3, [r7, #26]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d16b      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	330c      	adds	r3, #12
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ae4:	e057      	b.n	8009b96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d11c      	bne.n	8009b2e <HAL_SPI_TransmitReceive+0x26c>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d017      	beq.n	8009b2e <HAL_SPI_TransmitReceive+0x26c>
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d114      	bne.n	8009b2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	330c      	adds	r3, #12
 8009b0e:	7812      	ldrb	r2, [r2, #0]
 8009b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d119      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x2ae>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d014      	beq.n	8009b70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	3b01      	subs	r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b70:	f7fb fdb4 	bl	80056dc <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d803      	bhi.n	8009b88 <HAL_SPI_TransmitReceive+0x2c6>
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d102      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x2cc>
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b94:	e029      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1a2      	bne.n	8009ae6 <HAL_SPI_TransmitReceive+0x224>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d19d      	bne.n	8009ae6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 f8b2 	bl	8009d18 <SPI_EndRxTxTransaction>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009bc6:	e010      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10b      	bne.n	8009be8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	e000      	b.n	8009bea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009be8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3730      	adds	r7, #48	; 0x30
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c18:	f7fb fd60 	bl	80056dc <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4413      	add	r3, r2
 8009c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c28:	f7fb fd58 	bl	80056dc <HAL_GetTick>
 8009c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c2e:	4b39      	ldr	r3, [pc, #228]	; (8009d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	015b      	lsls	r3, r3, #5
 8009c34:	0d1b      	lsrs	r3, r3, #20
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	fb02 f303 	mul.w	r3, r2, r3
 8009c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c3e:	e054      	b.n	8009cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c46:	d050      	beq.n	8009cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c48:	f7fb fd48 	bl	80056dc <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d902      	bls.n	8009c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d13d      	bne.n	8009cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c76:	d111      	bne.n	8009c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c80:	d004      	beq.n	8009c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c8a:	d107      	bne.n	8009c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca4:	d10f      	bne.n	8009cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e017      	b.n	8009d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	bf0c      	ite	eq
 8009cfa:	2301      	moveq	r3, #1
 8009cfc:	2300      	movne	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d19b      	bne.n	8009c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200000b4 	.word	0x200000b4

08009d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d24:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <SPI_EndRxTxTransaction+0x7c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <SPI_EndRxTxTransaction+0x80>)
 8009d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2e:	0d5b      	lsrs	r3, r3, #21
 8009d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d34:	fb02 f303 	mul.w	r3, r2, r3
 8009d38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d42:	d112      	bne.n	8009d6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2180      	movs	r1, #128	; 0x80
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff ff5a 	bl	8009c08 <SPI_WaitFlagStateUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d016      	beq.n	8009d88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e00f      	b.n	8009d8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00a      	beq.n	8009d86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b80      	cmp	r3, #128	; 0x80
 8009d82:	d0f2      	beq.n	8009d6a <SPI_EndRxTxTransaction+0x52>
 8009d84:	e000      	b.n	8009d88 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d86:	bf00      	nop
  }

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200000b4 	.word	0x200000b4
 8009d98:	165e9f81 	.word	0x165e9f81

08009d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e031      	b.n	8009e12 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fa f9e0 	bl	8004188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f000 f92c 	bl	800a038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d001      	beq.n	8009e34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e032      	b.n	8009e9a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e44:	d00e      	beq.n	8009e64 <HAL_TIM_Base_Start+0x48>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a16      	ldr	r2, [pc, #88]	; (8009ea4 <HAL_TIM_Base_Start+0x88>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d009      	beq.n	8009e64 <HAL_TIM_Base_Start+0x48>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a14      	ldr	r2, [pc, #80]	; (8009ea8 <HAL_TIM_Base_Start+0x8c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d004      	beq.n	8009e64 <HAL_TIM_Base_Start+0x48>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a13      	ldr	r2, [pc, #76]	; (8009eac <HAL_TIM_Base_Start+0x90>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d111      	bne.n	8009e88 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d010      	beq.n	8009e98 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 0201 	orr.w	r2, r2, #1
 8009e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e86:	e007      	b.n	8009e98 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40010800 	.word	0x40010800

08009eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_TIM_ConfigClockSource+0x18>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e0b3      	b.n	800a030 <HAL_TIM_ConfigClockSource+0x180>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ee6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f00:	d03e      	beq.n	8009f80 <HAL_TIM_ConfigClockSource+0xd0>
 8009f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f06:	f200 8087 	bhi.w	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0e:	f000 8085 	beq.w	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f16:	d87f      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f18:	2b70      	cmp	r3, #112	; 0x70
 8009f1a:	d01a      	beq.n	8009f52 <HAL_TIM_ConfigClockSource+0xa2>
 8009f1c:	2b70      	cmp	r3, #112	; 0x70
 8009f1e:	d87b      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f20:	2b60      	cmp	r3, #96	; 0x60
 8009f22:	d050      	beq.n	8009fc6 <HAL_TIM_ConfigClockSource+0x116>
 8009f24:	2b60      	cmp	r3, #96	; 0x60
 8009f26:	d877      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f28:	2b50      	cmp	r3, #80	; 0x50
 8009f2a:	d03c      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0xf6>
 8009f2c:	2b50      	cmp	r3, #80	; 0x50
 8009f2e:	d873      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f30:	2b40      	cmp	r3, #64	; 0x40
 8009f32:	d058      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x136>
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d86f      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f38:	2b30      	cmp	r3, #48	; 0x30
 8009f3a:	d064      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x156>
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d86b      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d060      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x156>
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d867      	bhi.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d05c      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x156>
 8009f4c:	2b10      	cmp	r3, #16
 8009f4e:	d05a      	beq.n	800a006 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009f50:	e062      	b.n	800a018 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6818      	ldr	r0, [r3, #0]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6899      	ldr	r1, [r3, #8]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f000 f950 	bl	800a206 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	609a      	str	r2, [r3, #8]
      break;
 8009f7e:	e04e      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	6899      	ldr	r1, [r3, #8]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f000 f939 	bl	800a206 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689a      	ldr	r2, [r3, #8]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fa2:	609a      	str	r2, [r3, #8]
      break;
 8009fa4:	e03b      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6818      	ldr	r0, [r3, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	6859      	ldr	r1, [r3, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f000 f8b0 	bl	800a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2150      	movs	r1, #80	; 0x50
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f907 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 8009fc4:	e02b      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	6859      	ldr	r1, [r3, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f000 f8ce 	bl	800a174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2160      	movs	r1, #96	; 0x60
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f8f7 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 8009fe4:	e01b      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6859      	ldr	r1, [r3, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f000 f890 	bl	800a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2140      	movs	r1, #64	; 0x40
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f8e7 	bl	800a1d2 <TIM_ITRx_SetConfig>
      break;
 800a004:	e00b      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f000 f8de 	bl	800a1d2 <TIM_ITRx_SetConfig>
        break;
 800a016:	e002      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a01c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04e:	d00f      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a2b      	ldr	r2, [pc, #172]	; (800a100 <TIM_Base_SetConfig+0xc8>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d00b      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <TIM_Base_SetConfig+0xcc>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d007      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a29      	ldr	r2, [pc, #164]	; (800a108 <TIM_Base_SetConfig+0xd0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d003      	beq.n	800a070 <TIM_Base_SetConfig+0x38>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a28      	ldr	r2, [pc, #160]	; (800a10c <TIM_Base_SetConfig+0xd4>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d108      	bne.n	800a082 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a088:	d017      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a1c      	ldr	r2, [pc, #112]	; (800a100 <TIM_Base_SetConfig+0xc8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d013      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a1b      	ldr	r2, [pc, #108]	; (800a104 <TIM_Base_SetConfig+0xcc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d00f      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a1a      	ldr	r2, [pc, #104]	; (800a108 <TIM_Base_SetConfig+0xd0>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00b      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a19      	ldr	r2, [pc, #100]	; (800a10c <TIM_Base_SetConfig+0xd4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d007      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a18      	ldr	r2, [pc, #96]	; (800a110 <TIM_Base_SetConfig+0xd8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d003      	beq.n	800a0ba <TIM_Base_SetConfig+0x82>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a17      	ldr	r2, [pc, #92]	; (800a114 <TIM_Base_SetConfig+0xdc>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d108      	bne.n	800a0cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bc80      	pop	{r7}
 800a0fe:	4770      	bx	lr
 800a100:	40000400 	.word	0x40000400
 800a104:	40000800 	.word	0x40000800
 800a108:	40000c00 	.word	0x40000c00
 800a10c:	40010800 	.word	0x40010800
 800a110:	40010c00 	.word	0x40010c00
 800a114:	40011000 	.word	0x40011000

0800a118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 030a 	bic.w	r3, r3, #10
 800a154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	621a      	str	r2, [r3, #32]
}
 800a16a:	bf00      	nop
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	f023 0210 	bic.w	r2, r3, #16
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a19e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	031b      	lsls	r3, r3, #12
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	621a      	str	r2, [r3, #32]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	f043 0307 	orr.w	r3, r3, #7
 800a1f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	609a      	str	r2, [r3, #8]
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr

0800a206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a206:	b480      	push	{r7}
 800a208:	b087      	sub	sp, #28
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
 800a212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	021a      	lsls	r2, r3, #8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	431a      	orrs	r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	609a      	str	r2, [r3, #8]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr

0800a244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a254:	2b01      	cmp	r3, #1
 800a256:	d101      	bne.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a258:	2302      	movs	r3, #2
 800a25a:	e046      	b.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29e:	d00e      	beq.n	800a2be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d009      	beq.n	800a2be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d004      	beq.n	800a2be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d10c      	bne.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bc80      	pop	{r7}
 800a2f2:	4770      	bx	lr
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40000800 	.word	0x40000800
 800a2fc:	40010800 	.word	0x40010800

0800a300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e03f      	b.n	800a392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d106      	bne.n	800a32c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7f9 ff9e 	bl	8004268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2224      	movs	r2, #36	; 0x24
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f905 	bl	800a554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	695a      	ldr	r2, [r3, #20]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68da      	ldr	r2, [r3, #12]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b08a      	sub	sp, #40	; 0x28
 800a39e:	af02      	add	r7, sp, #8
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	603b      	str	r3, [r7, #0]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d17c      	bne.n	800a4b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_UART_Transmit+0x2c>
 800a3c0:	88fb      	ldrh	r3, [r7, #6]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e075      	b.n	800a4b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_UART_Transmit+0x3e>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e06e      	b.n	800a4b6 <HAL_UART_Transmit+0x11c>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2221      	movs	r2, #33	; 0x21
 800a3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ee:	f7fb f975 	bl	80056dc <HAL_GetTick>
 800a3f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	88fa      	ldrh	r2, [r7, #6]
 800a3f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	88fa      	ldrh	r2, [r7, #6]
 800a3fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d108      	bne.n	800a41c <HAL_UART_Transmit+0x82>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	61bb      	str	r3, [r7, #24]
 800a41a:	e003      	b.n	800a424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a42c:	e02a      	b.n	800a484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2200      	movs	r2, #0
 800a436:	2180      	movs	r1, #128	; 0x80
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 f840 	bl	800a4be <UART_WaitOnFlagUntilTimeout>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e036      	b.n	800a4b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10b      	bne.n	800a466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a45c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	3302      	adds	r3, #2
 800a462:	61bb      	str	r3, [r7, #24]
 800a464:	e007      	b.n	800a476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	781a      	ldrb	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	3301      	adds	r3, #1
 800a474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1cf      	bne.n	800a42e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2200      	movs	r2, #0
 800a496:	2140      	movs	r1, #64	; 0x40
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f810 	bl	800a4be <UART_WaitOnFlagUntilTimeout>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e006      	b.n	800a4b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e000      	b.n	800a4b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a4b4:	2302      	movs	r3, #2
  }
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3720      	adds	r7, #32
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	603b      	str	r3, [r7, #0]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ce:	e02c      	b.n	800a52a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d028      	beq.n	800a52a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d007      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0x30>
 800a4de:	f7fb f8fd 	bl	80056dc <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d21d      	bcs.n	800a52a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	695a      	ldr	r2, [r3, #20]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 0201 	bic.w	r2, r2, #1
 800a50c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2220      	movs	r2, #32
 800a512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e00f      	b.n	800a54a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4013      	ands	r3, r2
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	429a      	cmp	r2, r3
 800a538:	bf0c      	ite	eq
 800a53a:	2301      	moveq	r3, #1
 800a53c:	2300      	movne	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	461a      	mov	r2, r3
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	429a      	cmp	r2, r3
 800a546:	d0c3      	beq.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	4313      	orrs	r3, r2
 800a588:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a594:	f023 030c 	bic.w	r3, r3, #12
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	699a      	ldr	r2, [r3, #24]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a55      	ldr	r2, [pc, #340]	; (800a714 <UART_SetConfig+0x1c0>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d103      	bne.n	800a5ca <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a5c2:	f7ff f881 	bl	80096c8 <HAL_RCC_GetPCLK2Freq>
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	e002      	b.n	800a5d0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a5ca:	f7ff f869 	bl	80096a0 <HAL_RCC_GetPCLK1Freq>
 800a5ce:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d8:	d14c      	bne.n	800a674 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009a      	lsls	r2, r3, #2
 800a5e4:	441a      	add	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	4a49      	ldr	r2, [pc, #292]	; (800a718 <UART_SetConfig+0x1c4>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	095b      	lsrs	r3, r3, #5
 800a5f8:	0119      	lsls	r1, r3, #4
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009a      	lsls	r2, r3, #2
 800a604:	441a      	add	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a610:	4b41      	ldr	r3, [pc, #260]	; (800a718 <UART_SetConfig+0x1c4>)
 800a612:	fba3 0302 	umull	r0, r3, r3, r2
 800a616:	095b      	lsrs	r3, r3, #5
 800a618:	2064      	movs	r0, #100	; 0x64
 800a61a:	fb00 f303 	mul.w	r3, r0, r3
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	3332      	adds	r3, #50	; 0x32
 800a624:	4a3c      	ldr	r2, [pc, #240]	; (800a718 <UART_SetConfig+0x1c4>)
 800a626:	fba2 2303 	umull	r2, r3, r2, r3
 800a62a:	095b      	lsrs	r3, r3, #5
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a632:	4419      	add	r1, r3
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4613      	mov	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	009a      	lsls	r2, r3, #2
 800a63e:	441a      	add	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	fbb2 f2f3 	udiv	r2, r2, r3
 800a64a:	4b33      	ldr	r3, [pc, #204]	; (800a718 <UART_SetConfig+0x1c4>)
 800a64c:	fba3 0302 	umull	r0, r3, r3, r2
 800a650:	095b      	lsrs	r3, r3, #5
 800a652:	2064      	movs	r0, #100	; 0x64
 800a654:	fb00 f303 	mul.w	r3, r0, r3
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	3332      	adds	r3, #50	; 0x32
 800a65e:	4a2e      	ldr	r2, [pc, #184]	; (800a718 <UART_SetConfig+0x1c4>)
 800a660:	fba2 2303 	umull	r2, r3, r2, r3
 800a664:	095b      	lsrs	r3, r3, #5
 800a666:	f003 0207 	and.w	r2, r3, #7
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	440a      	add	r2, r1
 800a670:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a672:	e04a      	b.n	800a70a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009a      	lsls	r2, r3, #2
 800a67e:	441a      	add	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68a:	4a23      	ldr	r2, [pc, #140]	; (800a718 <UART_SetConfig+0x1c4>)
 800a68c:	fba2 2303 	umull	r2, r3, r2, r3
 800a690:	095b      	lsrs	r3, r3, #5
 800a692:	0119      	lsls	r1, r3, #4
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	009a      	lsls	r2, r3, #2
 800a69e:	441a      	add	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6aa:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <UART_SetConfig+0x1c4>)
 800a6ac:	fba3 0302 	umull	r0, r3, r3, r2
 800a6b0:	095b      	lsrs	r3, r3, #5
 800a6b2:	2064      	movs	r0, #100	; 0x64
 800a6b4:	fb00 f303 	mul.w	r3, r0, r3
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	3332      	adds	r3, #50	; 0x32
 800a6be:	4a16      	ldr	r2, [pc, #88]	; (800a718 <UART_SetConfig+0x1c4>)
 800a6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c4:	095b      	lsrs	r3, r3, #5
 800a6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ca:	4419      	add	r1, r3
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009a      	lsls	r2, r3, #2
 800a6d6:	441a      	add	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <UART_SetConfig+0x1c4>)
 800a6e4:	fba3 0302 	umull	r0, r3, r3, r2
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	2064      	movs	r0, #100	; 0x64
 800a6ec:	fb00 f303 	mul.w	r3, r0, r3
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	3332      	adds	r3, #50	; 0x32
 800a6f6:	4a08      	ldr	r2, [pc, #32]	; (800a718 <UART_SetConfig+0x1c4>)
 800a6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	f003 020f 	and.w	r2, r3, #15
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	440a      	add	r2, r1
 800a708:	609a      	str	r2, [r3, #8]
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	40013800 	.word	0x40013800
 800a718:	51eb851f 	.word	0x51eb851f

0800a71c <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 800a720:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <ndefAllocRecord+0x34>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b09      	cmp	r3, #9
 800a726:	d901      	bls.n	800a72c <ndefAllocRecord+0x10>
    {
        return NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	e00c      	b.n	800a746 <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 800a72c:	4b08      	ldr	r3, [pc, #32]	; (800a750 <ndefAllocRecord+0x34>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	b2d1      	uxtb	r1, r2
 800a734:	4a06      	ldr	r2, [pc, #24]	; (800a750 <ndefAllocRecord+0x34>)
 800a736:	7011      	strb	r1, [r2, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	4613      	mov	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a04      	ldr	r2, [pc, #16]	; (800a754 <ndefAllocRecord+0x38>)
 800a744:	4413      	add	r3, r2
}
 800a746:	4618      	mov	r0, r3
 800a748:	46bd      	mov	sp, r7
 800a74a:	bc80      	pop	{r7}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000339c 	.word	0x2000339c
 800a754:	200033a0 	.word	0x200033a0

0800a758 <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 800a766:	2307      	movs	r3, #7
 800a768:	e00c      	b.n	800a784 <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <ndefMessageInit+0x38>)
 800a77e:	2200      	movs	r2, #0
 800a780:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	bc80      	pop	{r7}
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	2000339c 	.word	0x2000339c

0800a794 <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <ndefMessageGetInfo+0x1e>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 800a7b2:	2307      	movs	r3, #7
 800a7b4:	e01a      	b.n	800a7ec <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 800a7bc:	e00c      	b.n	800a7d8 <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 800a7be:	6978      	ldr	r0, [r7, #20]
 800a7c0:	f000 f994 	bl	800aaec <ndefRecordGetLength>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
        recordCount++;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	60fb      	str	r3, [r7, #12]

        record = record->next;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1ef      	bne.n	800a7be <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <ndefMessageAppend+0x16>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 800a80a:	2307      	movs	r3, #7
 800a80c:	e043      	b.n	800a896 <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a816:	b2da      	uxtb	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a824:	b2da      	uxtb	r2, r3
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2200      	movs	r2, #0
 800a82e:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a840:	b2da      	uxtb	r2, r3
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	701a      	strb	r2, [r3, #0]

        message->record = record;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e014      	b.n	800a878 <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 800a854:	e002      	b.n	800a85c <ndefMessageAppend+0x68>
        {
            current = current->next;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1f8      	bne.n	800a856 <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 800a878:	6838      	ldr	r0, [r7, #0]
 800a87a:	f000 f937 	bl	800aaec <ndefRecordGetLength>
 800a87e:	4602      	mov	r2, r0
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	441a      	add	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b088      	sub	sp, #32
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d006      	beq.n	800a8bc <ndefMessageDecode+0x1e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <ndefMessageDecode+0x1e>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 800a8bc:	2307      	movs	r3, #7
 800a8be:	e043      	b.n	800a948 <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 800a8c0:	6838      	ldr	r0, [r7, #0]
 800a8c2:	f7ff ff49 	bl	800a758 <ndefMessageInit>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800a8ca:	8b7b      	ldrh	r3, [r7, #26]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <ndefMessageDecode+0x36>
    {
        return err;
 800a8d0:	8b7b      	ldrh	r3, [r7, #26]
 800a8d2:	e039      	b.n	800a948 <ndefMessageDecode+0xaa>
    }

    offset = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 800a8d8:	e030      	b.n	800a93c <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 800a8da:	f7ff ff1f 	bl	800a71c <ndefAllocRecord>
 800a8de:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e02e      	b.n	800a948 <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 800a8fe:	f107 030c 	add.w	r3, r7, #12
 800a902:	6979      	ldr	r1, [r7, #20]
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fa32 	bl	800ad6e <ndefRecordDecode>
 800a90a:	4603      	mov	r3, r0
 800a90c:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800a90e:	8b7b      	ldrh	r3, [r7, #26]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <ndefMessageDecode+0x7a>
        {
            return err;
 800a914:	8b7b      	ldrh	r3, [r7, #26]
 800a916:	e017      	b.n	800a948 <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 800a918:	6978      	ldr	r0, [r7, #20]
 800a91a:	f000 f8e7 	bl	800aaec <ndefRecordGetLength>
 800a91e:	4602      	mov	r2, r0
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	4413      	add	r3, r2
 800a924:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 800a926:	6979      	ldr	r1, [r7, #20]
 800a928:	6838      	ldr	r0, [r7, #0]
 800a92a:	f7ff ff63 	bl	800a7f4 <ndefMessageAppend>
 800a92e:	4603      	mov	r3, r0
 800a930:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800a932:	8b7b      	ldrh	r3, [r7, #26]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <ndefMessageDecode+0x9e>
        {
            return err;
 800a938:	8b7b      	ldrh	r3, [r7, #26]
 800a93a:	e005      	b.n	800a948 <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	429a      	cmp	r2, r3
 800a944:	d3c9      	bcc.n	800a8da <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08a      	sub	sp, #40	; 0x28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <ndefMessageEncode+0x1e>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <ndefMessageEncode+0x1e>
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 800a96e:	2307      	movs	r3, #7
 800a970:	e050      	b.n	800aa14 <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 800a972:	f107 0310 	add.w	r3, r7, #16
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff ff0b 	bl	800a794 <ndefMessageGetInfo>
 800a97e:	4603      	mov	r3, r0
 800a980:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 800a982:	8b7b      	ldrh	r3, [r7, #26]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <ndefMessageEncode+0x42>
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d204      	bcs.n	800a99c <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800a998:	2301      	movs	r3, #1
 800a99a:	e03b      	b.n	800aa14 <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <ndefMessageEncode+0x58>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	e000      	b.n	800a9aa <ndefMessageEncode+0x5a>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 800a9b6:	e026      	b.n	800aa06 <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	4413      	add	r3, r2
 800a9c0:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ce:	f000 fb91 	bl	800b0f4 <ndefRecordEncode>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800a9d6:	8b7b      	ldrh	r3, [r7, #26]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d004      	beq.n	800a9e6 <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	605a      	str	r2, [r3, #4]
            return err;
 800a9e2:	8b7b      	ldrh	r3, [r7, #26]
 800a9e4:	e016      	b.n	800aa14 <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a3a      	ldr	r2, [r7, #32]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <ndefMessageEncode+0xb2>
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	e000      	b.n	800aa04 <ndefMessageEncode+0xb4>
 800aa02:	2300      	movs	r3, #0
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1d5      	bne.n	800a9b8 <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	6a3a      	ldr	r2, [r7, #32]
 800aa10:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3728      	adds	r7, #40	; 0x28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60bb      	str	r3, [r7, #8]
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 800aa3a:	2307      	movs	r3, #7
 800aa3c:	e01c      	b.n	800aa78 <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 800aa44:	f107 0310 	add.w	r3, r7, #16
 800aa48:	461a      	mov	r2, r3
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f866 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 800aa52:	f107 0310 	add.w	r3, r7, #16
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f8e4 	bl	800ac26 <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 800aa5e:	f107 0308 	add.w	r3, r7, #8
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f92f 	bl	800acc8 <ndefRecordSetPayload>

    record->ndeftype = NULL;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e027      	b.n	800aae2 <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 800aa92:	2301      	movs	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 0310 	and.w	r3, r3, #16
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	e002      	b.n	800aab6 <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3304      	adds	r3, #4
 800aab4:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 0308 	and.w	r3, r3, #8
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3301      	adds	r3, #1
 800aac6:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	461a      	mov	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	789b      	ldrb	r3, [r3, #2]
 800aad8:	461a      	mov	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]

    return length;
 800aae0:	68fb      	ldr	r3, [r7, #12]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bc80      	pop	{r7}
 800aaea:	4770      	bx	lr

0800aaec <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <ndefRecordGetLength+0x12>
    {
        return 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e00b      	b.n	800ab16 <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ffbe 	bl	800aa80 <ndefRecordGetHeaderLength>
 800ab04:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fb75 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]

    return length;
 800ab14:	68fb      	ldr	r3, [r7, #12]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b085      	sub	sp, #20
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	460b      	mov	r3, r1
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <ndefRecordSetType+0x2a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	791b      	ldrb	r3, [r3, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 800ab48:	2307      	movs	r3, #7
 800ab4a:	e012      	b.n	800ab72 <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	781a      	ldrb	r2, [r3, #0]
 800ab50:	7afb      	ldrb	r3, [r7, #11]
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	791a      	ldrb	r2, [r3, #4]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr

0800ab7c <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <ndefRecordGetType+0x1e>
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <ndefRecordGetType+0x1e>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 800ab9a:	2307      	movs	r3, #7
 800ab9c:	e00f      	b.n	800abbe <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	785a      	ldrb	r2, [r3, #1]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr

0800abc8 <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	460b      	mov	r3, r1
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <ndefRecordTypeMatch+0x1a>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <ndefRecordTypeMatch+0x1e>
    {
        return false;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e01b      	b.n	800ac1e <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 0207 	and.w	r2, r3, #7
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d113      	bne.n	800ac1c <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	785a      	ldrb	r2, [r3, #1]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d10d      	bne.n	800ac1c <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6858      	ldr	r0, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6819      	ldr	r1, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	791b      	ldrb	r3, [r3, #4]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f012 fc7b 	bl	801d508 <memcmp>
 800ac12:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <ndefRecordTypeMatch+0x54>
    {
        return true;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <ndefRecordTypeMatch+0x56>
    }

     return false;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <ndefRecordSetId+0x26>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d007      	beq.n	800ac4c <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d105      	bne.n	800ac50 <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	791b      	ldrb	r3, [r3, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 800ac4c:	2307      	movs	r3, #7
 800ac4e:	e01b      	b.n	800ac88 <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f043 0308 	orr.w	r3, r3, #8
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e006      	b.n	800ac76 <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f023 0308 	bic.w	r3, r3, #8
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	791a      	ldrb	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr

0800ac92 <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <ndefRecordGetId+0x16>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 800aca8:	2307      	movs	r3, #7
 800acaa:	e008      	b.n	800acbe <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689a      	ldr	r2, [r3, #8]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	789a      	ldrb	r2, [r3, #2]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bc80      	pop	{r7}
 800acc6:	4770      	bx	lr

0800acc8 <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <ndefRecordSetPayload+0x26>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 800acee:	2307      	movs	r3, #7
 800acf0:	e01c      	b.n	800ad2c <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f023 0310 	bic.w	r3, r3, #16
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	6852      	ldr	r2, [r2, #4]
 800ad08:	2aff      	cmp	r2, #255	; 0xff
 800ad0a:	d801      	bhi.n	800ad10 <ndefRecordSetPayload+0x48>
 800ad0c:	2210      	movs	r2, #16
 800ad0e:	e000      	b.n	800ad12 <ndefRecordSetPayload+0x4a>
 800ad10:	2200      	movs	r2, #0
 800ad12:	4313      	orrs	r3, r2
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr

0800ad36 <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <ndefRecordGetPayload+0x16>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 800ad4c:	2307      	movs	r3, #7
 800ad4e:	e00a      	b.n	800ad66 <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa4c 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d006      	beq.n	800ad8c <ndefRecordDecode+0x1e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <ndefRecordDecode+0x1e>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 800ad8c:	2307      	movs	r3, #7
 800ad8e:	e0e7      	b.n	800af60 <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 800ad90:	6838      	ldr	r0, [r7, #0]
 800ad92:	f7ff fe43 	bl	800aa1c <ndefRecordReset>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	e0df      	b.n	800af60 <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	429a      	cmp	r2, r3
 800adae:	d901      	bls.n	800adb4 <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 800adb0:	230b      	movs	r3, #11
 800adb2:	e0d5      	b.n	800af60 <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	781a      	ldrb	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	701a      	strb	r2, [r3, #0]
    offset++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	429a      	cmp	r2, r3
 800add2:	d901      	bls.n	800add8 <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 800add4:	230b      	movs	r3, #11
 800add6:	e0c3      	b.n	800af60 <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	705a      	strb	r2, [r3, #1]
    offset++;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d013      	beq.n	800ae20 <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d901      	bls.n	800ae08 <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 800ae04:	230b      	movs	r3, #11
 800ae06:	e0ab      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	611a      	str	r2, [r3, #16]
        offset++;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	e029      	b.n	800ae74 <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d901      	bls.n	800ae30 <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 800ae2c:	230b      	movs	r3, #11
 800ae2e:	e097      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	061a      	lsls	r2, r3, #24
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6819      	ldr	r1, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3301      	adds	r3, #1
 800ae44:	440b      	add	r3, r1
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	041b      	lsls	r3, r3, #16
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6819      	ldr	r1, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3302      	adds	r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6811      	ldr	r1, [r2, #0]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	3203      	adds	r2, #3
 800ae64:	440a      	add	r2, r1
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3304      	adds	r3, #4
 800ae72:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d012      	beq.n	800aea6 <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d901      	bls.n	800ae90 <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 800ae8c:	230b      	movs	r3, #11
 800ae8e:	e067      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	709a      	strb	r2, [r3, #2]
        offset++;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e002      	b.n	800aeac <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	785b      	ldrb	r3, [r3, #1]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d017      	beq.n	800aee4 <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d901      	bls.n	800aeca <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 800aec6:	230b      	movs	r3, #11
 800aec8:	e04a      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	441a      	add	r2, r3
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	461a      	mov	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e002      	b.n	800aeea <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	789b      	ldrb	r3, [r3, #2]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d017      	beq.n	800af22 <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	789b      	ldrb	r3, [r3, #2]
 800aef6:	461a      	mov	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	441a      	add	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d901      	bls.n	800af08 <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 800af04:	230b      	movs	r3, #11
 800af06:	e02b      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	441a      	add	r2, r3
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	789b      	ldrb	r3, [r3, #2]
 800af18:	461a      	mov	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e002      	b.n	800af28 <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2200      	movs	r2, #0
 800af26:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d010      	beq.n	800af52 <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	441a      	add	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d901      	bls.n	800af44 <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 800af40:	230b      	movs	r3, #11
 800af42:	e00d      	b.n	800af60 <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	441a      	add	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	60da      	str	r2, [r3, #12]
 800af50:	e002      	b.n	800af58 <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2200      	movs	r2, #0
 800af56:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2200      	movs	r2, #0
 800af5c:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d006      	beq.n	800af86 <ndefRecordEncodeHeader+0x1e>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <ndefRecordEncodeHeader+0x1e>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 800af86:	2307      	movs	r3, #7
 800af88:	e06f      	b.n	800b06a <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b06      	cmp	r3, #6
 800af90:	d804      	bhi.n	800af9c <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2207      	movs	r2, #7
 800af96:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800af98:	2301      	movs	r3, #1
 800af9a:	e066      	b.n	800b06a <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4413      	add	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	701a      	strb	r2, [r3, #0]
    offset++;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3301      	adds	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7852      	ldrb	r2, [r2, #1]
 800afc0:	701a      	strb	r2, [r3, #0]
    offset++;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f914 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800afce:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2bff      	cmp	r3, #255	; 0xff
 800afd4:	d80a      	bhi.n	800afec <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	4413      	add	r3, r2
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	b2d2      	uxtb	r2, r2
 800afe2:	701a      	strb	r2, [r3, #0]
        offset++;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	e02a      	b.n	800b042 <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	0e19      	lsrs	r1, r3, #24
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4413      	add	r3, r2
 800aff8:	b2ca      	uxtb	r2, r1
 800affa:	701a      	strb	r2, [r3, #0]
        offset++;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	0c19      	lsrs	r1, r3, #16
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	4413      	add	r3, r2
 800b00e:	b2ca      	uxtb	r2, r1
 800b010:	701a      	strb	r2, [r3, #0]
        offset++;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3301      	adds	r3, #1
 800b016:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	0a19      	lsrs	r1, r3, #8
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	b2ca      	uxtb	r2, r1
 800b026:	701a      	strb	r2, [r3, #0]
        offset++;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4413      	add	r3, r2
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	b2d2      	uxtb	r2, r2
 800b03a:	701a      	strb	r2, [r3, #0]
        offset++;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	f003 0308 	and.w	r3, r3, #8
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4413      	add	r3, r2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	7892      	ldrb	r2, [r2, #2]
 800b05a:	701a      	strb	r2, [r3, #0]
        offset++;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <ndefRecordPayloadEncode+0x16>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 800b088:	230b      	movs	r3, #11
 800b08a:	e02f      	b.n	800b0ec <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f8b2 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800b092:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d901      	bls.n	800b0a2 <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e024      	b.n	800b0ec <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 800b0aa:	e011      	b.n	800b0d0 <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	68f9      	ldr	r1, [r7, #12]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f012 fa30 	bl	801d528 <memcpy>
        }
        offset += bufPayloadItem.length;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 800b0d0:	7efa      	ldrb	r2, [r7, #27]
 800b0d2:	f107 030c 	add.w	r3, r7, #12
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8af 	bl	800b23c <ndefRecordGetPayloadItem>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1e3      	bne.n	800b0ac <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b089      	sub	sp, #36	; 0x24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <ndefRecordEncode+0x1e>
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <ndefRecordEncode+0x1e>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 800b112:	2307      	movs	r3, #7
 800b114:	e06b      	b.n	800b1ee <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685c      	ldr	r4, [r3, #4]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fce6 	bl	800aaec <ndefRecordGetLength>
 800b120:	4603      	mov	r3, r0
 800b122:	429c      	cmp	r4, r3
 800b124:	d207      	bcs.n	800b136 <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fce0 	bl	800aaec <ndefRecordGetLength>
 800b12c:	4602      	mov	r2, r0
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800b132:	2301      	movs	r3, #1
 800b134:	e05b      	b.n	800b1ee <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 800b142:	f107 0310 	add.w	r3, r7, #16
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ff0d 	bl	800af68 <ndefRecordEncodeHeader>
 800b14e:	4603      	mov	r3, r0
 800b150:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800b152:	8b7b      	ldrh	r3, [r7, #26]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <ndefRecordEncode+0x68>
    {
        return err;
 800b158:	8b7b      	ldrh	r3, [r7, #26]
 800b15a:	e048      	b.n	800b1ee <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	785b      	ldrb	r3, [r3, #1]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	18d0      	adds	r0, r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6859      	ldr	r1, [r3, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	461a      	mov	r2, r3
 800b17a:	f012 f9d5 	bl	801d528 <memcpy>
        offset += record->typeLength;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	461a      	mov	r2, r3
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	789b      	ldrb	r3, [r3, #2]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d010      	beq.n	800b1b4 <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	18d0      	adds	r0, r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6899      	ldr	r1, [r3, #8]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	789b      	ldrb	r3, [r3, #2]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f012 f9c0 	bl	801d528 <memcpy>
        offset += record->idLength;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	789b      	ldrb	r3, [r3, #2]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	685a      	ldr	r2, [r3, #4]
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff ff4f 	bl	800b072 <ndefRecordPayloadEncode>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800b1d8:	8b7b      	ldrh	r3, [r7, #26]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <ndefRecordEncode+0xee>
    {
        return err;
 800b1de:	8b7b      	ldrh	r3, [r7, #26]
 800b1e0:	e005      	b.n	800b1ee <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	441a      	add	r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3724      	adds	r7, #36	; 0x24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd90      	pop	{r4, r7, pc}

0800b1f6 <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 800b204:	2300      	movs	r3, #0
 800b206:	e015      	b.n	800b234 <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00d      	beq.n	800b22c <ndefRecordGetPayloadLength+0x36>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d008      	beq.n	800b22c <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6952      	ldr	r2, [r2, #20]
 800b224:	4610      	mov	r0, r2
 800b226:	4798      	blx	r3
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	e002      	b.n	800b232 <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 800b232:	68fb      	ldr	r3, [r7, #12]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <ndefRecordGetPayloadItem+0x1a>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	e020      	b.n	800b29c <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2200      	movs	r2, #0
 800b264:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <ndefRecordGetPayloadItem+0x4e>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	6950      	ldr	r0, [r2, #20]
 800b282:	79fa      	ldrb	r2, [r7, #7]
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	4798      	blx	r3
 800b288:	e006      	b.n	800b298 <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 800b28a:	79fb      	ldrb	r3, [r7, #7]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fd4f 	bl	800ad36 <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	681b      	ldr	r3, [r3, #0]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <ndefWifiPayloadGetLength+0x16>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b07      	cmp	r3, #7
 800b2b8:	d001      	beq.n	800b2be <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e00a      	b.n	800b2d4 <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	330c      	adds	r3, #12
 800b2c2:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 800b2ce:	3340      	adds	r3, #64	; 0x40
 800b2d0:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b08b      	sub	sp, #44	; 0x2c
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 800b2f2:	f107 0318 	add.w	r3, r7, #24
 800b2f6:	613b      	str	r3, [r7, #16]
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 800b2fc:	2307      	movs	r3, #7
 800b2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 800b302:	2305      	movs	r3, #5
 800b304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 800b308:	230b      	movs	r3, #11
 800b30a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <ndefWifiToPayloadItem+0x42>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b07      	cmp	r3, #7
 800b31a:	d102      	bne.n	800b322 <ndefWifiToPayloadItem+0x42>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 800b322:	2300      	movs	r3, #0
 800b324:	e0b3      	b.n	800b48e <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	330c      	adds	r3, #12
 800b32a:	623b      	str	r3, [r7, #32]

    if (begin == true)
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 800b332:	4b59      	ldr	r3, [pc, #356]	; (800b498 <ndefWifiToPayloadItem+0x1b8>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	605a      	str	r2, [r3, #4]

    switch (item)
 800b344:	4b54      	ldr	r3, [pc, #336]	; (800b498 <ndefWifiToPayloadItem+0x1b8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	f200 8092 	bhi.w	800b472 <ndefWifiToPayloadItem+0x192>
 800b34e:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <ndefWifiToPayloadItem+0x74>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b379 	.word	0x0800b379
 800b358:	0800b3b9 	.word	0x0800b3b9
 800b35c:	0800b3cd 	.word	0x0800b3cd
 800b360:	0800b3dd 	.word	0x0800b3dd
 800b364:	0800b3ef 	.word	0x0800b3ef
 800b368:	0800b415 	.word	0x0800b415
 800b36c:	0800b429 	.word	0x0800b429
 800b370:	0800b43b 	.word	0x0800b43b
 800b374:	0800b465 	.word	0x0800b465

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 800b37c:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 800b382:	b29b      	uxth	r3, r3
 800b384:	4413      	add	r3, r2
 800b386:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 800b388:	3337      	adds	r3, #55	; 0x37
 800b38a:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 800b38c:	8bfb      	ldrh	r3, [r7, #30]
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	b29a      	uxth	r2, r3
 800b392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b396:	b2d1      	uxtb	r1, r2
 800b398:	4a40      	ldr	r2, [pc, #256]	; (800b49c <ndefWifiToPayloadItem+0x1bc>)
 800b39a:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 800b39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	8bfa      	ldrh	r2, [r7, #30]
 800b3a4:	b2d1      	uxtb	r1, r2
 800b3a6:	4a3d      	ldr	r2, [pc, #244]	; (800b49c <ndefWifiToPayloadItem+0x1bc>)
 800b3a8:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	4a3b      	ldr	r2, [pc, #236]	; (800b49c <ndefWifiToPayloadItem+0x1bc>)
 800b3ae:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2210      	movs	r2, #16
 800b3b4:	605a      	str	r2, [r3, #4]
        break;
 800b3b6:	e063      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 800b3b8:	4b39      	ldr	r3, [pc, #228]	; (800b4a0 <ndefWifiToPayloadItem+0x1c0>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 800b3c0:	4b37      	ldr	r3, [pc, #220]	; (800b4a0 <ndefWifiToPayloadItem+0x1c0>)
 800b3c2:	791b      	ldrb	r3, [r3, #4]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	605a      	str	r2, [r3, #4]
        break;
 800b3ca:	e059      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	605a      	str	r2, [r3, #4]
        break;
 800b3da:	e051      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
        break;
 800b3ec:	e048      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 800b3ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3f2:	6a3a      	ldr	r2, [r7, #32]
 800b3f4:	7c11      	ldrb	r1, [r2, #16]
 800b3f6:	4a2b      	ldr	r2, [pc, #172]	; (800b4a4 <ndefWifiToPayloadItem+0x1c4>)
 800b3f8:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 800b3fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b3fe:	6a3a      	ldr	r2, [r7, #32]
 800b400:	7c51      	ldrb	r1, [r2, #17]
 800b402:	4a28      	ldr	r2, [pc, #160]	; (800b4a4 <ndefWifiToPayloadItem+0x1c4>)
 800b404:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4a26      	ldr	r2, [pc, #152]	; (800b4a4 <ndefWifiToPayloadItem+0x1c4>)
 800b40a:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	220e      	movs	r2, #14
 800b410:	605a      	str	r2, [r3, #4]
        break;
 800b412:	e035      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 800b414:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <ndefWifiToPayloadItem+0x1c0>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 800b41c:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <ndefWifiToPayloadItem+0x1c0>)
 800b41e:	791b      	ldrb	r3, [r3, #4]
 800b420:	461a      	mov	r2, r3
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	605a      	str	r2, [r3, #4]
        break;
 800b426:	e02b      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	f103 020c 	add.w	r2, r3, #12
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2201      	movs	r2, #1
 800b436:	605a      	str	r2, [r3, #4]
        break;
 800b438:	e022      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d107      	bne.n	800b452 <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 800b448:	7d3b      	ldrb	r3, [r7, #20]
 800b44a:	461a      	mov	r2, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 800b450:	e016      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	605a      	str	r2, [r3, #4]
        break;
 800b462:	e00d      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	4a10      	ldr	r2, [pc, #64]	; (800b4a8 <ndefWifiToPayloadItem+0x1c8>)
 800b468:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	221e      	movs	r2, #30
 800b46e:	605a      	str	r2, [r3, #4]
        break;
 800b470:	e006      	b.n	800b480 <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2200      	movs	r2, #0
 800b47c:	605a      	str	r2, [r3, #4]
        break;
 800b47e:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <ndefWifiToPayloadItem+0x1b8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3301      	adds	r3, #1
 800b486:	4a04      	ldr	r2, [pc, #16]	; (800b498 <ndefWifiToPayloadItem+0x1b8>)
 800b488:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	681b      	ldr	r3, [r3, #0]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	372c      	adds	r7, #44	; 0x2c
 800b492:	46bd      	mov	sp, r7
 800b494:	bc80      	pop	{r7}
 800b496:	4770      	bx	lr
 800b498:	200034b8 	.word	0x200034b8
 800b49c:	200000c0 	.word	0x200000c0
 800b4a0:	20000100 	.word	0x20000100
 800b4a4:	200000d0 	.word	0x200000d0
 800b4a8:	200000e0 	.word	0x200000e0

0800b4ac <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <ndefWifi+0x16>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d101      	bne.n	800b4c6 <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 800b4c2:	2307      	movs	r3, #7
 800b4c4:	e022      	b.n	800b50c <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2207      	movs	r2, #7
 800b4ca:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a12      	ldr	r2, [pc, #72]	; (800b518 <ndefWifi+0x6c>)
 800b4d0:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a11      	ldr	r2, [pc, #68]	; (800b51c <ndefWifi+0x70>)
 800b4d6:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	330c      	adds	r3, #12
 800b4dc:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4e6:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	3208      	adds	r2, #8
 800b4f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4f6:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	7c1a      	ldrb	r2, [r3, #16]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	7c5a      	ldrb	r2, [r3, #17]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	0800b2a5 	.word	0x0800b2a5
 800b51c:	0800b2e1 	.word	0x0800b2e1

0800b520 <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d006      	beq.n	800b53e <ndefGetWifi+0x1e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b07      	cmp	r3, #7
 800b536:	d102      	bne.n	800b53e <ndefGetWifi+0x1e>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 800b53e:	2307      	movs	r3, #7
 800b540:	e01b      	b.n	800b57a <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	330c      	adds	r3, #12
 800b546:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	68da      	ldr	r2, [r3, #12]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	7c1a      	ldrb	r2, [r3, #16]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	7c5a      	ldrb	r2, [r3, #17]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr

0800b584 <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08a      	sub	sp, #40	; 0x28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <ndefPayloadToWifi+0x16>
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 800b59a:	2307      	movs	r3, #7
 800b59c:	e0a2      	b.n	800b6e4 <ndefPayloadToWifi+0x160>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	767b      	strb	r3, [r7, #25]

    offset = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 800b5ba:	e086      	b.n	800b6ca <ndefPayloadToWifi+0x146>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	4413      	add	r3, r2
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 800b5ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5ce:	2b10      	cmp	r3, #16
 800b5d0:	d178      	bne.n	800b6c4 <ndefPayloadToWifi+0x140>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	3302      	adds	r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 800b5f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5f6:	021a      	lsls	r2, r3, #8
 800b5f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	3301      	adds	r3, #1
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b45      	cmp	r3, #69	; 0x45
 800b60e:	d00a      	beq.n	800b626 <ndefPayloadToWifi+0xa2>
 800b610:	2b45      	cmp	r3, #69	; 0x45
 800b612:	dc52      	bgt.n	800b6ba <ndefPayloadToWifi+0x136>
 800b614:	2b27      	cmp	r3, #39	; 0x27
 800b616:	d019      	beq.n	800b64c <ndefPayloadToWifi+0xc8>
 800b618:	2b27      	cmp	r3, #39	; 0x27
 800b61a:	dc4e      	bgt.n	800b6ba <ndefPayloadToWifi+0x136>
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d028      	beq.n	800b672 <ndefPayloadToWifi+0xee>
 800b620:	2b0f      	cmp	r3, #15
 800b622:	d038      	beq.n	800b696 <ndefPayloadToWifi+0x112>
 800b624:	e049      	b.n	800b6ba <ndefPayloadToWifi+0x136>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d901      	bls.n	800b630 <ndefPayloadToWifi+0xac>
                {
                    return ERR_PROTO;
 800b62c:	230b      	movs	r3, #11
 800b62e:	e059      	b.n	800b6e4 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	3304      	adds	r3, #4
 800b638:	4413      	add	r3, r2
 800b63a:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	4413      	add	r3, r2
 800b646:	3304      	adds	r3, #4
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b64a:	e03e      	b.n	800b6ca <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d901      	bls.n	800b656 <ndefPayloadToWifi+0xd2>
                {
                    return ERR_PROTO;
 800b652:	230b      	movs	r3, #11
 800b654:	e046      	b.n	800b6e4 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	3304      	adds	r3, #4
 800b65e:	4413      	add	r3, r2
 800b660:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	4413      	add	r3, r2
 800b66c:	3304      	adds	r3, #4
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b670:	e02b      	b.n	800b6ca <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d001      	beq.n	800b67c <ndefPayloadToWifi+0xf8>
                {
                    return ERR_PROTO;
 800b678:	230b      	movs	r3, #11
 800b67a:	e033      	b.n	800b6e4 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	3305      	adds	r3, #5
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800b68a:	69fa      	ldr	r2, [r7, #28]
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	4413      	add	r3, r2
 800b690:	3304      	adds	r3, #4
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b694:	e019      	b.n	800b6ca <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d001      	beq.n	800b6a0 <ndefPayloadToWifi+0x11c>
                {
                    return ERR_PROTO;
 800b69c:	230b      	movs	r3, #11
 800b69e:	e021      	b.n	800b6e4 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	3305      	adds	r3, #5
 800b6a8:	4413      	add	r3, r2
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b6b8:	e007      	b.n	800b6ca <ndefPayloadToWifi+0x146>
            default:
                offset++;
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	3301      	adds	r3, #1
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b6c0:	bf00      	nop
 800b6c2:	e002      	b.n	800b6ca <ndefPayloadToWifi+0x146>
            }
        }
        else
        {
            offset++;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	f4ff af73 	bcc.w	800b5bc <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 800b6d6:	f107 0308 	add.w	r3, r7, #8
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6838      	ldr	r0, [r7, #0]
 800b6de:	f7ff fee5 	bl	800b4ac <ndefWifi>
 800b6e2:	4603      	mov	r3, r0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <ndefRecordToWifi+0x16>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 800b702:	2307      	movs	r3, #7
 800b704:	e022      	b.n	800b74c <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 800b706:	4a13      	ldr	r2, [pc, #76]	; (800b754 <ndefRecordToWifi+0x68>)
 800b708:	2102      	movs	r1, #2
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fa5c 	bl	800abc8 <ndefRecordTypeMatch>
 800b710:	4603      	mov	r3, r0
 800b712:	f083 0301 	eor.w	r3, r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 800b71c:	230b      	movs	r3, #11
 800b71e:	e015      	b.n	800b74c <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f95d 	bl	800b9e0 <ndefRecordGetNdefType>
 800b726:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d007      	beq.n	800b73e <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 800b72e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b732:	68f9      	ldr	r1, [r7, #12]
 800b734:	6838      	ldr	r0, [r7, #0]
 800b736:	f011 fef7 	bl	801d528 <memcpy>
        return ERR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e006      	b.n	800b74c <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	330c      	adds	r3, #12
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff ff1d 	bl	800b584 <ndefPayloadToWifi>
 800b74a:	4603      	mov	r3, r0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	08021738 	.word	0x08021738

0800b758 <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d006      	beq.n	800b776 <ndefWifiToRecord+0x1e>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b07      	cmp	r3, #7
 800b76e:	d102      	bne.n	800b776 <ndefWifiToRecord+0x1e>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800b776:	2307      	movs	r3, #7
 800b778:	e00c      	b.n	800b794 <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800b77a:	6838      	ldr	r0, [r7, #0]
 800b77c:	f7ff f94e 	bl	800aa1c <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 800b780:	4a06      	ldr	r2, [pc, #24]	; (800b79c <ndefWifiToRecord+0x44>)
 800b782:	2102      	movs	r1, #2
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	f7ff f9ca 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 800b78a:	6879      	ldr	r1, [r7, #4]
 800b78c:	6838      	ldr	r0, [r7, #0]
 800b78e:	f000 f8ef 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	08021738 	.word	0x08021738

0800b7a0 <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <ndefTypeStringToTypeId+0x1a>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 800b7ba:	230b      	movs	r3, #11
 800b7bc:	e03f      	b.n	800b83e <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	e038      	b.n	800b836 <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 800b7c4:	4a20      	ldr	r2, [pc, #128]	; (800b848 <ndefTypeStringToTypeId+0xa8>)
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	4413      	add	r3, r2
 800b7cc:	785b      	ldrb	r3, [r3, #1]
 800b7ce:	7bfa      	ldrb	r2, [r7, #15]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d12d      	bne.n	800b830 <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	791a      	ldrb	r2, [r3, #4]
 800b7d8:	491b      	ldr	r1, [pc, #108]	; (800b848 <ndefTypeStringToTypeId+0xa8>)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	440b      	add	r3, r1
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	791b      	ldrb	r3, [r3, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d123      	bne.n	800b830 <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	791b      	ldrb	r3, [r3, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d107      	bne.n	800b800 <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 800b7f0:	4a15      	ldr	r2, [pc, #84]	; (800b848 <ndefTypeStringToTypeId+0xa8>)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e01e      	b.n	800b83e <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 800b800:	4a11      	ldr	r2, [pc, #68]	; (800b848 <ndefTypeStringToTypeId+0xa8>)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	4413      	add	r3, r2
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	6819      	ldr	r1, [r3, #0]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	791b      	ldrb	r3, [r3, #4]
 800b814:	461a      	mov	r2, r3
 800b816:	f011 fe77 	bl	801d508 <memcmp>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d107      	bne.n	800b830 <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 800b820:	4a09      	ldr	r2, [pc, #36]	; (800b848 <ndefTypeStringToTypeId+0xa8>)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	e006      	b.n	800b83e <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3301      	adds	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b06      	cmp	r3, #6
 800b83a:	d9c3      	bls.n	800b7c4 <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 800b83c:	2316      	movs	r3, #22
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	08021794 	.word	0x08021794

0800b84c <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <ndefRecordTypeStringToTypeId+0x16>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 800b862:	2307      	movs	r3, #7
 800b864:	e029      	b.n	800b8ba <ndefRecordTypeStringToTypeId+0x6e>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 800b866:	f107 020c 	add.w	r2, r7, #12
 800b86a:	f107 0315 	add.w	r3, r7, #21
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff f983 	bl	800ab7c <ndefRecordGetType>
 800b876:	4603      	mov	r3, r0
 800b878:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 800b87a:	8afb      	ldrh	r3, [r7, #22]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 800b880:	8afb      	ldrh	r3, [r7, #22]
 800b882:	e01a      	b.n	800b8ba <ndefRecordTypeStringToTypeId+0x6e>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 800b884:	7d7b      	ldrb	r3, [r7, #21]
 800b886:	2b06      	cmp	r3, #6
 800b888:	d901      	bls.n	800b88e <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 800b88a:	230c      	movs	r3, #12
 800b88c:	e015      	b.n	800b8ba <ndefRecordTypeStringToTypeId+0x6e>
    }

    switch (tnf)
 800b88e:	7d7b      	ldrb	r3, [r7, #21]
 800b890:	2b02      	cmp	r3, #2
 800b892:	dc02      	bgt.n	800b89a <ndefRecordTypeStringToTypeId+0x4e>
 800b894:	2b00      	cmp	r3, #0
 800b896:	da02      	bge.n	800b89e <ndefRecordTypeStringToTypeId+0x52>
 800b898:	e00b      	b.n	800b8b2 <ndefRecordTypeStringToTypeId+0x66>
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	d109      	bne.n	800b8b2 <ndefRecordTypeStringToTypeId+0x66>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 800b89e:	7d7b      	ldrb	r3, [r7, #21]
 800b8a0:	f107 010c 	add.w	r1, r7, #12
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff ff7a 	bl	800b7a0 <ndefTypeStringToTypeId>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	82fb      	strh	r3, [r7, #22]
        break;
 800b8b0:	e002      	b.n	800b8b8 <ndefRecordTypeStringToTypeId+0x6c>
    default:
        err = ERR_NOT_IMPLEMENTED;
 800b8b2:	230f      	movs	r3, #15
 800b8b4:	82fb      	strh	r3, [r7, #22]
        break;
 800b8b6:	bf00      	nop
    }

    return err;
 800b8b8:	8afb      	ldrh	r3, [r7, #22]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
	...

0800b8c4 <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f886 	bl	800b9e0 <ndefRecordGetNdefType>
 800b8d4:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 800b8dc:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b8e0:	6939      	ldr	r1, [r7, #16]
 800b8e2:	6838      	ldr	r0, [r7, #0]
 800b8e4:	f011 fe20 	bl	801d528 <memcpy>
        return ERR_NONE;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e03a      	b.n	800b962 <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 800b8ec:	f107 030d 	add.w	r3, r7, #13
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff ffaa 	bl	800b84c <ndefRecordTypeStringToTypeId>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 800b8fc:	89fb      	ldrh	r3, [r7, #14]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <ndefRecordToType+0x42>
    {
        return err;
 800b902:	89fb      	ldrh	r3, [r7, #14]
 800b904:	e02d      	b.n	800b962 <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	e026      	b.n	800b95a <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 800b90c:	4917      	ldr	r1, [pc, #92]	; (800b96c <ndefRecordToType+0xa8>)
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	4613      	mov	r3, r2
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	440b      	add	r3, r1
 800b91a:	781a      	ldrb	r2, [r3, #0]
 800b91c:	7b7b      	ldrb	r3, [r7, #13]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d118      	bne.n	800b954 <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 800b922:	4912      	ldr	r1, [pc, #72]	; (800b96c <ndefRecordToType+0xa8>)
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	4613      	mov	r3, r2
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	4413      	add	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	440b      	add	r3, r1
 800b930:	3304      	adds	r3, #4
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00d      	beq.n	800b954 <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 800b938:	490c      	ldr	r1, [pc, #48]	; (800b96c <ndefRecordToType+0xa8>)
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	440b      	add	r3, r1
 800b946:	3304      	adds	r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
 800b950:	4603      	mov	r3, r0
 800b952:	e006      	b.n	800b962 <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	3301      	adds	r3, #1
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b06      	cmp	r3, #6
 800b95e:	d9d5      	bls.n	800b90c <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 800b960:	230f      	movs	r3, #15
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	08021740 	.word	0x08021740

0800b970 <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00e      	beq.n	800b99e <ndefRecordSetNdefType+0x2e>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00b      	beq.n	800b99e <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 800b98a:	2b08      	cmp	r3, #8
 800b98c:	d807      	bhi.n	800b99e <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 800b99e:	2307      	movs	r3, #7
 800b9a0:	e01a      	b.n	800b9d8 <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff fc24 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800b9ae:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	f023 0310 	bic.w	r3, r3, #16
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	2aff      	cmp	r2, #255	; 0xff
 800b9c6:	d801      	bhi.n	800b9cc <ndefRecordSetNdefType+0x5c>
 800b9c8:	2210      	movs	r2, #16
 800b9ca:	e000      	b.n	800b9ce <ndefRecordSetNdefType+0x5e>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e016      	b.n	800ba20 <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d011      	beq.n	800ba1e <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2b07      	cmp	r3, #7
 800ba02:	d80c      	bhi.n	800ba1e <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d007      	beq.n	800ba1e <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	e000      	b.n	800ba20 <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr

0800ba2a <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b087      	sub	sp, #28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <ndefVCardPayloadGetLength+0x1a>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b06      	cmp	r3, #6
 800ba42:	d001      	beq.n	800ba48 <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e06e      	b.n	800bb26 <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 800ba4e:	2205      	movs	r2, #5
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	4413      	add	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800ba56:	2201      	movs	r2, #1
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 800ba5e:	2205      	movs	r2, #5
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	4413      	add	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800ba66:	2202      	movs	r2, #2
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 800ba6e:	2207      	movs	r2, #7
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	4413      	add	r3, r2
 800ba74:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800ba76:	2201      	movs	r2, #1
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 800ba7e:	2203      	movs	r2, #3
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	4413      	add	r3, r2
 800ba84:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 800ba86:	2202      	movs	r2, #2
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]

    i = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 800ba92:	e034      	b.n	800bafe <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	011b      	lsls	r3, r3, #4
 800ba9a:	4413      	add	r3, r2
 800ba9c:	330c      	adds	r3, #12
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	461a      	mov	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	4413      	add	r3, r2
 800baa6:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	4413      	add	r3, r2
 800bab0:	3304      	adds	r3, #4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00d      	beq.n	800bad4 <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 800bab8:	2201      	movs	r2, #1
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	4413      	add	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	011b      	lsls	r3, r3, #4
 800bac6:	4413      	add	r3, r2
 800bac8:	330d      	adds	r3, #13
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	4413      	add	r3, r2
 800bad2:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 800bad4:	2201      	movs	r2, #1
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	011b      	lsls	r3, r3, #4
 800bae2:	4413      	add	r3, r2
 800bae4:	330e      	adds	r3, #14
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	461a      	mov	r2, r3
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	4413      	add	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 800baf0:	2202      	movs	r2, #2
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	4413      	add	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]

        i++;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	3301      	adds	r3, #1
 800bafc:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1c3      	bne.n	800ba94 <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	4413      	add	r3, r2
 800bb12:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 800bb14:	2201      	movs	r2, #1
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	4413      	add	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	4413      	add	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 800bb24:	697b      	ldr	r3, [r7, #20]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bc80      	pop	{r7}
 800bb2e:	4770      	bx	lr

0800bb30 <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d006      	beq.n	800bb52 <ndefVCardToPayloadItem+0x22>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b06      	cmp	r3, #6
 800bb4a:	d102      	bne.n	800bb52 <ndefVCardToPayloadItem+0x22>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e17f      	b.n	800be56 <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	330c      	adds	r3, #12
 800bb5a:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d008      	beq.n	800bb74 <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 800bb62:	4b8c      	ldr	r3, [pc, #560]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
        userItem = 0;
 800bb68:	4b8b      	ldr	r3, [pc, #556]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
        index    = 0;
 800bb6e:	4b8b      	ldr	r3, [pc, #556]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e164      	b.n	800be56 <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 800bb8c:	4b81      	ldr	r3, [pc, #516]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b0a      	cmp	r3, #10
 800bb92:	f200 8157 	bhi.w	800be44 <ndefVCardToPayloadItem+0x314>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <ndefVCardToPayloadItem+0x6c>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbc9 	.word	0x0800bbc9
 800bba0:	0800bbe1 	.word	0x0800bbe1
 800bba4:	0800bbf9 	.word	0x0800bbf9
 800bba8:	0800bc11 	.word	0x0800bc11
 800bbac:	0800bc29 	.word	0x0800bc29
 800bbb0:	0800bc41 	.word	0x0800bc41
 800bbb4:	0800bc59 	.word	0x0800bc59
 800bbb8:	0800bc71 	.word	0x0800bc71
 800bbbc:	0800bc95 	.word	0x0800bc95
 800bbc0:	0800be15 	.word	0x0800be15
 800bbc4:	0800be2d 	.word	0x0800be2d
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 800bbc8:	4a75      	ldr	r2, [pc, #468]	; (800bda0 <ndefVCardToPayloadItem+0x270>)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 800bbce:	2205      	movs	r2, #5
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bbd4:	4b6f      	ldr	r3, [pc, #444]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	4a6e      	ldr	r2, [pc, #440]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bbdc:	6013      	str	r3, [r2, #0]
        break;
 800bbde:	e138      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 800bbe0:	4a70      	ldr	r2, [pc, #448]	; (800bda4 <ndefVCardToPayloadItem+0x274>)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bbec:	4b69      	ldr	r3, [pc, #420]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	4a68      	ldr	r2, [pc, #416]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bbf4:	6013      	str	r3, [r2, #0]
        break;
 800bbf6:	e12c      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 800bbf8:	4a6b      	ldr	r2, [pc, #428]	; (800bda8 <ndefVCardToPayloadItem+0x278>)
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800bbfe:	2205      	movs	r2, #5
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc04:	4b63      	ldr	r3, [pc, #396]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	4a62      	ldr	r2, [pc, #392]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc0c:	6013      	str	r3, [r2, #0]
        break;
 800bc0e:	e120      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800bc10:	4a66      	ldr	r2, [pc, #408]	; (800bdac <ndefVCardToPayloadItem+0x27c>)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 800bc16:	2202      	movs	r2, #2
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc1c:	4b5d      	ldr	r3, [pc, #372]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	4a5c      	ldr	r2, [pc, #368]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc24:	6013      	str	r3, [r2, #0]
        break;
 800bc26:	e114      	b.n	800be52 <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 800bc28:	4a61      	ldr	r2, [pc, #388]	; (800bdb0 <ndefVCardToPayloadItem+0x280>)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 800bc2e:	2207      	movs	r2, #7
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc34:	4b57      	ldr	r3, [pc, #348]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	4a56      	ldr	r2, [pc, #344]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc3c:	6013      	str	r3, [r2, #0]
        break;
 800bc3e:	e108      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 800bc40:	4a58      	ldr	r2, [pc, #352]	; (800bda4 <ndefVCardToPayloadItem+0x274>)
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 800bc46:	2201      	movs	r2, #1
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc4c:	4b51      	ldr	r3, [pc, #324]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3301      	adds	r3, #1
 800bc52:	4a50      	ldr	r2, [pc, #320]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc54:	6013      	str	r3, [r2, #0]
        break;
 800bc56:	e0fc      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 800bc58:	4a56      	ldr	r2, [pc, #344]	; (800bdb4 <ndefVCardToPayloadItem+0x284>)
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 800bc5e:	2203      	movs	r2, #3
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc64:	4b4b      	ldr	r3, [pc, #300]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	4a4a      	ldr	r2, [pc, #296]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc6c:	6013      	str	r3, [r2, #0]
        break;
 800bc6e:	e0f0      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800bc70:	4a4e      	ldr	r2, [pc, #312]	; (800bdac <ndefVCardToPayloadItem+0x27c>)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 800bc76:	2202      	movs	r2, #2
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800bc7c:	4b45      	ldr	r3, [pc, #276]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3301      	adds	r3, #1
 800bc82:	4a44      	ldr	r2, [pc, #272]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bc84:	6013      	str	r3, [r2, #0]
        userItem = 0;
 800bc86:	4b44      	ldr	r3, [pc, #272]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
        index    = 0;
 800bc8c:	4b43      	ldr	r3, [pc, #268]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	601a      	str	r2, [r3, #0]
        break;
 800bc92:	e0de      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 800bc94:	4b40      	ldr	r3, [pc, #256]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b05      	cmp	r3, #5
 800bc9a:	f200 80b9 	bhi.w	800be10 <ndefVCardToPayloadItem+0x2e0>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <ndefVCardToPayloadItem+0x174>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bcbd 	.word	0x0800bcbd
 800bca8:	0800bd33 	.word	0x0800bd33
 800bcac:	0800bd4b 	.word	0x0800bd4b
 800bcb0:	0800bd7d 	.word	0x0800bd7d
 800bcb4:	0800bdc1 	.word	0x0800bdc1
 800bcb8:	0800bdf3 	.word	0x0800bdf3
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 800bcbc:	4b37      	ldr	r3, [pc, #220]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	011b      	lsls	r3, r3, #4
 800bcc4:	4413      	add	r3, r2
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10b      	bne.n	800bce4 <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 800bccc:	4a3a      	ldr	r2, [pc, #232]	; (800bdb8 <ndefVCardToPayloadItem+0x288>)
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 800bcd2:	2203      	movs	r2, #3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	4a2d      	ldr	r2, [pc, #180]	; (800bd94 <ndefVCardToPayloadItem+0x264>)
 800bce0:	6013      	str	r3, [r2, #0]
                break;
 800bce2:	e096      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 800bce4:	4b2d      	ldr	r3, [pc, #180]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	4413      	add	r3, r2
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 800bcf4:	4b29      	ldr	r3, [pc, #164]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	330c      	adds	r3, #12
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 800bd08:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	4413      	add	r3, r2
 800bd12:	3304      	adds	r3, #4
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 800bd1a:	4b1f      	ldr	r3, [pc, #124]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	4a1d      	ldr	r2, [pc, #116]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd22:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 800bd24:	e075      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 800bd26:	4b1c      	ldr	r3, [pc, #112]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3303      	adds	r3, #3
 800bd2c:	4a1a      	ldr	r2, [pc, #104]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd2e:	6013      	str	r3, [r2, #0]
            break;
 800bd30:	e06f      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 800bd32:	4a22      	ldr	r2, [pc, #136]	; (800bdbc <ndefVCardToPayloadItem+0x28c>)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 800bd38:	2201      	movs	r2, #1
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	605a      	str	r2, [r3, #4]
            userItem++;
 800bd3e:	4b16      	ldr	r3, [pc, #88]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	4a14      	ldr	r2, [pc, #80]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd46:	6013      	str	r3, [r2, #0]
            break;
 800bd48:	e063      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 800bd4a:	4b14      	ldr	r3, [pc, #80]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	011b      	lsls	r3, r3, #4
 800bd52:	4413      	add	r3, r2
 800bd54:	3304      	adds	r3, #4
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <ndefVCardToPayloadItem+0x26c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	4413      	add	r3, r2
 800bd66:	330d      	adds	r3, #13
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	605a      	str	r2, [r3, #4]
            userItem++;
 800bd70:	4b09      	ldr	r3, [pc, #36]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	4a08      	ldr	r2, [pc, #32]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd78:	6013      	str	r3, [r2, #0]
            break;
 800bd7a:	e04a      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 800bd7c:	4a09      	ldr	r2, [pc, #36]	; (800bda4 <ndefVCardToPayloadItem+0x274>)
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 800bd82:	2201      	movs	r2, #1
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	605a      	str	r2, [r3, #4]
            userItem++;
 800bd88:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	4a02      	ldr	r2, [pc, #8]	; (800bd98 <ndefVCardToPayloadItem+0x268>)
 800bd90:	6013      	str	r3, [r2, #0]
            break;
 800bd92:	e03e      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
 800bd94:	200034c0 	.word	0x200034c0
 800bd98:	200034c4 	.word	0x200034c4
 800bd9c:	200034c8 	.word	0x200034c8
 800bda0:	0802180c 	.word	0x0802180c
 800bda4:	080217e8 	.word	0x080217e8
 800bda8:	08021820 	.word	0x08021820
 800bdac:	080217f0 	.word	0x080217f0
 800bdb0:	08021818 	.word	0x08021818
 800bdb4:	08021828 	.word	0x08021828
 800bdb8:	08021814 	.word	0x08021814
 800bdbc:	080217ec 	.word	0x080217ec
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 800bdc0:	4b27      	ldr	r3, [pc, #156]	; (800be60 <ndefVCardToPayloadItem+0x330>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	4413      	add	r3, r2
 800bdca:	3308      	adds	r3, #8
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 800bdd2:	4b23      	ldr	r3, [pc, #140]	; (800be60 <ndefVCardToPayloadItem+0x330>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	011b      	lsls	r3, r3, #4
 800bdda:	4413      	add	r3, r2
 800bddc:	330e      	adds	r3, #14
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	605a      	str	r2, [r3, #4]
            userItem++;
 800bde6:	4b1f      	ldr	r3, [pc, #124]	; (800be64 <ndefVCardToPayloadItem+0x334>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	4a1d      	ldr	r2, [pc, #116]	; (800be64 <ndefVCardToPayloadItem+0x334>)
 800bdee:	6013      	str	r3, [r2, #0]
            break;
 800bdf0:	e00f      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 800bdf2:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <ndefVCardToPayloadItem+0x338>)
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	605a      	str	r2, [r3, #4]
            index++;
 800bdfe:	4b18      	ldr	r3, [pc, #96]	; (800be60 <ndefVCardToPayloadItem+0x330>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3301      	adds	r3, #1
 800be04:	4a16      	ldr	r2, [pc, #88]	; (800be60 <ndefVCardToPayloadItem+0x330>)
 800be06:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 800be08:	4b16      	ldr	r3, [pc, #88]	; (800be64 <ndefVCardToPayloadItem+0x334>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]
            break;
 800be0e:	e000      	b.n	800be12 <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 800be10:	bf00      	nop
        }
        break;
 800be12:	e01e      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 800be14:	4a15      	ldr	r2, [pc, #84]	; (800be6c <ndefVCardToPayloadItem+0x33c>)
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 800be1a:	2201      	movs	r2, #1
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800be20:	4b13      	ldr	r3, [pc, #76]	; (800be70 <ndefVCardToPayloadItem+0x340>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	4a12      	ldr	r2, [pc, #72]	; (800be70 <ndefVCardToPayloadItem+0x340>)
 800be28:	6013      	str	r3, [r2, #0]
        break;
 800be2a:	e012      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 800be2c:	4a11      	ldr	r2, [pc, #68]	; (800be74 <ndefVCardToPayloadItem+0x344>)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800be32:	2205      	movs	r2, #5
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800be38:	4b0d      	ldr	r3, [pc, #52]	; (800be70 <ndefVCardToPayloadItem+0x340>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	4a0c      	ldr	r2, [pc, #48]	; (800be70 <ndefVCardToPayloadItem+0x340>)
 800be40:	6013      	str	r3, [r2, #0]
        break;
 800be42:	e006      	b.n	800be52 <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2200      	movs	r2, #0
 800be4e:	605a      	str	r2, [r3, #4]
        break;
 800be50:	bf00      	nop
    }

    return bufItem->buffer;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	681b      	ldr	r3, [r3, #0]
}
 800be56:	4618      	mov	r0, r3
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bc80      	pop	{r7}
 800be5e:	4770      	bx	lr
 800be60:	200034c8 	.word	0x200034c8
 800be64:	200034c4 	.word	0x200034c4
 800be68:	080217f0 	.word	0x080217f0
 800be6c:	080217e8 	.word	0x080217e8
 800be70:	200034c0 	.word	0x200034c0
 800be74:	08021820 	.word	0x08021820

0800be78 <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00c      	beq.n	800bea6 <ndefGetVCard+0x2e>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b06      	cmp	r3, #6
 800be92:	d108      	bne.n	800bea6 <ndefGetVCard+0x2e>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d005      	beq.n	800bea6 <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <ndefGetVCard+0x2e>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 800bea6:	2307      	movs	r3, #7
 800bea8:	e062      	b.n	800bf70 <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	330c      	adds	r3, #12
 800beae:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800bec8:	2300      	movs	r3, #0
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e04c      	b.n	800bf68 <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	4413      	add	r3, r2
 800bed6:	330c      	adds	r3, #12
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d041      	beq.n	800bf62 <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	011b      	lsls	r3, r3, #4
 800bee4:	4413      	add	r3, r2
 800bee6:	330c      	adds	r3, #12
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d136      	bne.n	800bf62 <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d032      	beq.n	800bf62 <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	4413      	add	r3, r2
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	6819      	ldr	r1, [r3, #0]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f011 fafa 	bl	801d508 <memcmp>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d123      	bne.n	800bf62 <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	4413      	add	r3, r2
 800bf22:	3304      	adds	r3, #4
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	4413      	add	r3, r2
 800bf32:	330d      	adds	r3, #13
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	4413      	add	r3, r2
 800bf44:	3308      	adds	r3, #8
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	011b      	lsls	r3, r3, #4
 800bf52:	4413      	add	r3, r2
 800bf54:	330e      	adds	r3, #14
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e006      	b.n	800bf70 <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	3301      	adds	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	d9af      	bls.n	800bece <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 800bf6e:	2316      	movs	r3, #22
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00d      	beq.n	800bfa6 <ndefVCardFindMarker+0x2e>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <ndefVCardFindMarker+0x2e>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <ndefVCardFindMarker+0x2e>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 800bfa6:	230b      	movs	r3, #11
 800bfa8:	e025      	b.n	800bff6 <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 800bfae:	e019      	b.n	800bfe4 <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d012      	beq.n	800bfde <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	18d0      	adds	r0, r2, r3
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	f011 fa9d 	bl	801d508 <memcmp>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d104      	bne.n	800bfde <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e00b      	b.n	800bff6 <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d3dd      	bcc.n	800bfb0 <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 800bff4:	2316      	movs	r3, #22
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b086      	sub	sp, #24
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d011      	beq.n	800c034 <ndefVCardExtractLine+0x36>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00d      	beq.n	800c034 <ndefVCardExtractLine+0x36>
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d006      	beq.n	800c034 <ndefVCardExtractLine+0x36>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 800c034:	230b      	movs	r3, #11
 800c036:	e01c      	b.n	800c072 <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 800c038:	f107 0310 	add.w	r3, r7, #16
 800c03c:	461a      	mov	r2, r3
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff ff99 	bl	800bf78 <ndefVCardFindMarker>
 800c046:	4603      	mov	r3, r0
 800c048:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 800c04a:	8afb      	ldrh	r3, [r7, #22]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d107      	bne.n	800c060 <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	605a      	str	r2, [r3, #4]
 800c05e:	e007      	b.n	800c070 <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3718      	adds	r7, #24
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d006      	beq.n	800c09a <ndefVCardParseLine+0x1e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <ndefVCardParseLine+0x1e>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 800c09a:	230b      	movs	r3, #11
 800c09c:	e053      	b.n	800c146 <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 800c09e:	f107 030c 	add.w	r3, r7, #12
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	492a      	ldr	r1, [pc, #168]	; (800c150 <ndefVCardParseLine+0xd4>)
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff66 	bl	800bf78 <ndefVCardFindMarker>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 800c0b0:	8bfb      	ldrh	r3, [r7, #30]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 800c0b6:	8bfb      	ldrh	r3, [r7, #30]
 800c0b8:	e045      	b.n	800c146 <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 800c0d4:	f107 0210 	add.w	r2, r7, #16
 800c0d8:	f107 0314 	add.w	r3, r7, #20
 800c0dc:	491d      	ldr	r1, [pc, #116]	; (800c154 <ndefVCardParseLine+0xd8>)
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff ff4a 	bl	800bf78 <ndefVCardFindMarker>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 800c0e8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d11a      	bne.n	800c124 <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	441a      	add	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	b2db      	uxtb	r3, r3
 800c108:	3b01      	subs	r3, #1
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	7b1a      	ldrb	r2, [r3, #12]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	7b5b      	ldrb	r3, [r3, #13]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	3b01      	subs	r3, #1
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3301      	adds	r3, #1
 800c12c:	441a      	add	r2, r3
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	b29a      	uxth	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	b29a      	uxth	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	080217f4 	.word	0x080217f4
 800c154:	080217fc 	.word	0x080217fc

0800c158 <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e01e      	b.n	800c1a6 <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	4413      	add	r3, r2
 800c170:	330c      	adds	r3, #12
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d013      	beq.n	800c1a0 <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	011b      	lsls	r3, r3, #4
 800c17e:	4413      	add	r3, r2
 800c180:	6819      	ldr	r1, [r3, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	4413      	add	r3, r2
 800c18a:	330c      	adds	r3, #12
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	6838      	ldr	r0, [r7, #0]
 800c192:	f011 f9b9 	bl	801d508 <memcmp>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <ndefIsVCardTypeFound+0x48>
            {
                return true;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e006      	b.n	800c1ae <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b0f      	cmp	r3, #15
 800c1aa:	d9dd      	bls.n	800c168 <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08c      	sub	sp, #48	; 0x30
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00a      	beq.n	800c1de <ndefPayloadToVcard+0x26>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <ndefPayloadToVcard+0x26>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <ndefPayloadToVcard+0x26>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 800c1de:	230b      	movs	r3, #11
 800c1e0:	e09c      	b.n	800c31c <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2206      	movs	r2, #6
 800c1e6:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	4a4e      	ldr	r2, [pc, #312]	; (800c324 <ndefPayloadToVcard+0x16c>)
 800c1ec:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	4a4d      	ldr	r2, [pc, #308]	; (800c328 <ndefPayloadToVcard+0x170>)
 800c1f2:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	330c      	adds	r3, #12
 800c1f8:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1fe:	e02b      	b.n	800c258 <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 800c200:	6a3a      	ldr	r2, [r7, #32]
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	011b      	lsls	r3, r3, #4
 800c206:	4413      	add	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 800c20c:	6a3a      	ldr	r2, [r7, #32]
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	011b      	lsls	r3, r3, #4
 800c212:	4413      	add	r3, r2
 800c214:	330c      	adds	r3, #12
 800c216:	2200      	movs	r2, #0
 800c218:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	4413      	add	r3, r2
 800c222:	3304      	adds	r3, #4
 800c224:	2200      	movs	r2, #0
 800c226:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 800c228:	6a3a      	ldr	r2, [r7, #32]
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	4413      	add	r3, r2
 800c230:	330d      	adds	r3, #13
 800c232:	2200      	movs	r2, #0
 800c234:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 800c236:	6a3a      	ldr	r2, [r7, #32]
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	011b      	lsls	r3, r3, #4
 800c23c:	4413      	add	r3, r2
 800c23e:	3308      	adds	r3, #8
 800c240:	2200      	movs	r2, #0
 800c242:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 800c244:	6a3a      	ldr	r2, [r7, #32]
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	4413      	add	r3, r2
 800c24c:	330e      	adds	r3, #14
 800c24e:	2200      	movs	r2, #0
 800c250:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	3301      	adds	r3, #1
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	2b0f      	cmp	r3, #15
 800c25c:	d9d0      	bls.n	800c200 <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 800c262:	2300      	movs	r3, #0
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800c266:	e029      	b.n	800c2bc <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	4413      	add	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 800c27c:	f107 020c 	add.w	r2, r7, #12
 800c280:	f107 0314 	add.w	r3, r7, #20
 800c284:	4929      	ldr	r1, [pc, #164]	; (800c32c <ndefPayloadToVcard+0x174>)
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff feb9 	bl	800bffe <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	6a3a      	ldr	r2, [r7, #32]
 800c292:	441a      	add	r2, r3
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff feee 	bl	800c07c <ndefVCardParseLine>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 800c2a4:	8bfb      	ldrh	r3, [r7, #30]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b8:	4413      	add	r3, r2
 800c2ba:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d202      	bcs.n	800c2cc <ndefPayloadToVcard+0x114>
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	2b0f      	cmp	r3, #15
 800c2ca:	d9cd      	bls.n	800c268 <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 800c2cc:	4b18      	ldr	r3, [pc, #96]	; (800c330 <ndefPayloadToVcard+0x178>)
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6a38      	ldr	r0, [r7, #32]
 800c2d2:	f7ff ff41 	bl	800c158 <ndefIsVCardTypeFound>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	f083 0301 	eor.w	r3, r3, #1
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 800c2e2:	2314      	movs	r3, #20
 800c2e4:	e01a      	b.n	800c31c <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 800c2e6:	4b13      	ldr	r3, [pc, #76]	; (800c334 <ndefPayloadToVcard+0x17c>)
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6a38      	ldr	r0, [r7, #32]
 800c2ec:	f7ff ff34 	bl	800c158 <ndefIsVCardTypeFound>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f083 0301 	eor.w	r3, r3, #1
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 800c2fc:	2314      	movs	r3, #20
 800c2fe:	e00d      	b.n	800c31c <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 800c300:	4b0d      	ldr	r3, [pc, #52]	; (800c338 <ndefPayloadToVcard+0x180>)
 800c302:	4619      	mov	r1, r3
 800c304:	6a38      	ldr	r0, [r7, #32]
 800c306:	f7ff ff27 	bl	800c158 <ndefIsVCardTypeFound>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f083 0301 	eor.w	r3, r3, #1
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d001      	beq.n	800c31a <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 800c316:	2314      	movs	r3, #20
 800c318:	e000      	b.n	800c31c <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3730      	adds	r7, #48	; 0x30
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	0800ba2b 	.word	0x0800ba2b
 800c328:	0800bb31 	.word	0x0800bb31
 800c32c:	08021804 	.word	0x08021804
 800c330:	0802180c 	.word	0x0802180c
 800c334:	08021818 	.word	0x08021818
 800c338:	08021814 	.word	0x08021814

0800c33c <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <ndefRecordToVCard+0x16>
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 800c352:	2307      	movs	r3, #7
 800c354:	e022      	b.n	800c39c <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 800c356:	4a13      	ldr	r2, [pc, #76]	; (800c3a4 <ndefRecordToVCard+0x68>)
 800c358:	2102      	movs	r1, #2
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7fe fc34 	bl	800abc8 <ndefRecordTypeMatch>
 800c360:	4603      	mov	r3, r0
 800c362:	f083 0301 	eor.w	r3, r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 800c36c:	230b      	movs	r3, #11
 800c36e:	e015      	b.n	800c39c <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fb35 	bl	800b9e0 <ndefRecordGetNdefType>
 800c376:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d007      	beq.n	800c38e <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 800c37e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	6838      	ldr	r0, [r7, #0]
 800c386:	f011 f8cf 	bl	801d528 <memcpy>
        return ERR_NONE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e006      	b.n	800c39c <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	330c      	adds	r3, #12
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff ff0f 	bl	800c1b8 <ndefPayloadToVcard>
 800c39a:	4603      	mov	r3, r0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	080217e0 	.word	0x080217e0

0800c3a8 <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d006      	beq.n	800c3c6 <ndefVCardToRecord+0x1e>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b06      	cmp	r3, #6
 800c3be:	d102      	bne.n	800c3c6 <ndefVCardToRecord+0x1e>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800c3c6:	2307      	movs	r3, #7
 800c3c8:	e00c      	b.n	800c3e4 <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800c3ca:	6838      	ldr	r0, [r7, #0]
 800c3cc:	f7fe fb26 	bl	800aa1c <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 800c3d0:	4a06      	ldr	r2, [pc, #24]	; (800c3ec <ndefVCardToRecord+0x44>)
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	6838      	ldr	r0, [r7, #0]
 800c3d6:	f7fe fba2 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 800c3da:	6879      	ldr	r1, [r7, #4]
 800c3dc:	6838      	ldr	r0, [r7, #0]
 800c3de:	f7ff fac7 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	080217e0 	.word	0x080217e0

0800c3f0 <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <ndefEmptyTypePayloadGetLength+0x16>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 800c406:	2300      	movs	r3, #0
 800c408:	e000      	b.n	800c40c <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	bc80      	pop	{r7}
 800c414:	4770      	bx	lr

0800c416 <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	4613      	mov	r3, r2
 800c422:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <ndefEmptyTypePayloadItem+0x1c>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 800c432:	2300      	movs	r3, #0
 800c434:	e009      	b.n	800c44a <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2200      	movs	r2, #0
 800c446:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	bc80      	pop	{r7}
 800c452:	4770      	bx	lr

0800c454 <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 800c462:	2307      	movs	r3, #7
 800c464:	e009      	b.n	800c47a <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a05      	ldr	r2, [pc, #20]	; (800c484 <ndefEmptyType+0x30>)
 800c470:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a04      	ldr	r2, [pc, #16]	; (800c488 <ndefEmptyType+0x34>)
 800c476:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc80      	pop	{r7}
 800c482:	4770      	bx	lr
 800c484:	0800c3f1 	.word	0x0800c3f1
 800c488:	0800c417 	.word	0x0800c417

0800c48c <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 800c496:	2300      	movs	r3, #0
 800c498:	60bb      	str	r3, [r7, #8]
 800c49a:	2300      	movs	r3, #0
 800c49c:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <ndefRecordToEmptyType+0x1e>
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 800c4aa:	2307      	movs	r3, #7
 800c4ac:	e024      	b.n	800c4f8 <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7fe fb86 	bl	800abc8 <ndefRecordTypeMatch>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f083 0301 	eor.w	r3, r3, #1
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 800c4c8:	2307      	movs	r3, #7
 800c4ca:	e015      	b.n	800c4f8 <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	789b      	ldrb	r3, [r3, #2]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10b      	bne.n	800c4ec <ndefRecordToEmptyType+0x60>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d107      	bne.n	800c4ec <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d103      	bne.n	800c4ec <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 800c4ec:	2307      	movs	r3, #7
 800c4ee:	e003      	b.n	800c4f8 <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 800c4f0:	6838      	ldr	r0, [r7, #0]
 800c4f2:	f7ff ffaf 	bl	800c454 <ndefEmptyType>
 800c4f6:	4603      	mov	r3, r0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <ndefEmptyTypeToRecord+0x1e>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <ndefEmptyTypeToRecord+0x1e>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800c51e:	2307      	movs	r3, #7
 800c520:	e007      	b.n	800c532 <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 800c522:	6838      	ldr	r0, [r7, #0]
 800c524:	f7fe fa7a 	bl	800aa1c <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 800c528:	6879      	ldr	r1, [r7, #4]
 800c52a:	6838      	ldr	r0, [r7, #0]
 800c52c:	f7ff fa20 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b087      	sub	sp, #28
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d001      	beq.n	800c558 <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 800c554:	2300      	movs	r3, #0
 800c556:	e01d      	b.n	800c594 <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	330c      	adds	r3, #12
 800c55c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]
 800c562:	e013      	b.n	800c58c <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	4413      	add	r3, r2
 800c56c:	785b      	ldrb	r3, [r3, #1]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d009      	beq.n	800c586 <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	4413      	add	r3, r2
 800c57a:	785b      	ldrb	r3, [r3, #1]
 800c57c:	461a      	mov	r2, r3
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	4413      	add	r3, r2
 800c582:	3302      	adds	r3, #2
 800c584:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	3301      	adds	r3, #1
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d9e8      	bls.n	800c564 <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 800c592:	697b      	ldr	r3, [r7, #20]
}
 800c594:	4618      	mov	r0, r3
 800c596:	371c      	adds	r7, #28
 800c598:	46bd      	mov	sp, r7
 800c59a:	bc80      	pop	{r7}
 800c59c:	4770      	bx	lr
	...

0800c5a0 <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <ndefRtdDeviceInfoToPayloadItem+0x22>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d102      	bne.n	800c5c2 <ndefRtdDeviceInfoToPayloadItem+0x22>
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e063      	b.n	800c68e <ndefRtdDeviceInfoToPayloadItem+0xee>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	330c      	adds	r3, #12
 800c5ca:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 800c5d2:	4b31      	ldr	r3, [pc, #196]	; (800c698 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 800c5e4:	4b2c      	ldr	r3, [pc, #176]	; (800c698 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a2c      	ldr	r2, [pc, #176]	; (800c69c <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800c5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ee:	085b      	lsrs	r3, r3, #1
 800c5f0:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	4413      	add	r3, r2
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d03e      	beq.n	800c67e <ndefRtdDeviceInfoToPayloadItem+0xde>
    {
        switch (item % 3U)
 800c600:	4b25      	ldr	r3, [pc, #148]	; (800c698 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800c602:	6819      	ldr	r1, [r3, #0]
 800c604:	4b25      	ldr	r3, [pc, #148]	; (800c69c <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 800c606:	fba3 2301 	umull	r2, r3, r3, r1
 800c60a:	085b      	lsrs	r3, r3, #1
 800c60c:	461a      	mov	r2, r3
 800c60e:	0052      	lsls	r2, r2, #1
 800c610:	441a      	add	r2, r3
 800c612:	1a8b      	subs	r3, r1, r2
 800c614:	2b02      	cmp	r3, #2
 800c616:	d01b      	beq.n	800c650 <ndefRtdDeviceInfoToPayloadItem+0xb0>
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d829      	bhi.n	800c670 <ndefRtdDeviceInfoToPayloadItem+0xd0>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <ndefRtdDeviceInfoToPayloadItem+0x86>
 800c620:	2b01      	cmp	r3, #1
 800c622:	d00a      	beq.n	800c63a <ndefRtdDeviceInfoToPayloadItem+0x9a>
 800c624:	e024      	b.n	800c670 <ndefRtdDeviceInfoToPayloadItem+0xd0>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	441a      	add	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2201      	movs	r2, #1
 800c636:	605a      	str	r2, [r3, #4]
            break;
 800c638:	e022      	b.n	800c680 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	4413      	add	r3, r2
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2201      	movs	r2, #1
 800c64c:	605a      	str	r2, [r3, #4]
            break;
 800c64e:	e017      	b.n	800c680 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	4413      	add	r3, r2
 800c658:	685a      	ldr	r2, [r3, #4]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	4413      	add	r3, r2
 800c666:	785b      	ldrb	r3, [r3, #1]
 800c668:	461a      	mov	r2, r3
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	605a      	str	r2, [r3, #4]
            break;
 800c66e:	e007      	b.n	800c680 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        default:
            bufItem->buffer = NULL;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	605a      	str	r2, [r3, #4]
            break;
 800c67c:	e000      	b.n	800c680 <ndefRtdDeviceInfoToPayloadItem+0xe0>
        }
    }
 800c67e:	bf00      	nop

    /* Move to next item for next call */
    item++;
 800c680:	4b05      	ldr	r3, [pc, #20]	; (800c698 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	4a04      	ldr	r2, [pc, #16]	; (800c698 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 800c688:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	681b      	ldr	r3, [r3, #0]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	371c      	adds	r7, #28
 800c692:	46bd      	mov	sp, r7
 800c694:	bc80      	pop	{r7}
 800c696:	4770      	bx	lr
 800c698:	200034cc 	.word	0x200034cc
 800c69c:	aaaaaaab 	.word	0xaaaaaaab

0800c6a0 <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d006      	beq.n	800c6be <ndefGetRtdDeviceInfo+0x1e>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d102      	bne.n	800c6be <ndefGetRtdDeviceInfo+0x1e>
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 800c6be:	2307      	movs	r3, #7
 800c6c0:	e029      	b.n	800c716 <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e01f      	b.n	800c70e <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	4413      	add	r3, r2
 800c6e6:	7859      	ldrb	r1, [r3, #1]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	4413      	add	r3, r2
 800c6f0:	460a      	mov	r2, r1
 800c6f2:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3301      	adds	r3, #1
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b04      	cmp	r3, #4
 800c712:	d9dc      	bls.n	800c6ce <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bc80      	pop	{r7}
 800c71e:	4770      	bx	lr

0800c720 <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 800c720:	b480      	push	{r7}
 800c722:	b089      	sub	sp, #36	; 0x24
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <ndefPayloadToRtdDeviceInfo+0x26>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d006      	beq.n	800c746 <ndefPayloadToRtdDeviceInfo+0x26>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <ndefPayloadToRtdDeviceInfo+0x26>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d101      	bne.n	800c74a <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 800c746:	2307      	movs	r3, #7
 800c748:	e09d      	b.n	800c886 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	2201      	movs	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	4a4f      	ldr	r2, [pc, #316]	; (800c890 <ndefPayloadToRtdDeviceInfo+0x170>)
 800c754:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	4a4e      	ldr	r2, [pc, #312]	; (800c894 <ndefPayloadToRtdDeviceInfo+0x174>)
 800c75a:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	330c      	adds	r3, #12
 800c760:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b05      	cmp	r3, #5
 800c768:	d905      	bls.n	800c776 <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 800c76e:	f240 4216 	movw	r2, #1046	; 0x416
 800c772:	4293      	cmp	r3, r2
 800c774:	d901      	bls.n	800c77a <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 800c776:	230b      	movs	r3, #11
 800c778:	e085      	b.n	800c886 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c77a:	2300      	movs	r3, #0
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	e013      	b.n	800c7a8 <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	69fa      	ldr	r2, [r7, #28]
 800c784:	2100      	movs	r1, #0
 800c786:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	4413      	add	r3, r2
 800c792:	2200      	movs	r2, #0
 800c794:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	4413      	add	r3, r2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	61fb      	str	r3, [r7, #28]
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	2b04      	cmp	r3, #4
 800c7ac:	d9e8      	bls.n	800c780 <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61bb      	str	r3, [r7, #24]
    count = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800c7be:	e044      	b.n	800c84a <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d104      	bne.n	800c7ea <ndefPayloadToRtdDeviceInfo+0xca>
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	2b10      	cmp	r3, #16
 800c7e4:	d001      	beq.n	800c7ea <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 800c7e6:	230b      	movs	r3, #11
 800c7e8:	e04d      	b.n	800c886 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	2b05      	cmp	r3, #5
 800c7ee:	d802      	bhi.n	800c7f6 <ndefPayloadToRtdDeviceInfo+0xd6>
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 800c7f6:	230b      	movs	r3, #11
 800c7f8:	e045      	b.n	800c886 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	75bb      	strb	r3, [r7, #22]
 800c804:	e004      	b.n	800c810 <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d101      	bne.n	800c810 <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 800c810:	7dfa      	ldrb	r2, [r7, #23]
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	7bf9      	ldrb	r1, [r7, #15]
 800c816:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 800c81a:	7dfb      	ldrb	r3, [r7, #23]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4413      	add	r3, r2
 800c822:	7bba      	ldrb	r2, [r7, #14]
 800c824:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	1c9a      	adds	r2, r3, #2
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	440a      	add	r2, r1
 800c832:	6939      	ldr	r1, [r7, #16]
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	440b      	add	r3, r1
 800c838:	605a      	str	r2, [r3, #4]
        count++;
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	3301      	adds	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 800c840:	7bba      	ldrb	r2, [r7, #14]
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	4413      	add	r3, r2
 800c846:	3302      	adds	r3, #2
 800c848:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	1c9a      	adds	r2, r3, #2
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	d202      	bcs.n	800c85c <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d9b1      	bls.n	800c7c0 <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800c85c:	7dba      	ldrb	r2, [r7, #22]
 800c85e:	7d7b      	ldrb	r3, [r7, #21]
 800c860:	429a      	cmp	r2, r3
 800c862:	d00f      	beq.n	800c884 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800c864:	7dbb      	ldrb	r3, [r7, #22]
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	4413      	add	r3, r2
 800c86c:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d008      	beq.n	800c884 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 800c872:	7d7b      	ldrb	r3, [r7, #21]
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	4413      	add	r3, r2
 800c87a:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 800c880:	2300      	movs	r3, #0
 800c882:	e000      	b.n	800c886 <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 800c884:	2307      	movs	r3, #7
    }
}
 800c886:	4618      	mov	r0, r3
 800c888:	3724      	adds	r7, #36	; 0x24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bc80      	pop	{r7}
 800c88e:	4770      	bx	lr
 800c890:	0800c53b 	.word	0x0800c53b
 800c894:	0800c5a1 	.word	0x0800c5a1

0800c898 <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <ndefRecordToRtdDeviceInfo+0x16>
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 800c8ae:	2307      	movs	r3, #7
 800c8b0:	e028      	b.n	800c904 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 800c8b2:	4a16      	ldr	r2, [pc, #88]	; (800c90c <ndefRecordToRtdDeviceInfo+0x74>)
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7fe f986 	bl	800abc8 <ndefRecordTypeMatch>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f083 0301 	eor.w	r3, r3, #1
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 800c8c8:	230b      	movs	r3, #11
 800c8ca:	e01b      	b.n	800c904 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7ff f887 	bl	800b9e0 <ndefRecordGetNdefType>
 800c8d2:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d007      	beq.n	800c8ea <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 800c8da:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800c8de:	68f9      	ldr	r1, [r7, #12]
 800c8e0:	6838      	ldr	r0, [r7, #0]
 800c8e2:	f010 fe21 	bl	801d528 <memcpy>
        return ERR_NONE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e00c      	b.n	800c904 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	d801      	bhi.n	800c8f6 <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 800c8f2:	230b      	movs	r3, #11
 800c8f4:	e006      	b.n	800c904 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	330c      	adds	r3, #12
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff ff0f 	bl	800c720 <ndefPayloadToRtdDeviceInfo>
 800c902:	4603      	mov	r3, r0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	08021848 	.word	0x08021848

0800c910 <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d006      	beq.n	800c92e <ndefRtdDeviceInfoToRecord+0x1e>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d102      	bne.n	800c92e <ndefRtdDeviceInfoToRecord+0x1e>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 800c92e:	2307      	movs	r3, #7
 800c930:	e00c      	b.n	800c94c <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800c932:	6838      	ldr	r0, [r7, #0]
 800c934:	f7fe f872 	bl	800aa1c <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 800c938:	4a06      	ldr	r2, [pc, #24]	; (800c954 <ndefRtdDeviceInfoToRecord+0x44>)
 800c93a:	2101      	movs	r1, #1
 800c93c:	6838      	ldr	r0, [r7, #0]
 800c93e:	f7fe f8ee 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	6838      	ldr	r0, [r7, #0]
 800c946:	f7ff f813 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	08021848 	.word	0x08021848

0800c958 <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <ndefRtdTextPayloadGetLength+0x16>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d001      	beq.n	800c972 <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	e009      	b.n	800c986 <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	330c      	adds	r3, #12
 800c976:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7a1b      	ldrb	r3, [r3, #8]
 800c97c:	461a      	mov	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	4413      	add	r3, r2
 800c984:	3301      	adds	r3, #1
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bc80      	pop	{r7}
 800c98e:	4770      	bx	lr

0800c990 <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d006      	beq.n	800c9b2 <ndefRtdTextToPayloadItem+0x22>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d102      	bne.n	800c9b2 <ndefRtdTextToPayloadItem+0x22>
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e03b      	b.n	800ca2e <ndefRtdTextToPayloadItem+0x9e>
    }

    rtdText = &text->data.text;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	330c      	adds	r3, #12
 800c9ba:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ca38 <ndefRtdTextToPayloadItem+0xa8>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800c9c8:	4b1b      	ldr	r3, [pc, #108]	; (800ca38 <ndefRtdTextToPayloadItem+0xa8>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d017      	beq.n	800ca00 <ndefRtdTextToPayloadItem+0x70>
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d81e      	bhi.n	800ca12 <ndefRtdTextToPayloadItem+0x82>
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <ndefRtdTextToPayloadItem+0x4e>
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d007      	beq.n	800c9ec <ndefRtdTextToPayloadItem+0x5c>
 800c9dc:	e019      	b.n	800ca12 <ndefRtdTextToPayloadItem+0x82>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	605a      	str	r2, [r3, #4]
        break;
 800c9ea:	e019      	b.n	800ca20 <ndefRtdTextToPayloadItem+0x90>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	7a1b      	ldrb	r3, [r3, #8]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	605a      	str	r2, [r3, #4]
        break;
 800c9fe:	e00f      	b.n	800ca20 <ndefRtdTextToPayloadItem+0x90>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	691a      	ldr	r2, [r3, #16]
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	605a      	str	r2, [r3, #4]
        break;
 800ca10:	e006      	b.n	800ca20 <ndefRtdTextToPayloadItem+0x90>

    default:
        bufItem->buffer = NULL;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	605a      	str	r2, [r3, #4]
        break;
 800ca1e:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800ca20:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <ndefRtdTextToPayloadItem+0xa8>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3301      	adds	r3, #1
 800ca26:	4a04      	ldr	r2, [pc, #16]	; (800ca38 <ndefRtdTextToPayloadItem+0xa8>)
 800ca28:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	681b      	ldr	r3, [r3, #0]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bc80      	pop	{r7}
 800ca36:	4770      	bx	lr
 800ca38:	200034d0 	.word	0x200034d0

0800ca3c <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d015      	beq.n	800ca7e <ndefRtdText+0x42>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d012      	beq.n	800ca7e <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00e      	beq.n	800ca7e <ndefRtdText+0x42>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	791b      	ldrb	r3, [r3, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00a      	beq.n	800ca7e <ndefRtdText+0x42>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d007      	beq.n	800ca7e <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d003      	beq.n	800ca7e <ndefRtdText+0x42>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 800ca7e:	2307      	movs	r3, #7
 800ca80:	e036      	b.n	800caf0 <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	791b      	ldrb	r3, [r3, #4]
 800ca86:	2b3f      	cmp	r3, #63	; 0x3f
 800ca88:	d901      	bls.n	800ca8e <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 800ca8a:	230b      	movs	r3, #11
 800ca8c:	e030      	b.n	800caf0 <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 800ca8e:	7afb      	ldrb	r3, [r7, #11]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d004      	beq.n	800ca9e <ndefRtdText+0x62>
 800ca94:	7afb      	ldrb	r3, [r7, #11]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d001      	beq.n	800ca9e <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 800ca9a:	2307      	movs	r3, #7
 800ca9c:	e028      	b.n	800caf0 <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2202      	movs	r2, #2
 800caa2:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4a15      	ldr	r2, [pc, #84]	; (800cafc <ndefRtdText+0xc0>)
 800caa8:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	4a14      	ldr	r2, [pc, #80]	; (800cb00 <ndefRtdText+0xc4>)
 800caae:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	330c      	adds	r3, #12
 800cab4:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800cab6:	7afb      	ldrb	r3, [r7, #11]
 800cab8:	01db      	lsls	r3, r3, #7
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	791b      	ldrb	r3, [r3, #4]
 800cac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	4313      	orrs	r3, r2
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	791a      	ldrb	r2, [r3, #4]
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bc80      	pop	{r7}
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	0800c959 	.word	0x0800c959
 800cb00:	0800c991 	.word	0x0800c991

0800cb04 <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00c      	beq.n	800cb32 <ndefGetRtdText+0x2e>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d108      	bne.n	800cb32 <ndefGetRtdText+0x2e>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <ndefGetRtdText+0x2e>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 800cb32:	2307      	movs	r3, #7
 800cb34:	e019      	b.n	800cb6a <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	330c      	adds	r3, #12
 800cb3a:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	09db      	lsrs	r3, r3, #7
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	7a1a      	ldrb	r2, [r3, #8]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	68da      	ldr	r2, [r3, #12]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	691a      	ldr	r2, [r3, #16]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bc80      	pop	{r7}
 800cb72:	4770      	bx	lr

0800cb74 <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00a      	beq.n	800cb9a <ndefPayloadToRtdText+0x26>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <ndefPayloadToRtdText+0x26>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <ndefPayloadToRtdText+0x26>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 800cb9a:	2307      	movs	r3, #7
 800cb9c:	e02d      	b.n	800cbfa <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2202      	movs	r2, #2
 800cba2:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	4a17      	ldr	r2, [pc, #92]	; (800cc04 <ndefPayloadToRtdText+0x90>)
 800cba8:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	4a16      	ldr	r2, [pc, #88]	; (800cc08 <ndefPayloadToRtdText+0x94>)
 800cbae:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	330c      	adds	r3, #12
 800cbb4:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	7afa      	ldrb	r2, [r7, #11]
 800cbc2:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbca:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	7aba      	ldrb	r2, [r7, #10]
 800cbda:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	7abb      	ldrb	r3, [r7, #10]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	441a      	add	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	7abb      	ldrb	r3, [r7, #10]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	1e5a      	subs	r2, r3, #1
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bc80      	pop	{r7}
 800cc02:	4770      	bx	lr
 800cc04:	0800c959 	.word	0x0800c959
 800cc08:	0800c991 	.word	0x0800c991

0800cc0c <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <ndefRecordToRtdText+0x16>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 800cc22:	2307      	movs	r3, #7
 800cc24:	e028      	b.n	800cc78 <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 800cc26:	4a16      	ldr	r2, [pc, #88]	; (800cc80 <ndefRecordToRtdText+0x74>)
 800cc28:	2101      	movs	r1, #1
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fd ffcc 	bl	800abc8 <ndefRecordTypeMatch>
 800cc30:	4603      	mov	r3, r0
 800cc32:	f083 0301 	eor.w	r3, r3, #1
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 800cc3c:	230b      	movs	r3, #11
 800cc3e:	e01b      	b.n	800cc78 <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7fe fecd 	bl	800b9e0 <ndefRecordGetNdefType>
 800cc46:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d007      	beq.n	800cc5e <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 800cc4e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	6838      	ldr	r0, [r7, #0]
 800cc56:	f010 fc67 	bl	801d528 <memcpy>
        return ERR_NONE;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e00c      	b.n	800cc78 <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d801      	bhi.n	800cc6a <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 800cc66:	230b      	movs	r3, #11
 800cc68:	e006      	b.n	800cc78 <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	330c      	adds	r3, #12
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff ff7f 	bl	800cb74 <ndefPayloadToRtdText>
 800cc76:	4603      	mov	r3, r0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	08021850 	.word	0x08021850

0800cc84 <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <ndefRtdTextToRecord+0x1e>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d102      	bne.n	800cca2 <ndefRtdTextToRecord+0x1e>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800cca2:	2307      	movs	r3, #7
 800cca4:	e00c      	b.n	800ccc0 <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800cca6:	6838      	ldr	r0, [r7, #0]
 800cca8:	f7fd feb8 	bl	800aa1c <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 800ccac:	4a06      	ldr	r2, [pc, #24]	; (800ccc8 <ndefRtdTextToRecord+0x44>)
 800ccae:	2101      	movs	r1, #1
 800ccb0:	6838      	ldr	r0, [r7, #0]
 800ccb2:	f7fd ff34 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	6838      	ldr	r0, [r7, #0]
 800ccba:	f7fe fe59 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	08021850 	.word	0x08021850

0800cccc <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <ndefRtdUriPayloadGetLength+0x16>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d001      	beq.n	800cce6 <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e005      	b.n	800ccf2 <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	330c      	adds	r3, #12
 800ccea:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	3301      	adds	r3, #1
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr

0800ccfc <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d006      	beq.n	800cd1e <ndefRtdUriToPayloadItem+0x22>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d102      	bne.n	800cd1e <ndefRtdUriToPayloadItem+0x22>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e02d      	b.n	800cd7e <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	330c      	adds	r3, #12
 800cd26:	617b      	str	r3, [r7, #20]

    if (begin == true)
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 800cd2e:	4b16      	ldr	r3, [pc, #88]	; (800cd88 <ndefRtdUriToPayloadItem+0x8c>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 800cd34:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <ndefRtdUriToPayloadItem+0x8c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <ndefRtdUriToPayloadItem+0x46>
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d007      	beq.n	800cd50 <ndefRtdUriToPayloadItem+0x54>
 800cd40:	e00f      	b.n	800cd62 <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	605a      	str	r2, [r3, #4]
        break;
 800cd4e:	e00f      	b.n	800cd70 <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	689a      	ldr	r2, [r3, #8]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	605a      	str	r2, [r3, #4]
        break;
 800cd60:	e006      	b.n	800cd70 <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2200      	movs	r2, #0
 800cd66:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	605a      	str	r2, [r3, #4]
        break;
 800cd6e:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <ndefRtdUriToPayloadItem+0x8c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	4a04      	ldr	r2, [pc, #16]	; (800cd88 <ndefRtdUriToPayloadItem+0x8c>)
 800cd78:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	681b      	ldr	r3, [r3, #0]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bc80      	pop	{r7}
 800cd86:	4770      	bx	lr
 800cd88:	200034d4 	.word	0x200034d4

0800cd8c <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 800cda0:	2b24      	cmp	r3, #36	; 0x24
 800cda2:	d102      	bne.n	800cdaa <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 800cdaa:	2307      	movs	r3, #7
 800cdac:	e03d      	b.n	800ce2a <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
 800cdb2:	e033      	b.n	800ce1c <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <ndefRtdUriProtocolAutodetect+0xa8>)
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	4413      	add	r3, r2
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d029      	beq.n	800ce16 <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	7bfb      	ldrb	r3, [r7, #15]
 800cdc8:	4a1a      	ldr	r2, [pc, #104]	; (800ce34 <ndefRtdUriProtocolAutodetect+0xa8>)
 800cdca:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	4a18      	ldr	r2, [pc, #96]	; (800ce34 <ndefRtdUriProtocolAutodetect+0xa8>)
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	f010 fb95 	bl	801d508 <memcmp>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d118      	bne.n	800ce16 <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7bfa      	ldrb	r2, [r7, #15]
 800cde8:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	4910      	ldr	r1, [pc, #64]	; (800ce34 <ndefRtdUriProtocolAutodetect+0xa8>)
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	490b      	ldr	r1, [pc, #44]	; (800ce34 <ndefRtdUriProtocolAutodetect+0xa8>)
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	440b      	add	r3, r1
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	1ad2      	subs	r2, r2, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e009      	b.n	800ce2a <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	73fb      	strb	r3, [r7, #15]
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	2b24      	cmp	r3, #36	; 0x24
 800ce20:	d9c8      	bls.n	800cdb4 <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 800ce28:	2316      	movs	r3, #22
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	080219e8 	.word	0x080219e8

0800ce38 <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	460b      	mov	r3, r1
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00d      	beq.n	800ce68 <ndefRtdUri+0x30>
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	2b24      	cmp	r3, #36	; 0x24
 800ce50:	d80a      	bhi.n	800ce68 <ndefRtdUri+0x30>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <ndefRtdUri+0x30>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 800ce68:	2307      	movs	r3, #7
 800ce6a:	e028      	b.n	800cebe <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2203      	movs	r2, #3
 800ce70:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	4a14      	ldr	r2, [pc, #80]	; (800cec8 <ndefRtdUri+0x90>)
 800ce76:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4a14      	ldr	r2, [pc, #80]	; (800cecc <ndefRtdUri+0x94>)
 800ce7c:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	330c      	adds	r3, #12
 800ce82:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 800ce90:	7afb      	ldrb	r3, [r7, #11]
 800ce92:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	2b24      	cmp	r3, #36	; 0x24
 800ce98:	d107      	bne.n	800ceaa <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 800ce9a:	f107 0214 	add.w	r2, r7, #20
 800ce9e:	f107 0313 	add.w	r3, r7, #19
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff ff71 	bl	800cd8c <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 800ceaa:	7cfa      	ldrb	r2, [r7, #19]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 800ceb6:	69ba      	ldr	r2, [r7, #24]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3720      	adds	r7, #32
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	0800cccd 	.word	0x0800cccd
 800cecc:	0800ccfd 	.word	0x0800ccfd

0800ced0 <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d009      	beq.n	800cef6 <ndefGetRtdUri+0x26>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d105      	bne.n	800cef6 <ndefGetRtdUri+0x26>
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 800cef6:	2307      	movs	r3, #7
 800cef8:	e01b      	b.n	800cf32 <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	330c      	adds	r3, #12
 800cefe:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	461a      	mov	r2, r3
 800cf06:	4b0d      	ldr	r3, [pc, #52]	; (800cf3c <ndefGetRtdUri+0x6c>)
 800cf08:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	4a09      	ldr	r2, [pc, #36]	; (800cf3c <ndefGetRtdUri+0x6c>)
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	4413      	add	r3, r2
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	371c      	adds	r7, #28
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bc80      	pop	{r7}
 800cf3a:	4770      	bx	lr
 800cf3c:	080219e8 	.word	0x080219e8

0800cf40 <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <ndefPayloadToRtdUri+0x26>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <ndefPayloadToRtdUri+0x26>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <ndefPayloadToRtdUri+0x26>
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 800cf66:	2307      	movs	r3, #7
 800cf68:	e013      	b.n	800cf92 <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 800cf82:	f107 020c 	add.w	r2, r7, #12
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6838      	ldr	r0, [r7, #0]
 800cf8c:	f7ff ff54 	bl	800ce38 <ndefRtdUri>
 800cf90:	4603      	mov	r3, r0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3718      	adds	r7, #24
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <ndefRecordToRtdUri+0x16>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 800cfb2:	2307      	movs	r3, #7
 800cfb4:	e028      	b.n	800d008 <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 800cfb6:	4a16      	ldr	r2, [pc, #88]	; (800d010 <ndefRecordToRtdUri+0x74>)
 800cfb8:	2101      	movs	r1, #1
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fd fe04 	bl	800abc8 <ndefRecordTypeMatch>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	f083 0301 	eor.w	r3, r3, #1
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 800cfcc:	230b      	movs	r3, #11
 800cfce:	e01b      	b.n	800d008 <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7fe fd05 	bl	800b9e0 <ndefRecordGetNdefType>
 800cfd6:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d007      	beq.n	800cfee <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 800cfde:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cfe2:	68f9      	ldr	r1, [r7, #12]
 800cfe4:	6838      	ldr	r0, [r7, #0]
 800cfe6:	f010 fa9f 	bl	801d528 <memcpy>
        return ERR_NONE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e00c      	b.n	800d008 <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d801      	bhi.n	800cffa <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 800cff6:	230b      	movs	r3, #11
 800cff8:	e006      	b.n	800d008 <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	330c      	adds	r3, #12
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff ff9d 	bl	800cf40 <ndefPayloadToRtdUri>
 800d006:	4603      	mov	r3, r0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	08021858 	.word	0x08021858

0800d014 <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d006      	beq.n	800d032 <ndefRtdUriToRecord+0x1e>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b03      	cmp	r3, #3
 800d02a:	d102      	bne.n	800d032 <ndefRtdUriToRecord+0x1e>
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800d032:	2307      	movs	r3, #7
 800d034:	e00c      	b.n	800d050 <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	f7fd fcf0 	bl	800aa1c <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 800d03c:	4a06      	ldr	r2, [pc, #24]	; (800d058 <ndefRtdUriToRecord+0x44>)
 800d03e:	2101      	movs	r1, #1
 800d040:	6838      	ldr	r0, [r7, #0]
 800d042:	f7fd fd6c 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	6838      	ldr	r0, [r7, #0]
 800d04a:	f7fe fc91 	bl	800b970 <ndefRecordSetNdefType>

    return ERR_NONE;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08021858 	.word	0x08021858

0800d05c <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <ndefRtdAar+0x26>
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d007      	beq.n	800d082 <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <ndefRtdAar+0x26>
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 800d082:	2307      	movs	r3, #7
 800d084:	e01a      	b.n	800d0bc <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2204      	movs	r2, #4
 800d08a:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	330c      	adds	r3, #12
 800d09c:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 800d09e:	4a0a      	ldr	r2, [pc, #40]	; (800d0c8 <ndefRtdAar+0x6c>)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 800d0a4:	220f      	movs	r2, #15
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3714      	adds	r7, #20
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bc80      	pop	{r7}
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	08021838 	.word	0x08021838

0800d0cc <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d006      	beq.n	800d0ea <ndefGetRtdAar+0x1e>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b04      	cmp	r3, #4
 800d0e2:	d102      	bne.n	800d0ea <ndefGetRtdAar+0x1e>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 800d0ea:	2307      	movs	r3, #7
 800d0ec:	e00b      	b.n	800d106 <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	330c      	adds	r3, #12
 800d0f2:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	689a      	ldr	r2, [r3, #8]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68da      	ldr	r2, [r3, #12]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bc80      	pop	{r7}
 800d10e:	4770      	bx	lr

0800d110 <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <ndefRecordToRtdAar+0x16>
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 800d126:	2307      	movs	r3, #7
 800d128:	e013      	b.n	800d152 <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 800d12a:	4a0c      	ldr	r2, [pc, #48]	; (800d15c <ndefRecordToRtdAar+0x4c>)
 800d12c:	2104      	movs	r1, #4
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7fd fd4a 	bl	800abc8 <ndefRecordTypeMatch>
 800d134:	4603      	mov	r3, r0
 800d136:	f083 0301 	eor.w	r3, r3, #1
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 800d140:	230b      	movs	r3, #11
 800d142:	e006      	b.n	800d152 <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	330c      	adds	r3, #12
 800d148:	4619      	mov	r1, r3
 800d14a:	6838      	ldr	r0, [r7, #0]
 800d14c:	f7ff ff86 	bl	800d05c <ndefRtdAar>
 800d150:	4603      	mov	r3, r0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	08021860 	.word	0x08021860

0800d160 <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d006      	beq.n	800d17e <ndefRtdAarToRecord+0x1e>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b04      	cmp	r3, #4
 800d176:	d102      	bne.n	800d17e <ndefRtdAarToRecord+0x1e>
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800d17e:	2307      	movs	r3, #7
 800d180:	e011      	b.n	800d1a6 <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	330c      	adds	r3, #12
 800d186:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 800d188:	6838      	ldr	r0, [r7, #0]
 800d18a:	f7fd fc47 	bl	800aa1c <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 800d18e:	4a08      	ldr	r2, [pc, #32]	; (800d1b0 <ndefRtdAarToRecord+0x50>)
 800d190:	2104      	movs	r1, #4
 800d192:	6838      	ldr	r0, [r7, #0]
 800d194:	f7fd fcc3 	bl	800ab1e <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3308      	adds	r3, #8
 800d19c:	4619      	mov	r1, r3
 800d19e:	6838      	ldr	r0, [r7, #0]
 800d1a0:	f7fd fd92 	bl	800acc8 <ndefRecordSetPayload>

    return ERR_NONE;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	08021860 	.word	0x08021860

0800d1b4 <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <ndefPollerContextInitialization+0x16>
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 800d1ca:	2307      	movs	r3, #7
 800d1cc:	e019      	b.n	800d202 <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 800d1ce:	6838      	ldr	r0, [r7, #0]
 800d1d0:	f000 fa02 	bl	800d5d8 <ndefPollerGetDeviceType>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4b0c      	ldr	r3, [pc, #48]	; (800d20c <ndefPollerContextInitialization+0x58>)
 800d1da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 800d1ee:	2318      	movs	r3, #24
 800d1f0:	e007      	b.n	800d202 <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	4798      	blx	r3
 800d200:	4603      	mov	r3, r0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	20000110 	.word	0x20000110

0800d210 <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 800d220:	2307      	movs	r3, #7
 800d222:	e00e      	b.n	800d242 <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 800d22e:	2321      	movs	r3, #33	; 0x21
 800d230:	e007      	b.n	800d242 <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800d24a:	b590      	push	{r4, r7, lr}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 800d25e:	2307      	movs	r3, #7
 800d260:	e010      	b.n	800d284 <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 800d26c:	2321      	movs	r3, #33	; 0x21
 800d26e:	e009      	b.n	800d284 <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d276:	68dc      	ldr	r4, [r3, #12]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	47a0      	blx	r4
 800d282:	4603      	mov	r3, r0
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}

0800d28c <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 800d29e:	2307      	movs	r3, #7
 800d2a0:	e00f      	b.n	800d2c2 <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d101      	bne.n	800d2b0 <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 800d2ac:	2321      	movs	r3, #33	; 0x21
 800d2ae:	e008      	b.n	800d2c2 <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2b6:	695b      	ldr	r3, [r3, #20]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	4798      	blx	r3
 800d2c0:	4603      	mov	r3, r0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 800d2dc:	2307      	movs	r3, #7
 800d2de:	e00f      	b.n	800d300 <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 800d2ea:	2321      	movs	r3, #33	; 0x21
 800d2ec:	e008      	b.n	800d300 <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	4798      	blx	r3
 800d2fe:	4603      	mov	r3, r0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800d308:	b590      	push	{r4, r7, lr}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 800d31c:	2307      	movs	r3, #7
 800d31e:	e010      	b.n	800d342 <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 800d32a:	2321      	movs	r3, #33	; 0x21
 800d32c:	e009      	b.n	800d342 <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d334:	691c      	ldr	r4, [r3, #16]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	68b9      	ldr	r1, [r7, #8]
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	47a0      	blx	r4
 800d340:	4603      	mov	r3, r0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3714      	adds	r7, #20
 800d346:	46bd      	mov	sp, r7
 800d348:	bd90      	pop	{r4, r7, pc}

0800d34a <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 800d35a:	2307      	movs	r3, #7
 800d35c:	e00e      	b.n	800d37c <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 800d368:	2321      	movs	r3, #33	; 0x21
 800d36a:	e007      	b.n	800d37c <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	4798      	blx	r3
 800d37a:	4603      	mov	r3, r0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d101      	bne.n	800d398 <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 800d394:	2307      	movs	r3, #7
 800d396:	e00e      	b.n	800d3b6 <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800d3a2:	2321      	movs	r3, #33	; 0x21
 800d3a4:	e007      	b.n	800d3b6 <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
 800d3b4:	4603      	mov	r3, r0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b082      	sub	sp, #8
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 800d3ce:	2307      	movs	r3, #7
 800d3d0:	e00e      	b.n	800d3f0 <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 800d3dc:	2321      	movs	r3, #33	; 0x21
 800d3de:	e007      	b.n	800d3f0 <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
 800d3ee:	4603      	mov	r3, r0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08e      	sub	sp, #56	; 0x38
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <ndefPollerWriteMessage+0x16>
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 800d40e:	2307      	movs	r3, #7
 800d410:	e0de      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d006      	beq.n	800d42a <ndefPollerWriteMessage+0x32>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d422:	2b02      	cmp	r3, #2
 800d424:	d001      	beq.n	800d42a <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800d426:	2321      	movs	r3, #33	; 0x21
 800d428:	e0d2      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 800d42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d42e:	4619      	mov	r1, r3
 800d430:	6838      	ldr	r0, [r7, #0]
 800d432:	f7fd f9af 	bl	800a794 <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff ff85 	bl	800d34a <ndefPollerCheckAvailableSpace>
 800d440:	4603      	mov	r3, r0
 800d442:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800d444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800d44a:	2307      	movs	r3, #7
 800d44c:	e0c0      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff ff96 	bl	800d384 <ndefPollerBeginWriteMessage>
 800d458:	4603      	mov	r3, r0
 800d45a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 800d45c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d005      	beq.n	800d46e <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 800d46a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d46c:	e0b0      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 80ac 	beq.w	800d5ce <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d47c:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <ndefPollerWriteMessage+0x92>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	e000      	b.n	800d48c <ndefPollerWriteMessage+0x94>
 800d48a:	2300      	movs	r3, #0
 800d48c:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 800d48e:	e08a      	b.n	800d5a6 <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 800d490:	f107 031c 	add.w	r3, r7, #28
 800d494:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 800d496:	2307      	movs	r3, #7
 800d498:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 800d49a:	f107 0314 	add.w	r3, r7, #20
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4a2:	f7fd fd61 	bl	800af68 <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff ff2b 	bl	800d308 <ndefPollerWriteBytes>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 800d4b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <ndefPollerWriteMessage+0xc8>
            {
                return err;
 800d4bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4be:	e087      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c4:	4413      	add	r3, r2
 800d4c6:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ca:	785b      	ldrb	r3, [r3, #1]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d018      	beq.n	800d502 <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff ff14 	bl	800d308 <ndefPollerWriteBytes>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800d4e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d005      	beq.n	800d4f6 <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800d4f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4f4:	e06c      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 800d4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	4413      	add	r3, r2
 800d500:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 800d502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d018      	beq.n	800d53c <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 800d50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50c:	689a      	ldr	r2, [r3, #8]
 800d50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d510:	789b      	ldrb	r3, [r3, #2]
 800d512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff fef7 	bl	800d308 <ndefPollerWriteBytes>
 800d51a:	4603      	mov	r3, r0
 800d51c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 800d51e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 800d52c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d52e:	e04f      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 800d530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d532:	789b      	ldrb	r3, [r3, #2]
 800d534:	461a      	mov	r2, r3
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	4413      	add	r3, r2
 800d53a:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 800d53c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d53e:	f7fd fe5a 	bl	800b1f6 <ndefRecordGetPayloadLength>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d026      	beq.n	800d596 <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 800d548:	2301      	movs	r3, #1
 800d54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800d54e:	e017      	b.n	800d580 <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 800d550:	2300      	movs	r3, #0
 800d552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff fed3 	bl	800d308 <ndefPollerWriteBytes>
 800d562:	4603      	mov	r3, r0
 800d564:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 800d566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 800d574:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d576:	e02b      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d57c:	4413      	add	r3, r2
 800d57e:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 800d580:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d584:	f107 030c 	add.w	r3, r7, #12
 800d588:	4619      	mov	r1, r3
 800d58a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d58c:	f7fd fe56 	bl	800b23c <ndefRecordGetPayloadItem>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1dc      	bne.n	800d550 <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 800d596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <ndefPollerWriteMessage+0x1aa>
 800d59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	e000      	b.n	800d5a4 <ndefPollerWriteMessage+0x1ac>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f47f af71 	bne.w	800d490 <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff ff03 	bl	800d3be <ndefPollerEndWriteMessage>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 800d5bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 800d5ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5cc:	e000      	b.n	800d5d0 <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3738      	adds	r7, #56	; 0x38
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d102      	bne.n	800d5ec <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]
 800d5ea:	e032      	b.n	800d652 <ndefPollerGetDeviceType+0x7a>
    }
    else
    {
        switch( dev->type )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	d82b      	bhi.n	800d64c <ndefPollerGetDeviceType+0x74>
 800d5f4:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <ndefPollerGetDeviceType+0x24>)
 800d5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fa:	bf00      	nop
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d63b 	.word	0x0800d63b
 800d604:	0800d641 	.word	0x0800d641
 800d608:	0800d647 	.word	0x0800d647
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	785b      	ldrb	r3, [r3, #1]
 800d610:	2b20      	cmp	r3, #32
 800d612:	d00b      	beq.n	800d62c <ndefPollerGetDeviceType+0x54>
 800d614:	2b20      	cmp	r3, #32
 800d616:	dc0c      	bgt.n	800d632 <ndefPollerGetDeviceType+0x5a>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d004      	beq.n	800d626 <ndefPollerGetDeviceType+0x4e>
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d108      	bne.n	800d632 <ndefPollerGetDeviceType+0x5a>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 800d620:	2301      	movs	r3, #1
 800d622:	73fb      	strb	r3, [r7, #15]
                    break; 
 800d624:	e008      	b.n	800d638 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 800d626:	2302      	movs	r3, #2
 800d628:	73fb      	strb	r3, [r7, #15]
                    break;
 800d62a:	e005      	b.n	800d638 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 800d62c:	2304      	movs	r3, #4
 800d62e:	73fb      	strb	r3, [r7, #15]
                    break;
 800d630:	e002      	b.n	800d638 <ndefPollerGetDeviceType+0x60>
                default:
                    type = NDEF_DEV_NONE;
 800d632:	2300      	movs	r3, #0
 800d634:	73fb      	strb	r3, [r7, #15]
                    break;
 800d636:	bf00      	nop
            }
            break;
 800d638:	e00b      	b.n	800d652 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 800d63a:	2304      	movs	r3, #4
 800d63c:	73fb      	strb	r3, [r7, #15]
            break;
 800d63e:	e008      	b.n	800d652 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 800d640:	2303      	movs	r3, #3
 800d642:	73fb      	strb	r3, [r7, #15]
            break;
 800d644:	e005      	b.n	800d652 <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 800d646:	2305      	movs	r3, #5
 800d648:	73fb      	strb	r3, [r7, #15]
            break;
 800d64a:	e002      	b.n	800d652 <ndefPollerGetDeviceType+0x7a>
        default:
            type = NDEF_DEV_NONE;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
            break;
 800d650:	bf00      	nop
        }
    }
    return type;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	bc80      	pop	{r7}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop

0800d660 <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	460b      	mov	r3, r1
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <ndefT2TPollerReadBlock+0x2a>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d106      	bne.n	800d68a <ndefT2TPollerReadBlock+0x2a>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <ndefT2TPollerReadBlock+0x2a>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 800d68a:	2307      	movs	r3, #7
 800d68c:	e02c      	b.n	800d6e8 <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800d68e:	897b      	ldrh	r3, [r7, #10]
 800d690:	0a1b      	lsrs	r3, r3, #8
 800d692:	b29b      	uxth	r3, r3
 800d694:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800d696:	897b      	ldrh	r3, [r7, #10]
 800d698:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d6a0:	7dfa      	ldrb	r2, [r7, #23]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d00e      	beq.n	800d6c4 <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f00f fbeb 	bl	801ce84 <rfalT2TPollerSectorSelect>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800d6b2:	8abb      	ldrh	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 800d6b8:	8abb      	ldrh	r3, [r7, #20]
 800d6ba:	e015      	b.n	800d6e8 <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	7dfa      	ldrb	r2, [r7, #23]
 800d6c0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 800d6c4:	f107 0312 	add.w	r3, r7, #18
 800d6c8:	7db8      	ldrb	r0, [r7, #22]
 800d6ca:	2210      	movs	r2, #16
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	f00f fb65 	bl	801cd9c <rfalT2TPollerRead>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 800d6d6:	8abb      	ldrh	r3, [r7, #20]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d104      	bne.n	800d6e6 <ndefT2TPollerReadBlock+0x86>
 800d6dc:	8a7b      	ldrh	r3, [r7, #18]
 800d6de:	2b10      	cmp	r3, #16
 800d6e0:	d001      	beq.n	800d6e6 <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 800d6e2:	230b      	movs	r3, #11
 800d6e4:	e000      	b.n	800d6e8 <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 800d6e6:	8abb      	ldrh	r3, [r7, #20]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	; 0x28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
 800d6fc:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00e      	beq.n	800d72e <ndefT2TPollerReadBytes+0x3e>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <ndefT2TPollerReadBytes+0x3e>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	785b      	ldrb	r3, [r3, #1]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d106      	bne.n	800d72e <ndefT2TPollerReadBytes+0x3e>
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <ndefT2TPollerReadBytes+0x3e>
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 800d72c:	d901      	bls.n	800d732 <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800d72e:	2307      	movs	r3, #7
 800d730:	e0a7      	b.n	800d882 <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d31e      	bcc.n	800d77c <ndefT2TPollerReadBytes+0x8c>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d744:	3310      	adds	r3, #16
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d217      	bcs.n	800d77c <ndefT2TPollerReadBytes+0x8c>
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	441a      	add	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d758:	3310      	adds	r3, #16
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d20e      	bcs.n	800d77c <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	33b0      	adds	r3, #176	; 0xb0
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	3305      	adds	r3, #5
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4619      	mov	r1, r3
 800d774:	69b8      	ldr	r0, [r7, #24]
 800d776:	f00f fed7 	bl	801d528 <memcpy>
 800d77a:	e07b      	b.n	800d874 <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	089b      	lsrs	r3, r3, #2
 800d780:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	b2db      	uxtb	r3, r3
 800d786:	f003 0303 	and.w	r3, r3, #3
 800d78a:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	2b0f      	cmp	r3, #15
 800d790:	d802      	bhi.n	800d798 <ndefT2TPollerReadBytes+0xa8>
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	e000      	b.n	800d79a <ndefT2TPollerReadBytes+0xaa>
 800d798:	2310      	movs	r3, #16
 800d79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 800d79e:	7d7b      	ldrb	r3, [r7, #21]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <ndefT2TPollerReadBytes+0xba>
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	2b0f      	cmp	r3, #15
 800d7a8:	d834      	bhi.n	800d814 <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800d7b0:	8afb      	ldrh	r3, [r7, #22]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7ff ff53 	bl	800d660 <ndefT2TPollerReadBlock>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800d7be:	8a7b      	ldrh	r3, [r7, #18]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 800d7ce:	8a7b      	ldrh	r3, [r7, #18]
 800d7d0:	e057      	b.n	800d882 <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800d7d2:	8afb      	ldrh	r3, [r7, #22]
 800d7d4:	009a      	lsls	r2, r3, #2
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 800d7dc:	7d7b      	ldrb	r3, [r7, #21]
 800d7de:	f1c3 0210 	rsb	r2, r3, #16
 800d7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d204      	bcs.n	800d7f4 <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 800d7ea:	7d7b      	ldrb	r3, [r7, #21]
 800d7ec:	f1c3 0310 	rsb	r3, r3, #16
 800d7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 800d7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d029      	beq.n	800d850 <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 800d7fc:	7d7b      	ldrb	r3, [r7, #21]
 800d7fe:	33b0      	adds	r3, #176	; 0xb0
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	4413      	add	r3, r2
 800d804:	3305      	adds	r3, #5
 800d806:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d80a:	4619      	mov	r1, r3
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f00f fe8b 	bl	801d528 <memcpy>
                if( le > 0U)
 800d812:	e01d      	b.n	800d850 <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 800d814:	8afb      	ldrh	r3, [r7, #22]
 800d816:	69ba      	ldr	r2, [r7, #24]
 800d818:	4619      	mov	r1, r3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff ff20 	bl	800d660 <ndefT2TPollerReadBlock>
 800d820:	4603      	mov	r3, r0
 800d822:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 800d824:	8a7b      	ldrh	r3, [r7, #18]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 800d82a:	8a7b      	ldrh	r3, [r7, #18]
 800d82c:	e029      	b.n	800d882 <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 800d82e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	429a      	cmp	r2, r3
 800d836:	d10b      	bne.n	800d850 <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	33b5      	adds	r3, #181	; 0xb5
 800d83c:	2210      	movs	r2, #16
 800d83e:	69b9      	ldr	r1, [r7, #24]
 800d840:	4618      	mov	r0, r3
 800d842:	f00f fe71 	bl	801d528 <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800d846:	8afb      	ldrh	r3, [r7, #22]
 800d848:	009a      	lsls	r2, r3, #2
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 800d850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	4413      	add	r3, r2
 800d858:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 800d85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d85e:	6a3a      	ldr	r2, [r7, #32]
 800d860:	4413      	add	r3, r2
 800d862:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 800d864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d183      	bne.n	800d77c <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	2b00      	cmp	r3, #0
 800d878:	d002      	beq.n	800d880 <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3728      	adds	r7, #40	; 0x28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b082      	sub	sp, #8
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00a      	beq.n	800d8b0 <ndefT2TPollerContextInitialization+0x26>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d007      	beq.n	800d8b0 <ndefT2TPollerContextInitialization+0x26>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d103      	bne.n	800d8b0 <ndefT2TPollerContextInitialization+0x26>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	785b      	ldrb	r3, [r3, #1]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 800d8b0:	2307      	movs	r3, #7
 800d8b2:	e013      	b.n	800d8dc <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2278      	movs	r2, #120	; 0x78
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f00f fe34 	bl	801d528 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d011      	beq.n	800d918 <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	2200      	movs	r2, #0
 800d904:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2200      	movs	r2, #0
 800d90a:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2200      	movs	r2, #0
 800d910:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	2200      	movs	r2, #0
 800d916:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <ndefT2TPollerNdefDetect+0x4a>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <ndefT2TPollerNdefDetect+0x4a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	785b      	ldrb	r3, [r3, #1]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800d92e:	2307      	movs	r3, #7
 800d930:	e134      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
    }

    ctx->state = NDEF_STATE_INVALID;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	339c      	adds	r3, #156	; 0x9c
 800d93e:	2200      	movs	r2, #0
 800d940:	9200      	str	r2, [sp, #0]
 800d942:	2204      	movs	r2, #4
 800d944:	210c      	movs	r1, #12
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7ff fed2 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800d94c:	4603      	mov	r3, r0
 800d94e:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 800d950:	8a3b      	ldrh	r3, [r7, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <ndefT2TPollerNdefDetect+0x76>
    {
        /* Conclude procedure */
        return ret;
 800d956:	8a3b      	ldrh	r3, [r7, #16]
 800d958:	e120      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d96c:	091b      	lsrs	r3, r3, #4
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d97c:	f003 030f 	and.w	r3, r3, #15
 800d980:	b2da      	uxtb	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800d99a:	091b      	lsrs	r3, r3, #4
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800d9aa:	f003 030f 	and.w	r3, r3, #15
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d9bc:	00da      	lsls	r2, r3, #3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9ca:	2be1      	cmp	r3, #225	; 0xe1
 800d9cc:	d104      	bne.n	800d9d8 <ndefT2TPollerNdefDetect+0xf4>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d901      	bls.n	800d9dc <ndefT2TPollerNdefDetect+0xf8>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 800d9d8:	2305      	movs	r3, #5
 800d9da:	e0df      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 800d9dc:	2310      	movs	r3, #16
 800d9de:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800d9e0:	e0d1      	b.n	800db86 <ndefT2TPollerNdefDetect+0x2a2>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800d9e2:	f107 030c 	add.w	r3, r7, #12
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	9200      	str	r2, [sp, #0]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	6979      	ldr	r1, [r7, #20]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fe7e 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800d9f8:	8a3b      	ldrh	r3, [r7, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <ndefT2TPollerNdefDetect+0x11e>
        {
            /* Conclude procedure */
            return ret;
 800d9fe:	8a3b      	ldrh	r3, [r7, #16]
 800da00:	e0cc      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
        }
        typeTLV = data[0];
 800da02:	7b3b      	ldrb	r3, [r7, #12]
 800da04:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d103      	bne.n	800da14 <ndefT2TPollerNdefDetect+0x130>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3301      	adds	r3, #1
 800da18:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2bfe      	cmp	r3, #254	; 0xfe
 800da1e:	f000 80bb 	beq.w	800db98 <ndefT2TPollerNdefDetect+0x2b4>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 800da22:	7bfb      	ldrb	r3, [r7, #15]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d100      	bne.n	800da2a <ndefT2TPollerNdefDetect+0x146>
        {
            continue;
 800da28:	e0ad      	b.n	800db86 <ndefT2TPollerNdefDetect+0x2a2>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800da2a:	f107 030c 	add.w	r3, r7, #12
 800da2e:	2200      	movs	r2, #0
 800da30:	9200      	str	r2, [sp, #0]
 800da32:	2201      	movs	r2, #1
 800da34:	6979      	ldr	r1, [r7, #20]
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fe5a 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800da3c:	4603      	mov	r3, r0
 800da3e:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800da40:	8a3b      	ldrh	r3, [r7, #16]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d001      	beq.n	800da4a <ndefT2TPollerNdefDetect+0x166>
        {
            /* Conclude procedure */
            return ret;
 800da46:	8a3b      	ldrh	r3, [r7, #16]
 800da48:	e0a8      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset++;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	3301      	adds	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 800da50:	7b3b      	ldrb	r3, [r7, #12]
 800da52:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 800da54:	8a7b      	ldrh	r3, [r7, #18]
 800da56:	2bff      	cmp	r3, #255	; 0xff
 800da58:	d11d      	bne.n	800da96 <ndefT2TPollerNdefDetect+0x1b2>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 800da5a:	f107 030c 	add.w	r3, r7, #12
 800da5e:	2200      	movs	r2, #0
 800da60:	9200      	str	r2, [sp, #0]
 800da62:	2202      	movs	r2, #2
 800da64:	6979      	ldr	r1, [r7, #20]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fe42 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800da6c:	4603      	mov	r3, r0
 800da6e:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 800da70:	8a3b      	ldrh	r3, [r7, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <ndefT2TPollerNdefDetect+0x196>
            {
                /* Conclude procedure */
                return ret;
 800da76:	8a3b      	ldrh	r3, [r7, #16]
 800da78:	e090      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
            }
            offset += 2U;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	3302      	adds	r3, #2
 800da7e:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 800da80:	7b3b      	ldrb	r3, [r7, #12]
 800da82:	021b      	lsls	r3, r3, #8
 800da84:	b21a      	sxth	r2, r3
 800da86:	f107 030c 	add.w	r3, r7, #12
 800da8a:	3301      	adds	r3, #1
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	b21b      	sxth	r3, r3
 800da90:	4313      	orrs	r3, r2
 800da92:	b21b      	sxth	r3, r3
 800da94:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d002      	beq.n	800daa2 <ndefT2TPollerNdefDetect+0x1be>
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d101      	bne.n	800daa6 <ndefT2TPollerNdefDetect+0x1c2>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 800daa2:	2305      	movs	r3, #5
 800daa4:	e07a      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	d168      	bne.n	800db7e <ndefT2TPollerNdefDetect+0x29a>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 800daac:	8a7a      	ldrh	r2, [r7, #18]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d110      	bne.n	800dae8 <ndefT2TPollerNdefDetect+0x204>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d104      	bne.n	800dada <ndefT2TPollerNdefDetect+0x1f6>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <ndefT2TPollerNdefDetect+0x1fa>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 800dada:	2305      	movs	r3, #5
 800dadc:	e05e      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800dae6:	e01e      	b.n	800db26 <ndefT2TPollerNdefDetect+0x242>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d109      	bne.n	800db06 <ndefT2TPollerNdefDetect+0x222>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d104      	bne.n	800db06 <ndefT2TPollerNdefDetect+0x222>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2202      	movs	r2, #2
 800db00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800db04:	e00f      	b.n	800db26 <ndefT2TPollerNdefDetect+0x242>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d104      	bne.n	800db1a <ndefT2TPollerNdefDetect+0x236>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db16:	2b0f      	cmp	r3, #15
 800db18:	d001      	beq.n	800db1e <ndefT2TPollerNdefDetect+0x23a>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 800db1a:	2305      	movs	r3, #5
 800db1c:	e03e      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2203      	movs	r2, #3
 800db22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d026      	beq.n	800db7a <ndefT2TPollerNdefDetect+0x296>
            {
                info->state                = ctx->state;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800db3c:	091b      	lsrs	r3, r3, #4
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db6a:	1ad2      	subs	r2, r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 800db7a:	2300      	movs	r3, #0
 800db7c:	e00e      	b.n	800db9c <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset += lenTLV;
 800db7e:	8a7b      	ldrh	r3, [r7, #18]
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	4413      	add	r3, r2
 800db84:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800db8c:	3310      	adds	r3, #16
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	429a      	cmp	r2, r3
 800db92:	f4ff af26 	bcc.w	800d9e2 <ndefT2TPollerNdefDetect+0xfe>
 800db96:	e000      	b.n	800db9a <ndefT2TPollerNdefDetect+0x2b6>
            break;
 800db98:	bf00      	nop
    }
    return ERR_REQUEST;
 800db9a:	2305      	movs	r3, #5
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00a      	beq.n	800dbce <ndefT2TPollerReadRawMessage+0x2a>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <ndefT2TPollerReadRawMessage+0x2a>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <ndefT2TPollerReadRawMessage+0x2a>
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 800dbce:	2307      	movs	r3, #7
 800dbd0:	e024      	b.n	800dc1c <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d801      	bhi.n	800dbe0 <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800dbdc:	2321      	movs	r3, #33	; 0x21
 800dbde:	e01d      	b.n	800dc1c <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d201      	bcs.n	800dbf0 <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e015      	b.n	800dc1c <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7ff fd74 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800dc0c:	8afb      	ldrh	r3, [r7, #22]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800dc1a:	8afb      	ldrh	r3, [r7, #22]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00a      	beq.n	800dc4e <ndefT2TPollerWriteBlock+0x2a>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d106      	bne.n	800dc4e <ndefT2TPollerWriteBlock+0x2a>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	785b      	ldrb	r3, [r3, #1]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d102      	bne.n	800dc4e <ndefT2TPollerWriteBlock+0x2a>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 800dc4e:	2307      	movs	r3, #7
 800dc50:	e022      	b.n	800dc98 <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800dc52:	897b      	ldrh	r3, [r7, #10]
 800dc54:	0a1b      	lsrs	r3, r3, #8
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 800dc5a:	897b      	ldrh	r3, [r7, #10]
 800dc5c:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800dc64:	7dfa      	ldrb	r2, [r7, #23]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d00e      	beq.n	800dc88 <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f00f f909 	bl	801ce84 <rfalT2TPollerSectorSelect>
 800dc72:	4603      	mov	r3, r0
 800dc74:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 800dc76:	8abb      	ldrh	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 800dc7c:	8abb      	ldrh	r3, [r7, #20]
 800dc7e:	e00b      	b.n	800dc98 <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	7dfa      	ldrb	r2, [r7, #23]
 800dc84:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 800dc88:	7dbb      	ldrb	r3, [r7, #22]
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f00f f8c1 	bl	801ce14 <rfalT2TPollerWrite>
 800dc92:	4603      	mov	r3, r0
 800dc94:	82bb      	strh	r3, [r7, #20]

    return ret;
 800dc96:	8abb      	ldrh	r3, [r7, #20]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08e      	sub	sp, #56	; 0x38
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00a      	beq.n	800dcd6 <ndefT2TPollerWriteBytes+0x36>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d106      	bne.n	800dcd6 <ndefT2TPollerWriteBytes+0x36>
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	785b      	ldrb	r3, [r3, #1]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <ndefT2TPollerWriteBytes+0x36>
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 800dcd6:	2307      	movs	r3, #7
 800dcd8:	e076      	b.n	800ddc8 <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dce0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 800dce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce6:	089b      	lsrs	r3, r3, #2
 800dce8:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 800dcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d802      	bhi.n	800dd02 <ndefT2TPollerWriteBytes+0x62>
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	e000      	b.n	800dd04 <ndefT2TPollerWriteBytes+0x64>
 800dd02:	2304      	movs	r3, #4
 800dd04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 800dd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <ndefT2TPollerWriteBytes+0x76>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	d838      	bhi.n	800dd88 <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 800dd16:	f107 0214 	add.w	r2, r7, #20
 800dd1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff fc9e 	bl	800d660 <ndefT2TPollerReadBlock>
 800dd24:	4603      	mov	r3, r0
 800dd26:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800dd28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 800dd2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd30:	e04a      	b.n	800ddc8 <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800dd32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd36:	f1c3 0204 	rsb	r2, r3, #4
 800dd3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d205      	bcs.n	800dd4e <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800dd42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd46:	f1c3 0304 	rsb	r3, r3, #4
 800dd4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 800dd4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00a      	beq.n	800dd6c <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 800dd56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd5a:	f107 0214 	add.w	r2, r7, #20
 800dd5e:	4413      	add	r3, r2
 800dd60:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800dd64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd66:	4618      	mov	r0, r3
 800dd68:	f00f fbde 	bl	801d528 <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 800dd6c:	f107 0214 	add.w	r2, r7, #20
 800dd70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd72:	4619      	mov	r1, r3
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff ff55 	bl	800dc24 <ndefT2TPollerWriteBlock>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800dd7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00e      	beq.n	800dda2 <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800dd84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd86:	e01f      	b.n	800ddc8 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 800dd88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7ff ff48 	bl	800dc24 <ndefT2TPollerWriteBlock>
 800dd94:	4603      	mov	r3, r0
 800dd96:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 800dd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d001      	beq.n	800dda2 <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 800dd9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda0:	e012      	b.n	800ddc8 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 800dda2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dda8:	4413      	add	r3, r2
 800ddaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 800ddac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddb2:	4413      	add	r3, r2
 800ddb4:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 800ddb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d18e      	bne.n	800dce4 <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3738      	adds	r7, #56	; 0x38
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <ndefT2TPollerWriteRawMessageLen+0x20>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d103      	bne.n	800ddf0 <ndefT2TPollerWriteRawMessageLen+0x20>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	785b      	ldrb	r3, [r3, #1]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 800ddf0:	2307      	movs	r3, #7
 800ddf2:	e077      	b.n	800dee4 <ndefT2TPollerWriteRawMessageLen+0x114>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d006      	beq.n	800de0c <ndefT2TPollerWriteRawMessageLen+0x3c>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800de04:	2b02      	cmp	r3, #2
 800de06:	d001      	beq.n	800de0c <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 800de08:	2321      	movs	r3, #33	; 0x21
 800de0a:	e06b      	b.n	800dee4 <ndefT2TPollerWriteRawMessageLen+0x114>
    }
    dataIt = 0U;
 800de0c:	2300      	movs	r3, #0
 800de0e:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	3310      	adds	r3, #16
 800de14:	443b      	add	r3, r7
 800de16:	2203      	movs	r2, #3
 800de18:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 800de1c:	7bfb      	ldrb	r3, [r7, #15]
 800de1e:	3301      	adds	r3, #1
 800de20:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	2bfe      	cmp	r3, #254	; 0xfe
 800de26:	d80a      	bhi.n	800de3e <ndefT2TPollerWriteRawMessageLen+0x6e>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	3310      	adds	r3, #16
 800de30:	443b      	add	r3, r7
 800de32:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
 800de38:	3301      	adds	r3, #1
 800de3a:	73fb      	strb	r3, [r7, #15]
 800de3c:	e014      	b.n	800de68 <ndefT2TPollerWriteRawMessageLen+0x98>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	0a1a      	lsrs	r2, r3, #8
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	3310      	adds	r3, #16
 800de48:	443b      	add	r3, r7
 800de4a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	3301      	adds	r3, #1
 800de52:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	3310      	adds	r3, #16
 800de5c:	443b      	add	r3, r7
 800de5e:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de62:	7bfb      	ldrb	r3, [r7, #15]
 800de64:	3301      	adds	r3, #1
 800de66:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d108      	bne.n	800de80 <ndefT2TPollerWriteRawMessageLen+0xb0>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	3310      	adds	r3, #16
 800de72:	443b      	add	r3, r7
 800de74:	22fe      	movs	r2, #254	; 0xfe
 800de76:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800de7a:	7bfb      	ldrb	r3, [r7, #15]
 800de7c:	3301      	adds	r3, #1
 800de7e:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800de86:	7bfb      	ldrb	r3, [r7, #15]
 800de88:	f107 0208 	add.w	r2, r7, #8
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ff07 	bl	800dca0 <ndefT2TPollerWriteBytes>
 800de92:	4603      	mov	r3, r0
 800de94:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 800de96:	89bb      	ldrh	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d022      	beq.n	800dee2 <ndefT2TPollerWriteRawMessageLen+0x112>
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d01f      	beq.n	800dee2 <ndefT2TPollerWriteRawMessageLen+0x112>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	441a      	add	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d215      	bcs.n	800dee2 <ndefT2TPollerWriteRawMessageLen+0x112>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 800deba:	7bfb      	ldrb	r3, [r7, #15]
 800debc:	3310      	adds	r3, #16
 800debe:	443b      	add	r3, r7
 800dec0:	22fe      	movs	r2, #254	; 0xfe
 800dec2:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	3301      	adds	r3, #1
 800deca:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	18d1      	adds	r1, r2, r3
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
 800ded8:	f107 0208 	add.w	r2, r7, #8
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7ff fedf 	bl	800dca0 <ndefT2TPollerWriteBytes>
    }

    return ret;
 800dee2:	89bb      	ldrh	r3, [r7, #12]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00d      	beq.n	800df1a <ndefT2TPollerWriteRawMessage+0x2e>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <ndefT2TPollerWriteRawMessage+0x2e>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	785b      	ldrb	r3, [r3, #1]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d105      	bne.n	800df1a <ndefT2TPollerWriteRawMessage+0x2e>
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d104      	bne.n	800df1e <ndefT2TPollerWriteRawMessage+0x32>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 800df1a:	2307      	movs	r3, #7
 800df1c:	e04b      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800df24:	2b01      	cmp	r3, #1
 800df26:	d006      	beq.n	800df36 <ndefT2TPollerWriteRawMessage+0x4a>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d001      	beq.n	800df36 <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800df32:	2321      	movs	r3, #33	; 0x21
 800df34:	e03f      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 f92c 	bl	800e196 <ndefT2TPollerCheckAvailableSpace>
 800df3e:	4603      	mov	r3, r0
 800df40:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df42:	8afb      	ldrh	r3, [r7, #22]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800df48:	2307      	movs	r3, #7
 800df4a:	e034      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f000 f957 	bl	800e202 <ndefT2TPollerBeginWriteMessage>
 800df54:	4603      	mov	r3, r0
 800df56:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800df58:	8afb      	ldrh	r3, [r7, #22]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d005      	beq.n	800df6a <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800df66:	8afb      	ldrh	r3, [r7, #22]
 800df68:	e025      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d021      	beq.n	800dfb4 <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff fe90 	bl	800dca0 <ndefT2TPollerWriteBytes>
 800df80:	4603      	mov	r3, r0
 800df82:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800df84:	8afb      	ldrh	r3, [r7, #22]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d005      	beq.n	800df96 <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800df92:	8afb      	ldrh	r3, [r7, #22]
 800df94:	e00f      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f000 f984 	bl	800e2a6 <ndefT2TPollerEndWriteMessage>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800dfa2:	8afb      	ldrh	r3, [r7, #22]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d005      	beq.n	800dfb4 <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800dfb0:	8afb      	ldrh	r3, [r7, #22]
 800dfb2:	e000      	b.n	800dfb6 <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 800dfb4:	8afb      	ldrh	r3, [r7, #22]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3718      	adds	r7, #24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d007      	beq.n	800dfe2 <ndefT2TPollerTagFormat+0x22>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d103      	bne.n	800dfe2 <ndefT2TPollerTagFormat+0x22>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	785b      	ldrb	r3, [r3, #1]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800dfe2:	2307      	movs	r3, #7
 800dfe4:	e0a0      	b.n	800e128 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	339c      	adds	r3, #156	; 0x9c
 800dfea:	2200      	movs	r2, #0
 800dfec:	9200      	str	r2, [sp, #0]
 800dfee:	2204      	movs	r2, #4
 800dff0:	210c      	movs	r1, #12
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff fb7c 	bl	800d6f0 <ndefT2TPollerReadBytes>
 800dff8:	4603      	mov	r3, r0
 800dffa:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800dffc:	8afb      	ldrh	r3, [r7, #22]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <ndefT2TPollerTagFormat+0x46>
    {
        return ret;
 800e002:	8afb      	ldrh	r3, [r7, #22]
 800e004:	e090      	b.n	800e128 <ndefT2TPollerTagFormat+0x168>
    }

    ndefT2TInvalidateCache(ctx);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f04f 32ff 	mov.w	r2, #4294967295
 800e00c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d17e      	bne.n	800e118 <ndefT2TPollerTagFormat+0x158>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e020:	2b00      	cmp	r3, #0
 800e022:	d179      	bne.n	800e118 <ndefT2TPollerTagFormat+0x158>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d174      	bne.n	800e118 <ndefT2TPollerTagFormat+0x158>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800e034:	2b00      	cmp	r3, #0
 800e036:	d16f      	bne.n	800e118 <ndefT2TPollerTagFormat+0x158>
    {
        dataIt = 0U;
 800e038:	2300      	movs	r3, #0
 800e03a:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d124      	bne.n	800e08c <ndefT2TPollerTagFormat+0xcc>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800e042:	7d7b      	ldrb	r3, [r7, #21]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	4413      	add	r3, r2
 800e048:	22e1      	movs	r2, #225	; 0xe1
 800e04a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e04e:	7d7b      	ldrb	r3, [r7, #21]
 800e050:	3301      	adds	r3, #1
 800e052:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800e054:	7d7b      	ldrb	r3, [r7, #21]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4413      	add	r3, r2
 800e05a:	2210      	movs	r2, #16
 800e05c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e060:	7d7b      	ldrb	r3, [r7, #21]
 800e062:	3301      	adds	r3, #1
 800e064:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800e066:	7d7b      	ldrb	r3, [r7, #21]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	2206      	movs	r2, #6
 800e06e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e072:	7d7b      	ldrb	r3, [r7, #21]
 800e074:	3301      	adds	r3, #1
 800e076:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 800e078:	7d7b      	ldrb	r3, [r7, #21]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4413      	add	r3, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e084:	7d7b      	ldrb	r3, [r7, #21]
 800e086:	3301      	adds	r3, #1
 800e088:	757b      	strb	r3, [r7, #21]
 800e08a:	e037      	b.n	800e0fc <ndefT2TPollerTagFormat+0x13c>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 800e08c:	7d7b      	ldrb	r3, [r7, #21]
 800e08e:	68ba      	ldr	r2, [r7, #8]
 800e090:	7811      	ldrb	r1, [r2, #0]
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	4413      	add	r3, r2
 800e096:	460a      	mov	r2, r1
 800e098:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e09c:	7d7b      	ldrb	r3, [r7, #21]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	b2d9      	uxtb	r1, r3
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	789a      	ldrb	r2, [r3, #2]
 800e0ae:	7d7b      	ldrb	r3, [r7, #21]
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	b2d1      	uxtb	r1, r2
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	460a      	mov	r2, r1
 800e0ba:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e0be:	7d7b      	ldrb	r3, [r7, #21]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 800e0c4:	7d7b      	ldrb	r3, [r7, #21]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	78d1      	ldrb	r1, [r2, #3]
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	460a      	mov	r2, r1
 800e0d0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e0d4:	7d7b      	ldrb	r3, [r7, #21]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	791b      	ldrb	r3, [r3, #4]
 800e0de:	011b      	lsls	r3, r3, #4
 800e0e0:	b2d9      	uxtb	r1, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	795a      	ldrb	r2, [r3, #5]
 800e0e6:	7d7b      	ldrb	r3, [r7, #21]
 800e0e8:	430a      	orrs	r2, r1
 800e0ea:	b2d1      	uxtb	r1, r2
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	460a      	mov	r2, r1
 800e0f2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800e0f6:	7d7b      	ldrb	r3, [r7, #21]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	339c      	adds	r3, #156	; 0x9c
 800e100:	461a      	mov	r2, r3
 800e102:	2103      	movs	r1, #3
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f7ff fd8d 	bl	800dc24 <ndefT2TPollerWriteBlock>
 800e10a:	4603      	mov	r3, r0
 800e10c:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800e10e:	8afb      	ldrh	r3, [r7, #22]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <ndefT2TPollerTagFormat+0x158>
        {
            return ret;
 800e114:	8afb      	ldrh	r3, [r7, #22]
 800e116:	e007      	b.n	800e128 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 800e118:	4a05      	ldr	r2, [pc, #20]	; (800e130 <ndefT2TPollerTagFormat+0x170>)
 800e11a:	2104      	movs	r1, #4
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff fd81 	bl	800dc24 <ndefT2TPollerWriteBlock>
 800e122:	4603      	mov	r3, r0
 800e124:	82fb      	strh	r3, [r7, #22]

    return ret;
 800e126:	8afb      	ldrh	r3, [r7, #22]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3718      	adds	r7, #24
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	08021c00 	.word	0x08021c00

0800e134 <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d007      	beq.n	800e152 <ndefT2TPollerCheckPresence+0x1e>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d103      	bne.n	800e152 <ndefT2TPollerCheckPresence+0x1e>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	785b      	ldrb	r3, [r3, #1]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800e152:	2307      	movs	r3, #7
 800e154:	e01b      	b.n	800e18e <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800e160:	89fb      	ldrh	r3, [r7, #14]
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff fa7b 	bl	800d660 <ndefT2TPollerReadBlock>
 800e16a:	4603      	mov	r3, r0
 800e16c:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 800e16e:	89bb      	ldrh	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d006      	beq.n	800e182 <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f04f 32ff 	mov.w	r2, #4294967295
 800e17a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 800e17e:	89bb      	ldrh	r3, [r7, #12]
 800e180:	e005      	b.n	800e18e <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 800e182:	89fb      	ldrh	r3, [r7, #14]
 800e184:	009a      	lsls	r2, r3, #2
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800e196:	b480      	push	{r7}
 800e198:	b085      	sub	sp, #20
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d007      	beq.n	800e1b6 <ndefT2TPollerCheckAvailableSpace+0x20>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d103      	bne.n	800e1b6 <ndefT2TPollerCheckAvailableSpace+0x20>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	785b      	ldrb	r3, [r3, #1]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 800e1b6:	2307      	movs	r3, #7
 800e1b8:	e01e      	b.n	800e1f8 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d101      	bne.n	800e1c8 <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 800e1c4:	2321      	movs	r3, #33	; 0x21
 800e1c6:	e017      	b.n	800e1f8 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2bfe      	cmp	r3, #254	; 0xfe
 800e1cc:	d901      	bls.n	800e1d2 <ndefT2TPollerCheckAvailableSpace+0x3c>
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	e000      	b.n	800e1d4 <ndefT2TPollerCheckAvailableSpace+0x3e>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	441a      	add	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e1ec:	3310      	adds	r3, #16
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d901      	bls.n	800e1f6 <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e000      	b.n	800e1f8 <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bc80      	pop	{r7}
 800e200:	4770      	bx	lr

0800e202 <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b084      	sub	sp, #16
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d007      	beq.n	800e222 <ndefT2TPollerBeginWriteMessage+0x20>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d103      	bne.n	800e222 <ndefT2TPollerBeginWriteMessage+0x20>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	785b      	ldrb	r3, [r3, #1]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 800e222:	2307      	movs	r3, #7
 800e224:	e03b      	b.n	800e29e <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d006      	beq.n	800e23e <ndefT2TPollerBeginWriteMessage+0x3c>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e236:	2b02      	cmp	r3, #2
 800e238:	d001      	beq.n	800e23e <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 800e23a:	2321      	movs	r3, #33	; 0x21
 800e23c:	e02f      	b.n	800e29e <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 800e23e:	2100      	movs	r1, #0
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fdc5 	bl	800ddd0 <ndefT2TPollerWriteRawMessageLen>
 800e246:	4603      	mov	r3, r0
 800e248:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d005      	beq.n	800e25c <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	e020      	b.n	800e29e <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2bfe      	cmp	r3, #254	; 0xfe
 800e260:	d901      	bls.n	800e266 <ndefT2TPollerBeginWriteMessage+0x64>
 800e262:	2303      	movs	r3, #3
 800e264:	e000      	b.n	800e268 <ndefT2TPollerBeginWriteMessage+0x66>
 800e266:	2301      	movs	r3, #1
 800e268:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	441a      	add	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d007      	beq.n	800e2c6 <ndefT2TPollerEndWriteMessage+0x20>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d103      	bne.n	800e2c6 <ndefT2TPollerEndWriteMessage+0x20>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	785b      	ldrb	r3, [r3, #1]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 800e2c6:	2307      	movs	r3, #7
 800e2c8:	e025      	b.n	800e316 <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d001      	beq.n	800e2d8 <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 800e2d4:	2321      	movs	r3, #33	; 0x21
 800e2d6:	e01e      	b.n	800e316 <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff fd78 	bl	800ddd0 <ndefT2TPollerWriteRawMessageLen>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800e2e4:	89fb      	ldrh	r3, [r7, #14]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d005      	beq.n	800e2f6 <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800e2f2:	89fb      	ldrh	r3, [r7, #14]
 800e2f4:	e00f      	b.n	800e316 <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e304:	2b00      	cmp	r3, #0
 800e306:	d101      	bne.n	800e30c <ndefT2TPollerEndWriteMessage+0x66>
 800e308:	2201      	movs	r2, #1
 800e30a:	e000      	b.n	800e30e <ndefT2TPollerEndWriteMessage+0x68>
 800e30c:	2202      	movs	r2, #2
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b08e      	sub	sp, #56	; 0x38
 800e322:	af02      	add	r7, sp, #8
 800e324:	60f8      	str	r0, [r7, #12]
 800e326:	607b      	str	r3, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	817b      	strh	r3, [r7, #10]
 800e32c:	4613      	mov	r3, r2
 800e32e:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 800e334:	230b      	movs	r3, #11
 800e336:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d003      	beq.n	800e346 <ndefT3TPollerReadBlocks+0x28>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b02      	cmp	r3, #2
 800e344:	d001      	beq.n	800e34a <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 800e346:	2307      	movs	r3, #7
 800e348:	e065      	b.n	800e416 <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 800e34a:	7a7b      	ldrb	r3, [r7, #9]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 800e352:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e356:	429a      	cmp	r2, r3
 800e358:	d201      	bcs.n	800e35e <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 800e35a:	2307      	movs	r3, #7
 800e35c:	e05b      	b.n	800e416 <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e364:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 800e366:	2300      	movs	r3, #0
 800e368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e36c:	e017      	b.n	800e39e <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800e36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e376:	4413      	add	r3, r2
 800e378:	2280      	movs	r2, #128	; 0x80
 800e37a:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800e37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e380:	b299      	uxth	r1, r3
 800e382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e38a:	4413      	add	r3, r2
 800e38c:	897a      	ldrh	r2, [r7, #10]
 800e38e:	440a      	add	r2, r1
 800e390:	b292      	uxth	r2, r2
 800e392:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 800e394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e398:	3301      	adds	r3, #1
 800e39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e39e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3a2:	7a7b      	ldrb	r3, [r7, #9]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d3e2      	bcc.n	800e36e <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800e3ac:	f107 0310 	add.w	r3, r7, #16
 800e3b0:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800e3b2:	7a7b      	ldrb	r3, [r7, #9]
 800e3b4:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	1cd8      	adds	r0, r3, #3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800e3c4:	f107 0114 	add.w	r1, r7, #20
 800e3c8:	f107 0312 	add.w	r3, r7, #18
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	2350      	movs	r3, #80	; 0x50
 800e3d0:	f00a fb10 	bl	80189f4 <rfalNfcfPollerCheck>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 800e3d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 800e3de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3e0:	e019      	b.n	800e416 <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 800e3e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	8a7b      	ldrh	r3, [r7, #18]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d001      	beq.n	800e3f2 <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 800e3ee:	2305      	movs	r3, #5
 800e3f0:	e011      	b.n	800e416 <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 800e3f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00d      	beq.n	800e414 <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f203 1305 	addw	r3, r3, #261	; 0x105
 800e3fe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f00f f890 	bl	801d528 <memcpy>
        if (rcvLen != NULL)
 800e408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 800e40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e410:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e412:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3730      	adds	r7, #48	; 0x30
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800e41e:	b590      	push	{r4, r7, lr}
 800e420:	b08f      	sub	sp, #60	; 0x3c
 800e422:	af02      	add	r7, sp, #8
 800e424:	60f8      	str	r0, [r7, #12]
 800e426:	60b9      	str	r1, [r7, #8]
 800e428:	607a      	str	r2, [r7, #4]
 800e42a:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 800e42c:	2300      	movs	r3, #0
 800e42e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 800e438:	2310      	movs	r3, #16
 800e43a:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800e43c:	8bfb      	ldrh	r3, [r7, #30]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	fbb2 f3f3 	udiv	r3, r2, r3
 800e444:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800e446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e448:	8bfa      	ldrh	r2, [r7, #30]
 800e44a:	fb02 f303 	mul.w	r3, r2, r3
 800e44e:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	b29a      	uxth	r2, r3
 800e454:	8bbb      	ldrh	r3, [r7, #28]
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 800e45a:	2304      	movs	r3, #4
 800e45c:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d006      	beq.n	800e472 <ndefT3TPollerReadBytes+0x54>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d102      	bne.n	800e472 <ndefT3TPollerReadBytes+0x54>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 800e472:	2307      	movs	r3, #7
 800e474:	e0e3      	b.n	800e63e <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e486:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 800e488:	8b7b      	ldrh	r3, [r7, #26]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 808e 	beq.w	800e5ac <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800e496:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e498:	f107 0316 	add.w	r3, r7, #22
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	8bfb      	ldrh	r3, [r7, #30]
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff ff39 	bl	800e31e <ndefT3TPollerReadBlocks>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800e4b0:	8b3b      	ldrh	r3, [r7, #24]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 800e4b6:	8b3b      	ldrh	r3, [r7, #24]
 800e4b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e4ba:	e077      	b.n	800e5ac <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800e4bc:	8afb      	ldrh	r3, [r7, #22]
 800e4be:	2b10      	cmp	r3, #16
 800e4c0:	d002      	beq.n	800e4c8 <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800e4c2:	230e      	movs	r3, #14
 800e4c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e4c6:	e071      	b.n	800e5ac <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 800e4c8:	8afa      	ldrh	r2, [r7, #22]
 800e4ca:	8b7b      	ldrh	r3, [r7, #26]
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 800e4d2:	8afb      	ldrh	r3, [r7, #22]
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d202      	bcs.n	800e4e2 <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 800e4e2:	8afb      	ldrh	r3, [r7, #22]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00a      	beq.n	800e4fe <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	8afa      	ldrh	r2, [r7, #22]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6838      	ldr	r0, [r7, #0]
 800e4fa:	f00f f815 	bl	801d528 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800e4fe:	8afb      	ldrh	r3, [r7, #22]
 800e500:	461a      	mov	r2, r3
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	4413      	add	r3, r2
 800e506:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 800e508:	8afb      	ldrh	r3, [r7, #22]
 800e50a:	461a      	mov	r2, r3
 800e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50e:	1a9b      	subs	r3, r3, r2
 800e510:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 800e512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e514:	3301      	adds	r3, #1
 800e516:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800e518:	e048      	b.n	800e5ac <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800e51a:	8bfb      	ldrh	r3, [r7, #30]
 800e51c:	8c3a      	ldrh	r2, [r7, #32]
 800e51e:	fb02 f303 	mul.w	r3, r2, r3
 800e522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e524:	429a      	cmp	r2, r3
 800e526:	d204      	bcs.n	800e532 <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 800e528:	8bfb      	ldrh	r3, [r7, #30]
 800e52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e530:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 800e532:	8c3b      	ldrh	r3, [r7, #32]
 800e534:	b2d8      	uxtb	r0, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800e53c:	8bfb      	ldrh	r3, [r7, #30]
 800e53e:	8c3a      	ldrh	r2, [r7, #32]
 800e540:	fb02 f303 	mul.w	r3, r2, r3
 800e544:	b29b      	uxth	r3, r3
 800e546:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e548:	f107 0216 	add.w	r2, r7, #22
 800e54c:	9201      	str	r2, [sp, #4]
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	4623      	mov	r3, r4
 800e552:	4602      	mov	r2, r0
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	f7ff fee2 	bl	800e31e <ndefT3TPollerReadBlocks>
 800e55a:	4603      	mov	r3, r0
 800e55c:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800e55e:	8b3b      	ldrh	r3, [r7, #24]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 800e564:	8b3b      	ldrh	r3, [r7, #24]
 800e566:	e06a      	b.n	800e63e <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 800e568:	8afb      	ldrh	r3, [r7, #22]
 800e56a:	4619      	mov	r1, r3
 800e56c:	8bfb      	ldrh	r3, [r7, #30]
 800e56e:	8c3a      	ldrh	r2, [r7, #32]
 800e570:	fb02 f303 	mul.w	r3, r2, r3
 800e574:	4299      	cmp	r1, r3
 800e576:	d001      	beq.n	800e57c <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800e578:	230e      	movs	r3, #14
 800e57a:	e060      	b.n	800e63e <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	18d0      	adds	r0, r2, r3
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800e588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e58a:	4619      	mov	r1, r3
 800e58c:	f00e ffcc 	bl	801d528 <memcpy>
            lvRcvLen   += nbRead;
 800e590:	8afb      	ldrh	r3, [r7, #22]
 800e592:	461a      	mov	r2, r3
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	4413      	add	r3, r2
 800e598:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 800e59a:	8afb      	ldrh	r3, [r7, #22]
 800e59c:	461a      	mov	r2, r3
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	1a9b      	subs	r3, r3, r2
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 800e5a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e5a6:	8c3b      	ldrh	r3, [r7, #32]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800e5ac:	8bfb      	ldrh	r3, [r7, #30]
 800e5ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d302      	bcc.n	800e5ba <ndefT3TPollerReadBytes+0x19c>
 800e5b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0af      	beq.n	800e51a <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d02f      	beq.n	800e620 <ndefT3TPollerReadBytes+0x202>
 800e5c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d12c      	bne.n	800e620 <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800e5cc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e5ce:	f107 0316 	add.w	r3, r7, #22
 800e5d2:	9301      	str	r3, [sp, #4]
 800e5d4:	8bfb      	ldrh	r3, [r7, #30]
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	2201      	movs	r2, #1
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7ff fe9e 	bl	800e31e <ndefT3TPollerReadBlocks>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 800e5e6:	8b3b      	ldrh	r3, [r7, #24]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 800e5ec:	8b3b      	ldrh	r3, [r7, #24]
 800e5ee:	e026      	b.n	800e63e <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 800e5f0:	8afb      	ldrh	r3, [r7, #22]
 800e5f2:	2b10      	cmp	r3, #16
 800e5f4:	d001      	beq.n	800e5fa <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 800e5f6:	230e      	movs	r3, #14
 800e5f8:	e021      	b.n	800e63e <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d009      	beq.n	800e614 <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	18d0      	adds	r0, r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800e60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e60e:	4619      	mov	r1, r3
 800e610:	f00e ff8a 	bl	801d528 <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 800e614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	4413      	add	r3, r2
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 800e61c:	2300      	movs	r3, #0
 800e61e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	2b00      	cmp	r3, #0
 800e624:	d104      	bne.n	800e630 <ndefT3TPollerReadBytes+0x212>
 800e626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 800e62c:	2300      	movs	r3, #0
 800e62e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 800e630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 800e636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63a:	601a      	str	r2, [r3, #0]
    }
    return result;
 800e63c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3734      	adds	r7, #52	; 0x34
 800e642:	46bd      	mov	sp, r7
 800e644:	bd90      	pop	{r4, r7, pc}

0800e646 <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b088      	sub	sp, #32
 800e64a:	af02      	add	r7, sp, #8
 800e64c:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 800e64e:	2300      	movs	r3, #0
 800e650:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 800e652:	2300      	movs	r3, #0
 800e654:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d003      	beq.n	800e664 <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b02      	cmp	r3, #2
 800e662:	d001      	beq.n	800e668 <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 800e664:	2307      	movs	r3, #7
 800e666:	e07d      	b.n	800e764 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	339c      	adds	r3, #156	; 0x9c
 800e66c:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 800e66e:	f107 030a 	add.w	r3, r7, #10
 800e672:	9301      	str	r3, [sp, #4]
 800e674:	2310      	movs	r3, #16
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2201      	movs	r2, #1
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff fe4d 	bl	800e31e <ndefT3TPollerReadBlocks>
 800e684:	4603      	mov	r3, r0
 800e686:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 800e688:	89fb      	ldrh	r3, [r7, #14]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d004      	beq.n	800e698 <ndefT3TPollerReadAttributeInformationBlock+0x52>
 800e68e:	897b      	ldrh	r3, [r7, #10]
 800e690:	2b10      	cmp	r3, #16
 800e692:	d001      	beq.n	800e698 <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 800e694:	89fb      	ldrh	r3, [r7, #14]
 800e696:	e065      	b.n	800e764 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800e698:	2300      	movs	r3, #0
 800e69a:	757b      	strb	r3, [r7, #21]
 800e69c:	e00a      	b.n	800e6b4 <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 800e69e:	7d7b      	ldrb	r3, [r7, #21]
 800e6a0:	693a      	ldr	r2, [r7, #16]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	8afb      	ldrh	r3, [r7, #22]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 800e6ae:	7d7b      	ldrb	r3, [r7, #21]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	757b      	strb	r3, [r7, #21]
 800e6b4:	7d7b      	ldrb	r3, [r7, #21]
 800e6b6:	2b0d      	cmp	r3, #13
 800e6b8:	d9f1      	bls.n	800e69e <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	330e      	adds	r3, #14
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	021b      	lsls	r3, r3, #8
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	330f      	adds	r3, #15
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	4413      	add	r3, r2
 800e6d0:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 800e6d2:	89ba      	ldrh	r2, [r7, #12]
 800e6d4:	8afb      	ldrh	r3, [r7, #22]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d001      	beq.n	800e6de <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 800e6da:	2305      	movs	r3, #5
 800e6dc:	e042      	b.n	800e764 <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	091b      	lsrs	r3, r3, #4
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	f003 030f 	and.w	r3, r3, #15
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	785a      	ldrb	r2, [r3, #1]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	789a      	ldrb	r2, [r3, #2]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	3303      	adds	r3, #3
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	b29b      	uxth	r3, r3
 800e718:	021b      	lsls	r3, r3, #8
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	3304      	adds	r3, #4
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	b29b      	uxth	r3, r3
 800e724:	4413      	add	r3, r2
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	7a5a      	ldrb	r2, [r3, #9]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	7a9a      	ldrb	r2, [r3, #10]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	330b      	adds	r3, #11
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	330c      	adds	r3, #12
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	021b      	lsls	r3, r3, #8
 800e752:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 800e754:	693a      	ldr	r2, [r7, #16]
 800e756:	320d      	adds	r2, #13
 800e758:	7812      	ldrb	r2, [r2, #0]
 800e75a:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d006      	beq.n	800e78a <ndefT3TPollerContextInitialization+0x1e>
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <ndefT3TPollerContextInitialization+0x1e>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d001      	beq.n	800e78e <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800e78a:	2307      	movs	r3, #7
 800e78c:	e00a      	b.n	800e7a4 <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2278      	movs	r2, #120	; 0x78
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	f00e fec7 	bl	801d528 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08c      	sub	sp, #48	; 0x30
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d011      	beq.n	800e7e8 <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <ndefT3TPollerNdefDetect+0x4a>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d001      	beq.n	800e7fa <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800e7f6:	2307      	movs	r3, #7
 800e7f8:	e087      	b.n	800e90a <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 800e802:	f107 0210 	add.w	r2, r7, #16
 800e806:	f107 030e 	add.w	r3, r7, #14
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	f107 030f 	add.w	r3, r7, #15
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	4613      	mov	r3, r2
 800e814:	2200      	movs	r2, #0
 800e816:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800e81a:	2000      	movs	r0, #0
 800e81c:	f00a f83c 	bl	8018898 <rfalNfcfPollerPoll>
 800e820:	4603      	mov	r3, r0
 800e822:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800e824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 800e82a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e82c:	e06d      	b.n	800e90a <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	1cd9      	adds	r1, r3, #3
 800e832:	f107 0310 	add.w	r3, r7, #16
 800e836:	3302      	adds	r3, #2
 800e838:	2208      	movs	r2, #8
 800e83a:	4618      	mov	r0, r3
 800e83c:	f00e fe64 	bl	801d508 <memcmp>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 800e846:	2305      	movs	r3, #5
 800e848:	e05f      	b.n	800e90a <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff fefb 	bl	800e646 <ndefT3TPollerReadAttributeInformationBlock>
 800e850:	4603      	mov	r3, r0
 800e852:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 800e854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 800e85a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e85c:	e055      	b.n	800e90a <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e864:	2b01      	cmp	r3, #1
 800e866:	d001      	beq.n	800e86c <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 800e868:	2305      	movs	r3, #5
 800e86a:	e04e      	b.n	800e90a <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2210      	movs	r2, #16
 800e87c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800e886:	011a      	lsls	r2, r3, #4
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d012      	beq.n	800e8c6 <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d104      	bne.n	800e8b4 <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2202      	movs	r2, #2
 800e8ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800e8b2:	e008      	b.n	800e8c6 <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d103      	bne.n	800e8c6 <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2203      	movs	r2, #3
 800e8c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01d      	beq.n	800e908 <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3728      	adds	r7, #40	; 0x28
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b088      	sub	sp, #32
 800e916:	af02      	add	r7, sp, #8
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	607a      	str	r2, [r7, #4]
 800e91e:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d006      	beq.n	800e934 <ndefT3TPollerReadRawMessage+0x22>
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d102      	bne.n	800e934 <ndefT3TPollerReadRawMessage+0x22>
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800e934:	2307      	movs	r3, #7
 800e936:	e02b      	b.n	800e990 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d801      	bhi.n	800e946 <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800e942:	2321      	movs	r3, #33	; 0x21
 800e944:	e024      	b.n	800e990 <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800e94c:	2b0f      	cmp	r3, #15
 800e94e:	d101      	bne.n	800e954 <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 800e950:	2321      	movs	r3, #33	; 0x21
 800e952:	e01d      	b.n	800e990 <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d201      	bcs.n	800e964 <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 800e960:	2301      	movs	r3, #1
 800e962:	e015      	b.n	800e990 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff fd51 	bl	800e41e <ndefT3TPollerReadBytes>
 800e97c:	4603      	mov	r3, r0
 800e97e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800e980:	8afb      	ldrh	r3, [r7, #22]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 800e98e:	8afb      	ldrh	r3, [r7, #22]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 800e998:	b590      	push	{r4, r7, lr}
 800e99a:	b091      	sub	sp, #68	; 0x44
 800e99c:	af04      	add	r7, sp, #16
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	817b      	strh	r3, [r7, #10]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 800e9aa:	2309      	movs	r3, #9
 800e9ac:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d003      	beq.n	800e9bc <ndefT3TPollerWriteBlocks+0x24>
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d001      	beq.n	800e9c0 <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 800e9bc:	2307      	movs	r3, #7
 800e9be:	e042      	b.n	800ea46 <ndefT3TPollerWriteBlocks+0xae>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e9ce:	e017      	b.n	800ea00 <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 800e9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9d8:	4413      	add	r3, r2
 800e9da:	2280      	movs	r2, #128	; 0x80
 800e9dc:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 800e9de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9e2:	b299      	uxth	r1, r3
 800e9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ec:	4413      	add	r3, r2
 800e9ee:	897a      	ldrh	r2, [r7, #10]
 800e9f0:	440a      	add	r2, r1
 800e9f2:	b292      	uxth	r2, r2
 800e9f4:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800e9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ea00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea04:	7a7b      	ldrb	r3, [r7, #9]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d3e2      	bcc.n	800e9d0 <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 800ea0e:	f107 0312 	add.w	r3, r7, #18
 800ea12:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800ea14:	7a7b      	ldrb	r3, [r7, #9]
 800ea16:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	1cd8      	adds	r0, r3, #3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800ea2c:	f107 0114 	add.w	r1, r7, #20
 800ea30:	2450      	movs	r4, #80	; 0x50
 800ea32:	9402      	str	r4, [sp, #8]
 800ea34:	9301      	str	r3, [sp, #4]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	2350      	movs	r3, #80	; 0x50
 800ea3c:	f00a f916 	bl	8018c6c <rfalNfcfPollerUpdate>
 800ea40:	4603      	mov	r3, r0
 800ea42:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800ea44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3734      	adds	r7, #52	; 0x34
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd90      	pop	{r4, r7, pc}

0800ea4e <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b092      	sub	sp, #72	; 0x48
 800ea52:	af02      	add	r7, sp, #8
 800ea54:	60f8      	str	r0, [r7, #12]
 800ea56:	60b9      	str	r1, [r7, #8]
 800ea58:	607a      	str	r2, [r7, #4]
 800ea5a:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800ea64:	2300      	movs	r3, #0
 800ea66:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 800ea68:	2310      	movs	r3, #16
 800ea6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 800ea70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea78:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 800ea7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ea7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea7e:	fb02 f303 	mul.w	r3, r2, r3
 800ea82:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d006      	beq.n	800eaa2 <ndefT3TPollerWriteBytes+0x54>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d102      	bne.n	800eaa2 <ndefT3TPollerWriteBytes+0x54>
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d101      	bne.n	800eaa6 <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 800eaa2:	2307      	movs	r3, #7
 800eaa4:	e0d0      	b.n	800ec48 <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d003      	beq.n	800eab8 <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800eab6:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 800eab8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d078      	beq.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 800eabe:	f107 0214 	add.w	r2, r7, #20
 800eac2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800eac4:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	4613      	mov	r3, r2
 800ead0:	2201      	movs	r2, #1
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f7ff fc23 	bl	800e31e <ndefT3TPollerReadBlocks>
 800ead8:	4603      	mov	r3, r0
 800eada:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800eadc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d002      	beq.n	800eae8 <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800eae2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eae4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800eae6:	e063      	b.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 800eae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eaea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d002      	beq.n	800eaf6 <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800eaf0:	230e      	movs	r3, #14
 800eaf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800eaf4:	e05c      	b.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800eaf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaf8:	f1c3 0310 	rsb	r3, r3, #16
 800eafc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 800eafe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d201      	bcs.n	800eb0a <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 800eb0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb0c:	f107 0214 	add.w	r2, r7, #20
 800eb10:	4413      	add	r3, r2
 800eb12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f00e fd06 	bl	801d528 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800eb1c:	f107 0314 	add.w	r3, r7, #20
 800eb20:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800eb22:	2201      	movs	r2, #1
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f7ff ff37 	bl	800e998 <ndefT3TPollerWriteBlocks>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800eb2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10b      	bne.n	800eb4c <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800eb34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb38:	4413      	add	r3, r2
 800eb3a:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 800eb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800eb44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb46:	3301      	adds	r3, #1
 800eb48:	863b      	strh	r3, [r7, #48]	; 0x30
 800eb4a:	e031      	b.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 800eb4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800eb50:	e02e      	b.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800eb52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb54:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800eb56:	fb02 f303 	mul.w	r3, r2, r3
 800eb5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d204      	bcs.n	800eb6a <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 800eb60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb64:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb68:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 800eb6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb6c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800eb6e:	fb02 f303 	mul.w	r3, r2, r3
 800eb72:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 800eb74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800eb76:	b2d8      	uxtb	r0, r3
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7c:	4413      	add	r3, r2
 800eb7e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800eb80:	4602      	mov	r2, r0
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f7ff ff08 	bl	800e998 <ndefT3TPollerWriteBlocks>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800eb8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 800eb92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800eb96:	e00b      	b.n	800ebb0 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 800eb98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb9c:	4413      	add	r3, r2
 800eb9e:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 800eba0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 800eba8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ebaa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ebac:	4413      	add	r3, r2
 800ebae:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 800ebb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d302      	bcc.n	800ebbe <ndefT3TPollerWriteBytes+0x170>
 800ebb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0c9      	beq.n	800eb52 <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d038      	beq.n	800ec36 <ndefT3TPollerWriteBytes+0x1e8>
 800ebc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d135      	bne.n	800ec36 <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 800ebca:	f107 0214 	add.w	r2, r7, #20
 800ebce:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800ebd0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	2201      	movs	r2, #1
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f7ff fb9d 	bl	800e31e <ndefT3TPollerReadBlocks>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 800ebe8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 800ebee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ebf2:	e020      	b.n	800ec36 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800ebf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d002      	beq.n	800ec02 <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 800ebfc:	230e      	movs	r3, #14
 800ebfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ec00:	e019      	b.n	800ec36 <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec06:	18d1      	adds	r1, r2, r3
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f00e fc8a 	bl	801d528 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800ec14:	f107 0314 	add.w	r3, r7, #20
 800ec18:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f7ff febb 	bl	800e998 <ndefT3TPollerWriteBlocks>
 800ec22:	4603      	mov	r3, r0
 800ec24:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800ec26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d102      	bne.n	800ec32 <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec30:	e001      	b.n	800ec36 <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800ec32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec34:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d104      	bne.n	800ec46 <ndefT3TPollerWriteBytes+0x1f8>
 800ec3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800ec42:	2300      	movs	r3, #0
 800ec44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800ec46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3740      	adds	r7, #64	; 0x40
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d001      	beq.n	800ec6a <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800ec66:	2307      	movs	r3, #7
 800ec68:	e10e      	b.n	800ee88 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 800ec74:	2321      	movs	r3, #33	; 0x21
 800ec76:	e107      	b.n	800ee88 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	339c      	adds	r3, #156	; 0x9c
 800ec80:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	b2d9      	uxtb	r1, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ec96:	7dfb      	ldrb	r3, [r7, #23]
 800ec98:	6938      	ldr	r0, [r7, #16]
 800ec9a:	4403      	add	r3, r0
 800ec9c:	430a      	orrs	r2, r1
 800ec9e:	b2d2      	uxtb	r2, r2
 800eca0:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
 800eca4:	693a      	ldr	r2, [r7, #16]
 800eca6:	4413      	add	r3, r2
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	89fb      	ldrh	r3, [r7, #14]
 800ecae:	4413      	add	r3, r2
 800ecb0:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	693a      	ldr	r2, [r7, #16]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800ecc4:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	693a      	ldr	r2, [r7, #16]
 800ecca:	4413      	add	r3, r2
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	89fb      	ldrh	r3, [r7, #14]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ecd6:	7dfb      	ldrb	r3, [r7, #23]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	693a      	ldr	r2, [r7, #16]
 800ece0:	4413      	add	r3, r2
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800ece8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	4413      	add	r3, r2
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	89fb      	ldrh	r3, [r7, #14]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ed06:	0a1b      	lsrs	r3, r3, #8
 800ed08:	b299      	uxth	r1, r3
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	4413      	add	r3, r2
 800ed10:	b2ca      	uxtb	r2, r1
 800ed12:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ed14:	7dfb      	ldrb	r3, [r7, #23]
 800ed16:	693a      	ldr	r2, [r7, #16]
 800ed18:	4413      	add	r3, r2
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	89fb      	ldrh	r3, [r7, #14]
 800ed20:	4413      	add	r3, r2
 800ed22:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
 800ed26:	3301      	adds	r3, #1
 800ed28:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	4413      	add	r3, r2
 800ed36:	b2ca      	uxtb	r2, r1
 800ed38:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	4413      	add	r3, r2
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	89fb      	ldrh	r3, [r7, #14]
 800ed46:	4413      	add	r3, r2
 800ed48:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 800ed50:	7dfb      	ldrb	r3, [r7, #23]
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	4413      	add	r3, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	4413      	add	r3, r2
 800ed66:	2200      	movs	r2, #0
 800ed68:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ed6a:	7dfb      	ldrb	r3, [r7, #23]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	4413      	add	r3, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 800ed80:	7dfb      	ldrb	r3, [r7, #23]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	4413      	add	r3, r2
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	4413      	add	r3, r2
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800ed9c:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	693a      	ldr	r2, [r7, #16]
 800eda2:	4413      	add	r3, r2
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	89fb      	ldrh	r3, [r7, #14]
 800edaa:	4413      	add	r3, r2
 800edac:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800edae:	7dfb      	ldrb	r3, [r7, #23]
 800edb0:	3301      	adds	r3, #1
 800edb2:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	4413      	add	r3, r2
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800edc0:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	4413      	add	r3, r2
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	b29a      	uxth	r2, r3
 800edcc:	89fb      	ldrh	r3, [r7, #14]
 800edce:	4413      	add	r3, r2
 800edd0:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	3301      	adds	r3, #1
 800edd6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edde:	0c19      	lsrs	r1, r3, #16
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	693a      	ldr	r2, [r7, #16]
 800ede4:	4413      	add	r3, r2
 800ede6:	b2ca      	uxtb	r2, r1
 800ede8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800edea:	7dfb      	ldrb	r3, [r7, #23]
 800edec:	693a      	ldr	r2, [r7, #16]
 800edee:	4413      	add	r3, r2
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	89fb      	ldrh	r3, [r7, #14]
 800edf6:	4413      	add	r3, r2
 800edf8:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	3301      	adds	r3, #1
 800edfe:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee06:	0a19      	lsrs	r1, r3, #8
 800ee08:	7dfb      	ldrb	r3, [r7, #23]
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	b2ca      	uxtb	r2, r1
 800ee10:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4413      	add	r3, r2
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	89fb      	ldrh	r3, [r7, #14]
 800ee1e:	4413      	add	r3, r2
 800ee20:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
 800ee24:	3301      	adds	r3, #1
 800ee26:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	4413      	add	r3, r2
 800ee34:	b2ca      	uxtb	r2, r1
 800ee36:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	89fb      	ldrh	r3, [r7, #14]
 800ee44:	4413      	add	r3, r2
 800ee46:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 800ee4e:	89fb      	ldrh	r3, [r7, #14]
 800ee50:	0a1b      	lsrs	r3, r3, #8
 800ee52:	b299      	uxth	r1, r3
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	4413      	add	r3, r2
 800ee5a:	b2ca      	uxtb	r2, r1
 800ee5c:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ee5e:	7dfb      	ldrb	r3, [r7, #23]
 800ee60:	3301      	adds	r3, #1
 800ee62:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800ee64:	7dfb      	ldrb	r3, [r7, #23]
 800ee66:	693a      	ldr	r2, [r7, #16]
 800ee68:	4413      	add	r3, r2
 800ee6a:	89fa      	ldrh	r2, [r7, #14]
 800ee6c:	b2d2      	uxtb	r2, r2
 800ee6e:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	3301      	adds	r3, #1
 800ee74:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff fd8b 	bl	800e998 <ndefT3TPollerWriteBlocks>
 800ee82:	4603      	mov	r3, r0
 800ee84:	81bb      	strh	r3, [r7, #12]
    return ret;
 800ee86:	89bb      	ldrh	r3, [r7, #12]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d009      	beq.n	800eeb6 <ndefT3TPollerWriteRawMessage+0x26>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d105      	bne.n	800eeb6 <ndefT3TPollerWriteRawMessage+0x26>
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d104      	bne.n	800eeba <ndefT3TPollerWriteRawMessage+0x2a>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 800eeb6:	2307      	movs	r3, #7
 800eeb8:	e04b      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d006      	beq.n	800eed2 <ndefT3TPollerWriteRawMessage+0x42>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d001      	beq.n	800eed2 <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800eece:	2321      	movs	r3, #33	; 0x21
 800eed0:	e03f      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f000 f8cb 	bl	800f070 <ndefT3TPollerCheckAvailableSpace>
 800eeda:	4603      	mov	r3, r0
 800eedc:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800eede:	8afb      	ldrh	r3, [r7, #22]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800eee4:	2307      	movs	r3, #7
 800eee6:	e034      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f000 f8e3 	bl	800f0b6 <ndefT3TPollerBeginWriteMessage>
 800eef0:	4603      	mov	r3, r0
 800eef2:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800eef4:	8afb      	ldrh	r3, [r7, #22]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d005      	beq.n	800ef06 <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800ef02:	8afb      	ldrh	r3, [r7, #22]
 800ef04:	e025      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d012      	beq.n	800ef32 <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fd99 	bl	800ea4e <ndefT3TPollerWriteBytes>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 800ef20:	8afb      	ldrh	r3, [r7, #22]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d005      	beq.n	800ef32 <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800ef2e:	8afb      	ldrh	r3, [r7, #22]
 800ef30:	e00f      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800ef32:	6879      	ldr	r1, [r7, #4]
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f000 f8f3 	bl	800f120 <ndefT3TPollerEndWriteMessage>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ef3e:	8afb      	ldrh	r3, [r7, #22]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800ef4c:	8afb      	ldrh	r3, [r7, #22]
 800ef4e:	e000      	b.n	800ef52 <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 800ef50:	8afb      	ldrh	r3, [r7, #22]
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3718      	adds	r7, #24
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b08e      	sub	sp, #56	; 0x38
 800ef5e:	af02      	add	r7, sp, #8
 800ef60:	60f8      	str	r0, [r7, #12]
 800ef62:	60b9      	str	r1, [r7, #8]
 800ef64:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800ef66:	2301      	movs	r3, #1
 800ef68:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d003      	beq.n	800ef7c <ndefT3TPollerTagFormat+0x22>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d001      	beq.n	800ef80 <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800ef7c:	2307      	movs	r3, #7
 800ef7e:	e051      	b.n	800f024 <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d109      	bne.n	800ef9a <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff fb5d 	bl	800e646 <ndefT3TPollerReadAttributeInformationBlock>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 800ef90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d008      	beq.n	800efa8 <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 800ef96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef98:	e044      	b.n	800f024 <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	337c      	adds	r3, #124	; 0x7c
 800ef9e:	2214      	movs	r2, #20
 800efa0:	68b9      	ldr	r1, [r7, #8]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f00e fac0 	bl	801d528 <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 800efa8:	f107 0218 	add.w	r2, r7, #24
 800efac:	f107 0316 	add.w	r3, r7, #22
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	f107 0317 	add.w	r3, r7, #23
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4613      	mov	r3, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800efc0:	2000      	movs	r0, #0
 800efc2:	f009 fc69 	bl	8018898 <rfalNfcfPollerPoll>
 800efc6:	4603      	mov	r3, r0
 800efc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800efca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 800efd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efd2:	e027      	b.n	800f024 <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800efd4:	f107 0218 	add.w	r2, r7, #24
 800efd8:	f107 0316 	add.w	r3, r7, #22
 800efdc:	9301      	str	r3, [sp, #4]
 800efde:	f107 0317 	add.w	r3, r7, #23
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	4613      	mov	r3, r2
 800efe6:	2201      	movs	r2, #1
 800efe8:	f241 21fc 	movw	r1, #4860	; 0x12fc
 800efec:	2000      	movs	r0, #0
 800efee:	f009 fc53 	bl	8018898 <rfalNfcfPollerPoll>
 800eff2:	4603      	mov	r3, r0
 800eff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800eff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 800effc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800effe:	e011      	b.n	800f024 <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f7ff fe19 	bl	800ec50 <ndefT3TPollerWriteAttributeInformationBlock>
 800f01e:	4603      	mov	r3, r0
 800f020:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800f022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f024:	4618      	mov	r0, r3
 800f026:	3730      	adds	r7, #48	; 0x30
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af02      	add	r7, sp, #8
 800f032:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <ndefT3TPollerCheckPresence+0x16>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d001      	beq.n	800f046 <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800f042:	2307      	movs	r3, #7
 800f044:	e010      	b.n	800f068 <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800f04c:	f107 030c 	add.w	r3, r7, #12
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	2310      	movs	r3, #16
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	4613      	mov	r3, r2
 800f058:	2201      	movs	r2, #1
 800f05a:	2100      	movs	r1, #0
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff f95e 	bl	800e31e <ndefT3TPollerReadBlocks>
 800f062:	4603      	mov	r3, r0
 800f064:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800f066:	89fb      	ldrh	r3, [r7, #14]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <ndefT3TPollerCheckAvailableSpace+0x18>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b02      	cmp	r3, #2
 800f086:	d001      	beq.n	800f08c <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800f088:	2307      	movs	r3, #7
 800f08a:	e00f      	b.n	800f0ac <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f092:	2b00      	cmp	r3, #0
 800f094:	d101      	bne.n	800f09a <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800f096:	2321      	movs	r3, #33	; 0x21
 800f098:	e008      	b.n	800f0ac <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f0a0:	683a      	ldr	r2, [r7, #0]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d901      	bls.n	800f0aa <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	e000      	b.n	800f0ac <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bc80      	pop	{r7}
 800f0b4:	4770      	bx	lr

0800f0b6 <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d003      	beq.n	800f0ce <ndefT3TPollerBeginWriteMessage+0x18>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d001      	beq.n	800f0d2 <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f0ce:	2307      	movs	r3, #7
 800f0d0:	e022      	b.n	800f118 <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d006      	beq.n	800f0ea <ndefT3TPollerBeginWriteMessage+0x34>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d001      	beq.n	800f0ea <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800f0e6:	2321      	movs	r3, #33	; 0x21
 800f0e8:	e016      	b.n	800f118 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	220f      	movs	r2, #15
 800f0ee:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff fdac 	bl	800ec50 <ndefT3TPollerWriteAttributeInformationBlock>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d005      	beq.n	800f10e <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f10a:	89fb      	ldrh	r3, [r7, #14]
 800f10c:	e004      	b.n	800f118 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2201      	movs	r2, #1
 800f112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800f116:	2300      	movs	r3, #0
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <ndefT3TPollerEndWriteMessage+0x18>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d001      	beq.n	800f13c <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800f138:	2307      	movs	r3, #7
 800f13a:	e02c      	b.n	800f196 <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f142:	2b01      	cmp	r3, #1
 800f144:	d001      	beq.n	800f14a <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800f146:	2321      	movs	r3, #33	; 0x21
 800f148:	e025      	b.n	800f196 <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	683a      	ldr	r2, [r7, #0]
 800f156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff fd78 	bl	800ec50 <ndefT3TPollerWriteAttributeInformationBlock>
 800f160:	4603      	mov	r3, r0
 800f162:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f164:	89fb      	ldrh	r3, [r7, #14]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d005      	beq.n	800f176 <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800f172:	89fb      	ldrh	r3, [r7, #14]
 800f174:	e00f      	b.n	800f196 <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <ndefT3TPollerEndWriteMessage+0x6c>
 800f188:	2201      	movs	r2, #1
 800f18a:	e000      	b.n	800f18e <ndefT3TPollerEndWriteMessage+0x6e>
 800f18c:	2202      	movs	r2, #2
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b082      	sub	sp, #8
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d003      	beq.n	800f1b6 <ndefT3TPollerWriteRawMessageLen+0x18>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d001      	beq.n	800f1ba <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 800f1b6:	2307      	movs	r3, #7
 800f1b8:	e010      	b.n	800f1dc <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d006      	beq.n	800f1d2 <ndefT3TPollerWriteRawMessageLen+0x34>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d001      	beq.n	800f1d2 <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 800f1ce:	2321      	movs	r3, #33	; 0x21
 800f1d0:	e004      	b.n	800f1dc <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ffa3 	bl	800f120 <ndefT3TPollerEndWriteMessage>
 800f1da:	4603      	mov	r3, r0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	22ff      	movs	r2, #255	; 0xff
 800f222:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f603 02cc 	addw	r2, r3, #2252	; 0x8cc
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	611a      	str	r2, [r3, #16]
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bc80      	pop	{r7}
 800f240:	4770      	bx	lr

0800f242 <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800f242:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f244:	b08b      	sub	sp, #44	; 0x2c
 800f246:	af06      	add	r7, sp, #24
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800f262:	683e      	ldr	r6, [r7, #0]
 800f264:	466d      	mov	r5, sp
 800f266:	f106 0410 	add.w	r4, r6, #16
 800f26a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f26c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	602b      	str	r3, [r5, #0]
 800f272:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800f276:	f004 fa67 	bl	8013748 <rfalIsoDepStartApduTransceive>
 800f27a:	4603      	mov	r3, r0
 800f27c:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 800f27e:	89fb      	ldrh	r3, [r7, #14]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d108      	bne.n	800f296 <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 800f284:	f00b faaa 	bl	801a7dc <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 800f288:	f004 faae 	bl	80137e8 <rfalIsoDepGetApduTransceiveStatus>
 800f28c:	4603      	mov	r3, r0
 800f28e:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 800f290:	89fb      	ldrh	r3, [r7, #14]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d0f6      	beq.n	800f284 <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 800f296:	89fb      	ldrh	r3, [r7, #14]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 800f29c:	89fb      	ldrh	r3, [r7, #14]
 800f29e:	e00e      	b.n	800f2be <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f00d fee5 	bl	801d076 <rfalT4TPollerParseRAPDU>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8b3 28c6 	ldrh.w	r2, [r3, #2246]	; 0x8c6
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8a3 29d0 	strh.w	r2, [r3, #2512]	; 0x9d0
    
    return ret;
 800f2bc:	89fb      	ldrh	r3, [r7, #14]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f2c8 <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 800f2d0:	49a0      	ldr	r1, [pc, #640]	; (800f554 <ndefT4TReadAndParseCCFile+0x28c>)
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f9e6 	bl	800f6a4 <ndefT4TPollerSelectFile>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f2dc:	89fb      	ldrh	r3, [r7, #14]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 800f2e2:	89fb      	ldrh	r3, [r7, #14]
 800f2e4:	e180      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 800f2e6:	220f      	movs	r2, #15
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa19 	bl	800f722 <ndefT4TPollerReadBinary>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800f2f4:	89fb      	ldrh	r3, [r7, #14]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 800f2fa:	89fb      	ldrh	r3, [r7, #14]
 800f2fc:	e174      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800f30a:	220f      	movs	r2, #15
 800f30c:	4619      	mov	r1, r3
 800f30e:	f00e f90b 	bl	801d528 <memcpy>
    dataIt = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 800f316:	7b7b      	ldrb	r3, [r7, #13]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	4413      	add	r3, r2
 800f31c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f320:	021b      	lsls	r3, r3, #8
 800f322:	b21a      	sxth	r2, r3
 800f324:	7b7b      	ldrb	r3, [r7, #13]
 800f326:	3398      	adds	r3, #152	; 0x98
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	440b      	add	r3, r1
 800f32c:	3304      	adds	r3, #4
 800f32e:	3301      	adds	r3, #1
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	b21b      	sxth	r3, r3
 800f334:	4313      	orrs	r3, r2
 800f336:	b21b      	sxth	r3, r3
 800f338:	b29a      	uxth	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 800f340:	7b7b      	ldrb	r3, [r7, #13]
 800f342:	3302      	adds	r3, #2
 800f344:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 800f346:	7b7b      	ldrb	r3, [r7, #13]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	4413      	add	r3, r2
 800f34c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 800f356:	7b7b      	ldrb	r3, [r7, #13]
 800f358:	3301      	adds	r3, #1
 800f35a:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 800f35c:	7b7b      	ldrb	r3, [r7, #13]
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	4413      	add	r3, r2
 800f362:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f366:	021b      	lsls	r3, r3, #8
 800f368:	b21a      	sxth	r2, r3
 800f36a:	7b7b      	ldrb	r3, [r7, #13]
 800f36c:	3398      	adds	r3, #152	; 0x98
 800f36e:	6879      	ldr	r1, [r7, #4]
 800f370:	440b      	add	r3, r1
 800f372:	3304      	adds	r3, #4
 800f374:	3301      	adds	r3, #1
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	b21b      	sxth	r3, r3
 800f37a:	4313      	orrs	r3, r2
 800f37c:	b21b      	sxth	r3, r3
 800f37e:	b29a      	uxth	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 800f386:	7b7b      	ldrb	r3, [r7, #13]
 800f388:	3302      	adds	r3, #2
 800f38a:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 800f38c:	7b7b      	ldrb	r3, [r7, #13]
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	4413      	add	r3, r2
 800f392:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	b21a      	sxth	r2, r3
 800f39a:	7b7b      	ldrb	r3, [r7, #13]
 800f39c:	3398      	adds	r3, #152	; 0x98
 800f39e:	6879      	ldr	r1, [r7, #4]
 800f3a0:	440b      	add	r3, r1
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b21b      	sxth	r3, r3
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	b21b      	sxth	r3, r3
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 800f3b6:	7b7b      	ldrb	r3, [r7, #13]
 800f3b8:	3302      	adds	r3, #2
 800f3ba:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f3c2:	2b0e      	cmp	r3, #14
 800f3c4:	d904      	bls.n	800f3d0 <ndefT4TReadAndParseCCFile+0x108>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f3cc:	2b0c      	cmp	r3, #12
 800f3ce:	d801      	bhi.n	800f3d4 <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800f3d0:	2305      	movs	r3, #5
 800f3d2:	e109      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f3da:	2bfe      	cmp	r3, #254	; 0xfe
 800f3dc:	d804      	bhi.n	800f3e8 <ndefT4TReadAndParseCCFile+0x120>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	e000      	b.n	800f3ea <ndefT4TReadAndParseCCFile+0x122>
 800f3e8:	22ff      	movs	r2, #255	; 0xff
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f3f6:	2bfe      	cmp	r3, #254	; 0xfe
 800f3f8:	d804      	bhi.n	800f404 <ndefT4TReadAndParseCCFile+0x13c>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f400:	b2da      	uxtb	r2, r3
 800f402:	e000      	b.n	800f406 <ndefT4TReadAndParseCCFile+0x13e>
 800f404:	22ff      	movs	r2, #255	; 0xff
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f412:	091b      	lsrs	r3, r3, #4
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b03      	cmp	r3, #3
 800f418:	d901      	bls.n	800f41e <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800f41a:	2305      	movs	r3, #5
 800f41c:	e0e4      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f424:	091b      	lsrs	r3, r3, #4
 800f426:	b2db      	uxtb	r3, r3
 800f428:	2b03      	cmp	r3, #3
 800f42a:	d17e      	bne.n	800f52a <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800f42c:	2202      	movs	r2, #2
 800f42e:	210f      	movs	r1, #15
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f976 	bl	800f722 <ndefT4TPollerReadBinary>
 800f436:	4603      	mov	r3, r0
 800f438:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 800f43a:	89fb      	ldrh	r3, [r7, #14]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 800f440:	89fb      	ldrh	r3, [r7, #14]
 800f442:	e0d1      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	33ab      	adds	r3, #171	; 0xab
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	f202 42bd 	addw	r2, r2, #1213	; 0x4bd
 800f44e:	8812      	ldrh	r2, [r2, #0]
 800f450:	b292      	uxth	r2, r2
 800f452:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 800f454:	7b7b      	ldrb	r3, [r7, #13]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	4413      	add	r3, r2
 800f45a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f45e:	2b06      	cmp	r3, #6
 800f460:	d001      	beq.n	800f466 <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800f462:	2305      	movs	r3, #5
 800f464:	e0c0      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800f466:	7b7b      	ldrb	r3, [r7, #13]
 800f468:	3301      	adds	r3, #1
 800f46a:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 800f46c:	7b7b      	ldrb	r3, [r7, #13]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f476:	2b07      	cmp	r3, #7
 800f478:	d801      	bhi.n	800f47e <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 800f47a:	2305      	movs	r3, #5
 800f47c:	e0b4      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800f47e:	7b7b      	ldrb	r3, [r7, #13]
 800f480:	3301      	adds	r3, #1
 800f482:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800f484:	7b7b      	ldrb	r3, [r7, #13]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	4413      	add	r3, r2
 800f48a:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800f494:	7b7b      	ldrb	r3, [r7, #13]
 800f496:	3301      	adds	r3, #1
 800f498:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800f49a:	7b7b      	ldrb	r3, [r7, #13]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800f4aa:	7b7b      	ldrb	r3, [r7, #13]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 800f4b0:	7b7b      	ldrb	r3, [r7, #13]
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f4ba:	061a      	lsls	r2, r3, #24
 800f4bc:	7b7b      	ldrb	r3, [r7, #13]
 800f4be:	3398      	adds	r3, #152	; 0x98
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	440b      	add	r3, r1
 800f4c4:	3304      	adds	r3, #4
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	041b      	lsls	r3, r3, #16
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	7b7b      	ldrb	r3, [r7, #13]
 800f4d0:	3398      	adds	r3, #152	; 0x98
 800f4d2:	6879      	ldr	r1, [r7, #4]
 800f4d4:	440b      	add	r3, r1
 800f4d6:	3304      	adds	r3, #4
 800f4d8:	3302      	adds	r3, #2
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	021b      	lsls	r3, r3, #8
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	7b7a      	ldrb	r2, [r7, #13]
 800f4e2:	3298      	adds	r2, #152	; 0x98
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	440a      	add	r2, r1
 800f4e8:	3204      	adds	r2, #4
 800f4ea:	3203      	adds	r2, #3
 800f4ec:	7812      	ldrb	r2, [r2, #0]
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 800f4f6:	7b7b      	ldrb	r3, [r7, #13]
 800f4f8:	3304      	adds	r3, #4
 800f4fa:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800f4fc:	7b7b      	ldrb	r3, [r7, #13]
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	4413      	add	r3, r2
 800f502:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800f50c:	7b7b      	ldrb	r3, [r7, #13]
 800f50e:	3301      	adds	r3, #1
 800f510:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800f512:	7b7b      	ldrb	r3, [r7, #13]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	4413      	add	r3, r2
 800f518:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800f522:	7b7b      	ldrb	r3, [r7, #13]
 800f524:	3301      	adds	r3, #1
 800f526:	737b      	strb	r3, [r7, #13]
 800f528:	e05d      	b.n	800f5e6 <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 800f52a:	7b7b      	ldrb	r3, [r7, #13]
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	4413      	add	r3, r2
 800f530:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f534:	2b04      	cmp	r3, #4
 800f536:	d001      	beq.n	800f53c <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 800f538:	2305      	movs	r3, #5
 800f53a:	e055      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 800f53c:	7b7b      	ldrb	r3, [r7, #13]
 800f53e:	3301      	adds	r3, #1
 800f540:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 800f542:	7b7b      	ldrb	r3, [r7, #13]
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	4413      	add	r3, r2
 800f548:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f54c:	2b05      	cmp	r3, #5
 800f54e:	d803      	bhi.n	800f558 <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 800f550:	2305      	movs	r3, #5
 800f552:	e049      	b.n	800f5e8 <ndefT4TReadAndParseCCFile+0x320>
 800f554:	08021c04 	.word	0x08021c04
        }
        dataIt++;
 800f558:	7b7b      	ldrb	r3, [r7, #13]
 800f55a:	3301      	adds	r3, #1
 800f55c:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 800f55e:	7b7b      	ldrb	r3, [r7, #13]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 800f56e:	7b7b      	ldrb	r3, [r7, #13]
 800f570:	3301      	adds	r3, #1
 800f572:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 800f574:	7b7b      	ldrb	r3, [r7, #13]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	4413      	add	r3, r2
 800f57a:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 800f584:	7b7b      	ldrb	r3, [r7, #13]
 800f586:	3301      	adds	r3, #1
 800f588:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 800f58a:	7b7b      	ldrb	r3, [r7, #13]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4413      	add	r3, r2
 800f590:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f594:	b29b      	uxth	r3, r3
 800f596:	021b      	lsls	r3, r3, #8
 800f598:	b29a      	uxth	r2, r3
 800f59a:	7b7b      	ldrb	r3, [r7, #13]
 800f59c:	3301      	adds	r3, #1
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	440b      	add	r3, r1
 800f5a2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 800f5b4:	7b7b      	ldrb	r3, [r7, #13]
 800f5b6:	3302      	adds	r3, #2
 800f5b8:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 800f5ba:	7b7b      	ldrb	r3, [r7, #13]
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	4413      	add	r3, r2
 800f5c0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 800f5ca:	7b7b      	ldrb	r3, [r7, #13]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 800f5d0:	7b7b      	ldrb	r3, [r7, #13]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 800f5e0:	7b7b      	ldrb	r3, [r7, #13]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08c      	sub	sp, #48	; 0x30
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00b      	beq.n	800f616 <ndefT4TPollerSelectNdefTagApplication+0x26>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d103      	bne.n	800f60e <ndefT4TPollerSelectNdefTagApplication+0x1e>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	785b      	ldrb	r3, [r3, #1]
 800f60a:	2b20      	cmp	r3, #32
 800f60c:	d005      	beq.n	800f61a <ndefT4TPollerSelectNdefTagApplication+0x2a>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d001      	beq.n	800f61a <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 800f616:	2307      	movs	r3, #7
 800f618:	e03b      	b.n	800f692 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff fddf 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 800f626:	68b8      	ldr	r0, [r7, #8]
 800f628:	f107 0308 	add.w	r3, r7, #8
 800f62c:	3304      	adds	r3, #4
 800f62e:	2207      	movs	r2, #7
 800f630:	491a      	ldr	r1, [pc, #104]	; (800f69c <ndefT4TPollerSelectNdefTagApplication+0xac>)
 800f632:	f00d fd5c 	bl	801d0ee <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800f636:	f107 0308 	add.w	r3, r7, #8
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fe00 	bl	800f242 <ndefT4TTransceiveTxRx>
 800f642:	4603      	mov	r3, r0
 800f644:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800f646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 800f654:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f656:	e01c      	b.n	800f692 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 800f658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f65a:	2b05      	cmp	r3, #5
 800f65c:	d001      	beq.n	800f662 <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 800f65e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f660:	e017      	b.n	800f692 <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 800f662:	68b8      	ldr	r0, [r7, #8]
 800f664:	f107 0308 	add.w	r3, r7, #8
 800f668:	3304      	adds	r3, #4
 800f66a:	2207      	movs	r2, #7
 800f66c:	490c      	ldr	r1, [pc, #48]	; (800f6a0 <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 800f66e:	f00d fd3e 	bl	801d0ee <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800f672:	f107 0308 	add.w	r3, r7, #8
 800f676:	4619      	mov	r1, r3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7ff fde2 	bl	800f242 <ndefT4TTransceiveTxRx>
 800f67e:	4603      	mov	r3, r0
 800f680:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 800f682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 800f690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f692:	4618      	mov	r0, r3
 800f694:	3730      	adds	r7, #48	; 0x30
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	08021c08 	.word	0x08021c08
 800f6a0:	08021c10 	.word	0x08021c10

0800f6a4 <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08c      	sub	sp, #48	; 0x30
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00b      	beq.n	800f6cc <ndefT4TPollerSelectFile+0x28>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d103      	bne.n	800f6c4 <ndefT4TPollerSelectFile+0x20>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	785b      	ldrb	r3, [r3, #1]
 800f6c0:	2b20      	cmp	r3, #32
 800f6c2:	d005      	beq.n	800f6d0 <ndefT4TPollerSelectFile+0x2c>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d001      	beq.n	800f6d0 <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 800f6cc:	2307      	movs	r3, #7
 800f6ce:	e024      	b.n	800f71a <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800f6d0:	f107 0308 	add.w	r3, r7, #8
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f7ff fd84 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d008      	beq.n	800f6f8 <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 800f6e6:	68b8      	ldr	r0, [r7, #8]
 800f6e8:	f107 0308 	add.w	r3, r7, #8
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	2204      	movs	r2, #4
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	f00d fd5c 	bl	801d1ae <rfalT4TPollerComposeSelectFileV1Mapping>
 800f6f6:	e007      	b.n	800f708 <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 800f6f8:	68b8      	ldr	r0, [r7, #8]
 800f6fa:	f107 0308 	add.w	r3, r7, #8
 800f6fe:	3304      	adds	r3, #4
 800f700:	2202      	movs	r2, #2
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	f00d fd23 	bl	801d14e <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800f708:	f107 0308 	add.w	r3, r7, #8
 800f70c:	4619      	mov	r1, r3
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff fd97 	bl	800f242 <ndefT4TTransceiveTxRx>
 800f714:	4603      	mov	r3, r0
 800f716:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 800f718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3730      	adds	r7, #48	; 0x30
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b08c      	sub	sp, #48	; 0x30
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	460b      	mov	r3, r1
 800f72c:	807b      	strh	r3, [r7, #2]
 800f72e:	4613      	mov	r3, r2
 800f730:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d015      	beq.n	800f764 <ndefT4TPollerReadBinary+0x42>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d103      	bne.n	800f748 <ndefT4TPollerReadBinary+0x26>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	785b      	ldrb	r3, [r3, #1]
 800f744:	2b20      	cmp	r3, #32
 800f746:	d003      	beq.n	800f750 <ndefT4TPollerReadBinary+0x2e>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d109      	bne.n	800f764 <ndefT4TPollerReadBinary+0x42>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800f756:	787a      	ldrb	r2, [r7, #1]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d803      	bhi.n	800f764 <ndefT4TPollerReadBinary+0x42>
 800f75c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f760:	2b00      	cmp	r3, #0
 800f762:	da01      	bge.n	800f768 <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 800f764:	2307      	movs	r3, #7
 800f766:	e016      	b.n	800f796 <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800f768:	f107 0308 	add.w	r3, r7, #8
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff fd38 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800f774:	68b8      	ldr	r0, [r7, #8]
 800f776:	f107 0308 	add.w	r3, r7, #8
 800f77a:	3304      	adds	r3, #4
 800f77c:	787a      	ldrb	r2, [r7, #1]
 800f77e:	8879      	ldrh	r1, [r7, #2]
 800f780:	f00d fd45 	bl	801d20e <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800f784:	f107 0308 	add.w	r3, r7, #8
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff fd59 	bl	800f242 <ndefT4TTransceiveTxRx>
 800f790:	4603      	mov	r3, r0
 800f792:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 800f794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f796:	4618      	mov	r0, r3
 800f798:	3730      	adds	r7, #48	; 0x30
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b08e      	sub	sp, #56	; 0x38
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	60f8      	str	r0, [r7, #12]
 800f7a6:	60b9      	str	r1, [r7, #8]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d016      	beq.n	800f7e0 <ndefT4TPollerReadBinaryODO+0x42>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d103      	bne.n	800f7c2 <ndefT4TPollerReadBinaryODO+0x24>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	785b      	ldrb	r3, [r3, #1]
 800f7be:	2b20      	cmp	r3, #32
 800f7c0:	d003      	beq.n	800f7ca <ndefT4TPollerReadBinaryODO+0x2c>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d10a      	bne.n	800f7e0 <ndefT4TPollerReadBinaryODO+0x42>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800f7d0:	79fa      	ldrb	r2, [r7, #7]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d804      	bhi.n	800f7e0 <ndefT4TPollerReadBinaryODO+0x42>
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d301      	bcc.n	800f7e4 <ndefT4TPollerReadBinaryODO+0x46>
    {
        return ERR_PARAM;
 800f7e0:	2307      	movs	r3, #7
 800f7e2:	e016      	b.n	800f812 <ndefT4TPollerReadBinaryODO+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800f7e4:	f107 0310 	add.w	r3, r7, #16
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff fcfa 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 800f7f0:	6938      	ldr	r0, [r7, #16]
 800f7f2:	f107 0310 	add.w	r3, r7, #16
 800f7f6:	3304      	adds	r3, #4
 800f7f8:	79fa      	ldrb	r2, [r7, #7]
 800f7fa:	68b9      	ldr	r1, [r7, #8]
 800f7fc:	f00d fd30 	bl	801d260 <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800f800:	f107 0310 	add.w	r3, r7, #16
 800f804:	4619      	mov	r1, r3
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f7ff fd1b 	bl	800f242 <ndefT4TTransceiveTxRx>
 800f80c:	4603      	mov	r3, r0
 800f80e:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800f810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 800f812:	4618      	mov	r0, r3
 800f814:	3738      	adds	r7, #56	; 0x38
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b08a      	sub	sp, #40	; 0x28
 800f81e:	af00      	add	r7, sp, #0
 800f820:	60f8      	str	r0, [r7, #12]
 800f822:	60b9      	str	r1, [r7, #8]
 800f824:	607a      	str	r2, [r7, #4]
 800f826:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00e      	beq.n	800f858 <ndefT4TPollerReadBytes+0x3e>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d103      	bne.n	800f84a <ndefT4TPollerReadBytes+0x30>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	785b      	ldrb	r3, [r3, #1]
 800f846:	2b20      	cmp	r3, #32
 800f848:	d003      	beq.n	800f852 <ndefT4TPollerReadBytes+0x38>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d102      	bne.n	800f858 <ndefT4TPollerReadBytes+0x3e>
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 800f858:	2307      	movs	r3, #7
 800f85a:	e06c      	b.n	800f936 <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d002      	beq.n	800f868 <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	2200      	movs	r2, #0
 800f866:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800f86e:	461a      	mov	r2, r3
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	4293      	cmp	r3, r2
 800f874:	d903      	bls.n	800f87e <ndefT4TPollerReadBytes+0x64>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800f87c:	e001      	b.n	800f882 <ndefT4TPollerReadBytes+0x68>
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	b2db      	uxtb	r3, r3
 800f882:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f88a:	d308      	bcc.n	800f89e <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 800f88c:	7dfb      	ldrb	r3, [r7, #23]
 800f88e:	461a      	mov	r2, r3
 800f890:	6a39      	ldr	r1, [r7, #32]
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff ff83 	bl	800f79e <ndefT4TPollerReadBinaryODO>
 800f898:	4603      	mov	r3, r0
 800f89a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f89c:	e008      	b.n	800f8b0 <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 800f89e:	6a3b      	ldr	r3, [r7, #32]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	7dfa      	ldrb	r2, [r7, #23]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f7ff ff3b 	bl	800f722 <ndefT4TPollerReadBinary>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 800f8b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 800f8b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8b8:	e03d      	b.n	800f936 <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d036      	beq.n	800f932 <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d201      	bcs.n	800f8d6 <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	e02f      	b.n	800f936 <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f203 41bd 	addw	r1, r3, #1213	; 0x4bd
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	69b8      	ldr	r0, [r7, #24]
 800f8e6:	f00d fe1f 	bl	801d528 <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f8fe:	461a      	mov	r2, r3
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	4413      	add	r3, r2
 800f904:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8b3 39d0 	ldrh.w	r3, [r3, #2512]	; 0x9d0
 800f90c:	461a      	mov	r2, r3
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	1a9b      	subs	r3, r3, r2
 800f912:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	2b00      	cmp	r3, #0
 800f918:	d007      	beq.n	800f92a <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	f8b2 29d0 	ldrh.w	r2, [r2, #2512]	; 0x9d0
 800f924:	441a      	add	r2, r3
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d19b      	bne.n	800f868 <ndefT4TPollerReadBytes+0x4e>
 800f930:	e000      	b.n	800f934 <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800f932:	bf00      	nop

    return ERR_NONE;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3728      	adds	r7, #40	; 0x28
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b082      	sub	sp, #8
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00e      	beq.n	800f96c <ndefT4TPollerContextInitialization+0x2e>
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00b      	beq.n	800f96c <ndefT4TPollerContextInitialization+0x2e>
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d103      	bne.n	800f964 <ndefT4TPollerContextInitialization+0x26>
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	785b      	ldrb	r3, [r3, #1]
 800f960:	2b20      	cmp	r3, #32
 800f962:	d005      	beq.n	800f970 <ndefT4TPollerContextInitialization+0x32>
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d001      	beq.n	800f970 <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800f96c:	2307      	movs	r3, #7
 800f96e:	e012      	b.n	800f996 <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2278      	movs	r2, #120	; 0x78
 800f974:	6839      	ldr	r1, [r7, #0]
 800f976:	4618      	mov	r0, r3
 800f978:	f00d fdd6 	bl	801d528 <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	220d      	movs	r2, #13
 800f988:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	220f      	movs	r2, #15
 800f990:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b084      	sub	sp, #16
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d011      	beq.n	800f9d2 <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <ndefT4TPollerNdefDetect+0x52>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d103      	bne.n	800f9e8 <ndefT4TPollerNdefDetect+0x4a>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	785b      	ldrb	r3, [r3, #1]
 800f9e4:	2b20      	cmp	r3, #32
 800f9e6:	d005      	beq.n	800f9f4 <ndefT4TPollerNdefDetect+0x56>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d001      	beq.n	800f9f4 <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800f9f0:	2307      	movs	r3, #7
 800f9f2:	e0fa      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff fdf7 	bl	800f5f0 <ndefT4TPollerSelectNdefTagApplication>
 800fa02:	4603      	mov	r3, r0
 800fa04:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800fa06:	89fb      	ldrh	r3, [r7, #14]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800fa0c:	89fb      	ldrh	r3, [r7, #14]
 800fa0e:	e0ec      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff fc59 	bl	800f2c8 <ndefT4TReadAndParseCCFile>
 800fa16:	4603      	mov	r3, r0
 800fa18:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800fa1a:	89fb      	ldrh	r3, [r7, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800fa20:	89fb      	ldrh	r3, [r7, #14]
 800fa22:	e0e2      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800fa2a:	091b      	lsrs	r3, r3, #4
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	d101      	bne.n	800fa36 <ndefT4TPollerNdefDetect+0x98>
 800fa32:	2304      	movs	r3, #4
 800fa34:	e000      	b.n	800fa38 <ndefT4TPollerNdefDetect+0x9a>
 800fa36:	2302      	movs	r3, #2
 800fa38:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00c      	beq.n	800fa5e <ndefT4TPollerNdefDetect+0xc0>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fa4a:	b25b      	sxtb	r3, r3
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	da04      	bge.n	800fa5a <ndefT4TPollerNdefDetect+0xbc>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fa56:	2bff      	cmp	r3, #255	; 0xff
 800fa58:	d101      	bne.n	800fa5e <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800fa5a:	2305      	movs	r3, #5
 800fa5c:	e0c5      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fa64:	7b7b      	ldrb	r3, [r7, #13]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d201      	bcs.n	800fa6e <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800fa6a:	2305      	movs	r3, #5
 800fa6c:	e0bd      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	3384      	adds	r3, #132	; 0x84
 800fa72:	4619      	mov	r1, r3
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7ff fe15 	bl	800f6a4 <ndefT4TPollerSelectFile>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800fa7e:	89fb      	ldrh	r3, [r7, #14]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800fa84:	89fb      	ldrh	r3, [r7, #14]
 800fa86:	e0b0      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800fa88:	7b7b      	ldrb	r3, [r7, #13]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7ff fe47 	bl	800f722 <ndefT4TPollerReadBinary>
 800fa94:	4603      	mov	r3, r0
 800fa96:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800fa98:	89fb      	ldrh	r3, [r7, #14]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800fa9e:	89fb      	ldrh	r3, [r7, #14]
 800faa0:	e0a3      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f203 43bd 	addw	r3, r3, #1213	; 0x4bd
 800faa8:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800faaa:	7b7b      	ldrb	r3, [r7, #13]
 800faac:	2b04      	cmp	r3, #4
 800faae:	d111      	bne.n	800fad4 <ndefT4TPollerNdefDetect+0x136>
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	061a      	lsls	r2, r3, #24
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	3301      	adds	r3, #1
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	041b      	lsls	r3, r3, #16
 800fabe:	431a      	orrs	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	3302      	adds	r3, #2
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	021b      	lsls	r3, r3, #8
 800fac8:	4313      	orrs	r3, r2
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	3203      	adds	r2, #3
 800face:	7812      	ldrb	r2, [r2, #0]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	e00a      	b.n	800faea <ndefT4TPollerNdefDetect+0x14c>
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	021b      	lsls	r3, r3, #8
 800fadc:	b29a      	uxth	r2, r3
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3301      	adds	r3, #1
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	4313      	orrs	r3, r2
 800fae8:	b29b      	uxth	r3, r3
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800faf0:	7b7a      	ldrb	r2, [r7, #13]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800fb10:	7b7b      	ldrb	r3, [r7, #13]
 800fb12:	1acb      	subs	r3, r1, r3
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d809      	bhi.n	800fb2c <ndefT4TPollerNdefDetect+0x18e>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <ndefT4TPollerNdefDetect+0x192>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d801      	bhi.n	800fb30 <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800fb2c:	2305      	movs	r3, #5
 800fb2e:	e05c      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d116      	bne.n	800fb68 <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00c      	beq.n	800fb5e <ndefT4TPollerNdefDetect+0x1c0>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb4a:	b25b      	sxtb	r3, r3
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	da04      	bge.n	800fb5a <ndefT4TPollerNdefDetect+0x1bc>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb56:	2bff      	cmp	r3, #255	; 0xff
 800fb58:	d101      	bne.n	800fb5e <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800fb5a:	2305      	movs	r3, #5
 800fb5c:	e045      	b.n	800fbea <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2201      	movs	r2, #1
 800fb62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800fb66:	e015      	b.n	800fb94 <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00a      	beq.n	800fb88 <ndefT4TPollerNdefDetect+0x1ea>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	da06      	bge.n	800fb8c <ndefT4TPollerNdefDetect+0x1ee>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800fb84:	2bff      	cmp	r3, #255	; 0xff
 800fb86:	d001      	beq.n	800fb8c <ndefT4TPollerNdefDetect+0x1ee>
 800fb88:	2202      	movs	r2, #2
 800fb8a:	e000      	b.n	800fb8e <ndefT4TPollerNdefDetect+0x1f0>
 800fb8c:	2203      	movs	r2, #3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d026      	beq.n	800fbe8 <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800fbaa:	091b      	lsrs	r3, r3, #4
 800fbac:	b2da      	uxtb	r2, r3
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800fbb8:	f003 030f 	and.w	r3, r3, #15
 800fbbc:	b2da      	uxtb	r2, r3
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbd8:	1ad2      	subs	r2, r2, r3
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b088      	sub	sp, #32
 800fbf6:	af02      	add	r7, sp, #8
 800fbf8:	60f8      	str	r0, [r7, #12]
 800fbfa:	60b9      	str	r1, [r7, #8]
 800fbfc:	607a      	str	r2, [r7, #4]
 800fbfe:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d00e      	beq.n	800fc24 <ndefT4TPollerReadRawMessage+0x32>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d103      	bne.n	800fc16 <ndefT4TPollerReadRawMessage+0x24>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	785b      	ldrb	r3, [r3, #1]
 800fc12:	2b20      	cmp	r3, #32
 800fc14:	d003      	beq.n	800fc1e <ndefT4TPollerReadRawMessage+0x2c>
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d102      	bne.n	800fc24 <ndefT4TPollerReadRawMessage+0x32>
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d101      	bne.n	800fc28 <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800fc24:	2307      	movs	r3, #7
 800fc26:	e024      	b.n	800fc72 <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d801      	bhi.n	800fc36 <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800fc32:	2321      	movs	r3, #33	; 0x21
 800fc34:	e01d      	b.n	800fc72 <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d201      	bcs.n	800fc46 <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e015      	b.n	800fc72 <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7ff fdde 	bl	800f81a <ndefT4TPollerReadBytes>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800fc62:	8afb      	ldrh	r3, [r7, #22]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d003      	beq.n	800fc70 <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800fc70:	8afb      	ldrh	r3, [r7, #22]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3718      	adds	r7, #24
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b090      	sub	sp, #64	; 0x40
 800fc7e:	af02      	add	r7, sp, #8
 800fc80:	60f8      	str	r0, [r7, #12]
 800fc82:	607a      	str	r2, [r7, #4]
 800fc84:	461a      	mov	r2, r3
 800fc86:	460b      	mov	r3, r1
 800fc88:	817b      	strh	r3, [r7, #10]
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d015      	beq.n	800fcc0 <ndefT4TPollerWriteBinary+0x46>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d103      	bne.n	800fca4 <ndefT4TPollerWriteBinary+0x2a>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	785b      	ldrb	r3, [r3, #1]
 800fca0:	2b20      	cmp	r3, #32
 800fca2:	d003      	beq.n	800fcac <ndefT4TPollerWriteBinary+0x32>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d109      	bne.n	800fcc0 <ndefT4TPollerWriteBinary+0x46>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fcb2:	7a7a      	ldrb	r2, [r7, #9]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d803      	bhi.n	800fcc0 <ndefT4TPollerWriteBinary+0x46>
 800fcb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	da01      	bge.n	800fcc4 <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800fcc0:	2307      	movs	r3, #7
 800fcc2:	e019      	b.n	800fcf8 <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800fcc4:	f107 0310 	add.w	r3, r7, #16
 800fcc8:	4619      	mov	r1, r3
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7ff fa8a 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800fcd0:	6938      	ldr	r0, [r7, #16]
 800fcd2:	7a7a      	ldrb	r2, [r7, #9]
 800fcd4:	8979      	ldrh	r1, [r7, #10]
 800fcd6:	f107 0310 	add.w	r3, r7, #16
 800fcda:	3304      	adds	r3, #4
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	4613      	mov	r3, r2
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	f00d fb1e 	bl	801d322 <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800fce6:	f107 0310 	add.w	r3, r7, #16
 800fcea:	4619      	mov	r1, r3
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f7ff faa8 	bl	800f242 <ndefT4TTransceiveTxRx>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800fcf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3738      	adds	r7, #56	; 0x38
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b090      	sub	sp, #64	; 0x40
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
 800fd0c:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d016      	beq.n	800fd42 <ndefT4TPollerWriteBinaryODO+0x42>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d103      	bne.n	800fd24 <ndefT4TPollerWriteBinaryODO+0x24>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	785b      	ldrb	r3, [r3, #1]
 800fd20:	2b20      	cmp	r3, #32
 800fd22:	d003      	beq.n	800fd2c <ndefT4TPollerWriteBinaryODO+0x2c>
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d10a      	bne.n	800fd42 <ndefT4TPollerWriteBinaryODO+0x42>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fd32:	78fa      	ldrb	r2, [r7, #3]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d804      	bhi.n	800fd42 <ndefT4TPollerWriteBinaryODO+0x42>
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d301      	bcc.n	800fd46 <ndefT4TPollerWriteBinaryODO+0x46>
    {
        return ERR_PARAM;
 800fd42:	2307      	movs	r3, #7
 800fd44:	e019      	b.n	800fd7a <ndefT4TPollerWriteBinaryODO+0x7a>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800fd46:	f107 0310 	add.w	r3, r7, #16
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fa49 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800fd52:	6938      	ldr	r0, [r7, #16]
 800fd54:	78fa      	ldrb	r2, [r7, #3]
 800fd56:	f107 0310 	add.w	r3, r7, #16
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	68b9      	ldr	r1, [r7, #8]
 800fd64:	f00d fb11 	bl	801d38a <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800fd68:	f107 0310 	add.w	r3, r7, #16
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f7ff fa67 	bl	800f242 <ndefT4TTransceiveTxRx>
 800fd74:	4603      	mov	r3, r0
 800fd76:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800fd78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3738      	adds	r7, #56	; 0x38
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b088      	sub	sp, #32
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	607a      	str	r2, [r7, #4]
 800fd8e:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00e      	beq.n	800fdc0 <ndefT4TPollerWriteBytes+0x3e>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d103      	bne.n	800fdb2 <ndefT4TPollerWriteBytes+0x30>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	785b      	ldrb	r3, [r3, #1]
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	d003      	beq.n	800fdba <ndefT4TPollerWriteBytes+0x38>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d102      	bne.n	800fdc0 <ndefT4TPollerWriteBytes+0x3e>
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800fdc0:	2307      	movs	r3, #7
 800fdc2:	e048      	b.n	800fe56 <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdca:	d318      	bcc.n	800fdfe <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fdd2:	3b07      	subs	r3, #7
 800fdd4:	697a      	ldr	r2, [r7, #20]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d905      	bls.n	800fde6 <ndefT4TPollerWriteBytes+0x64>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fde0:	3b07      	subs	r3, #7
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	e001      	b.n	800fdea <ndefT4TPollerWriteBytes+0x68>
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800fdec:	7f7b      	ldrb	r3, [r7, #29]
 800fdee:	693a      	ldr	r2, [r7, #16]
 800fdf0:	69b9      	ldr	r1, [r7, #24]
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f7ff ff84 	bl	800fd00 <ndefT4TPollerWriteBinaryODO>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	83fb      	strh	r3, [r7, #30]
 800fdfc:	e016      	b.n	800fe2c <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fe04:	461a      	mov	r2, r3
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d903      	bls.n	800fe14 <ndefT4TPollerWriteBytes+0x92>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800fe12:	e001      	b.n	800fe18 <ndefT4TPollerWriteBytes+0x96>
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	b299      	uxth	r1, r3
 800fe1e:	7f7b      	ldrb	r3, [r7, #29]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f7ff ff29 	bl	800fc7a <ndefT4TPollerWriteBinary>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800fe2c:	8bfb      	ldrh	r3, [r7, #30]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800fe32:	8bfb      	ldrh	r3, [r7, #30]
 800fe34:	e00f      	b.n	800fe56 <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800fe36:	7f7b      	ldrb	r3, [r7, #29]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800fe3e:	7f7b      	ldrb	r3, [r7, #29]
 800fe40:	69ba      	ldr	r2, [r7, #24]
 800fe42:	4413      	add	r3, r2
 800fe44:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800fe46:	7f7b      	ldrb	r3, [r7, #29]
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1b7      	bne.n	800fdc4 <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3720      	adds	r7, #32
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00b      	beq.n	800fe86 <ndefT4TPollerWriteRawMessageLen+0x28>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d103      	bne.n	800fe7e <ndefT4TPollerWriteRawMessageLen+0x20>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	785b      	ldrb	r3, [r3, #1]
 800fe7a:	2b20      	cmp	r3, #32
 800fe7c:	d005      	beq.n	800fe8a <ndefT4TPollerWriteRawMessageLen+0x2c>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d001      	beq.n	800fe8a <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800fe86:	2307      	movs	r3, #7
 800fe88:	e05f      	b.n	800ff4a <ndefT4TPollerWriteRawMessageLen+0xec>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d006      	beq.n	800fea2 <ndefT4TPollerWriteRawMessageLen+0x44>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	d001      	beq.n	800fea2 <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800fe9e:	2321      	movs	r3, #33	; 0x21
 800fea0:	e053      	b.n	800ff4a <ndefT4TPollerWriteRawMessageLen+0xec>
    }

    dataIt = 0U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800feac:	091b      	lsrs	r3, r3, #4
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d12b      	bne.n	800ff0c <ndefT4TPollerWriteRawMessageLen+0xae>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	0e1a      	lsrs	r2, r3, #24
 800feb8:	7bfb      	ldrb	r3, [r7, #15]
 800feba:	b2d2      	uxtb	r2, r2
 800febc:	3310      	adds	r3, #16
 800febe:	443b      	add	r3, r7
 800fec0:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
 800fec6:	3301      	adds	r3, #1
 800fec8:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	0c1a      	lsrs	r2, r3, #16
 800fece:	7bfb      	ldrb	r3, [r7, #15]
 800fed0:	b2d2      	uxtb	r2, r2
 800fed2:	3310      	adds	r3, #16
 800fed4:	443b      	add	r3, r7
 800fed6:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800feda:	7bfb      	ldrb	r3, [r7, #15]
 800fedc:	3301      	adds	r3, #1
 800fede:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	0a1a      	lsrs	r2, r3, #8
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	b2d2      	uxtb	r2, r2
 800fee8:	3310      	adds	r3, #16
 800feea:	443b      	add	r3, r7
 800feec:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800fef0:	7bfb      	ldrb	r3, [r7, #15]
 800fef2:	3301      	adds	r3, #1
 800fef4:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	683a      	ldr	r2, [r7, #0]
 800fefa:	b2d2      	uxtb	r2, r2
 800fefc:	3310      	adds	r3, #16
 800fefe:	443b      	add	r3, r7
 800ff00:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	3301      	adds	r3, #1
 800ff08:	73fb      	strb	r3, [r7, #15]
 800ff0a:	e014      	b.n	800ff36 <ndefT4TPollerWriteRawMessageLen+0xd8>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	0a1a      	lsrs	r2, r3, #8
 800ff10:	7bfb      	ldrb	r3, [r7, #15]
 800ff12:	b2d2      	uxtb	r2, r2
 800ff14:	3310      	adds	r3, #16
 800ff16:	443b      	add	r3, r7
 800ff18:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800ff22:	7bfb      	ldrb	r3, [r7, #15]
 800ff24:	683a      	ldr	r2, [r7, #0]
 800ff26:	b2d2      	uxtb	r2, r2
 800ff28:	3310      	adds	r3, #16
 800ff2a:	443b      	add	r3, r7
 800ff2c:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	3301      	adds	r3, #1
 800ff34:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
 800ff38:	f107 0208 	add.w	r2, r7, #8
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7ff ff1f 	bl	800fd82 <ndefT4TPollerWriteBytes>
 800ff44:	4603      	mov	r3, r0
 800ff46:	81bb      	strh	r3, [r7, #12]
    return ret;
 800ff48:	89bb      	ldrh	r3, [r7, #12]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b086      	sub	sp, #24
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	60f8      	str	r0, [r7, #12]
 800ff5a:	60b9      	str	r1, [r7, #8]
 800ff5c:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d011      	beq.n	800ff88 <ndefT4TPollerWriteRawMessage+0x36>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d103      	bne.n	800ff74 <ndefT4TPollerWriteRawMessage+0x22>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	785b      	ldrb	r3, [r3, #1]
 800ff70:	2b20      	cmp	r3, #32
 800ff72:	d003      	beq.n	800ff7c <ndefT4TPollerWriteRawMessage+0x2a>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d105      	bne.n	800ff88 <ndefT4TPollerWriteRawMessage+0x36>
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d104      	bne.n	800ff8c <ndefT4TPollerWriteRawMessage+0x3a>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800ff88:	2307      	movs	r3, #7
 800ff8a:	e04b      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d006      	beq.n	800ffa4 <ndefT4TPollerWriteRawMessage+0x52>
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d001      	beq.n	800ffa4 <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800ffa0:	2321      	movs	r3, #33	; 0x21
 800ffa2:	e03f      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800ffa4:	6879      	ldr	r1, [r7, #4]
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f000 f8dd 	bl	8010166 <ndefT4TPollerCheckAvailableSpace>
 800ffac:	4603      	mov	r3, r0
 800ffae:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ffb0:	8afb      	ldrh	r3, [r7, #22]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d001      	beq.n	800ffba <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800ffb6:	2307      	movs	r3, #7
 800ffb8:	e034      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f000 f90a 	bl	80101d6 <ndefT4TPollerBeginWriteMessage>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800ffc6:	8afb      	ldrh	r3, [r7, #22]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d005      	beq.n	800ffd8 <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800ffd4:	8afb      	ldrh	r3, [r7, #22]
 800ffd6:	e025      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d021      	beq.n	8010022 <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7ff feca 	bl	800fd82 <ndefT4TPollerWriteBytes>
 800ffee:	4603      	mov	r3, r0
 800fff0:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800fff2:	8afb      	ldrh	r3, [r7, #22]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 8010000:	8afb      	ldrh	r3, [r7, #22]
 8010002:	e00f      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 8010004:	6879      	ldr	r1, [r7, #4]
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 f91f 	bl	801024a <ndefT4TPollerEndWriteMessage>
 801000c:	4603      	mov	r3, r0
 801000e:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 8010010:	8afb      	ldrh	r3, [r7, #22]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d005      	beq.n	8010022 <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2200      	movs	r2, #0
 801001a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 801001e:	8afb      	ldrh	r3, [r7, #22]
 8010020:	e000      	b.n	8010024 <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 8010022:	8afb      	ldrh	r3, [r7, #22]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3718      	adds	r7, #24
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00b      	beq.n	8010056 <ndefT4TPollerTagFormat+0x2a>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d103      	bne.n	801004e <ndefT4TPollerTagFormat+0x22>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	785b      	ldrb	r3, [r3, #1]
 801004a:	2b20      	cmp	r3, #32
 801004c:	d005      	beq.n	801005a <ndefT4TPollerTagFormat+0x2e>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d001      	beq.n	801005a <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 8010056:	2307      	movs	r3, #7
 8010058:	e03a      	b.n	80100d0 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7ff fac8 	bl	800f5f0 <ndefT4TPollerSelectNdefTagApplication>
 8010060:	4603      	mov	r3, r0
 8010062:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8010064:	8afb      	ldrh	r3, [r7, #22]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 801006a:	8afb      	ldrh	r3, [r7, #22]
 801006c:	e030      	b.n	80100d0 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff f92a 	bl	800f2c8 <ndefT4TReadAndParseCCFile>
 8010074:	4603      	mov	r3, r0
 8010076:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8010078:	8afb      	ldrh	r3, [r7, #22]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 801007e:	8afb      	ldrh	r3, [r7, #22]
 8010080:	e026      	b.n	80100d0 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3384      	adds	r3, #132	; 0x84
 8010086:	4619      	mov	r1, r3
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f7ff fb0b 	bl	800f6a4 <ndefT4TPollerSelectFile>
 801008e:	4603      	mov	r3, r0
 8010090:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8010092:	8afb      	ldrh	r3, [r7, #22]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 8010098:	8afb      	ldrh	r3, [r7, #22]
 801009a:	e019      	b.n	80100d0 <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	2204      	movs	r2, #4
 80100a2:	2100      	movs	r1, #0
 80100a4:	4618      	mov	r0, r3
 80100a6:	f00d fa67 	bl	801d578 <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80100b0:	091b      	lsrs	r3, r3, #4
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2b03      	cmp	r3, #3
 80100b6:	d101      	bne.n	80100bc <ndefT4TPollerTagFormat+0x90>
 80100b8:	2304      	movs	r3, #4
 80100ba:	e000      	b.n	80100be <ndefT4TPollerTagFormat+0x92>
 80100bc:	2302      	movs	r3, #2
 80100be:	f107 0210 	add.w	r2, r7, #16
 80100c2:	2100      	movs	r1, #0
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f7ff fe5c 	bl	800fd82 <ndefT4TPollerWriteBytes>
 80100ca:	4603      	mov	r3, r0
 80100cc:	82fb      	strh	r3, [r7, #22]
    return ret;
 80100ce:	8afb      	ldrh	r3, [r7, #22]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 80100d8:	b5b0      	push	{r4, r5, r7, lr}
 80100da:	b092      	sub	sp, #72	; 0x48
 80100dc:	af06      	add	r7, sp, #24
 80100de:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00b      	beq.n	80100fe <ndefT4TPollerCheckPresence+0x26>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d103      	bne.n	80100f6 <ndefT4TPollerCheckPresence+0x1e>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	785b      	ldrb	r3, [r3, #1]
 80100f2:	2b20      	cmp	r3, #32
 80100f4:	d005      	beq.n	8010102 <ndefT4TPollerCheckPresence+0x2a>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d001      	beq.n	8010102 <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 80100fe:	2307      	movs	r3, #7
 8010100:	e02d      	b.n	801015e <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 8010102:	f107 0308 	add.w	r3, r7, #8
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff f86b 	bl	800f1e4 <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 801010e:	68b8      	ldr	r0, [r7, #8]
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	3304      	adds	r3, #4
 8010116:	2201      	movs	r2, #1
 8010118:	2100      	movs	r1, #0
 801011a:	f00d f878 	bl	801d20e <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8010130:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 8010132:	466d      	mov	r5, sp
 8010134:	f107 0418 	add.w	r4, r7, #24
 8010138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801013a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801013c:	6823      	ldr	r3, [r4, #0]
 801013e:	602b      	str	r3, [r5, #0]
 8010140:	f107 0308 	add.w	r3, r7, #8
 8010144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010146:	f003 faff 	bl	8013748 <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 801014a:	f00a fb47 	bl	801a7dc <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 801014e:	f003 fb4b 	bl	80137e8 <rfalIsoDepGetApduTransceiveStatus>
 8010152:	4603      	mov	r3, r0
 8010154:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 8010156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010158:	2b02      	cmp	r3, #2
 801015a:	d0f6      	beq.n	801014a <ndefT4TPollerCheckPresence+0x72>

    return ret;
 801015c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 801015e:	4618      	mov	r0, r3
 8010160:	3730      	adds	r7, #48	; 0x30
 8010162:	46bd      	mov	sp, r7
 8010164:	bdb0      	pop	{r4, r5, r7, pc}

08010166 <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 8010166:	b480      	push	{r7}
 8010168:	b085      	sub	sp, #20
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00b      	beq.n	801018e <ndefT4TPollerCheckAvailableSpace+0x28>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d103      	bne.n	8010186 <ndefT4TPollerCheckAvailableSpace+0x20>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	785b      	ldrb	r3, [r3, #1]
 8010182:	2b20      	cmp	r3, #32
 8010184:	d005      	beq.n	8010192 <ndefT4TPollerCheckAvailableSpace+0x2c>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d001      	beq.n	8010192 <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 801018e:	2307      	movs	r3, #7
 8010190:	e01c      	b.n	80101cc <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 801019c:	2321      	movs	r3, #33	; 0x21
 801019e:	e015      	b.n	80101cc <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80101a6:	091b      	lsrs	r3, r3, #4
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d101      	bne.n	80101b2 <ndefT4TPollerCheckAvailableSpace+0x4c>
 80101ae:	2304      	movs	r3, #4
 80101b0:	e000      	b.n	80101b4 <ndefT4TPollerCheckAvailableSpace+0x4e>
 80101b2:	2302      	movs	r3, #2
 80101b4:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 80101b6:	7bfa      	ldrb	r2, [r7, #15]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	441a      	add	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d901      	bls.n	80101ca <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 80101c6:	2301      	movs	r3, #1
 80101c8:	e000      	b.n	80101cc <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bc80      	pop	{r7}
 80101d4:	4770      	bx	lr

080101d6 <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b084      	sub	sp, #16
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00b      	beq.n	80101fe <ndefT4TPollerBeginWriteMessage+0x28>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d103      	bne.n	80101f6 <ndefT4TPollerBeginWriteMessage+0x20>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	785b      	ldrb	r3, [r3, #1]
 80101f2:	2b20      	cmp	r3, #32
 80101f4:	d005      	beq.n	8010202 <ndefT4TPollerBeginWriteMessage+0x2c>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d001      	beq.n	8010202 <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 80101fe:	2307      	movs	r3, #7
 8010200:	e01f      	b.n	8010242 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010208:	2b01      	cmp	r3, #1
 801020a:	d006      	beq.n	801021a <ndefT4TPollerBeginWriteMessage+0x44>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010212:	2b02      	cmp	r3, #2
 8010214:	d001      	beq.n	801021a <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 8010216:	2321      	movs	r3, #33	; 0x21
 8010218:	e013      	b.n	8010242 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 801021a:	2100      	movs	r1, #0
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff fe1e 	bl	800fe5e <ndefT4TPollerWriteRawMessageLen>
 8010222:	4603      	mov	r3, r0
 8010224:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8010226:	89fb      	ldrh	r3, [r7, #14]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d005      	beq.n	8010238 <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8010234:	89fb      	ldrh	r3, [r7, #14]
 8010236:	e004      	b.n	8010242 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2201      	movs	r2, #1
 801023c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b084      	sub	sp, #16
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00b      	beq.n	8010272 <ndefT4TPollerEndWriteMessage+0x28>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d103      	bne.n	801026a <ndefT4TPollerEndWriteMessage+0x20>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	785b      	ldrb	r3, [r3, #1]
 8010266:	2b20      	cmp	r3, #32
 8010268:	d005      	beq.n	8010276 <ndefT4TPollerEndWriteMessage+0x2c>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d001      	beq.n	8010276 <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 8010272:	2307      	movs	r3, #7
 8010274:	e025      	b.n	80102c2 <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801027c:	2b01      	cmp	r3, #1
 801027e:	d001      	beq.n	8010284 <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 8010280:	2321      	movs	r3, #33	; 0x21
 8010282:	e01e      	b.n	80102c2 <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff fde9 	bl	800fe5e <ndefT4TPollerWriteRawMessageLen>
 801028c:	4603      	mov	r3, r0
 801028e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8010290:	89fb      	ldrh	r3, [r7, #14]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 801029e:	89fb      	ldrh	r3, [r7, #14]
 80102a0:	e00f      	b.n	80102c2 <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	683a      	ldr	r2, [r7, #0]
 80102a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d101      	bne.n	80102b8 <ndefT4TPollerEndWriteMessage+0x6e>
 80102b4:	2201      	movs	r2, #1
 80102b6:	e000      	b.n	80102ba <ndefT4TPollerEndWriteMessage+0x70>
 80102b8:	2202      	movs	r2, #2
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b08c      	sub	sp, #48	; 0x30
 80102ce:	af02      	add	r7, sp, #8
 80102d0:	60f8      	str	r0, [r7, #12]
 80102d2:	60b9      	str	r1, [r7, #8]
 80102d4:	607a      	str	r2, [r7, #4]
 80102d6:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 80102d8:	2307      	movs	r3, #7
 80102da:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 80102e0:	2300      	movs	r3, #0
 80102e2:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 80ef 	beq.w	80104ca <ndefT5TPollerReadBytes+0x200>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 80e9 	beq.w	80104ca <ndefT5TPollerReadBytes+0x200>
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f000 80e5 	beq.w	80104ca <ndefT5TPollerReadBytes+0x200>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80e1 	beq.w	80104ca <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801030e:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 8010310:	8b7b      	ldrh	r3, [r7, #26]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d101      	bne.n	801031a <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 8010316:	2308      	movs	r3, #8
 8010318:	e0e3      	b.n	80104e2 <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 801031a:	8b7b      	ldrh	r3, [r7, #26]
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010322:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 8010324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010326:	8b7a      	ldrh	r2, [r7, #26]
 8010328:	fb02 f303 	mul.w	r3, r2, r3
 801032c:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010334:	8b7b      	ldrh	r3, [r7, #26]
 8010336:	3303      	adds	r3, #3
 8010338:	b298      	uxth	r0, r3
 801033a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801033c:	f107 0312 	add.w	r3, r7, #18
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	4603      	mov	r3, r0
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f001 f932 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 801034a:	4603      	mov	r3, r0
 801034c:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 801034e:	8afb      	ldrh	r3, [r7, #22]
 8010350:	2b00      	cmp	r3, #0
 8010352:	f040 80ba 	bne.w	80104ca <ndefT5TPollerReadBytes+0x200>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 801035c:	2b00      	cmp	r3, #0
 801035e:	f040 80b4 	bne.w	80104ca <ndefT5TPollerReadBytes+0x200>
 8010362:	8a7b      	ldrh	r3, [r7, #18]
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 80b0 	beq.w	80104ca <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 801036a:	8a7a      	ldrh	r2, [r7, #18]
 801036c:	8b3b      	ldrh	r3, [r7, #24]
 801036e:	4413      	add	r3, r2
 8010370:	b29a      	uxth	r2, r3
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	b29b      	uxth	r3, r3
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	b29b      	uxth	r3, r3
 801037a:	3b01      	subs	r3, #1
 801037c:	b29b      	uxth	r3, r3
 801037e:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 8010380:	8a7b      	ldrh	r3, [r7, #18]
 8010382:	461a      	mov	r2, r3
 8010384:	6a3b      	ldr	r3, [r7, #32]
 8010386:	4293      	cmp	r3, r2
 8010388:	d202      	bcs.n	8010390 <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	b29b      	uxth	r3, r3
 801038e:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 8010390:	8a7b      	ldrh	r3, [r7, #18]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00e      	beq.n	80103b4 <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	b29b      	uxth	r3, r3
 801039a:	461a      	mov	r2, r3
 801039c:	8b3b      	ldrh	r3, [r7, #24]
 801039e:	1ad3      	subs	r3, r2, r3
 80103a0:	3301      	adds	r3, #1
 80103a2:	33d0      	adds	r3, #208	; 0xd0
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4413      	add	r3, r2
 80103a8:	3304      	adds	r3, #4
 80103aa:	8a7a      	ldrh	r2, [r7, #18]
 80103ac:	4619      	mov	r1, r3
 80103ae:	6838      	ldr	r0, [r7, #0]
 80103b0:	f00d f8ba 	bl	801d528 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 80103b4:	8a7b      	ldrh	r3, [r7, #18]
 80103b6:	461a      	mov	r2, r3
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	4413      	add	r3, r2
 80103bc:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 80103be:	8a7b      	ldrh	r3, [r7, #18]
 80103c0:	461a      	mov	r2, r3
 80103c2:	6a3b      	ldr	r3, [r7, #32]
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 80103c8:	e036      	b.n	8010438 <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 80103ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103cc:	3301      	adds	r3, #1
 80103ce:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	683a      	ldr	r2, [r7, #0]
 80103d6:	4413      	add	r3, r2
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	3b01      	subs	r3, #1
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	441a      	add	r2, r3
 80103e4:	8b7b      	ldrh	r3, [r7, #26]
 80103e6:	3303      	adds	r3, #3
 80103e8:	b298      	uxth	r0, r3
 80103ea:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80103ec:	f107 0312 	add.w	r3, r7, #18
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	4603      	mov	r3, r0
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f001 f8da 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 80103fa:	4603      	mov	r3, r0
 80103fc:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	3b01      	subs	r3, #1
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	4413      	add	r3, r2
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	3b01      	subs	r3, #1
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	4413      	add	r3, r2
 8010412:	7d7a      	ldrb	r2, [r7, #21]
 8010414:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 8010416:	8afb      	ldrh	r3, [r7, #22]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d153      	bne.n	80104c4 <ndefT5TPollerReadBytes+0x1fa>
 801041c:	8a7b      	ldrh	r3, [r7, #18]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d050      	beq.n	80104c4 <ndefT5TPollerReadBytes+0x1fa>
 8010422:	7d3b      	ldrb	r3, [r7, #20]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d14d      	bne.n	80104c4 <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 8010428:	8b7b      	ldrh	r3, [r7, #26]
 801042a:	69fa      	ldr	r2, [r7, #28]
 801042c:	4413      	add	r3, r2
 801042e:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 8010430:	8b7b      	ldrh	r3, [r7, #26]
 8010432:	6a3a      	ldr	r2, [r7, #32]
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 8010438:	8b7b      	ldrh	r3, [r7, #26]
 801043a:	3302      	adds	r3, #2
 801043c:	6a3a      	ldr	r2, [r7, #32]
 801043e:	429a      	cmp	r2, r3
 8010440:	d2c3      	bcs.n	80103ca <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 8010442:	e03f      	b.n	80104c4 <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 8010444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010446:	3301      	adds	r3, #1
 8010448:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010450:	8b7b      	ldrh	r3, [r7, #26]
 8010452:	3303      	adds	r3, #3
 8010454:	b298      	uxth	r0, r3
 8010456:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8010458:	f107 0312 	add.w	r3, r7, #18
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	4603      	mov	r3, r0
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f001 f8a4 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 8010466:	4603      	mov	r3, r0
 8010468:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 801046a:	8afb      	ldrh	r3, [r7, #22]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d12c      	bne.n	80104ca <ndefT5TPollerReadBytes+0x200>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8010476:	2b00      	cmp	r3, #0
 8010478:	d127      	bne.n	80104ca <ndefT5TPollerReadBytes+0x200>
 801047a:	8a7b      	ldrh	r3, [r7, #18]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d024      	beq.n	80104ca <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 8010480:	8a7b      	ldrh	r3, [r7, #18]
 8010482:	3b01      	subs	r3, #1
 8010484:	b29b      	uxth	r3, r3
 8010486:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 8010488:	8a7b      	ldrh	r3, [r7, #18]
 801048a:	461a      	mov	r2, r3
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	4293      	cmp	r3, r2
 8010490:	d202      	bcs.n	8010498 <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 8010492:	6a3b      	ldr	r3, [r7, #32]
 8010494:	b29b      	uxth	r3, r3
 8010496:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 8010498:	8a7b      	ldrh	r3, [r7, #18]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d008      	beq.n	80104b0 <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	18d0      	adds	r0, r2, r3
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	33d5      	adds	r3, #213	; 0xd5
 80104a8:	8a7a      	ldrh	r2, [r7, #18]
 80104aa:	4619      	mov	r1, r3
 80104ac:	f00d f83c 	bl	801d528 <memcpy>
                    }
                    lvRcvLen   += nbRead;
 80104b0:	8a7b      	ldrh	r3, [r7, #18]
 80104b2:	461a      	mov	r2, r3
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	4413      	add	r3, r2
 80104b8:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 80104ba:	8a7b      	ldrh	r3, [r7, #18]
 80104bc:	461a      	mov	r2, r3
 80104be:	6a3b      	ldr	r3, [r7, #32]
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 80104c4:	6a3b      	ldr	r3, [r7, #32]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1bc      	bne.n	8010444 <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 80104ca:	6a3b      	ldr	r3, [r7, #32]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 80104d0:	2300      	movs	r3, #0
 80104d2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 80104d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d002      	beq.n	80104e0 <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	69fa      	ldr	r2, [r7, #28]
 80104de:	601a      	str	r2, [r3, #0]
    }
    return result;
 80104e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3728      	adds	r7, #40	; 0x28
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b086      	sub	sp, #24
 80104ee:	af02      	add	r7, sp, #8
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d006      	beq.n	8010508 <ndefT5TPollerContextInitialization+0x1e>
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d003      	beq.n	8010508 <ndefT5TPollerContextInitialization+0x1e>
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	2b03      	cmp	r3, #3
 8010506:	d001      	beq.n	801050c <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 8010508:	2307      	movs	r3, #7
 801050a:	e096      	b.n	801063a <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2278      	movs	r2, #120	; 0x78
 8010510:	6839      	ldr	r1, [r7, #0]
 8010512:	4618      	mov	r0, r3
 8010514:	f00d f808 	bl	801d528 <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	1cda      	adds	r2, r3, #3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010558:	f107 030c 	add.w	r3, r7, #12
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	2323      	movs	r3, #35	; 0x23
 8010560:	2100      	movs	r1, #0
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f001 f823 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 8010568:	4603      	mov	r3, r0
 801056a:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 801056c:	89fb      	ldrh	r3, [r7, #14]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d019      	beq.n	80105a6 <ndefT5TPollerContextInitialization+0xbc>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	7a5b      	ldrb	r3, [r3, #9]
 8010576:	2b02      	cmp	r3, #2
 8010578:	d115      	bne.n	80105a6 <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010588:	f107 030c 	add.w	r3, r7, #12
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	2323      	movs	r3, #35	; 0x23
 8010590:	2100      	movs	r1, #0
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f001 f80b 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 8010598:	4603      	mov	r3, r0
 801059a:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 801059c:	89fb      	ldrh	r3, [r7, #14]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 80105a2:	89fb      	ldrh	r3, [r7, #14]
 80105a4:	e049      	b.n	801063a <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 80105a6:	89bb      	ldrh	r3, [r7, #12]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d915      	bls.n	80105d8 <ndefT5TPollerContextInitialization+0xee>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d110      	bne.n	80105d8 <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 80105b6:	89bb      	ldrh	r3, [r7, #12]
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	3b01      	subs	r3, #1
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3303      	adds	r3, #3
 80105c8:	4619      	mov	r1, r3
 80105ca:	2002      	movs	r0, #2
 80105cc:	f008 fef2 	bl	80193b4 <rfalNfcvPollerSelect>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <ndefT5TPollerContextInitialization+0xf2>
 80105d6:	e005      	b.n	80105e4 <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 80105d8:	230b      	movs	r3, #11
 80105da:	e02e      	b.n	801063a <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80105f2:	f083 0301 	eor.w	r3, r3, #1
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00a      	beq.n	8010612 <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 80105fc:	2101      	movs	r1, #1
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f001 f822 	bl	8011648 <ndefT5TGetSystemInformation>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d103      	bne.n	8010612 <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8010618:	f083 0301 	eor.w	r3, r3, #1
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 8010622:	2100      	movs	r1, #0
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f001 f80f 	bl	8011648 <ndefT5TGetSystemInformation>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d103      	bne.n	8010638 <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 8010638:	89fb      	ldrh	r3, [r7, #14]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b08a      	sub	sp, #40	; 0x28
 8010646:	af02      	add	r7, sp, #8
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 801064c:	2305      	movs	r3, #5
 801064e:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d003      	beq.n	801065e <ndefT5TPollerNdefDetect+0x1c>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	2b03      	cmp	r3, #3
 801065c:	d001      	beq.n	8010662 <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 801065e:	2307      	movs	r3, #7
 8010660:	e203      	b.n	8010a6a <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2200      	movs	r2, #0
 8010666:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d011      	beq.n	80106b4 <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2200      	movs	r2, #0
 8010694:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2200      	movs	r2, #0
 801069a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2200      	movs	r2, #0
 80106a0:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2200      	movs	r2, #0
 80106a6:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	2200      	movs	r2, #0
 80106ac:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	2200      	movs	r2, #0
 80106b2:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80106ba:	f107 0308 	add.w	r3, r7, #8
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	4613      	mov	r3, r2
 80106c2:	2208      	movs	r2, #8
 80106c4:	2100      	movs	r1, #0
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff fdff 	bl	80102ca <ndefT5TPollerReadBytes>
 80106cc:	4603      	mov	r3, r0
 80106ce:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 80106d0:	8a3b      	ldrh	r3, [r7, #16]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f040 818e 	bne.w	80109f4 <ndefT5TPollerNdefDetect+0x3b2>
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2b08      	cmp	r3, #8
 80106dc:	f040 818a 	bne.w	80109f4 <ndefT5TPollerNdefDetect+0x3b2>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80106e6:	2be1      	cmp	r3, #225	; 0xe1
 80106e8:	d005      	beq.n	80106f6 <ndefT5TPollerNdefDetect+0xb4>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80106f0:	2be2      	cmp	r3, #226	; 0xe2
 80106f2:	f040 817f 	bne.w	80109f4 <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010708:	099b      	lsrs	r3, r3, #6
 801070a:	b2da      	uxtb	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010718:	091b      	lsrs	r3, r3, #4
 801071a:	b2db      	uxtb	r3, r3
 801071c:	f003 0303 	and.w	r3, r3, #3
 8010720:	b2da      	uxtb	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801072e:	089b      	lsrs	r3, r3, #2
 8010730:	b2db      	uxtb	r3, r3
 8010732:	f003 0303 	and.w	r3, r3, #3
 8010736:	b2da      	uxtb	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010744:	f003 0303 	and.w	r3, r3, #3
 8010748:	b2da      	uxtb	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010756:	b29a      	uxth	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	bf14      	ite	ne
 801076c:	2301      	movne	r3, #1
 801076e:	2300      	moveq	r3, #0
 8010770:	b2da      	uxtb	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 801077e:	089b      	lsrs	r3, r3, #2
 8010780:	b2db      	uxtb	r3, r3
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	2b00      	cmp	r3, #0
 8010788:	bf14      	ite	ne
 801078a:	2301      	movne	r3, #1
 801078c:	2300      	moveq	r3, #0
 801078e:	b2da      	uxtb	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 801079c:	08db      	lsrs	r3, r3, #3
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	f003 0301 	and.w	r3, r3, #1
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	bf14      	ite	ne
 80107a8:	2301      	movne	r3, #1
 80107aa:	2300      	moveq	r3, #0
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80107ba:	091b      	lsrs	r3, r3, #4
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	f003 0301 	and.w	r3, r3, #1
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	bf14      	ite	ne
 80107c6:	2301      	movne	r3, #1
 80107c8:	2300      	moveq	r3, #0
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d02a      	beq.n	801083a <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2204      	movs	r2, #4
 80107e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80107f2:	2bff      	cmp	r3, #255	; 0xff
 80107f4:	d134      	bne.n	8010860 <ndefT5TPollerNdefDetect+0x21e>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d02f      	beq.n	8010860 <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8010806:	2b00      	cmp	r3, #0
 8010808:	d02a      	beq.n	8010860 <ndefT5TPollerNdefDetect+0x21e>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8010810:	089b      	lsrs	r3, r3, #2
 8010812:	b2db      	uxtb	r3, r3
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	2b00      	cmp	r3, #0
 801081a:	d021      	beq.n	8010860 <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8010822:	461a      	mov	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 801082a:	fb02 f303 	mul.w	r3, r2, r3
 801082e:	08db      	lsrs	r3, r3, #3
 8010830:	b29a      	uxth	r2, r3
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8010838:	e012      	b.n	8010860 <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2208      	movs	r2, #8
 801083e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8010848:	b29b      	uxth	r3, r3
 801084a:	021b      	lsls	r3, r3, #8
 801084c:	b29a      	uxth	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8010854:	b29b      	uxth	r3, r3
 8010856:	4413      	add	r3, r2
 8010858:	b29a      	uxth	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8010866:	2b00      	cmp	r3, #0
 8010868:	d025      	beq.n	80108b6 <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8010870:	089b      	lsrs	r3, r3, #2
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01c      	beq.n	80108b6 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8010888:	4619      	mov	r1, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8010890:	fb01 f303 	mul.w	r3, r1, r3
 8010894:	08db      	lsrs	r3, r3, #3
 8010896:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 8010898:	429a      	cmp	r2, r3
 801089a:	d10c      	bne.n	80108b6 <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d007      	beq.n	80108b6 <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80108ac:	3b01      	subs	r3, #1
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80108c4:	461a      	mov	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80108d2:	617b      	str	r3, [r7, #20]
        bExit     = false;
 80108d4:	2300      	movs	r3, #0
 80108d6:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 80108d8:	f107 020c 	add.w	r2, r7, #12
 80108dc:	f107 0308 	add.w	r3, r7, #8
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	4613      	mov	r3, r2
 80108e4:	2204      	movs	r2, #4
 80108e6:	6979      	ldr	r1, [r7, #20]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff fcee 	bl	80102ca <ndefT5TPollerReadBytes>
 80108ee:	4603      	mov	r3, r0
 80108f0:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 80108f2:	8a3b      	ldrh	r3, [r7, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f040 8085 	bne.w	8010a04 <ndefT5TPollerNdefDetect+0x3c2>
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b04      	cmp	r3, #4
 80108fe:	f040 8081 	bne.w	8010a04 <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 8010902:	2302      	movs	r3, #2
 8010904:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 8010906:	7b7b      	ldrb	r3, [r7, #13]
 8010908:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 801090a:	8b7b      	ldrh	r3, [r7, #26]
 801090c:	2bff      	cmp	r3, #255	; 0xff
 801090e:	d10a      	bne.n	8010926 <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 8010910:	7bbb      	ldrb	r3, [r7, #14]
 8010912:	b29b      	uxth	r3, r3
 8010914:	021b      	lsls	r3, r3, #8
 8010916:	b29a      	uxth	r2, r3
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	b29b      	uxth	r3, r3
 801091c:	4413      	add	r3, r2
 801091e:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 8010920:	8bbb      	ldrh	r3, [r7, #28]
 8010922:	3302      	adds	r3, #2
 8010924:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 8010926:	7b3b      	ldrb	r3, [r7, #12]
 8010928:	2b03      	cmp	r3, #3
 801092a:	d142      	bne.n	80109b2 <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 801092c:	2300      	movs	r3, #0
 801092e:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	697a      	ldr	r2, [r7, #20]
 8010934:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 8010938:	8bba      	ldrh	r2, [r7, #28]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	441a      	add	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 8010944:	8b7a      	ldrh	r2, [r7, #26]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 801094c:	2300      	movs	r3, #0
 801094e:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 8010950:	8b7b      	ldrh	r3, [r7, #26]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d117      	bne.n	8010986 <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801095c:	2b00      	cmp	r3, #0
 801095e:	d109      	bne.n	8010974 <ndefT5TPollerNdefDetect+0x332>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010966:	2b00      	cmp	r3, #0
 8010968:	d104      	bne.n	8010974 <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8010972:	e005      	b.n	8010980 <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 801097c:	2305      	movs	r3, #5
 801097e:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 8010980:	2301      	movs	r3, #1
 8010982:	74fb      	strb	r3, [r7, #19]
 8010984:	e02b      	b.n	80109de <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10d      	bne.n	80109ac <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010996:	2b00      	cmp	r3, #0
 8010998:	d104      	bne.n	80109a4 <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2202      	movs	r2, #2
 801099e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80109a2:	e003      	b.n	80109ac <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2203      	movs	r2, #3
 80109a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 80109ac:	2301      	movs	r3, #1
 80109ae:	74fb      	strb	r3, [r7, #19]
 80109b0:	e015      	b.n	80109de <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 80109b2:	7b3b      	ldrb	r3, [r7, #12]
 80109b4:	2bfe      	cmp	r3, #254	; 0xfe
 80109b6:	d104      	bne.n	80109c2 <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 80109b8:	2300      	movs	r3, #0
 80109ba:	617b      	str	r3, [r7, #20]
                bExit     = true;
 80109bc:	2301      	movs	r3, #1
 80109be:	74fb      	strb	r3, [r7, #19]
 80109c0:	e00d      	b.n	80109de <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 80109c2:	7b3b      	ldrb	r3, [r7, #12]
 80109c4:	2bfd      	cmp	r3, #253	; 0xfd
 80109c6:	d106      	bne.n	80109d6 <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 80109c8:	8bba      	ldrh	r2, [r7, #28]
 80109ca:	8b7b      	ldrh	r3, [r7, #26]
 80109cc:	4413      	add	r3, r2
 80109ce:	697a      	ldr	r2, [r7, #20]
 80109d0:	4413      	add	r3, r2
 80109d2:	617b      	str	r3, [r7, #20]
 80109d4:	e003      	b.n	80109de <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 80109d6:	2300      	movs	r3, #0
 80109d8:	617b      	str	r3, [r7, #20]
                bExit = true;
 80109da:	2301      	movs	r3, #1
 80109dc:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00f      	beq.n	8010a04 <ndefT5TPollerNdefDetect+0x3c2>
 80109e4:	7cfb      	ldrb	r3, [r7, #19]
 80109e6:	f083 0301 	eor.w	r3, r3, #1
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f47f af73 	bne.w	80108d8 <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 80109f2:	e007      	b.n	8010a04 <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 80109f4:	2305      	movs	r3, #5
 80109f6:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 80109f8:	8a3b      	ldrh	r3, [r7, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d003      	beq.n	8010a06 <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 80109fe:	8a3b      	ldrh	r3, [r7, #16]
 8010a00:	83fb      	strh	r3, [r7, #30]
 8010a02:	e000      	b.n	8010a06 <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 8010a04:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010a0c:	00da      	lsls	r2, r3, #3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d026      	beq.n	8010a68 <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010a48:	461a      	mov	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010a50:	441a      	add	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010a58:	1ad2      	subs	r2, r2, r3
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 8010a68:	8bfb      	ldrh	r3, [r7, #30]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3720      	adds	r7, #32
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b088      	sub	sp, #32
 8010a76:	af02      	add	r7, sp, #8
 8010a78:	60f8      	str	r0, [r7, #12]
 8010a7a:	60b9      	str	r1, [r7, #8]
 8010a7c:	607a      	str	r2, [r7, #4]
 8010a7e:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d006      	beq.n	8010a94 <ndefT5TPollerReadRawMessage+0x22>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2b03      	cmp	r3, #3
 8010a8c:	d102      	bne.n	8010a94 <ndefT5TPollerReadRawMessage+0x22>
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 8010a94:	2307      	movs	r3, #7
 8010a96:	e016      	b.n	8010ac6 <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d201      	bcs.n	8010aa8 <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e00e      	b.n	8010ac6 <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f7ff fc05 	bl	80102ca <ndefT5TPollerReadBytes>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	82fb      	strh	r3, [r7, #22]
    return result;
 8010ac4:	8afb      	ldrh	r3, [r7, #22]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b08c      	sub	sp, #48	; 0x30
 8010ad2:	af02      	add	r7, sp, #8
 8010ad4:	60f8      	str	r0, [r7, #12]
 8010ad6:	60b9      	str	r1, [r7, #8]
 8010ad8:	607a      	str	r2, [r7, #4]
 8010ada:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 8010adc:	2305      	movs	r3, #5
 8010ade:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <ndefT5TPollerWriteBytes+0x38>
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	d107      	bne.n	8010b06 <ndefT5TPollerWriteBytes+0x38>
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d004      	beq.n	8010b06 <ndefT5TPollerWriteBytes+0x38>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 8010b06:	2307      	movs	r3, #7
 8010b08:	e0eb      	b.n	8010ce2 <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010b10:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 8010b12:	8b7b      	ldrh	r3, [r7, #26]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 8010b18:	2308      	movs	r3, #8
 8010b1a:	e0e2      	b.n	8010ce2 <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 8010b1c:	8b7b      	ldrh	r3, [r7, #26]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b24:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 8010b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b28:	8b7a      	ldrh	r2, [r7, #26]
 8010b2a:	fb02 f303 	mul.w	r3, r2, r3
 8010b2e:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 8010b30:	8b3b      	ldrh	r3, [r7, #24]
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	429a      	cmp	r2, r3
 8010b36:	f000 8081 	beq.w	8010c3c <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010b40:	8b7b      	ldrh	r3, [r7, #26]
 8010b42:	3303      	adds	r3, #3
 8010b44:	b298      	uxth	r0, r3
 8010b46:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010b48:	f107 0314 	add.w	r3, r7, #20
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	4603      	mov	r3, r0
 8010b50:	68f8      	ldr	r0, [r7, #12]
 8010b52:	f000 fd2c 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 8010b56:	4603      	mov	r3, r0
 8010b58:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 8010b5a:	8afb      	ldrh	r3, [r7, #22]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d13b      	bne.n	8010bd8 <ndefT5TPollerWriteBytes+0x10a>
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d136      	bne.n	8010bd8 <ndefT5TPollerWriteBytes+0x10a>
 8010b6a:	8abb      	ldrh	r3, [r7, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d033      	beq.n	8010bd8 <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 8010b70:	8aba      	ldrh	r2, [r7, #20]
 8010b72:	8b3b      	ldrh	r3, [r7, #24]
 8010b74:	4413      	add	r3, r2
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	3b01      	subs	r3, #1
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 8010b86:	8abb      	ldrh	r3, [r7, #20]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d202      	bcs.n	8010b96 <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 8010b96:	8abb      	ldrh	r3, [r7, #20]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00e      	beq.n	8010bba <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	8b3b      	ldrh	r3, [r7, #24]
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	33d0      	adds	r3, #208	; 0xd0
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	4413      	add	r3, r2
 8010bae:	3304      	adds	r3, #4
 8010bb0:	8aba      	ldrh	r2, [r7, #20]
 8010bb2:	6a39      	ldr	r1, [r7, #32]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f00c fcb7 	bl	801d528 <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 8010bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f000 fc49 	bl	801145c <ndefT5TPollerWriteSingleBlock>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 8010bce:	8afb      	ldrh	r3, [r7, #22]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00b      	beq.n	8010bec <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 8010bd4:	8afb      	ldrh	r3, [r7, #22]
 8010bd6:	e084      	b.n	8010ce2 <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 8010bd8:	8afb      	ldrh	r3, [r7, #22]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 8010bde:	8afb      	ldrh	r3, [r7, #22]
 8010be0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010be2:	e001      	b.n	8010be8 <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 8010be4:	2307      	movs	r3, #7
 8010be6:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 8010be8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bea:	e07a      	b.n	8010ce2 <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 8010bec:	8abb      	ldrh	r3, [r7, #20]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	1a9b      	subs	r3, r3, r2
 8010bf4:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 8010bf6:	8abb      	ldrh	r3, [r7, #20]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	6a3b      	ldr	r3, [r7, #32]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	623b      	str	r3, [r7, #32]
        startBlock++;
 8010c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c02:	3301      	adds	r3, #1
 8010c04:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 8010c06:	e019      	b.n	8010c3c <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 8010c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c0a:	6a3a      	ldr	r2, [r7, #32]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f000 fc24 	bl	801145c <ndefT5TPollerWriteSingleBlock>
 8010c14:	4603      	mov	r3, r0
 8010c16:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 8010c18:	8afb      	ldrh	r3, [r7, #22]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10b      	bne.n	8010c36 <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 8010c1e:	8b7b      	ldrh	r3, [r7, #26]
 8010c20:	69fa      	ldr	r2, [r7, #28]
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 8010c26:	8b7b      	ldrh	r3, [r7, #26]
 8010c28:	6a3a      	ldr	r2, [r7, #32]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	623b      	str	r3, [r7, #32]
            startBlock++;
 8010c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c30:	3301      	adds	r3, #1
 8010c32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010c34:	e002      	b.n	8010c3c <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 8010c36:	8afb      	ldrh	r3, [r7, #22]
 8010c38:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8010c3a:	e003      	b.n	8010c44 <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 8010c3c:	8b7b      	ldrh	r3, [r7, #26]
 8010c3e:	69fa      	ldr	r2, [r7, #28]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d2e1      	bcs.n	8010c08 <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d045      	beq.n	8010cd6 <ndefT5TPollerWriteBytes+0x208>
 8010c4a:	8b7b      	ldrh	r3, [r7, #26]
 8010c4c:	69fa      	ldr	r2, [r7, #28]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d241      	bcs.n	8010cd6 <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8010c58:	8b7b      	ldrh	r3, [r7, #26]
 8010c5a:	3303      	adds	r3, #3
 8010c5c:	b298      	uxth	r0, r3
 8010c5e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010c60:	f107 0314 	add.w	r3, r7, #20
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	4603      	mov	r3, r0
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f000 fca0 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 8010c72:	8afb      	ldrh	r3, [r7, #22]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d124      	bne.n	8010cc2 <ndefT5TPollerWriteBytes+0x1f4>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d11f      	bne.n	8010cc2 <ndefT5TPollerWriteBytes+0x1f4>
 8010c82:	8abb      	ldrh	r3, [r7, #20]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d01c      	beq.n	8010cc2 <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d006      	beq.n	8010c9c <ndefT5TPollerWriteBytes+0x1ce>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	33d5      	adds	r3, #213	; 0xd5
 8010c92:	69fa      	ldr	r2, [r7, #28]
 8010c94:	6a39      	ldr	r1, [r7, #32]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f00c fc46 	bl	801d528 <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 8010ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f000 fbd8 	bl	801145c <ndefT5TPollerWriteSingleBlock>
 8010cac:	4603      	mov	r3, r0
 8010cae:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 8010cb0:	8afb      	ldrh	r3, [r7, #22]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d002      	beq.n	8010cbc <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 8010cb6:	8afb      	ldrh	r3, [r7, #22]
 8010cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 8010cba:	e00c      	b.n	8010cd6 <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 8010cc0:	e009      	b.n	8010cd6 <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 8010cc2:	8afb      	ldrh	r3, [r7, #22]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 8010cc8:	8afb      	ldrh	r3, [r7, #22]
 8010cca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010ccc:	e001      	b.n	8010cd2 <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 8010cce:	2307      	movs	r3, #7
 8010cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 8010cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010cd4:	e005      	b.n	8010ce2 <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d101      	bne.n	8010ce0 <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 8010ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3728      	adds	r7, #40	; 0x28
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b086      	sub	sp, #24
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
 8010cf2:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 8010cf4:	2307      	movs	r3, #7
 8010cf6:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d071      	beq.n	8010de6 <ndefT5TPollerWriteRawMessageLen+0xfc>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d16d      	bne.n	8010de6 <ndefT5TPollerWriteRawMessageLen+0xfc>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d007      	beq.n	8010d24 <ndefT5TPollerWriteRawMessageLen+0x3a>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d002      	beq.n	8010d24 <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 8010d1e:	2321      	movs	r3, #33	; 0x21
 8010d20:	82fb      	strh	r3, [r7, #22]
 8010d22:	e060      	b.n	8010de6 <ndefT5TPollerWriteRawMessageLen+0xfc>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 8010d24:	7d7b      	ldrb	r3, [r7, #21]
 8010d26:	3318      	adds	r3, #24
 8010d28:	443b      	add	r3, r7
 8010d2a:	2203      	movs	r2, #3
 8010d2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 8010d30:	7d7b      	ldrb	r3, [r7, #21]
 8010d32:	3301      	adds	r3, #1
 8010d34:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2bfe      	cmp	r3, #254	; 0xfe
 8010d3a:	d80a      	bhi.n	8010d52 <ndefT5TPollerWriteRawMessageLen+0x68>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 8010d3c:	7d7b      	ldrb	r3, [r7, #21]
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	b2d2      	uxtb	r2, r2
 8010d42:	3318      	adds	r3, #24
 8010d44:	443b      	add	r3, r7
 8010d46:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 8010d4a:	7d7b      	ldrb	r3, [r7, #21]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	757b      	strb	r3, [r7, #21]
 8010d50:	e014      	b.n	8010d7c <ndefT5TPollerWriteRawMessageLen+0x92>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	0a1a      	lsrs	r2, r3, #8
 8010d56:	7d7b      	ldrb	r3, [r7, #21]
 8010d58:	b2d2      	uxtb	r2, r2
 8010d5a:	3318      	adds	r3, #24
 8010d5c:	443b      	add	r3, r7
 8010d5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 8010d62:	7d7b      	ldrb	r3, [r7, #21]
 8010d64:	3301      	adds	r3, #1
 8010d66:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 8010d68:	7d7b      	ldrb	r3, [r7, #21]
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	b2d2      	uxtb	r2, r2
 8010d6e:	3318      	adds	r3, #24
 8010d70:	443b      	add	r3, r7
 8010d72:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 8010d76:	7d7b      	ldrb	r3, [r7, #21]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d108      	bne.n	8010d94 <ndefT5TPollerWriteRawMessageLen+0xaa>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 8010d82:	7d7b      	ldrb	r3, [r7, #21]
 8010d84:	3318      	adds	r3, #24
 8010d86:	443b      	add	r3, r7
 8010d88:	22fe      	movs	r2, #254	; 0xfe
 8010d8a:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 8010d8e:	7d7b      	ldrb	r3, [r7, #21]
 8010d90:	3301      	adds	r3, #1
 8010d92:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010d9a:	7d7b      	ldrb	r3, [r7, #21]
 8010d9c:	f107 020c 	add.w	r2, r7, #12
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff fe94 	bl	8010ace <ndefT5TPollerWriteBytes>
 8010da6:	4603      	mov	r3, r0
 8010da8:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 8010daa:	8afb      	ldrh	r3, [r7, #22]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d11a      	bne.n	8010de6 <ndefT5TPollerWriteRawMessageLen+0xfc>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d017      	beq.n	8010de6 <ndefT5TPollerWriteRawMessageLen+0xfc>
            {  /* T5T need specific terminator */
               len = 0U;
 8010db6:	2300      	movs	r3, #0
 8010db8:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 8010dba:	7d7b      	ldrb	r3, [r7, #21]
 8010dbc:	3318      	adds	r3, #24
 8010dbe:	443b      	add	r3, r7
 8010dc0:	22fe      	movs	r2, #254	; 0xfe
 8010dc2:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 8010dc6:	7d7b      	ldrb	r3, [r7, #21]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	18d1      	adds	r1, r2, r3
 8010dd6:	7d7b      	ldrb	r3, [r7, #21]
 8010dd8:	f107 020c 	add.w	r2, r7, #12
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f7ff fe76 	bl	8010ace <ndefT5TPollerWriteBytes>
 8010de2:	4603      	mov	r3, r0
 8010de4:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 8010de6:	8afb      	ldrh	r3, [r7, #22]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3718      	adds	r7, #24
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d006      	beq.n	8010e14 <ndefT5TPollerWriteRawMessage+0x24>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d102      	bne.n	8010e14 <ndefT5TPollerWriteRawMessage+0x24>
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d101      	bne.n	8010e18 <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 8010e14:	2307      	movs	r3, #7
 8010e16:	e04b      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d006      	beq.n	8010e30 <ndefT5TPollerWriteRawMessage+0x40>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	d001      	beq.n	8010e30 <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 8010e2c:	2321      	movs	r3, #33	; 0x21
 8010e2e:	e03f      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 8010e30:	6879      	ldr	r1, [r7, #4]
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f000 fa57 	bl	80112e6 <ndefT5TPollerCheckAvailableSpace>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 8010e3c:	8afb      	ldrh	r3, [r7, #22]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d001      	beq.n	8010e46 <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 8010e42:	2307      	movs	r3, #7
 8010e44:	e034      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f000 fa81 	bl	8011350 <ndefT5TPollerBeginWriteMessage>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 8010e52:	8afb      	ldrh	r3, [r7, #22]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 8010e60:	8afb      	ldrh	r3, [r7, #22]
 8010e62:	e025      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d021      	beq.n	8010eae <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	68ba      	ldr	r2, [r7, #8]
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f7ff fe2a 	bl	8010ace <ndefT5TPollerWriteBytes>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 8010e7e:	8afb      	ldrh	r3, [r7, #22]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d005      	beq.n	8010e90 <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 8010e8c:	8afb      	ldrh	r3, [r7, #22]
 8010e8e:	e00f      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 8010e90:	6939      	ldr	r1, [r7, #16]
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f000 faaa 	bl	80113ec <ndefT5TPollerEndWriteMessage>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 8010e9c:	8afb      	ldrh	r3, [r7, #22]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d005      	beq.n	8010eae <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 8010eaa:	8afb      	ldrh	r3, [r7, #22]
 8010eac:	e000      	b.n	8010eb0 <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 8010eae:	8afb      	ldrh	r3, [r7, #22]
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <ndefT5TWriteCC+0x16>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	2b03      	cmp	r3, #3
 8010ecc:	d001      	beq.n	8010ed2 <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 8010ece:	2307      	movs	r3, #7
 8010ed0:	e0c9      	b.n	8011066 <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	339c      	adds	r3, #156	; 0x9c
 8010ed6:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 8010edc:	7afb      	ldrb	r3, [r7, #11]
 8010ede:	68fa      	ldr	r2, [r7, #12]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 8010ee8:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8010eea:	7afb      	ldrb	r3, [r7, #11]
 8010eec:	3301      	adds	r3, #1
 8010eee:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8010ef6:	019b      	lsls	r3, r3, #6
 8010ef8:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8010f00:	011b      	lsls	r3, r3, #4
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010f08:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	f003 030c 	and.w	r3, r3, #12
 8010f1c:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010f28:	f003 0303 	and.w	r3, r3, #3
 8010f2c:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 8010f2e:	7afb      	ldrb	r3, [r7, #11]
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	4403      	add	r3, r0
 8010f34:	430a      	orrs	r2, r1
 8010f36:	b2d2      	uxtb	r2, r2
 8010f38:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8010f3a:	7afb      	ldrb	r3, [r7, #11]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010f46:	2b08      	cmp	r3, #8
 8010f48:	d004      	beq.n	8010f54 <ndefT5TWriteCC+0x9c>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010f50:	b2d9      	uxtb	r1, r3
 8010f52:	e000      	b.n	8010f56 <ndefT5TWriteCC+0x9e>
 8010f54:	2100      	movs	r1, #0
 8010f56:	7afb      	ldrb	r3, [r7, #11]
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	460a      	mov	r2, r1
 8010f5e:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8010f60:	7afb      	ldrb	r3, [r7, #11]
 8010f62:	3301      	adds	r3, #1
 8010f64:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 8010f66:	7afb      	ldrb	r3, [r7, #11]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00a      	beq.n	8010f90 <ndefT5TWriteCC+0xd8>
 8010f7a:	7afb      	ldrb	r3, [r7, #11]
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	4413      	add	r3, r2
 8010f80:	781a      	ldrb	r2, [r3, #0]
 8010f82:	7afb      	ldrb	r3, [r7, #11]
 8010f84:	68f9      	ldr	r1, [r7, #12]
 8010f86:	440b      	add	r3, r1
 8010f88:	f042 0201 	orr.w	r2, r2, #1
 8010f8c:	b2d2      	uxtb	r2, r2
 8010f8e:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00a      	beq.n	8010fb0 <ndefT5TWriteCC+0xf8>
 8010f9a:	7afb      	ldrb	r3, [r7, #11]
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	781a      	ldrb	r2, [r3, #0]
 8010fa2:	7afb      	ldrb	r3, [r7, #11]
 8010fa4:	68f9      	ldr	r1, [r7, #12]
 8010fa6:	440b      	add	r3, r1
 8010fa8:	f042 0204 	orr.w	r2, r2, #4
 8010fac:	b2d2      	uxtb	r2, r2
 8010fae:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00a      	beq.n	8010fd0 <ndefT5TWriteCC+0x118>
 8010fba:	7afb      	ldrb	r3, [r7, #11]
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	781a      	ldrb	r2, [r3, #0]
 8010fc2:	7afb      	ldrb	r3, [r7, #11]
 8010fc4:	68f9      	ldr	r1, [r7, #12]
 8010fc6:	440b      	add	r3, r1
 8010fc8:	f042 0208 	orr.w	r2, r2, #8
 8010fcc:	b2d2      	uxtb	r2, r2
 8010fce:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00a      	beq.n	8010ff0 <ndefT5TWriteCC+0x138>
 8010fda:	7afb      	ldrb	r3, [r7, #11]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	4413      	add	r3, r2
 8010fe0:	781a      	ldrb	r2, [r3, #0]
 8010fe2:	7afb      	ldrb	r3, [r7, #11]
 8010fe4:	68f9      	ldr	r1, [r7, #12]
 8010fe6:	440b      	add	r3, r1
 8010fe8:	f042 0210 	orr.w	r2, r2, #16
 8010fec:	b2d2      	uxtb	r2, r2
 8010fee:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8010ff0:	7afb      	ldrb	r3, [r7, #11]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ffc:	2b08      	cmp	r3, #8
 8010ffe:	d127      	bne.n	8011050 <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 8011000:	7afb      	ldrb	r3, [r7, #11]
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	4413      	add	r3, r2
 8011006:	2200      	movs	r2, #0
 8011008:	701a      	strb	r2, [r3, #0]
        dataIt++;
 801100a:	7afb      	ldrb	r3, [r7, #11]
 801100c:	3301      	adds	r3, #1
 801100e:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 8011010:	7afb      	ldrb	r3, [r7, #11]
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	4413      	add	r3, r2
 8011016:	2200      	movs	r2, #0
 8011018:	701a      	strb	r2, [r3, #0]
        dataIt++;
 801101a:	7afb      	ldrb	r3, [r7, #11]
 801101c:	3301      	adds	r3, #1
 801101e:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011026:	0a1b      	lsrs	r3, r3, #8
 8011028:	b299      	uxth	r1, r3
 801102a:	7afb      	ldrb	r3, [r7, #11]
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	4413      	add	r3, r2
 8011030:	b2ca      	uxtb	r2, r1
 8011032:	701a      	strb	r2, [r3, #0]
        dataIt++;
 8011034:	7afb      	ldrb	r3, [r7, #11]
 8011036:	3301      	adds	r3, #1
 8011038:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8011040:	7afb      	ldrb	r3, [r7, #11]
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	4413      	add	r3, r2
 8011046:	b2ca      	uxtb	r2, r1
 8011048:	701a      	strb	r2, [r3, #0]
        dataIt++;
 801104a:	7afb      	ldrb	r3, [r7, #11]
 801104c:	3301      	adds	r3, #1
 801104e:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	2100      	movs	r1, #0
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7ff fd37 	bl	8010ace <ndefT5TPollerWriteBytes>
 8011060:	4603      	mov	r3, r0
 8011062:	813b      	strh	r3, [r7, #8]
    return ret;
 8011064:	893b      	ldrh	r3, [r7, #8]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b088      	sub	sp, #32
 8011074:	af02      	add	r7, sp, #8
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <ndefT5TPollerTagFormat+0x1a>
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	2b03      	cmp	r3, #3
 8011088:	d001      	beq.n	801108e <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 801108a:	2307      	movs	r3, #7
 801108c:	e103      	b.n	8011296 <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2200      	movs	r2, #0
 8011092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d011      	beq.n	80110d0 <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b08      	cmp	r3, #8
 80110b2:	d005      	beq.n	80110c0 <ndefT5TPollerTagFormat+0x50>
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b04      	cmp	r3, #4
 80110ba:	d001      	beq.n	80110c0 <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 80110bc:	2307      	movs	r3, #7
 80110be:	e0ea      	b.n	8011296 <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	337c      	adds	r3, #124	; 0x7c
 80110c4:	2214      	movs	r2, #20
 80110c6:	68b9      	ldr	r1, [r7, #8]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f00c fa2d 	bl	801d528 <memcpy>
 80110ce:	e09b      	b.n	8011208 <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	22e1      	movs	r2, #225	; 0xe1
 80110d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2201      	movs	r2, #1
 80110dc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2200      	movs	r2, #0
 80110e4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2200      	movs	r2, #0
 8011104:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2200      	movs	r2, #0
 801110c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2200      	movs	r2, #0
 8011114:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 801111e:	f107 0314 	add.w	r3, r7, #20
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	2323      	movs	r3, #35	; 0x23
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	4613      	mov	r3, r2
 801112a:	2200      	movs	r2, #0
 801112c:	2100      	movs	r1, #0
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 f9e7 	bl	8011502 <ndefT5TPollerReadMultipleBlocks>
 8011134:	4603      	mov	r3, r0
 8011136:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 8011138:	8afb      	ldrh	r3, [r7, #22]
 801113a:	2b00      	cmp	r3, #0
 801113c:	bf0c      	ite	eq
 801113e:	2301      	moveq	r3, #1
 8011140:	2300      	movne	r3, #0
 8011142:	b2da      	uxtb	r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8011150:	2b00      	cmp	r3, #0
 8011152:	d056      	beq.n	8011202 <ndefT5TPollerTagFormat+0x192>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 801115a:	089b      	lsrs	r3, r3, #2
 801115c:	b2db      	uxtb	r3, r3
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b00      	cmp	r3, #0
 8011164:	d04d      	beq.n	8011202 <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 801116c:	461a      	mov	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8011174:	fb02 f303 	mul.w	r3, r2, r3
 8011178:	08db      	lsrs	r3, r3, #3
 801117a:	b29a      	uxth	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b00      	cmp	r3, #0
 801118a:	d016      	beq.n	80111ba <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011192:	2bff      	cmp	r3, #255	; 0xff
 8011194:	d903      	bls.n	801119e <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2208      	movs	r2, #8
 801119a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d019      	beq.n	80111dc <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80111ae:	3b01      	subs	r3, #1
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80111b8:	e010      	b.n	80111dc <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2204      	movs	r2, #4
 80111be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80111c8:	2bff      	cmp	r3, #255	; 0xff
 80111ca:	d907      	bls.n	80111dc <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	22ff      	movs	r2, #255	; 0xff
 80111d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80111e2:	f083 0301 	eor.w	r3, r3, #1
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00c      	beq.n	8011206 <ndefT5TPollerTagFormat+0x196>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 80111f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111f6:	d906      	bls.n	8011206 <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	22e2      	movs	r2, #226	; 0xe2
 80111fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 8011200:	e001      	b.n	8011206 <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 8011202:	2305      	movs	r3, #5
 8011204:	e047      	b.n	8011296 <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 8011206:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 8011208:	68f8      	ldr	r0, [r7, #12]
 801120a:	f7ff fe55 	bl	8010eb8 <ndefT5TWriteCC>
 801120e:	4603      	mov	r3, r0
 8011210:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 8011212:	8afb      	ldrh	r3, [r7, #22]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d01e      	beq.n	8011256 <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801121e:	f083 0301 	eor.w	r3, r3, #1
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d014      	beq.n	8011252 <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 8011228:	2014      	movs	r0, #20
 801122a:	f7f4 fa61 	bl	80056f0 <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2201      	movs	r2, #1
 8011232:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fe3e 	bl	8010eb8 <ndefT5TWriteCC>
 801123c:	4603      	mov	r3, r0
 801123e:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 8011240:	8afb      	ldrh	r3, [r7, #22]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d007      	beq.n	8011256 <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 801124e:	8afb      	ldrh	r3, [r7, #22]
 8011250:	e021      	b.n	8011296 <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 8011252:	8afb      	ldrh	r3, [r7, #22]
 8011254:	e01f      	b.n	8011296 <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801125c:	461a      	mov	r2, r3
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801126a:	2304      	movs	r3, #4
 801126c:	4a0c      	ldr	r2, [pc, #48]	; (80112a0 <ndefT5TPollerTagFormat+0x230>)
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f7ff fc2d 	bl	8010ace <ndefT5TPollerWriteBytes>
 8011274:	4603      	mov	r3, r0
 8011276:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 8011278:	8afb      	ldrh	r3, [r7, #22]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d10a      	bne.n	8011294 <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011284:	1c9a      	adds	r2, r3, #2
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 8011294:	8afb      	ldrh	r3, [r7, #22]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3718      	adds	r7, #24
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	08021c18 	.word	0x08021c18

080112a4 <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b086      	sub	sp, #24
 80112a8:	af02      	add	r7, sp, #8
 80112aa:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d003      	beq.n	80112ba <ndefT5TPollerCheckPresence+0x16>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d001      	beq.n	80112be <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 80112ba:	2307      	movs	r3, #7
 80112bc:	e00f      	b.n	80112de <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 80112be:	2300      	movs	r3, #0
 80112c0:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 80112c8:	89f9      	ldrh	r1, [r7, #14]
 80112ca:	f107 030a 	add.w	r3, r7, #10
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	2323      	movs	r3, #35	; 0x23
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 f96b 	bl	80115ae <ndefT5TPollerReadSingleBlock>
 80112d8:	4603      	mov	r3, r0
 80112da:	81bb      	strh	r3, [r7, #12]

    return ret;
 80112dc:	89bb      	ldrh	r3, [r7, #12]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 80112e6:	b480      	push	{r7}
 80112e8:	b085      	sub	sp, #20
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d003      	beq.n	80112fe <ndefT5TPollerCheckAvailableSpace+0x18>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d001      	beq.n	8011302 <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 80112fe:	2307      	movs	r3, #7
 8011300:	e021      	b.n	8011346 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011308:	2b00      	cmp	r3, #0
 801130a:	d101      	bne.n	8011310 <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 801130c:	2321      	movs	r3, #33	; 0x21
 801130e:	e01a      	b.n	8011346 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2bfe      	cmp	r3, #254	; 0xfe
 8011314:	d901      	bls.n	801131a <ndefT5TPollerCheckAvailableSpace+0x34>
 8011316:	2303      	movs	r3, #3
 8011318:	e000      	b.n	801131c <ndefT5TPollerCheckAvailableSpace+0x36>
 801131a:	2301      	movs	r3, #1
 801131c:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	441a      	add	r2, r3
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	4413      	add	r3, r2
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011334:	6879      	ldr	r1, [r7, #4]
 8011336:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 801133a:	440b      	add	r3, r1
 801133c:	429a      	cmp	r2, r3
 801133e:	d901      	bls.n	8011344 <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 8011340:	2301      	movs	r3, #1
 8011342:	e000      	b.n	8011346 <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	3714      	adds	r7, #20
 801134a:	46bd      	mov	sp, r7
 801134c:	bc80      	pop	{r7}
 801134e:	4770      	bx	lr

08011350 <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d003      	beq.n	8011368 <ndefT5TPollerBeginWriteMessage+0x18>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2b03      	cmp	r3, #3
 8011366:	d001      	beq.n	801136c <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 8011368:	2307      	movs	r3, #7
 801136a:	e03b      	b.n	80113e4 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011372:	2b01      	cmp	r3, #1
 8011374:	d006      	beq.n	8011384 <ndefT5TPollerBeginWriteMessage+0x34>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801137c:	2b02      	cmp	r3, #2
 801137e:	d001      	beq.n	8011384 <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 8011380:	2321      	movs	r3, #33	; 0x21
 8011382:	e02f      	b.n	80113e4 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 8011384:	2100      	movs	r1, #0
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fcaf 	bl	8010cea <ndefT5TPollerWriteRawMessageLen>
 801138c:	4603      	mov	r3, r0
 801138e:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8011390:	89fb      	ldrh	r3, [r7, #14]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d005      	beq.n	80113a2 <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 801139e:	89fb      	ldrh	r3, [r7, #14]
 80113a0:	e020      	b.n	80113e4 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	2bfe      	cmp	r3, #254	; 0xfe
 80113a6:	d901      	bls.n	80113ac <ndefT5TPollerBeginWriteMessage+0x5c>
 80113a8:	2303      	movs	r3, #3
 80113aa:	e000      	b.n	80113ae <ndefT5TPollerBeginWriteMessage+0x5e>
 80113ac:	2301      	movs	r3, #1
 80113ae:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80113c2:	1c5a      	adds	r2, r3, #1
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	441a      	add	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <ndefT5TPollerEndWriteMessage+0x18>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b03      	cmp	r3, #3
 8011402:	d001      	beq.n	8011408 <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 8011404:	2307      	movs	r3, #7
 8011406:	e025      	b.n	8011454 <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801140e:	2b01      	cmp	r3, #1
 8011410:	d001      	beq.n	8011416 <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 8011412:	2321      	movs	r3, #33	; 0x21
 8011414:	e01e      	b.n	8011454 <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff fc66 	bl	8010cea <ndefT5TPollerWriteRawMessageLen>
 801141e:	4603      	mov	r3, r0
 8011420:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8011422:	89fb      	ldrh	r3, [r7, #14]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d005      	beq.n	8011434 <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8011430:	89fb      	ldrh	r3, [r7, #14]
 8011432:	e00f      	b.n	8011454 <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	683a      	ldr	r2, [r7, #0]
 8011438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <ndefT5TPollerEndWriteMessage+0x5e>
 8011446:	2201      	movs	r2, #1
 8011448:	e000      	b.n	801144c <ndefT5TPollerEndWriteMessage+0x60>
 801144a:	2202      	movs	r2, #2
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 8011452:	2300      	movs	r3, #0
}
 8011454:	4618      	mov	r0, r3
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af02      	add	r7, sp, #8
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	460b      	mov	r3, r1
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d003      	beq.n	8011478 <ndefT5TPollerWriteSingleBlock+0x1c>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	2b03      	cmp	r3, #3
 8011476:	d001      	beq.n	801147c <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 8011478:	2307      	movs	r3, #7
 801147a:	e03e      	b.n	80114fa <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <ndefT5TPollerWriteSingleBlock+0x2e>
 8011486:	2342      	movs	r3, #66	; 0x42
 8011488:	e000      	b.n	801148c <ndefT5TPollerWriteSingleBlock+0x30>
 801148a:	2302      	movs	r3, #2
 801148c:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00e      	beq.n	80114b6 <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80114a4:	897a      	ldrh	r2, [r7, #10]
 80114a6:	7d78      	ldrb	r0, [r7, #21]
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f00b fb78 	bl	801cba0 <rfalST25xVPollerM24LRWriteSingleBlock>
 80114b0:	4603      	mov	r3, r0
 80114b2:	82fb      	strh	r3, [r7, #22]
 80114b4:	e020      	b.n	80114f8 <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 80114b6:	897b      	ldrh	r3, [r7, #10]
 80114b8:	2bff      	cmp	r3, #255	; 0xff
 80114ba:	d80f      	bhi.n	80114dc <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80114c2:	897b      	ldrh	r3, [r7, #10]
 80114c4:	b2da      	uxtb	r2, r3
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80114cc:	7d78      	ldrb	r0, [r7, #21]
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f007 ffb2 	bl	801943a <rfalNfcvPollerWriteSingleBlock>
 80114d6:	4603      	mov	r3, r0
 80114d8:	82fb      	strh	r3, [r7, #22]
 80114da:	e00d      	b.n	80114f8 <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80114e8:	897a      	ldrh	r2, [r7, #10]
 80114ea:	7d78      	ldrb	r0, [r7, #21]
 80114ec:	9300      	str	r3, [sp, #0]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f008 f85d 	bl	80195ae <rfalNfcvPollerExtendedWriteSingleBlock>
 80114f4:	4603      	mov	r3, r0
 80114f6:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 80114f8:	8afb      	ldrh	r3, [r7, #22]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3718      	adds	r7, #24
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b08a      	sub	sp, #40	; 0x28
 8011506:	af04      	add	r7, sp, #16
 8011508:	60f8      	str	r0, [r7, #12]
 801150a:	607b      	str	r3, [r7, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	817b      	strh	r3, [r7, #10]
 8011510:	4613      	mov	r3, r2
 8011512:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d003      	beq.n	8011522 <ndefT5TPollerReadMultipleBlocks+0x20>
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b03      	cmp	r3, #3
 8011520:	d001      	beq.n	8011526 <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 8011522:	2307      	movs	r3, #7
 8011524:	e03f      	b.n	80115a6 <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 801152c:	2b00      	cmp	r3, #0
 801152e:	d011      	beq.n	8011554 <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011536:	7a78      	ldrb	r0, [r7, #9]
 8011538:	897a      	ldrh	r2, [r7, #10]
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	9302      	str	r3, [sp, #8]
 801153e:	8c3b      	ldrh	r3, [r7, #32]
 8011540:	9301      	str	r3, [sp, #4]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	9300      	str	r3, [sp, #0]
 8011546:	4603      	mov	r3, r0
 8011548:	2002      	movs	r0, #2
 801154a:	f00b fb89 	bl	801cc60 <rfalST25xVPollerM24LRReadMultipleBlocks>
 801154e:	4603      	mov	r3, r0
 8011550:	82fb      	strh	r3, [r7, #22]
 8011552:	e027      	b.n	80115a4 <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 8011554:	897b      	ldrh	r3, [r7, #10]
 8011556:	2bff      	cmp	r3, #255	; 0xff
 8011558:	d812      	bhi.n	8011580 <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011560:	897b      	ldrh	r3, [r7, #10]
 8011562:	b2da      	uxtb	r2, r3
 8011564:	7a78      	ldrb	r0, [r7, #9]
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	9302      	str	r3, [sp, #8]
 801156a:	8c3b      	ldrh	r3, [r7, #32]
 801156c:	9301      	str	r3, [sp, #4]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	4603      	mov	r3, r0
 8011574:	2002      	movs	r0, #2
 8011576:	f007 ffaf 	bl	80194d8 <rfalNfcvPollerReadMultipleBlocks>
 801157a:	4603      	mov	r3, r0
 801157c:	82fb      	strh	r3, [r7, #22]
 801157e:	e011      	b.n	80115a4 <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011586:	7a7b      	ldrb	r3, [r7, #9]
 8011588:	b298      	uxth	r0, r3
 801158a:	897a      	ldrh	r2, [r7, #10]
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	9302      	str	r3, [sp, #8]
 8011590:	8c3b      	ldrh	r3, [r7, #32]
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	4603      	mov	r3, r0
 801159a:	2002      	movs	r0, #2
 801159c:	f008 f861 	bl	8019662 <rfalNfcvPollerExtendedReadMultipleBlocks>
 80115a0:	4603      	mov	r3, r0
 80115a2:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 80115a4:	8afb      	ldrh	r3, [r7, #22]
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3718      	adds	r7, #24
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b088      	sub	sp, #32
 80115b2:	af02      	add	r7, sp, #8
 80115b4:	60f8      	str	r0, [r7, #12]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	461a      	mov	r2, r3
 80115ba:	460b      	mov	r3, r1
 80115bc:	817b      	strh	r3, [r7, #10]
 80115be:	4613      	mov	r3, r2
 80115c0:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d003      	beq.n	80115d0 <ndefT5TPollerReadSingleBlock+0x22>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	2b03      	cmp	r3, #3
 80115ce:	d001      	beq.n	80115d4 <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 80115d0:	2307      	movs	r3, #7
 80115d2:	e035      	b.n	8011640 <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00e      	beq.n	80115fc <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80115e4:	897a      	ldrh	r2, [r7, #10]
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	9301      	str	r3, [sp, #4]
 80115ea:	893b      	ldrh	r3, [r7, #8]
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2002      	movs	r0, #2
 80115f2:	f00b fa9c 	bl	801cb2e <rfalST25xVPollerM24LRReadSingleBlock>
 80115f6:	4603      	mov	r3, r0
 80115f8:	82fb      	strh	r3, [r7, #22]
 80115fa:	e020      	b.n	801163e <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 80115fc:	897b      	ldrh	r3, [r7, #10]
 80115fe:	2bff      	cmp	r3, #255	; 0xff
 8011600:	d80f      	bhi.n	8011622 <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011608:	897b      	ldrh	r3, [r7, #10]
 801160a:	b2da      	uxtb	r2, r3
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	893b      	ldrh	r3, [r7, #8]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2002      	movs	r0, #2
 8011618:	f007 feee 	bl	80193f8 <rfalNfcvPollerReadSingleBlock>
 801161c:	4603      	mov	r3, r0
 801161e:	82fb      	strh	r3, [r7, #22]
 8011620:	e00d      	b.n	801163e <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011628:	897a      	ldrh	r2, [r7, #10]
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	893b      	ldrh	r3, [r7, #8]
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2002      	movs	r0, #2
 8011636:	f007 ff84 	bl	8019542 <rfalNfcvPollerExtendedReadSingleBlock>
 801163a:	4603      	mov	r3, r0
 801163c:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 801163e:	8afb      	ldrh	r3, [r7, #22]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3718      	adds	r7, #24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08e      	sub	sp, #56	; 0x38
 801164c:	af02      	add	r7, sp, #8
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	460b      	mov	r3, r1
 8011652:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d003      	beq.n	8011662 <ndefT5TGetSystemInformation+0x1a>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b03      	cmp	r3, #3
 8011660:	d001      	beq.n	8011666 <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 8011662:	2307      	movs	r3, #7
 8011664:	e0ff      	b.n	8011866 <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 8011666:	78fb      	ldrb	r3, [r7, #3]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d011      	beq.n	8011690 <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011672:	f107 0210 	add.w	r2, r7, #16
 8011676:	f107 030e 	add.w	r3, r7, #14
 801167a:	9301      	str	r3, [sp, #4]
 801167c:	2316      	movs	r3, #22
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	4613      	mov	r3, r2
 8011682:	227f      	movs	r2, #127	; 0x7f
 8011684:	2002      	movs	r0, #2
 8011686:	f008 f858 	bl	801973a <rfalNfcvPollerExtendedGetSystemInformation>
 801168a:	4603      	mov	r3, r0
 801168c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801168e:	e014      	b.n	80116ba <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d001      	beq.n	801169e <ndefT5TGetSystemInformation+0x56>
 801169a:	200a      	movs	r0, #10
 801169c:	e000      	b.n	80116a0 <ndefT5TGetSystemInformation+0x58>
 801169e:	2002      	movs	r0, #2
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80116a6:	f107 0210 	add.w	r2, r7, #16
 80116aa:	f107 030e 	add.w	r3, r7, #14
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	2316      	movs	r3, #22
 80116b2:	f008 f823 	bl	80196fc <rfalNfcvPollerGetSystemInformation>
 80116b6:	4603      	mov	r3, r0
 80116b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 80116ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 80116c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116c2:	e0d0      	b.n	8011866 <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 80116c4:	f107 0310 	add.w	r3, r7, #16
 80116c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 80116ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116cc:	3301      	adds	r3, #1
 80116ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 80116d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d2:	781a      	ldrb	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 80116da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116dc:	3301      	adds	r3, #1
 80116de:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 80116e0:	78fb      	ldrb	r3, [r7, #3]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00a      	beq.n	80116fc <ndefT5TGetSystemInformation+0xb4>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80116ec:	09db      	lsrs	r3, r3, #7
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 80116f8:	230b      	movs	r3, #11
 80116fa:	e0b4      	b.n	8011866 <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	33c0      	adds	r3, #192	; 0xc0
 8011700:	2208      	movs	r2, #8
 8011702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011704:	4618      	mov	r0, r3
 8011706:	f00b ff0f 	bl	801d528 <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 801170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170c:	3308      	adds	r3, #8
 801170e:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8011716:	f003 0301 	and.w	r3, r3, #1
 801171a:	2b00      	cmp	r3, #0
 801171c:	d007      	beq.n	801172e <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 801171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011720:	781a      	ldrb	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 8011728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172a:	3301      	adds	r3, #1
 801172c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8011734:	085b      	lsrs	r3, r3, #1
 8011736:	b2db      	uxtb	r3, r3
 8011738:	f003 0301 	and.w	r3, r3, #1
 801173c:	2b00      	cmp	r3, #0
 801173e:	d007      	beq.n	8011750 <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	781a      	ldrb	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 801174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801174c:	3301      	adds	r3, #1
 801174e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8011756:	089b      	lsrs	r3, r3, #2
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	2b00      	cmp	r3, #0
 8011760:	d043      	beq.n	80117ea <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8011768:	2b00      	cmp	r3, #0
 801176a:	d102      	bne.n	8011772 <ndefT5TGetSystemInformation+0x12a>
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d01a      	beq.n	80117a8 <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	b29a      	uxth	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 801177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011780:	3301      	adds	r3, #1
 8011782:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 801178a:	b21a      	sxth	r2, r3
 801178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	021b      	lsls	r3, r3, #8
 8011792:	b21b      	sxth	r3, r3
 8011794:	4313      	orrs	r3, r2
 8011796:	b21b      	sxth	r3, r3
 8011798:	b29a      	uxth	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 80117a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a2:	3301      	adds	r3, #1
 80117a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80117a6:	e008      	b.n	80117ba <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 80117a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 80117b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b6:	3301      	adds	r3, #1
 80117b8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 80117ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117bc:	781a      	ldrb	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	3301      	adds	r3, #1
 80117c8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 80117d0:	3301      	adds	r3, #1
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 80117e0:	3301      	adds	r3, #1
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80117f0:	08db      	lsrs	r3, r3, #3
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	f003 0301 	and.w	r3, r3, #1
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d007      	beq.n	801180c <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 80117fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fe:	781a      	ldrb	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 8011806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011808:	3301      	adds	r3, #1
 801180a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 801180c:	78fb      	ldrb	r3, [r7, #3]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d028      	beq.n	8011864 <ndefT5TGetSystemInformation+0x21c>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8011818:	095b      	lsrs	r3, r3, #5
 801181a:	b2db      	uxtb	r3, r3
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d01f      	beq.n	8011864 <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 8011824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011826:	781a      	ldrb	r2, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 801182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011830:	3301      	adds	r3, #1
 8011832:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 8011834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011836:	781a      	ldrb	r2, [r3, #0]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 801183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011840:	3301      	adds	r3, #1
 8011842:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	781a      	ldrb	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 801184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011850:	3301      	adds	r3, #1
 8011852:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 8011854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011856:	781a      	ldrb	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 801185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011860:	3301      	adds	r3, #1
 8011862:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 8011864:	2300      	movs	r3, #0
}
 8011866:	4618      	mov	r0, r3
 8011868:	3730      	adds	r7, #48	; 0x30
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
	...

08011870 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 8011870:	b480      	push	{r7}
 8011872:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 8011874:	4b06      	ldr	r3, [pc, #24]	; (8011890 <rfalAnalogConfigInitialize+0x20>)
 8011876:	4a07      	ldr	r2, [pc, #28]	; (8011894 <rfalAnalogConfigInitialize+0x24>)
 8011878:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 801187a:	4b05      	ldr	r3, [pc, #20]	; (8011890 <rfalAnalogConfigInitialize+0x20>)
 801187c:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8011880:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 8011882:	4b03      	ldr	r3, [pc, #12]	; (8011890 <rfalAnalogConfigInitialize+0x20>)
 8011884:	2201      	movs	r2, #1
 8011886:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8011888:	bf00      	nop
 801188a:	46bd      	mov	sp, r7
 801188c:	bc80      	pop	{r7}
 801188e:	4770      	bx	lr
 8011890:	200034d8 	.word	0x200034d8
 8011894:	08021c1c 	.word	0x08021c1c

08011898 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b086      	sub	sp, #24
 801189c:	af00      	add	r7, sp, #0
 801189e:	4603      	mov	r3, r0
 80118a0:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 80118a6:	2300      	movs	r3, #0
 80118a8:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 80118aa:	4b4b      	ldr	r3, [pc, #300]	; (80119d8 <rfalSetAnalogConfig+0x140>)
 80118ac:	799b      	ldrb	r3, [r3, #6]
 80118ae:	f083 0301 	eor.w	r3, r3, #1
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 80118b8:	2305      	movs	r3, #5
 80118ba:	e089      	b.n	80119d0 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 80118bc:	f107 020e 	add.w	r2, r7, #14
 80118c0:	88fb      	ldrh	r3, [r7, #6]
 80118c2:	4611      	mov	r1, r2
 80118c4:	4618      	mov	r0, r3
 80118c6:	f000 f889 	bl	80119dc <rfalAnalogConfigSearch>
 80118ca:	4603      	mov	r3, r0
 80118cc:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 80118ce:	7d3b      	ldrb	r3, [r7, #20]
 80118d0:	2bff      	cmp	r3, #255	; 0xff
 80118d2:	d07b      	beq.n	80119cc <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 80118d4:	4b40      	ldr	r3, [pc, #256]	; (80119d8 <rfalSetAnalogConfig+0x140>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	461a      	mov	r2, r3
 80118da:	89fb      	ldrh	r3, [r7, #14]
 80118dc:	4413      	add	r3, r2
 80118de:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 80118e0:	7d3b      	ldrb	r3, [r7, #20]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	89fb      	ldrh	r3, [r7, #14]
 80118ea:	4413      	add	r3, r2
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 80118f0:	4b39      	ldr	r3, [pc, #228]	; (80119d8 <rfalSetAnalogConfig+0x140>)
 80118f2:	889b      	ldrh	r3, [r3, #4]
 80118f4:	3301      	adds	r3, #1
 80118f6:	89fa      	ldrh	r2, [r7, #14]
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d201      	bcs.n	8011900 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 80118fc:	2301      	movs	r3, #1
 80118fe:	e067      	b.n	80119d0 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 8011900:	2300      	movs	r3, #0
 8011902:	757b      	strb	r3, [r7, #21]
 8011904:	e05d      	b.n	80119c2 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 8011906:	7d7b      	ldrb	r3, [r7, #21]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	693a      	ldr	r2, [r7, #16]
 801190c:	4413      	add	r3, r2
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	021b      	lsls	r3, r3, #8
 8011912:	7d7a      	ldrb	r2, [r7, #21]
 8011914:	0092      	lsls	r2, r2, #2
 8011916:	6939      	ldr	r1, [r7, #16]
 8011918:	440a      	add	r2, r1
 801191a:	7852      	ldrb	r2, [r2, #1]
 801191c:	4313      	orrs	r3, r2
 801191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011922:	2b00      	cmp	r3, #0
 8011924:	d026      	beq.n	8011974 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 8011926:	7d7b      	ldrb	r3, [r7, #21]
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	693a      	ldr	r2, [r7, #16]
 801192c:	4413      	add	r3, r2
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	021b      	lsls	r3, r3, #8
 8011932:	b21a      	sxth	r2, r3
 8011934:	7d7b      	ldrb	r3, [r7, #21]
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	6939      	ldr	r1, [r7, #16]
 801193a:	440b      	add	r3, r1
 801193c:	785b      	ldrb	r3, [r3, #1]
 801193e:	b21b      	sxth	r3, r3
 8011940:	4313      	orrs	r3, r2
 8011942:	b21b      	sxth	r3, r3
 8011944:	b29b      	uxth	r3, r3
 8011946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801194a:	b298      	uxth	r0, r3
 801194c:	7d7b      	ldrb	r3, [r7, #21]
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	693a      	ldr	r2, [r7, #16]
 8011952:	4413      	add	r3, r2
 8011954:	7899      	ldrb	r1, [r3, #2]
 8011956:	7d7b      	ldrb	r3, [r7, #21]
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	693a      	ldr	r2, [r7, #16]
 801195c:	4413      	add	r3, r2
 801195e:	78db      	ldrb	r3, [r3, #3]
 8011960:	461a      	mov	r2, r3
 8011962:	f00a fed6 	bl	801c712 <rfalChipChangeTestRegBits>
 8011966:	4603      	mov	r3, r0
 8011968:	82fb      	strh	r3, [r7, #22]
 801196a:	8afb      	ldrh	r3, [r7, #22]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d025      	beq.n	80119bc <rfalSetAnalogConfig+0x124>
 8011970:	8afb      	ldrh	r3, [r7, #22]
 8011972:	e02d      	b.n	80119d0 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 8011974:	7d7b      	ldrb	r3, [r7, #21]
 8011976:	009b      	lsls	r3, r3, #2
 8011978:	693a      	ldr	r2, [r7, #16]
 801197a:	4413      	add	r3, r2
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	021b      	lsls	r3, r3, #8
 8011980:	b21a      	sxth	r2, r3
 8011982:	7d7b      	ldrb	r3, [r7, #21]
 8011984:	009b      	lsls	r3, r3, #2
 8011986:	6939      	ldr	r1, [r7, #16]
 8011988:	440b      	add	r3, r1
 801198a:	785b      	ldrb	r3, [r3, #1]
 801198c:	b21b      	sxth	r3, r3
 801198e:	4313      	orrs	r3, r2
 8011990:	b21b      	sxth	r3, r3
 8011992:	b298      	uxth	r0, r3
 8011994:	7d7b      	ldrb	r3, [r7, #21]
 8011996:	009b      	lsls	r3, r3, #2
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	4413      	add	r3, r2
 801199c:	7899      	ldrb	r1, [r3, #2]
 801199e:	7d7b      	ldrb	r3, [r7, #21]
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	693a      	ldr	r2, [r7, #16]
 80119a4:	4413      	add	r3, r2
 80119a6:	78db      	ldrb	r3, [r3, #3]
 80119a8:	461a      	mov	r2, r3
 80119aa:	f00a fe9d 	bl	801c6e8 <rfalChipChangeRegBits>
 80119ae:	4603      	mov	r3, r0
 80119b0:	82fb      	strh	r3, [r7, #22]
 80119b2:	8afb      	ldrh	r3, [r7, #22]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <rfalSetAnalogConfig+0x124>
 80119b8:	8afb      	ldrh	r3, [r7, #22]
 80119ba:	e009      	b.n	80119d0 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 80119bc:	7d7b      	ldrb	r3, [r7, #21]
 80119be:	3301      	adds	r3, #1
 80119c0:	757b      	strb	r3, [r7, #21]
 80119c2:	7d7a      	ldrb	r2, [r7, #21]
 80119c4:	7d3b      	ldrb	r3, [r7, #20]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d39d      	bcc.n	8011906 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 80119ca:	e777      	b.n	80118bc <rfalSetAnalogConfig+0x24>
            break;
 80119cc:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 80119ce:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 80119d0:	4618      	mov	r0, r3
 80119d2:	3718      	adds	r7, #24
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	200034d8 	.word	0x200034d8

080119dc <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 80119dc:	b480      	push	{r7}
 80119de:	b089      	sub	sp, #36	; 0x24
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	4603      	mov	r3, r0
 80119e4:	6039      	str	r1, [r7, #0]
 80119e6:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 80119e8:	4b2c      	ldr	r3, [pc, #176]	; (8011a9c <rfalAnalogConfigSearch+0xc0>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 80119ee:	88fb      	ldrh	r3, [r7, #6]
 80119f0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80119f4:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00a      	beq.n	8011a10 <rfalAnalogConfigSearch+0x34>
 80119fa:	88fb      	ldrh	r3, [r7, #6]
 80119fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a08:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	e001      	b.n	8011a14 <rfalAnalogConfigSearch+0x38>
 8011a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a14:	88fb      	ldrh	r3, [r7, #6]
 8011a16:	f003 0303 	and.w	r3, r3, #3
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d001      	beq.n	8011a24 <rfalAnalogConfigSearch+0x48>
 8011a20:	88fb      	ldrh	r3, [r7, #6]
 8011a22:	e000      	b.n	8011a26 <rfalAnalogConfigSearch+0x4a>
 8011a24:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8011a26:	4313      	orrs	r3, r2
 8011a28:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8011a30:	e029      	b.n	8011a86 <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 8011a32:	8bfb      	ldrh	r3, [r7, #30]
 8011a34:	69ba      	ldr	r2, [r7, #24]
 8011a36:	4413      	add	r3, r2
 8011a38:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	021b      	lsls	r3, r3, #8
 8011a40:	b21a      	sxth	r2, r3
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	3301      	adds	r3, #1
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	b21b      	sxth	r3, r3
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	b21b      	sxth	r3, r3
 8011a4e:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 8011a50:	89fa      	ldrh	r2, [r7, #14]
 8011a52:	8afb      	ldrh	r3, [r7, #22]
 8011a54:	4013      	ands	r3, r2
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	88fa      	ldrh	r2, [r7, #6]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d108      	bne.n	8011a70 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8011a5e:	8bfb      	ldrh	r3, [r7, #30]
 8011a60:	3303      	adds	r3, #3
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	3302      	adds	r3, #2
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	e010      	b.n	8011a92 <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	3302      	adds	r3, #2
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8011a7c:	8bfb      	ldrh	r3, [r7, #30]
 8011a7e:	4413      	add	r3, r2
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	3303      	adds	r3, #3
 8011a84:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <rfalAnalogConfigSearch+0xc0>)
 8011a88:	889b      	ldrh	r3, [r3, #4]
 8011a8a:	8bfa      	ldrh	r2, [r7, #30]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d3d0      	bcc.n	8011a32 <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 8011a90:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 8011a92:	4618      	mov	r0, r3
 8011a94:	3724      	adds	r7, #36	; 0x24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bc80      	pop	{r7}
 8011a9a:	4770      	bx	lr
 8011a9c:	200034d8 	.word	0x200034d8

08011aa0 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	6039      	str	r1, [r7, #0]
 8011aaa:	80fb      	strh	r3, [r7, #6]
 8011aac:	4613      	mov	r3, r2
 8011aae:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 8011ab0:	88fb      	ldrh	r3, [r7, #6]
 8011ab2:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	81bb      	strh	r3, [r7, #12]
 8011ab8:	e00d      	b.n	8011ad6 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 8011aba:	89bb      	ldrh	r3, [r7, #12]
 8011abc:	683a      	ldr	r2, [r7, #0]
 8011abe:	4413      	add	r3, r2
 8011ac0:	781a      	ldrb	r2, [r3, #0]
 8011ac2:	89fb      	ldrh	r3, [r7, #14]
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f000 f80e 	bl	8011ae8 <rfalCrcUpdateCcitt>
 8011acc:	4603      	mov	r3, r0
 8011ace:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 8011ad0:	89bb      	ldrh	r3, [r7, #12]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	81bb      	strh	r3, [r7, #12]
 8011ad6:	89ba      	ldrh	r2, [r7, #12]
 8011ad8:	88bb      	ldrh	r3, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d3ed      	bcc.n	8011aba <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 8011ade:	89fb      	ldrh	r3, [r7, #14]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	4603      	mov	r3, r0
 8011af0:	460a      	mov	r2, r1
 8011af2:	80fb      	strh	r3, [r7, #6]
 8011af4:	4613      	mov	r3, r2
 8011af6:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 8011af8:	88fb      	ldrh	r3, [r7, #6]
 8011afa:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 8011afc:	797b      	ldrb	r3, [r7, #5]
 8011afe:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 8011b00:	89fb      	ldrh	r3, [r7, #14]
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	7b7b      	ldrb	r3, [r7, #13]
 8011b06:	4053      	eors	r3, r2
 8011b08:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 8011b0a:	7b7b      	ldrb	r3, [r7, #13]
 8011b0c:	011b      	lsls	r3, r3, #4
 8011b0e:	b25a      	sxtb	r2, r3
 8011b10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011b14:	4053      	eors	r3, r2
 8011b16:	b25b      	sxtb	r3, r3
 8011b18:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8011b1a:	89fb      	ldrh	r3, [r7, #14]
 8011b1c:	0a1b      	lsrs	r3, r3, #8
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	b21a      	sxth	r2, r3
 8011b22:	7b7b      	ldrb	r3, [r7, #13]
 8011b24:	021b      	lsls	r3, r3, #8
 8011b26:	b21b      	sxth	r3, r3
 8011b28:	4053      	eors	r3, r2
 8011b2a:	b21a      	sxth	r2, r3
 8011b2c:	7b7b      	ldrb	r3, [r7, #13]
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	b21b      	sxth	r3, r3
 8011b32:	4053      	eors	r3, r2
 8011b34:	b21a      	sxth	r2, r3
 8011b36:	7b7b      	ldrb	r3, [r7, #13]
 8011b38:	091b      	lsrs	r3, r3, #4
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	b21b      	sxth	r3, r3
 8011b3e:	4053      	eors	r3, r2
 8011b40:	b21b      	sxth	r3, r3
 8011b42:	81fb      	strh	r3, [r7, #14]

    return crc;
 8011b44:	89fb      	ldrh	r3, [r7, #14]
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bc80      	pop	{r7}
 8011b4e:	4770      	bx	lr

08011b50 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 8011b5a:	2208      	movs	r2, #8
 8011b5c:	6879      	ldr	r1, [r7, #4]
 8011b5e:	480d      	ldr	r0, [pc, #52]	; (8011b94 <iso15693PhyConfigure+0x44>)
 8011b60:	f00b fce2 	bl	801d528 <memcpy>
    
    if ( config->speedMode <= 3U)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d808      	bhi.n	8011b7e <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	f1c3 0303 	rsb	r3, r3, #3
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	4b07      	ldr	r3, [pc, #28]	; (8011b98 <iso15693PhyConfigure+0x48>)
 8011b7a:	70da      	strb	r2, [r3, #3]
 8011b7c:	e002      	b.n	8011b84 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 8011b7e:	4b06      	ldr	r3, [pc, #24]	; (8011b98 <iso15693PhyConfigure+0x48>)
 8011b80:	2203      	movs	r2, #3
 8011b82:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	4a04      	ldr	r2, [pc, #16]	; (8011b98 <iso15693PhyConfigure+0x48>)
 8011b88:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	200034e0 	.word	0x200034e0
 8011b98:	20000128 	.word	0x20000128

08011b9c <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 8011b9c:	b590      	push	{r4, r7, lr}
 8011b9e:	b08b      	sub	sp, #44	; 0x2c
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	4608      	mov	r0, r1
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	461a      	mov	r2, r3
 8011baa:	4603      	mov	r3, r0
 8011bac:	807b      	strh	r3, [r7, #2]
 8011bae:	460b      	mov	r3, r1
 8011bb0:	707b      	strb	r3, [r7, #1]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 8011bbe:	787b      	ldrb	r3, [r7, #1]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d001      	beq.n	8011bc8 <iso15693VCDCode+0x2c>
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	e000      	b.n	8011bca <iso15693VCDCode+0x2e>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 8011bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bce:	2200      	movs	r2, #0
 8011bd0:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 8011bd2:	4b93      	ldr	r3, [pc, #588]	; (8011e20 <iso15693VCDCode+0x284>)
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d117      	bne.n	8011c0a <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 8011bda:	2321      	movs	r3, #33	; 0x21
 8011bdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 8011be0:	2304      	movs	r3, #4
 8011be2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 8011be6:	4b8f      	ldr	r3, [pc, #572]	; (8011e24 <iso15693VCDCode+0x288>)
 8011be8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 8011bea:	887a      	ldrh	r2, [r7, #2]
 8011bec:	7d7b      	ldrb	r3, [r7, #21]
 8011bee:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	3302      	adds	r3, #2
 8011bf8:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8011bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfc:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 8011bfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011c02:	2b04      	cmp	r3, #4
 8011c04:	d823      	bhi.n	8011c4e <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 8011c06:	2301      	movs	r3, #1
 8011c08:	e138      	b.n	8011e7c <iso15693VCDCode+0x2e0>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 8011c0a:	2381      	movs	r3, #129	; 0x81
 8011c0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 8011c10:	2304      	movs	r3, #4
 8011c12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 8011c16:	4b84      	ldr	r3, [pc, #528]	; (8011e28 <iso15693VCDCode+0x28c>)
 8011c18:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 8011c1a:	887a      	ldrh	r2, [r7, #2]
 8011c1c:	7d7b      	ldrb	r3, [r7, #21]
 8011c1e:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	019b      	lsls	r3, r3, #6
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	3302      	adds	r3, #2
 8011c28:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8011c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c2c:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 8011c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d005      	beq.n	8011c42 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 8011c36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8011c3c:	d807      	bhi.n	8011c4e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e11c      	b.n	8011e7c <iso15693VCDCode+0x2e0>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 8011c42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011c46:	2b40      	cmp	r3, #64	; 0x40
 8011c48:	d801      	bhi.n	8011c4e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e116      	b.n	8011e7c <iso15693VCDCode+0x2e0>
            }
        }
    }

    if (length == 0U)
 8011c4e:	887b      	ldrh	r3, [r7, #2]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d102      	bne.n	8011c5a <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 8011c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c56:	2201      	movs	r2, #1
 8011c58:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 8011c5a:	887b      	ldrh	r3, [r7, #2]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01b      	beq.n	8011c98 <iso15693VCDCode+0xfc>
 8011c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c62:	881b      	ldrh	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d117      	bne.n	8011c98 <iso15693VCDCode+0xfc>
 8011c68:	783b      	ldrb	r3, [r7, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d014      	beq.n	8011c98 <iso15693VCDCode+0xfc>
 8011c6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011c72:	f083 0301 	eor.w	r3, r3, #1
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00d      	beq.n	8011c98 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	f043 0302 	orr.w	r3, r3, #2
 8011c84:	b2da      	uxtb	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	f023 0301 	bic.w	r3, r3, #1
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 8011c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c9a:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 8011c9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011ca0:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 8011ca2:	887b      	ldrh	r3, [r7, #2]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d03b      	beq.n	8011d20 <iso15693VCDCode+0x184>
 8011ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d137      	bne.n	8011d20 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 8011cb0:	69bb      	ldr	r3, [r7, #24]
 8011cb2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8011cb6:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8011cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cc2:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8011cc4:	8afb      	ldrh	r3, [r7, #22]
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 8011cd0:	e026      	b.n	8011d20 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 8011cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	4413      	add	r3, r2
 8011cdc:	7818      	ldrb	r0, [r3, #0]
 8011cde:	f107 030e 	add.w	r3, r7, #14
 8011ce2:	8afa      	ldrh	r2, [r7, #22]
 8011ce4:	69fc      	ldr	r4, [r7, #28]
 8011ce6:	69b9      	ldr	r1, [r7, #24]
 8011ce8:	47a0      	blx	r4
 8011cea:	4603      	mov	r3, r0
 8011cec:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8011cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cf0:	881a      	ldrh	r2, [r3, #0]
 8011cf2:	89fb      	ldrh	r3, [r7, #14]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cfa:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8011cfc:	89fb      	ldrh	r3, [r7, #14]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	4413      	add	r3, r2
 8011d04:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8011d06:	89fb      	ldrh	r3, [r7, #14]
 8011d08:	8afa      	ldrh	r2, [r7, #22]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8011d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d105      	bne.n	8011d20 <iso15693VCDCode+0x184>
            (*offset)++;
 8011d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d1e:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 8011d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	887a      	ldrh	r2, [r7, #2]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d902      	bls.n	8011d30 <iso15693VCDCode+0x194>
 8011d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0d0      	beq.n	8011cd2 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8011d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d062      	beq.n	8011dfc <iso15693VCDCode+0x260>
        return ERR_AGAIN;
 8011d36:	230d      	movs	r3, #13
 8011d38:	e0a0      	b.n	8011e7c <iso15693VCDCode+0x2e0>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 8011d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d12b      	bne.n	8011d98 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8011d40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <iso15693VCDCode+0x1b2>
 8011d48:	f24e 0012 	movw	r0, #57362	; 0xe012
 8011d4c:	e001      	b.n	8011d52 <iso15693VCDCode+0x1b6>
 8011d4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d002      	beq.n	8011d60 <iso15693VCDCode+0x1c4>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	e000      	b.n	8011d62 <iso15693VCDCode+0x1c6>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011d66:	2a00      	cmp	r2, #0
 8011d68:	d003      	beq.n	8011d72 <iso15693VCDCode+0x1d6>
 8011d6a:	887a      	ldrh	r2, [r7, #2]
 8011d6c:	3a01      	subs	r2, #1
 8011d6e:	b292      	uxth	r2, r2
 8011d70:	e000      	b.n	8011d74 <iso15693VCDCode+0x1d8>
 8011d72:	887a      	ldrh	r2, [r7, #2]
 8011d74:	4619      	mov	r1, r3
 8011d76:	f7ff fe93 	bl	8011aa0 <rfalCrcCalculateCcitt>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8011d7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011d82:	f083 0301 	eor.w	r3, r3, #1
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d003      	beq.n	8011d94 <iso15693VCDCode+0x1f8>
 8011d8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d8e:	43db      	mvns	r3, r3
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	e000      	b.n	8011d96 <iso15693VCDCode+0x1fa>
 8011d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d96:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 8011d98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8011d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011da0:	0a1b      	lsrs	r3, r3, #8
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8011da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	887b      	ldrh	r3, [r7, #2]
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	3328      	adds	r3, #40	; 0x28
 8011db4:	443b      	add	r3, r7
 8011db6:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8011dba:	f107 030c 	add.w	r3, r7, #12
 8011dbe:	8afa      	ldrh	r2, [r7, #22]
 8011dc0:	69fc      	ldr	r4, [r7, #28]
 8011dc2:	69b9      	ldr	r1, [r7, #24]
 8011dc4:	47a0      	blx	r4
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8011dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dcc:	881a      	ldrh	r2, [r3, #0]
 8011dce:	89bb      	ldrh	r3, [r7, #12]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	b29a      	uxth	r2, r3
 8011dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dd6:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8011dd8:	89bb      	ldrh	r3, [r7, #12]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	4413      	add	r3, r2
 8011de0:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8011de2:	89bb      	ldrh	r3, [r7, #12]
 8011de4:	8afa      	ldrh	r2, [r7, #22]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8011dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d105      	bne.n	8011dfc <iso15693VCDCode+0x260>
            (*offset)++;
 8011df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	3301      	adds	r3, #1
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dfa:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8011dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d109      	bne.n	8011e16 <iso15693VCDCode+0x27a>
 8011e02:	787b      	ldrb	r3, [r7, #1]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d006      	beq.n	8011e16 <iso15693VCDCode+0x27a>
 8011e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e0a:	881b      	ldrh	r3, [r3, #0]
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	887b      	ldrh	r3, [r7, #2]
 8011e10:	3302      	adds	r3, #2
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d391      	bcc.n	8011d3a <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 8011e16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d007      	beq.n	8011e2c <iso15693VCDCode+0x290>
        return ERR_AGAIN;
 8011e1c:	230d      	movs	r3, #13
 8011e1e:	e02d      	b.n	8011e7c <iso15693VCDCode+0x2e0>
 8011e20:	200034e0 	.word	0x200034e0
 8011e24:	080120c1 	.word	0x080120c1
 8011e28:	08012169 	.word	0x08012169
    }

    if ((!sendCrc && (*offset == length))
 8011e2c:	787b      	ldrb	r3, [r7, #1]
 8011e2e:	f083 0301 	eor.w	r3, r3, #1
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d004      	beq.n	8011e42 <iso15693VCDCode+0x2a6>
 8011e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e3a:	881b      	ldrh	r3, [r3, #0]
 8011e3c:	887a      	ldrh	r2, [r7, #2]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d009      	beq.n	8011e56 <iso15693VCDCode+0x2ba>
            || (sendCrc && (*offset == (length + 2U))))
 8011e42:	787b      	ldrb	r3, [r7, #1]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d018      	beq.n	8011e7a <iso15693VCDCode+0x2de>
 8011e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	887b      	ldrh	r3, [r7, #2]
 8011e50:	3302      	adds	r3, #2
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d111      	bne.n	8011e7a <iso15693VCDCode+0x2de>
    {
        *outputBuf = eof; 
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8011e5c:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8011e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e60:	881b      	ldrh	r3, [r3, #0]
 8011e62:	3301      	adds	r3, #1
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e68:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8011e6a:	8afb      	ldrh	r3, [r7, #22]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	3301      	adds	r3, #1
 8011e74:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 8011e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e78:	e000      	b.n	8011e7c <iso15693VCDCode+0x2e0>
        return ERR_AGAIN;
 8011e7a:	230d      	movs	r3, #13
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	372c      	adds	r7, #44	; 0x2c
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd90      	pop	{r4, r7, pc}

08011e84 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b088      	sub	sp, #32
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	60f8      	str	r0, [r7, #12]
 8011e8c:	607a      	str	r2, [r7, #4]
 8011e8e:	461a      	mov	r2, r3
 8011e90:	460b      	mov	r3, r1
 8011e92:	817b      	strh	r3, [r7, #10]
 8011e94:	4613      	mov	r3, r2
 8011e96:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	f003 031f 	and.w	r3, r3, #31
 8011eb0:	2b17      	cmp	r3, #23
 8011eb2:	d001      	beq.n	8011eb8 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 8011eb4:	2309      	movs	r3, #9
 8011eb6:	e0ff      	b.n	80120b8 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 8011eb8:	893b      	ldrh	r3, [r7, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d101      	bne.n	8011ec2 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	e0fa      	b.n	80120b8 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 8011ec2:	2305      	movs	r3, #5
 8011ec4:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 8011eca:	893b      	ldrh	r3, [r7, #8]
 8011ecc:	461a      	mov	r2, r3
 8011ece:	2100      	movs	r1, #0
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f00b fb51 	bl	801d578 <memset>

    if (inBufLen == 0U)
 8011ed6:	897b      	ldrh	r3, [r7, #10]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f040 808e 	bne.w	8011ffa <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8011ede:	2315      	movs	r3, #21
 8011ee0:	e0ea      	b.n	80120b8 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8011ee6:	8bbb      	ldrh	r3, [r7, #28]
 8011ee8:	08db      	lsrs	r3, r3, #3
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	461a      	mov	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	8bbb      	ldrh	r3, [r7, #28]
 8011ef8:	f003 0307 	and.w	r3, r3, #7
 8011efc:	fa42 f303 	asr.w	r3, r2, r3
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8011f08:	8bbb      	ldrh	r3, [r7, #28]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	08db      	lsrs	r3, r3, #3
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	4413      	add	r3, r2
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	461a      	mov	r2, r3
 8011f16:	8bbb      	ldrh	r3, [r7, #28]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	f003 0307 	and.w	r3, r3, #7
 8011f1e:	fa42 f303 	asr.w	r3, r2, r3
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f003 0302 	and.w	r3, r3, #2
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	7e3b      	ldrb	r3, [r7, #24]
 8011f30:	4313      	orrs	r3, r2
 8011f32:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8011f34:	7e3b      	ldrb	r3, [r7, #24]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d102      	bne.n	8011f40 <iso15693VICCDecode+0xbc>
        {
            bp++;
 8011f3a:	8b7b      	ldrh	r3, [r7, #26]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8011f40:	7e3b      	ldrb	r3, [r7, #24]
 8011f42:	2b02      	cmp	r3, #2
 8011f44:	d119      	bne.n	8011f7a <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8011f46:	8b7b      	ldrh	r3, [r7, #26]
 8011f48:	08db      	lsrs	r3, r3, #3
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4413      	add	r3, r2
 8011f52:	7819      	ldrb	r1, [r3, #0]
 8011f54:	8b7b      	ldrh	r3, [r7, #26]
 8011f56:	f003 0307 	and.w	r3, r3, #7
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	8b7b      	ldrh	r3, [r7, #26]
 8011f64:	08db      	lsrs	r3, r3, #3
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4403      	add	r3, r0
 8011f6e:	430a      	orrs	r2, r1
 8011f70:	b2d2      	uxtb	r2, r2
 8011f72:	701a      	strb	r2, [r3, #0]
            bp++;
 8011f74:	8b7b      	ldrh	r3, [r7, #26]
 8011f76:	3301      	adds	r3, #1
 8011f78:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 8011f7a:	8b7b      	ldrh	r3, [r7, #26]
 8011f7c:	f003 0307 	and.w	r3, r3, #7
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d115      	bne.n	8011fb2 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8011f86:	8bbb      	ldrh	r3, [r7, #28]
 8011f88:	08db      	lsrs	r3, r3, #3
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	4413      	add	r3, r2
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011f98:	2ba0      	cmp	r3, #160	; 0xa0
 8011f9a:	d10a      	bne.n	8011fb2 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 8011f9c:	8bbb      	ldrh	r3, [r7, #28]
 8011f9e:	08db      	lsrs	r3, r3, #3
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	68fa      	ldr	r2, [r7, #12]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	2b03      	cmp	r3, #3
 8011fac:	d101      	bne.n	8011fb2 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8011fb2:	7e3b      	ldrb	r3, [r7, #24]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d002      	beq.n	8011fbe <iso15693VICCDecode+0x13a>
 8011fb8:	7e3b      	ldrb	r3, [r7, #24]
 8011fba:	2b03      	cmp	r3, #3
 8011fbc:	d10f      	bne.n	8011fde <iso15693VICCDecode+0x15a>
 8011fbe:	7e7b      	ldrb	r3, [r7, #25]
 8011fc0:	f083 0301 	eor.w	r3, r3, #1
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d009      	beq.n	8011fde <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 8011fca:	8b7a      	ldrh	r2, [r7, #26]
 8011fcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d302      	bcc.n	8011fd8 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 8011fd2:	231d      	movs	r3, #29
 8011fd4:	83fb      	strh	r3, [r7, #30]
 8011fd6:	e002      	b.n	8011fde <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 8011fd8:	8b7b      	ldrh	r3, [r7, #26]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8011fde:	8b7a      	ldrh	r2, [r7, #26]
 8011fe0:	893b      	ldrh	r3, [r7, #8]
 8011fe2:	00db      	lsls	r3, r3, #3
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d20f      	bcs.n	8012008 <iso15693VICCDecode+0x184>
 8011fe8:	8bfb      	ldrh	r3, [r7, #30]
 8011fea:	2b1d      	cmp	r3, #29
 8011fec:	d00c      	beq.n	8012008 <iso15693VICCDecode+0x184>
 8011fee:	7e7b      	ldrb	r3, [r7, #25]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d109      	bne.n	8012008 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8011ff4:	8bbb      	ldrh	r3, [r7, #28]
 8011ff6:	3302      	adds	r3, #2
 8011ff8:	83bb      	strh	r3, [r7, #28]
 8011ffa:	8bba      	ldrh	r2, [r7, #28]
 8011ffc:	897b      	ldrh	r3, [r7, #10]
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	3b02      	subs	r3, #2
 8012002:	429a      	cmp	r2, r3
 8012004:	f4ff af6d 	bcc.w	8011ee2 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 8012008:	8b7b      	ldrh	r3, [r7, #26]
 801200a:	08db      	lsrs	r3, r3, #3
 801200c:	b29a      	uxth	r2, r3
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	8b7a      	ldrh	r2, [r7, #26]
 8012016:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 8012018:	8bfb      	ldrh	r3, [r7, #30]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <iso15693VICCDecode+0x19e>
    {
        return err;
 801201e:	8bfb      	ldrh	r3, [r7, #30]
 8012020:	e04a      	b.n	80120b8 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 8012022:	8b7b      	ldrh	r3, [r7, #26]
 8012024:	f003 0307 	and.w	r3, r3, #7
 8012028:	b29b      	uxth	r3, r3
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 801202e:	2315      	movs	r3, #21
 8012030:	e042      	b.n	80120b8 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	881b      	ldrh	r3, [r3, #0]
 8012036:	2b02      	cmp	r3, #2
 8012038:	d93b      	bls.n	80120b2 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 801203a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801203e:	2b00      	cmp	r3, #0
 8012040:	d002      	beq.n	8012048 <iso15693VICCDecode+0x1c4>
 8012042:	f24e 0012 	movw	r0, #57362	; 0xe012
 8012046:	e001      	b.n	801204c <iso15693VICCDecode+0x1c8>
 8012048:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	3b02      	subs	r3, #2
 8012052:	b29b      	uxth	r3, r3
 8012054:	461a      	mov	r2, r3
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	f7ff fd22 	bl	8011aa0 <rfalCrcCalculateCcitt>
 801205c:	4603      	mov	r3, r0
 801205e:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8012060:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012064:	f083 0301 	eor.w	r3, r3, #1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d003      	beq.n	8012076 <iso15693VICCDecode+0x1f2>
 801206e:	8afb      	ldrh	r3, [r7, #22]
 8012070:	43db      	mvns	r3, r3
 8012072:	b29b      	uxth	r3, r3
 8012074:	e000      	b.n	8012078 <iso15693VICCDecode+0x1f4>
 8012076:	8afb      	ldrh	r3, [r7, #22]
 8012078:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 801207a:	8afb      	ldrh	r3, [r7, #22]
 801207c:	b2db      	uxtb	r3, r3
 801207e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012080:	8812      	ldrh	r2, [r2, #0]
 8012082:	3a02      	subs	r2, #2
 8012084:	6879      	ldr	r1, [r7, #4]
 8012086:	440a      	add	r2, r1
 8012088:	7812      	ldrb	r2, [r2, #0]
 801208a:	4293      	cmp	r3, r2
 801208c:	d10e      	bne.n	80120ac <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 801208e:	8afb      	ldrh	r3, [r7, #22]
 8012090:	0a1b      	lsrs	r3, r3, #8
 8012092:	b29b      	uxth	r3, r3
 8012094:	b2db      	uxtb	r3, r3
 8012096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012098:	8812      	ldrh	r2, [r2, #0]
 801209a:	3a01      	subs	r2, #1
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	440a      	add	r2, r1
 80120a0:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d102      	bne.n	80120ac <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 80120a6:	2300      	movs	r3, #0
 80120a8:	83fb      	strh	r3, [r7, #30]
 80120aa:	e004      	b.n	80120b6 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 80120ac:	2315      	movs	r3, #21
 80120ae:	83fb      	strh	r3, [r7, #30]
 80120b0:	e001      	b.n	80120b6 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 80120b2:	2315      	movs	r3, #21
 80120b4:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 80120b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3720      	adds	r7, #32
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b089      	sub	sp, #36	; 0x24
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60b9      	str	r1, [r7, #8]
 80120c8:	607b      	str	r3, [r7, #4]
 80120ca:	4603      	mov	r3, r0
 80120cc:	73fb      	strb	r3, [r7, #15]
 80120ce:	4613      	mov	r3, r2
 80120d0:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 80120d2:	2300      	movs	r3, #0
 80120d4:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 80120e0:	89bb      	ldrh	r3, [r7, #12]
 80120e2:	2b03      	cmp	r3, #3
 80120e4:	d801      	bhi.n	80120ea <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e038      	b.n	801215c <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 80120ea:	7bfb      	ldrb	r3, [r7, #15]
 80120ec:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 80120ee:	2300      	movs	r3, #0
 80120f0:	83bb      	strh	r3, [r7, #28]
 80120f2:	e02f      	b.n	8012154 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 80120f4:	7ffb      	ldrb	r3, [r7, #31]
 80120f6:	f003 0303 	and.w	r3, r3, #3
 80120fa:	2b03      	cmp	r3, #3
 80120fc:	d81a      	bhi.n	8012134 <iso15693PhyVCDCode1Of4+0x74>
 80120fe:	a201      	add	r2, pc, #4	; (adr r2, 8012104 <iso15693PhyVCDCode1Of4+0x44>)
 8012100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012104:	08012115 	.word	0x08012115
 8012108:	0801211d 	.word	0x0801211d
 801210c:	08012125 	.word	0x08012125
 8012110:	0801212d 	.word	0x0801212d
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	2202      	movs	r2, #2
 8012118:	701a      	strb	r2, [r3, #0]
                break;
 801211a:	e00c      	b.n	8012136 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	2208      	movs	r2, #8
 8012120:	701a      	strb	r2, [r3, #0]
                break;
 8012122:	e008      	b.n	8012136 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	2220      	movs	r2, #32
 8012128:	701a      	strb	r2, [r3, #0]
                break;
 801212a:	e004      	b.n	8012136 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	2280      	movs	r2, #128	; 0x80
 8012130:	701a      	strb	r2, [r3, #0]
                break;
 8012132:	e000      	b.n	8012136 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 8012134:	bf00      	nop
        }
        outbuf++;
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	3301      	adds	r3, #1
 801213a:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	3301      	adds	r3, #1
 8012142:	b29a      	uxth	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 8012148:	7ffb      	ldrb	r3, [r7, #31]
 801214a:	089b      	lsrs	r3, r3, #2
 801214c:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 801214e:	8bbb      	ldrh	r3, [r7, #28]
 8012150:	3301      	adds	r3, #1
 8012152:	83bb      	strh	r3, [r7, #28]
 8012154:	8bbb      	ldrh	r3, [r7, #28]
 8012156:	2b03      	cmp	r3, #3
 8012158:	d9cc      	bls.n	80120f4 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 801215a:	8afb      	ldrh	r3, [r7, #22]
}
 801215c:	4618      	mov	r0, r3
 801215e:	3724      	adds	r7, #36	; 0x24
 8012160:	46bd      	mov	sp, r7
 8012162:	bc80      	pop	{r7}
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop

08012168 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8012168:	b480      	push	{r7}
 801216a:	b089      	sub	sp, #36	; 0x24
 801216c:	af00      	add	r7, sp, #0
 801216e:	60b9      	str	r1, [r7, #8]
 8012170:	607b      	str	r3, [r7, #4]
 8012172:	4603      	mov	r3, r0
 8012174:	73fb      	strb	r3, [r7, #15]
 8012176:	4613      	mov	r3, r2
 8012178:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 801217a:	2300      	movs	r3, #0
 801217c:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 8012188:	89bb      	ldrh	r3, [r7, #12]
 801218a:	2b3f      	cmp	r3, #63	; 0x3f
 801218c:	d801      	bhi.n	8012192 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 801218e:	2301      	movs	r3, #1
 8012190:	e039      	b.n	8012206 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8012192:	7bfb      	ldrb	r3, [r7, #15]
 8012194:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 8012196:	2300      	movs	r3, #0
 8012198:	83bb      	strh	r3, [r7, #28]
 801219a:	e030      	b.n	80121fe <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 801219c:	7ffb      	ldrb	r3, [r7, #31]
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d81a      	bhi.n	80121d8 <iso15693PhyVCDCode1Of256+0x70>
 80121a2:	a201      	add	r2, pc, #4	; (adr r2, 80121a8 <iso15693PhyVCDCode1Of256+0x40>)
 80121a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a8:	080121b9 	.word	0x080121b9
 80121ac:	080121c1 	.word	0x080121c1
 80121b0:	080121c9 	.word	0x080121c9
 80121b4:	080121d1 	.word	0x080121d1
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	2202      	movs	r2, #2
 80121bc:	701a      	strb	r2, [r3, #0]
                break;
 80121be:	e00f      	b.n	80121e0 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	2208      	movs	r2, #8
 80121c4:	701a      	strb	r2, [r3, #0]
                break;
 80121c6:	e00b      	b.n	80121e0 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	2220      	movs	r2, #32
 80121cc:	701a      	strb	r2, [r3, #0]
                break;
 80121ce:	e007      	b.n	80121e0 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	2280      	movs	r2, #128	; 0x80
 80121d4:	701a      	strb	r2, [r3, #0]
                break;
 80121d6:	e003      	b.n	80121e0 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	2200      	movs	r2, #0
 80121dc:	701a      	strb	r2, [r3, #0]
                break;               
 80121de:	bf00      	nop
        }
        outbuf++;
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	3301      	adds	r3, #1
 80121e4:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	881b      	ldrh	r3, [r3, #0]
 80121ea:	3301      	adds	r3, #1
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 80121f2:	7ffb      	ldrb	r3, [r7, #31]
 80121f4:	3b04      	subs	r3, #4
 80121f6:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 80121f8:	8bbb      	ldrh	r3, [r7, #28]
 80121fa:	3301      	adds	r3, #1
 80121fc:	83bb      	strh	r3, [r7, #28]
 80121fe:	8bbb      	ldrh	r3, [r7, #28]
 8012200:	2b3f      	cmp	r3, #63	; 0x3f
 8012202:	d9cb      	bls.n	801219c <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 8012204:	8afb      	ldrh	r3, [r7, #22]
}
 8012206:	4618      	mov	r0, r3
 8012208:	3724      	adds	r7, #36	; 0x24
 801220a:	46bd      	mov	sp, r7
 801220c:	bc80      	pop	{r7}
 801220e:	4770      	bx	lr

08012210 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 8012210:	b480      	push	{r7}
 8012212:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 8012214:	4b06      	ldr	r3, [pc, #24]	; (8012230 <isoDepClearCounters+0x20>)
 8012216:	2200      	movs	r2, #0
 8012218:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 801221a:	4b05      	ldr	r3, [pc, #20]	; (8012230 <isoDepClearCounters+0x20>)
 801221c:	2200      	movs	r2, #0
 801221e:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 8012220:	4b03      	ldr	r3, [pc, #12]	; (8012230 <isoDepClearCounters+0x20>)
 8012222:	2200      	movs	r2, #0
 8012224:	71da      	strb	r2, [r3, #7]
}
 8012226:	bf00      	nop
 8012228:	46bd      	mov	sp, r7
 801222a:	bc80      	pop	{r7}
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	200034e8 	.word	0x200034e8

08012234 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 8012234:	b590      	push	{r4, r7, lr}
 8012236:	b08b      	sub	sp, #44	; 0x2c
 8012238:	af04      	add	r7, sp, #16
 801223a:	60b9      	str	r1, [r7, #8]
 801223c:	607a      	str	r2, [r7, #4]
 801223e:	461a      	mov	r2, r3
 8012240:	4603      	mov	r3, r0
 8012242:	73fb      	strb	r3, [r7, #15]
 8012244:	4613      	mov	r3, r2
 8012246:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 801224c:	4a44      	ldr	r2, [pc, #272]	; (8012360 <isoDepTx+0x12c>)
 801224e:	7bfb      	ldrb	r3, [r7, #15]
 8012250:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 8012254:	89bb      	ldrh	r3, [r7, #12]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d009      	beq.n	801226e <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	4a3f      	ldr	r2, [pc, #252]	; (8012360 <isoDepTx+0x12c>)
 8012262:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8012266:	4293      	cmp	r3, r2
 8012268:	d201      	bcs.n	801226e <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 801226a:	2301      	movs	r3, #1
 801226c:	e074      	b.n	8012358 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 801226e:	7bfb      	ldrb	r3, [r7, #15]
 8012270:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8012272:	4b3b      	ldr	r3, [pc, #236]	; (8012360 <isoDepTx+0x12c>)
 8012274:	78db      	ldrb	r3, [r3, #3]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d108      	bne.n	801228c <isoDepTx+0x58>
 801227a:	4b39      	ldr	r3, [pc, #228]	; (8012360 <isoDepTx+0x12c>)
 801227c:	78db      	ldrb	r3, [r3, #3]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d108      	bne.n	8012294 <isoDepTx+0x60>
 8012282:	4b37      	ldr	r3, [pc, #220]	; (8012360 <isoDepTx+0x12c>)
 8012284:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012288:	2b00      	cmp	r3, #0
 801228a:	d003      	beq.n	8012294 <isoDepTx+0x60>
 801228c:	7cfb      	ldrb	r3, [r7, #19]
 801228e:	f043 0308 	orr.w	r3, r3, #8
 8012292:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 8012294:	4b32      	ldr	r3, [pc, #200]	; (8012360 <isoDepTx+0x12c>)
 8012296:	791b      	ldrb	r3, [r3, #4]
 8012298:	2bff      	cmp	r3, #255	; 0xff
 801229a:	d003      	beq.n	80122a4 <isoDepTx+0x70>
 801229c:	7cfb      	ldrb	r3, [r7, #19]
 801229e:	f043 0304 	orr.w	r3, r3, #4
 80122a2:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 80122a4:	4b2e      	ldr	r3, [pc, #184]	; (8012360 <isoDepTx+0x12c>)
 80122a6:	7c9b      	ldrb	r3, [r3, #18]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d008      	beq.n	80122be <isoDepTx+0x8a>
 80122ac:	7cfb      	ldrb	r3, [r7, #19]
 80122ae:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	d103      	bne.n	80122be <isoDepTx+0x8a>
 80122b6:	7cfb      	ldrb	r3, [r7, #19]
 80122b8:	f043 0310 	orr.w	r3, r3, #16
 80122bc:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 80122be:	4b28      	ldr	r3, [pc, #160]	; (8012360 <isoDepTx+0x12c>)
 80122c0:	791b      	ldrb	r3, [r3, #4]
 80122c2:	2bff      	cmp	r3, #255	; 0xff
 80122c4:	d006      	beq.n	80122d4 <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	3b01      	subs	r3, #1
 80122ca:	617b      	str	r3, [r7, #20]
 80122cc:	4b24      	ldr	r3, [pc, #144]	; (8012360 <isoDepTx+0x12c>)
 80122ce:	791a      	ldrb	r2, [r3, #4]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 80122d4:	4b22      	ldr	r3, [pc, #136]	; (8012360 <isoDepTx+0x12c>)
 80122d6:	78db      	ldrb	r3, [r3, #3]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d108      	bne.n	80122ee <isoDepTx+0xba>
 80122dc:	4b20      	ldr	r3, [pc, #128]	; (8012360 <isoDepTx+0x12c>)
 80122de:	78db      	ldrb	r3, [r3, #3]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d10b      	bne.n	80122fc <isoDepTx+0xc8>
 80122e4:	4b1e      	ldr	r3, [pc, #120]	; (8012360 <isoDepTx+0x12c>)
 80122e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d006      	beq.n	80122fc <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	3b01      	subs	r3, #1
 80122f2:	617b      	str	r3, [r7, #20]
 80122f4:	4b1a      	ldr	r3, [pc, #104]	; (8012360 <isoDepTx+0x12c>)
 80122f6:	78da      	ldrb	r2, [r3, #3]
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	3b01      	subs	r3, #1
 8012300:	617b      	str	r3, [r7, #20]
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	7cfa      	ldrb	r2, [r7, #19]
 8012306:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	b29a      	uxth	r2, r3
 8012310:	89bb      	ldrh	r3, [r7, #12]
 8012312:	4413      	add	r3, r2
 8012314:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8012316:	8a3a      	ldrh	r2, [r7, #16]
 8012318:	4b11      	ldr	r3, [pc, #68]	; (8012360 <isoDepTx+0x12c>)
 801231a:	8a1b      	ldrh	r3, [r3, #16]
 801231c:	3b02      	subs	r3, #2
 801231e:	429a      	cmp	r2, r3
 8012320:	d901      	bls.n	8012326 <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 8012322:	2318      	movs	r3, #24
 8012324:	e018      	b.n	8012358 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8012326:	4b0e      	ldr	r3, [pc, #56]	; (8012360 <isoDepTx+0x12c>)
 8012328:	6998      	ldr	r0, [r3, #24]
 801232a:	4b0d      	ldr	r3, [pc, #52]	; (8012360 <isoDepTx+0x12c>)
 801232c:	8bdc      	ldrh	r4, [r3, #30]
 801232e:	4b0c      	ldr	r3, [pc, #48]	; (8012360 <isoDepTx+0x12c>)
 8012330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012332:	4b0b      	ldr	r3, [pc, #44]	; (8012360 <isoDepTx+0x12c>)
 8012334:	785b      	ldrb	r3, [r3, #1]
 8012336:	2b01      	cmp	r3, #1
 8012338:	d001      	beq.n	801233e <isoDepTx+0x10a>
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	e001      	b.n	8012342 <isoDepTx+0x10e>
 801233e:	f04f 33ff 	mov.w	r3, #4294967295
 8012342:	8a39      	ldrh	r1, [r7, #16]
 8012344:	9302      	str	r3, [sp, #8]
 8012346:	2300      	movs	r3, #0
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	9200      	str	r2, [sp, #0]
 801234c:	4623      	mov	r3, r4
 801234e:	4602      	mov	r2, r0
 8012350:	6978      	ldr	r0, [r7, #20]
 8012352:	f008 f97d 	bl	801a650 <rfalTransceiveBlockingTx>
 8012356:	4603      	mov	r3, r0
}
 8012358:	4618      	mov	r0, r3
 801235a:	371c      	adds	r7, #28
 801235c:	46bd      	mov	sp, r7
 801235e:	bd90      	pop	{r4, r7, pc}
 8012360:	200034e8 	.word	0x200034e8

08012364 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8012364:	b590      	push	{r4, r7, lr}
 8012366:	b089      	sub	sp, #36	; 0x24
 8012368:	af02      	add	r7, sp, #8
 801236a:	4603      	mov	r3, r0
 801236c:	460a      	mov	r2, r1
 801236e:	71fb      	strb	r3, [r7, #7]
 8012370:	4613      	mov	r3, r2
 8012372:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8012378:	4b56      	ldr	r3, [pc, #344]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 801237a:	689a      	ldr	r2, [r3, #8]
 801237c:	4b55      	ldr	r3, [pc, #340]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	4413      	add	r3, r2
 8012382:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8012384:	f107 030c 	add.w	r3, r7, #12
 8012388:	2204      	movs	r2, #4
 801238a:	2100      	movs	r1, #0
 801238c:	4618      	mov	r0, r3
 801238e:	f00b f8f3 	bl	801d578 <memset>
    
    switch( controlMsg )
 8012392:	79fb      	ldrb	r3, [r7, #7]
 8012394:	2b03      	cmp	r3, #3
 8012396:	f200 8088 	bhi.w	80124aa <isoDepHandleControlMsg+0x146>
 801239a:	a201      	add	r2, pc, #4	; (adr r2, 80123a0 <isoDepHandleControlMsg+0x3c>)
 801239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a0:	080123b1 	.word	0x080123b1
 80123a4:	080123dd 	.word	0x080123dd
 80123a8:	08012409 	.word	0x08012409
 80123ac:	08012477 	.word	0x08012477
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80123b0:	4b48      	ldr	r3, [pc, #288]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123b2:	799b      	ldrb	r3, [r3, #6]
 80123b4:	1c5a      	adds	r2, r3, #1
 80123b6:	b2d1      	uxtb	r1, r2
 80123b8:	4a46      	ldr	r2, [pc, #280]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123ba:	7191      	strb	r1, [r2, #6]
 80123bc:	4a45      	ldr	r2, [pc, #276]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123be:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d901      	bls.n	80123ca <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 80123c6:	230b      	movs	r3, #11
 80123c8:	e07f      	b.n	80124ca <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 80123ca:	4b42      	ldr	r3, [pc, #264]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123cc:	789b      	ldrb	r3, [r3, #2]
 80123ce:	f003 0301 	and.w	r3, r3, #1
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	f063 035d 	orn	r3, r3, #93	; 0x5d
 80123d8:	75fb      	strb	r3, [r7, #23]
            break;
 80123da:	e068      	b.n	80124ae <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80123dc:	4b3d      	ldr	r3, [pc, #244]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123de:	799b      	ldrb	r3, [r3, #6]
 80123e0:	1c5a      	adds	r2, r3, #1
 80123e2:	b2d1      	uxtb	r1, r2
 80123e4:	4a3b      	ldr	r2, [pc, #236]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123e6:	7191      	strb	r1, [r2, #6]
 80123e8:	4a3a      	ldr	r2, [pc, #232]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123ea:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d901      	bls.n	80123f6 <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 80123f2:	2304      	movs	r3, #4
 80123f4:	e069      	b.n	80124ca <isoDepHandleControlMsg+0x166>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 80123f6:	4b37      	ldr	r3, [pc, #220]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80123f8:	789b      	ldrb	r3, [r3, #2]
 80123fa:	f003 0301 	and.w	r3, r3, #1
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	f063 034d 	orn	r3, r3, #77	; 0x4d
 8012404:	75fb      	strb	r3, [r7, #23]
            break;
 8012406:	e052      	b.n	80124ae <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8012408:	4b32      	ldr	r3, [pc, #200]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 801240a:	79db      	ldrb	r3, [r3, #7]
 801240c:	1c5a      	adds	r2, r3, #1
 801240e:	b2d1      	uxtb	r1, r2
 8012410:	4a30      	ldr	r2, [pc, #192]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012412:	71d1      	strb	r1, [r2, #7]
 8012414:	4a2f      	ldr	r2, [pc, #188]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012416:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 801241a:	4293      	cmp	r3, r2
 801241c:	d901      	bls.n	8012422 <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 801241e:	230b      	movs	r3, #11
 8012420:	e053      	b.n	80124ca <isoDepHandleControlMsg+0x166>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 8012422:	79bb      	ldrb	r3, [r7, #6]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <isoDepHandleControlMsg+0xca>
 8012428:	79bb      	ldrb	r3, [r7, #6]
 801242a:	2b3b      	cmp	r3, #59	; 0x3b
 801242c:	d901      	bls.n	8012432 <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 801242e:	230b      	movs	r3, #11
 8012430:	e04b      	b.n	80124ca <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8012432:	4b28      	ldr	r3, [pc, #160]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012434:	785b      	ldrb	r3, [r3, #1]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d111      	bne.n	801245e <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 801243a:	4b26      	ldr	r3, [pc, #152]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	79ba      	ldrb	r2, [r7, #6]
 8012440:	fb02 f303 	mul.w	r3, r2, r3
 8012444:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801244c:	bf28      	it	cs
 801244e:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8012452:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 8012454:	4b1f      	ldr	r3, [pc, #124]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	693a      	ldr	r2, [r7, #16]
 801245a:	4413      	add	r3, r2
 801245c:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 801245e:	23f2      	movs	r3, #242	; 0xf2
 8012460:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8012462:	7dbb      	ldrb	r3, [r7, #22]
 8012464:	1c5a      	adds	r2, r3, #1
 8012466:	75ba      	strb	r2, [r7, #22]
 8012468:	3302      	adds	r3, #2
 801246a:	3318      	adds	r3, #24
 801246c:	443b      	add	r3, r7
 801246e:	79ba      	ldrb	r2, [r7, #6]
 8012470:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 8012474:	e01b      	b.n	80124ae <isoDepHandleControlMsg+0x14a>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8012476:	4b17      	ldr	r3, [pc, #92]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012478:	79db      	ldrb	r3, [r3, #7]
 801247a:	1c5a      	adds	r2, r3, #1
 801247c:	b2d1      	uxtb	r1, r2
 801247e:	4a15      	ldr	r2, [pc, #84]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012480:	71d1      	strb	r1, [r2, #7]
 8012482:	4a14      	ldr	r2, [pc, #80]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012484:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8012488:	4293      	cmp	r3, r2
 801248a:	d901      	bls.n	8012490 <isoDepHandleControlMsg+0x12c>
            {
                return ERR_PROTO;
 801248c:	230b      	movs	r3, #11
 801248e:	e01c      	b.n	80124ca <isoDepHandleControlMsg+0x166>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8012490:	4b10      	ldr	r3, [pc, #64]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 8012492:	785b      	ldrb	r3, [r3, #1]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d105      	bne.n	80124a4 <isoDepHandleControlMsg+0x140>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8012498:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 801249c:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 801249e:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <isoDepHandleControlMsg+0x170>)
 80124a0:	2203      	movs	r2, #3
 80124a2:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 80124a4:	23c2      	movs	r3, #194	; 0xc2
 80124a6:	75fb      	strb	r3, [r7, #23]
            break;
 80124a8:	e001      	b.n	80124ae <isoDepHandleControlMsg+0x14a>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 80124aa:	230c      	movs	r3, #12
 80124ac:	e00d      	b.n	80124ca <isoDepHandleControlMsg+0x166>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 80124ae:	7dbb      	ldrb	r3, [r7, #22]
 80124b0:	b29c      	uxth	r4, r3
 80124b2:	f107 030c 	add.w	r3, r7, #12
 80124b6:	1c9a      	adds	r2, r3, #2
 80124b8:	f107 010c 	add.w	r1, r7, #12
 80124bc:	7df8      	ldrb	r0, [r7, #23]
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	9300      	str	r3, [sp, #0]
 80124c2:	4623      	mov	r3, r4
 80124c4:	f7ff feb6 	bl	8012234 <isoDepTx>
 80124c8:	4603      	mov	r3, r0
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	371c      	adds	r7, #28
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd90      	pop	{r4, r7, pc}
 80124d2:	bf00      	nop
 80124d4:	200034e8 	.word	0x200034e8

080124d8 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 80124dc:	4b26      	ldr	r3, [pc, #152]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124de:	2200      	movs	r2, #0
 80124e0:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 80124e2:	4b25      	ldr	r3, [pc, #148]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 80124e8:	4b23      	ldr	r3, [pc, #140]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124ea:	2200      	movs	r2, #0
 80124ec:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 80124ee:	4b22      	ldr	r3, [pc, #136]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124f0:	22ff      	movs	r2, #255	; 0xff
 80124f2:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 80124f4:	4b20      	ldr	r3, [pc, #128]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 80124fa:	4b1f      	ldr	r3, [pc, #124]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 8012500:	4b1d      	ldr	r3, [pc, #116]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012502:	2200      	movs	r2, #0
 8012504:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 8012506:	4b1c      	ldr	r3, [pc, #112]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012508:	2200      	movs	r2, #0
 801250a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 801250e:	4b1a      	ldr	r3, [pc, #104]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012510:	2240      	movs	r2, #64	; 0x40
 8012512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8012516:	4b18      	ldr	r3, [pc, #96]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012518:	2210      	movs	r2, #16
 801251a:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 801251c:	4b16      	ldr	r3, [pc, #88]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 801251e:	2210      	movs	r2, #16
 8012520:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8012522:	4b15      	ldr	r3, [pc, #84]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012524:	2201      	movs	r2, #1
 8012526:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 801252a:	4b13      	ldr	r3, [pc, #76]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 801252c:	2200      	movs	r2, #0
 801252e:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 8012530:	4b11      	ldr	r3, [pc, #68]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012532:	2200      	movs	r2, #0
 8012534:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 8012536:	4b10      	ldr	r3, [pc, #64]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012538:	2200      	movs	r2, #0
 801253a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 801253e:	4b0e      	ldr	r3, [pc, #56]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012540:	2200      	movs	r2, #0
 8012542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 8012546:	4b0c      	ldr	r3, [pc, #48]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012548:	2200      	movs	r2, #0
 801254a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 801254e:	4b0a      	ldr	r3, [pc, #40]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012550:	2203      	movs	r2, #3
 8012552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 8012556:	4b08      	ldr	r3, [pc, #32]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012558:	2203      	movs	r2, #3
 801255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 801255e:	4b06      	ldr	r3, [pc, #24]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012560:	2202      	movs	r2, #2
 8012562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 8012566:	4b04      	ldr	r3, [pc, #16]	; (8012578 <rfalIsoDepInitialize+0xa0>)
 8012568:	2201      	movs	r2, #1
 801256a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 801256e:	f7ff fe4f 	bl	8012210 <isoDepClearCounters>
}
 8012572:	bf00      	nop
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	200034e8 	.word	0x200034e8

0801257c <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 801257c:	b5b0      	push	{r4, r5, r7, lr}
 801257e:	b086      	sub	sp, #24
 8012580:	af02      	add	r7, sp, #8
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d002      	beq.n	8012592 <isoDepDataExchangePCD+0x16>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d101      	bne.n	8012596 <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 8012592:	2307      	movs	r3, #7
 8012594:	e290      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
    }    
    
    *outIsChaining = false;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2200      	movs	r2, #0
 801259a:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 801259c:	4ba1      	ldr	r3, [pc, #644]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 801259e:	2201      	movs	r2, #1
 80125a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80125a4:	4b9f      	ldr	r3, [pc, #636]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125a6:	78db      	ldrb	r3, [r3, #3]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d007      	beq.n	80125bc <isoDepDataExchangePCD+0x40>
 80125ac:	4b9d      	ldr	r3, [pc, #628]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80125b2:	3301      	adds	r3, #1
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	4b9b      	ldr	r3, [pc, #620]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 80125bc:	4b99      	ldr	r3, [pc, #612]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125be:	791b      	ldrb	r3, [r3, #4]
 80125c0:	2bff      	cmp	r3, #255	; 0xff
 80125c2:	d007      	beq.n	80125d4 <isoDepDataExchangePCD+0x58>
 80125c4:	4b97      	ldr	r3, [pc, #604]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80125ca:	3301      	adds	r3, #1
 80125cc:	b2da      	uxtb	r2, r3
 80125ce:	4b95      	ldr	r3, [pc, #596]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 80125d4:	4b93      	ldr	r3, [pc, #588]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125d6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80125da:	4b92      	ldr	r3, [pc, #584]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d307      	bcc.n	80125f4 <isoDepDataExchangePCD+0x78>
 80125e4:	4b8f      	ldr	r3, [pc, #572]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80125ea:	4b8e      	ldr	r3, [pc, #568]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d201      	bcs.n	80125f8 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 80125f4:	2307      	movs	r3, #7
 80125f6:	e25f      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 80125f8:	4b8a      	ldr	r3, [pc, #552]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80125fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d00c      	beq.n	801261a <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 8012600:	4b88      	ldr	r3, [pc, #544]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012604:	4618      	mov	r0, r3
 8012606:	f7f2 ffef 	bl	80055e8 <timerIsExpired>
 801260a:	4603      	mov	r3, r0
 801260c:	f083 0301 	eor.w	r3, r3, #1
 8012610:	b2db      	uxtb	r3, r3
 8012612:	2b00      	cmp	r3, #0
 8012614:	d001      	beq.n	801261a <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 8012616:	2302      	movs	r3, #2
 8012618:	e24e      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 801261a:	4b82      	ldr	r3, [pc, #520]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 801261c:	2200      	movs	r2, #0
 801261e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 8012620:	4b80      	ldr	r3, [pc, #512]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2b03      	cmp	r3, #3
 8012626:	f300 8245 	bgt.w	8012ab4 <isoDepDataExchangePCD+0x538>
 801262a:	2b02      	cmp	r3, #2
 801262c:	da2d      	bge.n	801268a <isoDepDataExchangePCD+0x10e>
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <isoDepDataExchangePCD+0xbc>
 8012632:	2b01      	cmp	r3, #1
 8012634:	d002      	beq.n	801263c <isoDepDataExchangePCD+0xc0>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 8012636:	e23d      	b.n	8012ab4 <isoDepDataExchangePCD+0x538>
            return ERR_NONE;
 8012638:	2300      	movs	r3, #0
 801263a:	e23d      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 801263c:	4b79      	ldr	r3, [pc, #484]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 801263e:	789b      	ldrb	r3, [r3, #2]
 8012640:	f003 0301 	and.w	r3, r3, #1
 8012644:	b2db      	uxtb	r3, r3
 8012646:	f043 0302 	orr.w	r3, r3, #2
 801264a:	b2d8      	uxtb	r0, r3
 801264c:	4b75      	ldr	r3, [pc, #468]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 801264e:	6959      	ldr	r1, [r3, #20]
 8012650:	4b74      	ldr	r3, [pc, #464]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012652:	695b      	ldr	r3, [r3, #20]
 8012654:	4a73      	ldr	r2, [pc, #460]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012656:	f892 2020 	ldrb.w	r2, [r2, #32]
 801265a:	189c      	adds	r4, r3, r2
 801265c:	4b71      	ldr	r3, [pc, #452]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 801265e:	8b9d      	ldrh	r5, [r3, #28]
 8012660:	4b70      	ldr	r3, [pc, #448]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012662:	689a      	ldr	r2, [r3, #8]
 8012664:	4b6f      	ldr	r3, [pc, #444]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	4413      	add	r3, r2
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	462b      	mov	r3, r5
 801266e:	4622      	mov	r2, r4
 8012670:	f7ff fde0 	bl	8012234 <isoDepTx>
 8012674:	4603      	mov	r3, r0
 8012676:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8012678:	89fb      	ldrh	r3, [r7, #14]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d103      	bne.n	8012686 <isoDepDataExchangePCD+0x10a>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 801267e:	4b69      	ldr	r3, [pc, #420]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012680:	2202      	movs	r2, #2
 8012682:	701a      	strb	r2, [r3, #0]
                  break;
 8012684:	e001      	b.n	801268a <isoDepDataExchangePCD+0x10e>
                  return ret;
 8012686:	89fb      	ldrh	r3, [r7, #14]
 8012688:	e216      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            ret = rfalGetTransceiveStatus();
 801268a:	f008 f897 	bl	801a7bc <rfalGetTransceiveStatus>
 801268e:	4603      	mov	r3, r0
 8012690:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8012692:	89fb      	ldrh	r3, [r7, #14]
 8012694:	2b28      	cmp	r3, #40	; 0x28
 8012696:	f200 8082 	bhi.w	801279e <isoDepDataExchangePCD+0x222>
 801269a:	a201      	add	r2, pc, #4	; (adr r2, 80126a0 <isoDepDataExchangePCD+0x124>)
 801269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a0:	080127a3 	.word	0x080127a3
 80126a4:	0801279f 	.word	0x0801279f
 80126a8:	0801279b 	.word	0x0801279b
 80126ac:	0801279f 	.word	0x0801279f
 80126b0:	08012745 	.word	0x08012745
 80126b4:	0801279f 	.word	0x0801279f
 80126b8:	0801279f 	.word	0x0801279f
 80126bc:	0801279f 	.word	0x0801279f
 80126c0:	0801279f 	.word	0x0801279f
 80126c4:	08012745 	.word	0x08012745
 80126c8:	0801279f 	.word	0x0801279f
 80126cc:	0801279f 	.word	0x0801279f
 80126d0:	0801279f 	.word	0x0801279f
 80126d4:	0801279f 	.word	0x0801279f
 80126d8:	0801279f 	.word	0x0801279f
 80126dc:	0801279f 	.word	0x0801279f
 80126e0:	0801279f 	.word	0x0801279f
 80126e4:	0801279f 	.word	0x0801279f
 80126e8:	0801279f 	.word	0x0801279f
 80126ec:	0801279f 	.word	0x0801279f
 80126f0:	0801279f 	.word	0x0801279f
 80126f4:	08012745 	.word	0x08012745
 80126f8:	0801279f 	.word	0x0801279f
 80126fc:	0801279f 	.word	0x0801279f
 8012700:	0801279f 	.word	0x0801279f
 8012704:	0801279f 	.word	0x0801279f
 8012708:	0801279f 	.word	0x0801279f
 801270c:	08012745 	.word	0x08012745
 8012710:	0801279f 	.word	0x0801279f
 8012714:	0801279f 	.word	0x0801279f
 8012718:	0801279f 	.word	0x0801279f
 801271c:	0801279f 	.word	0x0801279f
 8012720:	0801279f 	.word	0x0801279f
 8012724:	0801279f 	.word	0x0801279f
 8012728:	0801279f 	.word	0x0801279f
 801272c:	0801279f 	.word	0x0801279f
 8012730:	0801279f 	.word	0x0801279f
 8012734:	0801279f 	.word	0x0801279f
 8012738:	0801279f 	.word	0x0801279f
 801273c:	0801279f 	.word	0x0801279f
 8012740:	08012745 	.word	0x08012745
                    if( gIsoDep.isRxChaining )
 8012744:	4b37      	ldr	r3, [pc, #220]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012746:	7cdb      	ldrb	r3, [r3, #19]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d00a      	beq.n	8012762 <isoDepDataExchangePCD+0x1e6>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 801274c:	2100      	movs	r1, #0
 801274e:	2000      	movs	r0, #0
 8012750:	f7ff fe08 	bl	8012364 <isoDepHandleControlMsg>
 8012754:	4603      	mov	r3, r0
 8012756:	81fb      	strh	r3, [r7, #14]
 8012758:	89fb      	ldrh	r3, [r7, #14]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d01b      	beq.n	8012796 <isoDepDataExchangePCD+0x21a>
 801275e:	89fb      	ldrh	r3, [r7, #14]
 8012760:	e1aa      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8012762:	4b30      	ldr	r3, [pc, #192]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	2b03      	cmp	r3, #3
 8012768:	d10a      	bne.n	8012780 <isoDepDataExchangePCD+0x204>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 801276a:	2100      	movs	r1, #0
 801276c:	2003      	movs	r0, #3
 801276e:	f7ff fdf9 	bl	8012364 <isoDepHandleControlMsg>
 8012772:	4603      	mov	r3, r0
 8012774:	81fb      	strh	r3, [r7, #14]
 8012776:	89fb      	ldrh	r3, [r7, #14]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00c      	beq.n	8012796 <isoDepDataExchangePCD+0x21a>
 801277c:	89fb      	ldrh	r3, [r7, #14]
 801277e:	e19b      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8012780:	2100      	movs	r1, #0
 8012782:	2001      	movs	r0, #1
 8012784:	f7ff fdee 	bl	8012364 <isoDepHandleControlMsg>
 8012788:	4603      	mov	r3, r0
 801278a:	81fb      	strh	r3, [r7, #14]
 801278c:	89fb      	ldrh	r3, [r7, #14]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <isoDepDataExchangePCD+0x21a>
 8012792:	89fb      	ldrh	r3, [r7, #14]
 8012794:	e190      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8012796:	2302      	movs	r3, #2
 8012798:	e18e      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;  /* Debug purposes */
 801279a:	2302      	movs	r3, #2
 801279c:	e18c      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ret;
 801279e:	89fb      	ldrh	r3, [r7, #14]
 80127a0:	e18a      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    break;
 80127a2:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	3307      	adds	r3, #7
 80127aa:	08db      	lsrs	r3, r3, #3
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	4b1b      	ldr	r3, [pc, #108]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80127b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80127bc:	b29b      	uxth	r3, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d305      	bcc.n	80127ce <isoDepDataExchangePCD+0x252>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	881a      	ldrh	r2, [r3, #0]
 80127c6:	4b17      	ldr	r3, [pc, #92]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80127c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d301      	bcc.n	80127d2 <isoDepDataExchangePCD+0x256>
                return ERR_PROTO;
 80127ce:	230b      	movs	r3, #11
 80127d0:	e172      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 80127d2:	4b14      	ldr	r3, [pc, #80]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 80127da:	4b12      	ldr	r3, [pc, #72]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80127dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d10b      	bne.n	80127fc <isoDepDataExchangePCD+0x280>
 80127e4:	7b7b      	ldrb	r3, [r7, #13]
 80127e6:	f003 0308 	and.w	r3, r3, #8
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d104      	bne.n	80127f8 <isoDepDataExchangePCD+0x27c>
 80127ee:	7b7b      	ldrb	r3, [r7, #13]
 80127f0:	f003 0304 	and.w	r3, r3, #4
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <isoDepDataExchangePCD+0x280>
                return ERR_PROTO;
 80127f8:	230b      	movs	r3, #11
 80127fa:	e15d      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 80127fc:	4b09      	ldr	r3, [pc, #36]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 80127fe:	78db      	ldrb	r3, [r3, #3]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d011      	beq.n	8012828 <isoDepDataExchangePCD+0x2ac>
 8012804:	7b7b      	ldrb	r3, [r7, #13]
 8012806:	f003 0308 	and.w	r3, r3, #8
 801280a:	2b00      	cmp	r3, #0
 801280c:	d007      	beq.n	801281e <isoDepDataExchangePCD+0x2a2>
 801280e:	4b05      	ldr	r3, [pc, #20]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012810:	78da      	ldrb	r2, [r3, #3]
 8012812:	4b04      	ldr	r3, [pc, #16]	; (8012824 <isoDepDataExchangePCD+0x2a8>)
 8012814:	699b      	ldr	r3, [r3, #24]
 8012816:	3301      	adds	r3, #1
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	429a      	cmp	r2, r3
 801281c:	d004      	beq.n	8012828 <isoDepDataExchangePCD+0x2ac>
                return ERR_PROTO;
 801281e:	230b      	movs	r3, #11
 8012820:	e14a      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
 8012822:	bf00      	nop
 8012824:	200034e8 	.word	0x200034e8
            if( isoDep_PCBisSBlock(rxPCB) )
 8012828:	7b7b      	ldrb	r3, [r7, #13]
 801282a:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 801282e:	2bc2      	cmp	r3, #194	; 0xc2
 8012830:	d134      	bne.n	801289c <isoDepDataExchangePCD+0x320>
                if( isoDep_PCBisSWTX(rxPCB) )
 8012832:	7b7b      	ldrb	r3, [r7, #13]
 8012834:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8012838:	2bc2      	cmp	r3, #194	; 0xc2
 801283a:	d11b      	bne.n	8012874 <isoDepDataExchangePCD+0x2f8>
 801283c:	7b7b      	ldrb	r3, [r7, #13]
 801283e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012842:	2b30      	cmp	r3, #48	; 0x30
 8012844:	d116      	bne.n	8012874 <isoDepDataExchangePCD+0x2f8>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8012846:	4b9e      	ldr	r3, [pc, #632]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012848:	699b      	ldr	r3, [r3, #24]
 801284a:	4a9d      	ldr	r2, [pc, #628]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 801284c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8012850:	4413      	add	r3, r2
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012858:	b2db      	uxtb	r3, r3
 801285a:	4619      	mov	r1, r3
 801285c:	2002      	movs	r0, #2
 801285e:	f7ff fd81 	bl	8012364 <isoDepHandleControlMsg>
 8012862:	4603      	mov	r3, r0
 8012864:	81fb      	strh	r3, [r7, #14]
 8012866:	89fb      	ldrh	r3, [r7, #14]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d001      	beq.n	8012870 <isoDepDataExchangePCD+0x2f4>
 801286c:	89fb      	ldrh	r3, [r7, #14]
 801286e:	e123      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8012870:	2302      	movs	r3, #2
 8012872:	e121      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                if( isoDep_PCBisSDeselect(rxPCB) )
 8012874:	7b7b      	ldrb	r3, [r7, #13]
 8012876:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 801287a:	2bc2      	cmp	r3, #194	; 0xc2
 801287c:	d10c      	bne.n	8012898 <isoDepDataExchangePCD+0x31c>
 801287e:	7b7b      	ldrb	r3, [r7, #13]
 8012880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012884:	2b00      	cmp	r3, #0
 8012886:	d107      	bne.n	8012898 <isoDepDataExchangePCD+0x31c>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8012888:	4b8d      	ldr	r3, [pc, #564]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	2b03      	cmp	r3, #3
 801288e:	d103      	bne.n	8012898 <isoDepDataExchangePCD+0x31c>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 8012890:	f7ff fe22 	bl	80124d8 <rfalIsoDepInitialize>
                        return ERR_NONE;
 8012894:	2300      	movs	r3, #0
 8012896:	e10f      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 8012898:	230b      	movs	r3, #11
 801289a:	e10d      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisRBlock(rxPCB) )
 801289c:	7b7b      	ldrb	r3, [r7, #13]
 801289e:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80128a2:	2ba2      	cmp	r3, #162	; 0xa2
 80128a4:	d141      	bne.n	801292a <isoDepDataExchangePCD+0x3ae>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 80128a6:	7b7b      	ldrb	r3, [r7, #13]
 80128a8:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80128ac:	2ba2      	cmp	r3, #162	; 0xa2
 80128ae:	d13a      	bne.n	8012926 <isoDepDataExchangePCD+0x3aa>
 80128b0:	7b7b      	ldrb	r3, [r7, #13]
 80128b2:	f003 0310 	and.w	r3, r3, #16
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d135      	bne.n	8012926 <isoDepDataExchangePCD+0x3aa>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 80128ba:	7b7b      	ldrb	r3, [r7, #13]
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	4a7f      	ldr	r2, [pc, #508]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80128c2:	7892      	ldrb	r2, [r2, #2]
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d119      	bne.n	80128fc <isoDepDataExchangePCD+0x380>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 80128c8:	4b7d      	ldr	r3, [pc, #500]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80128ca:	789b      	ldrb	r3, [r3, #2]
 80128cc:	f003 0301 	and.w	r3, r3, #1
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	bf0c      	ite	eq
 80128d6:	2301      	moveq	r3, #1
 80128d8:	2300      	movne	r3, #0
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	461a      	mov	r2, r3
 80128de:	4b78      	ldr	r3, [pc, #480]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80128e0:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 80128e2:	4b77      	ldr	r3, [pc, #476]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80128e4:	7c9b      	ldrb	r3, [r3, #18]
 80128e6:	f083 0301 	eor.w	r3, r3, #1
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d001      	beq.n	80128f4 <isoDepDataExchangePCD+0x378>
                            return ERR_PROTO;
 80128f0:	230b      	movs	r3, #11
 80128f2:	e0e1      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        isoDepClearCounters();
 80128f4:	f7ff fc8c 	bl	8012210 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 80128f8:	2300      	movs	r3, #0
 80128fa:	e0dd      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 80128fc:	4b70      	ldr	r3, [pc, #448]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80128fe:	795b      	ldrb	r3, [r3, #5]
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	b2d1      	uxtb	r1, r2
 8012904:	4a6e      	ldr	r2, [pc, #440]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012906:	7151      	strb	r1, [r2, #5]
 8012908:	4a6d      	ldr	r2, [pc, #436]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 801290a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 801290e:	4293      	cmp	r3, r2
 8012910:	d207      	bcs.n	8012922 <isoDepDataExchangePCD+0x3a6>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8012912:	4b6b      	ldr	r3, [pc, #428]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012914:	2200      	movs	r2, #0
 8012916:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8012918:	4b69      	ldr	r3, [pc, #420]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 801291a:	2201      	movs	r2, #1
 801291c:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 801291e:	2302      	movs	r3, #2
 8012920:	e0ca      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        return ERR_PROTO;
 8012922:	230b      	movs	r3, #11
 8012924:	e0c8      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_PROTO;
 8012926:	230b      	movs	r3, #11
 8012928:	e0c6      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            else if( isoDep_PCBisIBlock(rxPCB) )
 801292a:	7b7b      	ldrb	r3, [r7, #13]
 801292c:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8012930:	2b02      	cmp	r3, #2
 8012932:	f040 80bd 	bne.w	8012ab0 <isoDepDataExchangePCD+0x534>
                if( isoDep_PCBisChaining(rxPCB) )
 8012936:	7b7b      	ldrb	r3, [r7, #13]
 8012938:	f003 0310 	and.w	r3, r3, #16
 801293c:	2b00      	cmp	r3, #0
 801293e:	d05e      	beq.n	80129fe <isoDepDataExchangePCD+0x482>
                    gIsoDep.isRxChaining = true;
 8012940:	4b5f      	ldr	r3, [pc, #380]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012942:	2201      	movs	r2, #1
 8012944:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	2201      	movs	r2, #1
 801294a:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 801294c:	7b7b      	ldrb	r3, [r7, #13]
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	4a5b      	ldr	r2, [pc, #364]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012954:	7892      	ldrb	r2, [r2, #2]
 8012956:	4293      	cmp	r3, r2
 8012958:	d144      	bne.n	80129e4 <isoDepDataExchangePCD+0x468>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 801295a:	4b59      	ldr	r3, [pc, #356]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 801295c:	789b      	ldrb	r3, [r3, #2]
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	b2db      	uxtb	r3, r3
 8012964:	2b00      	cmp	r3, #0
 8012966:	bf0c      	ite	eq
 8012968:	2301      	moveq	r3, #1
 801296a:	2300      	movne	r3, #0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	461a      	mov	r2, r3
 8012970:	4b53      	ldr	r3, [pc, #332]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012972:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8012974:	f7ff fc4c 	bl	8012210 <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8012978:	2100      	movs	r1, #0
 801297a:	2000      	movs	r0, #0
 801297c:	f7ff fcf2 	bl	8012364 <isoDepHandleControlMsg>
 8012980:	4603      	mov	r3, r0
 8012982:	81fb      	strh	r3, [r7, #14]
 8012984:	89fb      	ldrh	r3, [r7, #14]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d001      	beq.n	801298e <isoDepDataExchangePCD+0x412>
 801298a:	89fb      	ldrh	r3, [r7, #14]
 801298c:	e094      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        *outActRxLen -= gIsoDep.hdrLen;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	881a      	ldrh	r2, [r3, #0]
 8012992:	4b4b      	ldr	r3, [pc, #300]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012994:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012998:	b29b      	uxth	r3, r3
 801299a:	1ad3      	subs	r3, r2, r3
 801299c:	b29a      	uxth	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 80129a2:	4b47      	ldr	r3, [pc, #284]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129a4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80129a8:	4b45      	ldr	r3, [pc, #276]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d014      	beq.n	80129dc <isoDepDataExchangePCD+0x460>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	881b      	ldrh	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d010      	beq.n	80129dc <isoDepDataExchangePCD+0x460>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 80129ba:	4b41      	ldr	r3, [pc, #260]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129bc:	699b      	ldr	r3, [r3, #24]
 80129be:	4a40      	ldr	r2, [pc, #256]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129c0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80129c4:	1898      	adds	r0, r3, r2
 80129c6:	4b3e      	ldr	r3, [pc, #248]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129c8:	699b      	ldr	r3, [r3, #24]
 80129ca:	4a3d      	ldr	r2, [pc, #244]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 80129cc:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80129d0:	1899      	adds	r1, r3, r2
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	461a      	mov	r2, r3
 80129d8:	f00a fdb4 	bl	801d544 <memmove>
                        isoDepClearCounters();
 80129dc:	f7ff fc18 	bl	8012210 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 80129e0:	230d      	movs	r3, #13
 80129e2:	e069      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 80129e4:	2100      	movs	r1, #0
 80129e6:	2000      	movs	r0, #0
 80129e8:	f7ff fcbc 	bl	8012364 <isoDepHandleControlMsg>
 80129ec:	4603      	mov	r3, r0
 80129ee:	81fb      	strh	r3, [r7, #14]
 80129f0:	89fb      	ldrh	r3, [r7, #14]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <isoDepDataExchangePCD+0x47e>
 80129f6:	89fb      	ldrh	r3, [r7, #14]
 80129f8:	e05e      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 80129fa:	2302      	movs	r3, #2
 80129fc:	e05c      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 80129fe:	4b30      	ldr	r3, [pc, #192]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	74da      	strb	r2, [r3, #19]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8012a04:	7b7b      	ldrb	r3, [r7, #13]
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	4a2d      	ldr	r2, [pc, #180]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a0c:	7892      	ldrb	r2, [r2, #2]
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	d13a      	bne.n	8012a88 <isoDepDataExchangePCD+0x50c>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 8012a12:	4b2b      	ldr	r3, [pc, #172]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a14:	789b      	ldrb	r3, [r3, #2]
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	bf0c      	ite	eq
 8012a20:	2301      	moveq	r3, #1
 8012a22:	2300      	movne	r3, #0
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	461a      	mov	r2, r3
 8012a28:	4b25      	ldr	r3, [pc, #148]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a2a:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	881a      	ldrh	r2, [r3, #0]
 8012a30:	4b23      	ldr	r3, [pc, #140]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8012a40:	4b1f      	ldr	r3, [pc, #124]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a42:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012a46:	4b1e      	ldr	r3, [pc, #120]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d014      	beq.n	8012a7a <isoDepDataExchangePCD+0x4fe>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d010      	beq.n	8012a7a <isoDepDataExchangePCD+0x4fe>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8012a58:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	4a18      	ldr	r2, [pc, #96]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a5e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8012a62:	1898      	adds	r0, r3, r2
 8012a64:	4b16      	ldr	r3, [pc, #88]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a66:	699b      	ldr	r3, [r3, #24]
 8012a68:	4a15      	ldr	r2, [pc, #84]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a6a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8012a6e:	1899      	adds	r1, r3, r2
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	461a      	mov	r2, r3
 8012a76:	f00a fd65 	bl	801d544 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8012a7a:	4b11      	ldr	r3, [pc, #68]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 8012a80:	f7ff fbc6 	bl	8012210 <isoDepClearCounters>
                    return ERR_NONE;
 8012a84:	2300      	movs	r3, #0
 8012a86:	e017      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8012a88:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <isoDepDataExchangePCD+0x544>)
 8012a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a8e:	2b02      	cmp	r3, #2
 8012a90:	d001      	beq.n	8012a96 <isoDepDataExchangePCD+0x51a>
                        return ERR_PROTO;
 8012a92:	230b      	movs	r3, #11
 8012a94:	e010      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8012a96:	2100      	movs	r1, #0
 8012a98:	2001      	movs	r0, #1
 8012a9a:	f7ff fc63 	bl	8012364 <isoDepHandleControlMsg>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	81fb      	strh	r3, [r7, #14]
 8012aa2:	89fb      	ldrh	r3, [r7, #14]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <isoDepDataExchangePCD+0x530>
 8012aa8:	89fb      	ldrh	r3, [r7, #14]
 8012aaa:	e005      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                    return ERR_BUSY;
 8012aac:	2302      	movs	r3, #2
 8012aae:	e003      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
                return ERR_PROTO;
 8012ab0:	230b      	movs	r3, #11
 8012ab2:	e001      	b.n	8012ab8 <isoDepDataExchangePCD+0x53c>
            break;
 8012ab4:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 8012ab6:	230c      	movs	r3, #12
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac0:	200034e8 	.word	0x200034e8

08012ac4 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 8012aca:	4b23      	ldr	r3, [pc, #140]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d003      	beq.n	8012ada <rfalIsoDepDeselect+0x16>
 8012ad2:	4b21      	ldr	r3, [pc, #132]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012ad4:	699b      	ldr	r3, [r3, #24]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d110      	bne.n	8012afc <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8012ada:	4b1f      	ldr	r3, [pc, #124]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012adc:	4a1f      	ldr	r2, [pc, #124]	; (8012b5c <rfalIsoDepDeselect+0x98>)
 8012ade:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8012ae0:	4b1d      	ldr	r3, [pc, #116]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012ae2:	4a1f      	ldr	r2, [pc, #124]	; (8012b60 <rfalIsoDepDeselect+0x9c>)
 8012ae4:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 8012ae6:	4b1c      	ldr	r3, [pc, #112]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012ae8:	2204      	movs	r2, #4
 8012aea:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8012aec:	4b1a      	ldr	r3, [pc, #104]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012aee:	2202      	movs	r2, #2
 8012af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8012af4:	4b18      	ldr	r3, [pc, #96]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012af6:	2202      	movs	r2, #2
 8012af8:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 8012afc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012b00:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 8012b02:	2100      	movs	r1, #0
 8012b04:	2003      	movs	r0, #3
 8012b06:	f7ff fc2d 	bl	8012364 <isoDepHandleControlMsg>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	807b      	strh	r3, [r7, #2]
 8012b0e:	887b      	ldrh	r3, [r7, #2]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d001      	beq.n	8012b18 <rfalIsoDepDeselect+0x54>
 8012b14:	887b      	ldrh	r3, [r7, #2]
 8012b16:	e01a      	b.n	8012b4e <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8012b18:	4b0f      	ldr	r3, [pc, #60]	; (8012b58 <rfalIsoDepDeselect+0x94>)
 8012b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b1c:	1c7a      	adds	r2, r7, #1
 8012b1e:	4611      	mov	r1, r2
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7ff fd2b 	bl	801257c <isoDepDataExchangePCD>
 8012b26:	4603      	mov	r3, r0
 8012b28:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 8012b2a:	f007 fe57 	bl	801a7dc <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	1e5a      	subs	r2, r3, #1
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <rfalIsoDepDeselect+0x7a>
 8012b38:	887b      	ldrh	r3, [r7, #2]
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d0ec      	beq.n	8012b18 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 8012b3e:	f7ff fccb 	bl	80124d8 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d001      	beq.n	8012b4c <rfalIsoDepDeselect+0x88>
 8012b48:	887b      	ldrh	r3, [r7, #2]
 8012b4a:	e000      	b.n	8012b4e <rfalIsoDepDeselect+0x8a>
 8012b4c:	2304      	movs	r3, #4
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	200034e8 	.word	0x200034e8
 8012b5c:	20003532 	.word	0x20003532
 8012b60:	2000352d 	.word	0x2000352d

08012b64 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8012b64:	b480      	push	{r7}
 8012b66:	b085      	sub	sp, #20
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 8012b6e:	79fb      	ldrb	r3, [r7, #7]
 8012b70:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 8012b72:	7bfb      	ldrb	r3, [r7, #15]
 8012b74:	2b0e      	cmp	r3, #14
 8012b76:	d901      	bls.n	8012b7c <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8012b78:	2304      	movs	r3, #4
 8012b7a:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8012b7c:	7bfb      	ldrb	r3, [r7, #15]
 8012b7e:	330c      	adds	r3, #12
 8012b80:	2201      	movs	r2, #1
 8012b82:	fa02 f303 	lsl.w	r3, r2, r3
 8012b86:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012b8e:	bf28      	it	cs
 8012b90:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8012b94:	60bb      	str	r3, [r7, #8]
    
    return result;
 8012b96:	68bb      	ldr	r3, [r7, #8]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bc80      	pop	{r7}
 8012ba0:	4770      	bx	lr
	...

08012ba4 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b085      	sub	sp, #20
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8012bae:	4b33      	ldr	r3, [pc, #204]	; (8012c7c <rfalIsoDepFSxI2FSx+0xd8>)
 8012bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d105      	bne.n	8012bc4 <rfalIsoDepFSxI2FSx+0x20>
 8012bb8:	79fb      	ldrb	r3, [r7, #7]
 8012bba:	2b0c      	cmp	r3, #12
 8012bbc:	bf28      	it	cs
 8012bbe:	230c      	movcs	r3, #12
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	e004      	b.n	8012bce <rfalIsoDepFSxI2FSx+0x2a>
 8012bc4:	79fb      	ldrb	r3, [r7, #7]
 8012bc6:	2b08      	cmp	r3, #8
 8012bc8:	bf28      	it	cs
 8012bca:	2308      	movcs	r3, #8
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8012bd0:	7b7b      	ldrb	r3, [r7, #13]
 8012bd2:	2b0c      	cmp	r3, #12
 8012bd4:	d848      	bhi.n	8012c68 <rfalIsoDepFSxI2FSx+0xc4>
 8012bd6:	a201      	add	r2, pc, #4	; (adr r2, 8012bdc <rfalIsoDepFSxI2FSx+0x38>)
 8012bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bdc:	08012c11 	.word	0x08012c11
 8012be0:	08012c17 	.word	0x08012c17
 8012be4:	08012c1d 	.word	0x08012c1d
 8012be8:	08012c23 	.word	0x08012c23
 8012bec:	08012c29 	.word	0x08012c29
 8012bf0:	08012c2f 	.word	0x08012c2f
 8012bf4:	08012c35 	.word	0x08012c35
 8012bf8:	08012c3b 	.word	0x08012c3b
 8012bfc:	08012c41 	.word	0x08012c41
 8012c00:	08012c49 	.word	0x08012c49
 8012c04:	08012c51 	.word	0x08012c51
 8012c08:	08012c59 	.word	0x08012c59
 8012c0c:	08012c61 	.word	0x08012c61
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8012c10:	2310      	movs	r3, #16
 8012c12:	81fb      	strh	r3, [r7, #14]
 8012c14:	e02c      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8012c16:	2318      	movs	r3, #24
 8012c18:	81fb      	strh	r3, [r7, #14]
 8012c1a:	e029      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8012c1c:	2320      	movs	r3, #32
 8012c1e:	81fb      	strh	r3, [r7, #14]
 8012c20:	e026      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8012c22:	2328      	movs	r3, #40	; 0x28
 8012c24:	81fb      	strh	r3, [r7, #14]
 8012c26:	e023      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8012c28:	2330      	movs	r3, #48	; 0x30
 8012c2a:	81fb      	strh	r3, [r7, #14]
 8012c2c:	e020      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8012c2e:	2340      	movs	r3, #64	; 0x40
 8012c30:	81fb      	strh	r3, [r7, #14]
 8012c32:	e01d      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8012c34:	2360      	movs	r3, #96	; 0x60
 8012c36:	81fb      	strh	r3, [r7, #14]
 8012c38:	e01a      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8012c3a:	2380      	movs	r3, #128	; 0x80
 8012c3c:	81fb      	strh	r3, [r7, #14]
 8012c3e:	e017      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8012c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c44:	81fb      	strh	r3, [r7, #14]
 8012c46:	e013      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8012c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c4c:	81fb      	strh	r3, [r7, #14]
 8012c4e:	e00f      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8012c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c54:	81fb      	strh	r3, [r7, #14]
 8012c56:	e00b      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8012c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c5c:	81fb      	strh	r3, [r7, #14]
 8012c5e:	e007      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8012c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c64:	81fb      	strh	r3, [r7, #14]
 8012c66:	e003      	b.n	8012c70 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8012c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c6c:	81fb      	strh	r3, [r7, #14]
 8012c6e:	bf00      	nop
    }
    return fsx;
 8012c70:	89fb      	ldrh	r3, [r7, #14]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3714      	adds	r7, #20
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bc80      	pop	{r7}
 8012c7a:	4770      	bx	lr
 8012c7c:	200034e8 	.word	0x200034e8

08012c80 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 8012c86:	4b11      	ldr	r3, [pc, #68]	; (8012ccc <rfalIsoDepGetMaxInfLen+0x4c>)
 8012c88:	8a1b      	ldrh	r3, [r3, #16]
 8012c8a:	2b0f      	cmp	r3, #15
 8012c8c:	d909      	bls.n	8012ca2 <rfalIsoDepGetMaxInfLen+0x22>
 8012c8e:	4b0f      	ldr	r3, [pc, #60]	; (8012ccc <rfalIsoDepGetMaxInfLen+0x4c>)
 8012c90:	8a1b      	ldrh	r3, [r3, #16]
 8012c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c96:	d804      	bhi.n	8012ca2 <rfalIsoDepGetMaxInfLen+0x22>
 8012c98:	4b0c      	ldr	r3, [pc, #48]	; (8012ccc <rfalIsoDepGetMaxInfLen+0x4c>)
 8012c9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012c9e:	2b03      	cmp	r3, #3
 8012ca0:	d905      	bls.n	8012cae <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 8012ca2:	2310      	movs	r3, #16
 8012ca4:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 8012ca6:	88fb      	ldrh	r3, [r7, #6]
 8012ca8:	3b03      	subs	r3, #3
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	e009      	b.n	8012cc2 <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 8012cae:	4b07      	ldr	r3, [pc, #28]	; (8012ccc <rfalIsoDepGetMaxInfLen+0x4c>)
 8012cb0:	8a1a      	ldrh	r2, [r3, #16]
 8012cb2:	4b06      	ldr	r3, [pc, #24]	; (8012ccc <rfalIsoDepGetMaxInfLen+0x4c>)
 8012cb4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	3b02      	subs	r3, #2
 8012cc0:	b29b      	uxth	r3, r3
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bc80      	pop	{r7}
 8012cca:	4770      	bx	lr
 8012ccc:	200034e8 	.word	0x200034e8

08012cd0 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 8012cd0:	b084      	sub	sp, #16
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	f107 0c08 	add.w	ip, r7, #8
 8012cda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	4b30      	ldr	r3, [pc, #192]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012ce4:	615a      	str	r2, [r3, #20]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 8012ce6:	4b2f      	ldr	r3, [pc, #188]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012ce8:	2203      	movs	r2, #3
 8012cea:	f883 2020 	strb.w	r2, [r3, #32]
    gIsoDep.txBufLen     = param.txBufLen;
 8012cee:	89ba      	ldrh	r2, [r7, #12]
 8012cf0:	4b2c      	ldr	r3, [pc, #176]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012cf2:	839a      	strh	r2, [r3, #28]
    gIsoDep.isTxChaining = param.isTxChaining;
 8012cf4:	7bba      	ldrb	r2, [r7, #14]
 8012cf6:	4b2b      	ldr	r3, [pc, #172]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012cf8:	749a      	strb	r2, [r3, #18]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	4b29      	ldr	r3, [pc, #164]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d00:	619a      	str	r2, [r3, #24]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 8012d02:	4b28      	ldr	r3, [pc, #160]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d04:	2203      	movs	r2, #3
 8012d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 8012d0a:	4b26      	ldr	r3, [pc, #152]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d0c:	f240 1203 	movw	r2, #259	; 0x103
 8012d10:	83da      	strh	r2, [r3, #30]
    
    gIsoDep.rxLen        = param.rxLen;
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	4a23      	ldr	r2, [pc, #140]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d16:	62d3      	str	r3, [r2, #44]	; 0x2c
    gIsoDep.rxChaining   = param.isRxChaining;
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	4a22      	ldr	r2, [pc, #136]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d1c:	6313      	str	r3, [r2, #48]	; 0x30
    
    
    gIsoDep.fwt          = param.FWT;
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	4a20      	ldr	r2, [pc, #128]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d22:	6093      	str	r3, [r2, #8]
    gIsoDep.dFwt         = param.dFWT;
 8012d24:	6a3b      	ldr	r3, [r7, #32]
 8012d26:	4a1f      	ldr	r2, [pc, #124]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d28:	60d3      	str	r3, [r2, #12]
    gIsoDep.fsx          = param.FSx;
 8012d2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d2c:	4b1d      	ldr	r3, [pc, #116]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d2e:	821a      	strh	r2, [r3, #16]
    gIsoDep.did          = param.DID;
 8012d30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012d34:	4b1b      	ldr	r3, [pc, #108]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d36:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8012d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d3a:	2bff      	cmp	r3, #255	; 0xff
 8012d3c:	d001      	beq.n	8012d42 <rfalIsoDepStartTransceive+0x72>
 8012d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d40:	e001      	b.n	8012d46 <rfalIsoDepStartTransceive+0x76>
 8012d42:	4b18      	ldr	r3, [pc, #96]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d44:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012d46:	4a17      	ldr	r2, [pc, #92]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d48:	8453      	strh	r3, [r2, #34]	; 0x22
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 8012d4a:	4b16      	ldr	r3, [pc, #88]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	74da      	strb	r2, [r3, #19]
    isoDepClearCounters();
 8012d50:	f7ff fa5e 	bl	8012210 <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 8012d54:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d56:	785b      	ldrb	r3, [r3, #1]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d119      	bne.n	8012d90 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 8012d5c:	4b11      	ldr	r3, [pc, #68]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d5e:	8b9b      	ldrh	r3, [r3, #28]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d010      	beq.n	8012d86 <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 8012d64:	4b0f      	ldr	r3, [pc, #60]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012d6a:	f083 0301 	eor.w	r3, r3, #1
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d004      	beq.n	8012d7e <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 8012d74:	4b0b      	ldr	r3, [pc, #44]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d76:	2208      	movs	r2, #8
 8012d78:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e00c      	b.n	8012d98 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 8012d7e:	4b09      	ldr	r3, [pc, #36]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d80:	2201      	movs	r2, #1
 8012d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 8012d86:	4b07      	ldr	r3, [pc, #28]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d88:	2206      	movs	r2, #6
 8012d8a:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	e003      	b.n	8012d98 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 8012d90:	4b04      	ldr	r3, [pc, #16]	; (8012da4 <rfalIsoDepStartTransceive+0xd4>)
 8012d92:	2201      	movs	r2, #1
 8012d94:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8012d96:	2300      	movs	r3, #0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012da0:	b004      	add	sp, #16
 8012da2:	4770      	bx	lr
 8012da4:	200034e8 	.word	0x200034e8

08012da8 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8012dac:	4b08      	ldr	r3, [pc, #32]	; (8012dd0 <rfalIsoDepGetTransceiveStatus+0x28>)
 8012dae:	785b      	ldrb	r3, [r3, #1]
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d101      	bne.n	8012db8 <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 8012db4:	2318      	movs	r3, #24
 8012db6:	e008      	b.n	8012dca <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 8012db8:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <rfalIsoDepGetTransceiveStatus+0x28>)
 8012dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbc:	4a04      	ldr	r2, [pc, #16]	; (8012dd0 <rfalIsoDepGetTransceiveStatus+0x28>)
 8012dbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7ff fbda 	bl	801257c <isoDepDataExchangePCD>
 8012dc8:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	200034e8 	.word	0x200034e8

08012dd4 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	; 0x28
 8012dd8:	af04      	add	r7, sp, #16
 8012dda:	60ba      	str	r2, [r7, #8]
 8012ddc:	607b      	str	r3, [r7, #4]
 8012dde:	4603      	mov	r3, r0
 8012de0:	73fb      	strb	r3, [r7, #15]
 8012de2:	460b      	mov	r3, r1
 8012de4:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d101      	bne.n	8012df0 <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 8012dec:	2307      	movs	r3, #7
 8012dee:	e03c      	b.n	8012e6a <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8012df0:	23e0      	movs	r3, #224	; 0xe0
 8012df2:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8012df4:	7bfb      	ldrb	r3, [r7, #15]
 8012df6:	011b      	lsls	r3, r3, #4
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	7bbb      	ldrb	r3, [r7, #14]
 8012dfc:	f003 030f 	and.w	r3, r3, #15
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	4313      	orrs	r3, r2
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8012e08:	f107 0010 	add.w	r0, r7, #16
 8012e0c:	4b19      	ldr	r3, [pc, #100]	; (8012e74 <rfalIsoDepRATS+0xa0>)
 8012e0e:	9302      	str	r3, [sp, #8]
 8012e10:	2300      	movs	r3, #0
 8012e12:	9301      	str	r3, [sp, #4]
 8012e14:	f107 0314 	add.w	r3, r7, #20
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	2314      	movs	r3, #20
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	2102      	movs	r1, #2
 8012e20:	f007 fc78 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8012e24:	4603      	mov	r3, r0
 8012e26:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8012e28:	8afb      	ldrh	r3, [r7, #22]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d115      	bne.n	8012e5a <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 8012e2e:	8abb      	ldrh	r3, [r7, #20]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d008      	beq.n	8012e46 <rfalIsoDepRATS+0x72>
 8012e34:	8abb      	ldrh	r3, [r7, #20]
 8012e36:	2b14      	cmp	r3, #20
 8012e38:	d805      	bhi.n	8012e46 <rfalIsoDepRATS+0x72>
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	8abb      	ldrh	r3, [r7, #20]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d001      	beq.n	8012e4a <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8012e46:	230b      	movs	r3, #11
 8012e48:	e00f      	b.n	8012e6a <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8012e4a:	7bfb      	ldrb	r3, [r7, #15]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7ff fea9 	bl	8012ba4 <rfalIsoDepFSxI2FSx>
 8012e52:	4603      	mov	r3, r0
 8012e54:	461a      	mov	r2, r3
 8012e56:	4b08      	ldr	r3, [pc, #32]	; (8012e78 <rfalIsoDepRATS+0xa4>)
 8012e58:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d003      	beq.n	8012e68 <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 8012e60:	8abb      	ldrh	r3, [r7, #20]
 8012e62:	b2da      	uxtb	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8012e68:	8afb      	ldrh	r3, [r7, #22]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3718      	adds	r7, #24
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	00046780 	.word	0x00046780
 8012e78:	200034e8 	.word	0x200034e8

08012e7c <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af04      	add	r7, sp, #16
 8012e82:	603b      	str	r3, [r7, #0]
 8012e84:	4603      	mov	r3, r0
 8012e86:	71fb      	strb	r3, [r7, #7]
 8012e88:	460b      	mov	r3, r1
 8012e8a:	71bb      	strb	r3, [r7, #6]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d008      	beq.n	8012ea8 <rfalIsoDepPPS+0x2c>
 8012e96:	79bb      	ldrb	r3, [r7, #6]
 8012e98:	2b03      	cmp	r3, #3
 8012e9a:	d805      	bhi.n	8012ea8 <rfalIsoDepPPS+0x2c>
 8012e9c:	797b      	ldrb	r3, [r7, #5]
 8012e9e:	2b03      	cmp	r3, #3
 8012ea0:	d802      	bhi.n	8012ea8 <rfalIsoDepPPS+0x2c>
 8012ea2:	79fb      	ldrb	r3, [r7, #7]
 8012ea4:	2b0e      	cmp	r3, #14
 8012ea6:	d901      	bls.n	8012eac <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 8012ea8:	2307      	movs	r3, #7
 8012eaa:	e033      	b.n	8012f14 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8012eac:	79fb      	ldrb	r3, [r7, #7]
 8012eae:	f003 030f 	and.w	r3, r3, #15
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8012ebc:	2311      	movs	r3, #17
 8012ebe:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8012ec0:	79bb      	ldrb	r3, [r7, #6]
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	b25a      	sxtb	r2, r3
 8012ec6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	b25b      	sxtb	r3, r3
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	f003 030f 	and.w	r3, r3, #15
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8012ed8:	f107 0008 	add.w	r0, r7, #8
 8012edc:	4b0f      	ldr	r3, [pc, #60]	; (8012f1c <rfalIsoDepPPS+0xa0>)
 8012ede:	9302      	str	r3, [sp, #8]
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	9301      	str	r3, [sp, #4]
 8012ee4:	f107 030c 	add.w	r3, r7, #12
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	2301      	movs	r3, #1
 8012eec:	683a      	ldr	r2, [r7, #0]
 8012eee:	2103      	movs	r1, #3
 8012ef0:	f007 fc10 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8012ef8:	89fb      	ldrh	r3, [r7, #14]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d109      	bne.n	8012f12 <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 8012efe:	89bb      	ldrh	r3, [r7, #12]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d104      	bne.n	8012f0e <rfalIsoDepPPS+0x92>
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	781a      	ldrb	r2, [r3, #0]
 8012f08:	7a3b      	ldrb	r3, [r7, #8]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d001      	beq.n	8012f12 <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 8012f0e:	230b      	movs	r3, #11
 8012f10:	e000      	b.n	8012f14 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 8012f12:	89fb      	ldrh	r3, [r7, #14]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	00046780 	.word	0x00046780

08012f20 <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b092      	sub	sp, #72	; 0x48
 8012f24:	af04      	add	r7, sp, #16
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	4608      	mov	r0, r1
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	4603      	mov	r3, r0
 8012f30:	70fb      	strb	r3, [r7, #3]
 8012f32:	460b      	mov	r3, r1
 8012f34:	70bb      	strb	r3, [r7, #2]
 8012f36:	4613      	mov	r3, r2
 8012f38:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8012f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d00c      	beq.n	8012f5a <rfalIsoDepATTRIB+0x3a>
 8012f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d009      	beq.n	8012f5a <rfalIsoDepATTRIB+0x3a>
 8012f46:	78bb      	ldrb	r3, [r7, #2]
 8012f48:	2b03      	cmp	r3, #3
 8012f4a:	d806      	bhi.n	8012f5a <rfalIsoDepATTRIB+0x3a>
 8012f4c:	787b      	ldrb	r3, [r7, #1]
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d803      	bhi.n	8012f5a <rfalIsoDepATTRIB+0x3a>
 8012f52:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012f56:	2b0e      	cmp	r3, #14
 8012f58:	d901      	bls.n	8012f5e <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e066      	b.n	801302c <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8012f5e:	231d      	movs	r3, #29
 8012f60:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 8012f62:	78fb      	ldrb	r3, [r7, #3]
 8012f64:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8012f66:	78bb      	ldrb	r3, [r7, #2]
 8012f68:	019b      	lsls	r3, r3, #6
 8012f6a:	b25a      	sxtb	r2, r3
 8012f6c:	787b      	ldrb	r3, [r7, #1]
 8012f6e:	011b      	lsls	r3, r3, #4
 8012f70:	b25b      	sxtb	r3, r3
 8012f72:	4313      	orrs	r3, r2
 8012f74:	b25b      	sxtb	r3, r3
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	f023 030f 	bic.w	r3, r3, #15
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012f82:	f003 030f 	and.w	r3, r3, #15
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	4313      	orrs	r3, r2
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 8012f8e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8012f92:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8012f94:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012f98:	f003 030f 	and.w	r3, r3, #15
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	743b      	strb	r3, [r7, #16]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8012fa4:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8012fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d011      	beq.n	8012fd2 <rfalIsoDepATTRIB+0xb2>
 8012fae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d00d      	beq.n	8012fd2 <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8012fb6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8012fba:	2b20      	cmp	r3, #32
 8012fbc:	bf28      	it	cs
 8012fbe:	2320      	movcs	r3, #32
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	f107 0308 	add.w	r3, r7, #8
 8012fc8:	3309      	adds	r3, #9
 8012fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f00a faab 	bl	801d528 <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8012fd2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8012fd6:	2b20      	cmp	r3, #32
 8012fd8:	bf28      	it	cs
 8012fda:	2320      	movcs	r3, #32
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	3309      	adds	r3, #9
 8012fe2:	b299      	uxth	r1, r3
 8012fe4:	f107 0008 	add.w	r0, r7, #8
 8012fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fea:	9302      	str	r3, [sp, #8]
 8012fec:	2300      	movs	r3, #0
 8012fee:	9301      	str	r3, [sp, #4]
 8012ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	2321      	movs	r3, #33	; 0x21
 8012ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ffa:	f007 fb8b 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8012ffe:	4603      	mov	r3, r0
 8013000:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 8013002:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013004:	b2da      	uxtb	r2, r3
 8013006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013008:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 801300a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801300c:	2b00      	cmp	r3, #0
 801300e:	d10c      	bne.n	801302a <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 8013010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013012:	2b00      	cmp	r3, #0
 8013014:	d007      	beq.n	8013026 <rfalIsoDepATTRIB+0x106>
 8013016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 020f 	and.w	r2, r3, #15
 801301e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013022:	429a      	cmp	r2, r3
 8013024:	d001      	beq.n	801302a <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 8013026:	230b      	movs	r3, #11
 8013028:	e000      	b.n	801302c <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 801302a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 801302c:	4618      	mov	r0, r3
 801302e:	3738      	adds	r7, #56	; 0x38
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
 801303a:	603b      	str	r3, [r7, #0]
 801303c:	4603      	mov	r3, r0
 801303e:	71fb      	strb	r3, [r7, #7]
 8013040:	460b      	mov	r3, r1
 8013042:	71bb      	strb	r3, [r7, #6]
 8013044:	4613      	mov	r3, r2
 8013046:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 801304e:	2307      	movs	r3, #7
 8013050:	e143      	b.n	80132da <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8013052:	2002      	movs	r0, #2
 8013054:	f007 f8ca 	bl	801a1ec <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8013058:	4ba2      	ldr	r3, [pc, #648]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 801305a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801305e:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 8013060:	683a      	ldr	r2, [r7, #0]
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	3314      	adds	r3, #20
 8013066:	79b9      	ldrb	r1, [r7, #6]
 8013068:	79f8      	ldrb	r0, [r7, #7]
 801306a:	f7ff feb3 	bl	8012dd4 <rfalIsoDepRATS>
 801306e:	4603      	mov	r3, r0
 8013070:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 8013072:	4b9c      	ldr	r3, [pc, #624]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8013074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013078:	2b01      	cmp	r3, #1
 801307a:	d105      	bne.n	8013088 <rfalIsoDepPollAHandleActivation+0x54>
 801307c:	89bb      	ldrh	r3, [r7, #12]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <rfalIsoDepPollAHandleActivation+0x54>
 8013082:	89bb      	ldrh	r3, [r7, #12]
 8013084:	2b04      	cmp	r3, #4
 8013086:	d10b      	bne.n	80130a0 <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8013088:	2001      	movs	r0, #1
 801308a:	f7f2 fb31 	bl	80056f0 <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 801308e:	7bfb      	ldrb	r3, [r7, #15]
 8013090:	1e5a      	subs	r2, r3, #1
 8013092:	73fa      	strb	r2, [r7, #15]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d004      	beq.n	80130a2 <rfalIsoDepPollAHandleActivation+0x6e>
 8013098:	89bb      	ldrh	r3, [r7, #12]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d1e0      	bne.n	8013060 <rfalIsoDepPollAHandleActivation+0x2c>
 801309e:	e000      	b.n	80130a2 <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 80130a0:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 80130a2:	89bb      	ldrh	r3, [r7, #12]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d008      	beq.n	80130ba <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 80130a8:	4b8e      	ldr	r3, [pc, #568]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80130aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d101      	bne.n	80130b6 <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 80130b2:	f7ff fd07 	bl	8012ac4 <rfalIsoDepDeselect>
        }
        return ret;
 80130b6:	89bb      	ldrh	r3, [r7, #12]
 80130b8:	e10f      	b.n	80132da <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	2204      	movs	r2, #4
 80130be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	2200      	movs	r2, #0
 80130c6:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2200      	movs	r2, #0
 80130cc:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	2200      	movs	r2, #0
 80130d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	2200      	movs	r2, #0
 80130da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2202      	movs	r2, #2
 80130e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d973      	bls.n	80131d6 <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 80130ee:	2301      	movs	r3, #1
 80130f0:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	785b      	ldrb	r3, [r3, #1]
 80130f6:	f003 030f 	and.w	r3, r3, #15
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 8013102:	7bbb      	ldrb	r3, [r7, #14]
 8013104:	3301      	adds	r3, #1
 8013106:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	785b      	ldrb	r3, [r3, #1]
 801310c:	f003 0310 	and.w	r3, r3, #16
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00d      	beq.n	8013130 <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8013114:	683a      	ldr	r2, [r7, #0]
 8013116:	7bbb      	ldrb	r3, [r7, #14]
 8013118:	1c59      	adds	r1, r3, #1
 801311a:	73b9      	strb	r1, [r7, #14]
 801311c:	4413      	add	r3, r2
 801311e:	7819      	ldrb	r1, [r3, #0]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	3349      	adds	r3, #73	; 0x49
 801312a:	7978      	ldrb	r0, [r7, #5]
 801312c:	f000 f9f6 	bl	801351c <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	785b      	ldrb	r3, [r3, #1]
 8013134:	f003 0320 	and.w	r3, r3, #32
 8013138:	2b00      	cmp	r3, #0
 801313a:	d018      	beq.n	801316e <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 801313c:	683a      	ldr	r2, [r7, #0]
 801313e:	7bbb      	ldrb	r3, [r7, #14]
 8013140:	1c59      	adds	r1, r3, #1
 8013142:	73b9      	strb	r1, [r7, #14]
 8013144:	4413      	add	r3, r2
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	461a      	mov	r2, r3
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013152:	091b      	lsrs	r3, r3, #4
 8013154:	b2db      	uxtb	r3, r3
 8013156:	f003 030f 	and.w	r3, r3, #15
 801315a:	b2da      	uxtb	r2, r3
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013166:	f003 020f 	and.w	r2, r3, #15
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	785b      	ldrb	r3, [r3, #1]
 8013172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013176:	2b00      	cmp	r3, #0
 8013178:	d02d      	beq.n	80131d6 <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 801317a:	683a      	ldr	r2, [r7, #0]
 801317c:	7bbb      	ldrb	r3, [r7, #14]
 801317e:	4413      	add	r3, r2
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	091b      	lsrs	r3, r3, #4
 8013184:	f003 0301 	and.w	r3, r3, #1
 8013188:	2b00      	cmp	r3, #0
 801318a:	bf14      	ite	ne
 801318c:	2301      	movne	r3, #1
 801318e:	2300      	moveq	r3, #0
 8013190:	b2da      	uxtb	r2, r3
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 8013198:	683a      	ldr	r2, [r7, #0]
 801319a:	7bbb      	ldrb	r3, [r7, #14]
 801319c:	4413      	add	r3, r2
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	085b      	lsrs	r3, r3, #1
 80131a2:	f003 0301 	and.w	r3, r3, #1
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	bf14      	ite	ne
 80131aa:	2301      	movne	r3, #1
 80131ac:	2300      	moveq	r3, #0
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 80131b6:	683a      	ldr	r2, [r7, #0]
 80131b8:	7bbb      	ldrb	r3, [r7, #14]
 80131ba:	1c59      	adds	r1, r3, #1
 80131bc:	73b9      	strb	r1, [r7, #14]
 80131be:	4413      	add	r3, r2
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	f003 0301 	and.w	r3, r3, #1
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	bf14      	ite	ne
 80131ca:	2301      	movne	r3, #1
 80131cc:	2300      	moveq	r3, #0
 80131ce:	b2da      	uxtb	r2, r3
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131dc:	4618      	mov	r0, r3
 80131de:	f7ff fce1 	bl	8012ba4 <rfalIsoDepFSxI2FSx>
 80131e2:	4603      	mov	r3, r0
 80131e4:	461a      	mov	r2, r3
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	4618      	mov	r0, r3
 80131f4:	f000 fa34 	bl	8013660 <rfalIsoDepSFGI2SFGT>
 80131f8:	4602      	mov	r2, r0
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013202:	b29b      	uxth	r3, r3
 8013204:	4618      	mov	r0, r3
 8013206:	f7f2 f9e1 	bl	80055cc <timerCalculateTimer>
 801320a:	4603      	mov	r3, r0
 801320c:	4a35      	ldr	r2, [pc, #212]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 801320e:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013216:	4618      	mov	r0, r3
 8013218:	f7ff fca4 	bl	8012b64 <rfalIsoDepFWI2FWT>
 801321c:	4602      	mov	r2, r0
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013228:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013230:	2b00      	cmp	r3, #0
 8013232:	d001      	beq.n	8013238 <rfalIsoDepPollAHandleActivation+0x204>
 8013234:	79ba      	ldrb	r2, [r7, #6]
 8013236:	e000      	b.n	801323a <rfalIsoDepPollAHandleActivation+0x206>
 8013238:	2200      	movs	r2, #0
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	22ff      	movs	r2, #255	; 0xff
 8013244:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801324e:	2b00      	cmp	r3, #0
 8013250:	d104      	bne.n	801325c <rfalIsoDepPollAHandleActivation+0x228>
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013258:	2b00      	cmp	r3, #0
 801325a:	d030      	beq.n	80132be <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 801325c:	bf00      	nop
 801325e:	4b21      	ldr	r3, [pc, #132]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8013260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013262:	4618      	mov	r0, r3
 8013264:	f7f2 f9c0 	bl	80055e8 <timerIsExpired>
 8013268:	4603      	mov	r3, r0
 801326a:	f083 0301 	eor.w	r3, r3, #1
 801326e:	b2db      	uxtb	r3, r3
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1f4      	bne.n	801325e <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8013286:	f107 0308 	add.w	r3, r7, #8
 801328a:	f7ff fdf7 	bl	8012e7c <rfalIsoDepPPS>
 801328e:	4603      	mov	r3, r0
 8013290:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 8013292:	89bb      	ldrh	r3, [r7, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d10a      	bne.n	80132ae <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132a4:	4619      	mov	r1, r3
 80132a6:	4610      	mov	r0, r2
 80132a8:	f006 fd16 	bl	8019cd8 <rfalSetBitRate>
 80132ac:	e007      	b.n	80132be <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2200      	movs	r2, #0
 80132b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	2200      	movs	r2, #0
 80132ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80132c4:	4b07      	ldr	r3, [pc, #28]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80132c6:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80132c8:	79fb      	ldrb	r3, [r7, #7]
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fc6a 	bl	8012ba4 <rfalIsoDepFSxI2FSx>
 80132d0:	4603      	mov	r3, r0
 80132d2:	461a      	mov	r2, r3
 80132d4:	4b03      	ldr	r3, [pc, #12]	; (80132e4 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80132d6:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 80132d8:	2300      	movs	r3, #0
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	200034e8 	.word	0x200034e8

080132e8 <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 80132e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ea:	b08d      	sub	sp, #52	; 0x34
 80132ec:	af08      	add	r7, sp, #32
 80132ee:	4604      	mov	r4, r0
 80132f0:	4608      	mov	r0, r1
 80132f2:	4611      	mov	r1, r2
 80132f4:	461a      	mov	r2, r3
 80132f6:	4623      	mov	r3, r4
 80132f8:	71fb      	strb	r3, [r7, #7]
 80132fa:	4603      	mov	r3, r0
 80132fc:	71bb      	strb	r3, [r7, #6]
 80132fe:	460b      	mov	r3, r1
 8013300:	717b      	strb	r3, [r7, #5]
 8013302:	4613      	mov	r3, r2
 8013304:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	7b1b      	ldrb	r3, [r3, #12]
 801330a:	091b      	lsrs	r3, r3, #4
 801330c:	b2da      	uxtb	r2, r3
 801330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013310:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8013314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801331a:	4618      	mov	r0, r3
 801331c:	f7ff fc22 	bl	8012b64 <rfalIsoDepFWI2FWT>
 8013320:	4602      	mov	r2, r0
 8013322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013324:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 8013326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013328:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801332c:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 801332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013330:	7b5b      	ldrb	r3, [r3, #13]
 8013332:	091b      	lsrs	r3, r3, #4
 8013334:	b2db      	uxtb	r3, r3
 8013336:	f003 020f 	and.w	r2, r3, #15
 801333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333c:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 801333e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013342:	b2db      	uxtb	r3, r3
 8013344:	4618      	mov	r0, r3
 8013346:	f000 f98b 	bl	8013660 <rfalIsoDepSFGI2SFGT>
 801334a:	4602      	mov	r2, r0
 801334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334e:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8013350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013352:	7adb      	ldrb	r3, [r3, #11]
 8013354:	091b      	lsrs	r3, r3, #4
 8013356:	b2da      	uxtb	r2, r3
 8013358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 801335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff fc1d 	bl	8012ba4 <rfalIsoDepFSxI2FSx>
 801336a:	4603      	mov	r3, r0
 801336c:	461a      	mov	r2, r3
 801336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013370:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 8013374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013376:	79ba      	ldrb	r2, [r7, #6]
 8013378:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	7b1b      	ldrb	r3, [r3, #12]
 8013380:	f003 0301 	and.w	r3, r3, #1
 8013384:	2b00      	cmp	r3, #0
 8013386:	bf14      	ite	ne
 8013388:	2301      	movne	r3, #1
 801338a:	2300      	moveq	r3, #0
 801338c:	b2da      	uxtb	r2, r3
 801338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013390:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8013394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013396:	7b1b      	ldrb	r3, [r3, #12]
 8013398:	085b      	lsrs	r3, r3, #1
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	bf14      	ite	ne
 80133a2:	2301      	movne	r3, #1
 80133a4:	2300      	moveq	r3, #0
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 80133ae:	79bb      	ldrb	r3, [r7, #6]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d009      	beq.n	80133c8 <rfalIsoDepPollBHandleActivation+0xe0>
 80133b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80133ba:	f083 0301 	eor.w	r3, r3, #1
 80133be:	b2db      	uxtb	r3, r3
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d001      	beq.n	80133c8 <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 80133c4:	2307      	movs	r3, #7
 80133c6:	e0a3      	b.n	8013510 <rfalIsoDepPollBHandleActivation+0x228>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80133c8:	2002      	movs	r0, #2
 80133ca:	f006 ff0f 	bl	801a1ec <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 80133ce:	4b52      	ldr	r3, [pc, #328]	; (8013518 <rfalIsoDepPollBHandleActivation+0x230>)
 80133d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d104      	bne.n	80133e2 <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 80133d8:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80133dc:	f006 ff16 	bl	801a20c <rfalSetFDTPoll>
 80133e0:	e00d      	b.n	80133fe <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	7adb      	ldrb	r3, [r3, #11]
 80133e6:	085b      	lsrs	r3, r3, #1
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	f003 0303 	and.w	r3, r3, #3
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	4618      	mov	r0, r3
 80133f2:	f005 f903 	bl	80185fc <rfalNfcbTR2ToFDT>
 80133f6:	4603      	mov	r3, r0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f006 ff07 	bl	801a20c <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 80133fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013400:	7a99      	ldrb	r1, [r3, #10]
 8013402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013404:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8013408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340a:	3349      	adds	r3, #73	; 0x49
 801340c:	7978      	ldrb	r0, [r7, #5]
 801340e:	f000 f885 	bl	801351c <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 8013416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013418:	7b1b      	ldrb	r3, [r3, #12]
 801341a:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 801341e:	2b00      	cmp	r3, #0
 8013420:	d001      	beq.n	8013426 <rfalIsoDepPollBHandleActivation+0x13e>
 8013422:	7939      	ldrb	r1, [r7, #4]
 8013424:	e000      	b.n	8013428 <rfalIsoDepPollBHandleActivation+0x140>
 8013426:	2100      	movs	r1, #0
 8013428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801342a:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 801342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013430:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8013434:	4b38      	ldr	r3, [pc, #224]	; (8013518 <rfalIsoDepPollBHandleActivation+0x230>)
 8013436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 801343a:	2b01      	cmp	r3, #1
 801343c:	d005      	beq.n	801344a <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8013442:	f003 0307 	and.w	r3, r3, #7
 8013446:	b2db      	uxtb	r3, r3
 8013448:	e000      	b.n	801344c <rfalIsoDepPollBHandleActivation+0x164>
 801344a:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 801344c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801344e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8013450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013452:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8013454:	4402      	add	r2, r0
 8013456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013458:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 801345a:	3421      	adds	r4, #33	; 0x21
 801345c:	9407      	str	r4, [sp, #28]
 801345e:	9006      	str	r0, [sp, #24]
 8013460:	9205      	str	r2, [sp, #20]
 8013462:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013466:	9204      	str	r2, [sp, #16]
 8013468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801346a:	9203      	str	r2, [sp, #12]
 801346c:	79ba      	ldrb	r2, [r7, #6]
 801346e:	9202      	str	r2, [sp, #8]
 8013470:	9301      	str	r3, [sp, #4]
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	9300      	str	r3, [sp, #0]
 8013476:	4663      	mov	r3, ip
 8013478:	4632      	mov	r2, r6
 801347a:	4628      	mov	r0, r5
 801347c:	f7ff fd50 	bl	8012f20 <rfalIsoDepATTRIB>
 8013480:	4603      	mov	r3, r0
 8013482:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 8013484:	89fb      	ldrh	r3, [r7, #14]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d12c      	bne.n	80134e4 <rfalIsoDepPollBHandleActivation+0x1fc>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 801348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	f003 020f 	and.w	r2, r3, #15
 8013492:	79bb      	ldrb	r3, [r7, #6]
 8013494:	429a      	cmp	r2, r3
 8013496:	d001      	beq.n	801349c <rfalIsoDepPollBHandleActivation+0x1b4>
        {
            return ERR_PROTO;
 8013498:	230b      	movs	r3, #11
 801349a:	e039      	b.n	8013510 <rfalIsoDepPollBHandleActivation+0x228>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 801349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	091b      	lsrs	r3, r3, #4
 80134a2:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 80134a4:	7b7b      	ldrb	r3, [r7, #13]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d008      	beq.n	80134bc <rfalIsoDepPollBHandleActivation+0x1d4>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 80134aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80134b0:	461a      	mov	r2, r3
 80134b2:	7b7b      	ldrb	r3, [r7, #13]
 80134b4:	3b01      	subs	r3, #1
 80134b6:	409a      	lsls	r2, r3
 80134b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ba:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 80134bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134be:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80134c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134c8:	4619      	mov	r1, r3
 80134ca:	4610      	mov	r0, r2
 80134cc:	f006 fc04 	bl	8019cd8 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 80134d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7f2 f878 	bl	80055cc <timerCalculateTimer>
 80134dc:	4603      	mov	r3, r0
 80134de:	4a0e      	ldr	r2, [pc, #56]	; (8013518 <rfalIsoDepPollBHandleActivation+0x230>)
 80134e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80134e2:	e007      	b.n	80134f4 <rfalIsoDepPollBHandleActivation+0x20c>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 80134e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e6:	2200      	movs	r2, #0
 80134e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 80134ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ee:	2200      	movs	r2, #0
 80134f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80134f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80134fa:	4b07      	ldr	r3, [pc, #28]	; (8013518 <rfalIsoDepPollBHandleActivation+0x230>)
 80134fc:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80134fe:	79fb      	ldrb	r3, [r7, #7]
 8013500:	4618      	mov	r0, r3
 8013502:	f7ff fb4f 	bl	8012ba4 <rfalIsoDepFSxI2FSx>
 8013506:	4603      	mov	r3, r0
 8013508:	461a      	mov	r2, r3
 801350a:	4b03      	ldr	r3, [pc, #12]	; (8013518 <rfalIsoDepPollBHandleActivation+0x230>)
 801350c:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 801350e:	89fb      	ldrh	r3, [r7, #14]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3714      	adds	r7, #20
 8013514:	46bd      	mov	sp, r7
 8013516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013518:	200034e8 	.word	0x200034e8

0801351c <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 801351c:	b480      	push	{r7}
 801351e:	b087      	sub	sp, #28
 8013520:	af00      	add	r7, sp, #0
 8013522:	60ba      	str	r2, [r7, #8]
 8013524:	607b      	str	r3, [r7, #4]
 8013526:	4603      	mov	r3, r0
 8013528:	73fb      	strb	r3, [r7, #15]
 801352a:	460b      	mov	r3, r1
 801352c:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 801352e:	7bfb      	ldrb	r3, [r7, #15]
 8013530:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 8013532:	2301      	movs	r3, #1
 8013534:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	2200      	movs	r2, #0
 801353a:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2200      	movs	r2, #0
 8013540:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8013542:	7bbb      	ldrb	r3, [r7, #14]
 8013544:	f003 0308 	and.w	r3, r3, #8
 8013548:	b2db      	uxtb	r3, r3
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 8083 	bne.w	8013656 <rfalIsoDepCalcBitRate+0x13a>
 8013550:	7d7b      	ldrb	r3, [r7, #21]
 8013552:	2b03      	cmp	r3, #3
 8013554:	d87f      	bhi.n	8013656 <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 8013556:	7bbb      	ldrb	r3, [r7, #14]
 8013558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801355c:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 801355e:	2302      	movs	r3, #2
 8013560:	75fb      	strb	r3, [r7, #23]
 8013562:	e019      	b.n	8013598 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8013564:	7d3a      	ldrb	r2, [r7, #20]
 8013566:	7dfb      	ldrb	r3, [r7, #23]
 8013568:	4619      	mov	r1, r3
 801356a:	2310      	movs	r3, #16
 801356c:	408b      	lsls	r3, r1
 801356e:	4013      	ands	r3, r2
 8013570:	2b00      	cmp	r3, #0
 8013572:	d00b      	beq.n	801358c <rfalIsoDepCalcBitRate+0x70>
 8013574:	7dfb      	ldrb	r3, [r7, #23]
 8013576:	1c5a      	adds	r2, r3, #1
 8013578:	7d7b      	ldrb	r3, [r7, #21]
 801357a:	429a      	cmp	r2, r3
 801357c:	d806      	bhi.n	801358c <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 801357e:	7dfb      	ldrb	r3, [r7, #23]
 8013580:	3301      	adds	r3, #1
 8013582:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	7cfa      	ldrb	r2, [r7, #19]
 8013588:	701a      	strb	r2, [r3, #0]
                break;
 801358a:	e009      	b.n	80135a0 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 801358c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013590:	b2db      	uxtb	r3, r3
 8013592:	3b01      	subs	r3, #1
 8013594:	b2db      	uxtb	r3, r3
 8013596:	75fb      	strb	r3, [r7, #23]
 8013598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801359c:	2b00      	cmp	r3, #0
 801359e:	dae1      	bge.n	8013564 <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 80135a0:	7bbb      	ldrb	r3, [r7, #14]
 80135a2:	f003 0307 	and.w	r3, r3, #7
 80135a6:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80135a8:	2302      	movs	r3, #2
 80135aa:	75fb      	strb	r3, [r7, #23]
 80135ac:	e018      	b.n	80135e0 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80135ae:	7cbb      	ldrb	r3, [r7, #18]
 80135b0:	7dfa      	ldrb	r2, [r7, #23]
 80135b2:	40d3      	lsrs	r3, r2
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00b      	beq.n	80135d4 <rfalIsoDepCalcBitRate+0xb8>
 80135bc:	7dfb      	ldrb	r3, [r7, #23]
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	7d7b      	ldrb	r3, [r7, #21]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d806      	bhi.n	80135d4 <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 80135c6:	7dfb      	ldrb	r3, [r7, #23]
 80135c8:	3301      	adds	r3, #1
 80135ca:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	7c7a      	ldrb	r2, [r7, #17]
 80135d0:	701a      	strb	r2, [r3, #0]
                break;
 80135d2:	e009      	b.n	80135e8 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80135d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	3b01      	subs	r3, #1
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	75fb      	strb	r3, [r7, #23]
 80135e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	dae2      	bge.n	80135ae <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 80135e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	da2a      	bge.n	8013646 <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	781a      	ldrb	r2, [r3, #0]
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	4293      	cmp	r3, r2
 80135fa:	bf28      	it	cs
 80135fc:	4613      	movcs	r3, r2
 80135fe:	b2da      	uxtb	r2, r3
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	781a      	ldrb	r2, [r3, #0]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d018      	beq.n	8013646 <rfalIsoDepCalcBitRate+0x12a>
 8013614:	7d3a      	ldrb	r2, [r7, #20]
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	3b01      	subs	r3, #1
 801361c:	2110      	movs	r1, #16
 801361e:	fa01 f303 	lsl.w	r3, r1, r3
 8013622:	4013      	ands	r3, r2
 8013624:	2b00      	cmp	r3, #0
 8013626:	d009      	beq.n	801363c <rfalIsoDepCalcBitRate+0x120>
 8013628:	7cba      	ldrb	r2, [r7, #18]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	3b01      	subs	r3, #1
 8013630:	fa22 f303 	lsr.w	r3, r2, r3
 8013634:	f003 0301 	and.w	r3, r3, #1
 8013638:	2b00      	cmp	r3, #0
 801363a:	d104      	bne.n	8013646 <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 801363c:	2300      	movs	r3, #0
 801363e:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 8013646:	7dbb      	ldrb	r3, [r7, #22]
 8013648:	f083 0301 	eor.w	r3, r3, #1
 801364c:	b2db      	uxtb	r3, r3
 801364e:	2b00      	cmp	r3, #0
 8013650:	f47f af6f 	bne.w	8013532 <rfalIsoDepCalcBitRate+0x16>
 8013654:	e000      	b.n	8013658 <rfalIsoDepCalcBitRate+0x13c>
            return;
 8013656:	bf00      	nop
    
}
 8013658:	371c      	adds	r7, #28
 801365a:	46bd      	mov	sp, r7
 801365c:	bc80      	pop	{r7}
 801365e:	4770      	bx	lr

08013660 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 801366a:	79fb      	ldrb	r3, [r7, #7]
 801366c:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 801366e:	7afb      	ldrb	r3, [r7, #11]
 8013670:	2b0e      	cmp	r3, #14
 8013672:	d901      	bls.n	8013678 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 8013674:	2300      	movs	r3, #0
 8013676:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 8013678:	7afb      	ldrb	r3, [r7, #11]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00b      	beq.n	8013696 <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 801367e:	79fb      	ldrb	r3, [r7, #7]
 8013680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013684:	409a      	lsls	r2, r3
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801368c:	fa01 f303 	lsl.w	r3, r1, r3
 8013690:	4413      	add	r3, r2
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	e002      	b.n	801369c <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 8013696:	f641 237c 	movw	r3, #6780	; 0x1a7c
 801369a:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	4a05      	ldr	r2, [pc, #20]	; (80136b4 <rfalIsoDepSFGI2SFGT+0x54>)
 80136a0:	fba2 2303 	umull	r2, r3, r2, r3
 80136a4:	0b1b      	lsrs	r3, r3, #12
 80136a6:	3301      	adds	r3, #1
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3714      	adds	r7, #20
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bc80      	pop	{r7}
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop
 80136b4:	4d542005 	.word	0x4d542005

080136b8 <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 80136b8:	b084      	sub	sp, #16
 80136ba:	b598      	push	{r3, r4, r7, lr}
 80136bc:	af00      	add	r7, sp, #0
 80136be:	f107 0410 	add.w	r4, r7, #16
 80136c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 80136c6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80136ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136cc:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 80136d0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80136d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d4:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 80136d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136da:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 80136dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e0:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 80136e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e6:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 80136e8:	8abb      	ldrh	r3, [r7, #20]
 80136ea:	461a      	mov	r2, r3
 80136ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80136ee:	1ad4      	subs	r4, r2, r3
 80136f0:	f7ff fac6 	bl	8012c80 <rfalIsoDepGetMaxInfLen>
 80136f4:	4603      	mov	r3, r0
 80136f6:	429c      	cmp	r4, r3
 80136f8:	dd09      	ble.n	801370e <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 80136fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136fc:	2201      	movs	r2, #1
 80136fe:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 8013700:	f7ff fabe 	bl	8012c80 <rfalIsoDepGetMaxInfLen>
 8013704:	4603      	mov	r3, r0
 8013706:	461a      	mov	r2, r3
 8013708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801370a:	809a      	strh	r2, [r3, #4]
 801370c:	e008      	b.n	8013720 <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 801370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013710:	2200      	movs	r2, #0
 8013712:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 8013714:	8aba      	ldrh	r2, [r7, #20]
 8013716:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	b29a      	uxth	r2, r3
 801371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801371e:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013724:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 8013726:	6a3a      	ldr	r2, [r7, #32]
 8013728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372a:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 801372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372e:	4a05      	ldr	r2, [pc, #20]	; (8013744 <rfalIsoDepApdu2IBLockParam+0x8c>)
 8013730:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 8013732:	69fa      	ldr	r2, [r7, #28]
 8013734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013736:	60da      	str	r2, [r3, #12]
}
 8013738:	bf00      	nop
 801373a:	46bd      	mov	sp, r7
 801373c:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8013740:	b004      	add	sp, #16
 8013742:	4770      	bx	lr
 8013744:	2000356c 	.word	0x2000356c

08013748 <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 8013748:	b084      	sub	sp, #16
 801374a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801374c:	b093      	sub	sp, #76	; 0x4c
 801374e:	af08      	add	r7, sp, #32
 8013750:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8013754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 8013758:	4b22      	ldr	r3, [pc, #136]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 801375a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 801375e:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8013762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801376a:	682b      	ldr	r3, [r5, #0]
 801376c:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 801376e:	4b1d      	ldr	r3, [pc, #116]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 8013770:	2200      	movs	r2, #0
 8013772:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    gIsoDep.APDURxPos = 0;
 8013776:	4b1b      	ldr	r3, [pc, #108]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 8013778:	2200      	movs	r2, #0
 801377a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    
    /* Assign current FSx to calculate INF length */
    gIsoDep.ourFsx = param.ourFSx;
 801377e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8013782:	4b18      	ldr	r3, [pc, #96]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 8013784:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.fsx    = param.FSx;
 8013786:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801378a:	4b16      	ldr	r3, [pc, #88]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 801378c:	821a      	strh	r2, [r3, #16]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 801378e:	4b15      	ldr	r3, [pc, #84]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 8013790:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8013794:	4a13      	ldr	r2, [pc, #76]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 8013796:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801379a:	4e12      	ldr	r6, [pc, #72]	; (80137e4 <rfalIsoDepStartApduTransceive+0x9c>)
 801379c:	9207      	str	r2, [sp, #28]
 801379e:	9306      	str	r3, [sp, #24]
 80137a0:	1d3b      	adds	r3, r7, #4
 80137a2:	9305      	str	r3, [sp, #20]
 80137a4:	466d      	mov	r5, sp
 80137a6:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 80137aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137ae:	6823      	ldr	r3, [r4, #0]
 80137b0:	602b      	str	r3, [r5, #0]
 80137b2:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 80137b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137b8:	f7ff ff7e 	bl	80136b8 <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 80137bc:	466d      	mov	r5, sp
 80137be:	f107 0414 	add.w	r4, r7, #20
 80137c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137c6:	6823      	ldr	r3, [r4, #0]
 80137c8:	602b      	str	r3, [r5, #0]
 80137ca:	1d3b      	adds	r3, r7, #4
 80137cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137ce:	f7ff fa7f 	bl	8012cd0 <rfalIsoDepStartTransceive>
 80137d2:	4603      	mov	r3, r0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	372c      	adds	r7, #44	; 0x2c
 80137d8:	46bd      	mov	sp, r7
 80137da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80137de:	b004      	add	sp, #16
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	200034e8 	.word	0x200034e8

080137e8 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 80137e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ea:	b093      	sub	sp, #76	; 0x4c
 80137ec:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 80137ee:	f7ff fadb 	bl	8012da8 <rfalIsoDepGetTransceiveStatus>
 80137f2:	4603      	mov	r3, r0
 80137f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 80137f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d002      	beq.n	8013802 <rfalIsoDepGetApduTransceiveStatus+0x1a>
 80137fc:	2b0d      	cmp	r3, #13
 80137fe:	d064      	beq.n	80138ca <rfalIsoDepGetApduTransceiveStatus+0xe2>
 8013800:	e085      	b.n	801390e <rfalIsoDepGetApduTransceiveStatus+0x126>
    {
        /*******************************************************************************/
        case ERR_NONE:
         
            /* Check if we are still doing chaining on Tx */
            if( gIsoDep.isTxChaining )
 8013802:	4b4a      	ldr	r3, [pc, #296]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013804:	7c9b      	ldrb	r3, [r3, #18]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d03e      	beq.n	8013888 <rfalIsoDepGetApduTransceiveStatus+0xa0>
            {
                /* Add already Tx bytes */
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 801380a:	4b48      	ldr	r3, [pc, #288]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801380c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8013810:	4b46      	ldr	r3, [pc, #280]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013812:	8b9b      	ldrh	r3, [r3, #28]
 8013814:	4413      	add	r3, r2
 8013816:	b29a      	uxth	r2, r3
 8013818:	4b44      	ldr	r3, [pc, #272]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801381a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                
                /* Convert APDU TxRxParams to I-Block TxRxParams */
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 801381e:	4b43      	ldr	r3, [pc, #268]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013820:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8013824:	4a41      	ldr	r2, [pc, #260]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013826:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801382a:	4e40      	ldr	r6, [pc, #256]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801382c:	9207      	str	r2, [sp, #28]
 801382e:	9306      	str	r3, [sp, #24]
 8013830:	463b      	mov	r3, r7
 8013832:	9305      	str	r3, [sp, #20]
 8013834:	466d      	mov	r5, sp
 8013836:	f106 046c 	add.w	r4, r6, #108	; 0x6c
 801383a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801383c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	602b      	str	r3, [r5, #0]
 8013842:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 8013846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013848:	f7ff ff36 	bl	80136b8 <rfalIsoDepApdu2IBLockParam>
                
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 801384c:	88bb      	ldrh	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d00d      	beq.n	801386e <rfalIsoDepGetApduTransceiveStatus+0x86>
                {
                    /* Move next I-Block to beginning of APDU Tx buffer */
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 8013852:	4b36      	ldr	r3, [pc, #216]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013856:	1cd8      	adds	r0, r3, #3
 8013858:	4b34      	ldr	r3, [pc, #208]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801385c:	4a33      	ldr	r2, [pc, #204]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801385e:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8013862:	4413      	add	r3, r2
 8013864:	3303      	adds	r3, #3
 8013866:	88ba      	ldrh	r2, [r7, #4]
 8013868:	4619      	mov	r1, r3
 801386a:	f009 fe5d 	bl	801d528 <memcpy>
                }
                
                rfalIsoDepStartTransceive( txRxParam );
 801386e:	466d      	mov	r5, sp
 8013870:	f107 0410 	add.w	r4, r7, #16
 8013874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013878:	6823      	ldr	r3, [r4, #0]
 801387a:	602b      	str	r3, [r5, #0]
 801387c:	463b      	mov	r3, r7
 801387e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013880:	f7ff fa26 	bl	8012cd0 <rfalIsoDepStartTransceive>
                return ERR_BUSY;
 8013884:	2302      	movs	r3, #2
 8013886:	e04c      	b.n	8013922 <rfalIsoDepGetApduTransceiveStatus+0x13a>
            }
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8013888:	4b28      	ldr	r3, [pc, #160]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801388a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801388c:	881b      	ldrh	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d03f      	beq.n	8013912 <rfalIsoDepGetApduTransceiveStatus+0x12a>
            {
                /* Copy packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8013892:	4b26      	ldr	r3, [pc, #152]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013896:	4a25      	ldr	r2, [pc, #148]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013898:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801389c:	4413      	add	r3, r2
 801389e:	1cd8      	adds	r0, r3, #3
 80138a0:	4b22      	ldr	r3, [pc, #136]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138a4:	1cd9      	adds	r1, r3, #3
 80138a6:	4b21      	ldr	r3, [pc, #132]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	461a      	mov	r2, r3
 80138ae:	f009 fe3b 	bl	801d528 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 80138b2:	4b1e      	ldr	r3, [pc, #120]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138b4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80138b8:	4b1c      	ldr	r3, [pc, #112]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	4413      	add	r3, r2
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	4b1a      	ldr	r3, [pc, #104]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138c4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
             
            /* APDU TxRx is done */
            break;
 80138c8:	e023      	b.n	8013912 <rfalIsoDepGetApduTransceiveStatus+0x12a>
         
        /*******************************************************************************/
        case ERR_AGAIN:
            
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 80138ca:	4b18      	ldr	r3, [pc, #96]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138ce:	881b      	ldrh	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d01a      	beq.n	801390a <rfalIsoDepGetApduTransceiveStatus+0x122>
            {
                /* Copy chained packet from tmp buffer to APDU buffer */
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 80138d4:	4b15      	ldr	r3, [pc, #84]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80138d8:	4a14      	ldr	r2, [pc, #80]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138da:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 80138de:	4413      	add	r3, r2
 80138e0:	1cd8      	adds	r0, r3, #3
 80138e2:	4b12      	ldr	r3, [pc, #72]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138e6:	1cd9      	adds	r1, r3, #3
 80138e8:	4b10      	ldr	r3, [pc, #64]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138ec:	881b      	ldrh	r3, [r3, #0]
 80138ee:	461a      	mov	r2, r3
 80138f0:	f009 fe1a 	bl	801d528 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 80138f4:	4b0d      	ldr	r3, [pc, #52]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138f6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80138fa:	4b0c      	ldr	r3, [pc, #48]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 80138fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138fe:	881b      	ldrh	r3, [r3, #0]
 8013900:	4413      	add	r3, r2
 8013902:	b29a      	uxth	r2, r3
 8013904:	4b09      	ldr	r3, [pc, #36]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013906:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
            }
            
            /* Wait for next I-Block */
            return ERR_BUSY;
 801390a:	2302      	movs	r3, #2
 801390c:	e009      	b.n	8013922 <rfalIsoDepGetApduTransceiveStatus+0x13a>
        
        /*******************************************************************************/
        default:
            return ret;
 801390e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013910:	e007      	b.n	8013922 <rfalIsoDepGetApduTransceiveStatus+0x13a>
            break;
 8013912:	bf00      	nop
    }
    
    *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 8013914:	4b05      	ldr	r3, [pc, #20]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 8013916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013918:	4a04      	ldr	r2, [pc, #16]	; (801392c <rfalIsoDepGetApduTransceiveStatus+0x144>)
 801391a:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 801391e:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 8013920:	2300      	movs	r3, #0
 }
 8013922:	4618      	mov	r0, r3
 8013924:	372c      	adds	r7, #44	; 0x2c
 8013926:	46bd      	mov	sp, r7
 8013928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801392a:	bf00      	nop
 801392c:	200034e8 	.word	0x200034e8

08013930 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 8013936:	4b0b      	ldr	r3, [pc, #44]	; (8013964 <rfalNfcInitialize+0x34>)
 8013938:	2200      	movs	r2, #0
 801393a:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 801393c:	f7fd ff98 	bl	8011870 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 8013940:	f006 f814 	bl	801996c <rfalInitialize>
 8013944:	4603      	mov	r3, r0
 8013946:	80fb      	strh	r3, [r7, #6]
 8013948:	88fb      	ldrh	r3, [r7, #6]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d001      	beq.n	8013952 <rfalNfcInitialize+0x22>
 801394e:	88fb      	ldrh	r3, [r7, #6]
 8013950:	e003      	b.n	801395a <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 8013952:	4b04      	ldr	r3, [pc, #16]	; (8013964 <rfalNfcInitialize+0x34>)
 8013954:	2201      	movs	r2, #1
 8013956:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8013958:	2300      	movs	r3, #0
}
 801395a:	4618      	mov	r0, r3
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	20003570 	.word	0x20003570

08013968 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8013970:	4b42      	ldr	r3, [pc, #264]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d001      	beq.n	801397c <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 8013978:	2321      	movs	r3, #33	; 0x21
 801397a:	e07a      	b.n	8013a72 <rfalNfcDiscover+0x10a>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d025      	beq.n	80139ce <rfalNfcDiscover+0x66>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	799b      	ldrb	r3, [r3, #6]
 8013986:	2b05      	cmp	r3, #5
 8013988:	d821      	bhi.n	80139ce <rfalNfcDiscover+0x66>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	799b      	ldrb	r3, [r3, #6]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d01d      	beq.n	80139ce <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	885b      	ldrh	r3, [r3, #2]
 8013996:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 801399a:	2b00      	cmp	r3, #0
 801399c:	d007      	beq.n	80139ae <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	79db      	ldrb	r3, [r3, #7]
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d003      	beq.n	80139ae <rfalNfcDiscover+0x46>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	79db      	ldrb	r3, [r3, #7]
 80139aa:	2b02      	cmp	r3, #2
 80139ac:	d10f      	bne.n	80139ce <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	885b      	ldrh	r3, [r3, #2]
 80139b2:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d004      	beq.n	80139c4 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d804      	bhi.n	80139ce <rfalNfcDiscover+0x66>
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80139ca:	2b30      	cmp	r3, #48	; 0x30
 80139cc:	d901      	bls.n	80139d2 <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 80139ce:	2307      	movs	r3, #7
 80139d0:	e04f      	b.n	8013a72 <rfalNfcDiscover+0x10a>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 80139d2:	4b2a      	ldr	r3, [pc, #168]	; (8013a7c <rfalNfcDiscover+0x114>)
 80139d4:	2200      	movs	r2, #0
 80139d6:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 80139d8:	4b28      	ldr	r3, [pc, #160]	; (8013a7c <rfalNfcDiscover+0x114>)
 80139da:	2200      	movs	r2, #0
 80139dc:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 80139de:	4b27      	ldr	r3, [pc, #156]	; (8013a7c <rfalNfcDiscover+0x114>)
 80139e0:	2200      	movs	r2, #0
 80139e2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 80139e6:	4b25      	ldr	r3, [pc, #148]	; (8013a7c <rfalNfcDiscover+0x114>)
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 80139ee:	4b23      	ldr	r3, [pc, #140]	; (8013a7c <rfalNfcDiscover+0x114>)
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	330c      	adds	r3, #12
 80139f4:	4611      	mov	r1, r2
 80139f6:	2284      	movs	r2, #132	; 0x84
 80139f8:	4618      	mov	r0, r3
 80139fa:	f009 fd95 	bl	801d528 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 80139fe:	4b1f      	ldr	r3, [pc, #124]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a00:	2200      	movs	r2, #0
 8013a02:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8013a06:	4b1d      	ldr	r3, [pc, #116]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a08:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8013a0c:	4b1b      	ldr	r3, [pc, #108]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a0e:	89db      	ldrh	r3, [r3, #14]
 8013a10:	089b      	lsrs	r3, r3, #2
 8013a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a16:	4313      	orrs	r3, r2
 8013a18:	4a18      	ldr	r2, [pc, #96]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a1a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 8013a1e:	4b17      	ldr	r3, [pc, #92]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a20:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8013a24:	4b15      	ldr	r3, [pc, #84]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a26:	89db      	ldrh	r3, [r3, #14]
 8013a28:	089b      	lsrs	r3, r3, #2
 8013a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	4a12      	ldr	r2, [pc, #72]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a32:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 8013a36:	4b11      	ldr	r3, [pc, #68]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a38:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8013a3c:	4b0f      	ldr	r3, [pc, #60]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a3e:	89db      	ldrh	r3, [r3, #14]
 8013a40:	089b      	lsrs	r3, r3, #2
 8013a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013a46:	4313      	orrs	r3, r2
 8013a48:	4a0c      	ldr	r2, [pc, #48]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a4a:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8013a4e:	4b0b      	ldr	r3, [pc, #44]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a50:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8013a54:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a56:	89db      	ldrh	r3, [r3, #14]
 8013a58:	b21b      	sxth	r3, r3
 8013a5a:	109b      	asrs	r3, r3, #2
 8013a5c:	b21b      	sxth	r3, r3
 8013a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a62:	4313      	orrs	r3, r2
 8013a64:	4a05      	ldr	r2, [pc, #20]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a66:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    {
        return ERR_NOTSUPP;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 8013a6a:	4b04      	ldr	r3, [pc, #16]	; (8013a7c <rfalNfcDiscover+0x114>)
 8013a6c:	2202      	movs	r2, #2
 8013a6e:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8013a70:	2300      	movs	r3, #0
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	20003570 	.word	0x20003570

08013a80 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	4603      	mov	r3, r0
 8013a88:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 8013a8a:	4b0d      	ldr	r3, [pc, #52]	; (8013ac0 <rfalNfcDeactivate+0x40>)
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d801      	bhi.n	8013a96 <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8013a92:	2321      	movs	r3, #33	; 0x21
 8013a94:	e010      	b.n	8013ab8 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 8013a96:	79fb      	ldrb	r3, [r7, #7]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d007      	beq.n	8013aac <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8013a9c:	4a08      	ldr	r2, [pc, #32]	; (8013ac0 <rfalNfcDeactivate+0x40>)
 8013a9e:	79fb      	ldrb	r3, [r7, #7]
 8013aa0:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8013aa4:	4b06      	ldr	r3, [pc, #24]	; (8013ac0 <rfalNfcDeactivate+0x40>)
 8013aa6:	2222      	movs	r2, #34	; 0x22
 8013aa8:	701a      	strb	r2, [r3, #0]
 8013aaa:	e004      	b.n	8013ab6 <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8013aac:	f001 fcc2 	bl	8015434 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8013ab0:	4b03      	ldr	r3, [pc, #12]	; (8013ac0 <rfalNfcDeactivate+0x40>)
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8013ab6:	2300      	movs	r3, #0
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	20003570 	.word	0x20003570

08013ac4 <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 8013ac8:	4b02      	ldr	r3, [pc, #8]	; (8013ad4 <rfalNfcGetState+0x10>)
 8013aca:	781b      	ldrb	r3, [r3, #0]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bc80      	pop	{r7}
 8013ad2:	4770      	bx	lr
 8013ad4:	20003570 	.word	0x20003570

08013ad8 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8013ae0:	4b0f      	ldr	r3, [pc, #60]	; (8013b20 <rfalNfcGetActiveDevice+0x48>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	2b1d      	cmp	r3, #29
 8013ae6:	d801      	bhi.n	8013aec <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 8013ae8:	2321      	movs	r3, #33	; 0x21
 8013aea:	e014      	b.n	8013b16 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d101      	bne.n	8013af6 <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 8013af2:	2307      	movs	r3, #7
 8013af4:	e00f      	b.n	8013b16 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 8013af6:	4b0a      	ldr	r3, [pc, #40]	; (8013b20 <rfalNfcGetActiveDevice+0x48>)
 8013af8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d003      	beq.n	8013b08 <rfalNfcGetActiveDevice+0x30>
 8013b00:	4b07      	ldr	r3, [pc, #28]	; (8013b20 <rfalNfcGetActiveDevice+0x48>)
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d101      	bne.n	8013b0c <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 8013b08:	2305      	movs	r3, #5
 8013b0a:	e004      	b.n	8013b16 <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 8013b0c:	4b04      	ldr	r3, [pc, #16]	; (8013b20 <rfalNfcGetActiveDevice+0x48>)
 8013b0e:	689a      	ldr	r2, [r3, #8]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 8013b14:	2300      	movs	r3, #0
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bc80      	pop	{r7}
 8013b1e:	4770      	bx	lr
 8013b20:	20003570 	.word	0x20003570

08013b24 <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b086      	sub	sp, #24
 8013b28:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8013b2a:	f006 fe57 	bl	801a7dc <rfalWorker>
    
    switch( gNfcDev.state )
 8013b2e:	4bae      	ldr	r3, [pc, #696]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	2b22      	cmp	r3, #34	; 0x22
 8013b34:	f200 81b6 	bhi.w	8013ea4 <rfalNfcWorker+0x380>
 8013b38:	a201      	add	r2, pc, #4	; (adr r2, 8013b40 <rfalNfcWorker+0x1c>)
 8013b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b3e:	bf00      	nop
 8013b40:	08013ea5 	.word	0x08013ea5
 8013b44:	08013ea5 	.word	0x08013ea5
 8013b48:	08013bcd 	.word	0x08013bcd
 8013b4c:	08013c3b 	.word	0x08013c3b
 8013b50:	08013ea5 	.word	0x08013ea5
 8013b54:	08013ea5 	.word	0x08013ea5
 8013b58:	08013ea5 	.word	0x08013ea5
 8013b5c:	08013ea5 	.word	0x08013ea5
 8013b60:	08013ea5 	.word	0x08013ea5
 8013b64:	08013ea5 	.word	0x08013ea5
 8013b68:	08013c69 	.word	0x08013c69
 8013b6c:	08013cb5 	.word	0x08013cb5
 8013b70:	08013ea5 	.word	0x08013ea5
 8013b74:	08013d11 	.word	0x08013d11
 8013b78:	08013ea5 	.word	0x08013ea5
 8013b7c:	08013ea5 	.word	0x08013ea5
 8013b80:	08013ea5 	.word	0x08013ea5
 8013b84:	08013ea5 	.word	0x08013ea5
 8013b88:	08013ea5 	.word	0x08013ea5
 8013b8c:	08013ea5 	.word	0x08013ea5
 8013b90:	08013dc9 	.word	0x08013dc9
 8013b94:	08013e1f 	.word	0x08013e1f
 8013b98:	08013e53 	.word	0x08013e53
 8013b9c:	08013e53 	.word	0x08013e53
 8013ba0:	08013ea5 	.word	0x08013ea5
 8013ba4:	08013ea5 	.word	0x08013ea5
 8013ba8:	08013ea5 	.word	0x08013ea5
 8013bac:	08013ea5 	.word	0x08013ea5
 8013bb0:	08013ea5 	.word	0x08013ea5
 8013bb4:	08013ea5 	.word	0x08013ea5
 8013bb8:	08013ea5 	.word	0x08013ea5
 8013bbc:	08013d47 	.word	0x08013d47
 8013bc0:	08013ea5 	.word	0x08013ea5
 8013bc4:	08013ea5 	.word	0x08013ea5
 8013bc8:	08013d99 	.word	0x08013d99
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8013bcc:	4b86      	ldr	r3, [pc, #536]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 8013bd4:	4b84      	ldr	r3, [pc, #528]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8013bda:	4b83      	ldr	r3, [pc, #524]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bdc:	2200      	movs	r2, #0
 8013bde:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8013be0:	4b81      	ldr	r3, [pc, #516]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013be2:	89da      	ldrh	r2, [r3, #14]
 8013be4:	4b80      	ldr	r3, [pc, #512]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013be6:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8013be8:	4b7f      	ldr	r3, [pc, #508]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bea:	220a      	movs	r2, #10
 8013bec:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8013bee:	4b7e      	ldr	r3, [pc, #504]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bf0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f000 8157 	beq.w	8013ea8 <rfalNfcWorker+0x384>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8013bfa:	4b7b      	ldr	r3, [pc, #492]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013bfc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d001      	beq.n	8013c08 <rfalNfcWorker+0xe4>
 8013c04:	2300      	movs	r3, #0
 8013c06:	e000      	b.n	8013c0a <rfalNfcWorker+0xe6>
 8013c08:	4b78      	ldr	r3, [pc, #480]	; (8013dec <rfalNfcWorker+0x2c8>)
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f008 fb2c 	bl	801c268 <rfalWakeUpModeStart>
 8013c10:	4603      	mov	r3, r0
 8013c12:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8013c14:	88fb      	ldrh	r3, [r7, #6]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f040 8146 	bne.w	8013ea8 <rfalNfcWorker+0x384>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8013c1c:	4b72      	ldr	r3, [pc, #456]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c1e:	2203      	movs	r2, #3
 8013c20:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8013c22:	4b71      	ldr	r3, [pc, #452]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f000 813e 	beq.w	8013ea8 <rfalNfcWorker+0x384>
 8013c2c:	4b6e      	ldr	r3, [pc, #440]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c30:	4a6d      	ldr	r2, [pc, #436]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c32:	7812      	ldrb	r2, [r2, #0]
 8013c34:	4610      	mov	r0, r2
 8013c36:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8013c38:	e136      	b.n	8013ea8 <rfalNfcWorker+0x384>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8013c3a:	f008 fce3 	bl	801c604 <rfalWakeUpModeHasWoke>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f000 8133 	beq.w	8013eac <rfalNfcWorker+0x388>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8013c46:	f008 fd2b 	bl	801c6a0 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8013c4a:	4b67      	ldr	r3, [pc, #412]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c4c:	220a      	movs	r2, #10
 8013c4e:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8013c50:	4b65      	ldr	r3, [pc, #404]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f000 8129 	beq.w	8013eac <rfalNfcWorker+0x388>
 8013c5a:	4b63      	ldr	r3, [pc, #396]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c5e:	4a62      	ldr	r2, [pc, #392]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c60:	7812      	ldrb	r2, [r2, #0]
 8013c62:	4610      	mov	r0, r2
 8013c64:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 8013c66:	e121      	b.n	8013eac <rfalNfcWorker+0x388>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8013c68:	4b5f      	ldr	r3, [pc, #380]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c6a:	8a1b      	ldrh	r3, [r3, #16]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7f1 fcad 	bl	80055cc <timerCalculateTimer>
 8013c72:	4603      	mov	r3, r0
 8013c74:	4a5c      	ldr	r2, [pc, #368]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c76:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 8013c7a:	f000 fad5 	bl	8014228 <rfalNfcPollTechDetetection>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8013c82:	88fb      	ldrh	r3, [r7, #6]
 8013c84:	2b02      	cmp	r3, #2
 8013c86:	f000 8113 	beq.w	8013eb0 <rfalNfcWorker+0x38c>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 8013c8a:	88fb      	ldrh	r3, [r7, #6]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d103      	bne.n	8013c98 <rfalNfcWorker+0x174>
 8013c90:	4b55      	ldr	r3, [pc, #340]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c92:	885b      	ldrh	r3, [r3, #2]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d105      	bne.n	8013ca4 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 8013c98:	f006 fb6e 	bl	801a378 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 8013c9c:	4b52      	ldr	r3, [pc, #328]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013c9e:	2214      	movs	r2, #20
 8013ca0:	701a      	strb	r2, [r3, #0]
                    break;
 8013ca2:	e114      	b.n	8013ece <rfalNfcWorker+0x3aa>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8013ca4:	4b50      	ldr	r3, [pc, #320]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013ca6:	885a      	ldrh	r2, [r3, #2]
 8013ca8:	4b4f      	ldr	r3, [pc, #316]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013caa:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 8013cac:	4b4e      	ldr	r3, [pc, #312]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cae:	220b      	movs	r2, #11
 8013cb0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013cb2:	e0fd      	b.n	8013eb0 <rfalNfcWorker+0x38c>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 8013cb4:	f000 fc46 	bl	8014544 <rfalNfcPollCollResolution>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8013cbc:	88fb      	ldrh	r3, [r7, #6]
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	f000 80f8 	beq.w	8013eb4 <rfalNfcWorker+0x390>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8013cc4:	88fb      	ldrh	r3, [r7, #6]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d104      	bne.n	8013cd4 <rfalNfcWorker+0x1b0>
 8013cca:	4b47      	ldr	r3, [pc, #284]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013ccc:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d103      	bne.n	8013cdc <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8013cd4:	4b44      	ldr	r3, [pc, #272]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cd6:	2222      	movs	r2, #34	; 0x22
 8013cd8:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8013cda:	e0f8      	b.n	8013ece <rfalNfcWorker+0x3aa>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8013cdc:	4b42      	ldr	r3, [pc, #264]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cde:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d90d      	bls.n	8013d02 <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8013ce6:	4b40      	ldr	r3, [pc, #256]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d009      	beq.n	8013d02 <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8013cee:	4b3e      	ldr	r3, [pc, #248]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cf0:	220c      	movs	r2, #12
 8013cf2:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8013cf4:	4b3c      	ldr	r3, [pc, #240]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cf8:	4a3b      	ldr	r2, [pc, #236]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013cfa:	7812      	ldrb	r2, [r2, #0]
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	4798      	blx	r3
                        break;
 8013d00:	e0e5      	b.n	8013ece <rfalNfcWorker+0x3aa>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 8013d02:	4b39      	ldr	r3, [pc, #228]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d04:	2200      	movs	r2, #0
 8013d06:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8013d08:	4b37      	ldr	r3, [pc, #220]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d0a:	220d      	movs	r2, #13
 8013d0c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013d0e:	e0d1      	b.n	8013eb4 <rfalNfcWorker+0x390>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 8013d10:	4b35      	ldr	r3, [pc, #212]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d12:	79db      	ldrb	r3, [r3, #7]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f000 fee3 	bl	8014ae0 <rfalNfcPollActivation>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d003      	beq.n	8013d28 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 8013d20:	4b31      	ldr	r3, [pc, #196]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d22:	2222      	movs	r2, #34	; 0x22
 8013d24:	701a      	strb	r2, [r3, #0]
                break;
 8013d26:	e0d2      	b.n	8013ece <rfalNfcWorker+0x3aa>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8013d28:	4b2f      	ldr	r3, [pc, #188]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d2a:	221e      	movs	r2, #30
 8013d2c:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8013d2e:	4b2e      	ldr	r3, [pc, #184]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	f000 80c0 	beq.w	8013eb8 <rfalNfcWorker+0x394>
 8013d38:	4b2b      	ldr	r3, [pc, #172]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d3c:	4a2a      	ldr	r2, [pc, #168]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d3e:	7812      	ldrb	r2, [r2, #0]
 8013d40:	4610      	mov	r0, r2
 8013d42:	4798      	blx	r3
            break;
 8013d44:	e0b8      	b.n	8013eb8 <rfalNfcWorker+0x394>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 8013d46:	f000 f9eb 	bl	8014120 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8013d4a:	4b27      	ldr	r3, [pc, #156]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d4c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8013d50:	2b02      	cmp	r3, #2
 8013d52:	d00c      	beq.n	8013d6e <rfalNfcWorker+0x24a>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8013d54:	4b24      	ldr	r3, [pc, #144]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d56:	2221      	movs	r2, #33	; 0x21
 8013d58:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8013d5a:	4b23      	ldr	r3, [pc, #140]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d005      	beq.n	8013d6e <rfalNfcWorker+0x24a>
 8013d62:	4b21      	ldr	r3, [pc, #132]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d66:	4a20      	ldr	r2, [pc, #128]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d68:	7812      	ldrb	r2, [r2, #0]
 8013d6a:	4610      	mov	r0, r2
 8013d6c:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 8013d6e:	4b1e      	ldr	r3, [pc, #120]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d70:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8013d74:	2b20      	cmp	r3, #32
 8013d76:	f040 80a1 	bne.w	8013ebc <rfalNfcWorker+0x398>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 8013d7a:	4b1b      	ldr	r3, [pc, #108]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d7c:	2217      	movs	r2, #23
 8013d7e:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8013d80:	4b19      	ldr	r3, [pc, #100]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 8099 	beq.w	8013ebc <rfalNfcWorker+0x398>
 8013d8a:	4b17      	ldr	r3, [pc, #92]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d8e:	4a16      	ldr	r2, [pc, #88]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d90:	7812      	ldrb	r2, [r2, #0]
 8013d92:	4610      	mov	r0, r2
 8013d94:	4798      	blx	r3
            }
            break;
 8013d96:	e091      	b.n	8013ebc <rfalNfcWorker+0x398>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 8013d98:	f001 fb4c 	bl	8015434 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8013d9c:	4b12      	ldr	r3, [pc, #72]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013d9e:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d001      	beq.n	8013daa <rfalNfcWorker+0x286>
 8013da6:	2202      	movs	r2, #2
 8013da8:	e000      	b.n	8013dac <rfalNfcWorker+0x288>
 8013daa:	2201      	movs	r2, #1
 8013dac:	4b0e      	ldr	r3, [pc, #56]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013dae:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8013db0:	4b0d      	ldr	r3, [pc, #52]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 8083 	beq.w	8013ec0 <rfalNfcWorker+0x39c>
 8013dba:	4b0b      	ldr	r3, [pc, #44]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dbe:	4a0a      	ldr	r2, [pc, #40]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013dc0:	7812      	ldrb	r2, [r2, #0]
 8013dc2:	4610      	mov	r0, r2
 8013dc4:	4798      	blx	r3
            break;
 8013dc6:	e07b      	b.n	8013ec0 <rfalNfcWorker+0x39c>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8013dc8:	4b07      	ldr	r3, [pc, #28]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013dca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7f1 fc0a 	bl	80055e8 <timerIsExpired>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d00a      	beq.n	8013df0 <rfalNfcWorker+0x2cc>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 8013dda:	f008 f929 	bl	801c030 <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8013dde:	4b02      	ldr	r3, [pc, #8]	; (8013de8 <rfalNfcWorker+0x2c4>)
 8013de0:	2202      	movs	r2, #2
 8013de2:	701a      	strb	r2, [r3, #0]
                break;
 8013de4:	e073      	b.n	8013ece <rfalNfcWorker+0x3aa>
 8013de6:	bf00      	nop
 8013de8:	20003570 	.word	0x20003570
 8013dec:	200035ea 	.word	0x200035ea
            }

    #if RFAL_FEATURE_LISTEN_MODE
            err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen );
 8013df0:	4b38      	ldr	r3, [pc, #224]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013df2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8013df6:	4b38      	ldr	r3, [pc, #224]	; (8013ed8 <rfalNfcWorker+0x3b4>)
 8013df8:	9302      	str	r3, [sp, #8]
 8013dfa:	23ff      	movs	r3, #255	; 0xff
 8013dfc:	9301      	str	r3, [sp, #4]
 8013dfe:	4b37      	ldr	r3, [pc, #220]	; (8013edc <rfalNfcWorker+0x3b8>)
 8013e00:	9300      	str	r3, [sp, #0]
 8013e02:	4b37      	ldr	r3, [pc, #220]	; (8013ee0 <rfalNfcWorker+0x3bc>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	4937      	ldr	r1, [pc, #220]	; (8013ee4 <rfalNfcWorker+0x3c0>)
 8013e08:	f007 ffac 	bl	801bd64 <rfalListenStart>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	80fb      	strh	r3, [r7, #6]
            if( err == ERR_NONE )
 8013e10:	88fb      	ldrh	r3, [r7, #6]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d156      	bne.n	8013ec4 <rfalNfcWorker+0x3a0>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;                   /* Wait for listen mode to be activated */
 8013e16:	4b2f      	ldr	r3, [pc, #188]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e18:	2215      	movs	r2, #21
 8013e1a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e1c:	e052      	b.n	8013ec4 <rfalNfcWorker+0x3a0>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 8013e1e:	4b2d      	ldr	r3, [pc, #180]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e20:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7f1 fbdf 	bl	80055e8 <timerIsExpired>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d005      	beq.n	8013e3c <rfalNfcWorker+0x318>
            {
                rfalListenStop();
 8013e30:	f008 f8fe 	bl	801c030 <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8013e34:	4b27      	ldr	r3, [pc, #156]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e36:	2202      	movs	r2, #2
 8013e38:	701a      	strb	r2, [r3, #0]
                break;
 8013e3a:	e048      	b.n	8013ece <rfalNfcWorker+0x3aa>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 8013e3c:	2100      	movs	r1, #0
 8013e3e:	2000      	movs	r0, #0
 8013e40:	f008 f922 	bl	801c088 <rfalListenGetState>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d93e      	bls.n	8013ec8 <rfalNfcWorker+0x3a4>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 8013e4a:	4b22      	ldr	r3, [pc, #136]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e4c:	2216      	movs	r2, #22
 8013e4e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e50:	e03a      	b.n	8013ec8 <rfalNfcWorker+0x3a4>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 8013e52:	f001 f8f7 	bl	8015044 <rfalNfcListenActivation>
 8013e56:	4603      	mov	r3, r0
 8013e58:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 8013e5a:	88fb      	ldrh	r3, [r7, #6]
 8013e5c:	2b02      	cmp	r3, #2
 8013e5e:	d035      	beq.n	8013ecc <rfalNfcWorker+0x3a8>
            {
                if( err == ERR_NONE )
 8013e60:	88fb      	ldrh	r3, [r7, #6]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d118      	bne.n	8013e98 <rfalNfcWorker+0x374>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 8013e66:	4b1b      	ldr	r3, [pc, #108]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e68:	4a1f      	ldr	r2, [pc, #124]	; (8013ee8 <rfalNfcWorker+0x3c4>)
 8013e6a:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 8013e6c:	4b19      	ldr	r3, [pc, #100]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e6e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8013e72:	3301      	adds	r3, #1
 8013e74:	b2da      	uxtb	r2, r3
 8013e76:	4b17      	ldr	r3, [pc, #92]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e78:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 8013e7c:	4b15      	ldr	r3, [pc, #84]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e7e:	221e      	movs	r2, #30
 8013e80:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 8013e82:	4b14      	ldr	r3, [pc, #80]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d020      	beq.n	8013ecc <rfalNfcWorker+0x3a8>
 8013e8a:	4b12      	ldr	r3, [pc, #72]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e8e:	4a11      	ldr	r2, [pc, #68]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e90:	7812      	ldrb	r2, [r2, #0]
 8013e92:	4610      	mov	r0, r2
 8013e94:	4798      	blx	r3
                    rfalListenStop();
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 8013e96:	e019      	b.n	8013ecc <rfalNfcWorker+0x3a8>
                    rfalListenStop();
 8013e98:	f008 f8ca 	bl	801c030 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 8013e9c:	4b0d      	ldr	r3, [pc, #52]	; (8013ed4 <rfalNfcWorker+0x3b0>)
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	701a      	strb	r2, [r3, #0]
            break;
 8013ea2:	e013      	b.n	8013ecc <rfalNfcWorker+0x3a8>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 8013ea4:	bf00      	nop
 8013ea6:	e012      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ea8:	bf00      	nop
 8013eaa:	e010      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013eac:	bf00      	nop
 8013eae:	e00e      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013eb0:	bf00      	nop
 8013eb2:	e00c      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013eb4:	bf00      	nop
 8013eb6:	e00a      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013eb8:	bf00      	nop
 8013eba:	e008      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ebc:	bf00      	nop
 8013ebe:	e006      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ec0:	bf00      	nop
 8013ec2:	e004      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ec4:	bf00      	nop
 8013ec6:	e002      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ec8:	bf00      	nop
 8013eca:	e000      	b.n	8013ece <rfalNfcWorker+0x3aa>
            break;
 8013ecc:	bf00      	nop
    }
}
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	20003570 	.word	0x20003570
 8013ed8:	20003a6e 	.word	0x20003a6e
 8013edc:	2000396b 	.word	0x2000396b
 8013ee0:	200035ce 	.word	0x200035ce
 8013ee4:	200035c0 	.word	0x200035c0
 8013ee8:	20003600 	.word	0x20003600

08013eec <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 8013eec:	b5b0      	push	{r4, r5, r7, lr}
 8013eee:	b09c      	sub	sp, #112	; 0x70
 8013ef0:	af06      	add	r7, sp, #24
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	607a      	str	r2, [r7, #4]
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 8013efc:	4b7f      	ldr	r3, [pc, #508]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2b1d      	cmp	r3, #29
 8013f02:	f240 80f5 	bls.w	80140f0 <rfalNfcDataExchangeStart+0x204>
 8013f06:	4b7d      	ldr	r3, [pc, #500]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f08:	689b      	ldr	r3, [r3, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f000 80f0 	beq.w	80140f0 <rfalNfcDataExchangeStart+0x204>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 8013f10:	4b7a      	ldr	r3, [pc, #488]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	2b1e      	cmp	r3, #30
 8013f16:	d124      	bne.n	8013f62 <rfalNfcDataExchangeStart+0x76>
 8013f18:	4b78      	ldr	r3, [pc, #480]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f1a:	689b      	ldr	r3, [r3, #8]
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	2b09      	cmp	r3, #9
 8013f20:	d91f      	bls.n	8013f62 <rfalNfcDataExchangeStart+0x76>
 8013f22:	4b76      	ldr	r3, [pc, #472]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	2b0f      	cmp	r3, #15
 8013f2a:	d81a      	bhi.n	8013f62 <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 8013f2c:	897b      	ldrh	r3, [r7, #10]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d001      	beq.n	8013f36 <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 8013f32:	2321      	movs	r3, #33	; 0x21
 8013f34:	e0dd      	b.n	80140f2 <rfalNfcDataExchangeStart+0x206>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	4a71      	ldr	r2, [pc, #452]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 8013f3a:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8013f3c:	4b6f      	ldr	r3, [pc, #444]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	7f5b      	ldrb	r3, [r3, #29]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d008      	beq.n	8013f58 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.inf : gNfcDev.rxBuf.rfBuf) );
 8013f46:	4b6d      	ldr	r3, [pc, #436]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	7f5b      	ldrb	r3, [r3, #29]
 8013f4c:	2b02      	cmp	r3, #2
 8013f4e:	d101      	bne.n	8013f54 <rfalNfcDataExchangeStart+0x68>
 8013f50:	4b6c      	ldr	r3, [pc, #432]	; (8014104 <rfalNfcDataExchangeStart+0x218>)
 8013f52:	e002      	b.n	8013f5a <rfalNfcDataExchangeStart+0x6e>
 8013f54:	4b6c      	ldr	r3, [pc, #432]	; (8014108 <rfalNfcDataExchangeStart+0x21c>)
 8013f56:	e000      	b.n	8013f5a <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.inf : 
 8013f58:	4b6c      	ldr	r3, [pc, #432]	; (801410c <rfalNfcDataExchangeStart+0x220>)
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	e0c7      	b.n	80140f2 <rfalNfcDataExchangeStart+0x206>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 8013f62:	4b66      	ldr	r3, [pc, #408]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	7f5b      	ldrb	r3, [r3, #29]
 8013f68:	2b02      	cmp	r3, #2
 8013f6a:	d065      	beq.n	8014038 <rfalNfcDataExchangeStart+0x14c>
 8013f6c:	2b02      	cmp	r3, #2
 8013f6e:	f300 80ad 	bgt.w	80140cc <rfalNfcDataExchangeStart+0x1e0>
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d002      	beq.n	8013f7c <rfalNfcDataExchangeStart+0x90>
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d021      	beq.n	8013fbe <rfalNfcDataExchangeStart+0xd2>
 8013f7a:	e0a7      	b.n	80140cc <rfalNfcDataExchangeStart+0x1e0>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f80:	897b      	ldrh	r3, [r7, #10]
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013f88:	4b5f      	ldr	r3, [pc, #380]	; (8014108 <rfalNfcDataExchangeStart+0x21c>)
 8013f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8013f8c:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8013f90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8013f94:	4b5a      	ldr	r3, [pc, #360]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 8013f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f98:	2300      	movs	r3, #0
 8013f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f9e:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	4a59      	ldr	r2, [pc, #356]	; (8014108 <rfalNfcDataExchangeStart+0x21c>)
 8013fa4:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	4a55      	ldr	r2, [pc, #340]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 8013faa:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 8013fac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f006 f9f7 	bl	801a3a4 <rfalStartTransceive>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8013fbc:	e08a      	b.n	80140d4 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepTxRxParam isoDepTxRx;
                
                if( txDataLen > 0U )
 8013fbe:	897b      	ldrh	r3, [r7, #10]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d005      	beq.n	8013fd0 <rfalNfcDataExchangeStart+0xe4>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.inf, txData, txDataLen );
 8013fc4:	897b      	ldrh	r3, [r7, #10]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	68f9      	ldr	r1, [r7, #12]
 8013fca:	4851      	ldr	r0, [pc, #324]	; (8014110 <rfalNfcDataExchangeStart+0x224>)
 8013fcc:	f009 faac 	bl	801d528 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 8013fd6:	23ff      	movs	r3, #255	; 0xff
 8013fd8:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 8013fda:	4b48      	ldr	r3, [pc, #288]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013fdc:	689b      	ldr	r3, [r3, #8]
 8013fde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013fe2:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 8013fe4:	4b45      	ldr	r3, [pc, #276]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013fe6:	689b      	ldr	r3, [r3, #8]
 8013fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fea:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 8013fec:	4b43      	ldr	r3, [pc, #268]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ff2:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 8013ff4:	4b47      	ldr	r3, [pc, #284]	; (8014114 <rfalNfcDataExchangeStart+0x228>)
 8013ff6:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 8013ff8:	897b      	ldrh	r3, [r7, #10]
 8013ffa:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.isTxChaining = false;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	76bb      	strb	r3, [r7, #26]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 8014000:	4b41      	ldr	r3, [pc, #260]	; (8014108 <rfalNfcDataExchangeStart+0x21c>)
 8014002:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 8014004:	4b3e      	ldr	r3, [pc, #248]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 8014006:	623b      	str	r3, [r7, #32]
                isoDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 8014008:	4b43      	ldr	r3, [pc, #268]	; (8014118 <rfalNfcDataExchangeStart+0x22c>)
 801400a:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.inf;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	4a3f      	ldr	r2, [pc, #252]	; (801410c <rfalNfcDataExchangeStart+0x220>)
 8014010:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	4a3a      	ldr	r2, [pc, #232]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 8014016:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartTransceive( isoDepTxRx );
 8014018:	466d      	mov	r5, sp
 801401a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014022:	6823      	ldr	r3, [r4, #0]
 8014024:	602b      	str	r3, [r5, #0]
 8014026:	f107 0314 	add.w	r3, r7, #20
 801402a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801402c:	f7fe fe50 	bl	8012cd0 <rfalIsoDepStartTransceive>
 8014030:	4603      	mov	r3, r0
 8014032:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8014036:	e04d      	b.n	80140d4 <rfalNfcDataExchangeStart+0x1e8>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepTxRxParam nfcDepTxRx;
                
                if( txDataLen > 0U)
 8014038:	897b      	ldrh	r3, [r7, #10]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d005      	beq.n	801404a <rfalNfcDataExchangeStart+0x15e>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.inf, txData, txDataLen );
 801403e:	897b      	ldrh	r3, [r7, #10]
 8014040:	461a      	mov	r2, r3
 8014042:	68f9      	ldr	r1, [r7, #12]
 8014044:	4835      	ldr	r0, [pc, #212]	; (801411c <rfalNfcDataExchangeStart+0x230>)
 8014046:	f009 fa6f 	bl	801d528 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 801404a:	23ff      	movs	r3, #255	; 0xff
 801404c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) );
 8014050:	4b2a      	ldr	r3, [pc, #168]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014058:	091b      	lsrs	r3, r3, #4
 801405a:	b2db      	uxtb	r3, r3
 801405c:	f003 0303 	and.w	r3, r3, #3
 8014060:	3301      	adds	r3, #1
 8014062:	019b      	lsls	r3, r3, #6
 8014064:	2bfd      	cmp	r3, #253	; 0xfd
 8014066:	d80c      	bhi.n	8014082 <rfalNfcDataExchangeStart+0x196>
 8014068:	4b24      	ldr	r3, [pc, #144]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014070:	091b      	lsrs	r3, r3, #4
 8014072:	b2db      	uxtb	r3, r3
 8014074:	f003 0303 	and.w	r3, r3, #3
 8014078:	3301      	adds	r3, #1
 801407a:	b29b      	uxth	r3, r3
 801407c:	019b      	lsls	r3, r3, #6
 801407e:	b29b      	uxth	r3, r3
 8014080:	e000      	b.n	8014084 <rfalNfcDataExchangeStart+0x198>
 8014082:	23fe      	movs	r3, #254	; 0xfe
 8014084:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8014086:	4b1d      	ldr	r3, [pc, #116]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8014088:	689b      	ldr	r3, [r3, #8]
 801408a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801408c:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 801408e:	4b1b      	ldr	r3, [pc, #108]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 8014090:	689b      	ldr	r3, [r3, #8]
 8014092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014094:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8014096:	4b1f      	ldr	r3, [pc, #124]	; (8014114 <rfalNfcDataExchangeStart+0x228>)
 8014098:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 801409a:	897b      	ldrh	r3, [r7, #10]
 801409c:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.isTxChaining = false;
 801409e:	2300      	movs	r3, #0
 80140a0:	76bb      	strb	r3, [r7, #26]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 80140a2:	4b19      	ldr	r3, [pc, #100]	; (8014108 <rfalNfcDataExchangeStart+0x21c>)
 80140a4:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 80140a6:	4b16      	ldr	r3, [pc, #88]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 80140a8:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.isRxChaining = &gNfcDev.isRxChaining;
 80140aa:	4b1b      	ldr	r3, [pc, #108]	; (8014118 <rfalNfcDataExchangeStart+0x22c>)
 80140ac:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.inf;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4a14      	ldr	r2, [pc, #80]	; (8014104 <rfalNfcDataExchangeStart+0x218>)
 80140b2:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	4a12      	ldr	r2, [pc, #72]	; (8014100 <rfalNfcDataExchangeStart+0x214>)
 80140b8:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartTransceive( &nfcDepTxRx );                          
 80140ba:	f107 0314 	add.w	r3, r7, #20
 80140be:	4618      	mov	r0, r3
 80140c0:	f003 fb64 	bl	801778c <rfalNfcDepStartTransceive>
 80140c4:	4603      	mov	r3, r0
 80140c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 80140ca:	e003      	b.n	80140d4 <rfalNfcDataExchangeStart+0x1e8>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 80140cc:	2307      	movs	r3, #7
 80140ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 80140d2:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 80140d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d106      	bne.n	80140ea <rfalNfcDataExchangeStart+0x1fe>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 80140dc:	4b07      	ldr	r3, [pc, #28]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 80140de:	2202      	movs	r2, #2
 80140e0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 80140e4:	4b05      	ldr	r3, [pc, #20]	; (80140fc <rfalNfcDataExchangeStart+0x210>)
 80140e6:	221f      	movs	r2, #31
 80140e8:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 80140ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80140ee:	e000      	b.n	80140f2 <rfalNfcDataExchangeStart+0x206>
    }
    
    return ERR_WRONG_STATE;
 80140f0:	2321      	movs	r3, #33	; 0x21
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3758      	adds	r7, #88	; 0x58
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bdb0      	pop	{r4, r5, r7, pc}
 80140fa:	bf00      	nop
 80140fc:	20003570 	.word	0x20003570
 8014100:	20003a6e 	.word	0x20003a6e
 8014104:	20003970 	.word	0x20003970
 8014108:	2000396b 	.word	0x2000396b
 801410c:	2000396e 	.word	0x2000396e
 8014110:	2000386b 	.word	0x2000386b
 8014114:	20003868 	.word	0x20003868
 8014118:	20003863 	.word	0x20003863
 801411c:	2000386d 	.word	0x2000386d

08014120 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 8014124:	4b3d      	ldr	r3, [pc, #244]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	2b1e      	cmp	r3, #30
 801412a:	d114      	bne.n	8014156 <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 801412c:	4b3b      	ldr	r3, [pc, #236]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 801412e:	2202      	movs	r2, #2
 8014130:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8014134:	4b39      	ldr	r3, [pc, #228]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014136:	221f      	movs	r2, #31
 8014138:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 801413a:	4b38      	ldr	r3, [pc, #224]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 801413c:	689b      	ldr	r3, [r3, #8]
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	2b0c      	cmp	r3, #12
 8014142:	d108      	bne.n	8014156 <rfalNfcDataExchangeGetStatus+0x36>
 8014144:	4b35      	ldr	r3, [pc, #212]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014146:	689b      	ldr	r3, [r3, #8]
 8014148:	7f5b      	ldrb	r3, [r3, #29]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d103      	bne.n	8014156 <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 801414e:	4b33      	ldr	r3, [pc, #204]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014150:	2200      	movs	r2, #0
 8014152:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 8014156:	4b31      	ldr	r3, [pc, #196]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	2b17      	cmp	r3, #23
 801415c:	d103      	bne.n	8014166 <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 801415e:	4b2f      	ldr	r3, [pc, #188]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014160:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8014164:	e057      	b.n	8014216 <rfalNfcDataExchangeGetStatus+0xf6>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 8014166:	4b2d      	ldr	r3, [pc, #180]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b1f      	cmp	r3, #31
 801416c:	d005      	beq.n	801417a <rfalNfcDataExchangeGetStatus+0x5a>
 801416e:	4b2b      	ldr	r3, [pc, #172]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	2b21      	cmp	r3, #33	; 0x21
 8014174:	d001      	beq.n	801417a <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 8014176:	2321      	movs	r3, #33	; 0x21
 8014178:	e04d      	b.n	8014216 <rfalNfcDataExchangeGetStatus+0xf6>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 801417a:	4b28      	ldr	r3, [pc, #160]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 801417c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8014180:	2b02      	cmp	r3, #2
 8014182:	d145      	bne.n	8014210 <rfalNfcDataExchangeGetStatus+0xf0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8014184:	4b25      	ldr	r3, [pc, #148]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014186:	689b      	ldr	r3, [r3, #8]
 8014188:	7f5b      	ldrb	r3, [r3, #29]
 801418a:	2b02      	cmp	r3, #2
 801418c:	d016      	beq.n	80141bc <rfalNfcDataExchangeGetStatus+0x9c>
 801418e:	2b02      	cmp	r3, #2
 8014190:	dc1c      	bgt.n	80141cc <rfalNfcDataExchangeGetStatus+0xac>
 8014192:	2b00      	cmp	r3, #0
 8014194:	d002      	beq.n	801419c <rfalNfcDataExchangeGetStatus+0x7c>
 8014196:	2b01      	cmp	r3, #1
 8014198:	d008      	beq.n	80141ac <rfalNfcDataExchangeGetStatus+0x8c>
 801419a:	e017      	b.n	80141cc <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 801419c:	f006 fb0e 	bl	801a7bc <rfalGetTransceiveStatus>
 80141a0:	4603      	mov	r3, r0
 80141a2:	461a      	mov	r2, r3
 80141a4:	4b1d      	ldr	r3, [pc, #116]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141a6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80141aa:	e014      	b.n	80141d6 <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 80141ac:	f7fe fdfc 	bl	8012da8 <rfalIsoDepGetTransceiveStatus>
 80141b0:	4603      	mov	r3, r0
 80141b2:	461a      	mov	r2, r3
 80141b4:	4b19      	ldr	r3, [pc, #100]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141b6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80141ba:	e00c      	b.n	80141d6 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 80141bc:	f003 fb1c 	bl	80177f8 <rfalNfcDepGetTransceiveStatus>
 80141c0:	4603      	mov	r3, r0
 80141c2:	461a      	mov	r2, r3
 80141c4:	4b15      	ldr	r3, [pc, #84]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141c6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80141ca:	e004      	b.n	80141d6 <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 80141cc:	4b13      	ldr	r3, [pc, #76]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141ce:	2207      	movs	r2, #7
 80141d0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 80141d4:	bf00      	nop
        
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 80141d6:	4b11      	ldr	r3, [pc, #68]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141d8:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80141dc:	2b20      	cmp	r3, #32
 80141de:	d117      	bne.n	8014210 <rfalNfcDataExchangeGetStatus+0xf0>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 80141e0:	4b0f      	ldr	r3, [pc, #60]	; (8014220 <rfalNfcDataExchangeGetStatus+0x100>)
 80141e2:	22ff      	movs	r2, #255	; 0xff
 80141e4:	490f      	ldr	r1, [pc, #60]	; (8014224 <rfalNfcDataExchangeGetStatus+0x104>)
 80141e6:	200c      	movs	r0, #12
 80141e8:	f007 ff3e 	bl	801c068 <rfalListenSleepStart>
 80141ec:	4603      	mov	r3, r0
 80141ee:	461a      	mov	r2, r3
 80141f0:	4b0a      	ldr	r3, [pc, #40]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141f2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 80141f6:	4b09      	ldr	r3, [pc, #36]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 80141f8:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d003      	beq.n	8014208 <rfalNfcDataExchangeGetStatus+0xe8>
 8014200:	4b06      	ldr	r3, [pc, #24]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014202:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8014206:	e006      	b.n	8014216 <rfalNfcDataExchangeGetStatus+0xf6>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 8014208:	4b04      	ldr	r3, [pc, #16]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 801420a:	2220      	movs	r2, #32
 801420c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 8014210:	4b02      	ldr	r3, [pc, #8]	; (801421c <rfalNfcDataExchangeGetStatus+0xfc>)
 8014212:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 8014216:	4618      	mov	r0, r3
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20003570 	.word	0x20003570
 8014220:	20003a6e 	.word	0x20003a6e
 8014224:	2000396b 	.word	0x2000396b

08014228 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b08a      	sub	sp, #40	; 0x28
 801422c:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 801422e:	2300      	movs	r3, #0
 8014230:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 8014232:	4b9a      	ldr	r3, [pc, #616]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014234:	89db      	ldrh	r3, [r3, #14]
 8014236:	f003 0310 	and.w	r3, r3, #16
 801423a:	2b00      	cmp	r3, #0
 801423c:	d05a      	beq.n	80142f4 <rfalNfcPollTechDetetection+0xcc>
 801423e:	4b97      	ldr	r3, [pc, #604]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014240:	889b      	ldrh	r3, [r3, #4]
 8014242:	f003 0310 	and.w	r3, r3, #16
 8014246:	2b00      	cmp	r3, #0
 8014248:	d054      	beq.n	80142f4 <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 801424a:	4b94      	ldr	r3, [pc, #592]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801424c:	889b      	ldrh	r3, [r3, #4]
 801424e:	f023 0310 	bic.w	r3, r3, #16
 8014252:	b29a      	uxth	r2, r3
 8014254:	4b91      	ldr	r3, [pc, #580]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014256:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 8014258:	4b90      	ldr	r3, [pc, #576]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801425a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 801425e:	4a8f      	ldr	r2, [pc, #572]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014260:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 8014264:	4619      	mov	r1, r3
 8014266:	2009      	movs	r0, #9
 8014268:	f005 fc24 	bl	8019ab4 <rfalSetMode>
 801426c:	4603      	mov	r3, r0
 801426e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014272:	2b00      	cmp	r3, #0
 8014274:	d001      	beq.n	801427a <rfalNfcPollTechDetetection+0x52>
 8014276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014278:	e15d      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801427a:	2001      	movs	r0, #1
 801427c:	f005 ffb6 	bl	801a1ec <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8014280:	2040      	movs	r0, #64	; 0x40
 8014282:	f005 ffd7 	bl	801a234 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 8014286:	2000      	movs	r0, #0
 8014288:	f005 ffc0 	bl	801a20c <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 801428c:	4884      	ldr	r0, [pc, #528]	; (80144a0 <rfalNfcPollTechDetetection+0x278>)
 801428e:	f005 ffe5 	bl	801a25c <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8014292:	f006 f80f 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014296:	4603      	mov	r3, r0
 8014298:	84fb      	strh	r3, [r7, #38]	; 0x26
 801429a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801429c:	2b00      	cmp	r3, #0
 801429e:	d001      	beq.n	80142a4 <rfalNfcPollTechDetetection+0x7c>
 80142a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142a2:	e148      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 80142a4:	2300      	movs	r3, #0
 80142a6:	2200      	movs	r2, #0
 80142a8:	2101      	movs	r1, #1
 80142aa:	487e      	ldr	r0, [pc, #504]	; (80144a4 <rfalNfcPollTechDetetection+0x27c>)
 80142ac:	f001 f81e 	bl	80152ec <rfalNfcNfcDepActivate>
 80142b0:	4603      	mov	r3, r0
 80142b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 80142b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d118      	bne.n	80142ec <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 80142ba:	4b78      	ldr	r3, [pc, #480]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142bc:	885b      	ldrh	r3, [r3, #2]
 80142be:	f043 0310 	orr.w	r3, r3, #16
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	4b75      	ldr	r3, [pc, #468]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142c6:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 80142c8:	4b74      	ldr	r3, [pc, #464]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142ca:	2205      	movs	r2, #5
 80142cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80142d0:	4b72      	ldr	r3, [pc, #456]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142d2:	2202      	movs	r2, #2
 80142d4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 80142d8:	4b70      	ldr	r3, [pc, #448]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142da:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80142de:	3301      	adds	r3, #1
 80142e0:	b2da      	uxtb	r2, r3
 80142e2:	4b6e      	ldr	r3, [pc, #440]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142e4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 80142e8:	2300      	movs	r3, #0
 80142ea:	e124      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 80142ec:	f006 f844 	bl	801a378 <rfalFieldOff>
        return ERR_BUSY;
 80142f0:	2302      	movs	r3, #2
 80142f2:	e120      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 80142f4:	4b69      	ldr	r3, [pc, #420]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80142f6:	89db      	ldrh	r3, [r3, #14]
 80142f8:	f003 0301 	and.w	r3, r3, #1
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d034      	beq.n	801436a <rfalNfcPollTechDetetection+0x142>
 8014300:	4b66      	ldr	r3, [pc, #408]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014302:	889b      	ldrh	r3, [r3, #4]
 8014304:	f003 0301 	and.w	r3, r3, #1
 8014308:	2b00      	cmp	r3, #0
 801430a:	d02e      	beq.n	801436a <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 801430c:	4b63      	ldr	r3, [pc, #396]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801430e:	889b      	ldrh	r3, [r3, #4]
 8014310:	f023 0301 	bic.w	r3, r3, #1
 8014314:	b29a      	uxth	r2, r3
 8014316:	4b61      	ldr	r3, [pc, #388]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014318:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 801431a:	f003 fa9d 	bl	8017858 <rfalNfcaPollerInitialize>
 801431e:	4603      	mov	r3, r0
 8014320:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014324:	2b00      	cmp	r3, #0
 8014326:	d001      	beq.n	801432c <rfalNfcPollTechDetetection+0x104>
 8014328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801432a:	e104      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 801432c:	f005 ffc2 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014330:	4603      	mov	r3, r0
 8014332:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <rfalNfcPollTechDetetection+0x116>
 801433a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801433c:	e0fb      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 801433e:	4b57      	ldr	r3, [pc, #348]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014340:	7b1b      	ldrb	r3, [r3, #12]
 8014342:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014346:	4611      	mov	r1, r2
 8014348:	4618      	mov	r0, r3
 801434a:	f003 fad1 	bl	80178f0 <rfalNfcaPollerTechnologyDetection>
 801434e:	4603      	mov	r3, r0
 8014350:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8014352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014354:	2b00      	cmp	r3, #0
 8014356:	d106      	bne.n	8014366 <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 8014358:	4b50      	ldr	r3, [pc, #320]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801435a:	885b      	ldrh	r3, [r3, #2]
 801435c:	f043 0301 	orr.w	r3, r3, #1
 8014360:	b29a      	uxth	r2, r3
 8014362:	4b4e      	ldr	r3, [pc, #312]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014364:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8014366:	2302      	movs	r3, #2
 8014368:	e0e5      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 801436a:	4b4c      	ldr	r3, [pc, #304]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801436c:	89db      	ldrh	r3, [r3, #14]
 801436e:	f003 0302 	and.w	r3, r3, #2
 8014372:	2b00      	cmp	r3, #0
 8014374:	d035      	beq.n	80143e2 <rfalNfcPollTechDetetection+0x1ba>
 8014376:	4b49      	ldr	r3, [pc, #292]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014378:	889b      	ldrh	r3, [r3, #4]
 801437a:	f003 0302 	and.w	r3, r3, #2
 801437e:	2b00      	cmp	r3, #0
 8014380:	d02f      	beq.n	80143e2 <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 8014382:	4b46      	ldr	r3, [pc, #280]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014384:	889b      	ldrh	r3, [r3, #4]
 8014386:	f023 0302 	bic.w	r3, r3, #2
 801438a:	b29a      	uxth	r2, r3
 801438c:	4b43      	ldr	r3, [pc, #268]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801438e:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 8014390:	f003 fe7e 	bl	8018090 <rfalNfcbPollerInitialize>
 8014394:	4603      	mov	r3, r0
 8014396:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801439a:	2b00      	cmp	r3, #0
 801439c:	d001      	beq.n	80143a2 <rfalNfcPollTechDetetection+0x17a>
 801439e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143a0:	e0c9      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 80143a2:	f005 ff87 	bl	801a2b4 <rfalFieldOnAndStartGT>
 80143a6:	4603      	mov	r3, r0
 80143a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80143aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d001      	beq.n	80143b4 <rfalNfcPollTechDetetection+0x18c>
 80143b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143b2:	e0c0      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 80143b4:	4b39      	ldr	r3, [pc, #228]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143b6:	7b1b      	ldrb	r3, [r3, #12]
 80143b8:	f107 0213 	add.w	r2, r7, #19
 80143bc:	f107 0114 	add.w	r1, r7, #20
 80143c0:	4618      	mov	r0, r3
 80143c2:	f003 ff77 	bl	80182b4 <rfalNfcbPollerTechnologyDetection>
 80143c6:	4603      	mov	r3, r0
 80143c8:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80143ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d106      	bne.n	80143de <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 80143d0:	4b32      	ldr	r3, [pc, #200]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143d2:	885b      	ldrh	r3, [r3, #2]
 80143d4:	f043 0302 	orr.w	r3, r3, #2
 80143d8:	b29a      	uxth	r2, r3
 80143da:	4b30      	ldr	r3, [pc, #192]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143dc:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 80143de:	2302      	movs	r3, #2
 80143e0:	e0a9      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 80143e2:	4b2e      	ldr	r3, [pc, #184]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143e4:	89db      	ldrh	r3, [r3, #14]
 80143e6:	f003 0304 	and.w	r3, r3, #4
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d031      	beq.n	8014452 <rfalNfcPollTechDetetection+0x22a>
 80143ee:	4b2b      	ldr	r3, [pc, #172]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143f0:	889b      	ldrh	r3, [r3, #4]
 80143f2:	f003 0304 	and.w	r3, r3, #4
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d02b      	beq.n	8014452 <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 80143fa:	4b28      	ldr	r3, [pc, #160]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 80143fc:	889b      	ldrh	r3, [r3, #4]
 80143fe:	f023 0304 	bic.w	r3, r3, #4
 8014402:	b29a      	uxth	r2, r3
 8014404:	4b25      	ldr	r3, [pc, #148]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014406:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8014408:	4b24      	ldr	r3, [pc, #144]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801440a:	7cdb      	ldrb	r3, [r3, #19]
 801440c:	4618      	mov	r0, r3
 801440e:	f004 fa13 	bl	8018838 <rfalNfcfPollerInitialize>
 8014412:	4603      	mov	r3, r0
 8014414:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014418:	2b00      	cmp	r3, #0
 801441a:	d001      	beq.n	8014420 <rfalNfcPollTechDetetection+0x1f8>
 801441c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801441e:	e08a      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8014420:	f005 ff48 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014424:	4603      	mov	r3, r0
 8014426:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801442a:	2b00      	cmp	r3, #0
 801442c:	d001      	beq.n	8014432 <rfalNfcPollTechDetetection+0x20a>
 801442e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014430:	e081      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 8014432:	f004 fa4f 	bl	80188d4 <rfalNfcfPollerCheckPresence>
 8014436:	4603      	mov	r3, r0
 8014438:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 801443a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801443c:	2b00      	cmp	r3, #0
 801443e:	d106      	bne.n	801444e <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 8014440:	4b16      	ldr	r3, [pc, #88]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014442:	885b      	ldrh	r3, [r3, #2]
 8014444:	f043 0304 	orr.w	r3, r3, #4
 8014448:	b29a      	uxth	r2, r3
 801444a:	4b14      	ldr	r3, [pc, #80]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801444c:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 801444e:	2302      	movs	r3, #2
 8014450:	e071      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 8014452:	4b12      	ldr	r3, [pc, #72]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014454:	89db      	ldrh	r3, [r3, #14]
 8014456:	f003 0308 	and.w	r3, r3, #8
 801445a:	2b00      	cmp	r3, #0
 801445c:	d036      	beq.n	80144cc <rfalNfcPollTechDetetection+0x2a4>
 801445e:	4b0f      	ldr	r3, [pc, #60]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014460:	889b      	ldrh	r3, [r3, #4]
 8014462:	f003 0308 	and.w	r3, r3, #8
 8014466:	2b00      	cmp	r3, #0
 8014468:	d030      	beq.n	80144cc <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 801446a:	4b0c      	ldr	r3, [pc, #48]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 801446c:	889b      	ldrh	r3, [r3, #4]
 801446e:	f023 0308 	bic.w	r3, r3, #8
 8014472:	b29a      	uxth	r2, r3
 8014474:	4b09      	ldr	r3, [pc, #36]	; (801449c <rfalNfcPollTechDetetection+0x274>)
 8014476:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 8014478:	f004 fd58 	bl	8018f2c <rfalNfcvPollerInitialize>
 801447c:	4603      	mov	r3, r0
 801447e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014482:	2b00      	cmp	r3, #0
 8014484:	d001      	beq.n	801448a <rfalNfcPollTechDetetection+0x262>
 8014486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014488:	e055      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 801448a:	f005 ff13 	bl	801a2b4 <rfalFieldOnAndStartGT>
 801448e:	4603      	mov	r3, r0
 8014490:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014494:	2b00      	cmp	r3, #0
 8014496:	d007      	beq.n	80144a8 <rfalNfcPollTechDetetection+0x280>
 8014498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801449a:	e04c      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
 801449c:	20003570 	.word	0x20003570
 80144a0:	00063510 	.word	0x00063510
 80144a4:	20003600 	.word	0x20003600
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 80144a8:	1d3b      	adds	r3, r7, #4
 80144aa:	4618      	mov	r0, r3
 80144ac:	f004 fd62 	bl	8018f74 <rfalNfcvPollerCheckPresence>
 80144b0:	4603      	mov	r3, r0
 80144b2:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80144b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d106      	bne.n	80144c8 <rfalNfcPollTechDetetection+0x2a0>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 80144ba:	4b21      	ldr	r3, [pc, #132]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144bc:	885b      	ldrh	r3, [r3, #2]
 80144be:	f043 0308 	orr.w	r3, r3, #8
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	4b1e      	ldr	r3, [pc, #120]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144c6:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 80144c8:	2302      	movs	r3, #2
 80144ca:	e034      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 80144cc:	4b1c      	ldr	r3, [pc, #112]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144ce:	89db      	ldrh	r3, [r3, #14]
 80144d0:	f003 0320 	and.w	r3, r3, #32
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d02d      	beq.n	8014534 <rfalNfcPollTechDetetection+0x30c>
 80144d8:	4b19      	ldr	r3, [pc, #100]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144da:	889b      	ldrh	r3, [r3, #4]
 80144dc:	f003 0320 	and.w	r3, r3, #32
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d027      	beq.n	8014534 <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80144e4:	4b16      	ldr	r3, [pc, #88]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144e6:	889b      	ldrh	r3, [r3, #4]
 80144e8:	f023 0320 	bic.w	r3, r3, #32
 80144ec:	b29a      	uxth	r2, r3
 80144ee:	4b14      	ldr	r3, [pc, #80]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 80144f0:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 80144f2:	f008 f9ac 	bl	801c84e <rfalSt25tbPollerInitialize>
 80144f6:	4603      	mov	r3, r0
 80144f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80144fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d001      	beq.n	8014504 <rfalNfcPollTechDetetection+0x2dc>
 8014500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014502:	e018      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8014504:	f005 fed6 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014508:	4603      	mov	r3, r0
 801450a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801450c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <rfalNfcPollTechDetetection+0x2ee>
 8014512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014514:	e00f      	b.n	8014536 <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 8014516:	2000      	movs	r0, #0
 8014518:	f008 f9a0 	bl	801c85c <rfalSt25tbPollerCheckPresence>
 801451c:	4603      	mov	r3, r0
 801451e:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8014520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014522:	2b00      	cmp	r3, #0
 8014524:	d106      	bne.n	8014534 <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 8014526:	4b06      	ldr	r3, [pc, #24]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 8014528:	885b      	ldrh	r3, [r3, #2]
 801452a:	f043 0320 	orr.w	r3, r3, #32
 801452e:	b29a      	uxth	r2, r3
 8014530:	4b03      	ldr	r3, [pc, #12]	; (8014540 <rfalNfcPollTechDetetection+0x318>)
 8014532:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3728      	adds	r7, #40	; 0x28
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20003570 	.word	0x20003570

08014544 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 8014544:	b5b0      	push	{r4, r5, r7, lr}
 8014546:	b09e      	sub	sp, #120	; 0x78
 8014548:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 801454a:	2300      	movs	r3, #0
 801454c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 8014550:	2300      	movs	r3, #0
 8014552:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 8014556:	2300      	movs	r3, #0
 8014558:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 801455c:	4bb5      	ldr	r3, [pc, #724]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801455e:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 8014562:	4bb4      	ldr	r3, [pc, #720]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014564:	7c9b      	ldrb	r3, [r3, #18]
 8014566:	429a      	cmp	r2, r3
 8014568:	d301      	bcc.n	801456e <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 801456a:	2300      	movs	r3, #0
 801456c:	e2b1      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 801456e:	4bb1      	ldr	r3, [pc, #708]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014570:	885b      	ldrh	r3, [r3, #2]
 8014572:	f003 0301 	and.w	r3, r3, #1
 8014576:	2b00      	cmp	r3, #0
 8014578:	f000 8084 	beq.w	8014684 <rfalNfcPollCollResolution+0x140>
 801457c:	4bad      	ldr	r3, [pc, #692]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801457e:	889b      	ldrh	r3, [r3, #4]
 8014580:	f003 0301 	and.w	r3, r3, #1
 8014584:	2b00      	cmp	r3, #0
 8014586:	d07d      	beq.n	8014684 <rfalNfcPollCollResolution+0x140>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8014588:	4baa      	ldr	r3, [pc, #680]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801458a:	889b      	ldrh	r3, [r3, #4]
 801458c:	f023 0301 	bic.w	r3, r3, #1
 8014590:	b29a      	uxth	r2, r3
 8014592:	4ba8      	ldr	r3, [pc, #672]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014594:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 8014596:	f003 f95f 	bl	8017858 <rfalNfcaPollerInitialize>
 801459a:	4603      	mov	r3, r0
 801459c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80145a0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d002      	beq.n	80145ae <rfalNfcPollCollResolution+0x6a>
 80145a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80145ac:	e291      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80145ae:	f005 fe81 	bl	801a2b4 <rfalFieldOnAndStartGT>
 80145b2:	4603      	mov	r3, r0
 80145b4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80145b8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d002      	beq.n	80145c6 <rfalNfcPollCollResolution+0x82>
 80145c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80145c4:	e285      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 80145c6:	4b9b      	ldr	r3, [pc, #620]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80145c8:	7b18      	ldrb	r0, [r3, #12]
 80145ca:	4b9a      	ldr	r3, [pc, #616]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80145cc:	7c9a      	ldrb	r2, [r3, #18]
 80145ce:	4b99      	ldr	r3, [pc, #612]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80145d0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80145d4:	1ad3      	subs	r3, r2, r3
 80145d6:	b2d9      	uxtb	r1, r3
 80145d8:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80145dc:	1d3a      	adds	r2, r7, #4
 80145de:	f003 fb76 	bl	8017cce <rfalNfcaPollerFullCollisionResolution>
 80145e2:	4603      	mov	r3, r0
 80145e4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80145e8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d147      	bne.n	8014680 <rfalNfcPollCollResolution+0x13c>
 80145f0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d043      	beq.n	8014680 <rfalNfcPollCollResolution+0x13c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80145f8:	2300      	movs	r3, #0
 80145fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80145fe:	e039      	b.n	8014674 <rfalNfcPollCollResolution+0x130>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8014600:	4b8c      	ldr	r3, [pc, #560]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014602:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014606:	4619      	mov	r1, r3
 8014608:	4a8a      	ldr	r2, [pc, #552]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801460a:	460b      	mov	r3, r1
 801460c:	011b      	lsls	r3, r3, #4
 801460e:	1a5b      	subs	r3, r3, r1
 8014610:	00db      	lsls	r3, r3, #3
 8014612:	4413      	add	r3, r2
 8014614:	3390      	adds	r3, #144	; 0x90
 8014616:	2200      	movs	r2, #0
 8014618:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 801461a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801461e:	4b85      	ldr	r3, [pc, #532]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014620:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014624:	4618      	mov	r0, r3
 8014626:	4983      	ldr	r1, [pc, #524]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014628:	4603      	mov	r3, r0
 801462a:	011b      	lsls	r3, r3, #4
 801462c:	1a1b      	subs	r3, r3, r0
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3390      	adds	r3, #144	; 0x90
 8014634:	2116      	movs	r1, #22
 8014636:	fb01 f202 	mul.w	r2, r1, r2
 801463a:	3278      	adds	r2, #120	; 0x78
 801463c:	443a      	add	r2, r7
 801463e:	3a74      	subs	r2, #116	; 0x74
 8014640:	3301      	adds	r3, #1
 8014642:	6811      	ldr	r1, [r2, #0]
 8014644:	6855      	ldr	r5, [r2, #4]
 8014646:	6894      	ldr	r4, [r2, #8]
 8014648:	68d0      	ldr	r0, [r2, #12]
 801464a:	6019      	str	r1, [r3, #0]
 801464c:	605d      	str	r5, [r3, #4]
 801464e:	609c      	str	r4, [r3, #8]
 8014650:	60d8      	str	r0, [r3, #12]
 8014652:	6911      	ldr	r1, [r2, #16]
 8014654:	6119      	str	r1, [r3, #16]
 8014656:	8a92      	ldrh	r2, [r2, #20]
 8014658:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 801465a:	4b76      	ldr	r3, [pc, #472]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801465c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014660:	3301      	adds	r3, #1
 8014662:	b2da      	uxtb	r2, r3
 8014664:	4b73      	ldr	r3, [pc, #460]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014666:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 801466a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801466e:	3301      	adds	r3, #1
 8014670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014674:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8014678:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801467c:	429a      	cmp	r2, r3
 801467e:	d3bf      	bcc.n	8014600 <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 8014680:	2302      	movs	r3, #2
 8014682:	e226      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 8014684:	4b6b      	ldr	r3, [pc, #428]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014686:	885b      	ldrh	r3, [r3, #2]
 8014688:	f003 0302 	and.w	r3, r3, #2
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 8084 	beq.w	801479a <rfalNfcPollCollResolution+0x256>
 8014692:	4b68      	ldr	r3, [pc, #416]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014694:	889b      	ldrh	r3, [r3, #4]
 8014696:	f003 0302 	and.w	r3, r3, #2
 801469a:	2b00      	cmp	r3, #0
 801469c:	d07d      	beq.n	801479a <rfalNfcPollCollResolution+0x256>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 801469e:	4b65      	ldr	r3, [pc, #404]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80146a0:	889b      	ldrh	r3, [r3, #4]
 80146a2:	f023 0302 	bic.w	r3, r3, #2
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	4b62      	ldr	r3, [pc, #392]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80146aa:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 80146ac:	f003 fcf0 	bl	8018090 <rfalNfcbPollerInitialize>
 80146b0:	4603      	mov	r3, r0
 80146b2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80146b6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d002      	beq.n	80146c4 <rfalNfcPollCollResolution+0x180>
 80146be:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80146c2:	e206      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80146c4:	f005 fdf6 	bl	801a2b4 <rfalFieldOnAndStartGT>
 80146c8:	4603      	mov	r3, r0
 80146ca:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80146ce:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d002      	beq.n	80146dc <rfalNfcPollCollResolution+0x198>
 80146d6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80146da:	e1fa      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 80146dc:	4b55      	ldr	r3, [pc, #340]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80146de:	7b18      	ldrb	r0, [r3, #12]
 80146e0:	4b54      	ldr	r3, [pc, #336]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80146e2:	7c9a      	ldrb	r2, [r3, #18]
 80146e4:	4b53      	ldr	r3, [pc, #332]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80146e6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	b2d9      	uxtb	r1, r3
 80146ee:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80146f2:	1d3a      	adds	r2, r7, #4
 80146f4:	f003 fdf0 	bl	80182d8 <rfalNfcbPollerCollisionResolution>
 80146f8:	4603      	mov	r3, r0
 80146fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80146fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014702:	2b00      	cmp	r3, #0
 8014704:	d147      	bne.n	8014796 <rfalNfcPollCollResolution+0x252>
 8014706:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801470a:	2b00      	cmp	r3, #0
 801470c:	d043      	beq.n	8014796 <rfalNfcPollCollResolution+0x252>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 801470e:	2300      	movs	r3, #0
 8014710:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014714:	e039      	b.n	801478a <rfalNfcPollCollResolution+0x246>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8014716:	4b47      	ldr	r3, [pc, #284]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014718:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801471c:	4619      	mov	r1, r3
 801471e:	4a45      	ldr	r2, [pc, #276]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014720:	460b      	mov	r3, r1
 8014722:	011b      	lsls	r3, r3, #4
 8014724:	1a5b      	subs	r3, r3, r1
 8014726:	00db      	lsls	r3, r3, #3
 8014728:	4413      	add	r3, r2
 801472a:	3390      	adds	r3, #144	; 0x90
 801472c:	2201      	movs	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8014730:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014734:	4b3f      	ldr	r3, [pc, #252]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014736:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801473a:	4618      	mov	r0, r3
 801473c:	493d      	ldr	r1, [pc, #244]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801473e:	4603      	mov	r3, r0
 8014740:	011b      	lsls	r3, r3, #4
 8014742:	1a1b      	subs	r3, r3, r0
 8014744:	00db      	lsls	r3, r3, #3
 8014746:	440b      	add	r3, r1
 8014748:	f103 0190 	add.w	r1, r3, #144	; 0x90
 801474c:	4613      	mov	r3, r2
 801474e:	011b      	lsls	r3, r3, #4
 8014750:	1a9b      	subs	r3, r3, r2
 8014752:	3378      	adds	r3, #120	; 0x78
 8014754:	443b      	add	r3, r7
 8014756:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 801475a:	1c4b      	adds	r3, r1, #1
 801475c:	6814      	ldr	r4, [r2, #0]
 801475e:	6850      	ldr	r0, [r2, #4]
 8014760:	6891      	ldr	r1, [r2, #8]
 8014762:	601c      	str	r4, [r3, #0]
 8014764:	6058      	str	r0, [r3, #4]
 8014766:	6099      	str	r1, [r3, #8]
 8014768:	8991      	ldrh	r1, [r2, #12]
 801476a:	7b92      	ldrb	r2, [r2, #14]
 801476c:	8199      	strh	r1, [r3, #12]
 801476e:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 8014770:	4b30      	ldr	r3, [pc, #192]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014772:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014776:	3301      	adds	r3, #1
 8014778:	b2da      	uxtb	r2, r3
 801477a:	4b2e      	ldr	r3, [pc, #184]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801477c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8014780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014784:	3301      	adds	r3, #1
 8014786:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801478a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801478e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014792:	429a      	cmp	r2, r3
 8014794:	d3bf      	bcc.n	8014716 <rfalNfcPollCollResolution+0x1d2>
            }
        }
        
        return ERR_BUSY;
 8014796:	2302      	movs	r3, #2
 8014798:	e19b      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 801479a:	4b26      	ldr	r3, [pc, #152]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 801479c:	885b      	ldrh	r3, [r3, #2]
 801479e:	f003 0304 	and.w	r3, r3, #4
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f000 808e 	beq.w	80148c4 <rfalNfcPollCollResolution+0x380>
 80147a8:	4b22      	ldr	r3, [pc, #136]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80147aa:	889b      	ldrh	r3, [r3, #4]
 80147ac:	f003 0304 	and.w	r3, r3, #4
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	f000 8087 	beq.w	80148c4 <rfalNfcPollCollResolution+0x380>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 80147b6:	4b1f      	ldr	r3, [pc, #124]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80147b8:	889b      	ldrh	r3, [r3, #4]
 80147ba:	f023 0304 	bic.w	r3, r3, #4
 80147be:	b29a      	uxth	r2, r3
 80147c0:	4b1c      	ldr	r3, [pc, #112]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80147c2:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 80147c4:	4b1b      	ldr	r3, [pc, #108]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80147c6:	7cdb      	ldrb	r3, [r3, #19]
 80147c8:	4618      	mov	r0, r3
 80147ca:	f004 f835 	bl	8018838 <rfalNfcfPollerInitialize>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80147d4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <rfalNfcPollCollResolution+0x29e>
 80147dc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80147e0:	e177      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 80147e2:	f005 fd67 	bl	801a2b4 <rfalFieldOnAndStartGT>
 80147e6:	4603      	mov	r3, r0
 80147e8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80147ec:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <rfalNfcPollCollResolution+0x2b6>
 80147f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80147f8:	e16b      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 80147fa:	4b0e      	ldr	r3, [pc, #56]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 80147fc:	7b18      	ldrb	r0, [r3, #12]
 80147fe:	4b0d      	ldr	r3, [pc, #52]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014800:	7c9a      	ldrb	r2, [r3, #18]
 8014802:	4b0c      	ldr	r3, [pc, #48]	; (8014834 <rfalNfcPollCollResolution+0x2f0>)
 8014804:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	b2d9      	uxtb	r1, r3
 801480c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8014810:	1d3a      	adds	r2, r7, #4
 8014812:	f004 f87f 	bl	8018914 <rfalNfcfPollerCollisionResolution>
 8014816:	4603      	mov	r3, r0
 8014818:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801481c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014820:	2b00      	cmp	r3, #0
 8014822:	d14d      	bne.n	80148c0 <rfalNfcPollCollResolution+0x37c>
 8014824:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8014828:	2b00      	cmp	r3, #0
 801482a:	d049      	beq.n	80148c0 <rfalNfcPollCollResolution+0x37c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801482c:	2300      	movs	r3, #0
 801482e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014832:	e03f      	b.n	80148b4 <rfalNfcPollCollResolution+0x370>
 8014834:	20003570 	.word	0x20003570
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8014838:	4ba8      	ldr	r3, [pc, #672]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 801483a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801483e:	4619      	mov	r1, r3
 8014840:	4aa6      	ldr	r2, [pc, #664]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014842:	460b      	mov	r3, r1
 8014844:	011b      	lsls	r3, r3, #4
 8014846:	1a5b      	subs	r3, r3, r1
 8014848:	00db      	lsls	r3, r3, #3
 801484a:	4413      	add	r3, r2
 801484c:	3390      	adds	r3, #144	; 0x90
 801484e:	2202      	movs	r2, #2
 8014850:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8014852:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014856:	4ba1      	ldr	r3, [pc, #644]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014858:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801485c:	4618      	mov	r0, r3
 801485e:	499f      	ldr	r1, [pc, #636]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014860:	4603      	mov	r3, r0
 8014862:	011b      	lsls	r3, r3, #4
 8014864:	1a1b      	subs	r3, r3, r0
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	440b      	add	r3, r1
 801486a:	f103 0190 	add.w	r1, r3, #144	; 0x90
 801486e:	4613      	mov	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	4413      	add	r3, r2
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	4413      	add	r3, r2
 8014878:	3378      	adds	r3, #120	; 0x78
 801487a:	443b      	add	r3, r7
 801487c:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8014880:	1c4b      	adds	r3, r1, #1
 8014882:	6815      	ldr	r5, [r2, #0]
 8014884:	6854      	ldr	r4, [r2, #4]
 8014886:	6890      	ldr	r0, [r2, #8]
 8014888:	68d1      	ldr	r1, [r2, #12]
 801488a:	601d      	str	r5, [r3, #0]
 801488c:	605c      	str	r4, [r3, #4]
 801488e:	6098      	str	r0, [r3, #8]
 8014890:	60d9      	str	r1, [r3, #12]
 8014892:	8a11      	ldrh	r1, [r2, #16]
 8014894:	7c92      	ldrb	r2, [r2, #18]
 8014896:	8219      	strh	r1, [r3, #16]
 8014898:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 801489a:	4b90      	ldr	r3, [pc, #576]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 801489c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80148a0:	3301      	adds	r3, #1
 80148a2:	b2da      	uxtb	r2, r3
 80148a4:	4b8d      	ldr	r3, [pc, #564]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80148a6:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80148aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80148ae:	3301      	adds	r3, #1
 80148b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80148b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80148b8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80148bc:	429a      	cmp	r2, r3
 80148be:	d3bb      	bcc.n	8014838 <rfalNfcPollCollResolution+0x2f4>
            }
        }
        
        return ERR_BUSY;
 80148c0:	2302      	movs	r3, #2
 80148c2:	e106      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 80148c4:	4b85      	ldr	r3, [pc, #532]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80148c6:	885b      	ldrh	r3, [r3, #2]
 80148c8:	f003 0308 	and.w	r3, r3, #8
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 8083 	beq.w	80149d8 <rfalNfcPollCollResolution+0x494>
 80148d2:	4b82      	ldr	r3, [pc, #520]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80148d4:	889b      	ldrh	r3, [r3, #4]
 80148d6:	f003 0308 	and.w	r3, r3, #8
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d07c      	beq.n	80149d8 <rfalNfcPollCollResolution+0x494>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80148de:	4b7f      	ldr	r3, [pc, #508]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80148e0:	889b      	ldrh	r3, [r3, #4]
 80148e2:	f023 0308 	bic.w	r3, r3, #8
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	4b7c      	ldr	r3, [pc, #496]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80148ea:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 80148ec:	f004 fb1e 	bl	8018f2c <rfalNfcvPollerInitialize>
 80148f0:	4603      	mov	r3, r0
 80148f2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80148f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d002      	beq.n	8014904 <rfalNfcPollCollResolution+0x3c0>
 80148fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014902:	e0e6      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8014904:	f005 fcd6 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014908:	4603      	mov	r3, r0
 801490a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801490e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014912:	2b00      	cmp	r3, #0
 8014914:	d002      	beq.n	801491c <rfalNfcPollCollResolution+0x3d8>
 8014916:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801491a:	e0da      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 801491c:	4b6f      	ldr	r3, [pc, #444]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 801491e:	7c9a      	ldrb	r2, [r3, #18]
 8014920:	4b6e      	ldr	r3, [pc, #440]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014922:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014926:	1ad3      	subs	r3, r2, r3
 8014928:	b2d9      	uxtb	r1, r3
 801492a:	f107 0373 	add.w	r3, r7, #115	; 0x73
 801492e:	1d3a      	adds	r2, r7, #4
 8014930:	2000      	movs	r0, #0
 8014932:	f004 fba3 	bl	801907c <rfalNfcvPollerCollisionResolution>
 8014936:	4603      	mov	r3, r0
 8014938:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801493c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014940:	2b00      	cmp	r3, #0
 8014942:	d147      	bne.n	80149d4 <rfalNfcPollCollResolution+0x490>
 8014944:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8014948:	2b00      	cmp	r3, #0
 801494a:	d043      	beq.n	80149d4 <rfalNfcPollCollResolution+0x490>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801494c:	2300      	movs	r3, #0
 801494e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014952:	e039      	b.n	80149c8 <rfalNfcPollCollResolution+0x484>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8014954:	4b61      	ldr	r3, [pc, #388]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014956:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 801495a:	4619      	mov	r1, r3
 801495c:	4a5f      	ldr	r2, [pc, #380]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 801495e:	460b      	mov	r3, r1
 8014960:	011b      	lsls	r3, r3, #4
 8014962:	1a5b      	subs	r3, r3, r1
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	4413      	add	r3, r2
 8014968:	3390      	adds	r3, #144	; 0x90
 801496a:	2203      	movs	r2, #3
 801496c:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 801496e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014972:	4b5a      	ldr	r3, [pc, #360]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014974:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014978:	4618      	mov	r0, r3
 801497a:	4958      	ldr	r1, [pc, #352]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 801497c:	4603      	mov	r3, r0
 801497e:	011b      	lsls	r3, r3, #4
 8014980:	1a1b      	subs	r3, r3, r0
 8014982:	00db      	lsls	r3, r3, #3
 8014984:	440b      	add	r3, r1
 8014986:	f103 0190 	add.w	r1, r3, #144	; 0x90
 801498a:	4613      	mov	r3, r2
 801498c:	005b      	lsls	r3, r3, #1
 801498e:	4413      	add	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4413      	add	r3, r2
 8014994:	3378      	adds	r3, #120	; 0x78
 8014996:	443b      	add	r3, r7
 8014998:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 801499c:	1c4b      	adds	r3, r1, #1
 801499e:	6814      	ldr	r4, [r2, #0]
 80149a0:	6850      	ldr	r0, [r2, #4]
 80149a2:	6891      	ldr	r1, [r2, #8]
 80149a4:	601c      	str	r4, [r3, #0]
 80149a6:	6058      	str	r0, [r3, #4]
 80149a8:	6099      	str	r1, [r3, #8]
 80149aa:	7b12      	ldrb	r2, [r2, #12]
 80149ac:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 80149ae:	4b4b      	ldr	r3, [pc, #300]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149b0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80149b4:	3301      	adds	r3, #1
 80149b6:	b2da      	uxtb	r2, r3
 80149b8:	4b48      	ldr	r3, [pc, #288]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149ba:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80149be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80149c2:	3301      	adds	r3, #1
 80149c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80149c8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80149cc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d3bf      	bcc.n	8014954 <rfalNfcPollCollResolution+0x410>
            }
        }
        
        return ERR_BUSY;
 80149d4:	2302      	movs	r3, #2
 80149d6:	e07c      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 80149d8:	4b40      	ldr	r3, [pc, #256]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149da:	885b      	ldrh	r3, [r3, #2]
 80149dc:	f003 0320 	and.w	r3, r3, #32
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d075      	beq.n	8014ad0 <rfalNfcPollCollResolution+0x58c>
 80149e4:	4b3d      	ldr	r3, [pc, #244]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149e6:	889b      	ldrh	r3, [r3, #4]
 80149e8:	f003 0320 	and.w	r3, r3, #32
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d06f      	beq.n	8014ad0 <rfalNfcPollCollResolution+0x58c>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80149f0:	4b3a      	ldr	r3, [pc, #232]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149f2:	889b      	ldrh	r3, [r3, #4]
 80149f4:	f023 0320 	bic.w	r3, r3, #32
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	4b38      	ldr	r3, [pc, #224]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 80149fc:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 80149fe:	f007 ff26 	bl	801c84e <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8014a02:	f005 fc57 	bl	801a2b4 <rfalFieldOnAndStartGT>
 8014a06:	4603      	mov	r3, r0
 8014a08:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8014a0c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <rfalNfcPollCollResolution+0x4d6>
 8014a14:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014a18:	e05b      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8014a1a:	4b30      	ldr	r3, [pc, #192]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a1c:	7c9a      	ldrb	r2, [r3, #18]
 8014a1e:	4b2f      	ldr	r3, [pc, #188]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a20:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8014a2c:	1d39      	adds	r1, r7, #4
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f008 f80a 	bl	801ca48 <rfalSt25tbPollerCollisionResolution>
 8014a34:	4603      	mov	r3, r0
 8014a36:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8014a3a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d144      	bne.n	8014acc <rfalNfcPollCollResolution+0x588>
 8014a42:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d040      	beq.n	8014acc <rfalNfcPollCollResolution+0x588>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014a50:	e036      	b.n	8014ac0 <rfalNfcPollCollResolution+0x57c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8014a52:	4b22      	ldr	r3, [pc, #136]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a54:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014a58:	4619      	mov	r1, r3
 8014a5a:	4a20      	ldr	r2, [pc, #128]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	011b      	lsls	r3, r3, #4
 8014a60:	1a5b      	subs	r3, r3, r1
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	4413      	add	r3, r2
 8014a66:	3390      	adds	r3, #144	; 0x90
 8014a68:	2204      	movs	r2, #4
 8014a6a:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8014a6c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014a70:	4b1a      	ldr	r3, [pc, #104]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a72:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014a76:	4618      	mov	r0, r3
 8014a78:	4918      	ldr	r1, [pc, #96]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	011b      	lsls	r3, r3, #4
 8014a7e:	1a1b      	subs	r3, r3, r0
 8014a80:	00db      	lsls	r3, r3, #3
 8014a82:	440b      	add	r3, r1
 8014a84:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8014a88:	4613      	mov	r3, r2
 8014a8a:	009b      	lsls	r3, r3, #2
 8014a8c:	4413      	add	r3, r2
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	3378      	adds	r3, #120	; 0x78
 8014a92:	443b      	add	r3, r7
 8014a94:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8014a98:	1c4b      	adds	r3, r1, #1
 8014a9a:	6810      	ldr	r0, [r2, #0]
 8014a9c:	6851      	ldr	r1, [r2, #4]
 8014a9e:	6018      	str	r0, [r3, #0]
 8014aa0:	6059      	str	r1, [r3, #4]
 8014aa2:	8912      	ldrh	r2, [r2, #8]
 8014aa4:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8014aa6:	4b0d      	ldr	r3, [pc, #52]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014aa8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014aac:	3301      	adds	r3, #1
 8014aae:	b2da      	uxtb	r2, r3
 8014ab0:	4b0a      	ldr	r3, [pc, #40]	; (8014adc <rfalNfcPollCollResolution+0x598>)
 8014ab2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8014ab6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014aba:	3301      	adds	r3, #1
 8014abc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014ac0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8014ac4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d3c2      	bcc.n	8014a52 <rfalNfcPollCollResolution+0x50e>
            }
        }
        
        return ERR_BUSY;
 8014acc:	2302      	movs	r3, #2
 8014ace:	e000      	b.n	8014ad2 <rfalNfcPollCollResolution+0x58e>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 8014ad0:	2300      	movs	r3, #0
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3778      	adds	r7, #120	; 0x78
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8014ada:	bf00      	nop
 8014adc:	20003570 	.word	0x20003570

08014ae0 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b08e      	sub	sp, #56	; 0x38
 8014ae4:	af04      	add	r7, sp, #16
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 8014aea:	2300      	movs	r3, #0
 8014aec:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 8014aee:	4ba6      	ldr	r3, [pc, #664]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014af0:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8014af4:	79fa      	ldrb	r2, [r7, #7]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d901      	bls.n	8014afe <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 8014afa:	2321      	movs	r3, #33	; 0x21
 8014afc:	e29c      	b.n	8015038 <rfalNfcPollActivation+0x558>
    }
    
    switch( gNfcDev.devList[devIt].type )
 8014afe:	79fa      	ldrb	r2, [r7, #7]
 8014b00:	49a1      	ldr	r1, [pc, #644]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014b02:	4613      	mov	r3, r2
 8014b04:	011b      	lsls	r3, r3, #4
 8014b06:	1a9b      	subs	r3, r3, r2
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	3390      	adds	r3, #144	; 0x90
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	2b05      	cmp	r3, #5
 8014b12:	f200 8284 	bhi.w	801501e <rfalNfcPollActivation+0x53e>
 8014b16:	a201      	add	r2, pc, #4	; (adr r2, 8014b1c <rfalNfcPollActivation+0x3c>)
 8014b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b1c:	08014b6f 	.word	0x08014b6f
 8014b20:	08014d8d 	.word	0x08014d8d
 8014b24:	08014e81 	.word	0x08014e81
 8014b28:	08014f7b 	.word	0x08014f7b
 8014b2c:	08014fcd 	.word	0x08014fcd
 8014b30:	08014b35 	.word	0x08014b35
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8014b34:	79f9      	ldrb	r1, [r7, #7]
 8014b36:	79fa      	ldrb	r2, [r7, #7]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	011b      	lsls	r3, r3, #4
 8014b3c:	1a5b      	subs	r3, r3, r1
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	33b0      	adds	r3, #176	; 0xb0
 8014b42:	4991      	ldr	r1, [pc, #580]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014b44:	440b      	add	r3, r1
 8014b46:	1c99      	adds	r1, r3, #2
 8014b48:	488f      	ldr	r0, [pc, #572]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	011b      	lsls	r3, r3, #4
 8014b4e:	1a9b      	subs	r3, r3, r2
 8014b50:	00db      	lsls	r3, r3, #3
 8014b52:	4403      	add	r3, r0
 8014b54:	33a8      	adds	r3, #168	; 0xa8
 8014b56:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8014b58:	79fa      	ldrb	r2, [r7, #7]
 8014b5a:	498b      	ldr	r1, [pc, #556]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	011b      	lsls	r3, r3, #4
 8014b60:	1a9b      	subs	r3, r3, r2
 8014b62:	00db      	lsls	r3, r3, #3
 8014b64:	440b      	add	r3, r1
 8014b66:	33ac      	adds	r3, #172	; 0xac
 8014b68:	220a      	movs	r2, #10
 8014b6a:	701a      	strb	r2, [r3, #0]
            break;
 8014b6c:	e259      	b.n	8015022 <rfalNfcPollActivation+0x542>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8014b6e:	f002 fe73 	bl	8017858 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 8014b72:	79fa      	ldrb	r2, [r7, #7]
 8014b74:	4984      	ldr	r1, [pc, #528]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014b76:	4613      	mov	r3, r2
 8014b78:	011b      	lsls	r3, r3, #4
 8014b7a:	1a9b      	subs	r3, r3, r2
 8014b7c:	00db      	lsls	r3, r3, #3
 8014b7e:	440b      	add	r3, r1
 8014b80:	33a6      	adds	r3, #166	; 0xa6
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d02a      	beq.n	8014bde <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8014b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	2052      	movs	r0, #82	; 0x52
 8014b90:	f002 fe86 	bl	80178a0 <rfalNfcaPollerCheckPresence>
 8014b94:	4603      	mov	r3, r0
 8014b96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d001      	beq.n	8014ba2 <rfalNfcPollActivation+0xc2>
 8014b9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014ba0:	e24a      	b.n	8015038 <rfalNfcPollActivation+0x558>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 8014ba2:	79fa      	ldrb	r2, [r7, #7]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	011b      	lsls	r3, r3, #4
 8014ba8:	1a9b      	subs	r3, r3, r2
 8014baa:	00db      	lsls	r3, r3, #3
 8014bac:	3390      	adds	r3, #144	; 0x90
 8014bae:	4a76      	ldr	r2, [pc, #472]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014bb0:	4413      	add	r3, r2
 8014bb2:	1d98      	adds	r0, r3, #6
 8014bb4:	79fa      	ldrb	r2, [r7, #7]
 8014bb6:	4974      	ldr	r1, [pc, #464]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014bb8:	4613      	mov	r3, r2
 8014bba:	011b      	lsls	r3, r3, #4
 8014bbc:	1a9b      	subs	r3, r3, r2
 8014bbe:	00db      	lsls	r3, r3, #3
 8014bc0:	440b      	add	r3, r1
 8014bc2:	3395      	adds	r3, #149	; 0x95
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	f107 0220 	add.w	r2, r7, #32
 8014bca:	4619      	mov	r1, r3
 8014bcc:	f003 f99a 	bl	8017f04 <rfalNfcaPollerSelect>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d001      	beq.n	8014bde <rfalNfcPollActivation+0xfe>
 8014bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014bdc:	e22c      	b.n	8015038 <rfalNfcPollActivation+0x558>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8014bde:	79f9      	ldrb	r1, [r7, #7]
 8014be0:	79fa      	ldrb	r2, [r7, #7]
 8014be2:	460b      	mov	r3, r1
 8014be4:	011b      	lsls	r3, r3, #4
 8014be6:	1a5b      	subs	r3, r3, r1
 8014be8:	00db      	lsls	r3, r3, #3
 8014bea:	3390      	adds	r3, #144	; 0x90
 8014bec:	4966      	ldr	r1, [pc, #408]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014bee:	440b      	add	r3, r1
 8014bf0:	1d99      	adds	r1, r3, #6
 8014bf2:	4865      	ldr	r0, [pc, #404]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	011b      	lsls	r3, r3, #4
 8014bf8:	1a9b      	subs	r3, r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	4403      	add	r3, r0
 8014bfe:	33a8      	adds	r3, #168	; 0xa8
 8014c00:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8014c02:	79f9      	ldrb	r1, [r7, #7]
 8014c04:	79fa      	ldrb	r2, [r7, #7]
 8014c06:	4860      	ldr	r0, [pc, #384]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c08:	460b      	mov	r3, r1
 8014c0a:	011b      	lsls	r3, r3, #4
 8014c0c:	1a5b      	subs	r3, r3, r1
 8014c0e:	00db      	lsls	r3, r3, #3
 8014c10:	4403      	add	r3, r0
 8014c12:	3395      	adds	r3, #149	; 0x95
 8014c14:	7818      	ldrb	r0, [r3, #0]
 8014c16:	495c      	ldr	r1, [pc, #368]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c18:	4613      	mov	r3, r2
 8014c1a:	011b      	lsls	r3, r3, #4
 8014c1c:	1a9b      	subs	r3, r3, r2
 8014c1e:	00db      	lsls	r3, r3, #3
 8014c20:	440b      	add	r3, r1
 8014c22:	33ac      	adds	r3, #172	; 0xac
 8014c24:	4602      	mov	r2, r0
 8014c26:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8014c28:	79fa      	ldrb	r2, [r7, #7]
 8014c2a:	4957      	ldr	r1, [pc, #348]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	011b      	lsls	r3, r3, #4
 8014c30:	1a9b      	subs	r3, r3, r2
 8014c32:	00db      	lsls	r3, r3, #3
 8014c34:	440b      	add	r3, r1
 8014c36:	3391      	adds	r3, #145	; 0x91
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	2b60      	cmp	r3, #96	; 0x60
 8014c3c:	d065      	beq.n	8014d0a <rfalNfcPollActivation+0x22a>
 8014c3e:	2b60      	cmp	r3, #96	; 0x60
 8014c40:	f300 809e 	bgt.w	8014d80 <rfalNfcPollActivation+0x2a0>
 8014c44:	2b40      	cmp	r3, #64	; 0x40
 8014c46:	d060      	beq.n	8014d0a <rfalNfcPollActivation+0x22a>
 8014c48:	2b40      	cmp	r3, #64	; 0x40
 8014c4a:	f300 8099 	bgt.w	8014d80 <rfalNfcPollActivation+0x2a0>
 8014c4e:	2b20      	cmp	r3, #32
 8014c50:	d03a      	beq.n	8014cc8 <rfalNfcPollActivation+0x1e8>
 8014c52:	2b20      	cmp	r3, #32
 8014c54:	f300 8094 	bgt.w	8014d80 <rfalNfcPollActivation+0x2a0>
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d02a      	beq.n	8014cb2 <rfalNfcPollActivation+0x1d2>
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	f040 808f 	bne.w	8014d80 <rfalNfcPollActivation+0x2a0>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8014c62:	79f9      	ldrb	r1, [r7, #7]
 8014c64:	79fa      	ldrb	r2, [r7, #7]
 8014c66:	460b      	mov	r3, r1
 8014c68:	011b      	lsls	r3, r3, #4
 8014c6a:	1a5b      	subs	r3, r3, r1
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	3398      	adds	r3, #152	; 0x98
 8014c70:	4945      	ldr	r1, [pc, #276]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c72:	440b      	add	r3, r1
 8014c74:	f103 010a 	add.w	r1, r3, #10
 8014c78:	4843      	ldr	r0, [pc, #268]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	011b      	lsls	r3, r3, #4
 8014c7e:	1a9b      	subs	r3, r3, r2
 8014c80:	00db      	lsls	r3, r3, #3
 8014c82:	4403      	add	r3, r0
 8014c84:	33a8      	adds	r3, #168	; 0xa8
 8014c86:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8014c88:	79fa      	ldrb	r2, [r7, #7]
 8014c8a:	493f      	ldr	r1, [pc, #252]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	011b      	lsls	r3, r3, #4
 8014c90:	1a9b      	subs	r3, r3, r2
 8014c92:	00db      	lsls	r3, r3, #3
 8014c94:	440b      	add	r3, r1
 8014c96:	33ac      	adds	r3, #172	; 0xac
 8014c98:	2204      	movs	r2, #4
 8014c9a:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8014c9c:	79fa      	ldrb	r2, [r7, #7]
 8014c9e:	493a      	ldr	r1, [pc, #232]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	011b      	lsls	r3, r3, #4
 8014ca4:	1a9b      	subs	r3, r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	33ad      	adds	r3, #173	; 0xad
 8014cac:	2200      	movs	r2, #0
 8014cae:	701a      	strb	r2, [r3, #0]
                    break;
 8014cb0:	e068      	b.n	8014d84 <rfalNfcPollActivation+0x2a4>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8014cb2:	79fa      	ldrb	r2, [r7, #7]
 8014cb4:	4934      	ldr	r1, [pc, #208]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	011b      	lsls	r3, r3, #4
 8014cba:	1a9b      	subs	r3, r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	440b      	add	r3, r1
 8014cc0:	33ad      	adds	r3, #173	; 0xad
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	701a      	strb	r2, [r3, #0]
                    break;
 8014cc6:	e05d      	b.n	8014d84 <rfalNfcPollActivation+0x2a4>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8014cc8:	f7fd fc06 	bl	80124d8 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8014ccc:	79fa      	ldrb	r2, [r7, #7]
 8014cce:	4613      	mov	r3, r2
 8014cd0:	011b      	lsls	r3, r3, #4
 8014cd2:	1a9b      	subs	r3, r3, r2
 8014cd4:	00db      	lsls	r3, r3, #3
 8014cd6:	33b0      	adds	r3, #176	; 0xb0
 8014cd8:	4a2b      	ldr	r2, [pc, #172]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014cda:	4413      	add	r3, r2
 8014cdc:	2202      	movs	r2, #2
 8014cde:	2100      	movs	r1, #0
 8014ce0:	2008      	movs	r0, #8
 8014ce2:	f7fe f9a7 	bl	8013034 <rfalIsoDepPollAHandleActivation>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d001      	beq.n	8014cf4 <rfalNfcPollActivation+0x214>
 8014cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014cf2:	e1a1      	b.n	8015038 <rfalNfcPollActivation+0x558>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8014cf4:	79fa      	ldrb	r2, [r7, #7]
 8014cf6:	4924      	ldr	r1, [pc, #144]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	011b      	lsls	r3, r3, #4
 8014cfc:	1a9b      	subs	r3, r3, r2
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	440b      	add	r3, r1
 8014d02:	33ad      	adds	r3, #173	; 0xad
 8014d04:	2201      	movs	r2, #1
 8014d06:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8014d08:	e03c      	b.n	8014d84 <rfalNfcPollActivation+0x2a4>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8014d0a:	79fa      	ldrb	r2, [r7, #7]
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	011b      	lsls	r3, r3, #4
 8014d10:	1a9b      	subs	r3, r3, r2
 8014d12:	00db      	lsls	r3, r3, #3
 8014d14:	3390      	adds	r3, #144	; 0x90
 8014d16:	4a1c      	ldr	r2, [pc, #112]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014d18:	1898      	adds	r0, r3, r2
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	2100      	movs	r1, #0
 8014d20:	f000 fae4 	bl	80152ec <rfalNfcNfcDepActivate>
 8014d24:	4603      	mov	r3, r0
 8014d26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <rfalNfcPollActivation+0x252>
 8014d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d30:	e182      	b.n	8015038 <rfalNfcPollActivation+0x558>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8014d32:	79f9      	ldrb	r1, [r7, #7]
 8014d34:	79fa      	ldrb	r2, [r7, #7]
 8014d36:	460b      	mov	r3, r1
 8014d38:	011b      	lsls	r3, r3, #4
 8014d3a:	1a5b      	subs	r3, r3, r1
 8014d3c:	00db      	lsls	r3, r3, #3
 8014d3e:	33b0      	adds	r3, #176	; 0xb0
 8014d40:	4911      	ldr	r1, [pc, #68]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014d42:	440b      	add	r3, r1
 8014d44:	1c99      	adds	r1, r3, #2
 8014d46:	4810      	ldr	r0, [pc, #64]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	011b      	lsls	r3, r3, #4
 8014d4c:	1a9b      	subs	r3, r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	4403      	add	r3, r0
 8014d52:	33a8      	adds	r3, #168	; 0xa8
 8014d54:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8014d56:	79fa      	ldrb	r2, [r7, #7]
 8014d58:	490b      	ldr	r1, [pc, #44]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014d5a:	4613      	mov	r3, r2
 8014d5c:	011b      	lsls	r3, r3, #4
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	00db      	lsls	r3, r3, #3
 8014d62:	440b      	add	r3, r1
 8014d64:	33ac      	adds	r3, #172	; 0xac
 8014d66:	220a      	movs	r2, #10
 8014d68:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8014d6a:	79fa      	ldrb	r2, [r7, #7]
 8014d6c:	4906      	ldr	r1, [pc, #24]	; (8014d88 <rfalNfcPollActivation+0x2a8>)
 8014d6e:	4613      	mov	r3, r2
 8014d70:	011b      	lsls	r3, r3, #4
 8014d72:	1a9b      	subs	r3, r3, r2
 8014d74:	00db      	lsls	r3, r3, #3
 8014d76:	440b      	add	r3, r1
 8014d78:	33ad      	adds	r3, #173	; 0xad
 8014d7a:	2202      	movs	r2, #2
 8014d7c:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8014d7e:	e001      	b.n	8014d84 <rfalNfcPollActivation+0x2a4>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8014d80:	2321      	movs	r3, #33	; 0x21
 8014d82:	e159      	b.n	8015038 <rfalNfcPollActivation+0x558>
            }
            break;
 8014d84:	e14d      	b.n	8015022 <rfalNfcPollActivation+0x542>
 8014d86:	bf00      	nop
 8014d88:	20003570 	.word	0x20003570
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8014d8c:	f003 f980 	bl	8018090 <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8014d90:	79fa      	ldrb	r2, [r7, #7]
 8014d92:	49ab      	ldr	r1, [pc, #684]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014d94:	4613      	mov	r3, r2
 8014d96:	011b      	lsls	r3, r3, #4
 8014d98:	1a9b      	subs	r3, r3, r2
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	440b      	add	r3, r1
 8014d9e:	339f      	adds	r3, #159	; 0x9f
 8014da0:	781b      	ldrb	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d007      	beq.n	8014db6 <rfalNfcPollActivation+0x2d6>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8014da6:	f107 030f 	add.w	r3, r7, #15
 8014daa:	f107 0210 	add.w	r2, r7, #16
 8014dae:	2100      	movs	r1, #0
 8014db0:	2008      	movs	r0, #8
 8014db2:	f003 f999 	bl	80180e8 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8014db6:	79f9      	ldrb	r1, [r7, #7]
 8014db8:	79fa      	ldrb	r2, [r7, #7]
 8014dba:	460b      	mov	r3, r1
 8014dbc:	011b      	lsls	r3, r3, #4
 8014dbe:	1a5b      	subs	r3, r3, r1
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	3390      	adds	r3, #144	; 0x90
 8014dc4:	499e      	ldr	r1, [pc, #632]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014dc6:	440b      	add	r3, r1
 8014dc8:	1cd9      	adds	r1, r3, #3
 8014dca:	489d      	ldr	r0, [pc, #628]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014dcc:	4613      	mov	r3, r2
 8014dce:	011b      	lsls	r3, r3, #4
 8014dd0:	1a9b      	subs	r3, r3, r2
 8014dd2:	00db      	lsls	r3, r3, #3
 8014dd4:	4403      	add	r3, r0
 8014dd6:	33a8      	adds	r3, #168	; 0xa8
 8014dd8:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8014dda:	79fa      	ldrb	r2, [r7, #7]
 8014ddc:	4998      	ldr	r1, [pc, #608]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014dde:	4613      	mov	r3, r2
 8014de0:	011b      	lsls	r3, r3, #4
 8014de2:	1a9b      	subs	r3, r3, r2
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	440b      	add	r3, r1
 8014de8:	33ac      	adds	r3, #172	; 0xac
 8014dea:	2204      	movs	r2, #4
 8014dec:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8014dee:	79fa      	ldrb	r2, [r7, #7]
 8014df0:	4993      	ldr	r1, [pc, #588]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014df2:	4613      	mov	r3, r2
 8014df4:	011b      	lsls	r3, r3, #4
 8014df6:	1a9b      	subs	r3, r3, r2
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	440b      	add	r3, r1
 8014dfc:	339c      	adds	r3, #156	; 0x9c
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	f003 0301 	and.w	r3, r3, #1
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d030      	beq.n	8014e6a <rfalNfcPollActivation+0x38a>
            {
                rfalIsoDepInitialize();
 8014e08:	f7fd fb66 	bl	80124d8 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8014e0c:	79fa      	ldrb	r2, [r7, #7]
 8014e0e:	4613      	mov	r3, r2
 8014e10:	011b      	lsls	r3, r3, #4
 8014e12:	1a9b      	subs	r3, r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	3390      	adds	r3, #144	; 0x90
 8014e18:	4a89      	ldr	r2, [pc, #548]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e1a:	4413      	add	r3, r2
 8014e1c:	1c59      	adds	r1, r3, #1
 8014e1e:	79fa      	ldrb	r2, [r7, #7]
 8014e20:	4613      	mov	r3, r2
 8014e22:	011b      	lsls	r3, r3, #4
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	33b0      	adds	r3, #176	; 0xb0
 8014e2a:	4a85      	ldr	r2, [pc, #532]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e2c:	4413      	add	r3, r2
 8014e2e:	9303      	str	r3, [sp, #12]
 8014e30:	2300      	movs	r3, #0
 8014e32:	9302      	str	r3, [sp, #8]
 8014e34:	2300      	movs	r3, #0
 8014e36:	9301      	str	r3, [sp, #4]
 8014e38:	9100      	str	r1, [sp, #0]
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	2202      	movs	r2, #2
 8014e3e:	2100      	movs	r1, #0
 8014e40:	2008      	movs	r0, #8
 8014e42:	f7fe fa51 	bl	80132e8 <rfalIsoDepPollBHandleActivation>
 8014e46:	4603      	mov	r3, r0
 8014e48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d001      	beq.n	8014e54 <rfalNfcPollActivation+0x374>
 8014e50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e52:	e0f1      	b.n	8015038 <rfalNfcPollActivation+0x558>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8014e54:	79fa      	ldrb	r2, [r7, #7]
 8014e56:	497a      	ldr	r1, [pc, #488]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e58:	4613      	mov	r3, r2
 8014e5a:	011b      	lsls	r3, r3, #4
 8014e5c:	1a9b      	subs	r3, r3, r2
 8014e5e:	00db      	lsls	r3, r3, #3
 8014e60:	440b      	add	r3, r1
 8014e62:	33ad      	adds	r3, #173	; 0xad
 8014e64:	2201      	movs	r2, #1
 8014e66:	701a      	strb	r2, [r3, #0]
                break;
 8014e68:	e0db      	b.n	8015022 <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8014e6a:	79fa      	ldrb	r2, [r7, #7]
 8014e6c:	4974      	ldr	r1, [pc, #464]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e6e:	4613      	mov	r3, r2
 8014e70:	011b      	lsls	r3, r3, #4
 8014e72:	1a9b      	subs	r3, r3, r2
 8014e74:	00db      	lsls	r3, r3, #3
 8014e76:	440b      	add	r3, r1
 8014e78:	33ad      	adds	r3, #173	; 0xad
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	701a      	strb	r2, [r3, #0]
            break;
 8014e7e:	e0d0      	b.n	8015022 <rfalNfcPollActivation+0x542>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8014e80:	4b6f      	ldr	r3, [pc, #444]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e82:	7cdb      	ldrb	r3, [r3, #19]
 8014e84:	4618      	mov	r0, r3
 8014e86:	f003 fcd7 	bl	8018838 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8014e8a:	79fa      	ldrb	r2, [r7, #7]
 8014e8c:	496c      	ldr	r1, [pc, #432]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014e8e:	4613      	mov	r3, r2
 8014e90:	011b      	lsls	r3, r3, #4
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	00db      	lsls	r3, r3, #3
 8014e96:	440b      	add	r3, r1
 8014e98:	3393      	adds	r3, #147	; 0x93
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d145      	bne.n	8014f2c <rfalNfcPollActivation+0x44c>
 8014ea0:	79fa      	ldrb	r2, [r7, #7]
 8014ea2:	4967      	ldr	r1, [pc, #412]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	011b      	lsls	r3, r3, #4
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	440b      	add	r3, r1
 8014eae:	3394      	adds	r3, #148	; 0x94
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	2bfe      	cmp	r3, #254	; 0xfe
 8014eb4:	d13a      	bne.n	8014f2c <rfalNfcPollActivation+0x44c>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8014eb6:	79fa      	ldrb	r2, [r7, #7]
 8014eb8:	4613      	mov	r3, r2
 8014eba:	011b      	lsls	r3, r3, #4
 8014ebc:	1a9b      	subs	r3, r3, r2
 8014ebe:	00db      	lsls	r3, r3, #3
 8014ec0:	3390      	adds	r3, #144	; 0x90
 8014ec2:	4a5f      	ldr	r2, [pc, #380]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014ec4:	1898      	adds	r0, r3, r2
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	2200      	movs	r2, #0
 8014eca:	2100      	movs	r1, #0
 8014ecc:	f000 fa0e 	bl	80152ec <rfalNfcNfcDepActivate>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d001      	beq.n	8014ede <rfalNfcPollActivation+0x3fe>
 8014eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014edc:	e0ac      	b.n	8015038 <rfalNfcPollActivation+0x558>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8014ede:	79f9      	ldrb	r1, [r7, #7]
 8014ee0:	79fa      	ldrb	r2, [r7, #7]
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	011b      	lsls	r3, r3, #4
 8014ee6:	1a5b      	subs	r3, r3, r1
 8014ee8:	00db      	lsls	r3, r3, #3
 8014eea:	33b0      	adds	r3, #176	; 0xb0
 8014eec:	4954      	ldr	r1, [pc, #336]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014eee:	440b      	add	r3, r1
 8014ef0:	1c99      	adds	r1, r3, #2
 8014ef2:	4853      	ldr	r0, [pc, #332]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	011b      	lsls	r3, r3, #4
 8014ef8:	1a9b      	subs	r3, r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	4403      	add	r3, r0
 8014efe:	33a8      	adds	r3, #168	; 0xa8
 8014f00:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8014f02:	79fa      	ldrb	r2, [r7, #7]
 8014f04:	494e      	ldr	r1, [pc, #312]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f06:	4613      	mov	r3, r2
 8014f08:	011b      	lsls	r3, r3, #4
 8014f0a:	1a9b      	subs	r3, r3, r2
 8014f0c:	00db      	lsls	r3, r3, #3
 8014f0e:	440b      	add	r3, r1
 8014f10:	33ac      	adds	r3, #172	; 0xac
 8014f12:	220a      	movs	r2, #10
 8014f14:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8014f16:	79fa      	ldrb	r2, [r7, #7]
 8014f18:	4949      	ldr	r1, [pc, #292]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	011b      	lsls	r3, r3, #4
 8014f1e:	1a9b      	subs	r3, r3, r2
 8014f20:	00db      	lsls	r3, r3, #3
 8014f22:	440b      	add	r3, r1
 8014f24:	33ad      	adds	r3, #173	; 0xad
 8014f26:	2202      	movs	r2, #2
 8014f28:	701a      	strb	r2, [r3, #0]
                break;
 8014f2a:	e07a      	b.n	8015022 <rfalNfcPollActivation+0x542>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8014f2c:	79f9      	ldrb	r1, [r7, #7]
 8014f2e:	79fa      	ldrb	r2, [r7, #7]
 8014f30:	460b      	mov	r3, r1
 8014f32:	011b      	lsls	r3, r3, #4
 8014f34:	1a5b      	subs	r3, r3, r1
 8014f36:	00db      	lsls	r3, r3, #3
 8014f38:	3390      	adds	r3, #144	; 0x90
 8014f3a:	4941      	ldr	r1, [pc, #260]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f3c:	440b      	add	r3, r1
 8014f3e:	1cd9      	adds	r1, r3, #3
 8014f40:	483f      	ldr	r0, [pc, #252]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f42:	4613      	mov	r3, r2
 8014f44:	011b      	lsls	r3, r3, #4
 8014f46:	1a9b      	subs	r3, r3, r2
 8014f48:	00db      	lsls	r3, r3, #3
 8014f4a:	4403      	add	r3, r0
 8014f4c:	33a8      	adds	r3, #168	; 0xa8
 8014f4e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8014f50:	79fa      	ldrb	r2, [r7, #7]
 8014f52:	493b      	ldr	r1, [pc, #236]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f54:	4613      	mov	r3, r2
 8014f56:	011b      	lsls	r3, r3, #4
 8014f58:	1a9b      	subs	r3, r3, r2
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	440b      	add	r3, r1
 8014f5e:	33ac      	adds	r3, #172	; 0xac
 8014f60:	2208      	movs	r2, #8
 8014f62:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8014f64:	79fa      	ldrb	r2, [r7, #7]
 8014f66:	4936      	ldr	r1, [pc, #216]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f68:	4613      	mov	r3, r2
 8014f6a:	011b      	lsls	r3, r3, #4
 8014f6c:	1a9b      	subs	r3, r3, r2
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	440b      	add	r3, r1
 8014f72:	33ad      	adds	r3, #173	; 0xad
 8014f74:	2200      	movs	r2, #0
 8014f76:	701a      	strb	r2, [r3, #0]
            break;
 8014f78:	e053      	b.n	8015022 <rfalNfcPollActivation+0x542>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8014f7a:	f003 ffd7 	bl	8018f2c <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8014f7e:	79f9      	ldrb	r1, [r7, #7]
 8014f80:	79fa      	ldrb	r2, [r7, #7]
 8014f82:	460b      	mov	r3, r1
 8014f84:	011b      	lsls	r3, r3, #4
 8014f86:	1a5b      	subs	r3, r3, r1
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	3390      	adds	r3, #144	; 0x90
 8014f8c:	492c      	ldr	r1, [pc, #176]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f8e:	440b      	add	r3, r1
 8014f90:	1cd9      	adds	r1, r3, #3
 8014f92:	482b      	ldr	r0, [pc, #172]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014f94:	4613      	mov	r3, r2
 8014f96:	011b      	lsls	r3, r3, #4
 8014f98:	1a9b      	subs	r3, r3, r2
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	4403      	add	r3, r0
 8014f9e:	33a8      	adds	r3, #168	; 0xa8
 8014fa0:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8014fa2:	79fa      	ldrb	r2, [r7, #7]
 8014fa4:	4926      	ldr	r1, [pc, #152]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	011b      	lsls	r3, r3, #4
 8014faa:	1a9b      	subs	r3, r3, r2
 8014fac:	00db      	lsls	r3, r3, #3
 8014fae:	440b      	add	r3, r1
 8014fb0:	33ac      	adds	r3, #172	; 0xac
 8014fb2:	2208      	movs	r2, #8
 8014fb4:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8014fb6:	79fa      	ldrb	r2, [r7, #7]
 8014fb8:	4921      	ldr	r1, [pc, #132]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014fba:	4613      	mov	r3, r2
 8014fbc:	011b      	lsls	r3, r3, #4
 8014fbe:	1a9b      	subs	r3, r3, r2
 8014fc0:	00db      	lsls	r3, r3, #3
 8014fc2:	440b      	add	r3, r1
 8014fc4:	33ad      	adds	r3, #173	; 0xad
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	701a      	strb	r2, [r3, #0]
            break;
 8014fca:	e02a      	b.n	8015022 <rfalNfcPollActivation+0x542>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8014fcc:	f007 fc3f 	bl	801c84e <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8014fd0:	79f9      	ldrb	r1, [r7, #7]
 8014fd2:	79fa      	ldrb	r2, [r7, #7]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	011b      	lsls	r3, r3, #4
 8014fd8:	1a5b      	subs	r3, r3, r1
 8014fda:	00db      	lsls	r3, r3, #3
 8014fdc:	3390      	adds	r3, #144	; 0x90
 8014fde:	4918      	ldr	r1, [pc, #96]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014fe0:	440b      	add	r3, r1
 8014fe2:	1c99      	adds	r1, r3, #2
 8014fe4:	4816      	ldr	r0, [pc, #88]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	011b      	lsls	r3, r3, #4
 8014fea:	1a9b      	subs	r3, r3, r2
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	4403      	add	r3, r0
 8014ff0:	33a8      	adds	r3, #168	; 0xa8
 8014ff2:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 8014ff4:	79fa      	ldrb	r2, [r7, #7]
 8014ff6:	4912      	ldr	r1, [pc, #72]	; (8015040 <rfalNfcPollActivation+0x560>)
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	011b      	lsls	r3, r3, #4
 8014ffc:	1a9b      	subs	r3, r3, r2
 8014ffe:	00db      	lsls	r3, r3, #3
 8015000:	440b      	add	r3, r1
 8015002:	33ac      	adds	r3, #172	; 0xac
 8015004:	2208      	movs	r2, #8
 8015006:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8015008:	79fa      	ldrb	r2, [r7, #7]
 801500a:	490d      	ldr	r1, [pc, #52]	; (8015040 <rfalNfcPollActivation+0x560>)
 801500c:	4613      	mov	r3, r2
 801500e:	011b      	lsls	r3, r3, #4
 8015010:	1a9b      	subs	r3, r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	33ad      	adds	r3, #173	; 0xad
 8015018:	2200      	movs	r2, #0
 801501a:	701a      	strb	r2, [r3, #0]
            break;
 801501c:	e001      	b.n	8015022 <rfalNfcPollActivation+0x542>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 801501e:	2321      	movs	r3, #33	; 0x21
 8015020:	e00a      	b.n	8015038 <rfalNfcPollActivation+0x558>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8015022:	79fa      	ldrb	r2, [r7, #7]
 8015024:	4613      	mov	r3, r2
 8015026:	011b      	lsls	r3, r3, #4
 8015028:	1a9b      	subs	r3, r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	3390      	adds	r3, #144	; 0x90
 801502e:	4a04      	ldr	r2, [pc, #16]	; (8015040 <rfalNfcPollActivation+0x560>)
 8015030:	4413      	add	r3, r2
 8015032:	4a03      	ldr	r2, [pc, #12]	; (8015040 <rfalNfcPollActivation+0x560>)
 8015034:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8015036:	2300      	movs	r3, #0
}
 8015038:	4618      	mov	r0, r3
 801503a:	3728      	adds	r7, #40	; 0x28
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	20003570 	.word	0x20003570

08015044 <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
    uint8_t                   hdrLen;
    ReturnCode                ret;
    rfalLmState               lmSt;
    rfalBitRate               bitRate;
    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 801504a:	1c7a      	adds	r2, r7, #1
 801504c:	1cbb      	adds	r3, r7, #2
 801504e:	4611      	mov	r1, r2
 8015050:	4618      	mov	r0, r3
 8015052:	f007 f819 	bl	801c088 <rfalListenGetState>
 8015056:	4603      	mov	r3, r0
 8015058:	71fb      	strb	r3, [r7, #7]
    switch(lmSt)
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	3b01      	subs	r3, #1
 801505e:	2b0f      	cmp	r3, #15
 8015060:	f200 8136 	bhi.w	80152d0 <rfalNfcListenActivation+0x28c>
 8015064:	a201      	add	r2, pc, #4	; (adr r2, 801506c <rfalNfcListenActivation+0x28>)
 8015066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801506a:	bf00      	nop
 801506c:	080152cd 	.word	0x080152cd
 8015070:	08015231 	.word	0x08015231
 8015074:	080152c9 	.word	0x080152c9
 8015078:	080152d1 	.word	0x080152d1
 801507c:	08015165 	.word	0x08015165
 8015080:	080150ad 	.word	0x080150ad
 8015084:	080152d1 	.word	0x080152d1
 8015088:	080152d1 	.word	0x080152d1
 801508c:	080151eb 	.word	0x080151eb
 8015090:	0801520f 	.word	0x0801520f
 8015094:	0801520f 	.word	0x0801520f
 8015098:	080152c9 	.word	0x080152c9
 801509c:	080152d1 	.word	0x080152d1
 80150a0:	080152c9 	.word	0x080152c9
 80150a4:	080150ad 	.word	0x080150ad
 80150a8:	080152c9 	.word	0x080152c9
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 80150ac:	78bb      	ldrb	r3, [r7, #2]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d056      	beq.n	8015160 <rfalNfcListenActivation+0x11c>
            {
                /* Set the header length in NFC-A */
                hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 80150b2:	2302      	movs	r3, #2
 80150b4:	70fb      	strb	r3, [r7, #3]
                
                NO_WARNING(hdrLen);  /* Supress warning if feature switch is disabled */
                
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 80150b6:	4b89      	ldr	r3, [pc, #548]	; (80152dc <rfalNfcListenActivation+0x298>)
 80150b8:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80150bc:	3307      	adds	r3, #7
 80150be:	08db      	lsrs	r3, r3, #3
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	4619      	mov	r1, r3
 80150c4:	4886      	ldr	r0, [pc, #536]	; (80152e0 <rfalNfcListenActivation+0x29c>)
 80150c6:	f002 ffa8 	bl	801801a <rfalNfcaListenerIsSleepReq>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00c      	beq.n	80150ea <rfalNfcListenActivation+0xa6>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 80150d0:	4b84      	ldr	r3, [pc, #528]	; (80152e4 <rfalNfcListenActivation+0x2a0>)
 80150d2:	22ff      	movs	r2, #255	; 0xff
 80150d4:	4982      	ldr	r1, [pc, #520]	; (80152e0 <rfalNfcListenActivation+0x29c>)
 80150d6:	200c      	movs	r0, #12
 80150d8:	f006 ffc6 	bl	801c068 <rfalListenSleepStart>
 80150dc:	4603      	mov	r3, r0
 80150de:	80bb      	strh	r3, [r7, #4]
 80150e0:	88bb      	ldrh	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d03c      	beq.n	8015160 <rfalNfcListenActivation+0x11c>
 80150e6:	88bb      	ldrh	r3, [r7, #4]
 80150e8:	e0f4      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP
                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 80150ea:	78fb      	ldrb	r3, [r7, #3]
 80150ec:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80150f0:	4a7a      	ldr	r2, [pc, #488]	; (80152dc <rfalNfcListenActivation+0x298>)
 80150f2:	4413      	add	r3, r2
 80150f4:	1cd8      	adds	r0, r3, #3
 80150f6:	4b79      	ldr	r3, [pc, #484]	; (80152dc <rfalNfcListenActivation+0x298>)
 80150f8:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80150fc:	3307      	adds	r3, #7
 80150fe:	08db      	lsrs	r3, r3, #3
 8015100:	b29a      	uxth	r2, r3
 8015102:	78fb      	ldrb	r3, [r7, #3]
 8015104:	b29b      	uxth	r3, r3
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	b29b      	uxth	r3, r3
 801510a:	4a74      	ldr	r2, [pc, #464]	; (80152dc <rfalNfcListenActivation+0x298>)
 801510c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8015110:	4619      	mov	r1, r3
 8015112:	f001 fd6d 	bl	8016bf0 <rfalNfcDepIsAtrReq>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d01f      	beq.n	801515c <rfalNfcListenActivation+0x118>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 801511c:	4b6f      	ldr	r3, [pc, #444]	; (80152dc <rfalNfcListenActivation+0x298>)
 801511e:	220a      	movs	r2, #10
 8015120:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8015124:	78fb      	ldrb	r3, [r7, #3]
 8015126:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801512a:	4a6c      	ldr	r2, [pc, #432]	; (80152dc <rfalNfcListenActivation+0x298>)
 801512c:	4413      	add	r3, r2
 801512e:	1cd9      	adds	r1, r3, #3
 8015130:	4b6a      	ldr	r3, [pc, #424]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015132:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8015136:	3307      	adds	r3, #7
 8015138:	08db      	lsrs	r3, r3, #3
 801513a:	b29a      	uxth	r2, r3
 801513c:	78fb      	ldrb	r3, [r7, #3]
 801513e:	b29b      	uxth	r3, r3
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	b29b      	uxth	r3, r3
 8015144:	460a      	mov	r2, r1
 8015146:	2100      	movs	r1, #0
 8015148:	4867      	ldr	r0, [pc, #412]	; (80152e8 <rfalNfcListenActivation+0x2a4>)
 801514a:	f000 f8cf 	bl	80152ec <rfalNfcNfcDepActivate>
 801514e:	4603      	mov	r3, r0
 8015150:	80bb      	strh	r3, [r7, #4]
 8015152:	88bb      	ldrh	r3, [r7, #4]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d003      	beq.n	8015160 <rfalNfcListenActivation+0x11c>
 8015158:	88bb      	ldrh	r3, [r7, #4]
 801515a:	e0bb      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 801515c:	230b      	movs	r3, #11
 801515e:	e0b9      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                }
            }
            return ERR_BUSY;
 8015160:	2302      	movs	r3, #2
 8015162:	e0b7      	b.n	80152d4 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 8015164:	78bb      	ldrb	r3, [r7, #2]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d03d      	beq.n	80151e6 <rfalNfcListenActivation+0x1a2>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 801516a:	2301      	movs	r3, #1
 801516c:	70fb      	strb	r3, [r7, #3]
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 801516e:	78fb      	ldrb	r3, [r7, #3]
 8015170:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8015174:	4a59      	ldr	r2, [pc, #356]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015176:	4413      	add	r3, r2
 8015178:	1cd8      	adds	r0, r3, #3
 801517a:	4b58      	ldr	r3, [pc, #352]	; (80152dc <rfalNfcListenActivation+0x298>)
 801517c:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8015180:	3307      	adds	r3, #7
 8015182:	08db      	lsrs	r3, r3, #3
 8015184:	b29a      	uxth	r2, r3
 8015186:	78fb      	ldrb	r3, [r7, #3]
 8015188:	b29b      	uxth	r3, r3
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	b29b      	uxth	r3, r3
 801518e:	4a53      	ldr	r2, [pc, #332]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015190:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8015194:	4619      	mov	r1, r3
 8015196:	f001 fd2b 	bl	8016bf0 <rfalNfcDepIsAtrReq>
 801519a:	4603      	mov	r3, r0
 801519c:	2b00      	cmp	r3, #0
 801519e:	d01f      	beq.n	80151e0 <rfalNfcListenActivation+0x19c>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 80151a0:	4b4e      	ldr	r3, [pc, #312]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151a2:	220c      	movs	r2, #12
 80151a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 80151a8:	78fb      	ldrb	r3, [r7, #3]
 80151aa:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 80151ae:	4a4b      	ldr	r2, [pc, #300]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151b0:	4413      	add	r3, r2
 80151b2:	1cd9      	adds	r1, r3, #3
 80151b4:	4b49      	ldr	r3, [pc, #292]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151b6:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 80151ba:	3307      	adds	r3, #7
 80151bc:	08db      	lsrs	r3, r3, #3
 80151be:	b29a      	uxth	r2, r3
 80151c0:	78fb      	ldrb	r3, [r7, #3]
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	460a      	mov	r2, r1
 80151ca:	2100      	movs	r1, #0
 80151cc:	4846      	ldr	r0, [pc, #280]	; (80152e8 <rfalNfcListenActivation+0x2a4>)
 80151ce:	f000 f88d 	bl	80152ec <rfalNfcNfcDepActivate>
 80151d2:	4603      	mov	r3, r0
 80151d4:	80bb      	strh	r3, [r7, #4]
 80151d6:	88bb      	ldrh	r3, [r7, #4]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d004      	beq.n	80151e6 <rfalNfcListenActivation+0x1a2>
 80151dc:	88bb      	ldrh	r3, [r7, #4]
 80151de:	e079      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 80151e0:	2009      	movs	r0, #9
 80151e2:	f006 ff71 	bl	801c0c8 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 80151e6:	2302      	movs	r3, #2
 80151e8:	e074      	b.n	80152d4 <rfalNfcListenActivation+0x290>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 80151ea:	4b3c      	ldr	r3, [pc, #240]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151ec:	220c      	movs	r2, #12
 80151ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 80151f2:	4b3a      	ldr	r3, [pc, #232]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151f4:	2200      	movs	r2, #0
 80151f6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devList->nfcid       = NULL;
 80151fa:	4b38      	ldr	r3, [pc, #224]	; (80152dc <rfalNfcListenActivation+0x298>)
 80151fc:	2200      	movs	r2, #0
 80151fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            gNfcDev.devList->nfcidLen    = 0;
 8015202:	4b36      	ldr	r3, [pc, #216]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015204:	2200      	movs	r2, #0
 8015206:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            
            return ERR_NONE;
 801520a:	2300      	movs	r3, #0
 801520c:	e062      	b.n	80152d4 <rfalNfcListenActivation+0x290>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 801520e:	f002 fa57 	bl	80176c0 <rfalNfcDepListenGetActivationStatus>
 8015212:	4603      	mov	r3, r0
 8015214:	80bb      	strh	r3, [r7, #4]
            if( ret == ERR_NONE )
 8015216:	88bb      	ldrh	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d107      	bne.n	801522c <rfalNfcListenActivation+0x1e8>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 801521c:	4b2f      	ldr	r3, [pc, #188]	; (80152dc <rfalNfcListenActivation+0x298>)
 801521e:	2202      	movs	r2, #2
 8015220:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 8015224:	4b2d      	ldr	r3, [pc, #180]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015226:	220a      	movs	r2, #10
 8015228:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
            }
            return ret;
 801522c:	88bb      	ldrh	r3, [r7, #4]
 801522e:	e051      	b.n	80152d4 <rfalNfcListenActivation+0x290>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8015230:	78bb      	ldrb	r3, [r7, #2]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d046      	beq.n	80152c4 <rfalNfcListenActivation+0x280>
            {
                
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8015236:	4b29      	ldr	r3, [pc, #164]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015238:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015240:	2b00      	cmp	r3, #0
 8015242:	d03f      	beq.n	80152c4 <rfalNfcListenActivation+0x280>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8015244:	787b      	ldrb	r3, [r7, #1]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d101      	bne.n	801524e <rfalNfcListenActivation+0x20a>
 801524a:	2302      	movs	r3, #2
 801524c:	e000      	b.n	8015250 <rfalNfcListenActivation+0x20c>
 801524e:	2301      	movs	r3, #1
 8015250:	70fb      	strb	r3, [r7, #3]
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8015252:	78fb      	ldrb	r3, [r7, #3]
 8015254:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8015258:	4a20      	ldr	r2, [pc, #128]	; (80152dc <rfalNfcListenActivation+0x298>)
 801525a:	4413      	add	r3, r2
 801525c:	1cd8      	adds	r0, r3, #3
 801525e:	4b1f      	ldr	r3, [pc, #124]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015260:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 8015264:	3307      	adds	r3, #7
 8015266:	08db      	lsrs	r3, r3, #3
 8015268:	b29a      	uxth	r2, r3
 801526a:	78fb      	ldrb	r3, [r7, #3]
 801526c:	b29b      	uxth	r3, r3
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	b29b      	uxth	r3, r3
 8015272:	2200      	movs	r2, #0
 8015274:	4619      	mov	r1, r3
 8015276:	f001 fcbb 	bl	8016bf0 <rfalNfcDepIsAtrReq>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d01f      	beq.n	80152c0 <rfalNfcListenActivation+0x27c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8015280:	4b16      	ldr	r3, [pc, #88]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015282:	220f      	movs	r2, #15
 8015284:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8015288:	78fb      	ldrb	r3, [r7, #3]
 801528a:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 801528e:	4a13      	ldr	r2, [pc, #76]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015290:	4413      	add	r3, r2
 8015292:	1cd9      	adds	r1, r3, #3
 8015294:	4b11      	ldr	r3, [pc, #68]	; (80152dc <rfalNfcListenActivation+0x298>)
 8015296:	f8b3 34fe 	ldrh.w	r3, [r3, #1278]	; 0x4fe
 801529a:	3307      	adds	r3, #7
 801529c:	08db      	lsrs	r3, r3, #3
 801529e:	b29a      	uxth	r2, r3
 80152a0:	78fb      	ldrb	r3, [r7, #3]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	1ad3      	subs	r3, r2, r3
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	460a      	mov	r2, r1
 80152aa:	2101      	movs	r1, #1
 80152ac:	480e      	ldr	r0, [pc, #56]	; (80152e8 <rfalNfcListenActivation+0x2a4>)
 80152ae:	f000 f81d 	bl	80152ec <rfalNfcNfcDepActivate>
 80152b2:	4603      	mov	r3, r0
 80152b4:	80bb      	strh	r3, [r7, #4]
 80152b6:	88bb      	ldrh	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d003      	beq.n	80152c4 <rfalNfcListenActivation+0x280>
 80152bc:	88bb      	ldrh	r3, [r7, #4]
 80152be:	e009      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 80152c0:	230b      	movs	r3, #11
 80152c2:	e007      	b.n	80152d4 <rfalNfcListenActivation+0x290>
                    }
                }
            }
            return ERR_BUSY;
 80152c4:	2302      	movs	r3, #2
 80152c6:	e005      	b.n	80152d4 <rfalNfcListenActivation+0x290>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 80152c8:	2302      	movs	r3, #2
 80152ca:	e003      	b.n	80152d4 <rfalNfcListenActivation+0x290>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 80152cc:	2325      	movs	r3, #37	; 0x25
 80152ce:	e001      	b.n	80152d4 <rfalNfcListenActivation+0x290>
        
        default:                                                                      /* Wait for activation */
            break;
 80152d0:	bf00      	nop
    }

    return ERR_INTERNAL;
 80152d2:	230c      	movs	r3, #12
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20003570 	.word	0x20003570
 80152e0:	2000396b 	.word	0x2000396b
 80152e4:	20003a6e 	.word	0x20003a6e
 80152e8:	20003600 	.word	0x20003600

080152ec <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 80152ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152ee:	b0a5      	sub	sp, #148	; 0x94
 80152f0:	af04      	add	r7, sp, #16
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	607a      	str	r2, [r7, #4]
 80152f6:	461a      	mov	r2, r3
 80152f8:	460b      	mov	r3, r1
 80152fa:	72fb      	strb	r3, [r7, #11]
 80152fc:	4613      	mov	r3, r2
 80152fe:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2b05      	cmp	r3, #5
 8015306:	d838      	bhi.n	801537a <rfalNfcNfcDepActivate+0x8e>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	2b02      	cmp	r3, #2
 801530e:	d106      	bne.n	801531e <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	3303      	adds	r3, #3
 8015314:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8015316:	2308      	movs	r3, #8
 8015318:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 801531c:	e004      	b.n	8015328 <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 801531e:	4b3e      	ldr	r3, [pc, #248]	; (8015418 <rfalNfcNfcDepActivate+0x12c>)
 8015320:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8015322:	230a      	movs	r3, #10
 8015324:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8015328:	2300      	movs	r3, #0
 801532a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801532e:	2300      	movs	r3, #0
 8015330:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8015334:	2300      	movs	r3, #0
 8015336:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 801533a:	2300      	movs	r3, #0
 801533c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8015340:	2303      	movs	r3, #3
 8015342:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 8015346:	4b35      	ldr	r3, [pc, #212]	; (801541c <rfalNfcNfcDepActivate+0x130>)
 8015348:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 801534a:	4b35      	ldr	r3, [pc, #212]	; (8015420 <rfalNfcNfcDepActivate+0x134>)
 801534c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8015350:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 8015354:	7afb      	ldrb	r3, [r7, #11]
 8015356:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 801535a:	230e      	movs	r3, #14
 801535c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 8015360:	f001 fb88 	bl	8016a74 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f103 0220 	add.w	r2, r3, #32
 801536a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801536e:	2102      	movs	r1, #2
 8015370:	4618      	mov	r0, r3
 8015372:	f001 ff29 	bl	80171c8 <rfalNfcDepInitiatorHandleActivation>
 8015376:	4603      	mov	r3, r0
 8015378:	e04a      	b.n	8015410 <rfalNfcNfcDepActivate+0x124>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	2b09      	cmp	r3, #9
 8015380:	d945      	bls.n	801540e <rfalNfcNfcDepActivate+0x122>
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	781b      	ldrb	r3, [r3, #0]
 8015386:	2b0f      	cmp	r3, #15
 8015388:	d841      	bhi.n	801540e <rfalNfcNfcDepActivate+0x122>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 801538a:	4b25      	ldr	r3, [pc, #148]	; (8015420 <rfalNfcNfcDepActivate+0x134>)
 801538c:	f107 0215 	add.w	r2, r7, #21
 8015390:	3314      	adds	r3, #20
 8015392:	cb03      	ldmia	r3!, {r0, r1}
 8015394:	6010      	str	r0, [r2, #0]
 8015396:	6051      	str	r1, [r2, #4]
 8015398:	881b      	ldrh	r3, [r3, #0]
 801539a:	8113      	strh	r3, [r2, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801539c:	2300      	movs	r3, #0
 801539e:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80153a0:	2300      	movs	r3, #0
 80153a2:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX;
 80153a6:	230e      	movs	r3, #14
 80153a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 80153ac:	2330      	movs	r3, #48	; 0x30
 80153ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        targetParam.GBtLen    = 0;
 80153b2:	2300      	movs	r3, #0
 80153b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 80153b8:	230e      	movs	r3, #14
 80153ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 80153be:	7afb      	ldrb	r3, [r7, #11]
 80153c0:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 80153c2:	4b18      	ldr	r3, [pc, #96]	; (8015424 <rfalNfcNfcDepActivate+0x138>)
 80153c4:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 80153c6:	4b18      	ldr	r3, [pc, #96]	; (8015428 <rfalNfcNfcDepActivate+0x13c>)
 80153c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 80153ca:	4b18      	ldr	r3, [pc, #96]	; (801542c <rfalNfcNfcDepActivate+0x140>)
 80153cc:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 80153ce:	4b18      	ldr	r3, [pc, #96]	; (8015430 <rfalNfcNfcDepActivate+0x144>)
 80153d0:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	2b0a      	cmp	r3, #10
 80153d8:	d101      	bne.n	80153de <rfalNfcNfcDepActivate+0xf2>
 80153da:	230a      	movs	r3, #10
 80153dc:	e000      	b.n	80153e0 <rfalNfcNfcDepActivate+0xf4>
 80153de:	230b      	movs	r3, #11
 80153e0:	4618      	mov	r0, r3
 80153e2:	f006 fe71 	bl	801c0c8 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 80153e6:	f001 fb45 	bl	8016a74 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 80153ea:	893e      	ldrh	r6, [r7, #8]
 80153ec:	f107 0514 	add.w	r5, r7, #20
 80153f0:	466c      	mov	r4, sp
 80153f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80153f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015400:	4632      	mov	r2, r6
 8015402:	6879      	ldr	r1, [r7, #4]
 8015404:	4628      	mov	r0, r5
 8015406:	f002 f849 	bl	801749c <rfalNfcDepListenStartActivation>
 801540a:	4603      	mov	r3, r0
 801540c:	e000      	b.n	8015410 <rfalNfcNfcDepActivate+0x124>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 801540e:	230c      	movs	r3, #12
    }
}
 8015410:	4618      	mov	r0, r3
 8015412:	3784      	adds	r7, #132	; 0x84
 8015414:	46bd      	mov	sp, r7
 8015416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015418:	20003584 	.word	0x20003584
 801541c:	2000358e 	.word	0x2000358e
 8015420:	20003570 	.word	0x20003570
 8015424:	2000396b 	.word	0x2000396b
 8015428:	20003a6e 	.word	0x20003a6e
 801542c:	20003863 	.word	0x20003863
 8015430:	20003620 	.word	0x20003620

08015434 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 8015438:	4b11      	ldr	r3, [pc, #68]	; (8015480 <rfalNfcDeactivation+0x4c>)
 801543a:	689b      	ldr	r3, [r3, #8]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d012      	beq.n	8015466 <rfalNfcDeactivation+0x32>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8015440:	4b0f      	ldr	r3, [pc, #60]	; (8015480 <rfalNfcDeactivation+0x4c>)
 8015442:	689b      	ldr	r3, [r3, #8]
 8015444:	7f5b      	ldrb	r3, [r3, #29]
 8015446:	2b02      	cmp	r3, #2
 8015448:	d008      	beq.n	801545c <rfalNfcDeactivation+0x28>
 801544a:	2b02      	cmp	r3, #2
 801544c:	dc09      	bgt.n	8015462 <rfalNfcDeactivation+0x2e>
 801544e:	2b00      	cmp	r3, #0
 8015450:	d00b      	beq.n	801546a <rfalNfcDeactivation+0x36>
 8015452:	2b01      	cmp	r3, #1
 8015454:	d105      	bne.n	8015462 <rfalNfcDeactivation+0x2e>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 8015456:	f7fd fb35 	bl	8012ac4 <rfalIsoDepDeselect>
                break;
 801545a:	e007      	b.n	801546c <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 801545c:	f001 fe4c 	bl	80170f8 <rfalNfcDepRLS>
                break;
 8015460:	e004      	b.n	801546c <rfalNfcDeactivation+0x38>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 8015462:	2305      	movs	r3, #5
 8015464:	e00a      	b.n	801547c <rfalNfcDeactivation+0x48>
        }
    }
 8015466:	bf00      	nop
 8015468:	e000      	b.n	801546c <rfalNfcDeactivation+0x38>
                break;                                                                /* No specific deactivation to be performed */
 801546a:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 801546c:	f007 f918 	bl	801c6a0 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8015470:	f006 fdde 	bl	801c030 <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8015474:	4b02      	ldr	r3, [pc, #8]	; (8015480 <rfalNfcDeactivation+0x4c>)
 8015476:	2200      	movs	r2, #0
 8015478:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 801547a:	2300      	movs	r3, #0
}
 801547c:	4618      	mov	r0, r3
 801547e:	bd80      	pop	{r7, pc}
 8015480:	20003570 	.word	0x20003570

08015484 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8015484:	b480      	push	{r7}
 8015486:	b085      	sub	sp, #20
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	71fb      	strb	r3, [r7, #7]
 801548e:	460b      	mov	r3, r1
 8015490:	71bb      	strb	r3, [r7, #6]
 8015492:	4613      	mov	r3, r2
 8015494:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8015496:	797a      	ldrb	r2, [r7, #5]
 8015498:	79bb      	ldrb	r3, [r7, #6]
 801549a:	4293      	cmp	r3, r2
 801549c:	bf28      	it	cs
 801549e:	4613      	movcs	r3, r2
 80154a0:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 80154a2:	79fb      	ldrb	r3, [r7, #7]
 80154a4:	2b02      	cmp	r3, #2
 80154a6:	d801      	bhi.n	80154ac <nfcipDxIsSupported+0x28>
	{
		return true;
 80154a8:	2301      	movs	r3, #1
 80154aa:	e008      	b.n	80154be <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 80154ac:	79fb      	ldrb	r3, [r7, #7]
 80154ae:	2b03      	cmp	r3, #3
 80154b0:	d104      	bne.n	80154bc <nfcipDxIsSupported+0x38>
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d001      	beq.n	80154bc <nfcipDxIsSupported+0x38>
	{
		return true;
 80154b8:	2301      	movs	r3, #1
 80154ba:	e000      	b.n	80154be <nfcipDxIsSupported+0x3a>
	}

	return false;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bc80      	pop	{r7}
 80154c6:	4770      	bx	lr

080154c8 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b088      	sub	sp, #32
 80154cc:	af02      	add	r7, sp, #8
 80154ce:	60b9      	str	r1, [r7, #8]
 80154d0:	607a      	str	r2, [r7, #4]
 80154d2:	603b      	str	r3, [r7, #0]
 80154d4:	4603      	mov	r3, r0
 80154d6:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	2b06      	cmp	r3, #6
 80154dc:	d002      	beq.n	80154e4 <nfcipTxRx+0x1c>
 80154de:	7bfb      	ldrb	r3, [r7, #15]
 80154e0:	2b07      	cmp	r3, #7
 80154e2:	d101      	bne.n	80154e8 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 80154e4:	2307      	movs	r3, #7
 80154e6:	e030      	b.n	801554a <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 80154e8:	4a1a      	ldr	r2, [pc, #104]	; (8015554 <nfcipTxRx+0x8c>)
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ec:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 80154ee:	4a19      	ldr	r2, [pc, #100]	; (8015554 <nfcipTxRx+0x8c>)
 80154f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80154f2:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 80154f6:	4a17      	ldr	r2, [pc, #92]	; (8015554 <nfcipTxRx+0x8c>)
 80154f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fa:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d013      	beq.n	801552a <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8015502:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015506:	b29a      	uxth	r2, r3
 8015508:	7bf8      	ldrb	r0, [r7, #15]
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	9301      	str	r3, [sp, #4]
 801550e:	2300      	movs	r3, #0
 8015510:	9300      	str	r3, [sp, #0]
 8015512:	4613      	mov	r3, r2
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	68b9      	ldr	r1, [r7, #8]
 8015518:	f000 ffac 	bl	8016474 <nfcipTx>
 801551c:	4603      	mov	r3, r0
 801551e:	82fb      	strh	r3, [r7, #22]
 8015520:	8afb      	ldrh	r3, [r7, #22]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d001      	beq.n	801552a <nfcipTxRx+0x62>
 8015526:	8afb      	ldrh	r3, [r7, #22]
 8015528:	e00f      	b.n	801554a <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 801552a:	2001      	movs	r0, #1
 801552c:	f001 ff72 	bl	8017414 <nfcipDataRx>
 8015530:	4603      	mov	r3, r0
 8015532:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8015534:	8afb      	ldrh	r3, [r7, #22]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <nfcipTxRx+0x76>
    {
        return ret;
 801553a:	8afb      	ldrh	r3, [r7, #22]
 801553c:	e005      	b.n	801554a <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 801553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	b29a      	uxth	r2, r3
 8015544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015546:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 8015548:	2300      	movs	r3, #0
}
 801554a:	4618      	mov	r0, r3
 801554c:	3718      	adds	r7, #24
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	20003a70 	.word	0x20003a70

08015558 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b08c      	sub	sp, #48	; 0x30
 801555c:	af02      	add	r7, sp, #8
 801555e:	4603      	mov	r3, r0
 8015560:	460a      	mov	r2, r1
 8015562:	71fb      	strb	r3, [r7, #7]
 8015564:	4613      	mov	r3, r2
 8015566:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8015568:	4b2a      	ldr	r3, [pc, #168]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	2b01      	cmp	r3, #1
 801556e:	d101      	bne.n	8015574 <nfcipDEPControlMsg+0x1c>
 8015570:	2307      	movs	r3, #7
 8015572:	e000      	b.n	8015576 <nfcipDEPControlMsg+0x1e>
 8015574:	2306      	movs	r3, #6
 8015576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 801557a:	4b26      	ldr	r3, [pc, #152]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	2b01      	cmp	r3, #1
 8015580:	d018      	beq.n	80155b4 <nfcipDEPControlMsg+0x5c>
 8015582:	79fb      	ldrb	r3, [r7, #7]
 8015584:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015588:	2b80      	cmp	r3, #128	; 0x80
 801558a:	d10d      	bne.n	80155a8 <nfcipDEPControlMsg+0x50>
 801558c:	79fb      	ldrb	r3, [r7, #7]
 801558e:	f003 0310 	and.w	r3, r3, #16
 8015592:	2b00      	cmp	r3, #0
 8015594:	d008      	beq.n	80155a8 <nfcipDEPControlMsg+0x50>
 8015596:	79bb      	ldrb	r3, [r7, #6]
 8015598:	4a1e      	ldr	r2, [pc, #120]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 801559a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801559c:	fb03 f202 	mul.w	r2, r3, r2
 80155a0:	4b1c      	ldr	r3, [pc, #112]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 80155a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155a4:	4413      	add	r3, r2
 80155a6:	e007      	b.n	80155b8 <nfcipDEPControlMsg+0x60>
 80155a8:	4b1a      	ldr	r3, [pc, #104]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 80155aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80155ac:	4b19      	ldr	r3, [pc, #100]	; (8015614 <nfcipDEPControlMsg+0xbc>)
 80155ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155b0:	4413      	add	r3, r2
 80155b2:	e001      	b.n	80155b8 <nfcipDEPControlMsg+0x60>
 80155b4:	f04f 33ff 	mov.w	r3, #4294967295
 80155b8:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 80155ba:	79fb      	ldrb	r3, [r7, #7]
 80155bc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80155c0:	2b80      	cmp	r3, #128	; 0x80
 80155c2:	d116      	bne.n	80155f2 <nfcipDEPControlMsg+0x9a>
 80155c4:	79fb      	ldrb	r3, [r7, #7]
 80155c6:	f003 0310 	and.w	r3, r3, #16
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d011      	beq.n	80155f2 <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 80155ce:	79bb      	ldrb	r3, [r7, #6]
 80155d0:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 80155d2:	f107 030c 	add.w	r3, r7, #12
 80155d6:	1d5a      	adds	r2, r3, #5
 80155d8:	f107 010c 	add.w	r1, r7, #12
 80155dc:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80155e0:	6a3b      	ldr	r3, [r7, #32]
 80155e2:	9301      	str	r3, [sp, #4]
 80155e4:	79fb      	ldrb	r3, [r7, #7]
 80155e6:	9300      	str	r3, [sp, #0]
 80155e8:	2301      	movs	r3, #1
 80155ea:	f000 ff43 	bl	8016474 <nfcipTx>
 80155ee:	4603      	mov	r3, r0
 80155f0:	e00c      	b.n	801560c <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 80155f2:	f107 010c 	add.w	r1, r7, #12
 80155f6:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80155fa:	6a3b      	ldr	r3, [r7, #32]
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	79fb      	ldrb	r3, [r7, #7]
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	2300      	movs	r3, #0
 8015604:	2200      	movs	r2, #0
 8015606:	f000 ff35 	bl	8016474 <nfcipTx>
 801560a:	4603      	mov	r3, r0
    }
}
 801560c:	4618      	mov	r0, r3
 801560e:	3728      	adds	r7, #40	; 0x28
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	20003a70 	.word	0x20003a70

08015618 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 8015618:	b480      	push	{r7}
 801561a:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 801561c:	4b0b      	ldr	r3, [pc, #44]	; (801564c <nfcipClearCounters+0x34>)
 801561e:	2200      	movs	r2, #0
 8015620:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 8015624:	4b09      	ldr	r3, [pc, #36]	; (801564c <nfcipClearCounters+0x34>)
 8015626:	2200      	movs	r2, #0
 8015628:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 801562c:	4b07      	ldr	r3, [pc, #28]	; (801564c <nfcipClearCounters+0x34>)
 801562e:	2200      	movs	r2, #0
 8015630:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <nfcipClearCounters+0x34>)
 8015636:	2200      	movs	r2, #0
 8015638:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 801563c:	4b03      	ldr	r3, [pc, #12]	; (801564c <nfcipClearCounters+0x34>)
 801563e:	2200      	movs	r2, #0
 8015640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8015644:	bf00      	nop
 8015646:	46bd      	mov	sp, r7
 8015648:	bc80      	pop	{r7}
 801564a:	4770      	bx	lr
 801564c:	20003a70 	.word	0x20003a70

08015650 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b086      	sub	sp, #24
 8015654:	af00      	add	r7, sp, #0
 8015656:	60ba      	str	r2, [r7, #8]
 8015658:	607b      	str	r3, [r7, #4]
 801565a:	4603      	mov	r3, r0
 801565c:	81fb      	strh	r3, [r7, #14]
 801565e:	460b      	mov	r3, r1
 8015660:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 8015662:	230c      	movs	r3, #12
 8015664:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 8015666:	2300      	movs	r3, #0
 8015668:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 801566a:	2300      	movs	r3, #0
 801566c:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	2200      	movs	r2, #0
 8015672:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2200      	movs	r2, #0
 8015678:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 801567a:	89fb      	ldrh	r3, [r7, #14]
 801567c:	2b1d      	cmp	r3, #29
 801567e:	f200 80c6 	bhi.w	801580e <nfcipInitiatorHandleDEP+0x1be>
 8015682:	a201      	add	r2, pc, #4	; (adr r2, 8015688 <nfcipInitiatorHandleDEP+0x38>)
 8015684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015688:	08015813 	.word	0x08015813
 801568c:	0801580f 	.word	0x0801580f
 8015690:	0801580b 	.word	0x0801580b
 8015694:	0801580f 	.word	0x0801580f
 8015698:	08015701 	.word	0x08015701
 801569c:	0801580f 	.word	0x0801580f
 80156a0:	0801580f 	.word	0x0801580f
 80156a4:	0801580f 	.word	0x0801580f
 80156a8:	0801580f 	.word	0x0801580f
 80156ac:	080157c7 	.word	0x080157c7
 80156b0:	0801580f 	.word	0x0801580f
 80156b4:	0801580f 	.word	0x0801580f
 80156b8:	0801580f 	.word	0x0801580f
 80156bc:	0801580f 	.word	0x0801580f
 80156c0:	0801580f 	.word	0x0801580f
 80156c4:	0801580f 	.word	0x0801580f
 80156c8:	0801580f 	.word	0x0801580f
 80156cc:	0801580f 	.word	0x0801580f
 80156d0:	0801580f 	.word	0x0801580f
 80156d4:	0801580f 	.word	0x0801580f
 80156d8:	0801580f 	.word	0x0801580f
 80156dc:	080157c7 	.word	0x080157c7
 80156e0:	0801580f 	.word	0x0801580f
 80156e4:	0801580f 	.word	0x0801580f
 80156e8:	0801580f 	.word	0x0801580f
 80156ec:	0801580f 	.word	0x0801580f
 80156f0:	0801580f 	.word	0x0801580f
 80156f4:	080157c7 	.word	0x080157c7
 80156f8:	0801580f 	.word	0x0801580f
 80156fc:	080157c7 	.word	0x080157c7
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 8015700:	4ba1      	ldr	r3, [pc, #644]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015702:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8015706:	1c5a      	adds	r2, r3, #1
 8015708:	b2d1      	uxtb	r1, r2
 801570a:	4a9f      	ldr	r2, [pc, #636]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801570c:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8015710:	2b02      	cmp	r3, #2
 8015712:	d901      	bls.n	8015718 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 8015714:	230b      	movs	r3, #11
 8015716:	e264      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 8015718:	4b9b      	ldr	r3, [pc, #620]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801571a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801571e:	2b00      	cmp	r3, #0
 8015720:	d008      	beq.n	8015734 <nfcipInitiatorHandleDEP+0xe4>
 8015722:	4b99      	ldr	r3, [pc, #612]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015728:	4798      	blx	r3
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 8015730:	2304      	movs	r3, #4
 8015732:	e256      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8015734:	4b94      	ldr	r3, [pc, #592]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015736:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801573a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801573e:	2b40      	cmp	r3, #64	; 0x40
 8015740:	d128      	bne.n	8015794 <nfcipInitiatorHandleDEP+0x144>
 8015742:	4b91      	ldr	r3, [pc, #580]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015744:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8015748:	f003 0310 	and.w	r3, r3, #16
 801574c:	2b00      	cmp	r3, #0
 801574e:	d021      	beq.n	8015794 <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8015750:	4b8d      	ldr	r3, [pc, #564]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015752:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	b2d1      	uxtb	r1, r2
 801575a:	4a8b      	ldr	r2, [pc, #556]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801575c:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8015760:	2b02      	cmp	r3, #2
 8015762:	d901      	bls.n	8015768 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8015764:	230b      	movs	r3, #11
 8015766:	e23c      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8015768:	4b87      	ldr	r3, [pc, #540]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801576a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801576e:	f003 0303 	and.w	r3, r3, #3
 8015772:	b2db      	uxtb	r3, r3
 8015774:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8015778:	b2db      	uxtb	r3, r3
 801577a:	2100      	movs	r1, #0
 801577c:	4618      	mov	r0, r3
 801577e:	f7ff feeb 	bl	8015558 <nfcipDEPControlMsg>
 8015782:	4603      	mov	r3, r0
 8015784:	82fb      	strh	r3, [r7, #22]
 8015786:	8afb      	ldrh	r3, [r7, #22]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d001      	beq.n	8015790 <nfcipInitiatorHandleDEP+0x140>
 801578c:	8afb      	ldrh	r3, [r7, #22]
 801578e:	e228      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8015790:	2302      	movs	r3, #2
 8015792:	e226      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 8015794:	4b7c      	ldr	r3, [pc, #496]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015796:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801579a:	1c5a      	adds	r2, r3, #1
 801579c:	b2d1      	uxtb	r1, r2
 801579e:	4a7a      	ldr	r2, [pc, #488]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80157a0:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 80157a4:	2b02      	cmp	r3, #2
 80157a6:	d901      	bls.n	80157ac <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 80157a8:	230b      	movs	r3, #11
 80157aa:	e21a      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 80157ac:	2100      	movs	r1, #0
 80157ae:	2080      	movs	r0, #128	; 0x80
 80157b0:	f7ff fed2 	bl	8015558 <nfcipDEPControlMsg>
 80157b4:	4603      	mov	r3, r0
 80157b6:	82fb      	strh	r3, [r7, #22]
 80157b8:	8afb      	ldrh	r3, [r7, #22]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d001      	beq.n	80157c2 <nfcipInitiatorHandleDEP+0x172>
 80157be:	8afb      	ldrh	r3, [r7, #22]
 80157c0:	e20f      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 80157c2:	2302      	movs	r3, #2
 80157c4:	e20d      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 80157c6:	4b70      	ldr	r3, [pc, #448]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80157c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157cc:	1c5a      	adds	r2, r3, #1
 80157ce:	b2d1      	uxtb	r1, r2
 80157d0:	4a6d      	ldr	r2, [pc, #436]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80157d2:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 80157d6:	2b02      	cmp	r3, #2
 80157d8:	d901      	bls.n	80157de <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 80157da:	2309      	movs	r3, #9
 80157dc:	e201      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 80157de:	4b6a      	ldr	r3, [pc, #424]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80157e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80157e4:	f003 0303 	and.w	r3, r3, #3
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	2100      	movs	r1, #0
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7ff feb0 	bl	8015558 <nfcipDEPControlMsg>
 80157f8:	4603      	mov	r3, r0
 80157fa:	82fb      	strh	r3, [r7, #22]
 80157fc:	8afb      	ldrh	r3, [r7, #22]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <nfcipInitiatorHandleDEP+0x1b6>
 8015802:	8afb      	ldrh	r3, [r7, #22]
 8015804:	e1ed      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8015806:	2302      	movs	r3, #2
 8015808:	e1eb      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 801580a:	2302      	movs	r3, #2
 801580c:	e1e9      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 801580e:	89fb      	ldrh	r3, [r7, #14]
 8015810:	e1e7      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            break;
 8015812:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8015814:	4b5c      	ldr	r3, [pc, #368]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015816:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015818:	7d7b      	ldrb	r3, [r7, #21]
 801581a:	1c59      	adds	r1, r3, #1
 801581c:	7579      	strb	r1, [r7, #21]
 801581e:	4413      	add	r3, r2
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 8015824:	4b58      	ldr	r3, [pc, #352]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015826:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015828:	7d7b      	ldrb	r3, [r7, #21]
 801582a:	1c59      	adds	r1, r3, #1
 801582c:	7579      	strb	r1, [r7, #21]
 801582e:	4413      	add	r3, r2
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	2bd5      	cmp	r3, #213	; 0xd5
 8015834:	d001      	beq.n	801583a <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 8015836:	230b      	movs	r3, #11
 8015838:	e1d3      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 801583a:	4b53      	ldr	r3, [pc, #332]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801583c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801583e:	7d7b      	ldrb	r3, [r7, #21]
 8015840:	1c59      	adds	r1, r3, #1
 8015842:	7579      	strb	r1, [r7, #21]
 8015844:	4413      	add	r3, r2
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	2b07      	cmp	r3, #7
 801584a:	d001      	beq.n	8015850 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 801584c:	230b      	movs	r3, #11
 801584e:	e1c8      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8015850:	4b4d      	ldr	r3, [pc, #308]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015852:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015854:	7d7b      	ldrb	r3, [r7, #21]
 8015856:	1c59      	adds	r1, r3, #1
 8015858:	7579      	strb	r1, [r7, #21]
 801585a:	4413      	add	r3, r2
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8015860:	7cbb      	ldrb	r3, [r7, #18]
 8015862:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015866:	2b80      	cmp	r3, #128	; 0x80
 8015868:	d00b      	beq.n	8015882 <nfcipInitiatorHandleDEP+0x232>
 801586a:	7cbb      	ldrb	r3, [r7, #18]
 801586c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015870:	2b40      	cmp	r3, #64	; 0x40
 8015872:	d006      	beq.n	8015882 <nfcipInitiatorHandleDEP+0x232>
 8015874:	7cbb      	ldrb	r3, [r7, #18]
 8015876:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801587a:	2b00      	cmp	r3, #0
 801587c:	d001      	beq.n	8015882 <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 801587e:	230b      	movs	r3, #11
 8015880:	e1af      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8015882:	4b41      	ldr	r3, [pc, #260]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015884:	78db      	ldrb	r3, [r3, #3]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d015      	beq.n	80158b6 <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 801588a:	4b3f      	ldr	r3, [pc, #252]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801588c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801588e:	7d7b      	ldrb	r3, [r7, #21]
 8015890:	1c59      	adds	r1, r3, #1
 8015892:	7579      	strb	r1, [r7, #21]
 8015894:	4413      	add	r3, r2
 8015896:	781a      	ldrb	r2, [r3, #0]
 8015898:	4b3b      	ldr	r3, [pc, #236]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801589a:	78db      	ldrb	r3, [r3, #3]
 801589c:	429a      	cmp	r2, r3
 801589e:	d104      	bne.n	80158aa <nfcipInitiatorHandleDEP+0x25a>
 80158a0:	7cbb      	ldrb	r3, [r7, #18]
 80158a2:	f003 0304 	and.w	r3, r3, #4
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d101      	bne.n	80158ae <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 80158aa:	230b      	movs	r3, #11
 80158ac:	e199      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80158ae:	7d3b      	ldrb	r3, [r7, #20]
 80158b0:	3301      	adds	r3, #1
 80158b2:	753b      	strb	r3, [r7, #20]
 80158b4:	e006      	b.n	80158c4 <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 80158b6:	7cbb      	ldrb	r3, [r7, #18]
 80158b8:	f003 0304 	and.w	r3, r3, #4
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d001      	beq.n	80158c4 <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 80158c0:	230b      	movs	r3, #11
 80158c2:	e18e      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 80158c4:	4b30      	ldr	r3, [pc, #192]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80158c6:	791b      	ldrb	r3, [r3, #4]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d015      	beq.n	80158f8 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 80158cc:	4b2e      	ldr	r3, [pc, #184]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80158ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80158d0:	7d7b      	ldrb	r3, [r7, #21]
 80158d2:	1c59      	adds	r1, r3, #1
 80158d4:	7579      	strb	r1, [r7, #21]
 80158d6:	4413      	add	r3, r2
 80158d8:	781a      	ldrb	r2, [r3, #0]
 80158da:	4b2b      	ldr	r3, [pc, #172]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 80158dc:	791b      	ldrb	r3, [r3, #4]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d104      	bne.n	80158ec <nfcipInitiatorHandleDEP+0x29c>
 80158e2:	7cbb      	ldrb	r3, [r7, #18]
 80158e4:	f003 0308 	and.w	r3, r3, #8
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d101      	bne.n	80158f0 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 80158ec:	230b      	movs	r3, #11
 80158ee:	e178      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80158f0:	7d3b      	ldrb	r3, [r7, #20]
 80158f2:	3301      	adds	r3, #1
 80158f4:	753b      	strb	r3, [r7, #20]
 80158f6:	e006      	b.n	8015906 <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80158f8:	7cbb      	ldrb	r3, [r7, #18]
 80158fa:	f003 0308 	and.w	r3, r3, #8
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d001      	beq.n	8015906 <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 8015902:	230b      	movs	r3, #11
 8015904:	e16d      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8015906:	7cbb      	ldrb	r3, [r7, #18]
 8015908:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801590c:	2b40      	cmp	r3, #64	; 0x40
 801590e:	d153      	bne.n	80159b8 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8015910:	7cbb      	ldrb	r3, [r7, #18]
 8015912:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015916:	2b40      	cmp	r3, #64	; 0x40
 8015918:	d14c      	bne.n	80159b4 <nfcipInitiatorHandleDEP+0x364>
 801591a:	7cbb      	ldrb	r3, [r7, #18]
 801591c:	f003 0310 	and.w	r3, r3, #16
 8015920:	2b00      	cmp	r3, #0
 8015922:	d147      	bne.n	80159b4 <nfcipInitiatorHandleDEP+0x364>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8015924:	4b18      	ldr	r3, [pc, #96]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801592a:	461a      	mov	r2, r3
 801592c:	7cbb      	ldrb	r3, [r7, #18]
 801592e:	f003 0303 	and.w	r3, r3, #3
 8015932:	429a      	cmp	r2, r3
 8015934:	d11c      	bne.n	8015970 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8015936:	4b14      	ldr	r3, [pc, #80]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801593c:	3301      	adds	r3, #1
 801593e:	b2db      	uxtb	r3, r3
 8015940:	f003 0303 	and.w	r3, r3, #3
 8015944:	b2da      	uxtb	r2, r3
 8015946:	4b10      	ldr	r3, [pc, #64]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 801594c:	4b0e      	ldr	r3, [pc, #56]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801594e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8015952:	f083 0301 	eor.w	r3, r3, #1
 8015956:	b2db      	uxtb	r3, r3
 8015958:	2b00      	cmp	r3, #0
 801595a:	d001      	beq.n	8015960 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 801595c:	230b      	movs	r3, #11
 801595e:	e140      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 8015960:	f7ff fe5a 	bl	8015618 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8015964:	4b08      	ldr	r3, [pc, #32]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015966:	2204      	movs	r2, #4
 8015968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 801596c:	2300      	movs	r3, #0
 801596e:	e138      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8015970:	4b05      	ldr	r3, [pc, #20]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 8015972:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015976:	1c5a      	adds	r2, r3, #1
 8015978:	b2d1      	uxtb	r1, r2
 801597a:	4a03      	ldr	r2, [pc, #12]	; (8015988 <nfcipInitiatorHandleDEP+0x338>)
 801597c:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8015980:	2b02      	cmp	r3, #2
 8015982:	d903      	bls.n	801598c <nfcipInitiatorHandleDEP+0x33c>
                {
                    return ERR_PROTO;
 8015984:	230b      	movs	r3, #11
 8015986:	e12c      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
 8015988:	20003a70 	.word	0x20003a70
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 801598c:	4b97      	ldr	r3, [pc, #604]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 801598e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015992:	3b01      	subs	r3, #1
 8015994:	b2da      	uxtb	r2, r3
 8015996:	7cbb      	ldrb	r3, [r7, #18]
 8015998:	4053      	eors	r3, r2
 801599a:	b2db      	uxtb	r3, r3
 801599c:	f003 0303 	and.w	r3, r3, #3
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d105      	bne.n	80159b0 <nfcipInitiatorHandleDEP+0x360>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 80159a4:	4b91      	ldr	r3, [pc, #580]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 80159a6:	2205      	movs	r2, #5
 80159a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 80159ac:	2302      	movs	r3, #2
 80159ae:	e118      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 80159b0:	230b      	movs	r3, #11
 80159b2:	e116      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 80159b4:	230b      	movs	r3, #11
 80159b6:	e114      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 80159b8:	7cbb      	ldrb	r3, [r7, #18]
 80159ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80159be:	2b80      	cmp	r3, #128	; 0x80
 80159c0:	f040 8094 	bne.w	8015aec <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 80159c4:	7cbb      	ldrb	r3, [r7, #18]
 80159c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80159ca:	2b80      	cmp	r3, #128	; 0x80
 80159cc:	d146      	bne.n	8015a5c <nfcipInitiatorHandleDEP+0x40c>
 80159ce:	7cbb      	ldrb	r3, [r7, #18]
 80159d0:	f003 0310 	and.w	r3, r3, #16
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d141      	bne.n	8015a5c <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 80159d8:	4b84      	ldr	r3, [pc, #528]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 80159da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80159de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80159e2:	2b80      	cmp	r3, #128	; 0x80
 80159e4:	d138      	bne.n	8015a58 <nfcipInitiatorHandleDEP+0x408>
 80159e6:	4b81      	ldr	r3, [pc, #516]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 80159e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80159ec:	f003 0310 	and.w	r3, r3, #16
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d131      	bne.n	8015a58 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 80159f4:	4b7d      	ldr	r3, [pc, #500]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80159fc:	4b7b      	ldr	r3, [pc, #492]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 80159fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015a02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015a06:	2b80      	cmp	r3, #128	; 0x80
 8015a08:	d114      	bne.n	8015a34 <nfcipInitiatorHandleDEP+0x3e4>
 8015a0a:	4b78      	ldr	r3, [pc, #480]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015a10:	f003 0310 	and.w	r3, r3, #16
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d00d      	beq.n	8015a34 <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8015a18:	4b74      	ldr	r3, [pc, #464]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a1a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8015a1e:	4619      	mov	r1, r3
 8015a20:	2090      	movs	r0, #144	; 0x90
 8015a22:	f7ff fd99 	bl	8015558 <nfcipDEPControlMsg>
 8015a26:	4603      	mov	r3, r0
 8015a28:	82fb      	strh	r3, [r7, #22]
 8015a2a:	8afb      	ldrh	r3, [r7, #22]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d011      	beq.n	8015a54 <nfcipInitiatorHandleDEP+0x404>
 8015a30:	8afb      	ldrh	r3, [r7, #22]
 8015a32:	e0d6      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 8015a34:	4b6d      	ldr	r3, [pc, #436]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015a3a:	1c5a      	adds	r2, r3, #1
 8015a3c:	b2d1      	uxtb	r1, r2
 8015a3e:	4a6b      	ldr	r2, [pc, #428]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a40:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	d901      	bls.n	8015a4c <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 8015a48:	230b      	movs	r3, #11
 8015a4a:	e0ca      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8015a4c:	4b67      	ldr	r3, [pc, #412]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a4e:	2205      	movs	r2, #5
 8015a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8015a54:	2302      	movs	r3, #2
 8015a56:	e0c4      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 8015a58:	230b      	movs	r3, #11
 8015a5a:	e0c2      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8015a5c:	7cbb      	ldrb	r3, [r7, #18]
 8015a5e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015a62:	2b80      	cmp	r3, #128	; 0x80
 8015a64:	d140      	bne.n	8015ae8 <nfcipInitiatorHandleDEP+0x498>
 8015a66:	7cbb      	ldrb	r3, [r7, #18]
 8015a68:	f003 0310 	and.w	r3, r3, #16
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d03b      	beq.n	8015ae8 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8015a70:	4b5e      	ldr	r3, [pc, #376]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015a74:	7d7b      	ldrb	r3, [r7, #21]
 8015a76:	1c59      	adds	r1, r3, #1
 8015a78:	7579      	strb	r1, [r7, #21]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8015a80:	4b5a      	ldr	r3, [pc, #360]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8015a86:	1c5a      	adds	r2, r3, #1
 8015a88:	b2d1      	uxtb	r1, r2
 8015a8a:	4a58      	ldr	r2, [pc, #352]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a8c:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8015a90:	2b03      	cmp	r3, #3
 8015a92:	d80d      	bhi.n	8015ab0 <nfcipInitiatorHandleDEP+0x460>
 8015a94:	4b55      	ldr	r3, [pc, #340]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015a96:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8015a9a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015a9e:	2b80      	cmp	r3, #128	; 0x80
 8015aa0:	d108      	bne.n	8015ab4 <nfcipInitiatorHandleDEP+0x464>
 8015aa2:	4b52      	ldr	r3, [pc, #328]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015aa4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8015aa8:	f003 0310 	and.w	r3, r3, #16
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d101      	bne.n	8015ab4 <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8015ab0:	230b      	movs	r3, #11
 8015ab2:	e096      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8015ab4:	7c7b      	ldrb	r3, [r7, #17]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d002      	beq.n	8015ac0 <nfcipInitiatorHandleDEP+0x470>
 8015aba:	7c7b      	ldrb	r3, [r7, #17]
 8015abc:	2b3b      	cmp	r3, #59	; 0x3b
 8015abe:	d901      	bls.n	8015ac4 <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8015ac0:	230b      	movs	r3, #11
 8015ac2:	e08e      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8015ac4:	7c7b      	ldrb	r3, [r7, #17]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	2090      	movs	r0, #144	; 0x90
 8015aca:	f7ff fd45 	bl	8015558 <nfcipDEPControlMsg>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	82fb      	strh	r3, [r7, #22]
 8015ad2:	8afb      	ldrh	r3, [r7, #22]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d001      	beq.n	8015adc <nfcipInitiatorHandleDEP+0x48c>
 8015ad8:	8afb      	ldrh	r3, [r7, #22]
 8015ada:	e082      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 8015adc:	4a43      	ldr	r2, [pc, #268]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015ade:	7c7b      	ldrb	r3, [r7, #17]
 8015ae0:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 8015ae4:	2302      	movs	r3, #2
 8015ae6:	e07c      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 8015ae8:	230b      	movs	r3, #11
 8015aea:	e07a      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8015aec:	7cbb      	ldrb	r3, [r7, #18]
 8015aee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d174      	bne.n	8015be0 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8015af6:	4b3d      	ldr	r3, [pc, #244]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015afc:	461a      	mov	r2, r3
 8015afe:	7cbb      	ldrb	r3, [r7, #18]
 8015b00:	f003 0303 	and.w	r3, r3, #3
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d001      	beq.n	8015b0c <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 8015b08:	230b      	movs	r3, #11
 8015b0a:	e06a      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8015b0c:	4b37      	ldr	r3, [pc, #220]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015b12:	3301      	adds	r3, #1
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	f003 0303 	and.w	r3, r3, #3
 8015b1a:	b2da      	uxtb	r2, r3
 8015b1c:	4b33      	ldr	r3, [pc, #204]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 8015b22:	f7ff fd79 	bl	8015618 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8015b26:	7cfb      	ldrb	r3, [r7, #19]
 8015b28:	b29a      	uxth	r2, r3
 8015b2a:	7d3b      	ldrb	r3, [r7, #20]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	3b04      	subs	r3, #4
 8015b34:	b29a      	uxth	r2, r3
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8015b3a:	4b2c      	ldr	r3, [pc, #176]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b3c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8015b40:	461a      	mov	r2, r3
 8015b42:	7d3b      	ldrb	r3, [r7, #20]
 8015b44:	3304      	adds	r3, #4
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d013      	beq.n	8015b72 <nfcipInitiatorHandleDEP+0x522>
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00f      	beq.n	8015b72 <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8015b52:	4b26      	ldr	r3, [pc, #152]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b56:	4a25      	ldr	r2, [pc, #148]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b58:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8015b5c:	1898      	adds	r0, r3, r2
 8015b5e:	4b23      	ldr	r3, [pc, #140]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015b62:	7d3b      	ldrb	r3, [r7, #20]
 8015b64:	3304      	adds	r3, #4
 8015b66:	18d1      	adds	r1, r2, r3
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	f007 fce9 	bl	801d544 <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8015b72:	7cbb      	ldrb	r3, [r7, #18]
 8015b74:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d127      	bne.n	8015bcc <nfcipInitiatorHandleDEP+0x57c>
 8015b7c:	7cbb      	ldrb	r3, [r7, #18]
 8015b7e:	f003 0310 	and.w	r3, r3, #16
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d022      	beq.n	8015bcc <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 8015b86:	4b19      	ldr	r3, [pc, #100]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b88:	2201      	movs	r2, #1
 8015b8a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2201      	movs	r2, #1
 8015b92:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8015b94:	4b15      	ldr	r3, [pc, #84]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015b96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015b9a:	f003 0303 	and.w	r3, r3, #3
 8015b9e:	b2db      	uxtb	r3, r3
 8015ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba4:	b2d8      	uxtb	r0, r3
 8015ba6:	4b11      	ldr	r3, [pc, #68]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015ba8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015baa:	7d7b      	ldrb	r3, [r7, #21]
 8015bac:	1c59      	adds	r1, r3, #1
 8015bae:	7579      	strb	r1, [r7, #21]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	f7ff fccf 	bl	8015558 <nfcipDEPControlMsg>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	82fb      	strh	r3, [r7, #22]
 8015bbe:	8afb      	ldrh	r3, [r7, #22]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d001      	beq.n	8015bc8 <nfcipInitiatorHandleDEP+0x578>
 8015bc4:	8afb      	ldrh	r3, [r7, #22]
 8015bc6:	e00c      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8015bc8:	230d      	movs	r3, #13
 8015bca:	e00a      	b.n	8015be2 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8015bcc:	4b07      	ldr	r3, [pc, #28]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015bce:	2200      	movs	r2, #0
 8015bd0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8015bd4:	4b05      	ldr	r3, [pc, #20]	; (8015bec <nfcipInitiatorHandleDEP+0x59c>)
 8015bd6:	2204      	movs	r2, #4
 8015bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8015bdc:	2300      	movs	r3, #0
 8015bde:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8015be0:	8afb      	ldrh	r3, [r7, #22]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3718      	adds	r7, #24
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	20003a70 	.word	0x20003a70

08015bf0 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08c      	sub	sp, #48	; 0x30
 8015bf4:	af04      	add	r7, sp, #16
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
 8015bfc:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8015bfe:	230c      	movs	r3, #12
 8015c00:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8015c02:	2300      	movs	r3, #0
 8015c04:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 8015c06:	2300      	movs	r3, #0
 8015c08:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2200      	movs	r2, #0
 8015c14:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8015c16:	89fb      	ldrh	r3, [r7, #14]
 8015c18:	2b25      	cmp	r3, #37	; 0x25
 8015c1a:	d006      	beq.n	8015c2a <nfcipTargetHandleRX+0x3a>
 8015c1c:	2b25      	cmp	r3, #37	; 0x25
 8015c1e:	dc0a      	bgt.n	8015c36 <nfcipTargetHandleRX+0x46>
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d01d      	beq.n	8015c60 <nfcipTargetHandleRX+0x70>
 8015c24:	2b02      	cmp	r3, #2
 8015c26:	d003      	beq.n	8015c30 <nfcipTargetHandleRX+0x40>
 8015c28:	e005      	b.n	8015c36 <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8015c2a:	89fb      	ldrh	r3, [r7, #14]
 8015c2c:	f000 bc1a 	b.w	8016464 <nfcipTargetHandleRX+0x874>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8015c30:	2302      	movs	r3, #2
 8015c32:	f000 bc17 	b.w	8016464 <nfcipTargetHandleRX+0x874>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015c36:	4b9e      	ldr	r3, [pc, #632]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c3a:	4b9d      	ldr	r3, [pc, #628]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c3c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015c40:	4b9b      	ldr	r3, [pc, #620]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c44:	f04f 30ff 	mov.w	r0, #4294967295
 8015c48:	9002      	str	r0, [sp, #8]
 8015c4a:	2004      	movs	r0, #4
 8015c4c:	9001      	str	r0, [sp, #4]
 8015c4e:	9300      	str	r3, [sp, #0]
 8015c50:	460b      	mov	r3, r1
 8015c52:	2100      	movs	r1, #0
 8015c54:	2000      	movs	r0, #0
 8015c56:	f004 fcfb 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8015c5a:	2302      	movs	r3, #2
 8015c5c:	f000 bc02 	b.w	8016464 <nfcipTargetHandleRX+0x874>
            break;
 8015c60:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8015c62:	4b93      	ldr	r3, [pc, #588]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c66:	7f7b      	ldrb	r3, [r7, #29]
 8015c68:	1c59      	adds	r1, r3, #1
 8015c6a:	7779      	strb	r1, [r7, #29]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 8015c72:	4b8f      	ldr	r3, [pc, #572]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c76:	7f7b      	ldrb	r3, [r7, #29]
 8015c78:	1c59      	adds	r1, r3, #1
 8015c7a:	7779      	strb	r1, [r7, #29]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	2bd4      	cmp	r3, #212	; 0xd4
 8015c82:	d013      	beq.n	8015cac <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015c84:	4b8a      	ldr	r3, [pc, #552]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c88:	4b89      	ldr	r3, [pc, #548]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c8a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015c8e:	4b88      	ldr	r3, [pc, #544]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c92:	f04f 30ff 	mov.w	r0, #4294967295
 8015c96:	9002      	str	r0, [sp, #8]
 8015c98:	2004      	movs	r0, #4
 8015c9a:	9001      	str	r0, [sp, #4]
 8015c9c:	9300      	str	r3, [sp, #0]
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	f004 fcd4 	bl	801a650 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8015ca8:	2302      	movs	r3, #2
 8015caa:	e3db      	b.n	8016464 <nfcipTargetHandleRX+0x874>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8015cac:	4b80      	ldr	r3, [pc, #512]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015cae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015cb0:	7f7b      	ldrb	r3, [r7, #29]
 8015cb2:	1c59      	adds	r1, r3, #1
 8015cb4:	7779      	strb	r1, [r7, #29]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	2b0a      	cmp	r3, #10
 8015cbc:	d032      	beq.n	8015d24 <nfcipTargetHandleRX+0x134>
 8015cbe:	2b0a      	cmp	r3, #10
 8015cc0:	dc5d      	bgt.n	8015d7e <nfcipTargetHandleRX+0x18e>
 8015cc2:	2b06      	cmp	r3, #6
 8015cc4:	d06f      	beq.n	8015da6 <nfcipTargetHandleRX+0x1b6>
 8015cc6:	2b08      	cmp	r3, #8
 8015cc8:	d159      	bne.n	8015d7e <nfcipTargetHandleRX+0x18e>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8015cca:	4b79      	ldr	r3, [pc, #484]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015ccc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015cce:	7f7b      	ldrb	r3, [r7, #29]
 8015cd0:	1c59      	adds	r1, r3, #1
 8015cd2:	7779      	strb	r1, [r7, #29]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	781a      	ldrb	r2, [r3, #0]
 8015cd8:	4b75      	ldr	r3, [pc, #468]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015cda:	78db      	ldrb	r3, [r3, #3]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d102      	bne.n	8015ce6 <nfcipTargetHandleRX+0xf6>
 8015ce0:	7efb      	ldrb	r3, [r7, #27]
 8015ce2:	2b04      	cmp	r3, #4
 8015ce4:	d003      	beq.n	8015cee <nfcipTargetHandleRX+0xfe>
 8015ce6:	4b72      	ldr	r3, [pc, #456]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015ce8:	78db      	ldrb	r3, [r3, #3]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <nfcipTargetHandleRX+0x10c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8015cee:	4b70      	ldr	r3, [pc, #448]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015cf0:	78db      	ldrb	r3, [r3, #3]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d104      	bne.n	8015d00 <nfcipTargetHandleRX+0x110>
 8015cf6:	7efb      	ldrb	r3, [r7, #27]
 8015cf8:	2b03      	cmp	r3, #3
 8015cfa:	d001      	beq.n	8015d00 <nfcipTargetHandleRX+0x110>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8015cfc:	2302      	movs	r3, #2
 8015cfe:	e3b1      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8015d00:	f107 0114 	add.w	r1, r7, #20
 8015d04:	f04f 33ff 	mov.w	r3, #4294967295
 8015d08:	9301      	str	r3, [sp, #4]
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	9300      	str	r3, [sp, #0]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	2200      	movs	r2, #0
 8015d12:	2009      	movs	r0, #9
 8015d14:	f000 fbae 	bl	8016474 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 8015d18:	4b65      	ldr	r3, [pc, #404]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d1a:	2210      	movs	r2, #16
 8015d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8015d20:	2320      	movs	r3, #32
 8015d22:	e39f      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8015d24:	4b62      	ldr	r3, [pc, #392]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015d28:	7f7b      	ldrb	r3, [r7, #29]
 8015d2a:	1c59      	adds	r1, r3, #1
 8015d2c:	7779      	strb	r1, [r7, #29]
 8015d2e:	4413      	add	r3, r2
 8015d30:	781a      	ldrb	r2, [r3, #0]
 8015d32:	4b5f      	ldr	r3, [pc, #380]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d34:	78db      	ldrb	r3, [r3, #3]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d102      	bne.n	8015d40 <nfcipTargetHandleRX+0x150>
 8015d3a:	7efb      	ldrb	r3, [r7, #27]
 8015d3c:	2b04      	cmp	r3, #4
 8015d3e:	d003      	beq.n	8015d48 <nfcipTargetHandleRX+0x158>
 8015d40:	4b5b      	ldr	r3, [pc, #364]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d42:	78db      	ldrb	r3, [r3, #3]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d106      	bne.n	8015d56 <nfcipTargetHandleRX+0x166>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8015d48:	4b59      	ldr	r3, [pc, #356]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d4a:	78db      	ldrb	r3, [r3, #3]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d104      	bne.n	8015d5a <nfcipTargetHandleRX+0x16a>
 8015d50:	7efb      	ldrb	r3, [r7, #27]
 8015d52:	2b03      	cmp	r3, #3
 8015d54:	d901      	bls.n	8015d5a <nfcipTargetHandleRX+0x16a>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8015d56:	2302      	movs	r3, #2
 8015d58:	e384      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8015d5a:	f107 0114 	add.w	r1, r7, #20
 8015d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d62:	9301      	str	r3, [sp, #4]
 8015d64:	2300      	movs	r3, #0
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	200b      	movs	r0, #11
 8015d6e:	f000 fb81 	bl	8016474 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 8015d72:	4b4f      	ldr	r3, [pc, #316]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d74:	220c      	movs	r2, #12
 8015d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8015d7a:	231f      	movs	r3, #31
 8015d7c:	e372      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015d7e:	4b4c      	ldr	r3, [pc, #304]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015d82:	4b4b      	ldr	r3, [pc, #300]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d84:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015d88:	4b49      	ldr	r3, [pc, #292]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d90:	9002      	str	r0, [sp, #8]
 8015d92:	2004      	movs	r0, #4
 8015d94:	9001      	str	r0, [sp, #4]
 8015d96:	9300      	str	r3, [sp, #0]
 8015d98:	460b      	mov	r3, r1
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	f004 fc57 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 8015da2:	2302      	movs	r3, #2
 8015da4:	e35e      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            break;                                /* Continue to normal DEP processing */
 8015da6:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8015da8:	4b41      	ldr	r3, [pc, #260]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015daa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015dac:	7f7b      	ldrb	r3, [r7, #29]
 8015dae:	1c59      	adds	r1, r3, #1
 8015db0:	7779      	strb	r1, [r7, #29]
 8015db2:	4413      	add	r3, r2
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8015db8:	7ebb      	ldrb	r3, [r7, #26]
 8015dba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015dbe:	2b80      	cmp	r3, #128	; 0x80
 8015dc0:	d01d      	beq.n	8015dfe <nfcipTargetHandleRX+0x20e>
 8015dc2:	7ebb      	ldrb	r3, [r7, #26]
 8015dc4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015dc8:	2b40      	cmp	r3, #64	; 0x40
 8015dca:	d018      	beq.n	8015dfe <nfcipTargetHandleRX+0x20e>
 8015dcc:	7ebb      	ldrb	r3, [r7, #26]
 8015dce:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d013      	beq.n	8015dfe <nfcipTargetHandleRX+0x20e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015dd6:	4b36      	ldr	r3, [pc, #216]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015dd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015dda:	4b35      	ldr	r3, [pc, #212]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015ddc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015de0:	4b33      	ldr	r3, [pc, #204]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015de4:	f04f 30ff 	mov.w	r0, #4294967295
 8015de8:	9002      	str	r0, [sp, #8]
 8015dea:	2004      	movs	r0, #4
 8015dec:	9001      	str	r0, [sp, #4]
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	460b      	mov	r3, r1
 8015df2:	2100      	movs	r1, #0
 8015df4:	2000      	movs	r0, #0
 8015df6:	f004 fc2b 	bl	801a650 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8015dfa:	2302      	movs	r3, #2
 8015dfc:	e332      	b.n	8016464 <nfcipTargetHandleRX+0x874>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8015dfe:	4b2c      	ldr	r3, [pc, #176]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e00:	78db      	ldrb	r3, [r3, #3]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d03b      	beq.n	8015e7e <nfcipTargetHandleRX+0x28e>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8015e06:	7ebb      	ldrb	r3, [r7, #26]
 8015e08:	f003 0304 	and.w	r3, r3, #4
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d113      	bne.n	8015e38 <nfcipTargetHandleRX+0x248>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015e10:	4b27      	ldr	r3, [pc, #156]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015e14:	4b26      	ldr	r3, [pc, #152]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e16:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015e1a:	4b25      	ldr	r3, [pc, #148]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015e22:	9002      	str	r0, [sp, #8]
 8015e24:	2004      	movs	r0, #4
 8015e26:	9001      	str	r0, [sp, #4]
 8015e28:	9300      	str	r3, [sp, #0]
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	2000      	movs	r0, #0
 8015e30:	f004 fc0e 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8015e34:	2302      	movs	r3, #2
 8015e36:	e315      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8015e38:	4b1d      	ldr	r3, [pc, #116]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015e3c:	7f7b      	ldrb	r3, [r7, #29]
 8015e3e:	1c59      	adds	r1, r3, #1
 8015e40:	7779      	strb	r1, [r7, #29]
 8015e42:	4413      	add	r3, r2
 8015e44:	781a      	ldrb	r2, [r3, #0]
 8015e46:	4b1a      	ldr	r3, [pc, #104]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e48:	78db      	ldrb	r3, [r3, #3]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d013      	beq.n	8015e76 <nfcipTargetHandleRX+0x286>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015e4e:	4b18      	ldr	r3, [pc, #96]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015e52:	4b17      	ldr	r3, [pc, #92]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e54:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015e58:	4b15      	ldr	r3, [pc, #84]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e60:	9002      	str	r0, [sp, #8]
 8015e62:	2004      	movs	r0, #4
 8015e64:	9001      	str	r0, [sp, #4]
 8015e66:	9300      	str	r3, [sp, #0]
 8015e68:	460b      	mov	r3, r1
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	2000      	movs	r0, #0
 8015e6e:	f004 fbef 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8015e72:	2302      	movs	r3, #2
 8015e74:	e2f6      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8015e76:	7f3b      	ldrb	r3, [r7, #28]
 8015e78:	3301      	adds	r3, #1
 8015e7a:	773b      	strb	r3, [r7, #28]
 8015e7c:	e01a      	b.n	8015eb4 <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8015e7e:	7ebb      	ldrb	r3, [r7, #26]
 8015e80:	f003 0304 	and.w	r3, r3, #4
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d015      	beq.n	8015eb4 <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015e88:	4b09      	ldr	r3, [pc, #36]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015e8c:	4b08      	ldr	r3, [pc, #32]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e8e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015e92:	4b07      	ldr	r3, [pc, #28]	; (8015eb0 <nfcipTargetHandleRX+0x2c0>)
 8015e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e96:	f04f 30ff 	mov.w	r0, #4294967295
 8015e9a:	9002      	str	r0, [sp, #8]
 8015e9c:	2004      	movs	r0, #4
 8015e9e:	9001      	str	r0, [sp, #4]
 8015ea0:	9300      	str	r3, [sp, #0]
 8015ea2:	460b      	mov	r3, r1
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	2000      	movs	r0, #0
 8015ea8:	f004 fbd2 	bl	801a650 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8015eac:	2302      	movs	r3, #2
 8015eae:	e2d9      	b.n	8016464 <nfcipTargetHandleRX+0x874>
 8015eb0:	20003a70 	.word	0x20003a70
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8015eb4:	4b96      	ldr	r3, [pc, #600]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015eb6:	791b      	ldrb	r3, [r3, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d027      	beq.n	8015f0c <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8015ebc:	4b94      	ldr	r3, [pc, #592]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ebe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015ec0:	7f7b      	ldrb	r3, [r7, #29]
 8015ec2:	1c59      	adds	r1, r3, #1
 8015ec4:	7779      	strb	r1, [r7, #29]
 8015ec6:	4413      	add	r3, r2
 8015ec8:	781a      	ldrb	r2, [r3, #0]
 8015eca:	4b91      	ldr	r3, [pc, #580]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ecc:	78db      	ldrb	r3, [r3, #3]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d104      	bne.n	8015edc <nfcipTargetHandleRX+0x2ec>
 8015ed2:	7ebb      	ldrb	r3, [r7, #26]
 8015ed4:	f003 0304 	and.w	r3, r3, #4
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d113      	bne.n	8015f04 <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015edc:	4b8c      	ldr	r3, [pc, #560]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ede:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015ee0:	4b8b      	ldr	r3, [pc, #556]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ee2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015ee6:	4b8a      	ldr	r3, [pc, #552]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015eea:	f04f 30ff 	mov.w	r0, #4294967295
 8015eee:	9002      	str	r0, [sp, #8]
 8015ef0:	2004      	movs	r0, #4
 8015ef2:	9001      	str	r0, [sp, #4]
 8015ef4:	9300      	str	r3, [sp, #0]
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	2100      	movs	r1, #0
 8015efa:	2000      	movs	r0, #0
 8015efc:	f004 fba8 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8015f00:	2302      	movs	r3, #2
 8015f02:	e2af      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8015f04:	7f3b      	ldrb	r3, [r7, #28]
 8015f06:	3301      	adds	r3, #1
 8015f08:	773b      	strb	r3, [r7, #28]
 8015f0a:	e018      	b.n	8015f3e <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8015f0c:	7ebb      	ldrb	r3, [r7, #26]
 8015f0e:	f003 0308 	and.w	r3, r3, #8
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d013      	beq.n	8015f3e <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015f16:	4b7e      	ldr	r3, [pc, #504]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015f1a:	4b7d      	ldr	r3, [pc, #500]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f1c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015f20:	4b7b      	ldr	r3, [pc, #492]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f24:	f04f 30ff 	mov.w	r0, #4294967295
 8015f28:	9002      	str	r0, [sp, #8]
 8015f2a:	2004      	movs	r0, #4
 8015f2c:	9001      	str	r0, [sp, #4]
 8015f2e:	9300      	str	r3, [sp, #0]
 8015f30:	460b      	mov	r3, r1
 8015f32:	2100      	movs	r1, #0
 8015f34:	2000      	movs	r0, #0
 8015f36:	f004 fb8b 	bl	801a650 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 8015f3a:	2302      	movs	r3, #2
 8015f3c:	e292      	b.n	8016464 <nfcipTargetHandleRX+0x874>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8015f3e:	7ebb      	ldrb	r3, [r7, #26]
 8015f40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015f44:	2b40      	cmp	r3, #64	; 0x40
 8015f46:	f040 80c5 	bne.w	80160d4 <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8015f4a:	7ebb      	ldrb	r3, [r7, #26]
 8015f4c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015f50:	2b40      	cmp	r3, #64	; 0x40
 8015f52:	f040 8083 	bne.w	801605c <nfcipTargetHandleRX+0x46c>
 8015f56:	7ebb      	ldrb	r3, [r7, #26]
 8015f58:	f003 0310 	and.w	r3, r3, #16
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d17d      	bne.n	801605c <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8015f60:	4b6b      	ldr	r3, [pc, #428]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015f66:	461a      	mov	r2, r3
 8015f68:	7ebb      	ldrb	r3, [r7, #26]
 8015f6a:	f003 0303 	and.w	r3, r3, #3
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d149      	bne.n	8016006 <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 8015f72:	4b67      	ldr	r3, [pc, #412]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f74:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8015f78:	f083 0301 	eor.w	r3, r3, #1
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d013      	beq.n	8015faa <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8015f82:	4b63      	ldr	r3, [pc, #396]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015f86:	4b62      	ldr	r3, [pc, #392]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f88:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8015f8c:	4b60      	ldr	r3, [pc, #384]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f90:	f04f 30ff 	mov.w	r0, #4294967295
 8015f94:	9002      	str	r0, [sp, #8]
 8015f96:	2004      	movs	r0, #4
 8015f98:	9001      	str	r0, [sp, #4]
 8015f9a:	9300      	str	r3, [sp, #0]
 8015f9c:	460b      	mov	r3, r1
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	2000      	movs	r0, #0
 8015fa2:	f004 fb55 	bl	801a650 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 8015fa6:	2302      	movs	r3, #2
 8015fa8:	e25c      	b.n	8016464 <nfcipTargetHandleRX+0x874>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8015faa:	4b59      	ldr	r3, [pc, #356]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fb0:	f003 030f 	and.w	r3, r3, #15
 8015fb4:	330c      	adds	r3, #12
 8015fb6:	2201      	movs	r2, #1
 8015fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015fbc:	4a55      	ldr	r2, [pc, #340]	; (8016114 <nfcipTargetHandleRX+0x524>)
 8015fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8015fc2:	0b1b      	lsrs	r3, r3, #12
 8015fc4:	b29a      	uxth	r2, r3
 8015fc6:	4b52      	ldr	r3, [pc, #328]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fcc:	f003 030f 	and.w	r3, r3, #15
 8015fd0:	330c      	adds	r3, #12
 8015fd2:	2101      	movs	r1, #1
 8015fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8015fd8:	494e      	ldr	r1, [pc, #312]	; (8016114 <nfcipTargetHandleRX+0x524>)
 8015fda:	fba1 1303 	umull	r1, r3, r1, r3
 8015fde:	0b1b      	lsrs	r3, r3, #12
 8015fe0:	3301      	adds	r3, #1
 8015fe2:	08db      	lsrs	r3, r3, #3
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	3301      	adds	r3, #1
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7ef faec 	bl	80055cc <timerCalculateTimer>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	4a46      	ldr	r2, [pc, #280]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ff8:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8015ffa:	4b45      	ldr	r3, [pc, #276]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8015ffc:	220e      	movs	r2, #14
 8015ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8016002:	2300      	movs	r3, #0
 8016004:	e22e      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 8016006:	4b42      	ldr	r3, [pc, #264]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8016008:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801600c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016010:	2b80      	cmp	r3, #128	; 0x80
 8016012:	d15e      	bne.n	80160d2 <nfcipTargetHandleRX+0x4e2>
 8016014:	4b3e      	ldr	r3, [pc, #248]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8016016:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801601a:	f003 0310 	and.w	r3, r3, #16
 801601e:	2b00      	cmp	r3, #0
 8016020:	d157      	bne.n	80160d2 <nfcipTargetHandleRX+0x4e2>
 8016022:	4b3b      	ldr	r3, [pc, #236]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8016024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016028:	3b01      	subs	r3, #1
 801602a:	b2da      	uxtb	r2, r3
 801602c:	7ebb      	ldrb	r3, [r7, #26]
 801602e:	4053      	eors	r3, r2
 8016030:	b2db      	uxtb	r3, r3
 8016032:	f003 0303 	and.w	r3, r3, #3
 8016036:	2b00      	cmp	r3, #0
 8016038:	d14b      	bne.n	80160d2 <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 801603a:	4b35      	ldr	r3, [pc, #212]	; (8016110 <nfcipTargetHandleRX+0x520>)
 801603c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016040:	3b01      	subs	r3, #1
 8016042:	b2db      	uxtb	r3, r3
 8016044:	f003 0303 	and.w	r3, r3, #3
 8016048:	b2da      	uxtb	r2, r3
 801604a:	4b31      	ldr	r3, [pc, #196]	; (8016110 <nfcipTargetHandleRX+0x520>)
 801604c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8016050:	4b2f      	ldr	r3, [pc, #188]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8016052:	220f      	movs	r2, #15
 8016054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 8016058:	2302      	movs	r3, #2
 801605a:	e203      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 801605c:	7ebb      	ldrb	r3, [r7, #26]
 801605e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016062:	2b40      	cmp	r3, #64	; 0x40
 8016064:	d121      	bne.n	80160aa <nfcipTargetHandleRX+0x4ba>
 8016066:	7ebb      	ldrb	r3, [r7, #26]
 8016068:	f003 0310 	and.w	r3, r3, #16
 801606c:	2b00      	cmp	r3, #0
 801606e:	d01c      	beq.n	80160aa <nfcipTargetHandleRX+0x4ba>
 8016070:	4b27      	ldr	r3, [pc, #156]	; (8016110 <nfcipTargetHandleRX+0x520>)
 8016072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016076:	3b01      	subs	r3, #1
 8016078:	b2da      	uxtb	r2, r3
 801607a:	7ebb      	ldrb	r3, [r7, #26]
 801607c:	4053      	eors	r3, r2
 801607e:	b2db      	uxtb	r3, r3
 8016080:	f003 0303 	and.w	r3, r3, #3
 8016084:	2b00      	cmp	r3, #0
 8016086:	d110      	bne.n	80160aa <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8016088:	4b21      	ldr	r3, [pc, #132]	; (8016110 <nfcipTargetHandleRX+0x520>)
 801608a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801608e:	3b01      	subs	r3, #1
 8016090:	b2db      	uxtb	r3, r3
 8016092:	f003 0303 	and.w	r3, r3, #3
 8016096:	b2da      	uxtb	r2, r3
 8016098:	4b1d      	ldr	r3, [pc, #116]	; (8016110 <nfcipTargetHandleRX+0x520>)
 801609a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 801609e:	4b1c      	ldr	r3, [pc, #112]	; (8016110 <nfcipTargetHandleRX+0x520>)
 80160a0:	220f      	movs	r2, #15
 80160a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 80160a6:	2302      	movs	r3, #2
 80160a8:	e1dc      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80160aa:	4b19      	ldr	r3, [pc, #100]	; (8016110 <nfcipTargetHandleRX+0x520>)
 80160ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80160ae:	4b18      	ldr	r3, [pc, #96]	; (8016110 <nfcipTargetHandleRX+0x520>)
 80160b0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80160b4:	4b16      	ldr	r3, [pc, #88]	; (8016110 <nfcipTargetHandleRX+0x520>)
 80160b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160b8:	f04f 30ff 	mov.w	r0, #4294967295
 80160bc:	9002      	str	r0, [sp, #8]
 80160be:	2004      	movs	r0, #4
 80160c0:	9001      	str	r0, [sp, #4]
 80160c2:	9300      	str	r3, [sp, #0]
 80160c4:	460b      	mov	r3, r1
 80160c6:	2100      	movs	r1, #0
 80160c8:	2000      	movs	r0, #0
 80160ca:	f004 fac1 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 80160ce:	2302      	movs	r3, #2
 80160d0:	e1c8      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80160d2:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 80160d4:	7ebb      	ldrb	r3, [r7, #26]
 80160d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80160da:	2b80      	cmp	r3, #128	; 0x80
 80160dc:	f040 80ac 	bne.w	8016238 <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 80160e0:	7ebb      	ldrb	r3, [r7, #26]
 80160e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80160e6:	2b80      	cmp	r3, #128	; 0x80
 80160e8:	d116      	bne.n	8016118 <nfcipTargetHandleRX+0x528>
 80160ea:	7ebb      	ldrb	r3, [r7, #26]
 80160ec:	f003 0310 	and.w	r3, r3, #16
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d111      	bne.n	8016118 <nfcipTargetHandleRX+0x528>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 80160f4:	2100      	movs	r1, #0
 80160f6:	2080      	movs	r0, #128	; 0x80
 80160f8:	f7ff fa2e 	bl	8015558 <nfcipDEPControlMsg>
 80160fc:	4603      	mov	r3, r0
 80160fe:	83fb      	strh	r3, [r7, #30]
 8016100:	8bfb      	ldrh	r3, [r7, #30]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d001      	beq.n	801610a <nfcipTargetHandleRX+0x51a>
 8016106:	8bfb      	ldrh	r3, [r7, #30]
 8016108:	e1ac      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            return ERR_BUSY;
 801610a:	2302      	movs	r3, #2
 801610c:	e1aa      	b.n	8016464 <nfcipTargetHandleRX+0x874>
 801610e:	bf00      	nop
 8016110:	20003a70 	.word	0x20003a70
 8016114:	4d542005 	.word	0x4d542005
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8016118:	7ebb      	ldrb	r3, [r7, #26]
 801611a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801611e:	2b80      	cmp	r3, #128	; 0x80
 8016120:	d175      	bne.n	801620e <nfcipTargetHandleRX+0x61e>
 8016122:	7ebb      	ldrb	r3, [r7, #26]
 8016124:	f003 0310 	and.w	r3, r3, #16
 8016128:	2b00      	cmp	r3, #0
 801612a:	d070      	beq.n	801620e <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 801612c:	4bab      	ldr	r3, [pc, #684]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801612e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016132:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016136:	2b80      	cmp	r3, #128	; 0x80
 8016138:	d17d      	bne.n	8016236 <nfcipTargetHandleRX+0x646>
 801613a:	4ba8      	ldr	r3, [pc, #672]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801613c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016140:	f003 0310 	and.w	r3, r3, #16
 8016144:	2b00      	cmp	r3, #0
 8016146:	d076      	beq.n	8016236 <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 8016148:	4ba4      	ldr	r3, [pc, #656]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801614a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801614e:	4ba3      	ldr	r3, [pc, #652]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016150:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8016152:	7f7b      	ldrb	r3, [r7, #29]
 8016154:	1c58      	adds	r0, r3, #1
 8016156:	7778      	strb	r0, [r7, #29]
 8016158:	440b      	add	r3, r1
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	429a      	cmp	r2, r3
 801615e:	d013      	beq.n	8016188 <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8016160:	4b9e      	ldr	r3, [pc, #632]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016162:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016164:	4b9d      	ldr	r3, [pc, #628]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016166:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801616a:	4b9c      	ldr	r3, [pc, #624]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801616e:	f04f 30ff 	mov.w	r0, #4294967295
 8016172:	9002      	str	r0, [sp, #8]
 8016174:	2004      	movs	r0, #4
 8016176:	9001      	str	r0, [sp, #4]
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	460b      	mov	r3, r1
 801617c:	2100      	movs	r1, #0
 801617e:	2000      	movs	r0, #0
 8016180:	f004 fa66 	bl	801a650 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 8016184:	2302      	movs	r3, #2
 8016186:	e16d      	b.n	8016464 <nfcipTargetHandleRX+0x874>
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 8016188:	4b94      	ldr	r3, [pc, #592]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801618a:	2200      	movs	r2, #0
 801618c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 8016190:	4b92      	ldr	r3, [pc, #584]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016192:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8016196:	2b00      	cmp	r3, #0
 8016198:	d005      	beq.n	80161a6 <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 801619a:	4b90      	ldr	r3, [pc, #576]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801619c:	220f      	movs	r2, #15
 801619e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 80161a2:	2302      	movs	r3, #2
 80161a4:	e15e      	b.n	8016464 <nfcipTargetHandleRX+0x874>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 80161a6:	4b8d      	ldr	r3, [pc, #564]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80161a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80161ac:	461a      	mov	r2, r3
 80161ae:	4b8b      	ldr	r3, [pc, #556]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80161b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161b4:	f003 030f 	and.w	r3, r3, #15
 80161b8:	330c      	adds	r3, #12
 80161ba:	fa02 f303 	lsl.w	r3, r2, r3
 80161be:	4a88      	ldr	r2, [pc, #544]	; (80163e0 <nfcipTargetHandleRX+0x7f0>)
 80161c0:	fba2 2303 	umull	r2, r3, r2, r3
 80161c4:	0b1b      	lsrs	r3, r3, #12
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	4b84      	ldr	r3, [pc, #528]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80161ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80161ce:	4619      	mov	r1, r3
 80161d0:	4b82      	ldr	r3, [pc, #520]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80161d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161d6:	f003 030f 	and.w	r3, r3, #15
 80161da:	330c      	adds	r3, #12
 80161dc:	fa01 f303 	lsl.w	r3, r1, r3
 80161e0:	497f      	ldr	r1, [pc, #508]	; (80163e0 <nfcipTargetHandleRX+0x7f0>)
 80161e2:	fba1 1303 	umull	r1, r3, r1, r3
 80161e6:	0b1b      	lsrs	r3, r3, #12
 80161e8:	3301      	adds	r3, #1
 80161ea:	08db      	lsrs	r3, r3, #3
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	1ad3      	subs	r3, r2, r3
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	3301      	adds	r3, #1
 80161f4:	b29b      	uxth	r3, r3
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7ef f9e8 	bl	80055cc <timerCalculateTimer>
 80161fc:	4603      	mov	r3, r0
 80161fe:	4a77      	ldr	r2, [pc, #476]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016200:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8016202:	4b76      	ldr	r3, [pc, #472]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016204:	220e      	movs	r2, #14
 8016206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 801620a:	2302      	movs	r3, #2
 801620c:	e12a      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801620e:	4b73      	ldr	r3, [pc, #460]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016210:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016212:	4b72      	ldr	r3, [pc, #456]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016214:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8016218:	4b70      	ldr	r3, [pc, #448]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801621a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801621c:	f04f 30ff 	mov.w	r0, #4294967295
 8016220:	9002      	str	r0, [sp, #8]
 8016222:	2004      	movs	r0, #4
 8016224:	9001      	str	r0, [sp, #4]
 8016226:	9300      	str	r3, [sp, #0]
 8016228:	460b      	mov	r3, r1
 801622a:	2100      	movs	r1, #0
 801622c:	2000      	movs	r0, #0
 801622e:	f004 fa0f 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 8016232:	2302      	movs	r3, #2
 8016234:	e116      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8016236:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8016238:	7ebb      	ldrb	r3, [r7, #26]
 801623a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801623e:	2b00      	cmp	r3, #0
 8016240:	f040 810f 	bne.w	8016462 <nfcipTargetHandleRX+0x872>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 8016244:	4b65      	ldr	r3, [pc, #404]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801624a:	461a      	mov	r2, r3
 801624c:	7ebb      	ldrb	r3, [r7, #26]
 801624e:	f003 0303 	and.w	r3, r3, #3
 8016252:	429a      	cmp	r2, r3
 8016254:	d06e      	beq.n	8016334 <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 8016256:	4b61      	ldr	r3, [pc, #388]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016258:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801625c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016260:	2b80      	cmp	r3, #128	; 0x80
 8016262:	d153      	bne.n	801630c <nfcipTargetHandleRX+0x71c>
 8016264:	4b5d      	ldr	r3, [pc, #372]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016266:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 801626a:	f003 0310 	and.w	r3, r3, #16
 801626e:	2b00      	cmp	r3, #0
 8016270:	d14c      	bne.n	801630c <nfcipTargetHandleRX+0x71c>
 8016272:	4b5a      	ldr	r3, [pc, #360]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016278:	3b01      	subs	r3, #1
 801627a:	b2da      	uxtb	r2, r3
 801627c:	7ebb      	ldrb	r3, [r7, #26]
 801627e:	4053      	eors	r3, r2
 8016280:	b2db      	uxtb	r3, r3
 8016282:	f003 0303 	and.w	r3, r3, #3
 8016286:	2b00      	cmp	r3, #0
 8016288:	d140      	bne.n	801630c <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 801628a:	4b54      	ldr	r3, [pc, #336]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801628c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016290:	3b01      	subs	r3, #1
 8016292:	b2db      	uxtb	r3, r3
 8016294:	f003 0303 	and.w	r3, r3, #3
 8016298:	b2da      	uxtb	r2, r3
 801629a:	4b50      	ldr	r3, [pc, #320]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801629c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 80162a0:	7ebb      	ldrb	r3, [r7, #26]
 80162a2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d12a      	bne.n	8016300 <nfcipTargetHandleRX+0x710>
 80162aa:	7ebb      	ldrb	r3, [r7, #26]
 80162ac:	f003 0310 	and.w	r3, r3, #16
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d025      	beq.n	8016300 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 80162b4:	4b49      	ldr	r3, [pc, #292]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80162b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80162ba:	f003 0303 	and.w	r3, r3, #3
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162c4:	b2d8      	uxtb	r0, r3
 80162c6:	4b45      	ldr	r3, [pc, #276]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80162c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80162ca:	7f7b      	ldrb	r3, [r7, #29]
 80162cc:	1c59      	adds	r1, r3, #1
 80162ce:	7779      	strb	r1, [r7, #29]
 80162d0:	4413      	add	r3, r2
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	4619      	mov	r1, r3
 80162d6:	f7ff f93f 	bl	8015558 <nfcipDEPControlMsg>
 80162da:	4603      	mov	r3, r0
 80162dc:	83fb      	strh	r3, [r7, #30]
 80162de:	8bfb      	ldrh	r3, [r7, #30]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d001      	beq.n	80162e8 <nfcipTargetHandleRX+0x6f8>
 80162e4:	8bfb      	ldrh	r3, [r7, #30]
 80162e6:	e0bd      	b.n	8016464 <nfcipTargetHandleRX+0x874>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80162e8:	4b3c      	ldr	r3, [pc, #240]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80162ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80162ee:	3301      	adds	r3, #1
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	f003 0303 	and.w	r3, r3, #3
 80162f6:	b2da      	uxtb	r2, r3
 80162f8:	4b38      	ldr	r3, [pc, #224]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80162fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80162fe:	e003      	b.n	8016308 <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8016300:	4b36      	ldr	r3, [pc, #216]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016302:	220f      	movs	r2, #15
 8016304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8016308:	2302      	movs	r3, #2
 801630a:	e0ab      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801630c:	4b33      	ldr	r3, [pc, #204]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801630e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016310:	4b32      	ldr	r3, [pc, #200]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016312:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8016316:	4b31      	ldr	r3, [pc, #196]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801631a:	f04f 30ff 	mov.w	r0, #4294967295
 801631e:	9002      	str	r0, [sp, #8]
 8016320:	2004      	movs	r0, #4
 8016322:	9001      	str	r0, [sp, #4]
 8016324:	9300      	str	r3, [sp, #0]
 8016326:	460b      	mov	r3, r1
 8016328:	2100      	movs	r1, #0
 801632a:	2000      	movs	r0, #0
 801632c:	f004 f990 	bl	801a650 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 8016330:	2302      	movs	r3, #2
 8016332:	e097      	b.n	8016464 <nfcipTargetHandleRX+0x874>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8016334:	7efb      	ldrb	r3, [r7, #27]
 8016336:	b29a      	uxth	r2, r3
 8016338:	7f3b      	ldrb	r3, [r7, #28]
 801633a:	b29b      	uxth	r3, r3
 801633c:	1ad3      	subs	r3, r2, r3
 801633e:	b29b      	uxth	r3, r3
 8016340:	3b04      	subs	r3, #4
 8016342:	b29a      	uxth	r2, r3
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 8016348:	f7ff f966 	bl	8015618 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 801634c:	4b23      	ldr	r3, [pc, #140]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801634e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8016352:	461a      	mov	r2, r3
 8016354:	7f3b      	ldrb	r3, [r7, #28]
 8016356:	3304      	adds	r3, #4
 8016358:	429a      	cmp	r2, r3
 801635a:	d013      	beq.n	8016384 <nfcipTargetHandleRX+0x794>
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	881b      	ldrh	r3, [r3, #0]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d00f      	beq.n	8016384 <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8016364:	4b1d      	ldr	r3, [pc, #116]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016368:	4a1c      	ldr	r2, [pc, #112]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801636a:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 801636e:	1898      	adds	r0, r3, r2
 8016370:	4b1a      	ldr	r3, [pc, #104]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 8016372:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016374:	7f3b      	ldrb	r3, [r7, #28]
 8016376:	3304      	adds	r3, #4
 8016378:	18d1      	adds	r1, r2, r3
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	881b      	ldrh	r3, [r3, #0]
 801637e:	461a      	mov	r2, r3
 8016380:	f007 f8e0 	bl	801d544 <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8016384:	7ebb      	ldrb	r3, [r7, #26]
 8016386:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801638a:	2b00      	cmp	r3, #0
 801638c:	d137      	bne.n	80163fe <nfcipTargetHandleRX+0x80e>
 801638e:	7ebb      	ldrb	r3, [r7, #26]
 8016390:	f003 0310 	and.w	r3, r3, #16
 8016394:	2b00      	cmp	r3, #0
 8016396:	d032      	beq.n	80163fe <nfcipTargetHandleRX+0x80e>
        {
            gNfcip.isRxChaining = true;
 8016398:	4b10      	ldr	r3, [pc, #64]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 801639a:	2201      	movs	r2, #1
 801639c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2201      	movs	r2, #1
 80163a4:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 80163a6:	4b0d      	ldr	r3, [pc, #52]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80163a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80163ac:	f003 0303 	and.w	r3, r3, #3
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163b6:	b2d8      	uxtb	r0, r3
 80163b8:	4b08      	ldr	r3, [pc, #32]	; (80163dc <nfcipTargetHandleRX+0x7ec>)
 80163ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80163bc:	7f7b      	ldrb	r3, [r7, #29]
 80163be:	1c59      	adds	r1, r3, #1
 80163c0:	7779      	strb	r1, [r7, #29]
 80163c2:	4413      	add	r3, r2
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	4619      	mov	r1, r3
 80163c8:	f7ff f8c6 	bl	8015558 <nfcipDEPControlMsg>
 80163cc:	4603      	mov	r3, r0
 80163ce:	83fb      	strh	r3, [r7, #30]
 80163d0:	8bfb      	ldrh	r3, [r7, #30]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d006      	beq.n	80163e4 <nfcipTargetHandleRX+0x7f4>
 80163d6:	8bfb      	ldrh	r3, [r7, #30]
 80163d8:	e044      	b.n	8016464 <nfcipTargetHandleRX+0x874>
 80163da:	bf00      	nop
 80163dc:	20003a70 	.word	0x20003a70
 80163e0:	4d542005 	.word	0x4d542005
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80163e4:	4b21      	ldr	r3, [pc, #132]	; (801646c <nfcipTargetHandleRX+0x87c>)
 80163e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80163ea:	3301      	adds	r3, #1
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	f003 0303 	and.w	r3, r3, #3
 80163f2:	b2da      	uxtb	r2, r3
 80163f4:	4b1d      	ldr	r3, [pc, #116]	; (801646c <nfcipTargetHandleRX+0x87c>)
 80163f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 80163fa:	230d      	movs	r3, #13
 80163fc:	e032      	b.n	8016464 <nfcipTargetHandleRX+0x874>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 80163fe:	4b1b      	ldr	r3, [pc, #108]	; (801646c <nfcipTargetHandleRX+0x87c>)
 8016400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016404:	f003 030f 	and.w	r3, r3, #15
 8016408:	330c      	adds	r3, #12
 801640a:	2201      	movs	r2, #1
 801640c:	fa02 f303 	lsl.w	r3, r2, r3
 8016410:	4a17      	ldr	r2, [pc, #92]	; (8016470 <nfcipTargetHandleRX+0x880>)
 8016412:	fba2 2303 	umull	r2, r3, r2, r3
 8016416:	0b1b      	lsrs	r3, r3, #12
 8016418:	b29a      	uxth	r2, r3
 801641a:	4b14      	ldr	r3, [pc, #80]	; (801646c <nfcipTargetHandleRX+0x87c>)
 801641c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016420:	f003 030f 	and.w	r3, r3, #15
 8016424:	330c      	adds	r3, #12
 8016426:	2101      	movs	r1, #1
 8016428:	fa01 f303 	lsl.w	r3, r1, r3
 801642c:	4910      	ldr	r1, [pc, #64]	; (8016470 <nfcipTargetHandleRX+0x880>)
 801642e:	fba1 1303 	umull	r1, r3, r1, r3
 8016432:	0b1b      	lsrs	r3, r3, #12
 8016434:	3301      	adds	r3, #1
 8016436:	08db      	lsrs	r3, r3, #3
 8016438:	b29b      	uxth	r3, r3
 801643a:	1ad3      	subs	r3, r2, r3
 801643c:	b29b      	uxth	r3, r3
 801643e:	3301      	adds	r3, #1
 8016440:	b29b      	uxth	r3, r3
 8016442:	4618      	mov	r0, r3
 8016444:	f7ef f8c2 	bl	80055cc <timerCalculateTimer>
 8016448:	4603      	mov	r3, r0
 801644a:	4a08      	ldr	r2, [pc, #32]	; (801646c <nfcipTargetHandleRX+0x87c>)
 801644c:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 801644e:	4b07      	ldr	r3, [pc, #28]	; (801646c <nfcipTargetHandleRX+0x87c>)
 8016450:	220e      	movs	r2, #14
 8016452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 8016456:	4b05      	ldr	r3, [pc, #20]	; (801646c <nfcipTargetHandleRX+0x87c>)
 8016458:	2200      	movs	r2, #0
 801645a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 801645e:	2300      	movs	r3, #0
 8016460:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8016462:	8bfb      	ldrh	r3, [r7, #30]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3720      	adds	r7, #32
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	20003a70 	.word	0x20003a70
 8016470:	4d542005 	.word	0x4d542005

08016474 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b088      	sub	sp, #32
 8016478:	af00      	add	r7, sp, #0
 801647a:	60b9      	str	r1, [r7, #8]
 801647c:	607a      	str	r2, [r7, #4]
 801647e:	461a      	mov	r2, r3
 8016480:	4603      	mov	r3, r0
 8016482:	73fb      	strb	r3, [r7, #15]
 8016484:	4613      	mov	r3, r2
 8016486:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d101      	bne.n	8016492 <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 801648e:	2307      	movs	r3, #7
 8016490:	e177      	b.n	8016782 <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8016496:	89bb      	ldrh	r3, [r7, #12]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d002      	beq.n	80164a2 <nfcipTx+0x2e>
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d102      	bne.n	80164a8 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	3305      	adds	r3, #5
 80164a6:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 80164a8:	2300      	movs	r3, #0
 80164aa:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 80164ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80164b0:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 80164b6:	4aa0      	ldr	r2, [pc, #640]	; (8016738 <nfcipTx+0x2c4>)
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
 80164ba:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 80164be:	4b9e      	ldr	r3, [pc, #632]	; (8016738 <nfcipTx+0x2c4>)
 80164c0:	22ff      	movs	r2, #255	; 0xff
 80164c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 80164c6:	7bfb      	ldrb	r3, [r7, #15]
 80164c8:	2b0b      	cmp	r3, #11
 80164ca:	f200 8120 	bhi.w	801670e <nfcipTx+0x29a>
 80164ce:	a201      	add	r2, pc, #4	; (adr r2, 80164d4 <nfcipTx+0x60>)
 80164d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164d4:	08016505 	.word	0x08016505
 80164d8:	08016505 	.word	0x08016505
 80164dc:	080165f9 	.word	0x080165f9
 80164e0:	0801662f 	.word	0x0801662f
 80164e4:	0801662f 	.word	0x0801662f
 80164e8:	0801662f 	.word	0x0801662f
 80164ec:	08016657 	.word	0x08016657
 80164f0:	08016657 	.word	0x08016657
 80164f4:	0801663f 	.word	0x0801663f
 80164f8:	0801663f 	.word	0x0801663f
 80164fc:	0801663f 	.word	0x0801663f
 8016500:	0801663f 	.word	0x0801663f
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8016504:	220a      	movs	r2, #10
 8016506:	2100      	movs	r1, #0
 8016508:	6978      	ldr	r0, [r7, #20]
 801650a:	f007 f835 	bl	801d578 <memset>
 801650e:	4b8a      	ldr	r3, [pc, #552]	; (8016738 <nfcipTx+0x2c4>)
 8016510:	7c5b      	ldrb	r3, [r3, #17]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d006      	beq.n	8016524 <nfcipTx+0xb0>
 8016516:	4b88      	ldr	r3, [pc, #544]	; (8016738 <nfcipTx+0x2c4>)
 8016518:	7c5b      	ldrb	r3, [r3, #17]
 801651a:	461a      	mov	r2, r3
 801651c:	4987      	ldr	r1, [pc, #540]	; (801673c <nfcipTx+0x2c8>)
 801651e:	6978      	ldr	r0, [r7, #20]
 8016520:	f007 f802 	bl	801d528 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8016524:	8bfb      	ldrh	r3, [r7, #30]
 8016526:	330a      	adds	r3, #10
 8016528:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 801652a:	8bfb      	ldrh	r3, [r7, #30]
 801652c:	1c5a      	adds	r2, r3, #1
 801652e:	83fa      	strh	r2, [r7, #30]
 8016530:	461a      	mov	r2, r3
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	4413      	add	r3, r2
 8016536:	4a80      	ldr	r2, [pc, #512]	; (8016738 <nfcipTx+0x2c4>)
 8016538:	78d2      	ldrb	r2, [r2, #3]
 801653a:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 801653c:	8bfb      	ldrh	r3, [r7, #30]
 801653e:	1c5a      	adds	r2, r3, #1
 8016540:	83fa      	strh	r2, [r7, #30]
 8016542:	461a      	mov	r2, r3
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	4413      	add	r3, r2
 8016548:	4a7b      	ldr	r2, [pc, #492]	; (8016738 <nfcipTx+0x2c4>)
 801654a:	7952      	ldrb	r2, [r2, #5]
 801654c:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 801654e:	8bfb      	ldrh	r3, [r7, #30]
 8016550:	1c5a      	adds	r2, r3, #1
 8016552:	83fa      	strh	r2, [r7, #30]
 8016554:	461a      	mov	r2, r3
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	4413      	add	r3, r2
 801655a:	4a77      	ldr	r2, [pc, #476]	; (8016738 <nfcipTx+0x2c4>)
 801655c:	7992      	ldrb	r2, [r2, #6]
 801655e:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8016560:	7bfb      	ldrb	r3, [r7, #15]
 8016562:	2b01      	cmp	r3, #1
 8016564:	d109      	bne.n	801657a <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8016566:	8bfb      	ldrh	r3, [r7, #30]
 8016568:	1c5a      	adds	r2, r3, #1
 801656a:	83fa      	strh	r2, [r7, #30]
 801656c:	461a      	mov	r2, r3
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	4413      	add	r3, r2
 8016572:	4a71      	ldr	r2, [pc, #452]	; (8016738 <nfcipTx+0x2c4>)
 8016574:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8016578:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 801657a:	4b6f      	ldr	r3, [pc, #444]	; (8016738 <nfcipTx+0x2c4>)
 801657c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016580:	2b00      	cmp	r3, #0
 8016582:	d023      	beq.n	80165cc <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8016584:	4b6c      	ldr	r3, [pc, #432]	; (8016738 <nfcipTx+0x2c4>)
 8016586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801658a:	011b      	lsls	r3, r3, #4
 801658c:	b2db      	uxtb	r3, r3
 801658e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016592:	b2da      	uxtb	r2, r3
 8016594:	8bfb      	ldrh	r3, [r7, #30]
 8016596:	1c59      	adds	r1, r3, #1
 8016598:	83f9      	strh	r1, [r7, #30]
 801659a:	4619      	mov	r1, r3
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	440b      	add	r3, r1
 80165a0:	f042 0202 	orr.w	r2, r2, #2
 80165a4:	b2d2      	uxtb	r2, r2
 80165a6:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 80165a8:	8bfb      	ldrh	r3, [r7, #30]
 80165aa:	697a      	ldr	r2, [r7, #20]
 80165ac:	4413      	add	r3, r2
 80165ae:	4a62      	ldr	r2, [pc, #392]	; (8016738 <nfcipTx+0x2c4>)
 80165b0:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80165b4:	4962      	ldr	r1, [pc, #392]	; (8016740 <nfcipTx+0x2cc>)
 80165b6:	4618      	mov	r0, r3
 80165b8:	f006 ffb6 	bl	801d528 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 80165bc:	4b5e      	ldr	r3, [pc, #376]	; (8016738 <nfcipTx+0x2c4>)
 80165be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165c2:	b29a      	uxth	r2, r3
 80165c4:	8bfb      	ldrh	r3, [r7, #30]
 80165c6:	4413      	add	r3, r2
 80165c8:	83fb      	strh	r3, [r7, #30]
 80165ca:	e00e      	b.n	80165ea <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 80165cc:	4b5a      	ldr	r3, [pc, #360]	; (8016738 <nfcipTx+0x2c4>)
 80165ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80165d2:	011b      	lsls	r3, r3, #4
 80165d4:	b2da      	uxtb	r2, r3
 80165d6:	8bfb      	ldrh	r3, [r7, #30]
 80165d8:	1c59      	adds	r1, r3, #1
 80165da:	83f9      	strh	r1, [r7, #30]
 80165dc:	4619      	mov	r1, r3
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	440b      	add	r3, r1
 80165e2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80165e6:	b2d2      	uxtb	r2, r2
 80165e8:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 80165ea:	8bfb      	ldrh	r3, [r7, #30]
 80165ec:	3302      	adds	r3, #2
 80165ee:	2b40      	cmp	r3, #64	; 0x40
 80165f0:	f240 808f 	bls.w	8016712 <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 80165f4:	2307      	movs	r3, #7
 80165f6:	e0c4      	b.n	8016782 <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 80165f8:	220a      	movs	r2, #10
 80165fa:	2100      	movs	r1, #0
 80165fc:	6978      	ldr	r0, [r7, #20]
 80165fe:	f006 ffbb 	bl	801d578 <memset>
 8016602:	4b4d      	ldr	r3, [pc, #308]	; (8016738 <nfcipTx+0x2c4>)
 8016604:	7c5b      	ldrb	r3, [r3, #17]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d006      	beq.n	8016618 <nfcipTx+0x1a4>
 801660a:	4b4b      	ldr	r3, [pc, #300]	; (8016738 <nfcipTx+0x2c4>)
 801660c:	7c5b      	ldrb	r3, [r3, #17]
 801660e:	461a      	mov	r2, r3
 8016610:	494a      	ldr	r1, [pc, #296]	; (801673c <nfcipTx+0x2c8>)
 8016612:	6978      	ldr	r0, [r7, #20]
 8016614:	f006 ff88 	bl	801d528 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8016618:	8bfb      	ldrh	r3, [r7, #30]
 801661a:	330a      	adds	r3, #10
 801661c:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	3b01      	subs	r3, #1
 8016622:	61bb      	str	r3, [r7, #24]
 8016624:	4b44      	ldr	r3, [pc, #272]	; (8016738 <nfcipTx+0x2c4>)
 8016626:	78da      	ldrb	r2, [r3, #3]
 8016628:	69bb      	ldr	r3, [r7, #24]
 801662a:	701a      	strb	r2, [r3, #0]
            break;
 801662c:	e076      	b.n	801671c <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 801662e:	69bb      	ldr	r3, [r7, #24]
 8016630:	3b01      	subs	r3, #1
 8016632:	61bb      	str	r3, [r7, #24]
 8016634:	4b40      	ldr	r3, [pc, #256]	; (8016738 <nfcipTx+0x2c4>)
 8016636:	78da      	ldrb	r2, [r3, #3]
 8016638:	69bb      	ldr	r3, [r7, #24]
 801663a:	701a      	strb	r2, [r3, #0]
            break;
 801663c:	e06e      	b.n	801671c <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 801663e:	4b3e      	ldr	r3, [pc, #248]	; (8016738 <nfcipTx+0x2c4>)
 8016640:	78db      	ldrb	r3, [r3, #3]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d067      	beq.n	8016716 <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8016646:	69bb      	ldr	r3, [r7, #24]
 8016648:	3b01      	subs	r3, #1
 801664a:	61bb      	str	r3, [r7, #24]
 801664c:	4b3a      	ldr	r3, [pc, #232]	; (8016738 <nfcipTx+0x2c4>)
 801664e:	78da      	ldrb	r2, [r3, #3]
 8016650:	69bb      	ldr	r3, [r7, #24]
 8016652:	701a      	strb	r2, [r3, #0]
            }
            break;
 8016654:	e05f      	b.n	8016716 <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8016656:	4b38      	ldr	r3, [pc, #224]	; (8016738 <nfcipTx+0x2c4>)
 8016658:	78db      	ldrb	r3, [r3, #3]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d003      	beq.n	8016666 <nfcipTx+0x1f2>
 801665e:	7cfb      	ldrb	r3, [r7, #19]
 8016660:	f043 0304 	orr.w	r3, r3, #4
 8016664:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8016666:	4b34      	ldr	r3, [pc, #208]	; (8016738 <nfcipTx+0x2c4>)
 8016668:	791b      	ldrb	r3, [r3, #4]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d003      	beq.n	8016676 <nfcipTx+0x202>
 801666e:	7cfb      	ldrb	r3, [r7, #19]
 8016670:	f043 0308 	orr.w	r3, r3, #8
 8016674:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8016676:	4b30      	ldr	r3, [pc, #192]	; (8016738 <nfcipTx+0x2c4>)
 8016678:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801667c:	2b00      	cmp	r3, #0
 801667e:	d008      	beq.n	8016692 <nfcipTx+0x21e>
 8016680:	7cfb      	ldrb	r3, [r7, #19]
 8016682:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016686:	2b00      	cmp	r3, #0
 8016688:	d103      	bne.n	8016692 <nfcipTx+0x21e>
 801668a:	7cfb      	ldrb	r3, [r7, #19]
 801668c:	f043 0310 	orr.w	r3, r3, #16
 8016690:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8016692:	4a29      	ldr	r2, [pc, #164]	; (8016738 <nfcipTx+0x2c4>)
 8016694:	7cfb      	ldrb	r3, [r7, #19]
 8016696:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 801669a:	7cfb      	ldrb	r3, [r7, #19]
 801669c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80166a0:	2b80      	cmp	r3, #128	; 0x80
 80166a2:	d104      	bne.n	80166ae <nfcipTx+0x23a>
 80166a4:	7cfb      	ldrb	r3, [r7, #19]
 80166a6:	f003 0310 	and.w	r3, r3, #16
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d003      	beq.n	80166b6 <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 80166ae:	4a22      	ldr	r2, [pc, #136]	; (8016738 <nfcipTx+0x2c4>)
 80166b0:	7cfb      	ldrb	r3, [r7, #19]
 80166b2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 80166b6:	4b20      	ldr	r3, [pc, #128]	; (8016738 <nfcipTx+0x2c4>)
 80166b8:	791b      	ldrb	r3, [r3, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d006      	beq.n	80166cc <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	3b01      	subs	r3, #1
 80166c2:	61bb      	str	r3, [r7, #24]
 80166c4:	4b1c      	ldr	r3, [pc, #112]	; (8016738 <nfcipTx+0x2c4>)
 80166c6:	791a      	ldrb	r2, [r3, #4]
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80166cc:	4b1a      	ldr	r3, [pc, #104]	; (8016738 <nfcipTx+0x2c4>)
 80166ce:	78db      	ldrb	r3, [r3, #3]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d006      	beq.n	80166e2 <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	3b01      	subs	r3, #1
 80166d8:	61bb      	str	r3, [r7, #24]
 80166da:	4b17      	ldr	r3, [pc, #92]	; (8016738 <nfcipTx+0x2c4>)
 80166dc:	78da      	ldrb	r2, [r3, #3]
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	3b01      	subs	r3, #1
 80166e6:	61bb      	str	r3, [r7, #24]
 80166e8:	69bb      	ldr	r3, [r7, #24]
 80166ea:	7cfa      	ldrb	r2, [r7, #19]
 80166ec:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 80166ee:	89bb      	ldrh	r3, [r7, #12]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d112      	bne.n	801671a <nfcipTx+0x2a6>
 80166f4:	4b10      	ldr	r3, [pc, #64]	; (8016738 <nfcipTx+0x2c4>)
 80166f6:	789b      	ldrb	r3, [r3, #2]
 80166f8:	f003 0304 	and.w	r3, r3, #4
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00c      	beq.n	801671a <nfcipTx+0x2a6>
 8016700:	7cfb      	ldrb	r3, [r7, #19]
 8016702:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8016706:	2b00      	cmp	r3, #0
 8016708:	d107      	bne.n	801671a <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 801670a:	2307      	movs	r3, #7
 801670c:	e039      	b.n	8016782 <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 801670e:	2307      	movs	r3, #7
 8016710:	e037      	b.n	8016782 <nfcipTx+0x30e>
            break;
 8016712:	bf00      	nop
 8016714:	e002      	b.n	801671c <nfcipTx+0x2a8>
            break;
 8016716:	bf00      	nop
 8016718:	e000      	b.n	801671c <nfcipTx+0x2a8>
            break;
 801671a:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 801671c:	69bb      	ldr	r3, [r7, #24]
 801671e:	3b01      	subs	r3, #1
 8016720:	61bb      	str	r3, [r7, #24]
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	7bfa      	ldrb	r2, [r7, #15]
 8016726:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8016728:	7bfb      	ldrb	r3, [r7, #15]
 801672a:	f003 0301 	and.w	r3, r3, #1
 801672e:	b2db      	uxtb	r3, r3
 8016730:	2b00      	cmp	r3, #0
 8016732:	d107      	bne.n	8016744 <nfcipTx+0x2d0>
 8016734:	22d4      	movs	r2, #212	; 0xd4
 8016736:	e006      	b.n	8016746 <nfcipTx+0x2d2>
 8016738:	20003a70 	.word	0x20003a70
 801673c:	20003a77 	.word	0x20003a77
 8016740:	20003a82 	.word	0x20003a82
 8016744:	22d5      	movs	r2, #213	; 0xd5
 8016746:	69bb      	ldr	r3, [r7, #24]
 8016748:	3b01      	subs	r3, #1
 801674a:	61bb      	str	r3, [r7, #24]
 801674c:	69bb      	ldr	r3, [r7, #24]
 801674e:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8016750:	697a      	ldr	r2, [r7, #20]
 8016752:	69bb      	ldr	r3, [r7, #24]
 8016754:	1ad3      	subs	r3, r2, r3
 8016756:	b29a      	uxth	r2, r3
 8016758:	89bb      	ldrh	r3, [r7, #12]
 801675a:	4413      	add	r3, r2
 801675c:	b29a      	uxth	r2, r3
 801675e:	8bfb      	ldrh	r3, [r7, #30]
 8016760:	4413      	add	r3, r2
 8016762:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8016764:	4b09      	ldr	r3, [pc, #36]	; (801678c <nfcipTx+0x318>)
 8016766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801676a:	8bfa      	ldrh	r2, [r7, #30]
 801676c:	429a      	cmp	r2, r3
 801676e:	d901      	bls.n	8016774 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8016770:	2318      	movs	r3, #24
 8016772:	e006      	b.n	8016782 <nfcipTx+0x30e>
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8016774:	8bfb      	ldrh	r3, [r7, #30]
 8016776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016778:	4619      	mov	r1, r3
 801677a:	69b8      	ldr	r0, [r7, #24]
 801677c:	f000 fe2a 	bl	80173d4 <nfcipDataTx>
 8016780:	4603      	mov	r3, r0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3720      	adds	r7, #32
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	20003a70 	.word	0x20003a70

08016790 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d034      	beq.n	8016808 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 801679e:	2250      	movs	r2, #80	; 0x50
 80167a0:	6879      	ldr	r1, [r7, #4]
 80167a2:	481b      	ldr	r0, [pc, #108]	; (8016810 <nfcipConfig+0x80>)
 80167a4:	f006 fec0 	bl	801d528 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 80167a8:	4b19      	ldr	r3, [pc, #100]	; (8016810 <nfcipConfig+0x80>)
 80167aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80167ae:	2b0e      	cmp	r3, #14
 80167b0:	bf28      	it	cs
 80167b2:	230e      	movcs	r3, #14
 80167b4:	b2da      	uxtb	r2, r3
 80167b6:	4b16      	ldr	r3, [pc, #88]	; (8016810 <nfcipConfig+0x80>)
 80167b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 80167bc:	4b14      	ldr	r3, [pc, #80]	; (8016810 <nfcipConfig+0x80>)
 80167be:	78db      	ldrb	r3, [r3, #3]
 80167c0:	2b0e      	cmp	r3, #14
 80167c2:	bf28      	it	cs
 80167c4:	230e      	movcs	r3, #14
 80167c6:	b2da      	uxtb	r2, r3
 80167c8:	4b11      	ldr	r3, [pc, #68]	; (8016810 <nfcipConfig+0x80>)
 80167ca:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 80167cc:	4b10      	ldr	r3, [pc, #64]	; (8016810 <nfcipConfig+0x80>)
 80167ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80167d2:	3301      	adds	r3, #1
 80167d4:	019b      	lsls	r3, r3, #6
 80167d6:	2bfd      	cmp	r3, #253	; 0xfd
 80167d8:	d807      	bhi.n	80167ea <nfcipConfig+0x5a>
 80167da:	4b0d      	ldr	r3, [pc, #52]	; (8016810 <nfcipConfig+0x80>)
 80167dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80167e0:	3301      	adds	r3, #1
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	019b      	lsls	r3, r3, #6
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	e000      	b.n	80167ec <nfcipConfig+0x5c>
 80167ea:	23fe      	movs	r3, #254	; 0xfe
 80167ec:	4a08      	ldr	r2, [pc, #32]	; (8016810 <nfcipConfig+0x80>)
 80167ee:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 80167f2:	4b07      	ldr	r3, [pc, #28]	; (8016810 <nfcipConfig+0x80>)
 80167f4:	781b      	ldrb	r3, [r3, #0]
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d101      	bne.n	80167fe <nfcipConfig+0x6e>
 80167fa:	220a      	movs	r2, #10
 80167fc:	e000      	b.n	8016800 <nfcipConfig+0x70>
 80167fe:	2201      	movs	r2, #1
 8016800:	4b03      	ldr	r3, [pc, #12]	; (8016810 <nfcipConfig+0x80>)
 8016802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8016806:	e000      	b.n	801680a <nfcipConfig+0x7a>
        return;
 8016808:	bf00      	nop
}
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}
 8016810:	20003a70 	.word	0x20003a70

08016814 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 8016814:	b5b0      	push	{r4, r5, r7, lr}
 8016816:	b086      	sub	sp, #24
 8016818:	af02      	add	r7, sp, #8
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 801681e:	2314      	movs	r3, #20
 8016820:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 8016822:	4b93      	ldr	r3, [pc, #588]	; (8016a70 <nfcipRun+0x25c>)
 8016824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016828:	2b10      	cmp	r3, #16
 801682a:	f200 8117 	bhi.w	8016a5c <nfcipRun+0x248>
 801682e:	a201      	add	r2, pc, #4	; (adr r2, 8016834 <nfcipRun+0x20>)
 8016830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016834:	08016879 	.word	0x08016879
 8016838:	08016a5d 	.word	0x08016a5d
 801683c:	08016a5d 	.word	0x08016a5d
 8016840:	08016a5d 	.word	0x08016a5d
 8016844:	08016879 	.word	0x08016879
 8016848:	0801687d 	.word	0x0801687d
 801684c:	080168d9 	.word	0x080168d9
 8016850:	08016a5d 	.word	0x08016a5d
 8016854:	08016a5d 	.word	0x08016a5d
 8016858:	08016a5d 	.word	0x08016a5d
 801685c:	08016a5d 	.word	0x08016a5d
 8016860:	08016a5d 	.word	0x08016a5d
 8016864:	08016879 	.word	0x08016879
 8016868:	08016a23 	.word	0x08016a23
 801686c:	08016901 	.word	0x08016901
 8016870:	080169ab 	.word	0x080169ab
 8016874:	08016879 	.word	0x08016879
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8016878:	2300      	movs	r3, #0
 801687a:	e0f5      	b.n	8016a68 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 801687c:	4b7c      	ldr	r3, [pc, #496]	; (8016a70 <nfcipRun+0x25c>)
 801687e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016880:	4b7b      	ldr	r3, [pc, #492]	; (8016a70 <nfcipRun+0x25c>)
 8016882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016884:	4a7a      	ldr	r2, [pc, #488]	; (8016a70 <nfcipRun+0x25c>)
 8016886:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 801688a:	189c      	adds	r4, r3, r2
 801688c:	4b78      	ldr	r3, [pc, #480]	; (8016a70 <nfcipRun+0x25c>)
 801688e:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8016892:	4b77      	ldr	r3, [pc, #476]	; (8016a70 <nfcipRun+0x25c>)
 8016894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016898:	f003 0303 	and.w	r3, r3, #3
 801689c:	b2db      	uxtb	r3, r3
 801689e:	4a74      	ldr	r2, [pc, #464]	; (8016a70 <nfcipRun+0x25c>)
 80168a0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80168a2:	4a73      	ldr	r2, [pc, #460]	; (8016a70 <nfcipRun+0x25c>)
 80168a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80168a6:	440a      	add	r2, r1
 80168a8:	9201      	str	r2, [sp, #4]
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	462b      	mov	r3, r5
 80168ae:	4622      	mov	r2, r4
 80168b0:	4601      	mov	r1, r0
 80168b2:	2006      	movs	r0, #6
 80168b4:	f7ff fdde 	bl	8016474 <nfcipTx>
 80168b8:	4603      	mov	r3, r0
 80168ba:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 80168bc:	89fb      	ldrh	r3, [r7, #14]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d005      	beq.n	80168ce <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80168c2:	4b6b      	ldr	r3, [pc, #428]	; (8016a70 <nfcipRun+0x25c>)
 80168c4:	2204      	movs	r2, #4
 80168c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 80168ca:	89fb      	ldrh	r3, [r7, #14]
 80168cc:	e0cc      	b.n	8016a68 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 80168ce:	4b68      	ldr	r3, [pc, #416]	; (8016a70 <nfcipRun+0x25c>)
 80168d0:	2206      	movs	r2, #6
 80168d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 80168d6:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 80168d8:	2000      	movs	r0, #0
 80168da:	f000 fd9b 	bl	8017414 <nfcipDataRx>
 80168de:	4603      	mov	r3, r0
 80168e0:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 80168e2:	89fb      	ldrh	r3, [r7, #14]
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	f000 80bb 	beq.w	8016a60 <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 80168ea:	4b61      	ldr	r3, [pc, #388]	; (8016a70 <nfcipRun+0x25c>)
 80168ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168ee:	8819      	ldrh	r1, [r3, #0]
 80168f0:	89f8      	ldrh	r0, [r7, #14]
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	f7fe feab 	bl	8015650 <nfcipInitiatorHandleDEP>
 80168fa:	4603      	mov	r3, r0
 80168fc:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80168fe:	e0af      	b.n	8016a60 <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 8016900:	4b5b      	ldr	r3, [pc, #364]	; (8016a70 <nfcipRun+0x25c>)
 8016902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016904:	4618      	mov	r0, r3
 8016906:	f7ee fe6f 	bl	80055e8 <timerIsExpired>
 801690a:	4603      	mov	r3, r0
 801690c:	f083 0301 	eor.w	r3, r3, #1
 8016910:	b2db      	uxtb	r3, r3
 8016912:	2b00      	cmp	r3, #0
 8016914:	d001      	beq.n	801691a <nfcipRun+0x106>
            {
                return ERR_BUSY;
 8016916:	2302      	movs	r3, #2
 8016918:	e0a6      	b.n	8016a68 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 801691a:	4b55      	ldr	r3, [pc, #340]	; (8016a70 <nfcipRun+0x25c>)
 801691c:	789b      	ldrb	r3, [r3, #2]
 801691e:	f003 0301 	and.w	r3, r3, #1
 8016922:	2b00      	cmp	r3, #0
 8016924:	d001      	beq.n	801692a <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 8016926:	2304      	movs	r3, #4
 8016928:	e09e      	b.n	8016a68 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 801692a:	4b51      	ldr	r3, [pc, #324]	; (8016a70 <nfcipRun+0x25c>)
 801692c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8016930:	1c5a      	adds	r2, r3, #1
 8016932:	b2d1      	uxtb	r1, r2
 8016934:	4a4e      	ldr	r2, [pc, #312]	; (8016a70 <nfcipRun+0x25c>)
 8016936:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 801693a:	2b03      	cmp	r3, #3
 801693c:	d901      	bls.n	8016942 <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 801693e:	230b      	movs	r3, #11
 8016940:	e092      	b.n	8016a68 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 8016942:	4b4b      	ldr	r3, [pc, #300]	; (8016a70 <nfcipRun+0x25c>)
 8016944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016948:	f003 030f 	and.w	r3, r3, #15
 801694c:	330c      	adds	r3, #12
 801694e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8016952:	fa22 f303 	lsr.w	r3, r2, r3
 8016956:	2b3a      	cmp	r3, #58	; 0x3a
 8016958:	d80b      	bhi.n	8016972 <nfcipRun+0x15e>
 801695a:	4b45      	ldr	r3, [pc, #276]	; (8016a70 <nfcipRun+0x25c>)
 801695c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016960:	f003 030f 	and.w	r3, r3, #15
 8016964:	330c      	adds	r3, #12
 8016966:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801696a:	fa22 f303 	lsr.w	r3, r2, r3
 801696e:	b2db      	uxtb	r3, r3
 8016970:	e000      	b.n	8016974 <nfcipRun+0x160>
 8016972:	233b      	movs	r3, #59	; 0x3b
 8016974:	4a3e      	ldr	r2, [pc, #248]	; (8016a70 <nfcipRun+0x25c>)
 8016976:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 801697a:	4b3d      	ldr	r3, [pc, #244]	; (8016a70 <nfcipRun+0x25c>)
 801697c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016980:	4619      	mov	r1, r3
 8016982:	2090      	movs	r0, #144	; 0x90
 8016984:	f7fe fde8 	bl	8015558 <nfcipDEPControlMsg>
 8016988:	4603      	mov	r3, r0
 801698a:	81fb      	strh	r3, [r7, #14]
 801698c:	89fb      	ldrh	r3, [r7, #14]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d001      	beq.n	8016996 <nfcipRun+0x182>
 8016992:	89fb      	ldrh	r3, [r7, #14]
 8016994:	e068      	b.n	8016a68 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 8016996:	4b36      	ldr	r3, [pc, #216]	; (8016a70 <nfcipRun+0x25c>)
 8016998:	2201      	movs	r2, #1
 801699a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 801699e:	4b34      	ldr	r3, [pc, #208]	; (8016a70 <nfcipRun+0x25c>)
 80169a0:	220d      	movs	r2, #13
 80169a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 80169a6:	2302      	movs	r3, #2
 80169a8:	e05e      	b.n	8016a68 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 80169aa:	4b31      	ldr	r3, [pc, #196]	; (8016a70 <nfcipRun+0x25c>)
 80169ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80169ae:	4b30      	ldr	r3, [pc, #192]	; (8016a70 <nfcipRun+0x25c>)
 80169b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80169b2:	4a2f      	ldr	r2, [pc, #188]	; (8016a70 <nfcipRun+0x25c>)
 80169b4:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80169b8:	441a      	add	r2, r3
 80169ba:	4b2d      	ldr	r3, [pc, #180]	; (8016a70 <nfcipRun+0x25c>)
 80169bc:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 80169c0:	4b2b      	ldr	r3, [pc, #172]	; (8016a70 <nfcipRun+0x25c>)
 80169c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80169c6:	f003 0303 	and.w	r3, r3, #3
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	f04f 34ff 	mov.w	r4, #4294967295
 80169d0:	9401      	str	r4, [sp, #4]
 80169d2:	9300      	str	r3, [sp, #0]
 80169d4:	4603      	mov	r3, r0
 80169d6:	2007      	movs	r0, #7
 80169d8:	f7ff fd4c 	bl	8016474 <nfcipTx>
 80169dc:	4603      	mov	r3, r0
 80169de:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 80169e0:	4b23      	ldr	r3, [pc, #140]	; (8016a70 <nfcipRun+0x25c>)
 80169e2:	2200      	movs	r2, #0
 80169e4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 80169e8:	4b21      	ldr	r3, [pc, #132]	; (8016a70 <nfcipRun+0x25c>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80169f0:	4b1f      	ldr	r3, [pc, #124]	; (8016a70 <nfcipRun+0x25c>)
 80169f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80169f6:	3301      	adds	r3, #1
 80169f8:	b2db      	uxtb	r3, r3
 80169fa:	f003 0303 	and.w	r3, r3, #3
 80169fe:	b2da      	uxtb	r2, r3
 8016a00:	4b1b      	ldr	r3, [pc, #108]	; (8016a70 <nfcipRun+0x25c>)
 8016a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 8016a06:	89fb      	ldrh	r3, [r7, #14]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d005      	beq.n	8016a18 <nfcipRun+0x204>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 8016a0c:	4b18      	ldr	r3, [pc, #96]	; (8016a70 <nfcipRun+0x25c>)
 8016a0e:	220c      	movs	r2, #12
 8016a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 8016a14:	89fb      	ldrh	r3, [r7, #14]
 8016a16:	e027      	b.n	8016a68 <nfcipRun+0x254>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 8016a18:	4b15      	ldr	r3, [pc, #84]	; (8016a70 <nfcipRun+0x25c>)
 8016a1a:	220d      	movs	r2, #13
 8016a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 8016a20:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 8016a22:	4b13      	ldr	r3, [pc, #76]	; (8016a70 <nfcipRun+0x25c>)
 8016a24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d006      	beq.n	8016a3a <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 8016a2c:	4b10      	ldr	r3, [pc, #64]	; (8016a70 <nfcipRun+0x25c>)
 8016a2e:	2200      	movs	r2, #0
 8016a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 8016a34:	2300      	movs	r3, #0
 8016a36:	81fb      	strh	r3, [r7, #14]
 8016a38:	e004      	b.n	8016a44 <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	f000 fcea 	bl	8017414 <nfcipDataRx>
 8016a40:	4603      	mov	r3, r0
 8016a42:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 8016a44:	89fb      	ldrh	r3, [r7, #14]
 8016a46:	2b02      	cmp	r3, #2
 8016a48:	d00c      	beq.n	8016a64 <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 8016a4a:	89fb      	ldrh	r3, [r7, #14]
 8016a4c:	683a      	ldr	r2, [r7, #0]
 8016a4e:	6879      	ldr	r1, [r7, #4]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7ff f8cd 	bl	8015bf0 <nfcipTargetHandleRX>
 8016a56:	4603      	mov	r3, r0
 8016a58:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8016a5a:	e003      	b.n	8016a64 <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8016a5c:	bf00      	nop
 8016a5e:	e002      	b.n	8016a66 <nfcipRun+0x252>
            break;
 8016a60:	bf00      	nop
 8016a62:	e000      	b.n	8016a66 <nfcipRun+0x252>
            break;
 8016a64:	bf00      	nop
    }
    return ret;
 8016a66:	89fb      	ldrh	r3, [r7, #14]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3710      	adds	r7, #16
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8016a70:	20003a70 	.word	0x20003a70

08016a74 <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 8016a78:	4b28      	ldr	r3, [pc, #160]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 8016a80:	4b26      	ldr	r3, [pc, #152]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016a82:	2200      	movs	r2, #0
 8016a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 8016a88:	4b24      	ldr	r3, [pc, #144]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 8016a90:	4b22      	ldr	r3, [pc, #136]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016a92:	2200      	movs	r2, #0
 8016a94:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8016a98:	4b20      	ldr	r3, [pc, #128]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8016aa0:	4b1e      	ldr	r3, [pc, #120]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016aa2:	2202      	movs	r2, #2
 8016aa4:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 8016aa6:	4b1d      	ldr	r3, [pc, #116]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8016aac:	4b1b      	ldr	r3, [pc, #108]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016aae:	2200      	movs	r2, #0
 8016ab0:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8016ab2:	4b1a      	ldr	r3, [pc, #104]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8016ab8:	4b18      	ldr	r3, [pc, #96]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016aba:	2200      	movs	r2, #0
 8016abc:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 8016abe:	4b17      	ldr	r3, [pc, #92]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016ac0:	2203      	movs	r2, #3
 8016ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8016ac6:	4b15      	ldr	r3, [pc, #84]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016ac8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016acc:	3301      	adds	r3, #1
 8016ace:	019b      	lsls	r3, r3, #6
 8016ad0:	2bfd      	cmp	r3, #253	; 0xfd
 8016ad2:	d807      	bhi.n	8016ae4 <rfalNfcDepInitialize+0x70>
 8016ad4:	4b11      	ldr	r3, [pc, #68]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016ad6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016ada:	3301      	adds	r3, #1
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	019b      	lsls	r3, r3, #6
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	e000      	b.n	8016ae6 <rfalNfcDepInitialize+0x72>
 8016ae4:	23fe      	movs	r3, #254	; 0xfe
 8016ae6:	4a0d      	ldr	r2, [pc, #52]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016ae8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 8016aec:	4b0b      	ldr	r3, [pc, #44]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016aee:	2200      	movs	r2, #0
 8016af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 8016af4:	4b09      	ldr	r3, [pc, #36]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016af6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016afa:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 8016afc:	4b07      	ldr	r3, [pc, #28]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016afe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016b02:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 8016b04:	4b05      	ldr	r3, [pc, #20]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016b06:	2200      	movs	r2, #0
 8016b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 8016b0c:	4b03      	ldr	r3, [pc, #12]	; (8016b1c <rfalNfcDepInitialize+0xa8>)
 8016b0e:	2200      	movs	r2, #0
 8016b10:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 8016b12:	f7fe fd81 	bl	8015618 <nfcipClearCounters>
}
 8016b16:	bf00      	nop
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	20003a70 	.word	0x20003a70

08016b20 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( rfalNfcDepDEPParams *DEPParams )
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	7ada      	ldrb	r2, [r3, #11]
 8016b2c:	4b2f      	ldr	r3, [pc, #188]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b2e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	4a2d      	ldr	r2, [pc, #180]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b38:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	68db      	ldr	r3, [r3, #12]
 8016b3e:	4a2b      	ldr	r2, [pc, #172]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b40:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	891a      	ldrh	r2, [r3, #8]
 8016b46:	4b29      	ldr	r3, [pc, #164]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	8a1a      	ldrh	r2, [r3, #16]
 8016b50:	4b26      	ldr	r3, [pc, #152]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	7a9a      	ldrb	r2, [r3, #10]
 8016b5a:	4b24      	ldr	r3, [pc, #144]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	7c9a      	ldrb	r2, [r3, #18]
 8016b64:	4b21      	ldr	r3, [pc, #132]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b66:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	2bff      	cmp	r3, #255	; 0xff
 8016b70:	d007      	beq.n	8016b82 <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	2b0e      	cmp	r3, #14
 8016b78:	bf28      	it	cs
 8016b7a:	230e      	movcs	r3, #14
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	4b1b      	ldr	r3, [pc, #108]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b80:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	695b      	ldr	r3, [r3, #20]
 8016b86:	4a19      	ldr	r2, [pc, #100]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b88:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	699b      	ldr	r3, [r3, #24]
 8016b8e:	4a17      	ldr	r2, [pc, #92]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b90:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	8b9a      	ldrh	r2, [r3, #28]
 8016b96:	4b15      	ldr	r3, [pc, #84]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8016b9c:	4b13      	ldr	r3, [pc, #76]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	2b01      	cmp	r3, #1
 8016ba2:	d119      	bne.n	8016bd8 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	891b      	ldrh	r3, [r3, #8]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d010      	beq.n	8016bce <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8016bac:	4b0f      	ldr	r3, [pc, #60]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016bae:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8016bb2:	f083 0301 	eor.w	r3, r3, #1
 8016bb6:	b2db      	uxtb	r3, r3
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d004      	beq.n	8016bc6 <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8016bbc:	4b0b      	ldr	r3, [pc, #44]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016bbe:	220f      	movs	r2, #15
 8016bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 8016bc4:	e00e      	b.n	8016be4 <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 8016bc6:	4b09      	ldr	r3, [pc, #36]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016bc8:	2201      	movs	r2, #1
 8016bca:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8016bce:	4b07      	ldr	r3, [pc, #28]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016bd0:	220d      	movs	r2, #13
 8016bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 8016bd6:	e005      	b.n	8016be4 <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 8016bd8:	f7fe fd1e 	bl	8015618 <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8016bdc:	4b03      	ldr	r3, [pc, #12]	; (8016bec <nfcipSetDEPParams+0xcc>)
 8016bde:	2205      	movs	r2, #5
 8016be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8016be4:	3708      	adds	r7, #8
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	20003a70 	.word	0x20003a70

08016bf0 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b086      	sub	sp, #24
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 8016c02:	897b      	ldrh	r3, [r7, #10]
 8016c04:	2b0f      	cmp	r3, #15
 8016c06:	d902      	bls.n	8016c0e <rfalNfcDepIsAtrReq+0x1e>
 8016c08:	897b      	ldrh	r3, [r7, #10]
 8016c0a:	2b40      	cmp	r3, #64	; 0x40
 8016c0c:	d901      	bls.n	8016c12 <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	e020      	b.n	8016c54 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 8016c12:	7dfb      	ldrb	r3, [r7, #23]
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	75fa      	strb	r2, [r7, #23]
 8016c18:	461a      	mov	r2, r3
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	2bd4      	cmp	r3, #212	; 0xd4
 8016c22:	d001      	beq.n	8016c28 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 8016c24:	2300      	movs	r3, #0
 8016c26:	e015      	b.n	8016c54 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8016c28:	7dfb      	ldrb	r3, [r7, #23]
 8016c2a:	1c5a      	adds	r2, r3, #1
 8016c2c:	75fa      	strb	r2, [r7, #23]
 8016c2e:	461a      	mov	r2, r3
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	4413      	add	r3, r2
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d001      	beq.n	8016c3e <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	e00a      	b.n	8016c54 <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d006      	beq.n	8016c52 <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	3302      	adds	r3, #2
 8016c48:	220a      	movs	r2, #10
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f006 fc6b 	bl	801d528 <memcpy>
    }
     
    return true;
 8016c52:	2301      	movs	r3, #1
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	3718      	adds	r7, #24
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}

08016c5c <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b088      	sub	sp, #32
 8016c60:	af02      	add	r7, sp, #8
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 8016c66:	4b79      	ldr	r3, [pc, #484]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016c6c:	2b0b      	cmp	r3, #11
 8016c6e:	d001      	beq.n	8016c74 <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 8016c70:	2321      	movs	r3, #33	; 0x21
 8016c72:	e0e6      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d101      	bne.n	8016c7e <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 8016c7a:	2307      	movs	r3, #7
 8016c7c:	e0e1      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 8016c7e:	2000      	movs	r0, #0
 8016c80:	f000 fbc8 	bl	8017414 <nfcipDataRx>
 8016c84:	4603      	mov	r3, r0
 8016c86:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 8016c88:	8afb      	ldrh	r3, [r7, #22]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d001      	beq.n	8016c92 <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 8016c8e:	8afb      	ldrh	r3, [r7, #22]
 8016c90:	e0d7      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
    }
    
    msgIt   = 0;
 8016c92:	2300      	movs	r3, #0
 8016c94:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	22c0      	movs	r2, #192	; 0xc0
 8016c9a:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 8016c9c:	7d7b      	ldrb	r3, [r7, #21]
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 8016ca2:	4b6a      	ldr	r3, [pc, #424]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016ca4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016ca6:	7d7b      	ldrb	r3, [r7, #21]
 8016ca8:	1c59      	adds	r1, r3, #1
 8016caa:	7579      	strb	r1, [r7, #21]
 8016cac:	4413      	add	r3, r2
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	2bd4      	cmp	r3, #212	; 0xd4
 8016cb2:	d001      	beq.n	8016cb8 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 8016cb4:	230b      	movs	r3, #11
 8016cb6:	e0c4      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 8016cb8:	4b64      	ldr	r3, [pc, #400]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016cba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016cbc:	7d7b      	ldrb	r3, [r7, #21]
 8016cbe:	4413      	add	r3, r2
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	2b04      	cmp	r3, #4
 8016cc4:	f040 8082 	bne.w	8016dcc <nfcipTargetHandleActivation+0x170>
    {
        msgIt++;
 8016cc8:	7d7b      	ldrb	r3, [r7, #21]
 8016cca:	3301      	adds	r3, #1
 8016ccc:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 8016cce:	4b5f      	ldr	r3, [pc, #380]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016cd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016cd2:	7d7b      	ldrb	r3, [r7, #21]
 8016cd4:	1c59      	adds	r1, r3, #1
 8016cd6:	7579      	strb	r1, [r7, #21]
 8016cd8:	4413      	add	r3, r2
 8016cda:	781a      	ldrb	r2, [r3, #0]
 8016cdc:	4b5b      	ldr	r3, [pc, #364]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016cde:	78db      	ldrb	r3, [r3, #3]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d001      	beq.n	8016ce8 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 8016ce4:	230b      	movs	r3, #11
 8016ce6:	e0ac      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 8016ce8:	4b58      	ldr	r3, [pc, #352]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016cea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016cec:	7d7b      	ldrb	r3, [r7, #21]
 8016cee:	1c59      	adds	r1, r3, #1
 8016cf0:	7579      	strb	r1, [r7, #21]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	781a      	ldrb	r2, [r3, #0]
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 8016cfa:	4b54      	ldr	r3, [pc, #336]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016cfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016cfe:	7d7b      	ldrb	r3, [r7, #21]
 8016d00:	1c59      	adds	r1, r3, #1
 8016d02:	7579      	strb	r1, [r7, #21]
 8016d04:	4413      	add	r3, r2
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	f003 0303 	and.w	r3, r3, #3
 8016d0c:	b2da      	uxtb	r2, r3
 8016d0e:	4b4f      	ldr	r3, [pc, #316]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8016d14:	4b4d      	ldr	r3, [pc, #308]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	019b      	lsls	r3, r3, #6
 8016d1e:	2bfd      	cmp	r3, #253	; 0xfd
 8016d20:	d807      	bhi.n	8016d32 <nfcipTargetHandleActivation+0xd6>
 8016d22:	4b4a      	ldr	r3, [pc, #296]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016d28:	3301      	adds	r3, #1
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	019b      	lsls	r3, r3, #6
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	e000      	b.n	8016d34 <nfcipTargetHandleActivation+0xd8>
 8016d32:	23fe      	movs	r3, #254	; 0xfe
 8016d34:	4a45      	ldr	r2, [pc, #276]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d36:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d032      	beq.n	8016da6 <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	08db      	lsrs	r3, r3, #3
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	f003 0307 	and.w	r3, r3, #7
 8016d4c:	b2da      	uxtb	r2, r3
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	f003 0307 	and.w	r3, r3, #7
 8016d5c:	b2da      	uxtb	r2, r3
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 8016d64:	4b39      	ldr	r3, [pc, #228]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d66:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 8016d70:	4b36      	ldr	r3, [pc, #216]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	7bdb      	ldrb	r3, [r3, #15]
 8016d80:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	7bda      	ldrb	r2, [r3, #15]
 8016d8e:	4b2f      	ldr	r3, [pc, #188]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016d90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016d94:	011b      	lsls	r3, r3, #4
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016d9c:	b2db      	uxtb	r3, r3
 8016d9e:	4313      	orrs	r3, r2
 8016da0:	b2da      	uxtb	r2, r3
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	73da      	strb	r2, [r3, #15]
        }
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8016da6:	f107 010c 	add.w	r1, r7, #12
 8016daa:	f04f 33ff 	mov.w	r3, #4294967295
 8016dae:	9301      	str	r3, [sp, #4]
 8016db0:	2300      	movs	r3, #0
 8016db2:	9300      	str	r3, [sp, #0]
 8016db4:	2300      	movs	r3, #0
 8016db6:	2200      	movs	r2, #0
 8016db8:	2005      	movs	r0, #5
 8016dba:	f7ff fb5b 	bl	8016474 <nfcipTx>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	82fb      	strh	r3, [r7, #22]
 8016dc2:	8afb      	ldrh	r3, [r7, #22]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d037      	beq.n	8016e38 <nfcipTargetHandleActivation+0x1dc>
 8016dc8:	8afb      	ldrh	r3, [r7, #22]
 8016dca:	e03a      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 8016dcc:	4b1f      	ldr	r3, [pc, #124]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016dce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016dd0:	7d7b      	ldrb	r3, [r7, #21]
 8016dd2:	4413      	add	r3, r2
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	2b06      	cmp	r3, #6
 8016dd8:	d12a      	bne.n	8016e30 <nfcipTargetHandleActivation+0x1d4>
        {
            msgIt++;
 8016dda:	7d7b      	ldrb	r3, [r7, #21]
 8016ddc:	3301      	adds	r3, #1
 8016dde:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 8016de0:	4b1a      	ldr	r3, [pc, #104]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016de2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016de4:	7d7b      	ldrb	r3, [r7, #21]
 8016de6:	4413      	add	r3, r2
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	f003 0303 	and.w	r3, r3, #3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d001      	beq.n	8016df6 <nfcipTargetHandleActivation+0x19a>
            {
                return ERR_PROTO;
 8016df2:	230b      	movs	r3, #11
 8016df4:	e025      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 8016df6:	4b15      	ldr	r3, [pc, #84]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016df8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016dfa:	7d7b      	ldrb	r3, [r7, #21]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	f003 0304 	and.w	r3, r3, #4
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d00d      	beq.n	8016e24 <nfcipTargetHandleActivation+0x1c8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 8016e08:	4b10      	ldr	r3, [pc, #64]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016e0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016e0c:	7d7b      	ldrb	r3, [r7, #21]
 8016e0e:	3301      	adds	r3, #1
 8016e10:	757b      	strb	r3, [r7, #21]
 8016e12:	7d7b      	ldrb	r3, [r7, #21]
 8016e14:	4413      	add	r3, r2
 8016e16:	781a      	ldrb	r2, [r3, #0]
 8016e18:	4b0c      	ldr	r3, [pc, #48]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016e1a:	78db      	ldrb	r3, [r3, #3]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d007      	beq.n	8016e30 <nfcipTargetHandleActivation+0x1d4>
                {
                    return ERR_PROTO;
 8016e20:	230b      	movs	r3, #11
 8016e22:	e00e      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 8016e24:	4b09      	ldr	r3, [pc, #36]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016e26:	78db      	ldrb	r3, [r3, #3]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d001      	beq.n	8016e30 <nfcipTargetHandleActivation+0x1d4>
            {
                return ERR_PROTO;
 8016e2c:	230b      	movs	r3, #11
 8016e2e:	e008      	b.n	8016e42 <nfcipTargetHandleActivation+0x1e6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8016e30:	4b06      	ldr	r3, [pc, #24]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016e32:	2201      	movs	r2, #1
 8016e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8016e38:	4b04      	ldr	r3, [pc, #16]	; (8016e4c <nfcipTargetHandleActivation+0x1f0>)
 8016e3a:	220d      	movs	r2, #13
 8016e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8016e40:	2300      	movs	r3, #0
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3718      	adds	r7, #24
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20003a70 	.word	0x20003a70

08016e50 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b0c0      	sub	sp, #256	; 0x100
 8016e54:	af04      	add	r7, sp, #16
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d005      	beq.n	8016e6e <rfalNfcDepATR+0x1e>
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <rfalNfcDepATR+0x1e>
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d101      	bne.n	8016e72 <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8016e6e:	2307      	movs	r3, #7
 8016e70:	e0bb      	b.n	8016fea <rfalNfcDepATR+0x19a>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	7a5b      	ldrb	r3, [r3, #9]
 8016e76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	7a9b      	ldrb	r3, [r3, #10]
 8016e7e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8016e82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8016e8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	7b1b      	ldrb	r3, [r3, #12]
 8016e96:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	7adb      	ldrb	r3, [r3, #11]
 8016e9e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	7b5b      	ldrb	r3, [r3, #13]
 8016ea6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8016eaa:	230e      	movs	r3, #14
 8016eac:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	7d1b      	ldrb	r3, [r3, #20]
 8016eb4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8016eb8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d00a      	beq.n	8016ed6 <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	6919      	ldr	r1, [r3, #16]
 8016ec4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016ec8:	461a      	mov	r2, r3
 8016eca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016ece:	3312      	adds	r3, #18
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f006 fb29 	bl	801d528 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	7a1b      	ldrb	r3, [r3, #8]
 8016eda:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8016ede:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d00a      	beq.n	8016efc <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6859      	ldr	r1, [r3, #4]
 8016eea:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8016eee:	461a      	mov	r2, r3
 8016ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016ef4:	3307      	adds	r3, #7
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f006 fb16 	bl	801d528 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8016efc:	2300      	movs	r3, #0
 8016efe:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	785b      	ldrb	r3, [r3, #1]
 8016f06:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 8016f12:	f7ff fdaf 	bl	8016a74 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8016f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7ff fc38 	bl	8016790 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8016f20:	4b34      	ldr	r3, [pc, #208]	; (8016ff4 <rfalNfcDepATR+0x1a4>)
 8016f22:	785b      	ldrb	r3, [r3, #1]
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d101      	bne.n	8016f2c <rfalNfcDepATR+0xdc>
 8016f28:	4a33      	ldr	r2, [pc, #204]	; (8016ff8 <rfalNfcDepATR+0x1a8>)
 8016f2a:	e000      	b.n	8016f2e <rfalNfcDepATR+0xde>
 8016f2c:	4a33      	ldr	r2, [pc, #204]	; (8016ffc <rfalNfcDepATR+0x1ac>)
 8016f2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016f32:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8016f36:	9303      	str	r3, [sp, #12]
 8016f38:	2341      	movs	r3, #65	; 0x41
 8016f3a:	9302      	str	r3, [sp, #8]
 8016f3c:	f107 0314 	add.w	r3, r7, #20
 8016f40:	9301      	str	r3, [sp, #4]
 8016f42:	2300      	movs	r3, #0
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	2300      	movs	r3, #0
 8016f48:	2000      	movs	r0, #0
 8016f4a:	f7fe fabd 	bl	80154c8 <nfcipTxRx>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8016f54:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d002      	beq.n	8016f62 <rfalNfcDepATR+0x112>
 8016f5c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8016f60:	e043      	b.n	8016fea <rfalNfcDepATR+0x19a>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8016f62:	2300      	movs	r3, #0
 8016f64:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8016f68:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8016f6c:	1c5a      	adds	r2, r3, #1
 8016f6e:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8016f72:	33f0      	adds	r3, #240	; 0xf0
 8016f74:	443b      	add	r3, r7
 8016f76:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8016f84:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016f88:	2b10      	cmp	r3, #16
 8016f8a:	d903      	bls.n	8016f94 <rfalNfcDepATR+0x144>
 8016f8c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016f90:	2b40      	cmp	r3, #64	; 0x40
 8016f92:	d901      	bls.n	8016f98 <rfalNfcDepATR+0x148>
    {
        return ERR_PROTO;
 8016f94:	230b      	movs	r3, #11
 8016f96:	e028      	b.n	8016fea <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8016f98:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8016f9c:	1c5a      	adds	r2, r3, #1
 8016f9e:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8016fa2:	33f0      	adds	r3, #240	; 0xf0
 8016fa4:	443b      	add	r3, r7
 8016fa6:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8016faa:	2bd5      	cmp	r3, #213	; 0xd5
 8016fac:	d001      	beq.n	8016fb2 <rfalNfcDepATR+0x162>
    {
        return ERR_PROTO;
 8016fae:	230b      	movs	r3, #11
 8016fb0:	e01b      	b.n	8016fea <rfalNfcDepATR+0x19a>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 8016fb2:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8016fb6:	1c5a      	adds	r2, r3, #1
 8016fb8:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8016fbc:	33f0      	adds	r3, #240	; 0xf0
 8016fbe:	443b      	add	r3, r7
 8016fc0:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8016fc4:	2b01      	cmp	r3, #1
 8016fc6:	d001      	beq.n	8016fcc <rfalNfcDepATR+0x17c>
    {
        return ERR_PROTO;
 8016fc8:	230b      	movs	r3, #11
 8016fca:	e00e      	b.n	8016fea <rfalNfcDepATR+0x19a>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 8016fcc:	f107 0314 	add.w	r3, r7, #20
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	68b8      	ldr	r0, [r7, #8]
 8016fda:	f006 faa5 	bl	801d528 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 8016fde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016fe2:	b2da      	uxtb	r2, r3
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8016fe8:	2300      	movs	r3, #0
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	37f0      	adds	r7, #240	; 0xf0
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	20003a70 	.word	0x20003a70
 8016ff8:	00200201 	.word	0x00200201
 8016ffc:	01000201 	.word	0x01000201

08017000 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 8017000:	b590      	push	{r4, r7, lr}
 8017002:	b08b      	sub	sp, #44	; 0x2c
 8017004:	af04      	add	r7, sp, #16
 8017006:	4603      	mov	r3, r0
 8017008:	460a      	mov	r2, r1
 801700a:	71fb      	strb	r3, [r7, #7]
 801700c:	4613      	mov	r3, r2
 801700e:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 8017010:	2304      	movs	r3, #4
 8017012:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8017014:	7dfb      	ldrb	r3, [r7, #23]
 8017016:	1c5a      	adds	r2, r3, #1
 8017018:	75fa      	strb	r2, [r7, #23]
 801701a:	3318      	adds	r3, #24
 801701c:	443b      	add	r3, r7
 801701e:	79fa      	ldrb	r2, [r7, #7]
 8017020:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8017024:	7dfb      	ldrb	r3, [r7, #23]
 8017026:	1c5a      	adds	r2, r3, #1
 8017028:	75fa      	strb	r2, [r7, #23]
 801702a:	3318      	adds	r3, #24
 801702c:	443b      	add	r3, r7
 801702e:	79ba      	ldrb	r2, [r7, #6]
 8017030:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8017034:	4b2d      	ldr	r3, [pc, #180]	; (80170ec <rfalNfcDepPSL+0xec>)
 8017036:	785b      	ldrb	r3, [r3, #1]
 8017038:	2b01      	cmp	r3, #1
 801703a:	d101      	bne.n	8017040 <rfalNfcDepPSL+0x40>
 801703c:	482c      	ldr	r0, [pc, #176]	; (80170f0 <rfalNfcDepPSL+0xf0>)
 801703e:	e000      	b.n	8017042 <rfalNfcDepPSL+0x42>
 8017040:	482c      	ldr	r0, [pc, #176]	; (80170f4 <rfalNfcDepPSL+0xf4>)
 8017042:	7dfb      	ldrb	r3, [r7, #23]
 8017044:	3b04      	subs	r3, #4
 8017046:	b2db      	uxtb	r3, r3
 8017048:	f107 020c 	add.w	r2, r7, #12
 801704c:	1d14      	adds	r4, r2, #4
 801704e:	f107 010c 	add.w	r1, r7, #12
 8017052:	f107 0212 	add.w	r2, r7, #18
 8017056:	9203      	str	r2, [sp, #12]
 8017058:	2204      	movs	r2, #4
 801705a:	9202      	str	r2, [sp, #8]
 801705c:	f107 0208 	add.w	r2, r7, #8
 8017060:	9201      	str	r2, [sp, #4]
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	4623      	mov	r3, r4
 8017066:	4602      	mov	r2, r0
 8017068:	2004      	movs	r0, #4
 801706a:	f7fe fa2d 	bl	80154c8 <nfcipTxRx>
 801706e:	4603      	mov	r3, r0
 8017070:	82bb      	strh	r3, [r7, #20]
 8017072:	8abb      	ldrh	r3, [r7, #20]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d001      	beq.n	801707c <rfalNfcDepPSL+0x7c>
 8017078:	8abb      	ldrh	r3, [r7, #20]
 801707a:	e033      	b.n	80170e4 <rfalNfcDepPSL+0xe4>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 801707c:	2300      	movs	r3, #0
 801707e:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 8017080:	7dfb      	ldrb	r3, [r7, #23]
 8017082:	1c5a      	adds	r2, r3, #1
 8017084:	75fa      	strb	r2, [r7, #23]
 8017086:	3318      	adds	r3, #24
 8017088:	443b      	add	r3, r7
 801708a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801708e:	b29b      	uxth	r3, r3
 8017090:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 8017092:	8a7b      	ldrh	r3, [r7, #18]
 8017094:	2b03      	cmp	r3, #3
 8017096:	d801      	bhi.n	801709c <rfalNfcDepPSL+0x9c>
    {
        return ERR_PROTO;
 8017098:	230b      	movs	r3, #11
 801709a:	e023      	b.n	80170e4 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 801709c:	7dfb      	ldrb	r3, [r7, #23]
 801709e:	1c5a      	adds	r2, r3, #1
 80170a0:	75fa      	strb	r2, [r7, #23]
 80170a2:	3318      	adds	r3, #24
 80170a4:	443b      	add	r3, r7
 80170a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80170aa:	2bd5      	cmp	r3, #213	; 0xd5
 80170ac:	d001      	beq.n	80170b2 <rfalNfcDepPSL+0xb2>
    {
        return ERR_PROTO;
 80170ae:	230b      	movs	r3, #11
 80170b0:	e018      	b.n	80170e4 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 80170b2:	7dfb      	ldrb	r3, [r7, #23]
 80170b4:	1c5a      	adds	r2, r3, #1
 80170b6:	75fa      	strb	r2, [r7, #23]
 80170b8:	3318      	adds	r3, #24
 80170ba:	443b      	add	r3, r7
 80170bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80170c0:	2b05      	cmp	r3, #5
 80170c2:	d001      	beq.n	80170c8 <rfalNfcDepPSL+0xc8>
    {
        return ERR_PROTO;
 80170c4:	230b      	movs	r3, #11
 80170c6:	e00d      	b.n	80170e4 <rfalNfcDepPSL+0xe4>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 80170c8:	7dfb      	ldrb	r3, [r7, #23]
 80170ca:	1c5a      	adds	r2, r3, #1
 80170cc:	75fa      	strb	r2, [r7, #23]
 80170ce:	3318      	adds	r3, #24
 80170d0:	443b      	add	r3, r7
 80170d2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80170d6:	4b05      	ldr	r3, [pc, #20]	; (80170ec <rfalNfcDepPSL+0xec>)
 80170d8:	78db      	ldrb	r3, [r3, #3]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d001      	beq.n	80170e2 <rfalNfcDepPSL+0xe2>
    {
        return ERR_PROTO;
 80170de:	230b      	movs	r3, #11
 80170e0:	e000      	b.n	80170e4 <rfalNfcDepPSL+0xe4>
    }
    
    return ERR_NONE;
 80170e2:	2300      	movs	r3, #0
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	371c      	adds	r7, #28
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd90      	pop	{r4, r7, pc}
 80170ec:	20003a70 	.word	0x20003a70
 80170f0:	00200201 	.word	0x00200201
 80170f4:	01000201 	.word	0x01000201

080170f8 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b08a      	sub	sp, #40	; 0x28
 80170fc:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 80170fe:	2300      	movs	r3, #0
 8017100:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 8017102:	4b2e      	ldr	r3, [pc, #184]	; (80171bc <rfalNfcDepRLS+0xc4>)
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	2b01      	cmp	r3, #1
 8017108:	d101      	bne.n	801710e <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 801710a:	2300      	movs	r3, #0
 801710c:	e051      	b.n	80171b2 <rfalNfcDepRLS+0xba>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 801710e:	4b2b      	ldr	r3, [pc, #172]	; (80171bc <rfalNfcDepRLS+0xc4>)
 8017110:	785b      	ldrb	r3, [r3, #1]
 8017112:	2b01      	cmp	r3, #1
 8017114:	d101      	bne.n	801711a <rfalNfcDepRLS+0x22>
 8017116:	4a2a      	ldr	r2, [pc, #168]	; (80171c0 <rfalNfcDepRLS+0xc8>)
 8017118:	e000      	b.n	801711c <rfalNfcDepRLS+0x24>
 801711a:	4a2a      	ldr	r2, [pc, #168]	; (80171c4 <rfalNfcDepRLS+0xcc>)
 801711c:	f107 010c 	add.w	r1, r7, #12
 8017120:	1dbb      	adds	r3, r7, #6
 8017122:	9303      	str	r3, [sp, #12]
 8017124:	2340      	movs	r3, #64	; 0x40
 8017126:	9302      	str	r3, [sp, #8]
 8017128:	f107 0308 	add.w	r3, r7, #8
 801712c:	9301      	str	r3, [sp, #4]
 801712e:	2300      	movs	r3, #0
 8017130:	9300      	str	r3, [sp, #0]
 8017132:	2300      	movs	r3, #0
 8017134:	200a      	movs	r0, #10
 8017136:	f7fe f9c7 	bl	80154c8 <nfcipTxRx>
 801713a:	4603      	mov	r3, r0
 801713c:	82fb      	strh	r3, [r7, #22]
 801713e:	8afb      	ldrh	r3, [r7, #22]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d001      	beq.n	8017148 <rfalNfcDepRLS+0x50>
 8017144:	8afb      	ldrh	r3, [r7, #22]
 8017146:	e034      	b.n	80171b2 <rfalNfcDepRLS+0xba>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 8017148:	2300      	movs	r3, #0
 801714a:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 801714c:	7d7b      	ldrb	r3, [r7, #21]
 801714e:	1c5a      	adds	r2, r3, #1
 8017150:	757a      	strb	r2, [r7, #21]
 8017152:	3318      	adds	r3, #24
 8017154:	443b      	add	r3, r7
 8017156:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801715a:	2b02      	cmp	r3, #2
 801715c:	d801      	bhi.n	8017162 <rfalNfcDepRLS+0x6a>
    {
        return ERR_PROTO;
 801715e:	230b      	movs	r3, #11
 8017160:	e027      	b.n	80171b2 <rfalNfcDepRLS+0xba>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 8017162:	7d7b      	ldrb	r3, [r7, #21]
 8017164:	1c5a      	adds	r2, r3, #1
 8017166:	757a      	strb	r2, [r7, #21]
 8017168:	3318      	adds	r3, #24
 801716a:	443b      	add	r3, r7
 801716c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8017170:	2bd5      	cmp	r3, #213	; 0xd5
 8017172:	d001      	beq.n	8017178 <rfalNfcDepRLS+0x80>
    {
        return ERR_PROTO;
 8017174:	230b      	movs	r3, #11
 8017176:	e01c      	b.n	80171b2 <rfalNfcDepRLS+0xba>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 8017178:	7d7b      	ldrb	r3, [r7, #21]
 801717a:	1c5a      	adds	r2, r3, #1
 801717c:	757a      	strb	r2, [r7, #21]
 801717e:	3318      	adds	r3, #24
 8017180:	443b      	add	r3, r7
 8017182:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8017186:	2b0b      	cmp	r3, #11
 8017188:	d001      	beq.n	801718e <rfalNfcDepRLS+0x96>
    {
        return ERR_PROTO;
 801718a:	230b      	movs	r3, #11
 801718c:	e011      	b.n	80171b2 <rfalNfcDepRLS+0xba>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 801718e:	4b0b      	ldr	r3, [pc, #44]	; (80171bc <rfalNfcDepRLS+0xc4>)
 8017190:	78db      	ldrb	r3, [r3, #3]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d00c      	beq.n	80171b0 <rfalNfcDepRLS+0xb8>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8017196:	7d7b      	ldrb	r3, [r7, #21]
 8017198:	1c5a      	adds	r2, r3, #1
 801719a:	757a      	strb	r2, [r7, #21]
 801719c:	3318      	adds	r3, #24
 801719e:	443b      	add	r3, r7
 80171a0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80171a4:	4b05      	ldr	r3, [pc, #20]	; (80171bc <rfalNfcDepRLS+0xc4>)
 80171a6:	78db      	ldrb	r3, [r3, #3]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d001      	beq.n	80171b0 <rfalNfcDepRLS+0xb8>
        {
            return ERR_PROTO;
 80171ac:	230b      	movs	r3, #11
 80171ae:	e000      	b.n	80171b2 <rfalNfcDepRLS+0xba>
        }
    }
    
    return ERR_NONE;
 80171b0:	2300      	movs	r3, #0
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	20003a70 	.word	0x20003a70
 80171c0:	00200201 	.word	0x00200201
 80171c4:	01000201 	.word	0x01000201

080171c8 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	460b      	mov	r3, r1
 80171d2:	607a      	str	r2, [r7, #4]
 80171d4:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d002      	beq.n	80171e2 <rfalNfcDepInitiatorHandleActivation+0x1a>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d101      	bne.n	80171e6 <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 80171e2:	2307      	movs	r3, #7
 80171e4:	e0da      	b.n	801739c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	2200      	movs	r2, #0
 80171ea:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 80171ec:	2302      	movs	r3, #2
 80171ee:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80171f0:	6879      	ldr	r1, [r7, #4]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	3341      	adds	r3, #65	; 0x41
 80171f6:	461a      	mov	r2, r3
 80171f8:	68f8      	ldr	r0, [r7, #12]
 80171fa:	f7ff fe29 	bl	8016e50 <rfalNfcDepATR>
 80171fe:	4603      	mov	r3, r0
 8017200:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 8017202:	8a7b      	ldrh	r3, [r7, #18]
 8017204:	2b15      	cmp	r3, #21
 8017206:	d005      	beq.n	8017214 <rfalNfcDepInitiatorHandleActivation+0x4c>
 8017208:	8a7b      	ldrh	r3, [r7, #18]
 801720a:	2b09      	cmp	r3, #9
 801720c:	d002      	beq.n	8017214 <rfalNfcDepInitiatorHandleActivation+0x4c>
 801720e:	8a7b      	ldrh	r3, [r7, #18]
 8017210:	2b1b      	cmp	r3, #27
 8017212:	d105      	bne.n	8017220 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 8017214:	7dfb      	ldrb	r3, [r7, #23]
 8017216:	1e5a      	subs	r2, r3, #1
 8017218:	75fa      	strb	r2, [r7, #23]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d1e8      	bne.n	80171f0 <rfalNfcDepInitiatorHandleActivation+0x28>
 801721e:	e000      	b.n	8017222 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 8017220:	bf00      	nop
    
    if( ret != ERR_NONE )
 8017222:	8a7b      	ldrh	r3, [r7, #18]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d001      	beq.n	801722c <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 8017228:	8a7b      	ldrh	r3, [r7, #18]
 801722a:	e0b7      	b.n	801739c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017232:	3b11      	subs	r3, #17
 8017234:	b2da      	uxtb	r2, r3
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	7b1a      	ldrb	r2, [r3, #12]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2200      	movs	r2, #0
 801724a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	7c1b      	ldrb	r3, [r3, #16]
 8017252:	091b      	lsrs	r3, r3, #4
 8017254:	b2db      	uxtb	r3, r3
 8017256:	f003 0303 	and.w	r3, r3, #3
 801725a:	b2da      	uxtb	r2, r3
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017268:	3301      	adds	r3, #1
 801726a:	019b      	lsls	r3, r3, #6
 801726c:	2bfd      	cmp	r3, #253	; 0xfd
 801726e:	d807      	bhi.n	8017280 <rfalNfcDepInitiatorHandleActivation+0xb8>
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017276:	3301      	adds	r3, #1
 8017278:	b29b      	uxth	r3, r3
 801727a:	019b      	lsls	r3, r3, #6
 801727c:	b29a      	uxth	r2, r3
 801727e:	e000      	b.n	8017282 <rfalNfcDepInitiatorHandleActivation+0xba>
 8017280:	22fe      	movs	r2, #254	; 0xfe
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	7bdb      	ldrb	r3, [r3, #15]
 801728c:	f003 030f 	and.w	r3, r3, #15
 8017290:	b2da      	uxtb	r2, r3
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801729e:	4618      	mov	r0, r3
 80172a0:	f000 f882 	bl	80173a8 <rfalNfcDepCalculateRWT>
 80172a4:	4602      	mov	r2, r0
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	220c      	movs	r2, #12
 80172ae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	3355      	adds	r3, #85	; 0x55
 80172ba:	4619      	mov	r1, r3
 80172bc:	4610      	mov	r0, r2
 80172be:	f002 ff6f 	bl	801a1a0 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 80172c2:	2300      	movs	r3, #0
 80172c4:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80172cc:	00db      	lsls	r3, r3, #3
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80172d4:	b2da      	uxtb	r2, r3
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80172dc:	f003 0307 	and.w	r3, r3, #7
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	4313      	orrs	r3, r2
 80172e4:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80172ec:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80172f4:	7afa      	ldrb	r2, [r7, #11]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d018      	beq.n	801732c <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	7b99      	ldrb	r1, [r3, #14]
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	7b5a      	ldrb	r2, [r3, #13]
 8017302:	7afb      	ldrb	r3, [r7, #11]
 8017304:	4618      	mov	r0, r3
 8017306:	f7fe f8bd 	bl	8015484 <nfcipDxIsSupported>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d00d      	beq.n	801732c <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 8017310:	2301      	movs	r3, #1
 8017312:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 8017314:	7afb      	ldrb	r3, [r7, #11]
 8017316:	00db      	lsls	r3, r3, #3
 8017318:	b2db      	uxtb	r3, r3
 801731a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801731e:	b2da      	uxtb	r2, r3
 8017320:	7afb      	ldrb	r3, [r7, #11]
 8017322:	f003 0307 	and.w	r3, r3, #7
 8017326:	b2db      	uxtb	r3, r3
 8017328:	4313      	orrs	r3, r2
 801732a:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 801732c:	7d7b      	ldrb	r3, [r7, #21]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d033      	beq.n	801739a <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 8017332:	7c7a      	ldrb	r2, [r7, #17]
 8017334:	7dbb      	ldrb	r3, [r7, #22]
 8017336:	4611      	mov	r1, r2
 8017338:	4618      	mov	r0, r3
 801733a:	f7ff fe61 	bl	8017000 <rfalNfcDepPSL>
 801733e:	4603      	mov	r3, r0
 8017340:	827b      	strh	r3, [r7, #18]
 8017342:	8a7b      	ldrh	r3, [r7, #18]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d001      	beq.n	801734c <rfalNfcDepInitiatorHandleActivation+0x184>
 8017348:	8a7b      	ldrh	r3, [r7, #18]
 801734a:	e027      	b.n	801739c <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017352:	7afa      	ldrb	r2, [r7, #11]
 8017354:	429a      	cmp	r2, r3
 8017356:	d01e      	beq.n	8017396 <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801735e:	2b00      	cmp	r3, #0
 8017360:	d107      	bne.n	8017372 <rfalNfcDepInitiatorHandleActivation+0x1aa>
 8017362:	4b10      	ldr	r3, [pc, #64]	; (80173a4 <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 8017364:	785b      	ldrb	r3, [r3, #1]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d103      	bne.n	8017372 <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 801736a:	7afb      	ldrb	r3, [r7, #11]
 801736c:	4618      	mov	r0, r3
 801736e:	f001 fa63 	bl	8018838 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	7afa      	ldrb	r2, [r7, #11]
 8017376:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	7afa      	ldrb	r2, [r7, #11]
 801737e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801738e:	4619      	mov	r1, r3
 8017390:	4610      	mov	r0, r2
 8017392:	f002 fca1 	bl	8019cd8 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8017396:	2300      	movs	r3, #0
 8017398:	e000      	b.n	801739c <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 801739a:	2300      	movs	r3, #0
}
 801739c:	4618      	mov	r0, r3
 801739e:	3718      	adds	r7, #24
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	20003a70 	.word	0x20003a70

080173a8 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 80173a8:	b480      	push	{r7}
 80173aa:	b085      	sub	sp, #20
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	4603      	mov	r3, r0
 80173b0:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 80173b2:	79fb      	ldrb	r3, [r7, #7]
 80173b4:	2b0e      	cmp	r3, #14
 80173b6:	bf28      	it	cs
 80173b8:	230e      	movcs	r3, #14
 80173ba:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	f003 030f 	and.w	r3, r3, #15
 80173c2:	330c      	adds	r3, #12
 80173c4:	2201      	movs	r2, #1
 80173c6:	fa02 f303 	lsl.w	r3, r2, r3
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	3714      	adds	r7, #20
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bc80      	pop	{r7}
 80173d2:	4770      	bx	lr

080173d4 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 80173d4:	b590      	push	{r4, r7, lr}
 80173d6:	b089      	sub	sp, #36	; 0x24
 80173d8:	af04      	add	r7, sp, #16
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	460b      	mov	r3, r1
 80173de:	607a      	str	r2, [r7, #4]
 80173e0:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 80173e2:	4b0b      	ldr	r3, [pc, #44]	; (8017410 <nfcipDataTx+0x3c>)
 80173e4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80173e6:	4b0a      	ldr	r3, [pc, #40]	; (8017410 <nfcipDataTx+0x3c>)
 80173e8:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80173ec:	4b08      	ldr	r3, [pc, #32]	; (8017410 <nfcipDataTx+0x3c>)
 80173ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173f0:	8979      	ldrh	r1, [r7, #10]
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	9202      	str	r2, [sp, #8]
 80173f6:	2204      	movs	r2, #4
 80173f8:	9201      	str	r2, [sp, #4]
 80173fa:	9300      	str	r3, [sp, #0]
 80173fc:	4623      	mov	r3, r4
 80173fe:	4602      	mov	r2, r0
 8017400:	68f8      	ldr	r0, [r7, #12]
 8017402:	f003 f925 	bl	801a650 <rfalTransceiveBlockingTx>
 8017406:	4603      	mov	r3, r0
}
 8017408:	4618      	mov	r0, r3
 801740a:	3714      	adds	r7, #20
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}
 8017410:	20003a70 	.word	0x20003a70

08017414 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b084      	sub	sp, #16
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 801741e:	79fb      	ldrb	r3, [r7, #7]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d004      	beq.n	801742e <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 8017424:	f003 f960 	bl	801a6e8 <rfalTransceiveBlockingRx>
 8017428:	4603      	mov	r3, r0
 801742a:	81fb      	strh	r3, [r7, #14]
 801742c:	e003      	b.n	8017436 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 801742e:	f003 f9c5 	bl	801a7bc <rfalGetTransceiveStatus>
 8017432:	4603      	mov	r3, r0
 8017434:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 8017436:	89fb      	ldrh	r3, [r7, #14]
 8017438:	2b02      	cmp	r3, #2
 801743a:	d028      	beq.n	801748e <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 801743c:	4b16      	ldr	r3, [pc, #88]	; (8017498 <nfcipDataRx+0x84>)
 801743e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017440:	2b00      	cmp	r3, #0
 8017442:	d024      	beq.n	801748e <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8017444:	4b14      	ldr	r3, [pc, #80]	; (8017498 <nfcipDataRx+0x84>)
 8017446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017448:	881b      	ldrh	r3, [r3, #0]
 801744a:	3307      	adds	r3, #7
 801744c:	08da      	lsrs	r2, r3, #3
 801744e:	4b12      	ldr	r3, [pc, #72]	; (8017498 <nfcipDataRx+0x84>)
 8017450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017452:	b292      	uxth	r2, r2
 8017454:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8017456:	89fb      	ldrh	r3, [r7, #14]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d118      	bne.n	801748e <nfcipDataRx+0x7a>
 801745c:	4b0e      	ldr	r3, [pc, #56]	; (8017498 <nfcipDataRx+0x84>)
 801745e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017460:	2b00      	cmp	r3, #0
 8017462:	d014      	beq.n	801748e <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8017464:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <nfcipDataRx+0x84>)
 8017466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017468:	881a      	ldrh	r2, [r3, #0]
 801746a:	4b0b      	ldr	r3, [pc, #44]	; (8017498 <nfcipDataRx+0x84>)
 801746c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	b29b      	uxth	r3, r3
 8017472:	429a      	cmp	r2, r3
 8017474:	d109      	bne.n	801748a <nfcipDataRx+0x76>
 8017476:	4b08      	ldr	r3, [pc, #32]	; (8017498 <nfcipDataRx+0x84>)
 8017478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801747a:	881b      	ldrh	r3, [r3, #0]
 801747c:	2b02      	cmp	r3, #2
 801747e:	d904      	bls.n	801748a <nfcipDataRx+0x76>
 8017480:	4b05      	ldr	r3, [pc, #20]	; (8017498 <nfcipDataRx+0x84>)
 8017482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017484:	881b      	ldrh	r3, [r3, #0]
 8017486:	2bff      	cmp	r3, #255	; 0xff
 8017488:	d901      	bls.n	801748e <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 801748a:	2309      	movs	r3, #9
 801748c:	e000      	b.n	8017490 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 801748e:	89fb      	ldrh	r3, [r7, #14]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	20003a70 	.word	0x20003a70

0801749c <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 801749c:	b082      	sub	sp, #8
 801749e:	b580      	push	{r7, lr}
 80174a0:	b09c      	sub	sp, #112	; 0x70
 80174a2:	af02      	add	r7, sp, #8
 80174a4:	60f8      	str	r0, [r7, #12]
 80174a6:	60b9      	str	r1, [r7, #8]
 80174a8:	677b      	str	r3, [r7, #116]	; 0x74
 80174aa:	4613      	mov	r3, r2
 80174ac:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d005      	beq.n	80174c0 <rfalNfcDepListenStartActivation+0x24>
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d002      	beq.n	80174c0 <rfalNfcDepListenStartActivation+0x24>
 80174ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d101      	bne.n	80174c4 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 80174c0:	2307      	movs	r3, #7
 80174c2:	e0f4      	b.n	80176ae <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 80174c4:	88fb      	ldrh	r3, [r7, #6]
 80174c6:	2200      	movs	r2, #0
 80174c8:	4619      	mov	r1, r3
 80174ca:	68b8      	ldr	r0, [r7, #8]
 80174cc:	f7ff fb90 	bl	8016bf0 <rfalNfcDepIsAtrReq>
 80174d0:	4603      	mov	r3, r0
 80174d2:	f083 0301 	eor.w	r3, r3, #1
 80174d6:	b2db      	uxtb	r3, r3
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d001      	beq.n	80174e0 <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 80174dc:	2307      	movs	r3, #7
 80174de:	e0e6      	b.n	80176ae <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 80174e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80174e4:	88fa      	ldrh	r2, [r7, #6]
 80174e6:	b2d2      	uxtb	r2, r2
 80174e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 80174ec:	88fb      	ldrh	r3, [r7, #6]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d007      	beq.n	8017502 <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 80174f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80174f6:	4618      	mov	r0, r3
 80174f8:	88fb      	ldrh	r3, [r7, #6]
 80174fa:	461a      	mov	r2, r3
 80174fc:	68b9      	ldr	r1, [r7, #8]
 80174fe:	f006 f813 	bl	801d528 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 8017502:	88fb      	ldrh	r3, [r7, #6]
 8017504:	b2da      	uxtb	r2, r3
 8017506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801750a:	3a10      	subs	r2, #16
 801750c:	b2d2      	uxtb	r2, r2
 801750e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8017512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801751a:	7b12      	ldrb	r2, [r2, #12]
 801751c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 8017520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017524:	2200      	movs	r2, #0
 8017526:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 801752a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801752e:	7bdb      	ldrb	r3, [r3, #15]
 8017530:	091b      	lsrs	r3, r3, #4
 8017532:	b2da      	uxtb	r2, r3
 8017534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017538:	f002 0203 	and.w	r2, r2, #3
 801753c:	b2d2      	uxtb	r2, r2
 801753e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 8017542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801754a:	3301      	adds	r3, #1
 801754c:	019b      	lsls	r3, r3, #6
 801754e:	2bfd      	cmp	r3, #253	; 0xfd
 8017550:	d808      	bhi.n	8017564 <rfalNfcDepListenStartActivation+0xc8>
 8017552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801755a:	3301      	adds	r3, #1
 801755c:	b29b      	uxth	r3, r3
 801755e:	019b      	lsls	r3, r3, #6
 8017560:	b29a      	uxth	r2, r3
 8017562:	e000      	b.n	8017566 <rfalNfcDepListenStartActivation+0xca>
 8017564:	22fe      	movs	r2, #254	; 0xfe
 8017566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801756a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 801756e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017572:	2200      	movs	r2, #0
 8017574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 8017578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801757c:	f04f 32ff 	mov.w	r2, #4294967295
 8017580:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 8017582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017586:	f04f 32ff 	mov.w	r2, #4294967295
 801758a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 801758c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017590:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8017594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017598:	3355      	adds	r3, #85	; 0x55
 801759a:	4619      	mov	r1, r3
 801759c:	4610      	mov	r0, r2
 801759e:	f002 fdff 	bl	801a1a0 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 80175a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80175a6:	4a45      	ldr	r2, [pc, #276]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 80175a8:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 80175aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80175ae:	7b1b      	ldrb	r3, [r3, #12]
 80175b0:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 80175b2:	2300      	movs	r3, #0
 80175b4:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 80175b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80175ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 80175bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80175c0:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	7b1b      	ldrb	r3, [r3, #12]
 80175c6:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	7adb      	ldrb	r3, [r3, #11]
 80175cc:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	7b9b      	ldrb	r3, [r3, #14]
 80175d2:	091b      	lsrs	r3, r3, #4
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	f003 0303 	and.w	r3, r3, #3
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80175e6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 80175ea:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d00b      	beq.n	801760a <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	f103 010f 	add.w	r1, r3, #15
 80175f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80175fc:	461a      	mov	r2, r3
 80175fe:	f107 0314 	add.w	r3, r7, #20
 8017602:	3312      	adds	r3, #18
 8017604:	4618      	mov	r0, r3
 8017606:	f005 ff8f 	bl	801d528 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 801760a:	230a      	movs	r3, #10
 801760c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	1c5a      	adds	r2, r3, #1
 8017614:	f107 031b 	add.w	r3, r7, #27
 8017618:	6810      	ldr	r0, [r2, #0]
 801761a:	6851      	ldr	r1, [r2, #4]
 801761c:	6018      	str	r0, [r3, #0]
 801761e:	6059      	str	r1, [r3, #4]
 8017620:	8912      	ldrh	r2, [r2, #8]
 8017622:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	7b5b      	ldrb	r3, [r3, #13]
 8017628:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 801762c:	2301      	movs	r3, #1
 801762e:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017636:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 801763e:	f7ff fa19 	bl	8016a74 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8017642:	f107 0314 	add.w	r3, r7, #20
 8017646:	4618      	mov	r0, r3
 8017648:	f7ff f8a2 	bl	8016790 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 801764c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801764e:	4a1b      	ldr	r2, [pc, #108]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 8017650:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 8017652:	4b1a      	ldr	r3, [pc, #104]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 8017654:	f240 1203 	movw	r2, #259	; 0x103
 8017658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 801765c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801765e:	4a17      	ldr	r2, [pc, #92]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 8017660:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8017662:	4b16      	ldr	r3, [pc, #88]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 8017664:	2205      	movs	r2, #5
 8017666:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 801766a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801766c:	4a13      	ldr	r2, [pc, #76]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 801766e:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 8017670:	4b12      	ldr	r3, [pc, #72]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 8017672:	2205      	movs	r2, #5
 8017674:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8017678:	4b10      	ldr	r3, [pc, #64]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 801767a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801767c:	f04f 33ff 	mov.w	r3, #4294967295
 8017680:	9301      	str	r3, [sp, #4]
 8017682:	2300      	movs	r3, #0
 8017684:	9300      	str	r3, [sp, #0]
 8017686:	2300      	movs	r3, #0
 8017688:	2200      	movs	r2, #0
 801768a:	2001      	movs	r0, #1
 801768c:	f7fe fef2 	bl	8016474 <nfcipTx>
 8017690:	4603      	mov	r3, r0
 8017692:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8017696:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801769a:	2b00      	cmp	r3, #0
 801769c:	d002      	beq.n	80176a4 <rfalNfcDepListenStartActivation+0x208>
 801769e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80176a2:	e004      	b.n	80176ae <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 80176a4:	4b05      	ldr	r3, [pc, #20]	; (80176bc <rfalNfcDepListenStartActivation+0x220>)
 80176a6:	220b      	movs	r2, #11
 80176a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 80176ac:	2300      	movs	r3, #0
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3768      	adds	r7, #104	; 0x68
 80176b2:	46bd      	mov	sp, r7
 80176b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80176b8:	b002      	add	sp, #8
 80176ba:	4770      	bx	lr
 80176bc:	20003a70 	.word	0x20003a70

080176c0 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b086      	sub	sp, #24
 80176c4:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 80176c6:	23c0      	movs	r3, #192	; 0xc0
 80176c8:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 80176ca:	4b2f      	ldr	r3, [pc, #188]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80176cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80176ce:	1d7a      	adds	r2, r7, #5
 80176d0:	4611      	mov	r1, r2
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7ff fac2 	bl	8016c5c <nfcipTargetHandleActivation>
 80176d8:	4603      	mov	r3, r0
 80176da:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 80176dc:	88fb      	ldrh	r3, [r7, #6]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d002      	beq.n	80176e8 <rfalNfcDepListenGetActivationStatus+0x28>
 80176e2:	2b02      	cmp	r3, #2
 80176e4:	d048      	beq.n	8017778 <rfalNfcDepListenGetActivationStatus+0xb8>
 80176e6:	e034      	b.n	8017752 <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 80176e8:	797b      	ldrb	r3, [r7, #5]
 80176ea:	2bc0      	cmp	r3, #192	; 0xc0
 80176ec:	d046      	beq.n	801777c <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 80176ee:	4b26      	ldr	r3, [pc, #152]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80176f0:	785b      	ldrb	r3, [r3, #1]
 80176f2:	2b01      	cmp	r3, #1
 80176f4:	d112      	bne.n	801771c <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 80176f6:	4b24      	ldr	r3, [pc, #144]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80176f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80176fa:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80176fe:	4b22      	ldr	r3, [pc, #136]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8017700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017702:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017706:	461a      	mov	r2, r3
 8017708:	200d      	movs	r0, #13
 801770a:	f002 f9d3 	bl	8019ab4 <rfalSetMode>
 801770e:	4603      	mov	r3, r0
 8017710:	80fb      	strh	r3, [r7, #6]
 8017712:	88fb      	ldrh	r3, [r7, #6]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d031      	beq.n	801777c <rfalNfcDepListenGetActivationStatus+0xbc>
 8017718:	88fb      	ldrh	r3, [r7, #6]
 801771a:	e031      	b.n	8017780 <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 801771c:	4b1a      	ldr	r3, [pc, #104]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801771e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017720:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017724:	2b00      	cmp	r3, #0
 8017726:	d101      	bne.n	801772c <rfalNfcDepListenGetActivationStatus+0x6c>
 8017728:	200a      	movs	r0, #10
 801772a:	e000      	b.n	801772e <rfalNfcDepListenGetActivationStatus+0x6e>
 801772c:	200c      	movs	r0, #12
 801772e:	4b16      	ldr	r3, [pc, #88]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8017730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017732:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8017736:	4b14      	ldr	r3, [pc, #80]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8017738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801773a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801773e:	461a      	mov	r2, r3
 8017740:	f002 f9b8 	bl	8019ab4 <rfalSetMode>
 8017744:	4603      	mov	r3, r0
 8017746:	80fb      	strh	r3, [r7, #6]
 8017748:	88fb      	ldrh	r3, [r7, #6]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d016      	beq.n	801777c <rfalNfcDepListenGetActivationStatus+0xbc>
 801774e:	88fb      	ldrh	r3, [r7, #6]
 8017750:	e016      	b.n	8017780 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8017752:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8017754:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017756:	4b0c      	ldr	r3, [pc, #48]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8017758:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801775c:	4b0a      	ldr	r3, [pc, #40]	; (8017788 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801775e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017760:	f04f 30ff 	mov.w	r0, #4294967295
 8017764:	9002      	str	r0, [sp, #8]
 8017766:	2004      	movs	r0, #4
 8017768:	9001      	str	r0, [sp, #4]
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	460b      	mov	r3, r1
 801776e:	2100      	movs	r1, #0
 8017770:	2000      	movs	r0, #0
 8017772:	f002 ff6d 	bl	801a650 <rfalTransceiveBlockingTx>
            break;
 8017776:	e002      	b.n	801777e <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8017778:	bf00      	nop
 801777a:	e000      	b.n	801777e <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 801777c:	bf00      	nop
    } // if (no err)
    
    return err;
 801777e:	88fb      	ldrh	r3, [r7, #6]
}
 8017780:	4618      	mov	r0, r3
 8017782:	3708      	adds	r7, #8
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}
 8017788:	20003a70 	.word	0x20003a70

0801778c <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( rfalNfcDepTxRxParam *param )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b08a      	sub	sp, #40	; 0x28
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	889b      	ldrh	r3, [r3, #4]
 801779e:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	799b      	ldrb	r3, [r3, #6]
 80177a4:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 80177a6:	2305      	movs	r3, #5
 80177a8:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 80177aa:	23ff      	movs	r3, #255	; 0xff
 80177ac:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 80177ae:	2305      	movs	r3, #5
 80177b0:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	689b      	ldr	r3, [r3, #8]
 80177b6:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 80177b8:	f240 1303 	movw	r3, #259	; 0x103
 80177bc:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	8b9b      	ldrh	r3, [r3, #28]
 80177c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	695b      	ldr	r3, [r3, #20]
 80177c8:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	699b      	ldr	r3, [r3, #24]
 80177ce:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	68db      	ldr	r3, [r3, #12]
 80177d4:	4a07      	ldr	r2, [pc, #28]	; (80177f4 <rfalNfcDepStartTransceive+0x68>)
 80177d6:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	691b      	ldr	r3, [r3, #16]
 80177dc:	4a05      	ldr	r2, [pc, #20]	; (80177f4 <rfalNfcDepStartTransceive+0x68>)
 80177de:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 80177e0:	f107 0308 	add.w	r3, r7, #8
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7ff f99b 	bl	8016b20 <nfcipSetDEPParams>
    
    return ERR_NONE;
 80177ea:	2300      	movs	r3, #0
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3728      	adds	r7, #40	; 0x28
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	20003a70 	.word	0x20003a70

080177f8 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 80177fc:	4b05      	ldr	r3, [pc, #20]	; (8017814 <rfalNfcDepGetTransceiveStatus+0x1c>)
 80177fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017800:	4a04      	ldr	r2, [pc, #16]	; (8017814 <rfalNfcDepGetTransceiveStatus+0x1c>)
 8017802:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017804:	4611      	mov	r1, r2
 8017806:	4618      	mov	r0, r3
 8017808:	f7ff f804 	bl	8016814 <nfcipRun>
 801780c:	4603      	mov	r3, r0
}
 801780e:	4618      	mov	r0, r3
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	20003a70 	.word	0x20003a70

08017818 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 8017818:	b480      	push	{r7}
 801781a:	b085      	sub	sp, #20
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	460b      	mov	r3, r1
 8017822:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 8017824:	2300      	movs	r3, #0
 8017826:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 8017828:	2300      	movs	r3, #0
 801782a:	73fb      	strb	r3, [r7, #15]
 801782c:	e009      	b.n	8017842 <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 801782e:	7bfb      	ldrb	r3, [r7, #15]
 8017830:	687a      	ldr	r2, [r7, #4]
 8017832:	4413      	add	r3, r2
 8017834:	781a      	ldrb	r2, [r3, #0]
 8017836:	7bbb      	ldrb	r3, [r7, #14]
 8017838:	4053      	eors	r3, r2
 801783a:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 801783c:	7bfb      	ldrb	r3, [r7, #15]
 801783e:	3301      	adds	r3, #1
 8017840:	73fb      	strb	r3, [r7, #15]
 8017842:	7bfa      	ldrb	r2, [r7, #15]
 8017844:	78fb      	ldrb	r3, [r7, #3]
 8017846:	429a      	cmp	r2, r3
 8017848:	d3f1      	bcc.n	801782e <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 801784a:	7bbb      	ldrb	r3, [r7, #14]
}
 801784c:	4618      	mov	r0, r3
 801784e:	3714      	adds	r7, #20
 8017850:	46bd      	mov	sp, r7
 8017852:	bc80      	pop	{r7}
 8017854:	4770      	bx	lr
	...

08017858 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b082      	sub	sp, #8
 801785c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 801785e:	2200      	movs	r2, #0
 8017860:	2100      	movs	r1, #0
 8017862:	2001      	movs	r0, #1
 8017864:	f002 f926 	bl	8019ab4 <rfalSetMode>
 8017868:	4603      	mov	r3, r0
 801786a:	80fb      	strh	r3, [r7, #6]
 801786c:	88fb      	ldrh	r3, [r7, #6]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d001      	beq.n	8017876 <rfalNfcaPollerInitialize+0x1e>
 8017872:	88fb      	ldrh	r3, [r7, #6]
 8017874:	e00e      	b.n	8017894 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8017876:	2001      	movs	r0, #1
 8017878:	f002 fcb8 	bl	801a1ec <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 801787c:	4807      	ldr	r0, [pc, #28]	; (801789c <rfalNfcaPollerInitialize+0x44>)
 801787e:	f002 fced 	bl	801a25c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 8017882:	f240 4094 	movw	r0, #1172	; 0x494
 8017886:	f002 fcd5 	bl	801a234 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 801788a:	f641 207c 	movw	r0, #6780	; 0x1a7c
 801788e:	f002 fcbd 	bl	801a20c <rfalSetFDTPoll>
    
    return ERR_NONE;
 8017892:	2300      	movs	r3, #0
}
 8017894:	4618      	mov	r0, r3
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	000108d8 	.word	0x000108d8

080178a0 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b086      	sub	sp, #24
 80178a4:	af02      	add	r7, sp, #8
 80178a6:	4603      	mov	r3, r0
 80178a8:	6039      	str	r1, [r7, #0]
 80178aa:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 80178ac:	f107 030c 	add.w	r3, r7, #12
 80178b0:	79f8      	ldrb	r0, [r7, #7]
 80178b2:	f240 6254 	movw	r2, #1620	; 0x654
 80178b6:	9200      	str	r2, [sp, #0]
 80178b8:	2210      	movs	r2, #16
 80178ba:	6839      	ldr	r1, [r7, #0]
 80178bc:	f003 fece 	bl	801b65c <rfalISO14443ATransceiveShortFrame>
 80178c0:	4603      	mov	r3, r0
 80178c2:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 80178c4:	89fb      	ldrh	r3, [r7, #14]
 80178c6:	2b1d      	cmp	r3, #29
 80178c8:	d00b      	beq.n	80178e2 <rfalNfcaPollerCheckPresence+0x42>
 80178ca:	89fb      	ldrh	r3, [r7, #14]
 80178cc:	2b15      	cmp	r3, #21
 80178ce:	d008      	beq.n	80178e2 <rfalNfcaPollerCheckPresence+0x42>
 80178d0:	89fb      	ldrh	r3, [r7, #14]
 80178d2:	2b01      	cmp	r3, #1
 80178d4:	d005      	beq.n	80178e2 <rfalNfcaPollerCheckPresence+0x42>
 80178d6:	89fb      	ldrh	r3, [r7, #14]
 80178d8:	2b09      	cmp	r3, #9
 80178da:	d002      	beq.n	80178e2 <rfalNfcaPollerCheckPresence+0x42>
 80178dc:	89fb      	ldrh	r3, [r7, #14]
 80178de:	2b1b      	cmp	r3, #27
 80178e0:	d101      	bne.n	80178e6 <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 80178e2:	2300      	movs	r3, #0
 80178e4:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 80178e6:	89fb      	ldrh	r3, [r7, #14]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3710      	adds	r7, #16
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b084      	sub	sp, #16
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	4603      	mov	r3, r0
 80178f8:	6039      	str	r1, [r7, #0]
 80178fa:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 80178fc:	79fb      	ldrb	r3, [r7, #7]
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d101      	bne.n	8017906 <rfalNfcaPollerTechnologyDetection+0x16>
 8017902:	2352      	movs	r3, #82	; 0x52
 8017904:	e000      	b.n	8017908 <rfalNfcaPollerTechnologyDetection+0x18>
 8017906:	2326      	movs	r3, #38	; 0x26
 8017908:	6839      	ldr	r1, [r7, #0]
 801790a:	4618      	mov	r0, r3
 801790c:	f7ff ffc8 	bl	80178a0 <rfalNfcaPollerCheckPresence>
 8017910:	4603      	mov	r3, r0
 8017912:	81fb      	strh	r3, [r7, #14]
 8017914:	89fb      	ldrh	r3, [r7, #14]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d001      	beq.n	801791e <rfalNfcaPollerTechnologyDetection+0x2e>
 801791a:	89fb      	ldrh	r3, [r7, #14]
 801791c:	e005      	b.n	801792a <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 801791e:	79fb      	ldrb	r3, [r7, #7]
 8017920:	2b02      	cmp	r3, #2
 8017922:	d001      	beq.n	8017928 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 8017924:	f000 fb60 	bl	8017fe8 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 8017928:	2300      	movs	r3, #0
}
 801792a:	4618      	mov	r0, r3
 801792c:	3710      	adds	r7, #16
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 8017932:	b590      	push	{r4, r7, lr}
 8017934:	b08f      	sub	sp, #60	; 0x3c
 8017936:	af04      	add	r7, sp, #16
 8017938:	60b9      	str	r1, [r7, #8]
 801793a:	607a      	str	r2, [r7, #4]
 801793c:	603b      	str	r3, [r7, #0]
 801793e:	4603      	mov	r3, r0
 8017940:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 8017942:	2300      	movs	r3, #0
 8017944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 8017948:	2303      	movs	r3, #3
 801794a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d008      	beq.n	8017966 <rfalNfcaPollerSingleCollisionResolution+0x34>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d005      	beq.n	8017966 <rfalNfcaPollerSingleCollisionResolution+0x34>
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d002      	beq.n	8017966 <rfalNfcaPollerSingleCollisionResolution+0x34>
 8017960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017962:	2b00      	cmp	r3, #0
 8017964:	d101      	bne.n	801796a <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 8017966:	2307      	movs	r3, #7
 8017968:	e1ad      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	2200      	movs	r2, #0
 801796e:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 8017970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017972:	2200      	movs	r2, #0
 8017974:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 8017976:	220a      	movs	r2, #10
 8017978:	2100      	movs	r1, #0
 801797a:	6838      	ldr	r0, [r7, #0]
 801797c:	f005 fdfc 	bl	801d578 <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8017980:	2300      	movs	r3, #0
 8017982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017986:	e198      	b.n	8017cba <rfalNfcaPollerSingleCollisionResolution+0x388>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 8017988:	f107 0318 	add.w	r3, r7, #24
 801798c:	2207      	movs	r2, #7
 801798e:	2100      	movs	r1, #0
 8017990:	4618      	mov	r0, r3
 8017992:	f005 fdf1 	bl	801d578 <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8017996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801799a:	005b      	lsls	r3, r3, #1
 801799c:	b2db      	uxtb	r3, r3
 801799e:	3b6d      	subs	r3, #109	; 0x6d
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 80179a4:	2302      	movs	r3, #2
 80179a6:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 80179a8:	2300      	movs	r3, #0
 80179aa:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 80179ac:	2301      	movs	r3, #1
 80179ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 80179b2:	7d7b      	ldrb	r3, [r7, #21]
 80179b4:	011b      	lsls	r3, r3, #4
 80179b6:	b2da      	uxtb	r2, r3
 80179b8:	7d3b      	ldrb	r3, [r7, #20]
 80179ba:	f003 030f 	and.w	r3, r3, #15
 80179be:	b2db      	uxtb	r3, r3
 80179c0:	4313      	orrs	r3, r2
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 80179c6:	7bfb      	ldrb	r3, [r7, #15]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d101      	bne.n	80179d0 <rfalNfcaPollerSingleCollisionResolution+0x9e>
 80179cc:	2302      	movs	r3, #2
 80179ce:	e000      	b.n	80179d2 <rfalNfcaPollerSingleCollisionResolution+0xa0>
 80179d0:	2300      	movs	r3, #0
 80179d2:	f887 3020 	strb.w	r3, [r7, #32]
 80179d6:	f107 0316 	add.w	r3, r7, #22
 80179da:	f107 0214 	add.w	r2, r7, #20
 80179de:	f107 0115 	add.w	r1, r7, #21
 80179e2:	f107 0018 	add.w	r0, r7, #24
 80179e6:	f240 6454 	movw	r4, #1620	; 0x654
 80179ea:	9400      	str	r4, [sp, #0]
 80179ec:	f003 ff32 	bl	801b854 <rfalISO14443ATransceiveAnticollisionFrame>
 80179f0:	4603      	mov	r3, r0
 80179f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80179f4:	7bfb      	ldrb	r3, [r7, #15]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d102      	bne.n	8017a00 <rfalNfcaPollerSingleCollisionResolution+0xce>
 80179fa:	2005      	movs	r0, #5
 80179fc:	f7ed fe78 	bl	80056f0 <HAL_Delay>
 8017a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017a04:	1e5a      	subs	r2, r3, #1
 8017a06:	f887 2020 	strb.w	r2, [r7, #32]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d002      	beq.n	8017a14 <rfalNfcaPollerSingleCollisionResolution+0xe2>
 8017a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a10:	2b04      	cmp	r3, #4
 8017a12:	d0e0      	beq.n	80179d6 <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 8017a14:	8afb      	ldrh	r3, [r7, #22]
 8017a16:	3307      	adds	r3, #7
 8017a18:	08db      	lsrs	r3, r3, #3
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 8017a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a20:	2b04      	cmp	r3, #4
 8017a22:	d146      	bne.n	8017ab2 <rfalNfcaPollerSingleCollisionResolution+0x180>
                && (backtrackCnt != 0U) && !doBacktrack
 8017a24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d042      	beq.n	8017ab2 <rfalNfcaPollerSingleCollisionResolution+0x180>
 8017a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a30:	f083 0301 	eor.w	r3, r3, #1
 8017a34:	b2db      	uxtb	r3, r3
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d03b      	beq.n	8017ab2 <rfalNfcaPollerSingleCollisionResolution+0x180>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 8017a3a:	7d7b      	ldrb	r3, [r7, #21]
 8017a3c:	2b02      	cmp	r3, #2
 8017a3e:	d102      	bne.n	8017a46 <rfalNfcaPollerSingleCollisionResolution+0x114>
 8017a40:	7d3b      	ldrb	r3, [r7, #20]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d035      	beq.n	8017ab2 <rfalNfcaPollerSingleCollisionResolution+0x180>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 8017a46:	231d      	movs	r3, #29
 8017a48:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 8017a4a:	f107 0310 	add.w	r3, r7, #16
 8017a4e:	4619      	mov	r1, r3
 8017a50:	2026      	movs	r0, #38	; 0x26
 8017a52:	f7ff ff25 	bl	80178a0 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 8017a56:	7d3b      	ldrb	r3, [r7, #20]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d106      	bne.n	8017a6a <rfalNfcaPollerSingleCollisionResolution+0x138>
                {
                    bitsTxRx = 7;
 8017a5c:	2307      	movs	r3, #7
 8017a5e:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 8017a60:	7d7b      	ldrb	r3, [r7, #21]
 8017a62:	3b01      	subs	r3, #1
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	757b      	strb	r3, [r7, #21]
 8017a68:	e003      	b.n	8017a72 <rfalNfcaPollerSingleCollisionResolution+0x140>
                }
                else
                {
                    bitsTxRx--;
 8017a6a:	7d3b      	ldrb	r3, [r7, #20]
 8017a6c:	3b01      	subs	r3, #1
 8017a6e:	b2db      	uxtb	r3, r3
 8017a70:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 8017a72:	7d7b      	ldrb	r3, [r7, #21]
 8017a74:	461a      	mov	r2, r3
 8017a76:	f107 0318 	add.w	r3, r7, #24
 8017a7a:	4413      	add	r3, r2
 8017a7c:	781a      	ldrb	r2, [r3, #0]
 8017a7e:	7d3b      	ldrb	r3, [r7, #20]
 8017a80:	4619      	mov	r1, r3
 8017a82:	2301      	movs	r3, #1
 8017a84:	408b      	lsls	r3, r1
 8017a86:	b2db      	uxtb	r3, r3
 8017a88:	4013      	ands	r3, r2
 8017a8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8017a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d101      	bne.n	8017a9a <rfalNfcaPollerSingleCollisionResolution+0x168>
 8017a96:	2301      	movs	r3, #1
 8017a98:	e000      	b.n	8017a9c <rfalNfcaPollerSingleCollisionResolution+0x16a>
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 8017aa6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 8017ab0:	e002      	b.n	8017ab8 <rfalNfcaPollerSingleCollisionResolution+0x186>
            }
            else
            {
                doBacktrack = false;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 8017ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017aba:	2b1d      	cmp	r3, #29
 8017abc:	d17e      	bne.n	8017bbc <rfalNfcaPollerSingleCollisionResolution+0x28a>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8017abe:	7d7b      	ldrb	r3, [r7, #21]
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	7d3b      	ldrb	r3, [r7, #20]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d001      	beq.n	8017acc <rfalNfcaPollerSingleCollisionResolution+0x19a>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	e000      	b.n	8017ace <rfalNfcaPollerSingleCollisionResolution+0x19c>
 8017acc:	2300      	movs	r3, #0
 8017ace:	4413      	add	r3, r2
 8017ad0:	2b07      	cmp	r3, #7
 8017ad2:	d901      	bls.n	8017ad8 <rfalNfcaPollerSingleCollisionResolution+0x1a6>
                {
                    return ERR_PROTO;
 8017ad4:	230b      	movs	r3, #11
 8017ad6:	e0f6      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 8017ad8:	7d7b      	ldrb	r3, [r7, #21]
 8017ada:	461a      	mov	r2, r3
 8017adc:	7d3b      	ldrb	r3, [r7, #20]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d001      	beq.n	8017ae6 <rfalNfcaPollerSingleCollisionResolution+0x1b4>
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	e000      	b.n	8017ae8 <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	4413      	add	r3, r2
 8017aea:	2b06      	cmp	r3, #6
 8017aec:	d91a      	bls.n	8017b24 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
 8017aee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d016      	beq.n	8017b24 <rfalNfcaPollerSingleCollisionResolution+0x1f2>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 8017af6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017afa:	3b01      	subs	r3, #1
 8017afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 8017b00:	2305      	movs	r3, #5
 8017b02:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 8017b04:	2307      	movs	r3, #7
 8017b06:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 8017b08:	7d7b      	ldrb	r3, [r7, #21]
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	f107 0318 	add.w	r3, r7, #24
 8017b10:	4413      	add	r3, r2
 8017b12:	781a      	ldrb	r2, [r3, #0]
 8017b14:	7d3b      	ldrb	r3, [r7, #20]
 8017b16:	4619      	mov	r1, r3
 8017b18:	2301      	movs	r3, #1
 8017b1a:	408b      	lsls	r3, r1
 8017b1c:	b2db      	uxtb	r3, r3
 8017b1e:	4013      	ands	r3, r2
 8017b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 8017b24:	7bfb      	ldrb	r3, [r7, #15]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d10b      	bne.n	8017b42 <rfalNfcaPollerSingleCollisionResolution+0x210>
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	f083 0301 	eor.w	r3, r3, #1
 8017b32:	b2db      	uxtb	r3, r3
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d004      	beq.n	8017b42 <rfalNfcaPollerSingleCollisionResolution+0x210>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 8017b3e:	2312      	movs	r3, #18
 8017b40:	e0c1      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
                }
                
                *collPending = true;
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	2201      	movs	r2, #1
 8017b46:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8017b48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d013      	beq.n	8017b78 <rfalNfcaPollerSingleCollisionResolution+0x246>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 8017b50:	7d7b      	ldrb	r3, [r7, #21]
 8017b52:	461a      	mov	r2, r3
 8017b54:	f107 0318 	add.w	r3, r7, #24
 8017b58:	4413      	add	r3, r2
 8017b5a:	7819      	ldrb	r1, [r3, #0]
 8017b5c:	7d3b      	ldrb	r3, [r7, #20]
 8017b5e:	461a      	mov	r2, r3
 8017b60:	2301      	movs	r3, #1
 8017b62:	4093      	lsls	r3, r2
 8017b64:	b2da      	uxtb	r2, r3
 8017b66:	7d7b      	ldrb	r3, [r7, #21]
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f107 0318 	add.w	r3, r7, #24
 8017b6e:	4403      	add	r3, r0
 8017b70:	430a      	orrs	r2, r1
 8017b72:	b2d2      	uxtb	r2, r2
 8017b74:	701a      	strb	r2, [r3, #0]
 8017b76:	e014      	b.n	8017ba2 <rfalNfcaPollerSingleCollisionResolution+0x270>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 8017b78:	7d7b      	ldrb	r3, [r7, #21]
 8017b7a:	461a      	mov	r2, r3
 8017b7c:	f107 0318 	add.w	r3, r7, #24
 8017b80:	4413      	add	r3, r2
 8017b82:	7819      	ldrb	r1, [r3, #0]
 8017b84:	7d3b      	ldrb	r3, [r7, #20]
 8017b86:	461a      	mov	r2, r3
 8017b88:	2301      	movs	r3, #1
 8017b8a:	4093      	lsls	r3, r2
 8017b8c:	b2db      	uxtb	r3, r3
 8017b8e:	43db      	mvns	r3, r3
 8017b90:	b2da      	uxtb	r2, r3
 8017b92:	7d7b      	ldrb	r3, [r7, #21]
 8017b94:	4618      	mov	r0, r3
 8017b96:	f107 0318 	add.w	r3, r7, #24
 8017b9a:	4403      	add	r3, r0
 8017b9c:	400a      	ands	r2, r1
 8017b9e:	b2d2      	uxtb	r2, r2
 8017ba0:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 8017ba2:	7d3b      	ldrb	r3, [r7, #20]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 8017baa:	7d3b      	ldrb	r3, [r7, #20]
 8017bac:	2b08      	cmp	r3, #8
 8017bae:	d105      	bne.n	8017bbc <rfalNfcaPollerSingleCollisionResolution+0x28a>
                {
                    bitsTxRx = 0;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 8017bb4:	7d7b      	ldrb	r3, [r7, #21]
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	b2db      	uxtb	r3, r3
 8017bba:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 8017bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bbe:	2b1d      	cmp	r3, #29
 8017bc0:	f43f aef4 	beq.w	80179ac <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 8017bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d001      	beq.n	8017bce <rfalNfcaPollerSingleCollisionResolution+0x29c>
        {
            return ret;
 8017bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bcc:	e07b      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 8017bce:	7bfb      	ldrb	r3, [r7, #15]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d104      	bne.n	8017bde <rfalNfcaPollerSingleCollisionResolution+0x2ac>
 8017bd4:	8afb      	ldrh	r3, [r7, #22]
 8017bd6:	2b05      	cmp	r3, #5
 8017bd8:	d001      	beq.n	8017bde <rfalNfcaPollerSingleCollisionResolution+0x2ac>
        {
            return ERR_PROTO;
 8017bda:	230b      	movs	r3, #11
 8017bdc:	e073      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8017bde:	7fbc      	ldrb	r4, [r7, #30]
 8017be0:	f107 0318 	add.w	r3, r7, #24
 8017be4:	3302      	adds	r3, #2
 8017be6:	2104      	movs	r1, #4
 8017be8:	4618      	mov	r0, r3
 8017bea:	f7ff fe15 	bl	8017818 <rfalNfcaCalculateBcc>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	429c      	cmp	r4, r3
 8017bf2:	d001      	beq.n	8017bf8 <rfalNfcaPollerSingleCollisionResolution+0x2c6>
        {
            return ERR_PROTO;
 8017bf4:	230b      	movs	r3, #11
 8017bf6:	e066      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8017bf8:	2370      	movs	r3, #112	; 0x70
 8017bfa:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 8017bfc:	7bfb      	ldrb	r3, [r7, #15]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d101      	bne.n	8017c06 <rfalNfcaPollerSingleCollisionResolution+0x2d4>
 8017c02:	2302      	movs	r3, #2
 8017c04:	e000      	b.n	8017c08 <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 8017c06:	2300      	movs	r3, #0
 8017c08:	77fb      	strb	r3, [r7, #31]
 8017c0a:	f107 0018 	add.w	r0, r7, #24
 8017c0e:	f240 6354 	movw	r3, #1620	; 0x654
 8017c12:	9302      	str	r3, [sp, #8]
 8017c14:	2300      	movs	r3, #0
 8017c16:	9301      	str	r3, [sp, #4]
 8017c18:	f107 0316 	add.w	r3, r7, #22
 8017c1c:	9300      	str	r3, [sp, #0]
 8017c1e:	2301      	movs	r3, #1
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	2107      	movs	r1, #7
 8017c24:	f002 fd76 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017c2c:	7bfb      	ldrb	r3, [r7, #15]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d102      	bne.n	8017c38 <rfalNfcaPollerSingleCollisionResolution+0x306>
 8017c32:	2005      	movs	r0, #5
 8017c34:	f7ed fd5c 	bl	80056f0 <HAL_Delay>
 8017c38:	7ffb      	ldrb	r3, [r7, #31]
 8017c3a:	1e5a      	subs	r2, r3, #1
 8017c3c:	77fa      	strb	r2, [r7, #31]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d002      	beq.n	8017c48 <rfalNfcaPollerSingleCollisionResolution+0x316>
 8017c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c44:	2b04      	cmp	r3, #4
 8017c46:	d0e0      	beq.n	8017c0a <rfalNfcaPollerSingleCollisionResolution+0x2d8>
        
        if( ret != ERR_NONE )
 8017c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d001      	beq.n	8017c52 <rfalNfcaPollerSingleCollisionResolution+0x320>
        {
            return ret;
 8017c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c50:	e039      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 8017c52:	8afb      	ldrh	r3, [r7, #22]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d001      	beq.n	8017c5c <rfalNfcaPollerSingleCollisionResolution+0x32a>
        {
            return ERR_PROTO;
 8017c58:	230b      	movs	r3, #11
 8017c5a:	e034      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 8017c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d11b      	bne.n	8017c9a <rfalNfcaPollerSingleCollisionResolution+0x368>
 8017c62:	7ebb      	ldrb	r3, [r7, #26]
 8017c64:	2b88      	cmp	r3, #136	; 0x88
 8017c66:	d118      	bne.n	8017c9a <rfalNfcaPollerSingleCollisionResolution+0x368>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8017c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	1898      	adds	r0, r3, r2
 8017c72:	f107 0318 	add.w	r3, r7, #24
 8017c76:	3302      	adds	r3, #2
 8017c78:	3301      	adds	r3, #1
 8017c7a:	2203      	movs	r2, #3
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	f005 fc53 	bl	801d528 <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8017c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	3303      	adds	r3, #3
 8017c88:	b2da      	uxtb	r2, r3
 8017c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8c:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8017c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c92:	3301      	adds	r3, #1
 8017c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c98:	e00f      	b.n	8017cba <rfalNfcaPollerSingleCollisionResolution+0x388>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8017c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	461a      	mov	r2, r3
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	4413      	add	r3, r2
 8017ca4:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8017ca8:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8017caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	3304      	adds	r3, #4
 8017cb0:	b2da      	uxtb	r2, r3
 8017cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb4:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	e005      	b.n	8017cc6 <rfalNfcaPollerSingleCollisionResolution+0x394>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 8017cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cbe:	2b02      	cmp	r3, #2
 8017cc0:	f67f ae62 	bls.w	8017988 <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 8017cc4:	230c      	movs	r3, #12
}
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	372c      	adds	r7, #44	; 0x2c
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd90      	pop	{r4, r7, pc}

08017cce <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 8017cce:	b5b0      	push	{r4, r5, r7, lr}
 8017cd0:	b08a      	sub	sp, #40	; 0x28
 8017cd2:	af02      	add	r7, sp, #8
 8017cd4:	60ba      	str	r2, [r7, #8]
 8017cd6:	607b      	str	r3, [r7, #4]
 8017cd8:	4603      	mov	r3, r0
 8017cda:	73fb      	strb	r3, [r7, #15]
 8017cdc:	460b      	mov	r3, r1
 8017cde:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d002      	beq.n	8017cec <rfalNfcaPollerFullCollisionResolution+0x1e>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d101      	bne.n	8017cf0 <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8017cec:	2307      	movs	r3, #7
 8017cee:	e105      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
    }
    
    *devCnt = 0;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8017cfa:	7bfb      	ldrb	r3, [r7, #15]
 8017cfc:	2b02      	cmp	r3, #2
 8017cfe:	d028      	beq.n	8017d52 <rfalNfcaPollerFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	1c59      	adds	r1, r3, #1
 8017d04:	f107 0316 	add.w	r3, r7, #22
 8017d08:	f240 6254 	movw	r2, #1620	; 0x654
 8017d0c:	9200      	str	r2, [sp, #0]
 8017d0e:	2210      	movs	r2, #16
 8017d10:	2052      	movs	r0, #82	; 0x52
 8017d12:	f003 fca3 	bl	801b65c <rfalISO14443ATransceiveShortFrame>
 8017d16:	4603      	mov	r3, r0
 8017d18:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 8017d1a:	8bfb      	ldrh	r3, [r7, #30]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d010      	beq.n	8017d42 <rfalNfcaPollerFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8017d20:	7bfb      	ldrb	r3, [r7, #15]
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d00b      	beq.n	8017d3e <rfalNfcaPollerFullCollisionResolution+0x70>
 8017d26:	8bfb      	ldrh	r3, [r7, #30]
 8017d28:	2b1d      	cmp	r3, #29
 8017d2a:	d00a      	beq.n	8017d42 <rfalNfcaPollerFullCollisionResolution+0x74>
 8017d2c:	8bfb      	ldrh	r3, [r7, #30]
 8017d2e:	2b15      	cmp	r3, #21
 8017d30:	d007      	beq.n	8017d42 <rfalNfcaPollerFullCollisionResolution+0x74>
 8017d32:	8bfb      	ldrh	r3, [r7, #30]
 8017d34:	2b09      	cmp	r3, #9
 8017d36:	d004      	beq.n	8017d42 <rfalNfcaPollerFullCollisionResolution+0x74>
 8017d38:	8bfb      	ldrh	r3, [r7, #30]
 8017d3a:	2b1b      	cmp	r3, #27
 8017d3c:	d001      	beq.n	8017d42 <rfalNfcaPollerFullCollisionResolution+0x74>
            {
                return ret;
 8017d3e:	8bfb      	ldrh	r3, [r7, #30]
 8017d40:	e0dc      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 8017d42:	8bfb      	ldrh	r3, [r7, #30]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d104      	bne.n	8017d52 <rfalNfcaPollerFullCollisionResolution+0x84>
 8017d48:	8afb      	ldrh	r3, [r7, #22]
 8017d4a:	2b10      	cmp	r3, #16
 8017d4c:	d001      	beq.n	8017d52 <rfalNfcaPollerFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 8017d4e:	230b      	movs	r3, #11
 8017d50:	e0d4      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	789b      	ldrb	r3, [r3, #2]
 8017d56:	f003 030f 	and.w	r3, r3, #15
 8017d5a:	2b0c      	cmp	r3, #12
 8017d5c:	d12a      	bne.n	8017db4 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8017d5e:	7bbb      	ldrb	r3, [r7, #14]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d027      	beq.n	8017db4 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8017d64:	8bfb      	ldrh	r3, [r7, #30]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d124      	bne.n	8017db4 <rfalNfcaPollerFullCollisionResolution+0xe6>
 8017d6a:	7bfb      	ldrb	r3, [r7, #15]
 8017d6c:	2b01      	cmp	r3, #1
 8017d6e:	d021      	beq.n	8017db4 <rfalNfcaPollerFullCollisionResolution+0xe6>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 8017d70:	f004 ffba 	bl	801cce8 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	330f      	adds	r3, #15
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f004 ffd7 	bl	801cd2c <rfalT1TPollerRid>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	83fb      	strh	r3, [r7, #30]
 8017d82:	8bfb      	ldrh	r3, [r7, #30]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d001      	beq.n	8017d8c <rfalNfcaPollerFullCollisionResolution+0xbe>
 8017d88:	8bfb      	ldrh	r3, [r7, #30]
 8017d8a:	e0b7      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	2201      	movs	r2, #1
 8017d90:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	2200      	movs	r2, #0
 8017d96:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	2201      	movs	r2, #1
 8017d9c:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	2204      	movs	r2, #4
 8017da2:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	3305      	adds	r3, #5
 8017da8:	68ba      	ldr	r2, [r7, #8]
 8017daa:	3211      	adds	r2, #17
 8017dac:	6812      	ldr	r2, [r2, #0]
 8017dae:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 8017db0:	2300      	movs	r3, #0
 8017db2:	e0a3      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 8017db4:	68ba      	ldr	r2, [r7, #8]
 8017db6:	f107 0318 	add.w	r3, r7, #24
 8017dba:	3201      	adds	r2, #1
 8017dbc:	8812      	ldrh	r2, [r2, #0]
 8017dbe:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d008      	beq.n	8017dd8 <rfalNfcaPollerFullCollisionResolution+0x10a>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 8017dc6:	7bbb      	ldrb	r3, [r7, #14]
 8017dc8:	2216      	movs	r2, #22
 8017dca:	fb02 f303 	mul.w	r3, r2, r3
 8017dce:	461a      	mov	r2, r3
 8017dd0:	2100      	movs	r1, #0
 8017dd2:	68b8      	ldr	r0, [r7, #8]
 8017dd4:	f005 fbd0 	bl	801d578 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	3301      	adds	r3, #1
 8017ddc:	f107 0218 	add.w	r2, r7, #24
 8017de0:	8812      	ldrh	r2, [r2, #0]
 8017de2:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	461a      	mov	r2, r3
 8017dea:	2316      	movs	r3, #22
 8017dec:	fb02 f303 	mul.w	r3, r2, r3
 8017df0:	68ba      	ldr	r2, [r7, #8]
 8017df2:	4413      	add	r3, r2
 8017df4:	1cdc      	adds	r4, r3, #3
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	781b      	ldrb	r3, [r3, #0]
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	2316      	movs	r3, #22
 8017dfe:	fb02 f303 	mul.w	r3, r2, r3
 8017e02:	68ba      	ldr	r2, [r7, #8]
 8017e04:	4413      	add	r3, r2
 8017e06:	1d5d      	adds	r5, r3, #5
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	781b      	ldrb	r3, [r3, #0]
 8017e0c:	461a      	mov	r2, r3
 8017e0e:	2316      	movs	r3, #22
 8017e10:	fb02 f303 	mul.w	r3, r2, r3
 8017e14:	68ba      	ldr	r2, [r7, #8]
 8017e16:	4413      	add	r3, r2
 8017e18:	3304      	adds	r3, #4
 8017e1a:	f107 011c 	add.w	r1, r7, #28
 8017e1e:	7bb8      	ldrb	r0, [r7, #14]
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	462b      	mov	r3, r5
 8017e24:	4622      	mov	r2, r4
 8017e26:	f7ff fd84 	bl	8017932 <rfalNfcaPollerSingleCollisionResolution>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	83fb      	strh	r3, [r7, #30]
 8017e2e:	8bfb      	ldrh	r3, [r7, #30]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d001      	beq.n	8017e38 <rfalNfcaPollerFullCollisionResolution+0x16a>
 8017e34:	8bfb      	ldrh	r3, [r7, #30]
 8017e36:	e061      	b.n	8017efc <rfalNfcaPollerFullCollisionResolution+0x22e>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	2316      	movs	r3, #22
 8017e40:	fb02 f303 	mul.w	r3, r2, r3
 8017e44:	68ba      	ldr	r2, [r7, #8]
 8017e46:	4413      	add	r3, r2
 8017e48:	78db      	ldrb	r3, [r3, #3]
 8017e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017e4e:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	781b      	ldrb	r3, [r3, #0]
 8017e54:	461a      	mov	r2, r3
 8017e56:	2316      	movs	r3, #22
 8017e58:	fb02 f303 	mul.w	r3, r2, r3
 8017e5c:	68ba      	ldr	r2, [r7, #8]
 8017e5e:	4413      	add	r3, r2
 8017e60:	7f7a      	ldrb	r2, [r7, #29]
 8017e62:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	461a      	mov	r2, r3
 8017e6a:	2316      	movs	r3, #22
 8017e6c:	fb02 f303 	mul.w	r3, r2, r3
 8017e70:	68ba      	ldr	r2, [r7, #8]
 8017e72:	4413      	add	r3, r2
 8017e74:	2200      	movs	r2, #0
 8017e76:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	b2da      	uxtb	r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	7bba      	ldrb	r2, [r7, #14]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d92a      	bls.n	8017ee4 <rfalNfcaPollerFullCollisionResolution+0x216>
 8017e8e:	7f3b      	ldrb	r3, [r7, #28]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d102      	bne.n	8017e9a <rfalNfcaPollerFullCollisionResolution+0x1cc>
 8017e94:	7bfb      	ldrb	r3, [r7, #15]
 8017e96:	2b02      	cmp	r3, #2
 8017e98:	d024      	beq.n	8017ee4 <rfalNfcaPollerFullCollisionResolution+0x216>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 8017e9a:	f000 f8a5 	bl	8017fe8 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	2316      	movs	r3, #22
 8017ea6:	fb02 f303 	mul.w	r3, r2, r3
 8017eaa:	3b16      	subs	r3, #22
 8017eac:	68ba      	ldr	r2, [r7, #8]
 8017eae:	4413      	add	r3, r2
 8017eb0:	2201      	movs	r2, #1
 8017eb2:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	781b      	ldrb	r3, [r3, #0]
 8017eb8:	461a      	mov	r2, r3
 8017eba:	2316      	movs	r3, #22
 8017ebc:	fb02 f303 	mul.w	r3, r2, r3
 8017ec0:	68ba      	ldr	r2, [r7, #8]
 8017ec2:	4413      	add	r3, r2
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	2026      	movs	r0, #38	; 0x26
 8017eca:	f7ff fce9 	bl	80178a0 <rfalNfcaPollerCheckPresence>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 8017ed2:	8bfb      	ldrh	r3, [r7, #30]
 8017ed4:	2b04      	cmp	r3, #4
 8017ed6:	d102      	bne.n	8017ede <rfalNfcaPollerFullCollisionResolution+0x210>
            {
                /* No more devices found, exit */
                collPending = false;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8017edc:	e004      	b.n	8017ee8 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 8017ede:	2301      	movs	r3, #1
 8017ee0:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 8017ee2:	e001      	b.n	8017ee8 <rfalNfcaPollerFullCollisionResolution+0x21a>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	7bba      	ldrb	r2, [r7, #14]
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d903      	bls.n	8017efa <rfalNfcaPollerFullCollisionResolution+0x22c>
 8017ef2:	7f3b      	ldrb	r3, [r7, #28]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	f47f af75 	bne.w	8017de4 <rfalNfcaPollerFullCollisionResolution+0x116>
    
    return ERR_NONE;
 8017efa:	2300      	movs	r3, #0
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3720      	adds	r7, #32
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bdb0      	pop	{r4, r5, r7, pc}

08017f04 <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b08c      	sub	sp, #48	; 0x30
 8017f08:	af04      	add	r7, sp, #16
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	607a      	str	r2, [r7, #4]
 8017f10:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d005      	beq.n	8017f24 <rfalNfcaPollerSelect+0x20>
 8017f18:	7afb      	ldrb	r3, [r7, #11]
 8017f1a:	2b0a      	cmp	r3, #10
 8017f1c:	d802      	bhi.n	8017f24 <rfalNfcaPollerSelect+0x20>
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d101      	bne.n	8017f28 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 8017f24:	2307      	movs	r3, #7
 8017f26:	e058      	b.n	8017fda <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 8017f28:	7afb      	ldrb	r3, [r7, #11]
 8017f2a:	4a2e      	ldr	r2, [pc, #184]	; (8017fe4 <rfalNfcaPollerSelect+0xe0>)
 8017f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8017f30:	089b      	lsrs	r3, r3, #2
 8017f32:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 8017f34:	2300      	movs	r3, #0
 8017f36:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8017f38:	2300      	movs	r3, #0
 8017f3a:	77fb      	strb	r3, [r7, #31]
 8017f3c:	e048      	b.n	8017fd0 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 8017f3e:	7ffb      	ldrb	r3, [r7, #31]
 8017f40:	005b      	lsls	r3, r3, #1
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	3b6d      	subs	r3, #109	; 0x6d
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8017f4a:	2370      	movs	r3, #112	; 0x70
 8017f4c:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8017f4e:	7f7a      	ldrb	r2, [r7, #29]
 8017f50:	7ffb      	ldrb	r3, [r7, #31]
 8017f52:	429a      	cmp	r2, r3
 8017f54:	d00f      	beq.n	8017f76 <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 8017f56:	2388      	movs	r3, #136	; 0x88
 8017f58:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8017f5a:	7fbb      	ldrb	r3, [r7, #30]
 8017f5c:	68fa      	ldr	r2, [r7, #12]
 8017f5e:	18d1      	adds	r1, r2, r3
 8017f60:	f107 0310 	add.w	r3, r7, #16
 8017f64:	3303      	adds	r3, #3
 8017f66:	2203      	movs	r2, #3
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f005 fadd 	bl	801d528 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8017f6e:	7fbb      	ldrb	r3, [r7, #30]
 8017f70:	3303      	adds	r3, #3
 8017f72:	77bb      	strb	r3, [r7, #30]
 8017f74:	e005      	b.n	8017f82 <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 8017f76:	7fbb      	ldrb	r3, [r7, #30]
 8017f78:	68fa      	ldr	r2, [r7, #12]
 8017f7a:	4413      	add	r3, r2
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 8017f82:	f107 0310 	add.w	r3, r7, #16
 8017f86:	3302      	adds	r3, #2
 8017f88:	2104      	movs	r1, #4
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7ff fc44 	bl	8017818 <rfalNfcaCalculateBcc>
 8017f90:	4603      	mov	r3, r0
 8017f92:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 8017f94:	f107 0010 	add.w	r0, r7, #16
 8017f98:	f240 6354 	movw	r3, #1620	; 0x654
 8017f9c:	9302      	str	r3, [sp, #8]
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	9301      	str	r3, [sp, #4]
 8017fa2:	f107 0318 	add.w	r3, r7, #24
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	2301      	movs	r3, #1
 8017faa:	687a      	ldr	r2, [r7, #4]
 8017fac:	2107      	movs	r1, #7
 8017fae:	f002 fbb1 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	837b      	strh	r3, [r7, #26]
 8017fb6:	8b7b      	ldrh	r3, [r7, #26]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d001      	beq.n	8017fc0 <rfalNfcaPollerSelect+0xbc>
 8017fbc:	8b7b      	ldrh	r3, [r7, #26]
 8017fbe:	e00c      	b.n	8017fda <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 8017fc0:	8b3b      	ldrh	r3, [r7, #24]
 8017fc2:	2b01      	cmp	r3, #1
 8017fc4:	d001      	beq.n	8017fca <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 8017fc6:	230b      	movs	r3, #11
 8017fc8:	e007      	b.n	8017fda <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8017fca:	7ffb      	ldrb	r3, [r7, #31]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	77fb      	strb	r3, [r7, #31]
 8017fd0:	7ffa      	ldrb	r2, [r7, #31]
 8017fd2:	7f7b      	ldrb	r3, [r7, #29]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d9b2      	bls.n	8017f3e <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8017fd8:	2300      	movs	r3, #0
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3720      	adds	r7, #32
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	cccccccd 	.word	0xcccccccd

08017fe8 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b086      	sub	sp, #24
 8017fec:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 8017fee:	2350      	movs	r3, #80	; 0x50
 8017ff0:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 8017ff6:	1cfa      	adds	r2, r7, #3
 8017ff8:	1d38      	adds	r0, r7, #4
 8017ffa:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8017ffe:	9302      	str	r3, [sp, #8]
 8018000:	2300      	movs	r3, #0
 8018002:	9301      	str	r3, [sp, #4]
 8018004:	2300      	movs	r3, #0
 8018006:	9300      	str	r3, [sp, #0]
 8018008:	2301      	movs	r3, #1
 801800a:	2102      	movs	r1, #2
 801800c:	f002 fb82 	bl	801a714 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 8018010:	2300      	movs	r3, #0
}
 8018012:	4618      	mov	r0, r3
 8018014:	3708      	adds	r7, #8
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}

0801801a <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 801801a:	b480      	push	{r7}
 801801c:	b083      	sub	sp, #12
 801801e:	af00      	add	r7, sp, #0
 8018020:	6078      	str	r0, [r7, #4]
 8018022:	460b      	mov	r3, r1
 8018024:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 8018026:	887b      	ldrh	r3, [r7, #2]
 8018028:	2b02      	cmp	r3, #2
 801802a:	d108      	bne.n	801803e <rfalNfcaListenerIsSleepReq+0x24>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	2b50      	cmp	r3, #80	; 0x50
 8018032:	d104      	bne.n	801803e <rfalNfcaListenerIsSleepReq+0x24>
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	3301      	adds	r3, #1
 8018038:	781b      	ldrb	r3, [r3, #0]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d001      	beq.n	8018042 <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 801803e:	2300      	movs	r3, #0
 8018040:	e000      	b.n	8018044 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 8018042:	2301      	movs	r3, #1
}
 8018044:	4618      	mov	r0, r3
 8018046:	370c      	adds	r7, #12
 8018048:	46bd      	mov	sp, r7
 801804a:	bc80      	pop	{r7}
 801804c:	4770      	bx	lr

0801804e <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 801804e:	b480      	push	{r7}
 8018050:	b083      	sub	sp, #12
 8018052:	af00      	add	r7, sp, #0
 8018054:	6078      	str	r0, [r7, #4]
 8018056:	460b      	mov	r3, r1
 8018058:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 801805a:	78fb      	ldrb	r3, [r7, #3]
 801805c:	2b0c      	cmp	r3, #12
 801805e:	d004      	beq.n	801806a <rfalNfcbCheckSensbRes+0x1c>
 8018060:	78fb      	ldrb	r3, [r7, #3]
 8018062:	2b0d      	cmp	r3, #13
 8018064:	d001      	beq.n	801806a <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 8018066:	230b      	movs	r3, #11
 8018068:	e00c      	b.n	8018084 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	7a9b      	ldrb	r3, [r3, #10]
 801806e:	f003 0308 	and.w	r3, r3, #8
 8018072:	2b00      	cmp	r3, #0
 8018074:	d103      	bne.n	801807e <rfalNfcbCheckSensbRes+0x30>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	781b      	ldrb	r3, [r3, #0]
 801807a:	2b50      	cmp	r3, #80	; 0x50
 801807c:	d001      	beq.n	8018082 <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 801807e:	230b      	movs	r3, #11
 8018080:	e000      	b.n	8018084 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 8018082:	2300      	movs	r3, #0
}
 8018084:	4618      	mov	r0, r3
 8018086:	370c      	adds	r7, #12
 8018088:	46bd      	mov	sp, r7
 801808a:	bc80      	pop	{r7}
 801808c:	4770      	bx	lr
	...

08018090 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 8018096:	2200      	movs	r2, #0
 8018098:	2100      	movs	r1, #0
 801809a:	2003      	movs	r0, #3
 801809c:	f001 fd0a 	bl	8019ab4 <rfalSetMode>
 80180a0:	4603      	mov	r3, r0
 80180a2:	80fb      	strh	r3, [r7, #6]
 80180a4:	88fb      	ldrh	r3, [r7, #6]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d001      	beq.n	80180ae <rfalNfcbPollerInitialize+0x1e>
 80180aa:	88fb      	ldrh	r3, [r7, #6]
 80180ac:	e014      	b.n	80180d8 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80180ae:	2001      	movs	r0, #1
 80180b0:	f002 f89c 	bl	801a1ec <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 80180b4:	480a      	ldr	r0, [pc, #40]	; (80180e0 <rfalNfcbPollerInitialize+0x50>)
 80180b6:	f002 f8d1 	bl	801a25c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 80180ba:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80180be:	f002 f8b9 	bl	801a234 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 80180c2:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80180c6:	f002 f8a1 	bl	801a20c <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 80180ca:	4b06      	ldr	r3, [pc, #24]	; (80180e4 <rfalNfcbPollerInitialize+0x54>)
 80180cc:	2200      	movs	r2, #0
 80180ce:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 80180d0:	4b04      	ldr	r3, [pc, #16]	; (80180e4 <rfalNfcbPollerInitialize+0x54>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 80180d6:	2300      	movs	r3, #0
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	000108d8 	.word	0x000108d8
 80180e4:	20003af8 	.word	0x20003af8

080180e8 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b08a      	sub	sp, #40	; 0x28
 80180ec:	af04      	add	r7, sp, #16
 80180ee:	60ba      	str	r2, [r7, #8]
 80180f0:	607b      	str	r3, [r7, #4]
 80180f2:	4603      	mov	r3, r0
 80180f4:	73fb      	strb	r3, [r7, #15]
 80180f6:	460b      	mov	r3, r1
 80180f8:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 80180fa:	7bfb      	ldrb	r3, [r7, #15]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d002      	beq.n	8018106 <rfalNfcbPollerCheckPresence+0x1e>
 8018100:	7bfb      	ldrb	r3, [r7, #15]
 8018102:	2b08      	cmp	r3, #8
 8018104:	d108      	bne.n	8018118 <rfalNfcbPollerCheckPresence+0x30>
 8018106:	7bbb      	ldrb	r3, [r7, #14]
 8018108:	2b04      	cmp	r3, #4
 801810a:	d805      	bhi.n	8018118 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 801810c:	68bb      	ldr	r3, [r7, #8]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d002      	beq.n	8018118 <rfalNfcbPollerCheckPresence+0x30>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d101      	bne.n	801811c <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 8018118:	2307      	movs	r3, #7
 801811a:	e044      	b.n	80181a6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2200      	movs	r2, #0
 8018120:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 8018122:	220d      	movs	r2, #13
 8018124:	2100      	movs	r1, #0
 8018126:	68b8      	ldr	r0, [r7, #8]
 8018128:	f005 fa26 	bl	801d578 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 801812c:	2305      	movs	r3, #5
 801812e:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 8018130:	4b1f      	ldr	r3, [pc, #124]	; (80181b0 <rfalNfcbPollerCheckPresence+0xc8>)
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 8018136:	4b1e      	ldr	r3, [pc, #120]	; (80181b0 <rfalNfcbPollerCheckPresence+0xc8>)
 8018138:	785b      	ldrb	r3, [r3, #1]
 801813a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801813e:	b2da      	uxtb	r2, r3
 8018140:	7bfb      	ldrb	r3, [r7, #15]
 8018142:	4313      	orrs	r3, r2
 8018144:	b2da      	uxtb	r2, r3
 8018146:	7bbb      	ldrb	r3, [r7, #14]
 8018148:	4313      	orrs	r3, r2
 801814a:	b2db      	uxtb	r3, r3
 801814c:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 801814e:	f107 0010 	add.w	r0, r7, #16
 8018152:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8018156:	9302      	str	r3, [sp, #8]
 8018158:	2300      	movs	r3, #0
 801815a:	9301      	str	r3, [sp, #4]
 801815c:	f107 0314 	add.w	r3, r7, #20
 8018160:	9300      	str	r3, [sp, #0]
 8018162:	230d      	movs	r3, #13
 8018164:	68ba      	ldr	r2, [r7, #8]
 8018166:	2103      	movs	r1, #3
 8018168:	f002 fad4 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801816c:	4603      	mov	r3, r0
 801816e:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8018170:	8abb      	ldrh	r3, [r7, #20]
 8018172:	b2da      	uxtb	r2, r3
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8018178:	8afb      	ldrh	r3, [r7, #22]
 801817a:	2b15      	cmp	r3, #21
 801817c:	d002      	beq.n	8018184 <rfalNfcbPollerCheckPresence+0x9c>
 801817e:	8afb      	ldrh	r3, [r7, #22]
 8018180:	2b09      	cmp	r3, #9
 8018182:	d104      	bne.n	801818e <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2200      	movs	r2, #0
 8018188:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 801818a:	2300      	movs	r3, #0
 801818c:	e00b      	b.n	80181a6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 801818e:	8afb      	ldrh	r3, [r7, #22]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d107      	bne.n	80181a4 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	4619      	mov	r1, r3
 801819a:	68b8      	ldr	r0, [r7, #8]
 801819c:	f7ff ff57 	bl	801804e <rfalNfcbCheckSensbRes>
 80181a0:	4603      	mov	r3, r0
 80181a2:	e000      	b.n	80181a6 <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 80181a4:	8afb      	ldrh	r3, [r7, #22]
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	3718      	adds	r7, #24
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
 80181ae:	bf00      	nop
 80181b0:	20003af8 	.word	0x20003af8

080181b4 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b08a      	sub	sp, #40	; 0x28
 80181b8:	af04      	add	r7, sp, #16
 80181ba:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d101      	bne.n	80181c6 <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 80181c2:	2307      	movs	r3, #7
 80181c4:	e024      	b.n	8018210 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 80181c6:	2350      	movs	r3, #80	; 0x50
 80181c8:	733b      	strb	r3, [r7, #12]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 80181ce:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 80181d2:	f107 0208 	add.w	r2, r7, #8
 80181d6:	f107 000c 	add.w	r0, r7, #12
 80181da:	4b0f      	ldr	r3, [pc, #60]	; (8018218 <rfalNfcbPollerSleep+0x64>)
 80181dc:	9302      	str	r3, [sp, #8]
 80181de:	2300      	movs	r3, #0
 80181e0:	9301      	str	r3, [sp, #4]
 80181e2:	f107 0314 	add.w	r3, r7, #20
 80181e6:	9300      	str	r3, [sp, #0]
 80181e8:	2301      	movs	r3, #1
 80181ea:	2105      	movs	r1, #5
 80181ec:	f002 fa92 	bl	801a714 <rfalTransceiveBlockingTxRx>
 80181f0:	4603      	mov	r3, r0
 80181f2:	82fb      	strh	r3, [r7, #22]
 80181f4:	8afb      	ldrh	r3, [r7, #22]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d001      	beq.n	80181fe <rfalNfcbPollerSleep+0x4a>
 80181fa:	8afb      	ldrh	r3, [r7, #22]
 80181fc:	e008      	b.n	8018210 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 80181fe:	8abb      	ldrh	r3, [r7, #20]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d102      	bne.n	801820a <rfalNfcbPollerSleep+0x56>
 8018204:	7a3b      	ldrb	r3, [r7, #8]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 801820a:	230b      	movs	r3, #11
 801820c:	e000      	b.n	8018210 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 801820e:	2300      	movs	r3, #0
}
 8018210:	4618      	mov	r0, r3
 8018212:	3718      	adds	r7, #24
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	0003a278 	.word	0x0003a278

0801821c <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b08a      	sub	sp, #40	; 0x28
 8018220:	af04      	add	r7, sp, #16
 8018222:	4603      	mov	r3, r0
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
 8018228:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d008      	beq.n	8018242 <rfalNfcbPollerSlotMarker+0x26>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d005      	beq.n	8018242 <rfalNfcbPollerSlotMarker+0x26>
 8018236:	7bfb      	ldrb	r3, [r7, #15]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d002      	beq.n	8018242 <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 801823c:	7bfb      	ldrb	r3, [r7, #15]
 801823e:	2b10      	cmp	r3, #16
 8018240:	d901      	bls.n	8018246 <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 8018242:	2307      	movs	r3, #7
 8018244:	e02f      	b.n	80182a6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 8018246:	7bfb      	ldrb	r3, [r7, #15]
 8018248:	011b      	lsls	r3, r3, #4
 801824a:	b25b      	sxtb	r3, r3
 801824c:	f043 0305 	orr.w	r3, r3, #5
 8018250:	b25b      	sxtb	r3, r3
 8018252:	b2db      	uxtb	r3, r3
 8018254:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 8018256:	f107 0014 	add.w	r0, r7, #20
 801825a:	4b15      	ldr	r3, [pc, #84]	; (80182b0 <rfalNfcbPollerSlotMarker+0x94>)
 801825c:	9302      	str	r3, [sp, #8]
 801825e:	2300      	movs	r3, #0
 8018260:	9301      	str	r3, [sp, #4]
 8018262:	f107 0312 	add.w	r3, r7, #18
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	230d      	movs	r3, #13
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	2101      	movs	r1, #1
 801826e:	f002 fa51 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8018272:	4603      	mov	r3, r0
 8018274:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8018276:	8a7b      	ldrh	r3, [r7, #18]
 8018278:	b2da      	uxtb	r2, r3
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801827e:	8afb      	ldrh	r3, [r7, #22]
 8018280:	2b15      	cmp	r3, #21
 8018282:	d002      	beq.n	801828a <rfalNfcbPollerSlotMarker+0x6e>
 8018284:	8afb      	ldrh	r3, [r7, #22]
 8018286:	2b09      	cmp	r3, #9
 8018288:	d101      	bne.n	801828e <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 801828a:	231d      	movs	r3, #29
 801828c:	e00b      	b.n	80182a6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 801828e:	8afb      	ldrh	r3, [r7, #22]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d107      	bne.n	80182a4 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	4619      	mov	r1, r3
 801829a:	68b8      	ldr	r0, [r7, #8]
 801829c:	f7ff fed7 	bl	801804e <rfalNfcbCheckSensbRes>
 80182a0:	4603      	mov	r3, r0
 80182a2:	e000      	b.n	80182a6 <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 80182a4:	8afb      	ldrh	r3, [r7, #22]
}
 80182a6:	4618      	mov	r0, r3
 80182a8:	3718      	adds	r7, #24
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	0003a278 	.word	0x0003a278

080182b4 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	4603      	mov	r3, r0
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	607a      	str	r2, [r7, #4]
 80182c0:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	68ba      	ldr	r2, [r7, #8]
 80182c6:	2100      	movs	r1, #0
 80182c8:	2000      	movs	r0, #0
 80182ca:	f7ff ff0d 	bl	80180e8 <rfalNfcbPollerCheckPresence>
 80182ce:	4603      	mov	r3, r0
}
 80182d0:	4618      	mov	r0, r3
 80182d2:	3710      	adds	r7, #16
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b08a      	sub	sp, #40	; 0x28
 80182dc:	af04      	add	r7, sp, #16
 80182de:	60ba      	str	r2, [r7, #8]
 80182e0:	607b      	str	r3, [r7, #4]
 80182e2:	4603      	mov	r3, r0
 80182e4:	73fb      	strb	r3, [r7, #15]
 80182e6:	460b      	mov	r3, r1
 80182e8:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 80182ea:	7bb9      	ldrb	r1, [r7, #14]
 80182ec:	7bf8      	ldrb	r0, [r7, #15]
 80182ee:	f107 0317 	add.w	r3, r7, #23
 80182f2:	9302      	str	r3, [sp, #8]
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	9301      	str	r3, [sp, #4]
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	2304      	movs	r3, #4
 80182fe:	2200      	movs	r2, #0
 8018300:	f000 f805 	bl	801830e <rfalNfcbPollerSlottedCollisionResolution>
 8018304:	4603      	mov	r3, r0
}
 8018306:	4618      	mov	r0, r3
 8018308:	3718      	adds	r7, #24
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}

0801830e <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 801830e:	b590      	push	{r4, r7, lr}
 8018310:	b085      	sub	sp, #20
 8018312:	af00      	add	r7, sp, #0
 8018314:	4604      	mov	r4, r0
 8018316:	4608      	mov	r0, r1
 8018318:	4611      	mov	r1, r2
 801831a:	461a      	mov	r2, r3
 801831c:	4623      	mov	r3, r4
 801831e:	71fb      	strb	r3, [r7, #7]
 8018320:	4603      	mov	r3, r0
 8018322:	71bb      	strb	r3, [r7, #6]
 8018324:	460b      	mov	r3, r1
 8018326:	717b      	strb	r3, [r7, #5]
 8018328:	4613      	mov	r3, r2
 801832a:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 801832c:	6a3b      	ldr	r3, [r7, #32]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d011      	beq.n	8018356 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8018332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018334:	2b00      	cmp	r3, #0
 8018336:	d00e      	beq.n	8018356 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8018338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833a:	2b00      	cmp	r3, #0
 801833c:	d00b      	beq.n	8018356 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 801833e:	797b      	ldrb	r3, [r7, #5]
 8018340:	2b04      	cmp	r3, #4
 8018342:	d808      	bhi.n	8018356 <rfalNfcbPollerSlottedCollisionResolution+0x48>
 8018344:	793b      	ldrb	r3, [r7, #4]
 8018346:	2b04      	cmp	r3, #4
 8018348:	d805      	bhi.n	8018356 <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 801834a:	79fb      	ldrb	r3, [r7, #7]
 801834c:	2b02      	cmp	r3, #2
 801834e:	d104      	bne.n	801835a <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 8018350:	797b      	ldrb	r3, [r7, #5]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d001      	beq.n	801835a <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 8018356:	2307      	movs	r3, #7
 8018358:	e14c      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 801835a:	2300      	movs	r3, #0
 801835c:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 801835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018360:	2200      	movs	r2, #0
 8018362:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 8018364:	2300      	movs	r3, #0
 8018366:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 8018368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801836a:	2200      	movs	r2, #0
 801836c:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 801836e:	79fb      	ldrb	r3, [r7, #7]
 8018370:	2b02      	cmp	r3, #2
 8018372:	d010      	beq.n	8018396 <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 8018374:	6a3b      	ldr	r3, [r7, #32]
 8018376:	1c5a      	adds	r2, r3, #1
 8018378:	6a3b      	ldr	r3, [r7, #32]
 801837a:	7979      	ldrb	r1, [r7, #5]
 801837c:	2008      	movs	r0, #8
 801837e:	f7ff feb3 	bl	80180e8 <rfalNfcbPollerCheckPresence>
 8018382:	4603      	mov	r3, r0
 8018384:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 8018386:	89fb      	ldrh	r3, [r7, #14]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d004      	beq.n	8018396 <rfalNfcbPollerSlottedCollisionResolution+0x88>
 801838c:	797b      	ldrb	r3, [r7, #5]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d101      	bne.n	8018396 <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 8018392:	89fb      	ldrh	r3, [r7, #14]
 8018394:	e12e      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 8018396:	79fb      	ldrb	r3, [r7, #7]
 8018398:	2b01      	cmp	r3, #1
 801839a:	d105      	bne.n	80183a8 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 801839c:	6a3b      	ldr	r3, [r7, #32]
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d101      	bne.n	80183a8 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 80183a4:	2309      	movs	r3, #9
 80183a6:	e125      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 80183a8:	797b      	ldrb	r3, [r7, #5]
 80183aa:	737b      	strb	r3, [r7, #13]
 80183ac:	e11c      	b.n	80185e8 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 80183ae:	79fb      	ldrb	r3, [r7, #7]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d11a      	bne.n	80183ea <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 80183b4:	7afb      	ldrb	r3, [r7, #11]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d017      	beq.n	80183ea <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 80183ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	461a      	mov	r2, r3
 80183c0:	4613      	mov	r3, r2
 80183c2:	011b      	lsls	r3, r3, #4
 80183c4:	1a9b      	subs	r3, r3, r2
 80183c6:	3b0f      	subs	r3, #15
 80183c8:	6a3a      	ldr	r2, [r7, #32]
 80183ca:	4413      	add	r3, r2
 80183cc:	3302      	adds	r3, #2
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ff fef0 	bl	80181b4 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 80183d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	461a      	mov	r2, r3
 80183da:	4613      	mov	r3, r2
 80183dc:	011b      	lsls	r3, r3, #4
 80183de:	1a9b      	subs	r3, r3, r2
 80183e0:	3b0f      	subs	r3, #15
 80183e2:	6a3a      	ldr	r2, [r7, #32]
 80183e4:	4413      	add	r3, r2
 80183e6:	2201      	movs	r2, #1
 80183e8:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 80183ea:	7b7a      	ldrb	r2, [r7, #13]
 80183ec:	797b      	ldrb	r3, [r7, #5]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d103      	bne.n	80183fa <rfalNfcbPollerSlottedCollisionResolution+0xec>
 80183f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d017      	beq.n	801842a <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80183fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	461a      	mov	r2, r3
 8018400:	4613      	mov	r3, r2
 8018402:	011b      	lsls	r3, r3, #4
 8018404:	1a9b      	subs	r3, r3, r2
 8018406:	6a3a      	ldr	r2, [r7, #32]
 8018408:	4413      	add	r3, r2
 801840a:	1c58      	adds	r0, r3, #1
 801840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840e:	781b      	ldrb	r3, [r3, #0]
 8018410:	461a      	mov	r2, r3
 8018412:	4613      	mov	r3, r2
 8018414:	011b      	lsls	r3, r3, #4
 8018416:	1a9b      	subs	r3, r3, r2
 8018418:	6a3a      	ldr	r2, [r7, #32]
 801841a:	4413      	add	r3, r2
 801841c:	7b79      	ldrb	r1, [r7, #13]
 801841e:	4602      	mov	r2, r0
 8018420:	2000      	movs	r0, #0
 8018422:	f7ff fe61 	bl	80180e8 <rfalNfcbPollerCheckPresence>
 8018426:	4603      	mov	r3, r0
 8018428:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 801842a:	2300      	movs	r3, #0
 801842c:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 801842e:	2300      	movs	r3, #0
 8018430:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 8018432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018434:	2200      	movs	r2, #0
 8018436:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 8018438:	7b3b      	ldrb	r3, [r7, #12]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d017      	beq.n	801846e <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 801843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	461a      	mov	r2, r3
 8018444:	4613      	mov	r3, r2
 8018446:	011b      	lsls	r3, r3, #4
 8018448:	1a9b      	subs	r3, r3, r2
 801844a:	6a3a      	ldr	r2, [r7, #32]
 801844c:	4413      	add	r3, r2
 801844e:	1c59      	adds	r1, r3, #1
 8018450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018452:	781b      	ldrb	r3, [r3, #0]
 8018454:	461a      	mov	r2, r3
 8018456:	4613      	mov	r3, r2
 8018458:	011b      	lsls	r3, r3, #4
 801845a:	1a9b      	subs	r3, r3, r2
 801845c:	6a3a      	ldr	r2, [r7, #32]
 801845e:	4413      	add	r3, r2
 8018460:	461a      	mov	r2, r3
 8018462:	7b3b      	ldrb	r3, [r7, #12]
 8018464:	4618      	mov	r0, r3
 8018466:	f7ff fed9 	bl	801821c <rfalNfcbPollerSlotMarker>
 801846a:	4603      	mov	r3, r0
 801846c:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 801846e:	89fb      	ldrh	r3, [r7, #14]
 8018470:	2b04      	cmp	r3, #4
 8018472:	f000 809d 	beq.w	80185b0 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 8018476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	461a      	mov	r2, r3
 801847c:	4613      	mov	r3, r2
 801847e:	011b      	lsls	r3, r3, #4
 8018480:	1a9b      	subs	r3, r3, r2
 8018482:	6a3a      	ldr	r2, [r7, #32]
 8018484:	4413      	add	r3, r2
 8018486:	1c58      	adds	r0, r3, #1
 8018488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	461a      	mov	r2, r3
 801848e:	4613      	mov	r3, r2
 8018490:	011b      	lsls	r3, r3, #4
 8018492:	1a9b      	subs	r3, r3, r2
 8018494:	6a3a      	ldr	r2, [r7, #32]
 8018496:	4413      	add	r3, r2
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	4619      	mov	r1, r3
 801849c:	f7ff fdd7 	bl	801804e <rfalNfcbCheckSensbRes>
 80184a0:	4603      	mov	r3, r0
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d177      	bne.n	8018596 <rfalNfcbPollerSlottedCollisionResolution+0x288>
 80184a6:	89fb      	ldrh	r3, [r7, #14]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d174      	bne.n	8018596 <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 80184ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ae:	781b      	ldrb	r3, [r3, #0]
 80184b0:	461a      	mov	r2, r3
 80184b2:	4613      	mov	r3, r2
 80184b4:	011b      	lsls	r3, r3, #4
 80184b6:	1a9b      	subs	r3, r3, r2
 80184b8:	6a3a      	ldr	r2, [r7, #32]
 80184ba:	4413      	add	r3, r2
 80184bc:	2200      	movs	r2, #0
 80184be:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 80184c0:	79fb      	ldrb	r3, [r7, #7]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d107      	bne.n	80184d6 <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	781b      	ldrb	r3, [r3, #0]
 80184ca:	3301      	adds	r3, #1
 80184cc:	b2da      	uxtb	r2, r3
 80184ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d0:	701a      	strb	r2, [r3, #0]
                                return ret;
 80184d2:	89fb      	ldrh	r3, [r7, #14]
 80184d4:	e08e      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 80184d6:	79fb      	ldrb	r3, [r7, #7]
 80184d8:	2b02      	cmp	r3, #2
 80184da:	d12b      	bne.n	8018534 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 80184dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	3301      	adds	r3, #1
 80184e2:	b2da      	uxtb	r2, r3
 80184e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e6:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 80184e8:	7afb      	ldrb	r3, [r7, #11]
 80184ea:	3301      	adds	r3, #1
 80184ec:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80184ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	79ba      	ldrb	r2, [r7, #6]
 80184f4:	429a      	cmp	r2, r3
 80184f6:	d902      	bls.n	80184fe <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 80184f8:	7b7b      	ldrb	r3, [r7, #13]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d101      	bne.n	8018502 <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 80184fe:	89fb      	ldrh	r3, [r7, #14]
 8018500:	e078      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8018502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	461a      	mov	r2, r3
 8018508:	4613      	mov	r3, r2
 801850a:	011b      	lsls	r3, r3, #4
 801850c:	1a9b      	subs	r3, r3, r2
 801850e:	3b0f      	subs	r3, #15
 8018510:	6a3a      	ldr	r2, [r7, #32]
 8018512:	4413      	add	r3, r2
 8018514:	3302      	adds	r3, #2
 8018516:	4618      	mov	r0, r3
 8018518:	f7ff fe4c 	bl	80181b4 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 801851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	461a      	mov	r2, r3
 8018522:	4613      	mov	r3, r2
 8018524:	011b      	lsls	r3, r3, #4
 8018526:	1a9b      	subs	r3, r3, r2
 8018528:	3b0f      	subs	r3, #15
 801852a:	6a3a      	ldr	r2, [r7, #32]
 801852c:	4413      	add	r3, r2
 801852e:	2201      	movs	r2, #1
 8018530:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8018532:	e03c      	b.n	80185ae <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 8018534:	79fb      	ldrb	r3, [r7, #7]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d139      	bne.n	80185ae <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 801853a:	7afb      	ldrb	r3, [r7, #11]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d017      	beq.n	8018570 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 8018540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	461a      	mov	r2, r3
 8018546:	4613      	mov	r3, r2
 8018548:	011b      	lsls	r3, r3, #4
 801854a:	1a9b      	subs	r3, r3, r2
 801854c:	3b0f      	subs	r3, #15
 801854e:	6a3a      	ldr	r2, [r7, #32]
 8018550:	4413      	add	r3, r2
 8018552:	3302      	adds	r3, #2
 8018554:	4618      	mov	r0, r3
 8018556:	f7ff fe2d 	bl	80181b4 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 801855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	461a      	mov	r2, r3
 8018560:	4613      	mov	r3, r2
 8018562:	011b      	lsls	r3, r3, #4
 8018564:	1a9b      	subs	r3, r3, r2
 8018566:	3b0f      	subs	r3, #15
 8018568:	6a3a      	ldr	r2, [r7, #32]
 801856a:	4413      	add	r3, r2
 801856c:	2201      	movs	r2, #1
 801856e:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 8018570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	3301      	adds	r3, #1
 8018576:	b2da      	uxtb	r2, r3
 8018578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857a:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 801857c:	7afb      	ldrb	r3, [r7, #11]
 801857e:	3301      	adds	r3, #1
 8018580:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8018582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	79ba      	ldrb	r2, [r7, #6]
 8018588:	429a      	cmp	r2, r3
 801858a:	d902      	bls.n	8018592 <rfalNfcbPollerSlottedCollisionResolution+0x284>
 801858c:	7b7b      	ldrb	r3, [r7, #13]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d10d      	bne.n	80185ae <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 8018592:	89fb      	ldrh	r3, [r7, #14]
 8018594:	e02e      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8018596:	79bb      	ldrb	r3, [r7, #6]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d104      	bne.n	80185a6 <rfalNfcbPollerSlottedCollisionResolution+0x298>
 801859c:	7b7b      	ldrb	r3, [r7, #13]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d101      	bne.n	80185a6 <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 80185a2:	231d      	movs	r3, #29
 80185a4:	e026      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 80185a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a8:	2201      	movs	r2, #1
 80185aa:	701a      	strb	r2, [r3, #0]
 80185ac:	e000      	b.n	80185b0 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 80185ae:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 80185b0:	7b3b      	ldrb	r3, [r7, #12]
 80185b2:	3301      	adds	r3, #1
 80185b4:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 80185b6:	7b7b      	ldrb	r3, [r7, #13]
 80185b8:	2201      	movs	r2, #1
 80185ba:	fa02 f303 	lsl.w	r3, r2, r3
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	7b3a      	ldrb	r2, [r7, #12]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	f4ff af38 	bcc.w	8018438 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 80185c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	f083 0301 	eor.w	r3, r3, #1
 80185d0:	b2db      	uxtb	r3, r3
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d001      	beq.n	80185da <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 80185d6:	2300      	movs	r3, #0
 80185d8:	e00c      	b.n	80185f4 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 80185da:	7afb      	ldrb	r3, [r7, #11]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f47f aee6 	bne.w	80183ae <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 80185e2:	7b7b      	ldrb	r3, [r7, #13]
 80185e4:	3301      	adds	r3, #1
 80185e6:	737b      	strb	r3, [r7, #13]
 80185e8:	7b7a      	ldrb	r2, [r7, #13]
 80185ea:	793b      	ldrb	r3, [r7, #4]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	f67f aede 	bls.w	80183ae <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 80185f2:	2300      	movs	r3, #0
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3714      	adds	r7, #20
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd90      	pop	{r4, r7, pc}

080185fc <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 80185fc:	b480      	push	{r7}
 80185fe:	b085      	sub	sp, #20
 8018600:	af00      	add	r7, sp, #0
 8018602:	4603      	mov	r3, r0
 8018604:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8018606:	4a0a      	ldr	r2, [pc, #40]	; (8018630 <rfalNfcbTR2ToFDT+0x34>)
 8018608:	f107 0308 	add.w	r3, r7, #8
 801860c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018610:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 8018614:	79fb      	ldrb	r3, [r7, #7]
 8018616:	f003 0303 	and.w	r3, r3, #3
 801861a:	005b      	lsls	r3, r3, #1
 801861c:	3310      	adds	r3, #16
 801861e:	443b      	add	r3, r7
 8018620:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 8018624:	4618      	mov	r0, r3
 8018626:	3714      	adds	r7, #20
 8018628:	46bd      	mov	sp, r7
 801862a:	bc80      	pop	{r7}
 801862c:	4770      	bx	lr
 801862e:	bf00      	nop
 8018630:	080216ac 	.word	0x080216ac

08018634 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 8018634:	b5b0      	push	{r4, r5, r7, lr}
 8018636:	b08c      	sub	sp, #48	; 0x30
 8018638:	af00      	add	r7, sp, #0
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
 801863e:	4611      	mov	r1, r2
 8018640:	461a      	mov	r2, r3
 8018642:	460b      	mov	r3, r1
 8018644:	71fb      	strb	r3, [r7, #7]
 8018646:	4613      	mov	r3, r2
 8018648:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 801864a:	e0e5      	b.n	8018818 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 801864c:	2300      	movs	r3, #0
 801864e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 8018652:	4b78      	ldr	r3, [pc, #480]	; (8018834 <rfalNfcfComputeValidSENF+0x200>)
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	3b01      	subs	r3, #1
 8018658:	b2da      	uxtb	r2, r3
 801865a:	4b76      	ldr	r3, [pc, #472]	; (8018834 <rfalNfcfComputeValidSENF+0x200>)
 801865c:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 801865e:	4b75      	ldr	r3, [pc, #468]	; (8018834 <rfalNfcfComputeValidSENF+0x200>)
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	461a      	mov	r2, r3
 8018664:	4613      	mov	r3, r2
 8018666:	009b      	lsls	r3, r3, #2
 8018668:	4413      	add	r3, r2
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	4a71      	ldr	r2, [pc, #452]	; (8018834 <rfalNfcfComputeValidSENF+0x200>)
 801866e:	4413      	add	r3, r2
 8018670:	3302      	adds	r3, #2
 8018672:	f107 0414 	add.w	r4, r7, #20
 8018676:	461d      	mov	r5, r3
 8018678:	6828      	ldr	r0, [r5, #0]
 801867a:	6869      	ldr	r1, [r5, #4]
 801867c:	68aa      	ldr	r2, [r5, #8]
 801867e:	68eb      	ldr	r3, [r5, #12]
 8018680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018682:	8a2b      	ldrh	r3, [r5, #16]
 8018684:	7caa      	ldrb	r2, [r5, #18]
 8018686:	8023      	strh	r3, [r4, #0]
 8018688:	4613      	mov	r3, r2
 801868a:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 801868c:	f107 0314 	add.w	r3, r7, #20
 8018690:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8018692:	2300      	movs	r3, #0
 8018694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018698:	e01b      	b.n	80186d2 <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 801869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869c:	1c98      	adds	r0, r3, #2
 801869e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80186a2:	4613      	mov	r3, r2
 80186a4:	00db      	lsls	r3, r3, #3
 80186a6:	4413      	add	r3, r2
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	4413      	add	r3, r2
 80186ac:	68fa      	ldr	r2, [r7, #12]
 80186ae:	4413      	add	r3, r2
 80186b0:	3302      	adds	r3, #2
 80186b2:	2208      	movs	r2, #8
 80186b4:	4619      	mov	r1, r3
 80186b6:	f004 ff27 	bl	801d508 <memcmp>
 80186ba:	4603      	mov	r3, r0
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d103      	bne.n	80186c8 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 80186c0:	2301      	movs	r3, #1
 80186c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 80186c6:	e00a      	b.n	80186de <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 80186c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80186cc:	3301      	adds	r3, #1
 80186ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80186da:	429a      	cmp	r2, r3
 80186dc:	d3dd      	bcc.n	801869a <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 80186de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d006      	beq.n	80186f4 <rfalNfcfComputeValidSENF+0xc0>
 80186e6:	79bb      	ldrb	r3, [r7, #6]
 80186e8:	f083 0301 	eor.w	r3, r3, #1
 80186ec:	b2db      	uxtb	r3, r3
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d000      	beq.n	80186f4 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 80186f2:	e091      	b.n	8018818 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 80186f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	3b02      	subs	r3, #2
 80186fa:	2b0f      	cmp	r3, #15
 80186fc:	f240 808c 	bls.w	8018818 <rfalNfcfComputeValidSENF+0x1e4>
 8018700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	3b02      	subs	r3, #2
 8018706:	2b12      	cmp	r3, #18
 8018708:	d900      	bls.n	801870c <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 801870a:	e085      	b.n	8018818 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	785b      	ldrb	r3, [r3, #1]
 8018710:	2b01      	cmp	r3, #1
 8018712:	d000      	beq.n	8018716 <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 8018714:	e080      	b.n	8018818 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 8018716:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801871a:	2b00      	cmp	r3, #0
 801871c:	d02a      	beq.n	8018774 <rfalNfcfComputeValidSENF+0x140>
 801871e:	79bb      	ldrb	r3, [r7, #6]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d027      	beq.n	8018774 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8018724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018726:	7819      	ldrb	r1, [r3, #0]
 8018728:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801872c:	4613      	mov	r3, r2
 801872e:	00db      	lsls	r3, r3, #3
 8018730:	4413      	add	r3, r2
 8018732:	005b      	lsls	r3, r3, #1
 8018734:	4413      	add	r3, r2
 8018736:	68fa      	ldr	r2, [r7, #12]
 8018738:	4413      	add	r3, r2
 801873a:	1e4a      	subs	r2, r1, #1
 801873c:	b2d2      	uxtb	r2, r2
 801873e:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8018740:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018744:	4613      	mov	r3, r2
 8018746:	00db      	lsls	r3, r3, #3
 8018748:	4413      	add	r3, r2
 801874a:	005b      	lsls	r3, r3, #1
 801874c:	4413      	add	r3, r2
 801874e:	68fa      	ldr	r2, [r7, #12]
 8018750:	4413      	add	r3, r2
 8018752:	1c58      	adds	r0, r3, #1
 8018754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018756:	1c59      	adds	r1, r3, #1
 8018758:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801875c:	4613      	mov	r3, r2
 801875e:	00db      	lsls	r3, r3, #3
 8018760:	4413      	add	r3, r2
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	4413      	add	r3, r2
 8018766:	68fa      	ldr	r2, [r7, #12]
 8018768:	4413      	add	r3, r2
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	461a      	mov	r2, r3
 801876e:	f004 fedb 	bl	801d528 <memcpy>
            continue;
 8018772:	e051      	b.n	8018818 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8018774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018776:	7819      	ldrb	r1, [r3, #0]
 8018778:	68bb      	ldr	r3, [r7, #8]
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	461a      	mov	r2, r3
 801877e:	4613      	mov	r3, r2
 8018780:	00db      	lsls	r3, r3, #3
 8018782:	4413      	add	r3, r2
 8018784:	005b      	lsls	r3, r3, #1
 8018786:	4413      	add	r3, r2
 8018788:	68fa      	ldr	r2, [r7, #12]
 801878a:	4413      	add	r3, r2
 801878c:	1e4a      	subs	r2, r1, #1
 801878e:	b2d2      	uxtb	r2, r2
 8018790:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	461a      	mov	r2, r3
 8018798:	4613      	mov	r3, r2
 801879a:	00db      	lsls	r3, r3, #3
 801879c:	4413      	add	r3, r2
 801879e:	005b      	lsls	r3, r3, #1
 80187a0:	4413      	add	r3, r2
 80187a2:	68fa      	ldr	r2, [r7, #12]
 80187a4:	4413      	add	r3, r2
 80187a6:	1c58      	adds	r0, r3, #1
 80187a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187aa:	1c59      	adds	r1, r3, #1
 80187ac:	68bb      	ldr	r3, [r7, #8]
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	461a      	mov	r2, r3
 80187b2:	4613      	mov	r3, r2
 80187b4:	00db      	lsls	r3, r3, #3
 80187b6:	4413      	add	r3, r2
 80187b8:	005b      	lsls	r3, r3, #1
 80187ba:	4413      	add	r3, r2
 80187bc:	68fa      	ldr	r2, [r7, #12]
 80187be:	4413      	add	r3, r2
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	461a      	mov	r2, r3
 80187c4:	f004 feb0 	bl	801d528 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	781b      	ldrb	r3, [r3, #0]
 80187cc:	461a      	mov	r2, r3
 80187ce:	4613      	mov	r3, r2
 80187d0:	00db      	lsls	r3, r3, #3
 80187d2:	4413      	add	r3, r2
 80187d4:	005b      	lsls	r3, r3, #1
 80187d6:	4413      	add	r3, r2
 80187d8:	68fa      	ldr	r2, [r7, #12]
 80187da:	4413      	add	r3, r2
 80187dc:	789b      	ldrb	r3, [r3, #2]
 80187de:	2b01      	cmp	r3, #1
 80187e0:	d10e      	bne.n	8018800 <rfalNfcfComputeValidSENF+0x1cc>
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	461a      	mov	r2, r3
 80187e8:	4613      	mov	r3, r2
 80187ea:	00db      	lsls	r3, r3, #3
 80187ec:	4413      	add	r3, r2
 80187ee:	005b      	lsls	r3, r3, #1
 80187f0:	4413      	add	r3, r2
 80187f2:	68fa      	ldr	r2, [r7, #12]
 80187f4:	4413      	add	r3, r2
 80187f6:	78db      	ldrb	r3, [r3, #3]
 80187f8:	2bfe      	cmp	r3, #254	; 0xfe
 80187fa:	d101      	bne.n	8018800 <rfalNfcfComputeValidSENF+0x1cc>
 80187fc:	2301      	movs	r3, #1
 80187fe:	e000      	b.n	8018802 <rfalNfcfComputeValidSENF+0x1ce>
 8018800:	2300      	movs	r3, #0
 8018802:	f003 0301 	and.w	r3, r3, #1
 8018806:	b2da      	uxtb	r2, r3
 8018808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801880a:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	3301      	adds	r3, #1
 8018812:	b2da      	uxtb	r2, r3
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8018818:	4b06      	ldr	r3, [pc, #24]	; (8018834 <rfalNfcfComputeValidSENF+0x200>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d005      	beq.n	801882c <rfalNfcfComputeValidSENF+0x1f8>
 8018820:	68bb      	ldr	r3, [r7, #8]
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	79fa      	ldrb	r2, [r7, #7]
 8018826:	429a      	cmp	r2, r3
 8018828:	f63f af10 	bhi.w	801864c <rfalNfcfComputeValidSENF+0x18>
    }
}
 801882c:	bf00      	nop
 801882e:	3730      	adds	r7, #48	; 0x30
 8018830:	46bd      	mov	sp, r7
 8018832:	bdb0      	pop	{r4, r5, r7, pc}
 8018834:	20003afc 	.word	0x20003afc

08018838 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b084      	sub	sp, #16
 801883c:	af00      	add	r7, sp, #0
 801883e:	4603      	mov	r3, r0
 8018840:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8018842:	79fb      	ldrb	r3, [r7, #7]
 8018844:	2b01      	cmp	r3, #1
 8018846:	d004      	beq.n	8018852 <rfalNfcfPollerInitialize+0x1a>
 8018848:	79fb      	ldrb	r3, [r7, #7]
 801884a:	2b02      	cmp	r3, #2
 801884c:	d001      	beq.n	8018852 <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 801884e:	2307      	movs	r3, #7
 8018850:	e01b      	b.n	801888a <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 8018852:	79fa      	ldrb	r2, [r7, #7]
 8018854:	79fb      	ldrb	r3, [r7, #7]
 8018856:	4619      	mov	r1, r3
 8018858:	2006      	movs	r0, #6
 801885a:	f001 f92b 	bl	8019ab4 <rfalSetMode>
 801885e:	4603      	mov	r3, r0
 8018860:	81fb      	strh	r3, [r7, #14]
 8018862:	89fb      	ldrh	r3, [r7, #14]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d001      	beq.n	801886c <rfalNfcfPollerInitialize+0x34>
 8018868:	89fb      	ldrh	r3, [r7, #14]
 801886a:	e00e      	b.n	801888a <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801886c:	2001      	movs	r0, #1
 801886e:	f001 fcbd 	bl	801a1ec <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 8018872:	4808      	ldr	r0, [pc, #32]	; (8018894 <rfalNfcfPollerInitialize+0x5c>)
 8018874:	f001 fcf2 	bl	801a25c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 8018878:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 801887c:	f001 fcda 	bl	801a234 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 8018880:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8018884:	f001 fcc2 	bl	801a20c <rfalSetFDTPoll>
    
    return ERR_NONE;
 8018888:	2300      	movs	r3, #0
}
 801888a:	4618      	mov	r0, r3
 801888c:	3710      	adds	r7, #16
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}
 8018892:	bf00      	nop
 8018894:	00042360 	.word	0x00042360

08018898 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 8018898:	b590      	push	{r4, r7, lr}
 801889a:	b087      	sub	sp, #28
 801889c:	af04      	add	r7, sp, #16
 801889e:	603b      	str	r3, [r7, #0]
 80188a0:	4603      	mov	r3, r0
 80188a2:	71fb      	strb	r3, [r7, #7]
 80188a4:	460b      	mov	r3, r1
 80188a6:	80bb      	strh	r3, [r7, #4]
 80188a8:	4613      	mov	r3, r2
 80188aa:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 80188ac:	79fb      	ldrb	r3, [r7, #7]
 80188ae:	3301      	adds	r3, #1
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	79bc      	ldrb	r4, [r7, #6]
 80188b4:	88b9      	ldrh	r1, [r7, #4]
 80188b6:	79f8      	ldrb	r0, [r7, #7]
 80188b8:	69fa      	ldr	r2, [r7, #28]
 80188ba:	9202      	str	r2, [sp, #8]
 80188bc:	69ba      	ldr	r2, [r7, #24]
 80188be:	9201      	str	r2, [sp, #4]
 80188c0:	9300      	str	r3, [sp, #0]
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	4622      	mov	r2, r4
 80188c6:	f003 f95d 	bl	801bb84 <rfalFeliCaPoll>
 80188ca:	4603      	mov	r3, r0
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	370c      	adds	r7, #12
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd90      	pop	{r4, r7, pc}

080188d4 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b084      	sub	sp, #16
 80188d8:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 80188da:	4b0b      	ldr	r3, [pc, #44]	; (8018908 <rfalNfcfPollerCheckPresence+0x34>)
 80188dc:	2200      	movs	r2, #0
 80188de:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 80188e0:	4b09      	ldr	r3, [pc, #36]	; (8018908 <rfalNfcfPollerCheckPresence+0x34>)
 80188e2:	2200      	movs	r2, #0
 80188e4:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80188e6:	4b09      	ldr	r3, [pc, #36]	; (801890c <rfalNfcfPollerCheckPresence+0x38>)
 80188e8:	9302      	str	r3, [sp, #8]
 80188ea:	4b07      	ldr	r3, [pc, #28]	; (8018908 <rfalNfcfPollerCheckPresence+0x34>)
 80188ec:	9301      	str	r3, [sp, #4]
 80188ee:	2304      	movs	r3, #4
 80188f0:	9300      	str	r3, [sp, #0]
 80188f2:	4b07      	ldr	r3, [pc, #28]	; (8018910 <rfalNfcfPollerCheckPresence+0x3c>)
 80188f4:	2200      	movs	r2, #0
 80188f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80188fa:	2003      	movs	r0, #3
 80188fc:	f003 f942 	bl	801bb84 <rfalFeliCaPoll>
 8018900:	4603      	mov	r3, r0
}
 8018902:	4618      	mov	r0, r3
 8018904:	46bd      	mov	sp, r7
 8018906:	bd80      	pop	{r7, pc}
 8018908:	20003afc 	.word	0x20003afc
 801890c:	20003afd 	.word	0x20003afd
 8018910:	20003afe 	.word	0x20003afe

08018914 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b088      	sub	sp, #32
 8018918:	af02      	add	r7, sp, #8
 801891a:	60ba      	str	r2, [r7, #8]
 801891c:	607b      	str	r3, [r7, #4]
 801891e:	4603      	mov	r3, r0
 8018920:	73fb      	strb	r3, [r7, #15]
 8018922:	460b      	mov	r3, r1
 8018924:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d002      	beq.n	8018932 <rfalNfcfPollerCollisionResolution+0x1e>
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d101      	bne.n	8018936 <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8018932:	2307      	movs	r3, #7
 8018934:	e053      	b.n	80189de <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	2200      	movs	r2, #0
 801893a:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 801893c:	2300      	movs	r3, #0
 801893e:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8018940:	7bbb      	ldrb	r3, [r7, #14]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <rfalNfcfPollerCollisionResolution+0x36>
 8018946:	7bba      	ldrb	r2, [r7, #14]
 8018948:	e000      	b.n	801894c <rfalNfcfPollerCollisionResolution+0x38>
 801894a:	2204      	movs	r2, #4
 801894c:	f107 0315 	add.w	r3, r7, #21
 8018950:	9300      	str	r3, [sp, #0]
 8018952:	2300      	movs	r3, #0
 8018954:	6879      	ldr	r1, [r7, #4]
 8018956:	68b8      	ldr	r0, [r7, #8]
 8018958:	f7ff fe6c 	bl	8018634 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	781b      	ldrb	r3, [r3, #0]
 8018960:	7bba      	ldrb	r2, [r7, #14]
 8018962:	429a      	cmp	r2, r3
 8018964:	d93a      	bls.n	80189dc <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2200      	movs	r2, #0
 801896a:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 801896c:	4b1e      	ldr	r3, [pc, #120]	; (80189e8 <rfalNfcfPollerCollisionResolution+0xd4>)
 801896e:	9301      	str	r3, [sp, #4]
 8018970:	4b1e      	ldr	r3, [pc, #120]	; (80189ec <rfalNfcfPollerCollisionResolution+0xd8>)
 8018972:	9300      	str	r3, [sp, #0]
 8018974:	4b1e      	ldr	r3, [pc, #120]	; (80189f0 <rfalNfcfPollerCollisionResolution+0xdc>)
 8018976:	2200      	movs	r2, #0
 8018978:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801897c:	200f      	movs	r0, #15
 801897e:	f7ff ff8b 	bl	8018898 <rfalNfcfPollerPoll>
 8018982:	4603      	mov	r3, r0
 8018984:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 8018986:	8afb      	ldrh	r3, [r7, #22]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d108      	bne.n	801899e <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 801898c:	7bba      	ldrb	r2, [r7, #14]
 801898e:	f107 0315 	add.w	r3, r7, #21
 8018992:	9300      	str	r3, [sp, #0]
 8018994:	2300      	movs	r3, #0
 8018996:	6879      	ldr	r1, [r7, #4]
 8018998:	68b8      	ldr	r0, [r7, #8]
 801899a:	f7ff fe4b 	bl	8018634 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 801899e:	7d7b      	ldrb	r3, [r7, #21]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d01b      	beq.n	80189dc <rfalNfcfPollerCollisionResolution+0xc8>
 80189a4:	7bfb      	ldrb	r3, [r7, #15]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d118      	bne.n	80189dc <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 80189aa:	4b0f      	ldr	r3, [pc, #60]	; (80189e8 <rfalNfcfPollerCollisionResolution+0xd4>)
 80189ac:	9301      	str	r3, [sp, #4]
 80189ae:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <rfalNfcfPollerCollisionResolution+0xd8>)
 80189b0:	9300      	str	r3, [sp, #0]
 80189b2:	4b0f      	ldr	r3, [pc, #60]	; (80189f0 <rfalNfcfPollerCollisionResolution+0xdc>)
 80189b4:	2201      	movs	r2, #1
 80189b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80189ba:	200f      	movs	r0, #15
 80189bc:	f7ff ff6c 	bl	8018898 <rfalNfcfPollerPoll>
 80189c0:	4603      	mov	r3, r0
 80189c2:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 80189c4:	8afb      	ldrh	r3, [r7, #22]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d108      	bne.n	80189dc <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 80189ca:	7bba      	ldrb	r2, [r7, #14]
 80189cc:	f107 0315 	add.w	r3, r7, #21
 80189d0:	9300      	str	r3, [sp, #0]
 80189d2:	2301      	movs	r3, #1
 80189d4:	6879      	ldr	r1, [r7, #4]
 80189d6:	68b8      	ldr	r0, [r7, #8]
 80189d8:	f7ff fe2c 	bl	8018634 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 80189dc:	2300      	movs	r3, #0
}
 80189de:	4618      	mov	r0, r3
 80189e0:	3718      	adds	r7, #24
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}
 80189e6:	bf00      	nop
 80189e8:	20003afd 	.word	0x20003afd
 80189ec:	20003afc 	.word	0x20003afc
 80189f0:	20003afe 	.word	0x20003afe

080189f4 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b0a0      	sub	sp, #128	; 0x80
 80189f8:	af04      	add	r7, sp, #16
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	607a      	str	r2, [r7, #4]
 8018a00:	807b      	strh	r3, [r7, #2]
    uint8_t    i;
    ReturnCode ret;
    uint8_t    *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d018      	beq.n	8018a3a <rfalNfcfPollerCheck+0x46>
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d015      	beq.n	8018a3a <rfalNfcfPollerCheck+0x46>
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d012      	beq.n	8018a3a <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8018a14:	68bb      	ldr	r3, [r7, #8]
 8018a16:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d00e      	beq.n	8018a3a <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8018a1c:	68bb      	ldr	r3, [r7, #8]
 8018a1e:	7a1b      	ldrb	r3, [r3, #8]
 8018a20:	2b0f      	cmp	r3, #15
 8018a22:	d80a      	bhi.n	8018a3a <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d006      	beq.n	8018a3a <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2b0f      	cmp	r3, #15
 8018a32:	d802      	bhi.n	8018a3a <rfalNfcfPollerCheck+0x46>
 8018a34:	887b      	ldrh	r3, [r7, #2]
 8018a36:	2b0b      	cmp	r3, #11
 8018a38:	d801      	bhi.n	8018a3e <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8018a3a:	2307      	movs	r3, #7
 8018a3c:	e110      	b.n	8018c60 <rfalNfcfPollerCheck+0x26c>
    }
    
    msgIt = 0;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8018a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018a48:	1c5a      	adds	r2, r3, #1
 8018a4a:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8018a4e:	3370      	adds	r3, #112	; 0x70
 8018a50:	443b      	add	r3, r7
 8018a52:	2206      	movs	r2, #6
 8018a54:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8018a58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018a5c:	f107 0210 	add.w	r2, r7, #16
 8018a60:	4413      	add	r3, r2
 8018a62:	2208      	movs	r2, #8
 8018a64:	68f9      	ldr	r1, [r7, #12]
 8018a66:	4618      	mov	r0, r3
 8018a68:	f004 fd5e 	bl	801d528 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8018a6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018a70:	3308      	adds	r3, #8
 8018a72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8018a76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018a7a:	1c5a      	adds	r2, r3, #1
 8018a7c:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8018a80:	4619      	mov	r1, r3
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	781a      	ldrb	r2, [r3, #0]
 8018a86:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8018a8a:	443b      	add	r3, r7
 8018a8c:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8018a90:	2300      	movs	r3, #0
 8018a92:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8018a96:	e028      	b.n	8018aea <rfalNfcfPollerCheck+0xf6>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	685a      	ldr	r2, [r3, #4]
 8018a9c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018aa0:	005b      	lsls	r3, r3, #1
 8018aa2:	4413      	add	r3, r2
 8018aa4:	881a      	ldrh	r2, [r3, #0]
 8018aa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018aaa:	1c59      	adds	r1, r3, #1
 8018aac:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018ab0:	b2d2      	uxtb	r2, r2
 8018ab2:	3370      	adds	r3, #112	; 0x70
 8018ab4:	443b      	add	r3, r7
 8018ab6:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	685a      	ldr	r2, [r3, #4]
 8018abe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	4413      	add	r3, r2
 8018ac6:	881b      	ldrh	r3, [r3, #0]
 8018ac8:	0a1b      	lsrs	r3, r3, #8
 8018aca:	b29a      	uxth	r2, r3
 8018acc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018ad0:	1c59      	adds	r1, r3, #1
 8018ad2:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018ad6:	b2d2      	uxtb	r2, r2
 8018ad8:	3370      	adds	r3, #112	; 0x70
 8018ada:	443b      	add	r3, r7
 8018adc:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8018ae0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d3d0      	bcc.n	8018a98 <rfalNfcfPollerCheck+0xa4>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8018af6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018afa:	1c5a      	adds	r2, r3, #1
 8018afc:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8018b00:	4619      	mov	r1, r3
 8018b02:	68bb      	ldr	r3, [r7, #8]
 8018b04:	7a1a      	ldrb	r2, [r3, #8]
 8018b06:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8018b0a:	443b      	add	r3, r7
 8018b0c:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8018b10:	2300      	movs	r3, #0
 8018b12:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8018b16:	e054      	b.n	8018bc2 <rfalNfcfPollerCheck+0x1ce>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	68da      	ldr	r2, [r3, #12]
 8018b1c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018b20:	009b      	lsls	r3, r3, #2
 8018b22:	441a      	add	r2, r3
 8018b24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018b28:	1c59      	adds	r1, r3, #1
 8018b2a:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018b2e:	7812      	ldrb	r2, [r2, #0]
 8018b30:	3370      	adds	r3, #112	; 0x70
 8018b32:	443b      	add	r3, r7
 8018b34:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	68da      	ldr	r2, [r3, #12]
 8018b3c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018b40:	009b      	lsls	r3, r3, #2
 8018b42:	4413      	add	r3, r2
 8018b44:	781b      	ldrb	r3, [r3, #0]
 8018b46:	b25b      	sxtb	r3, r3
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	da11      	bge.n	8018b70 <rfalNfcfPollerCheck+0x17c>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8018b4c:	68bb      	ldr	r3, [r7, #8]
 8018b4e:	68da      	ldr	r2, [r3, #12]
 8018b50:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018b54:	009b      	lsls	r3, r3, #2
 8018b56:	4413      	add	r3, r2
 8018b58:	885a      	ldrh	r2, [r3, #2]
 8018b5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018b5e:	1c59      	adds	r1, r3, #1
 8018b60:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018b64:	b2d2      	uxtb	r2, r2
 8018b66:	3370      	adds	r3, #112	; 0x70
 8018b68:	443b      	add	r3, r7
 8018b6a:	f803 2c60 	strb.w	r2, [r3, #-96]
 8018b6e:	e023      	b.n	8018bb8 <rfalNfcfPollerCheck+0x1c4>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	68da      	ldr	r2, [r3, #12]
 8018b74:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018b78:	009b      	lsls	r3, r3, #2
 8018b7a:	4413      	add	r3, r2
 8018b7c:	885a      	ldrh	r2, [r3, #2]
 8018b7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018b82:	1c59      	adds	r1, r3, #1
 8018b84:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018b88:	b2d2      	uxtb	r2, r2
 8018b8a:	3370      	adds	r3, #112	; 0x70
 8018b8c:	443b      	add	r3, r7
 8018b8e:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	68da      	ldr	r2, [r3, #12]
 8018b96:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	4413      	add	r3, r2
 8018b9e:	885b      	ldrh	r3, [r3, #2]
 8018ba0:	0a1b      	lsrs	r3, r3, #8
 8018ba2:	b29a      	uxth	r2, r3
 8018ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018ba8:	1c59      	adds	r1, r3, #1
 8018baa:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8018bae:	b2d2      	uxtb	r2, r2
 8018bb0:	3370      	adds	r3, #112	; 0x70
 8018bb2:	443b      	add	r3, r7
 8018bb4:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8018bb8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	7a1b      	ldrb	r3, [r3, #8]
 8018bc6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8018bca:	429a      	cmp	r2, r3
 8018bcc:	d3a4      	bcc.n	8018b18 <rfalNfcfPollerCheck+0x124>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8018bce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018bd2:	b299      	uxth	r1, r3
 8018bd4:	887a      	ldrh	r2, [r7, #2]
 8018bd6:	f107 0010 	add.w	r0, r7, #16
 8018bda:	4b23      	ldr	r3, [pc, #140]	; (8018c68 <rfalNfcfPollerCheck+0x274>)
 8018bdc:	9302      	str	r3, [sp, #8]
 8018bde:	2300      	movs	r3, #0
 8018be0:	9301      	str	r3, [sp, #4]
 8018be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	4613      	mov	r3, r2
 8018be8:	687a      	ldr	r2, [r7, #4]
 8018bea:	f001 fd93 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 8018bf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d12f      	bne.n	8018c5c <rfalNfcfPollerCheck+0x268>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	3301      	adds	r3, #1
 8018c00:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8018c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c04:	881b      	ldrh	r3, [r3, #0]
 8018c06:	2b0a      	cmp	r3, #10
 8018c08:	d803      	bhi.n	8018c12 <rfalNfcfPollerCheck+0x21e>
        {
            ret = ERR_PROTO;
 8018c0a:	230b      	movs	r3, #11
 8018c0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8018c10:	e024      	b.n	8018c5c <rfalNfcfPollerCheck+0x268>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8018c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	2b07      	cmp	r3, #7
 8018c18:	d109      	bne.n	8018c2e <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8018c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018c1c:	3309      	adds	r3, #9
 8018c1e:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d104      	bne.n	8018c2e <rfalNfcfPollerCheck+0x23a>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 8018c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018c26:	330a      	adds	r3, #10
 8018c28:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d003      	beq.n	8018c36 <rfalNfcfPollerCheck+0x242>
        {
            ret = ERR_REQUEST;
 8018c2e:	2305      	movs	r3, #5
 8018c30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8018c34:	e012      	b.n	8018c5c <rfalNfcfPollerCheck+0x268>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 8018c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	3b0c      	subs	r3, #12
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c40:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 8018c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d008      	beq.n	8018c5c <rfalNfcfPollerCheck+0x268>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8018c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018c4c:	f103 010b 	add.w	r1, r3, #11
 8018c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018c52:	881b      	ldrh	r3, [r3, #0]
 8018c54:	461a      	mov	r2, r3
 8018c56:	6878      	ldr	r0, [r7, #4]
 8018c58:	f004 fc74 	bl	801d544 <memmove>
            }
        }
    }
    
    return ret;
 8018c5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 8018c60:	4618      	mov	r0, r3
 8018c62:	3770      	adds	r7, #112	; 0x70
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	02000010 	.word	0x02000010

08018c6c <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b08c      	sub	sp, #48	; 0x30
 8018c70:	af04      	add	r7, sp, #16
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
 8018c78:	807b      	strh	r3, [r7, #2]
    uint16_t   auxLen;
    uint8_t    *updateRes;
    ReturnCode ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d01b      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
 8018c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d018      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d015      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d012      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d00e      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	7a1b      	ldrb	r3, [r3, #8]
 8018c9e:	2b0d      	cmp	r3, #13
 8018ca0:	d80a      	bhi.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8018ca2:	68bb      	ldr	r3, [r7, #8]
 8018ca4:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d006      	beq.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8018caa:	68bb      	ldr	r3, [r7, #8]
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	2b0f      	cmp	r3, #15
 8018cb0:	d802      	bhi.n	8018cb8 <rfalNfcfPollerUpdate+0x4c>
 8018cb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018cb4:	2b0b      	cmp	r3, #11
 8018cb6:	d801      	bhi.n	8018cbc <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8018cb8:	2307      	movs	r3, #7
 8018cba:	e0f2      	b.n	8018ea2 <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8018cbc:	68bb      	ldr	r3, [r7, #8]
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	7a1b      	ldrb	r3, [r3, #8]
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	4619      	mov	r1, r3
 8018cca:	0089      	lsls	r1, r1, #2
 8018ccc:	440b      	add	r3, r1
 8018cce:	005b      	lsls	r3, r3, #1
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	4413      	add	r3, r2
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8018cda:	3309      	adds	r3, #9
 8018cdc:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 8018cde:	887a      	ldrh	r2, [r7, #2]
 8018ce0:	8b3b      	ldrh	r3, [r7, #24]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d201      	bcs.n	8018cea <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 8018ce6:	2307      	movs	r3, #7
 8018ce8:	e0db      	b.n	8018ea2 <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 8018cee:	8bbb      	ldrh	r3, [r7, #28]
 8018cf0:	1c5a      	adds	r2, r3, #1
 8018cf2:	83ba      	strh	r2, [r7, #28]
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4413      	add	r3, r2
 8018cfa:	2208      	movs	r2, #8
 8018cfc:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8018cfe:	8bbb      	ldrh	r3, [r7, #28]
 8018d00:	687a      	ldr	r2, [r7, #4]
 8018d02:	4413      	add	r3, r2
 8018d04:	2208      	movs	r2, #8
 8018d06:	68f9      	ldr	r1, [r7, #12]
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f004 fc0d 	bl	801d528 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8018d0e:	8bbb      	ldrh	r3, [r7, #28]
 8018d10:	3308      	adds	r3, #8
 8018d12:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8018d14:	8bbb      	ldrh	r3, [r7, #28]
 8018d16:	1c5a      	adds	r2, r3, #1
 8018d18:	83ba      	strh	r2, [r7, #28]
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	4413      	add	r3, r2
 8018d20:	68ba      	ldr	r2, [r7, #8]
 8018d22:	7812      	ldrb	r2, [r2, #0]
 8018d24:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8018d26:	2300      	movs	r3, #0
 8018d28:	77fb      	strb	r3, [r7, #31]
 8018d2a:	e020      	b.n	8018d6e <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	685a      	ldr	r2, [r3, #4]
 8018d30:	7ffb      	ldrb	r3, [r7, #31]
 8018d32:	005b      	lsls	r3, r3, #1
 8018d34:	4413      	add	r3, r2
 8018d36:	881a      	ldrh	r2, [r3, #0]
 8018d38:	8bbb      	ldrh	r3, [r7, #28]
 8018d3a:	1c59      	adds	r1, r3, #1
 8018d3c:	83b9      	strh	r1, [r7, #28]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	440b      	add	r3, r1
 8018d44:	b2d2      	uxtb	r2, r2
 8018d46:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	685a      	ldr	r2, [r3, #4]
 8018d4c:	7ffb      	ldrb	r3, [r7, #31]
 8018d4e:	005b      	lsls	r3, r3, #1
 8018d50:	4413      	add	r3, r2
 8018d52:	881b      	ldrh	r3, [r3, #0]
 8018d54:	0a1b      	lsrs	r3, r3, #8
 8018d56:	b29a      	uxth	r2, r3
 8018d58:	8bbb      	ldrh	r3, [r7, #28]
 8018d5a:	1c59      	adds	r1, r3, #1
 8018d5c:	83b9      	strh	r1, [r7, #28]
 8018d5e:	4619      	mov	r1, r3
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	440b      	add	r3, r1
 8018d64:	b2d2      	uxtb	r2, r2
 8018d66:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8018d68:	7ffb      	ldrb	r3, [r7, #31]
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	77fb      	strb	r3, [r7, #31]
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	781b      	ldrb	r3, [r3, #0]
 8018d72:	7ffa      	ldrb	r2, [r7, #31]
 8018d74:	429a      	cmp	r2, r3
 8018d76:	d3d9      	bcc.n	8018d2c <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8018d78:	8bbb      	ldrh	r3, [r7, #28]
 8018d7a:	1c5a      	adds	r2, r3, #1
 8018d7c:	83ba      	strh	r2, [r7, #28]
 8018d7e:	461a      	mov	r2, r3
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	4413      	add	r3, r2
 8018d84:	68ba      	ldr	r2, [r7, #8]
 8018d86:	7a12      	ldrb	r2, [r2, #8]
 8018d88:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	77fb      	strb	r3, [r7, #31]
 8018d8e:	e045      	b.n	8018e1c <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	68da      	ldr	r2, [r3, #12]
 8018d94:	7ffb      	ldrb	r3, [r7, #31]
 8018d96:	009b      	lsls	r3, r3, #2
 8018d98:	441a      	add	r2, r3
 8018d9a:	8bbb      	ldrh	r3, [r7, #28]
 8018d9c:	1c59      	adds	r1, r3, #1
 8018d9e:	83b9      	strh	r1, [r7, #28]
 8018da0:	4619      	mov	r1, r3
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	440b      	add	r3, r1
 8018da6:	7812      	ldrb	r2, [r2, #0]
 8018da8:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	68da      	ldr	r2, [r3, #12]
 8018dae:	7ffb      	ldrb	r3, [r7, #31]
 8018db0:	009b      	lsls	r3, r3, #2
 8018db2:	4413      	add	r3, r2
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	b25b      	sxtb	r3, r3
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	da0e      	bge.n	8018dda <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	68da      	ldr	r2, [r3, #12]
 8018dc0:	7ffb      	ldrb	r3, [r7, #31]
 8018dc2:	009b      	lsls	r3, r3, #2
 8018dc4:	4413      	add	r3, r2
 8018dc6:	885a      	ldrh	r2, [r3, #2]
 8018dc8:	8bbb      	ldrh	r3, [r7, #28]
 8018dca:	1c59      	adds	r1, r3, #1
 8018dcc:	83b9      	strh	r1, [r7, #28]
 8018dce:	4619      	mov	r1, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	440b      	add	r3, r1
 8018dd4:	b2d2      	uxtb	r2, r2
 8018dd6:	701a      	strb	r2, [r3, #0]
 8018dd8:	e01d      	b.n	8018e16 <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	68da      	ldr	r2, [r3, #12]
 8018dde:	7ffb      	ldrb	r3, [r7, #31]
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	4413      	add	r3, r2
 8018de4:	885a      	ldrh	r2, [r3, #2]
 8018de6:	8bbb      	ldrh	r3, [r7, #28]
 8018de8:	1c59      	adds	r1, r3, #1
 8018dea:	83b9      	strh	r1, [r7, #28]
 8018dec:	4619      	mov	r1, r3
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	440b      	add	r3, r1
 8018df2:	b2d2      	uxtb	r2, r2
 8018df4:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8018df6:	68bb      	ldr	r3, [r7, #8]
 8018df8:	68da      	ldr	r2, [r3, #12]
 8018dfa:	7ffb      	ldrb	r3, [r7, #31]
 8018dfc:	009b      	lsls	r3, r3, #2
 8018dfe:	4413      	add	r3, r2
 8018e00:	885b      	ldrh	r3, [r3, #2]
 8018e02:	0a1b      	lsrs	r3, r3, #8
 8018e04:	b29a      	uxth	r2, r3
 8018e06:	8bbb      	ldrh	r3, [r7, #28]
 8018e08:	1c59      	adds	r1, r3, #1
 8018e0a:	83b9      	strh	r1, [r7, #28]
 8018e0c:	4619      	mov	r1, r3
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	440b      	add	r3, r1
 8018e12:	b2d2      	uxtb	r2, r2
 8018e14:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8018e16:	7ffb      	ldrb	r3, [r7, #31]
 8018e18:	3301      	adds	r3, #1
 8018e1a:	77fb      	strb	r3, [r7, #31]
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	7a1b      	ldrb	r3, [r3, #8]
 8018e20:	7ffa      	ldrb	r2, [r7, #31]
 8018e22:	429a      	cmp	r2, r3
 8018e24:	d3b4      	bcc.n	8018d90 <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	7a1b      	ldrb	r3, [r3, #8]
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	011b      	lsls	r3, r3, #4
 8018e2e:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 8018e30:	8bbb      	ldrh	r3, [r7, #28]
 8018e32:	687a      	ldr	r2, [r7, #4]
 8018e34:	4413      	add	r3, r2
 8018e36:	8b3a      	ldrh	r2, [r7, #24]
 8018e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f004 fb74 	bl	801d528 <memcpy>
    msgIt += auxLen;
 8018e40:	8bba      	ldrh	r2, [r7, #28]
 8018e42:	8b3b      	ldrh	r3, [r7, #24]
 8018e44:	4413      	add	r3, r2
 8018e46:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8018e48:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8018e4a:	8bb9      	ldrh	r1, [r7, #28]
 8018e4c:	4b17      	ldr	r3, [pc, #92]	; (8018eac <rfalNfcfPollerUpdate+0x240>)
 8018e4e:	9302      	str	r3, [sp, #8]
 8018e50:	2300      	movs	r3, #0
 8018e52:	9301      	str	r3, [sp, #4]
 8018e54:	f107 0312 	add.w	r3, r7, #18
 8018e58:	9300      	str	r3, [sp, #0]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	f001 fc58 	bl	801a714 <rfalTransceiveBlockingTxRx>
 8018e64:	4603      	mov	r3, r0
 8018e66:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 8018e68:	8b7b      	ldrh	r3, [r7, #26]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d118      	bne.n	8018ea0 <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8018e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e70:	3301      	adds	r3, #1
 8018e72:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 8018e74:	8a7b      	ldrh	r3, [r7, #18]
 8018e76:	2b0a      	cmp	r3, #10
 8018e78:	d802      	bhi.n	8018e80 <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8018e7a:	230b      	movs	r3, #11
 8018e7c:	837b      	strh	r3, [r7, #26]
 8018e7e:	e00f      	b.n	8018ea0 <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	2b09      	cmp	r3, #9
 8018e86:	d109      	bne.n	8018e9c <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8018e88:	697b      	ldr	r3, [r7, #20]
 8018e8a:	3309      	adds	r3, #9
 8018e8c:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d104      	bne.n	8018e9c <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	330a      	adds	r3, #10
 8018e96:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d001      	beq.n	8018ea0 <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8018e9c:	2305      	movs	r3, #5
 8018e9e:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 8018ea0:	8b7b      	ldrh	r3, [r7, #26]
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3720      	adds	r7, #32
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	02000010 	.word	0x02000010

08018eb0 <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 8018eb0:	b480      	push	{r7}
 8018eb2:	b083      	sub	sp, #12
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	71fb      	strb	r3, [r7, #7]
    switch(err)
 8018eba:	79fb      	ldrb	r3, [r7, #7]
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	2b12      	cmp	r3, #18
 8018ec0:	d82e      	bhi.n	8018f20 <rfalNfcvParseError+0x70>
 8018ec2:	a201      	add	r2, pc, #4	; (adr r2, 8018ec8 <rfalNfcvParseError+0x18>)
 8018ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec8:	08018f15 	.word	0x08018f15
 8018ecc:	08018f19 	.word	0x08018f19
 8018ed0:	08018f15 	.word	0x08018f15
 8018ed4:	08018f21 	.word	0x08018f21
 8018ed8:	08018f21 	.word	0x08018f21
 8018edc:	08018f21 	.word	0x08018f21
 8018ee0:	08018f21 	.word	0x08018f21
 8018ee4:	08018f21 	.word	0x08018f21
 8018ee8:	08018f21 	.word	0x08018f21
 8018eec:	08018f21 	.word	0x08018f21
 8018ef0:	08018f21 	.word	0x08018f21
 8018ef4:	08018f21 	.word	0x08018f21
 8018ef8:	08018f21 	.word	0x08018f21
 8018efc:	08018f21 	.word	0x08018f21
 8018f00:	08018f21 	.word	0x08018f21
 8018f04:	08018f21 	.word	0x08018f21
 8018f08:	08018f21 	.word	0x08018f21
 8018f0c:	08018f21 	.word	0x08018f21
 8018f10:	08018f1d 	.word	0x08018f1d
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 8018f14:	2318      	movs	r3, #24
 8018f16:	e004      	b.n	8018f22 <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 8018f18:	230b      	movs	r3, #11
 8018f1a:	e002      	b.n	8018f22 <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 8018f1c:	2319      	movs	r3, #25
 8018f1e:	e000      	b.n	8018f22 <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 8018f20:	2305      	movs	r3, #5
    }
}
 8018f22:	4618      	mov	r0, r3
 8018f24:	370c      	adds	r7, #12
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bc80      	pop	{r7}
 8018f2a:	4770      	bx	lr

08018f2c <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8018f32:	22ec      	movs	r2, #236	; 0xec
 8018f34:	21ec      	movs	r1, #236	; 0xec
 8018f36:	2007      	movs	r0, #7
 8018f38:	f000 fdbc 	bl	8019ab4 <rfalSetMode>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	80fb      	strh	r3, [r7, #6]
 8018f40:	88fb      	ldrh	r3, [r7, #6]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d001      	beq.n	8018f4a <rfalNfcvPollerInitialize+0x1e>
 8018f46:	88fb      	ldrh	r3, [r7, #6]
 8018f48:	e00e      	b.n	8018f68 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8018f4a:	2001      	movs	r0, #1
 8018f4c:	f001 f94e 	bl	801a1ec <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8018f50:	4807      	ldr	r0, [pc, #28]	; (8018f70 <rfalNfcvPollerInitialize+0x44>)
 8018f52:	f001 f983 	bl	801a25c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 8018f56:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8018f5a:	f001 f96b 	bl	801a234 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8018f5e:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 8018f62:	f001 f953 	bl	801a20c <rfalSetFDTPoll>
    
    return ERR_NONE;
 8018f66:	2300      	movs	r3, #0
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3708      	adds	r7, #8
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}
 8018f70:	000108d8 	.word	0x000108d8

08018f74 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b086      	sub	sp, #24
 8018f78:	af02      	add	r7, sp, #8
 8018f7a:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2200      	movs	r2, #0
 8018f84:	2100      	movs	r1, #0
 8018f86:	2020      	movs	r0, #32
 8018f88:	f000 f815 	bl	8018fb6 <rfalNfcvPollerInventory>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8018f90:	89fb      	ldrh	r3, [r7, #14]
 8018f92:	2b1d      	cmp	r3, #29
 8018f94:	d008      	beq.n	8018fa8 <rfalNfcvPollerCheckPresence+0x34>
 8018f96:	89fb      	ldrh	r3, [r7, #14]
 8018f98:	2b15      	cmp	r3, #21
 8018f9a:	d005      	beq.n	8018fa8 <rfalNfcvPollerCheckPresence+0x34>
 8018f9c:	89fb      	ldrh	r3, [r7, #14]
 8018f9e:	2b09      	cmp	r3, #9
 8018fa0:	d002      	beq.n	8018fa8 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 8018fa2:	89fb      	ldrh	r3, [r7, #14]
 8018fa4:	2b0b      	cmp	r3, #11
 8018fa6:	d101      	bne.n	8018fac <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8018fac:	89fb      	ldrh	r3, [r7, #14]
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}

08018fb6 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8018fb6:	b580      	push	{r7, lr}
 8018fb8:	b08c      	sub	sp, #48	; 0x30
 8018fba:	af02      	add	r7, sp, #8
 8018fbc:	60ba      	str	r2, [r7, #8]
 8018fbe:	607b      	str	r3, [r7, #4]
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	73fb      	strb	r3, [r7, #15]
 8018fc4:	460b      	mov	r3, r1
 8018fc6:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d102      	bne.n	8018fd4 <rfalNfcvPollerInventory+0x1e>
 8018fce:	7bbb      	ldrb	r3, [r7, #14]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d102      	bne.n	8018fda <rfalNfcvPollerInventory+0x24>
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d101      	bne.n	8018fde <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 8018fda:	2307      	movs	r3, #7
 8018fdc:	e04a      	b.n	8019074 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 8018fde:	7bfb      	ldrb	r3, [r7, #15]
 8018fe0:	f043 0306 	orr.w	r3, r3, #6
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 8018fec:	7bbb      	ldrb	r3, [r7, #14]
 8018fee:	7bfa      	ldrb	r2, [r7, #15]
 8018ff0:	2a20      	cmp	r2, #32
 8018ff2:	d101      	bne.n	8018ff8 <rfalNfcvPollerInventory+0x42>
 8018ff4:	2240      	movs	r2, #64	; 0x40
 8018ff6:	e000      	b.n	8018ffa <rfalNfcvPollerInventory+0x44>
 8018ff8:	223c      	movs	r2, #60	; 0x3c
 8018ffa:	429a      	cmp	r2, r3
 8018ffc:	d806      	bhi.n	801900c <rfalNfcvPollerInventory+0x56>
 8018ffe:	7bfb      	ldrb	r3, [r7, #15]
 8019000:	2b20      	cmp	r3, #32
 8019002:	d101      	bne.n	8019008 <rfalNfcvPollerInventory+0x52>
 8019004:	2340      	movs	r3, #64	; 0x40
 8019006:	e002      	b.n	801900e <rfalNfcvPollerInventory+0x58>
 8019008:	233c      	movs	r3, #60	; 0x3c
 801900a:	e000      	b.n	801900e <rfalNfcvPollerInventory+0x58>
 801900c:	7bbb      	ldrb	r3, [r7, #14]
 801900e:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 8019010:	7ebb      	ldrb	r3, [r7, #26]
 8019012:	3307      	adds	r3, #7
 8019014:	08db      	lsrs	r3, r3, #3
 8019016:	b29b      	uxth	r3, r3
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00b      	beq.n	8019034 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 801901c:	7ebb      	ldrb	r3, [r7, #26]
 801901e:	3307      	adds	r3, #7
 8019020:	08db      	lsrs	r3, r3, #3
 8019022:	b29b      	uxth	r3, r3
 8019024:	461a      	mov	r2, r3
 8019026:	f107 0318 	add.w	r3, r7, #24
 801902a:	3303      	adds	r3, #3
 801902c:	68b9      	ldr	r1, [r7, #8]
 801902e:	4618      	mov	r0, r3
 8019030:	f004 fa7a 	bl	801d528 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8019034:	7ebb      	ldrb	r3, [r7, #26]
 8019036:	3307      	adds	r3, #7
 8019038:	08db      	lsrs	r3, r3, #3
 801903a:	b2db      	uxtb	r3, r3
 801903c:	3303      	adds	r3, #3
 801903e:	b2d9      	uxtb	r1, r3
 8019040:	f107 0018 	add.w	r0, r7, #24
 8019044:	f107 0316 	add.w	r3, r7, #22
 8019048:	9300      	str	r3, [sp, #0]
 801904a:	230c      	movs	r3, #12
 801904c:	687a      	ldr	r2, [r7, #4]
 801904e:	f002 fcf9 	bl	801ba44 <rfalISO15693TransceiveAnticollisionFrame>
 8019052:	4603      	mov	r3, r0
 8019054:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 8019056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019058:	2b00      	cmp	r3, #0
 801905a:	d002      	beq.n	8019062 <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 801905c:	8afa      	ldrh	r2, [r7, #22]
 801905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019060:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 8019062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019064:	2b00      	cmp	r3, #0
 8019066:	d104      	bne.n	8019072 <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8019068:	8afb      	ldrh	r3, [r7, #22]
 801906a:	2b60      	cmp	r3, #96	; 0x60
 801906c:	d001      	beq.n	8019072 <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 801906e:	230b      	movs	r3, #11
 8019070:	e000      	b.n	8019074 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 8019072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8019074:	4618      	mov	r0, r3
 8019076:	3728      	adds	r7, #40	; 0x28
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b0ae      	sub	sp, #184	; 0xb8
 8019080:	af02      	add	r7, sp, #8
 8019082:	60ba      	str	r2, [r7, #8]
 8019084:	607b      	str	r3, [r7, #4]
 8019086:	4603      	mov	r3, r0
 8019088:	73fb      	strb	r3, [r7, #15]
 801908a:	460b      	mov	r3, r1
 801908c:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d002      	beq.n	801909a <rfalNfcvPollerCollisionResolution+0x1e>
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d101      	bne.n	801909e <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 801909a:	2307      	movs	r3, #7
 801909c:	e186      	b.n	80193ac <rfalNfcvPollerCollisionResolution+0x330>
    }

    /* Initialize parameters */
    *devCnt = 0;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	2200      	movs	r2, #0
 80190a2:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 80190a4:	2300      	movs	r3, #0
 80190a6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 80190aa:	2300      	movs	r3, #0
 80190ac:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 80190b0:	2300      	movs	r3, #0
 80190b2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 80190b6:	f107 0314 	add.w	r3, r7, #20
 80190ba:	2290      	movs	r2, #144	; 0x90
 80190bc:	2100      	movs	r1, #0
 80190be:	4618      	mov	r0, r3
 80190c0:	f004 fa5a 	bl	801d578 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 80190c4:	7bbb      	ldrb	r3, [r7, #14]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d00a      	beq.n	80190e0 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 80190ca:	7bba      	ldrb	r2, [r7, #14]
 80190cc:	4613      	mov	r3, r2
 80190ce:	005b      	lsls	r3, r3, #1
 80190d0:	4413      	add	r3, r2
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	4413      	add	r3, r2
 80190d6:	461a      	mov	r2, r3
 80190d8:	2100      	movs	r1, #0
 80190da:	68b8      	ldr	r0, [r7, #8]
 80190dc:	f004 fa4c 	bl	801d578 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80190e0:	7bfb      	ldrb	r3, [r7, #15]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d12b      	bne.n	801913e <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 80190e6:	68bb      	ldr	r3, [r7, #8]
 80190e8:	2200      	movs	r2, #0
 80190ea:	9200      	str	r2, [sp, #0]
 80190ec:	2200      	movs	r2, #0
 80190ee:	2100      	movs	r1, #0
 80190f0:	2020      	movs	r0, #32
 80190f2:	f7ff ff60 	bl	8018fb6 <rfalNfcvPollerInventory>
 80190f6:	4603      	mov	r3, r0
 80190f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 80190fc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8019100:	2b04      	cmp	r3, #4
 8019102:	d101      	bne.n	8019108 <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 8019104:	2300      	movs	r3, #0
 8019106:	e151      	b.n	80193ac <rfalNfcvPollerCollisionResolution+0x330>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 8019108:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801910c:	2b00      	cmp	r3, #0
 801910e:	d107      	bne.n	8019120 <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	781b      	ldrb	r3, [r3, #0]
 8019114:	3301      	adds	r3, #1
 8019116:	b2da      	uxtb	r2, r3
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 801911c:	2300      	movs	r3, #0
 801911e:	e145      	b.n	80193ac <rfalNfcvPollerCollisionResolution+0x330>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 8019120:	2301      	movs	r3, #1
 8019122:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8019126:	2301      	movs	r3, #1
 8019128:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 801912c:	7bbb      	ldrb	r3, [r7, #14]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d101      	bne.n	8019136 <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 8019132:	231d      	movs	r3, #29
 8019134:	e13a      	b.n	80193ac <rfalNfcvPollerCollisionResolution+0x330>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8019136:	2004      	movs	r0, #4
 8019138:	f7ec fada 	bl	80056f0 <HAL_Delay>
 801913c:	e005      	b.n	801914a <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 801913e:	2301      	movs	r3, #1
 8019140:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 8019144:	2301      	movs	r3, #1
 8019146:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 801914a:	2300      	movs	r3, #0
 801914c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 8019150:	2300      	movs	r3, #0
 8019152:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 8019156:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801915a:	2b00      	cmp	r3, #0
 801915c:	d129      	bne.n	80191b2 <rfalNfcvPollerCollisionResolution+0x136>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 801915e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8019162:	4613      	mov	r3, r2
 8019164:	00db      	lsls	r3, r3, #3
 8019166:	4413      	add	r3, r2
 8019168:	33b0      	adds	r3, #176	; 0xb0
 801916a:	443b      	add	r3, r7
 801916c:	3b9c      	subs	r3, #156	; 0x9c
 801916e:	7818      	ldrb	r0, [r3, #0]
 8019170:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8019174:	f107 0114 	add.w	r1, r7, #20
 8019178:	4613      	mov	r3, r2
 801917a:	00db      	lsls	r3, r3, #3
 801917c:	4413      	add	r3, r2
 801917e:	440b      	add	r3, r1
 8019180:	1c59      	adds	r1, r3, #1
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	461a      	mov	r2, r3
 8019188:	4613      	mov	r3, r2
 801918a:	005b      	lsls	r3, r3, #1
 801918c:	4413      	add	r3, r2
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	4413      	add	r3, r2
 8019192:	68ba      	ldr	r2, [r7, #8]
 8019194:	4413      	add	r3, r2
 8019196:	461a      	mov	r2, r3
 8019198:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	4613      	mov	r3, r2
 80191a0:	460a      	mov	r2, r1
 80191a2:	4601      	mov	r1, r0
 80191a4:	2000      	movs	r0, #0
 80191a6:	f7ff ff06 	bl	8018fb6 <rfalNfcvPollerInventory>
 80191aa:	4603      	mov	r3, r0
 80191ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80191b0:	e013      	b.n	80191da <rfalNfcvPollerCollisionResolution+0x15e>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	461a      	mov	r2, r3
 80191b8:	4613      	mov	r3, r2
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	4413      	add	r3, r2
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	4413      	add	r3, r2
 80191c2:	68ba      	ldr	r2, [r7, #8]
 80191c4:	4413      	add	r3, r2
 80191c6:	4618      	mov	r0, r3
 80191c8:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 80191cc:	461a      	mov	r2, r3
 80191ce:	210c      	movs	r1, #12
 80191d0:	f002 fc98 	bl	801bb04 <rfalISO15693TransceiveEOFAnticollision>
 80191d4:	4603      	mov	r3, r0
 80191d6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 80191da:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80191de:	3301      	adds	r3, #1
 80191e0:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 80191e4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80191e8:	2b04      	cmp	r3, #4
 80191ea:	f000 80c3 	beq.w	8019374 <rfalNfcvPollerCollisionResolution+0x2f8>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80191ee:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80191f2:	2b5f      	cmp	r3, #95	; 0x5f
 80191f4:	d802      	bhi.n	80191fc <rfalNfcvPollerCollisionResolution+0x180>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80191f6:	2004      	movs	r0, #4
 80191f8:	f7ec fa7a 	bl	80056f0 <HAL_Delay>
                }

                if( ret == ERR_NONE )
 80191fc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8019200:	2b00      	cmp	r3, #0
 8019202:	d10b      	bne.n	801921c <rfalNfcvPollerCollisionResolution+0x1a0>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 8019204:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8019208:	2b60      	cmp	r3, #96	; 0x60
 801920a:	f040 80b6 	bne.w	801937a <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	3301      	adds	r3, #1
 8019214:	b2da      	uxtb	r2, r3
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	701a      	strb	r2, [r3, #0]
 801921a:	e0ae      	b.n	801937a <rfalNfcvPollerCollisionResolution+0x2fe>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 801921c:	2301      	movs	r3, #1
 801921e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 8019222:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8019226:	2b0f      	cmp	r3, #15
 8019228:	f200 80a7 	bhi.w	801937a <rfalNfcvPollerCollisionResolution+0x2fe>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 801922c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8019230:	f107 0114 	add.w	r1, r7, #20
 8019234:	4613      	mov	r3, r2
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	4413      	add	r3, r2
 801923a:	440b      	add	r3, r1
 801923c:	1c58      	adds	r0, r3, #1
 801923e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8019242:	f107 0114 	add.w	r1, r7, #20
 8019246:	4613      	mov	r3, r2
 8019248:	00db      	lsls	r3, r3, #3
 801924a:	4413      	add	r3, r2
 801924c:	440b      	add	r3, r1
 801924e:	3301      	adds	r3, #1
 8019250:	2208      	movs	r2, #8
 8019252:	4619      	mov	r1, r3
 8019254:	f004 f968 	bl	801d528 <memcpy>
                        colPos = colFound[colIt].maskLen;
 8019258:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801925c:	4613      	mov	r3, r2
 801925e:	00db      	lsls	r3, r3, #3
 8019260:	4413      	add	r3, r2
 8019262:	33b0      	adds	r3, #176	; 0xb0
 8019264:	443b      	add	r3, r7
 8019266:	3b9c      	subs	r3, #156	; 0x9c
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 801926e:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8019272:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8019276:	08db      	lsrs	r3, r3, #3
 8019278:	b2d8      	uxtb	r0, r3
 801927a:	4601      	mov	r1, r0
 801927c:	4613      	mov	r3, r2
 801927e:	00db      	lsls	r3, r3, #3
 8019280:	4413      	add	r3, r2
 8019282:	33b0      	adds	r3, #176	; 0xb0
 8019284:	443b      	add	r3, r7
 8019286:	440b      	add	r3, r1
 8019288:	3b9b      	subs	r3, #155	; 0x9b
 801928a:	7819      	ldrb	r1, [r3, #0]
 801928c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8019290:	f003 0307 	and.w	r3, r3, #7
 8019294:	2201      	movs	r2, #1
 8019296:	fa02 f303 	lsl.w	r3, r2, r3
 801929a:	b2db      	uxtb	r3, r3
 801929c:	3b01      	subs	r3, #1
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80192a4:	400b      	ands	r3, r1
 80192a6:	b2d9      	uxtb	r1, r3
 80192a8:	4613      	mov	r3, r2
 80192aa:	00db      	lsls	r3, r3, #3
 80192ac:	4413      	add	r3, r2
 80192ae:	33b0      	adds	r3, #176	; 0xb0
 80192b0:	443b      	add	r3, r7
 80192b2:	4403      	add	r3, r0
 80192b4:	3b9b      	subs	r3, #155	; 0x9b
 80192b6:	460a      	mov	r2, r1
 80192b8:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 80192ba:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80192be:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80192c2:	08db      	lsrs	r3, r3, #3
 80192c4:	b2d8      	uxtb	r0, r3
 80192c6:	4601      	mov	r1, r0
 80192c8:	4613      	mov	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	4413      	add	r3, r2
 80192ce:	33b0      	adds	r3, #176	; 0xb0
 80192d0:	443b      	add	r3, r7
 80192d2:	440b      	add	r3, r1
 80192d4:	3b9b      	subs	r3, #155	; 0x9b
 80192d6:	7819      	ldrb	r1, [r3, #0]
 80192d8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80192dc:	1e5a      	subs	r2, r3, #1
 80192de:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80192e2:	f003 0307 	and.w	r3, r3, #7
 80192e6:	fa02 f303 	lsl.w	r3, r2, r3
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80192f0:	430b      	orrs	r3, r1
 80192f2:	b2d9      	uxtb	r1, r3
 80192f4:	4613      	mov	r3, r2
 80192f6:	00db      	lsls	r3, r3, #3
 80192f8:	4413      	add	r3, r2
 80192fa:	33b0      	adds	r3, #176	; 0xb0
 80192fc:	443b      	add	r3, r7
 80192fe:	4403      	add	r3, r0
 8019300:	3b9b      	subs	r3, #155	; 0x9b
 8019302:	460a      	mov	r2, r1
 8019304:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 8019306:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801930a:	1e5a      	subs	r2, r3, #1
 801930c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8019310:	f003 0307 	and.w	r3, r3, #7
 8019314:	f1c3 0308 	rsb	r3, r3, #8
 8019318:	fa22 f003 	lsr.w	r0, r2, r3
 801931c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8019320:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8019324:	08db      	lsrs	r3, r3, #3
 8019326:	b2db      	uxtb	r3, r3
 8019328:	1c59      	adds	r1, r3, #1
 801932a:	b2c0      	uxtb	r0, r0
 801932c:	4613      	mov	r3, r2
 801932e:	00db      	lsls	r3, r3, #3
 8019330:	4413      	add	r3, r2
 8019332:	33b0      	adds	r3, #176	; 0xb0
 8019334:	443b      	add	r3, r7
 8019336:	440b      	add	r3, r1
 8019338:	3b9b      	subs	r3, #155	; 0x9b
 801933a:	4602      	mov	r2, r0
 801933c:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 801933e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8019342:	4613      	mov	r3, r2
 8019344:	00db      	lsls	r3, r3, #3
 8019346:	4413      	add	r3, r2
 8019348:	33b0      	adds	r3, #176	; 0xb0
 801934a:	443b      	add	r3, r7
 801934c:	3b9c      	subs	r3, #156	; 0x9c
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8019354:	3304      	adds	r3, #4
 8019356:	b2d9      	uxtb	r1, r3
 8019358:	4613      	mov	r3, r2
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	4413      	add	r3, r2
 801935e:	33b0      	adds	r3, #176	; 0xb0
 8019360:	443b      	add	r3, r7
 8019362:	3b9c      	subs	r3, #156	; 0x9c
 8019364:	460a      	mov	r2, r1
 8019366:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 8019368:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 801936c:	3301      	adds	r3, #1
 801936e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8019372:	e002      	b.n	801937a <rfalNfcvPollerCollisionResolution+0x2fe>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8019374:	2004      	movs	r0, #4
 8019376:	f7ec f9bb 	bl	80056f0 <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	7bba      	ldrb	r2, [r7, #14]
 8019380:	429a      	cmp	r2, r3
 8019382:	d801      	bhi.n	8019388 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                return ERR_NONE;
 8019384:	2300      	movs	r3, #0
 8019386:	e011      	b.n	80193ac <rfalNfcvPollerCollisionResolution+0x330>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8019388:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801938c:	2b0f      	cmp	r3, #15
 801938e:	f67f aee2 	bls.w	8019156 <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 8019392:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8019396:	3301      	adds	r3, #1
 8019398:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 801939c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80193a0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80193a4:	429a      	cmp	r2, r3
 80193a6:	f4ff aed0 	bcc.w	801914a <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 80193aa:	2300      	movs	r3, #0
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	37b0      	adds	r7, #176	; 0xb0
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b094      	sub	sp, #80	; 0x50
 80193b8:	af06      	add	r7, sp, #24
 80193ba:	4603      	mov	r3, r0
 80193bc:	6039      	str	r1, [r7, #0]
 80193be:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d101      	bne.n	80193ca <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 80193c6:	2307      	movs	r3, #7
 80193c8:	e012      	b.n	80193f0 <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80193ca:	79f9      	ldrb	r1, [r7, #7]
 80193cc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80193d0:	9304      	str	r3, [sp, #16]
 80193d2:	232a      	movs	r3, #42	; 0x2a
 80193d4:	9303      	str	r3, [sp, #12]
 80193d6:	f107 030c 	add.w	r3, r7, #12
 80193da:	9302      	str	r3, [sp, #8]
 80193dc:	2300      	movs	r3, #0
 80193de:	9301      	str	r3, [sp, #4]
 80193e0:	2300      	movs	r3, #0
 80193e2:	9300      	str	r3, [sp, #0]
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	2200      	movs	r2, #0
 80193e8:	2025      	movs	r0, #37	; 0x25
 80193ea:	f000 f9c5 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 80193ee:	4603      	mov	r3, r0
}
 80193f0:	4618      	mov	r0, r3
 80193f2:	3738      	adds	r7, #56	; 0x38
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b08c      	sub	sp, #48	; 0x30
 80193fc:	af06      	add	r7, sp, #24
 80193fe:	60b9      	str	r1, [r7, #8]
 8019400:	607b      	str	r3, [r7, #4]
 8019402:	4603      	mov	r3, r0
 8019404:	73fb      	strb	r3, [r7, #15]
 8019406:	4613      	mov	r3, r2
 8019408:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 801940a:	7bbb      	ldrb	r3, [r7, #14]
 801940c:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 801940e:	7bf9      	ldrb	r1, [r7, #15]
 8019410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019412:	9304      	str	r3, [sp, #16]
 8019414:	8c3b      	ldrh	r3, [r7, #32]
 8019416:	9303      	str	r3, [sp, #12]
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	9302      	str	r3, [sp, #8]
 801941c:	2301      	movs	r3, #1
 801941e:	9301      	str	r3, [sp, #4]
 8019420:	f107 0317 	add.w	r3, r7, #23
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	2200      	movs	r2, #0
 801942a:	2020      	movs	r0, #32
 801942c:	f000 f9a4 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 8019430:	4603      	mov	r3, r0
}
 8019432:	4618      	mov	r0, r3
 8019434:	3718      	adds	r7, #24
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}

0801943a <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801943a:	b580      	push	{r7, lr}
 801943c:	b09e      	sub	sp, #120	; 0x78
 801943e:	af06      	add	r7, sp, #24
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	607b      	str	r3, [r7, #4]
 8019444:	4603      	mov	r3, r0
 8019446:	73fb      	strb	r3, [r7, #15]
 8019448:	4613      	mov	r3, r2
 801944a:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801944c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019450:	2b00      	cmp	r3, #0
 8019452:	d006      	beq.n	8019462 <rfalNfcvPollerWriteSingleBlock+0x28>
 8019454:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019458:	2b20      	cmp	r3, #32
 801945a:	d802      	bhi.n	8019462 <rfalNfcvPollerWriteSingleBlock+0x28>
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d101      	bne.n	8019466 <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8019462:	2307      	movs	r3, #7
 8019464:	e034      	b.n	80194d0 <rfalNfcvPollerWriteSingleBlock+0x96>
    }
    
    dataLen = 0U;
 8019466:	2300      	movs	r3, #0
 8019468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 801946c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019470:	1c5a      	adds	r2, r3, #1
 8019472:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8019476:	3360      	adds	r3, #96	; 0x60
 8019478:	443b      	add	r3, r7
 801947a:	7bba      	ldrb	r2, [r7, #14]
 801947c:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 8019480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019484:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019488:	4413      	add	r3, r2
 801948a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801948e:	6879      	ldr	r1, [r7, #4]
 8019490:	4618      	mov	r0, r3
 8019492:	f004 f849 	bl	801d528 <memcpy>
    dataLen += blockLen;
 8019496:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801949a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801949e:	4413      	add	r3, r2
 80194a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80194a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	7bf9      	ldrb	r1, [r7, #15]
 80194ac:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80194b0:	9204      	str	r2, [sp, #16]
 80194b2:	222a      	movs	r2, #42	; 0x2a
 80194b4:	9203      	str	r2, [sp, #12]
 80194b6:	f107 0210 	add.w	r2, r7, #16
 80194ba:	9202      	str	r2, [sp, #8]
 80194bc:	9301      	str	r3, [sp, #4]
 80194be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80194c2:	9300      	str	r3, [sp, #0]
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	2200      	movs	r2, #0
 80194c8:	2021      	movs	r0, #33	; 0x21
 80194ca:	f000 f955 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 80194ce:	4603      	mov	r3, r0
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3760      	adds	r7, #96	; 0x60
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}

080194d8 <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b08a      	sub	sp, #40	; 0x28
 80194dc:	af06      	add	r7, sp, #24
 80194de:	6039      	str	r1, [r7, #0]
 80194e0:	4611      	mov	r1, r2
 80194e2:	461a      	mov	r2, r3
 80194e4:	4603      	mov	r3, r0
 80194e6:	71fb      	strb	r3, [r7, #7]
 80194e8:	460b      	mov	r3, r1
 80194ea:	71bb      	strb	r3, [r7, #6]
 80194ec:	4613      	mov	r3, r2
 80194ee:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 80194f0:	2300      	movs	r3, #0
 80194f2:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 80194f4:	7bfb      	ldrb	r3, [r7, #15]
 80194f6:	1c5a      	adds	r2, r3, #1
 80194f8:	73fa      	strb	r2, [r7, #15]
 80194fa:	3310      	adds	r3, #16
 80194fc:	443b      	add	r3, r7
 80194fe:	79ba      	ldrb	r2, [r7, #6]
 8019500:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 8019504:	7bfb      	ldrb	r3, [r7, #15]
 8019506:	1c5a      	adds	r2, r3, #1
 8019508:	73fa      	strb	r2, [r7, #15]
 801950a:	3310      	adds	r3, #16
 801950c:	443b      	add	r3, r7
 801950e:	797a      	ldrb	r2, [r7, #5]
 8019510:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8019514:	7bfb      	ldrb	r3, [r7, #15]
 8019516:	b29b      	uxth	r3, r3
 8019518:	79f9      	ldrb	r1, [r7, #7]
 801951a:	6a3a      	ldr	r2, [r7, #32]
 801951c:	9204      	str	r2, [sp, #16]
 801951e:	8bba      	ldrh	r2, [r7, #28]
 8019520:	9203      	str	r2, [sp, #12]
 8019522:	69ba      	ldr	r2, [r7, #24]
 8019524:	9202      	str	r2, [sp, #8]
 8019526:	9301      	str	r3, [sp, #4]
 8019528:	f107 030c 	add.w	r3, r7, #12
 801952c:	9300      	str	r3, [sp, #0]
 801952e:	683b      	ldr	r3, [r7, #0]
 8019530:	2200      	movs	r2, #0
 8019532:	2023      	movs	r0, #35	; 0x23
 8019534:	f000 f920 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 8019538:	4603      	mov	r3, r0
}
 801953a:	4618      	mov	r0, r3
 801953c:	3710      	adds	r7, #16
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}

08019542 <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8019542:	b580      	push	{r7, lr}
 8019544:	b08c      	sub	sp, #48	; 0x30
 8019546:	af06      	add	r7, sp, #24
 8019548:	60b9      	str	r1, [r7, #8]
 801954a:	607b      	str	r3, [r7, #4]
 801954c:	4603      	mov	r3, r0
 801954e:	73fb      	strb	r3, [r7, #15]
 8019550:	4613      	mov	r3, r2
 8019552:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 8019554:	2300      	movs	r3, #0
 8019556:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8019558:	7dfb      	ldrb	r3, [r7, #23]
 801955a:	1c5a      	adds	r2, r3, #1
 801955c:	75fa      	strb	r2, [r7, #23]
 801955e:	89ba      	ldrh	r2, [r7, #12]
 8019560:	b2d2      	uxtb	r2, r2
 8019562:	3318      	adds	r3, #24
 8019564:	443b      	add	r3, r7
 8019566:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 801956a:	89bb      	ldrh	r3, [r7, #12]
 801956c:	0a1b      	lsrs	r3, r3, #8
 801956e:	b29a      	uxth	r2, r3
 8019570:	7dfb      	ldrb	r3, [r7, #23]
 8019572:	1c59      	adds	r1, r3, #1
 8019574:	75f9      	strb	r1, [r7, #23]
 8019576:	b2d2      	uxtb	r2, r2
 8019578:	3318      	adds	r3, #24
 801957a:	443b      	add	r3, r7
 801957c:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8019580:	7dfb      	ldrb	r3, [r7, #23]
 8019582:	b29b      	uxth	r3, r3
 8019584:	7bf9      	ldrb	r1, [r7, #15]
 8019586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019588:	9204      	str	r2, [sp, #16]
 801958a:	8c3a      	ldrh	r2, [r7, #32]
 801958c:	9203      	str	r2, [sp, #12]
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	9202      	str	r2, [sp, #8]
 8019592:	9301      	str	r3, [sp, #4]
 8019594:	f107 0314 	add.w	r3, r7, #20
 8019598:	9300      	str	r3, [sp, #0]
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	2200      	movs	r2, #0
 801959e:	2030      	movs	r0, #48	; 0x30
 80195a0:	f000 f8ea 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 80195a4:	4603      	mov	r3, r0
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	3718      	adds	r7, #24
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bd80      	pop	{r7, pc}

080195ae <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 80195ae:	b580      	push	{r7, lr}
 80195b0:	b09e      	sub	sp, #120	; 0x78
 80195b2:	af06      	add	r7, sp, #24
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	607b      	str	r3, [r7, #4]
 80195b8:	4603      	mov	r3, r0
 80195ba:	73fb      	strb	r3, [r7, #15]
 80195bc:	4613      	mov	r3, r2
 80195be:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 80195c0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d003      	beq.n	80195d0 <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 80195c8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80195cc:	2b20      	cmp	r3, #32
 80195ce:	d901      	bls.n	80195d4 <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 80195d0:	2307      	movs	r3, #7
 80195d2:	e042      	b.n	801965a <rfalNfcvPollerExtendedWriteSingleBlock+0xac>
    }
    
    dataLen = 0U;
 80195d4:	2300      	movs	r3, #0
 80195d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 80195da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80195de:	1c5a      	adds	r2, r3, #1
 80195e0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 80195e4:	89ba      	ldrh	r2, [r7, #12]
 80195e6:	b2d2      	uxtb	r2, r2
 80195e8:	3360      	adds	r3, #96	; 0x60
 80195ea:	443b      	add	r3, r7
 80195ec:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 80195f0:	89bb      	ldrh	r3, [r7, #12]
 80195f2:	0a1b      	lsrs	r3, r3, #8
 80195f4:	b29a      	uxth	r2, r3
 80195f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80195fa:	1c59      	adds	r1, r3, #1
 80195fc:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 8019600:	b2d2      	uxtb	r2, r2
 8019602:	3360      	adds	r3, #96	; 0x60
 8019604:	443b      	add	r3, r7
 8019606:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 801960a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801960e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019612:	4413      	add	r3, r2
 8019614:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8019618:	6879      	ldr	r1, [r7, #4]
 801961a:	4618      	mov	r0, r3
 801961c:	f003 ff84 	bl	801d528 <memcpy>
    dataLen += blockLen;
 8019620:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019624:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019628:	4413      	add	r3, r2
 801962a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801962e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019632:	b29b      	uxth	r3, r3
 8019634:	7bf9      	ldrb	r1, [r7, #15]
 8019636:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801963a:	9204      	str	r2, [sp, #16]
 801963c:	222a      	movs	r2, #42	; 0x2a
 801963e:	9203      	str	r2, [sp, #12]
 8019640:	f107 0210 	add.w	r2, r7, #16
 8019644:	9202      	str	r2, [sp, #8]
 8019646:	9301      	str	r3, [sp, #4]
 8019648:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801964c:	9300      	str	r3, [sp, #0]
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	2200      	movs	r2, #0
 8019652:	2031      	movs	r0, #49	; 0x31
 8019654:	f000 f890 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 8019658:	4603      	mov	r3, r0
}
 801965a:	4618      	mov	r0, r3
 801965c:	3760      	adds	r7, #96	; 0x60
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}

08019662 <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8019662:	b580      	push	{r7, lr}
 8019664:	b08c      	sub	sp, #48	; 0x30
 8019666:	af06      	add	r7, sp, #24
 8019668:	60b9      	str	r1, [r7, #8]
 801966a:	4611      	mov	r1, r2
 801966c:	461a      	mov	r2, r3
 801966e:	4603      	mov	r3, r0
 8019670:	73fb      	strb	r3, [r7, #15]
 8019672:	460b      	mov	r3, r1
 8019674:	81bb      	strh	r3, [r7, #12]
 8019676:	4613      	mov	r3, r2
 8019678:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 801967a:	2300      	movs	r3, #0
 801967c:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 801967e:	7dfb      	ldrb	r3, [r7, #23]
 8019680:	1c5a      	adds	r2, r3, #1
 8019682:	75fa      	strb	r2, [r7, #23]
 8019684:	89ba      	ldrh	r2, [r7, #12]
 8019686:	b2d2      	uxtb	r2, r2
 8019688:	3318      	adds	r3, #24
 801968a:	443b      	add	r3, r7
 801968c:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 8019690:	89bb      	ldrh	r3, [r7, #12]
 8019692:	0a1b      	lsrs	r3, r3, #8
 8019694:	b29a      	uxth	r2, r3
 8019696:	7dfb      	ldrb	r3, [r7, #23]
 8019698:	1c59      	adds	r1, r3, #1
 801969a:	75f9      	strb	r1, [r7, #23]
 801969c:	b2d2      	uxtb	r2, r2
 801969e:	3318      	adds	r3, #24
 80196a0:	443b      	add	r3, r7
 80196a2:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 80196a6:	7dfb      	ldrb	r3, [r7, #23]
 80196a8:	1c5a      	adds	r2, r3, #1
 80196aa:	75fa      	strb	r2, [r7, #23]
 80196ac:	88fa      	ldrh	r2, [r7, #6]
 80196ae:	b2d2      	uxtb	r2, r2
 80196b0:	3318      	adds	r3, #24
 80196b2:	443b      	add	r3, r7
 80196b4:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 80196b8:	88fb      	ldrh	r3, [r7, #6]
 80196ba:	0a1b      	lsrs	r3, r3, #8
 80196bc:	b29a      	uxth	r2, r3
 80196be:	7dfb      	ldrb	r3, [r7, #23]
 80196c0:	1c59      	adds	r1, r3, #1
 80196c2:	75f9      	strb	r1, [r7, #23]
 80196c4:	b2d2      	uxtb	r2, r2
 80196c6:	3318      	adds	r3, #24
 80196c8:	443b      	add	r3, r7
 80196ca:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 80196ce:	7dfb      	ldrb	r3, [r7, #23]
 80196d0:	b29b      	uxth	r3, r3
 80196d2:	7bf9      	ldrb	r1, [r7, #15]
 80196d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80196d6:	9204      	str	r2, [sp, #16]
 80196d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80196da:	9203      	str	r2, [sp, #12]
 80196dc:	6a3a      	ldr	r2, [r7, #32]
 80196de:	9202      	str	r2, [sp, #8]
 80196e0:	9301      	str	r3, [sp, #4]
 80196e2:	f107 0310 	add.w	r3, r7, #16
 80196e6:	9300      	str	r3, [sp, #0]
 80196e8:	68bb      	ldr	r3, [r7, #8]
 80196ea:	2200      	movs	r2, #0
 80196ec:	2033      	movs	r0, #51	; 0x33
 80196ee:	f000 f843 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 80196f2:	4603      	mov	r3, r0
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3718      	adds	r7, #24
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b08a      	sub	sp, #40	; 0x28
 8019700:	af06      	add	r7, sp, #24
 8019702:	60b9      	str	r1, [r7, #8]
 8019704:	607a      	str	r2, [r7, #4]
 8019706:	461a      	mov	r2, r3
 8019708:	4603      	mov	r3, r0
 801970a:	73fb      	strb	r3, [r7, #15]
 801970c:	4613      	mov	r3, r2
 801970e:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 8019710:	7bf9      	ldrb	r1, [r7, #15]
 8019712:	69bb      	ldr	r3, [r7, #24]
 8019714:	9304      	str	r3, [sp, #16]
 8019716:	89bb      	ldrh	r3, [r7, #12]
 8019718:	9303      	str	r3, [sp, #12]
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	9302      	str	r3, [sp, #8]
 801971e:	2300      	movs	r3, #0
 8019720:	9301      	str	r3, [sp, #4]
 8019722:	2300      	movs	r3, #0
 8019724:	9300      	str	r3, [sp, #0]
 8019726:	68bb      	ldr	r3, [r7, #8]
 8019728:	2200      	movs	r2, #0
 801972a:	202b      	movs	r0, #43	; 0x2b
 801972c:	f000 f824 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 8019730:	4603      	mov	r3, r0
}
 8019732:	4618      	mov	r0, r3
 8019734:	3710      	adds	r7, #16
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}

0801973a <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801973a:	b580      	push	{r7, lr}
 801973c:	b08a      	sub	sp, #40	; 0x28
 801973e:	af06      	add	r7, sp, #24
 8019740:	60b9      	str	r1, [r7, #8]
 8019742:	607b      	str	r3, [r7, #4]
 8019744:	4603      	mov	r3, r0
 8019746:	73fb      	strb	r3, [r7, #15]
 8019748:	4613      	mov	r3, r2
 801974a:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 801974c:	7bba      	ldrb	r2, [r7, #14]
 801974e:	7bf9      	ldrb	r1, [r7, #15]
 8019750:	69fb      	ldr	r3, [r7, #28]
 8019752:	9304      	str	r3, [sp, #16]
 8019754:	8b3b      	ldrh	r3, [r7, #24]
 8019756:	9303      	str	r3, [sp, #12]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	9302      	str	r3, [sp, #8]
 801975c:	2300      	movs	r3, #0
 801975e:	9301      	str	r3, [sp, #4]
 8019760:	2300      	movs	r3, #0
 8019762:	9300      	str	r3, [sp, #0]
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	203b      	movs	r0, #59	; 0x3b
 8019768:	f000 f806 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 801976c:	4603      	mov	r3, r0
}
 801976e:	4618      	mov	r0, r3
 8019770:	3710      	adds	r7, #16
 8019772:	46bd      	mov	sp, r7
 8019774:	bd80      	pop	{r7, pc}
	...

08019778 <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b094      	sub	sp, #80	; 0x50
 801977c:	af04      	add	r7, sp, #16
 801977e:	603b      	str	r3, [r7, #0]
 8019780:	4603      	mov	r3, r0
 8019782:	71fb      	strb	r3, [r7, #7]
 8019784:	460b      	mov	r3, r1
 8019786:	71bb      	strb	r3, [r7, #6]
 8019788:	4613      	mov	r3, r2
 801978a:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 801978c:	2300      	movs	r3, #0
 801978e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 8019792:	2300      	movs	r3, #0
 8019794:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8019798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801979a:	2b00      	cmp	r3, #0
 801979c:	d013      	beq.n	80197c6 <rfalNfcvPollerTransceiveReq+0x4e>
 801979e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d010      	beq.n	80197c6 <rfalNfcvPollerTransceiveReq+0x4e>
 80197a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d002      	beq.n	80197b2 <rfalNfcvPollerTransceiveReq+0x3a>
 80197ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d009      	beq.n	80197c6 <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 80197b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80197b6:	683a      	ldr	r2, [r7, #0]
 80197b8:	2a00      	cmp	r2, #0
 80197ba:	d001      	beq.n	80197c0 <rfalNfcvPollerTransceiveReq+0x48>
 80197bc:	2229      	movs	r2, #41	; 0x29
 80197be:	e000      	b.n	80197c2 <rfalNfcvPollerTransceiveReq+0x4a>
 80197c0:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d201      	bcs.n	80197ca <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 80197c6:	2307      	movs	r3, #7
 80197c8:	e0ca      	b.n	8019960 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 80197ca:	79fb      	ldrb	r3, [r7, #7]
 80197cc:	2bc0      	cmp	r3, #192	; 0xc0
 80197ce:	d017      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
 80197d0:	79fb      	ldrb	r3, [r7, #7]
 80197d2:	2bc4      	cmp	r3, #196	; 0xc4
 80197d4:	d014      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
 80197d6:	79fb      	ldrb	r3, [r7, #7]
 80197d8:	2bc3      	cmp	r3, #195	; 0xc3
 80197da:	d011      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 80197dc:	79fb      	ldrb	r3, [r7, #7]
 80197de:	2bc5      	cmp	r3, #197	; 0xc5
 80197e0:	d00e      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
 80197e2:	79fb      	ldrb	r3, [r7, #7]
 80197e4:	2bca      	cmp	r3, #202	; 0xca
 80197e6:	d00b      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 80197e8:	79fb      	ldrb	r3, [r7, #7]
 80197ea:	2bcb      	cmp	r3, #203	; 0xcb
 80197ec:	d008      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
 80197ee:	79fb      	ldrb	r3, [r7, #7]
 80197f0:	2bcc      	cmp	r3, #204	; 0xcc
 80197f2:	d005      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 80197f4:	79fb      	ldrb	r3, [r7, #7]
 80197f6:	2bcd      	cmp	r3, #205	; 0xcd
 80197f8:	d002      	beq.n	8019800 <rfalNfcvPollerTransceiveReq+0x88>
 80197fa:	79fb      	ldrb	r3, [r7, #7]
 80197fc:	2bce      	cmp	r3, #206	; 0xce
 80197fe:	d10c      	bne.n	801981a <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 8019800:	f107 030f 	add.w	r3, r7, #15
 8019804:	4619      	mov	r1, r3
 8019806:	2000      	movs	r0, #0
 8019808:	f000 fcca 	bl	801a1a0 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 801980c:	21eb      	movs	r1, #235	; 0xeb
 801980e:	20ff      	movs	r0, #255	; 0xff
 8019810:	f000 fa62 	bl	8019cd8 <rfalSetBitRate>
        
        fastMode = true;
 8019814:	2301      	movs	r3, #1
 8019816:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS) & ~((uint32_t)RFAL_NFCV_REQ_FLAG_SELECT)));
 801981a:	79bb      	ldrb	r3, [r7, #6]
 801981c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8019820:	b2db      	uxtb	r3, r3
 8019822:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 8019824:	79fb      	ldrb	r3, [r7, #7]
 8019826:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 8019828:	797b      	ldrb	r3, [r7, #5]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d009      	beq.n	8019842 <rfalNfcvPollerTransceiveReq+0xca>
    {
        req.payload.data[msgIt++] = param;
 801982e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8019832:	1c5a      	adds	r2, r3, #1
 8019834:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8019838:	3340      	adds	r3, #64	; 0x40
 801983a:	443b      	add	r3, r7
 801983c:	797a      	ldrb	r2, [r7, #5]
 801983e:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if request is to be sent in Addressed or Selected mode */
    if( uid != NULL )
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d015      	beq.n	8019874 <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 8019848:	7c3b      	ldrb	r3, [r7, #16]
 801984a:	f043 0320 	orr.w	r3, r3, #32
 801984e:	b2db      	uxtb	r3, r3
 8019850:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 8019852:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8019856:	f107 0210 	add.w	r2, r7, #16
 801985a:	4413      	add	r3, r2
 801985c:	3302      	adds	r3, #2
 801985e:	2208      	movs	r2, #8
 8019860:	6839      	ldr	r1, [r7, #0]
 8019862:	4618      	mov	r0, r3
 8019864:	f003 fe60 	bl	801d528 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 8019868:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801986c:	3308      	adds	r3, #8
 801986e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8019872:	e004      	b.n	801987e <rfalNfcvPollerTransceiveReq+0x106>
    }
    else
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_SELECT;
 8019874:	7c3b      	ldrb	r3, [r7, #16]
 8019876:	f043 0310 	orr.w	r3, r3, #16
 801987a:	b2db      	uxtb	r3, r3
 801987c:	743b      	strb	r3, [r7, #16]
    }
    
    if( dataLen > 0U )
 801987e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8019882:	2b00      	cmp	r3, #0
 8019884:	d013      	beq.n	80198ae <rfalNfcvPollerTransceiveReq+0x136>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 8019886:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801988a:	f107 0210 	add.w	r2, r7, #16
 801988e:	4413      	add	r3, r2
 8019890:	3302      	adds	r3, #2
 8019892:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8019896:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019898:	4618      	mov	r0, r3
 801989a:	f003 fe45 	bl	801d528 <memcpy>
        msgIt += (uint8_t)dataLen;
 801989e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80198a2:	b2da      	uxtb	r2, r3
 80198a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80198a8:	4413      	add	r3, r2
 80198aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_MAX );
 80198ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80198b2:	b29b      	uxth	r3, r3
 80198b4:	3302      	adds	r3, #2
 80198b6:	b299      	uxth	r1, r3
 80198b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80198bc:	f107 0010 	add.w	r0, r7, #16
 80198c0:	4b29      	ldr	r3, [pc, #164]	; (8019968 <rfalNfcvPollerTransceiveReq+0x1f0>)
 80198c2:	9302      	str	r3, [sp, #8]
 80198c4:	2300      	movs	r3, #0
 80198c6:	9301      	str	r3, [sp, #4]
 80198c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80198ca:	9300      	str	r3, [sp, #0]
 80198cc:	4613      	mov	r3, r2
 80198ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80198d0:	f000 ff20 	bl	801a714 <rfalTransceiveBlockingTxRx>
 80198d4:	4603      	mov	r3, r0
 80198d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 80198d8:	79bb      	ldrb	r3, [r7, #6]
 80198da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d01b      	beq.n	801991a <rfalNfcvPollerTransceiveReq+0x1a2>
 80198e2:	79fb      	ldrb	r3, [r7, #7]
 80198e4:	2b21      	cmp	r3, #33	; 0x21
 80198e6:	d00e      	beq.n	8019906 <rfalNfcvPollerTransceiveReq+0x18e>
 80198e8:	79fb      	ldrb	r3, [r7, #7]
 80198ea:	2b24      	cmp	r3, #36	; 0x24
 80198ec:	d00b      	beq.n	8019906 <rfalNfcvPollerTransceiveReq+0x18e>
 80198ee:	79fb      	ldrb	r3, [r7, #7]
 80198f0:	2b22      	cmp	r3, #34	; 0x22
 80198f2:	d008      	beq.n	8019906 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 80198f4:	79fb      	ldrb	r3, [r7, #7]
 80198f6:	2b31      	cmp	r3, #49	; 0x31
 80198f8:	d005      	beq.n	8019906 <rfalNfcvPollerTransceiveReq+0x18e>
 80198fa:	79fb      	ldrb	r3, [r7, #7]
 80198fc:	2b32      	cmp	r3, #50	; 0x32
 80198fe:	d002      	beq.n	8019906 <rfalNfcvPollerTransceiveReq+0x18e>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 8019900:	79fb      	ldrb	r3, [r7, #7]
 8019902:	2b34      	cmp	r3, #52	; 0x34
 8019904:	d109      	bne.n	801991a <rfalNfcvPollerTransceiveReq+0x1a2>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 8019906:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801990a:	b2db      	uxtb	r3, r3
 801990c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801990e:	4619      	mov	r1, r3
 8019910:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019912:	f002 f90d 	bl	801bb30 <rfalISO15693TransceiveEOF>
 8019916:	4603      	mov	r3, r0
 8019918:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 801991a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801991e:	2b00      	cmp	r3, #0
 8019920:	d004      	beq.n	801992c <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 8019922:	7bfb      	ldrb	r3, [r7, #15]
 8019924:	4619      	mov	r1, r3
 8019926:	20ff      	movs	r0, #255	; 0xff
 8019928:	f000 f9d6 	bl	8019cd8 <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 801992c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801992e:	2b00      	cmp	r3, #0
 8019930:	d001      	beq.n	8019936 <rfalNfcvPollerTransceiveReq+0x1be>
    {
        return ret;
 8019932:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019934:	e014      	b.n	8019960 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 8019936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019938:	881b      	ldrh	r3, [r3, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d101      	bne.n	8019942 <rfalNfcvPollerTransceiveReq+0x1ca>
    {
        return ERR_PROTO;
 801993e:	230b      	movs	r3, #11
 8019940:	e00e      	b.n	8019960 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 8019942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	f003 0301 	and.w	r3, r3, #1
 801994a:	2b00      	cmp	r3, #0
 801994c:	d007      	beq.n	801995e <rfalNfcvPollerTransceiveReq+0x1e6>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 801994e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019950:	3301      	adds	r3, #1
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	4618      	mov	r0, r3
 8019956:	f7ff faab 	bl	8018eb0 <rfalNfcvParseError>
 801995a:	4603      	mov	r3, r0
 801995c:	e000      	b.n	8019960 <rfalNfcvPollerTransceiveReq+0x1e8>
    }
    
    return ERR_NONE;
 801995e:	2300      	movs	r3, #0
}
 8019960:	4618      	mov	r0, r3
 8019962:	3740      	adds	r7, #64	; 0x40
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}
 8019968:	00042360 	.word	0x00042360

0801996c <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 801996c:	b580      	push	{r7, lr}
 801996e:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 8019970:	f7eb fc80 	bl	8005274 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 8019974:	f7ea fd44 	bl	8004400 <st25r3911Initialize>

    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 8019978:	2000      	movs	r0, #0
 801997a:	f7ea ff01 	bl	8004780 <st25r3911CheckChipID>
 801997e:	4603      	mov	r3, r0
 8019980:	f083 0301 	eor.w	r3, r3, #1
 8019984:	b2db      	uxtb	r3, r3
 8019986:	2b00      	cmp	r3, #0
 8019988:	d001      	beq.n	801998e <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 801998a:	2324      	movs	r3, #36	; 0x24
 801998c:	e052      	b.n	8019a34 <rfalInitialize+0xc8>
    }

    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 801998e:	2100      	movs	r1, #0
 8019990:	2001      	movs	r0, #1
 8019992:	f7eb f9c7 	bl	8004d24 <st25r3911WriteTestRegister>

    /*******************************************************************************/
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 8019996:	2000      	movs	r0, #0
 8019998:	f7f7 ff7e 	bl	8011898 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 801999c:	2200      	movs	r2, #0
 801999e:	2130      	movs	r1, #48	; 0x30
 80199a0:	2000      	movs	r0, #0
 80199a2:	f7eb fa94 	bl	8004ece <st25r3911ChangeRegisterBits>

    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 80199a6:	2140      	movs	r1, #64	; 0x40
 80199a8:	2009      	movs	r0, #9
 80199aa:	f7eb fa72 	bl	8004e92 <st25r3911SetRegisterBits>

    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 80199ae:	2110      	movs	r1, #16
 80199b0:	2009      	movs	r0, #9
 80199b2:	f7eb fa6e 	bl	8004e92 <st25r3911SetRegisterBits>

    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 80199b6:	f001 fe05 	bl	801b5c4 <rfalFIFOStatusClear>

    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 80199ba:	4b1f      	ldr	r3, [pc, #124]	; (8019a38 <rfalInitialize+0xcc>)
 80199bc:	2201      	movs	r2, #1
 80199be:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 80199c0:	4b1d      	ldr	r3, [pc, #116]	; (8019a38 <rfalInitialize+0xcc>)
 80199c2:	2200      	movs	r2, #0
 80199c4:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 80199c6:	4b1c      	ldr	r3, [pc, #112]	; (8019a38 <rfalInitialize+0xcc>)
 80199c8:	2200      	movs	r2, #0
 80199ca:	711a      	strb	r2, [r3, #4]

    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 80199cc:	4b1a      	ldr	r3, [pc, #104]	; (8019a38 <rfalInitialize+0xcc>)
 80199ce:	2200      	movs	r2, #0
 80199d0:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 80199d2:	4b19      	ldr	r3, [pc, #100]	; (8019a38 <rfalInitialize+0xcc>)
 80199d4:	2200      	movs	r2, #0
 80199d6:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 80199d8:	4b17      	ldr	r3, [pc, #92]	; (8019a38 <rfalInitialize+0xcc>)
 80199da:	2200      	movs	r2, #0
 80199dc:	71da      	strb	r2, [r3, #7]

    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 80199de:	4b16      	ldr	r3, [pc, #88]	; (8019a38 <rfalInitialize+0xcc>)
 80199e0:	2200      	movs	r2, #0
 80199e2:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 80199e4:	4b14      	ldr	r3, [pc, #80]	; (8019a38 <rfalInitialize+0xcc>)
 80199e6:	2200      	movs	r2, #0
 80199e8:	751a      	strb	r2, [r3, #20]

    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 80199ea:	4b13      	ldr	r3, [pc, #76]	; (8019a38 <rfalInitialize+0xcc>)
 80199ec:	2200      	movs	r2, #0
 80199ee:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 80199f0:	4b11      	ldr	r3, [pc, #68]	; (8019a38 <rfalInitialize+0xcc>)
 80199f2:	2200      	movs	r2, #0
 80199f4:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 80199f6:	4b10      	ldr	r3, [pc, #64]	; (8019a38 <rfalInitialize+0xcc>)
 80199f8:	2200      	movs	r2, #0
 80199fa:	609a      	str	r2, [r3, #8]

    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 80199fc:	4b0e      	ldr	r3, [pc, #56]	; (8019a38 <rfalInitialize+0xcc>)
 80199fe:	2200      	movs	r2, #0
 8019a00:	641a      	str	r2, [r3, #64]	; 0x40

    gRFAL.callbacks.preTxRx  = NULL;
 8019a02:	4b0d      	ldr	r3, [pc, #52]	; (8019a38 <rfalInitialize+0xcc>)
 8019a04:	2200      	movs	r2, #0
 8019a06:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 8019a08:	4b0b      	ldr	r3, [pc, #44]	; (8019a38 <rfalInitialize+0xcc>)
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	651a      	str	r2, [r3, #80]	; 0x50

#if RFAL_FEATURE_NFCV
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 8019a0e:	4b0a      	ldr	r3, [pc, #40]	; (8019a38 <rfalInitialize+0xcc>)
 8019a10:	2200      	movs	r2, #0
 8019a12:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
#endif /* RFAL_FEATURE_NFCV */

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 8019a16:	4b08      	ldr	r3, [pc, #32]	; (8019a38 <rfalInitialize+0xcc>)
 8019a18:	2200      	movs	r2, #0
 8019a1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 8019a1e:	4b06      	ldr	r3, [pc, #24]	; (8019a38 <rfalInitialize+0xcc>)
 8019a20:	22ff      	movs	r2, #255	; 0xff
 8019a22:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8019a26:	4b04      	ldr	r3, [pc, #16]	; (8019a38 <rfalInitialize+0xcc>)
 8019a28:	2200      	movs	r2, #0
 8019a2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


    /*******************************************************************************/
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 8019a2e:	f000 f805 	bl	8019a3c <rfalCalibrate>
    
    return ERR_NONE;
 8019a32:	2300      	movs	r3, #0
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	bd80      	pop	{r7, pc}
 8019a38:	20003c40 	.word	0x20003c40

08019a3c <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b082      	sub	sp, #8
 8019a40:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8019a42:	4b1b      	ldr	r3, [pc, #108]	; (8019ab0 <rfalCalibrate+0x74>)
 8019a44:	781b      	ldrb	r3, [r3, #0]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d101      	bne.n	8019a4e <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 8019a4a:	2321      	movs	r3, #33	; 0x21
 8019a4c:	e02b      	b.n	8019aa6 <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 8019a4e:	2200      	movs	r2, #0
 8019a50:	2180      	movs	r1, #128	; 0x80
 8019a52:	202a      	movs	r0, #42	; 0x2a
 8019a54:	f7ea fe74 	bl	8004740 <st25r3911CheckReg>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d003      	beq.n	8019a66 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 8019a5e:	1dbb      	adds	r3, r7, #6
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7ea fcfb 	bl	800445c <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 8019a66:	2200      	movs	r2, #0
 8019a68:	2180      	movs	r1, #128	; 0x80
 8019a6a:	2021      	movs	r0, #33	; 0x21
 8019a6c:	f7ea fe68 	bl	8004740 <st25r3911CheckReg>
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d010      	beq.n	8019a98 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 8019a76:	1dbb      	adds	r3, r7, #6
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f7ea fd70 	bl	800455e <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 8019a7e:	1dbb      	adds	r3, r7, #6
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7ea fd6c 	bl	800455e <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 8019a86:	2200      	movs	r2, #0
 8019a88:	2180      	movs	r1, #128	; 0x80
 8019a8a:	202a      	movs	r0, #42	; 0x2a
 8019a8c:	f7ea fe58 	bl	8004740 <st25r3911CheckReg>
 8019a90:	4603      	mov	r3, r0
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d006      	beq.n	8019aa4 <rfalCalibrate+0x68>
 8019a96:	e001      	b.n	8019a9c <rfalCalibrate+0x60>
        return ERR_NONE; 
 8019a98:	2300      	movs	r3, #0
 8019a9a:	e004      	b.n	8019aa6 <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 8019a9c:	1dbb      	adds	r3, r7, #6
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7ea fcdc 	bl	800445c <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 8019aa4:	2300      	movs	r3, #0
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3708      	adds	r7, #8
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}
 8019aae:	bf00      	nop
 8019ab0:	20003c40 	.word	0x20003c40

08019ab4 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b082      	sub	sp, #8
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	4603      	mov	r3, r0
 8019abc:	71fb      	strb	r3, [r7, #7]
 8019abe:	460b      	mov	r3, r1
 8019ac0:	71bb      	strb	r3, [r7, #6]
 8019ac2:	4613      	mov	r3, r2
 8019ac4:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8019ac6:	4b83      	ldr	r3, [pc, #524]	; (8019cd4 <rfalSetMode+0x220>)
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d101      	bne.n	8019ad2 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8019ace:	2321      	movs	r3, #33	; 0x21
 8019ad0:	e0fb      	b.n	8019cca <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8019ad2:	79bb      	ldrb	r3, [r7, #6]
 8019ad4:	2bff      	cmp	r3, #255	; 0xff
 8019ad6:	d002      	beq.n	8019ade <rfalSetMode+0x2a>
 8019ad8:	797b      	ldrb	r3, [r7, #5]
 8019ada:	2bff      	cmp	r3, #255	; 0xff
 8019adc:	d101      	bne.n	8019ae2 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 8019ade:	2307      	movs	r3, #7
 8019ae0:	e0f3      	b.n	8019cca <rfalSetMode+0x216>
    }
   
    switch( mode )
 8019ae2:	79fb      	ldrb	r3, [r7, #7]
 8019ae4:	3b01      	subs	r3, #1
 8019ae6:	2b0c      	cmp	r3, #12
 8019ae8:	f200 80db 	bhi.w	8019ca2 <rfalSetMode+0x1ee>
 8019aec:	a201      	add	r2, pc, #4	; (adr r2, 8019af4 <rfalSetMode+0x40>)
 8019aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019af2:	bf00      	nop
 8019af4:	08019b29 	.word	0x08019b29
 8019af8:	08019b4b 	.word	0x08019b4b
 8019afc:	08019b6d 	.word	0x08019b6d
 8019b00:	08019ba3 	.word	0x08019ba3
 8019b04:	08019bd9 	.word	0x08019bd9
 8019b08:	08019c0f 	.word	0x08019c0f
 8019b0c:	08019c31 	.word	0x08019c31
 8019b10:	08019c31 	.word	0x08019c31
 8019b14:	08019c4b 	.word	0x08019c4b
 8019b18:	08019c9f 	.word	0x08019c9f
 8019b1c:	08019c9f 	.word	0x08019c9f
 8019b20:	08019c9f 	.word	0x08019c9f
 8019b24:	08019c75 	.word	0x08019c75
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019b28:	2104      	movs	r1, #4
 8019b2a:	2002      	movs	r0, #2
 8019b2c:	f7eb f98e 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 8019b30:	2108      	movs	r1, #8
 8019b32:	2003      	movs	r0, #3
 8019b34:	f7eb f93e 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019b38:	f240 1001 	movw	r0, #257	; 0x101
 8019b3c:	f7f7 feac 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019b40:	f44f 7081 	mov.w	r0, #258	; 0x102
 8019b44:	f7f7 fea8 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019b48:	e0ad      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019b4a:	2104      	movs	r1, #4
 8019b4c:	2002      	movs	r0, #2
 8019b4e:	f7eb f97d 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 8019b52:	2120      	movs	r1, #32
 8019b54:	2003      	movs	r0, #3
 8019b56:	f7eb f92d 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019b5a:	f240 1001 	movw	r0, #257	; 0x101
 8019b5e:	f7f7 fe9b 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019b62:	f44f 7081 	mov.w	r0, #258	; 0x102
 8019b66:	f7f7 fe97 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019b6a:	e09c      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019b6c:	2104      	movs	r1, #4
 8019b6e:	2002      	movs	r0, #2
 8019b70:	f7eb f96c 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8019b74:	2110      	movs	r1, #16
 8019b76:	2003      	movs	r0, #3
 8019b78:	f7eb f91c 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	21fc      	movs	r1, #252	; 0xfc
 8019b80:	2006      	movs	r0, #6
 8019b82:	f7eb f9a4 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8019b86:	2200      	movs	r2, #0
 8019b88:	21f8      	movs	r1, #248	; 0xf8
 8019b8a:	2007      	movs	r0, #7
 8019b8c:	f7eb f99f 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019b90:	f240 2001 	movw	r0, #513	; 0x201
 8019b94:	f7f7 fe80 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019b98:	f240 2002 	movw	r0, #514	; 0x202
 8019b9c:	f7f7 fe7c 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019ba0:	e081      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019ba2:	2104      	movs	r1, #4
 8019ba4:	2002      	movs	r0, #2
 8019ba6:	f7eb f951 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8019baa:	2110      	movs	r1, #16
 8019bac:	2003      	movs	r0, #3
 8019bae:	f7eb f901 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	21fc      	movs	r1, #252	; 0xfc
 8019bb6:	2006      	movs	r0, #6
 8019bb8:	f7eb f989 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8019bbc:	2228      	movs	r2, #40	; 0x28
 8019bbe:	21f8      	movs	r1, #248	; 0xf8
 8019bc0:	2007      	movs	r0, #7
 8019bc2:	f7eb f984 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019bc6:	f240 2001 	movw	r0, #513	; 0x201
 8019bca:	f7f7 fe65 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019bce:	f240 2002 	movw	r0, #514	; 0x202
 8019bd2:	f7f7 fe61 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019bd6:	e066      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019bd8:	2104      	movs	r1, #4
 8019bda:	2002      	movs	r0, #2
 8019bdc:	f7eb f936 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 8019be0:	2110      	movs	r1, #16
 8019be2:	2003      	movs	r0, #3
 8019be4:	f7eb f8e6 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 8019be8:	2200      	movs	r2, #0
 8019bea:	21fc      	movs	r1, #252	; 0xfc
 8019bec:	2006      	movs	r0, #6
 8019bee:	f7eb f96e 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 8019bf2:	2230      	movs	r2, #48	; 0x30
 8019bf4:	21f8      	movs	r1, #248	; 0xf8
 8019bf6:	2007      	movs	r0, #7
 8019bf8:	f7eb f969 	bl	8004ece <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019bfc:	f240 2001 	movw	r0, #513	; 0x201
 8019c00:	f7f7 fe4a 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019c04:	f240 2002 	movw	r0, #514	; 0x202
 8019c08:	f7f7 fe46 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019c0c:	e04b      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019c0e:	2104      	movs	r1, #4
 8019c10:	2002      	movs	r0, #2
 8019c12:	f7eb f91b 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 8019c16:	2118      	movs	r1, #24
 8019c18:	2003      	movs	r0, #3
 8019c1a:	f7eb f8cb 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019c1e:	f240 4001 	movw	r0, #1025	; 0x401
 8019c22:	f7f7 fe39 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019c26:	f240 4002 	movw	r0, #1026	; 0x402
 8019c2a:	f7f7 fe35 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019c2e:	e03a      	b.n	8019ca6 <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 8019c30:	2104      	movs	r1, #4
 8019c32:	2002      	movs	r0, #2
 8019c34:	f7eb f90a 	bl	8004e4c <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019c38:	f241 0001 	movw	r0, #4097	; 0x1001
 8019c3c:	f7f7 fe2c 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019c40:	f241 0002 	movw	r0, #4098	; 0x1002
 8019c44:	f7f7 fe28 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019c48:	e02d      	b.n	8019ca6 <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 8019c4a:	2101      	movs	r1, #1
 8019c4c:	2003      	movs	r0, #3
 8019c4e:	f7eb f8b1 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8019c52:	2160      	movs	r1, #96	; 0x60
 8019c54:	2040      	movs	r0, #64	; 0x40
 8019c56:	f7ea fd3f 	bl	80046d8 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8019c5a:	2110      	movs	r1, #16
 8019c5c:	2009      	movs	r0, #9
 8019c5e:	f7eb f918 	bl	8004e92 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019c62:	f640 0001 	movw	r0, #2049	; 0x801
 8019c66:	f7f7 fe17 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019c6a:	f640 0002 	movw	r0, #2050	; 0x802
 8019c6e:	f7f7 fe13 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019c72:	e018      	b.n	8019ca6 <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 8019c74:	2189      	movs	r1, #137	; 0x89
 8019c76:	2003      	movs	r0, #3
 8019c78:	f7eb f89c 	bl	8004db4 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 8019c7c:	2160      	movs	r1, #96	; 0x60
 8019c7e:	2040      	movs	r0, #64	; 0x40
 8019c80:	f7ea fd2a 	bl	80046d8 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 8019c84:	2110      	movs	r1, #16
 8019c86:	2009      	movs	r0, #9
 8019c88:	f7eb f903 	bl	8004e92 <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8019c8c:	f648 0001 	movw	r0, #34817	; 0x8801
 8019c90:	f7f7 fe02 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8019c94:	f648 0002 	movw	r0, #34818	; 0x8802
 8019c98:	f7f7 fdfe 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019c9c:	e003      	b.n	8019ca6 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 8019c9e:	2318      	movs	r3, #24
 8019ca0:	e013      	b.n	8019cca <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 8019ca2:	230f      	movs	r3, #15
 8019ca4:	e011      	b.n	8019cca <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 8019ca6:	4b0b      	ldr	r3, [pc, #44]	; (8019cd4 <rfalSetMode+0x220>)
 8019ca8:	781b      	ldrb	r3, [r3, #0]
 8019caa:	2b02      	cmp	r3, #2
 8019cac:	bf38      	it	cc
 8019cae:	2302      	movcc	r3, #2
 8019cb0:	b2da      	uxtb	r2, r3
 8019cb2:	4b08      	ldr	r3, [pc, #32]	; (8019cd4 <rfalSetMode+0x220>)
 8019cb4:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 8019cb6:	4a07      	ldr	r2, [pc, #28]	; (8019cd4 <rfalSetMode+0x220>)
 8019cb8:	79fb      	ldrb	r3, [r7, #7]
 8019cba:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 8019cbc:	797a      	ldrb	r2, [r7, #5]
 8019cbe:	79bb      	ldrb	r3, [r7, #6]
 8019cc0:	4611      	mov	r1, r2
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f000 f808 	bl	8019cd8 <rfalSetBitRate>
 8019cc8:	4603      	mov	r3, r0
}
 8019cca:	4618      	mov	r0, r3
 8019ccc:	3708      	adds	r7, #8
 8019cce:	46bd      	mov	sp, r7
 8019cd0:	bd80      	pop	{r7, pc}
 8019cd2:	bf00      	nop
 8019cd4:	20003c40 	.word	0x20003c40

08019cd8 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b088      	sub	sp, #32
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	4603      	mov	r3, r0
 8019ce0:	460a      	mov	r2, r1
 8019ce2:	71fb      	strb	r3, [r7, #7]
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8019ce8:	4b93      	ldr	r3, [pc, #588]	; (8019f38 <rfalSetBitRate+0x260>)
 8019cea:	781b      	ldrb	r3, [r3, #0]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d101      	bne.n	8019cf4 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 8019cf0:	2321      	movs	r3, #33	; 0x21
 8019cf2:	e24a      	b.n	801a18a <rfalSetBitRate+0x4b2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8019cf4:	79fb      	ldrb	r3, [r7, #7]
 8019cf6:	2bff      	cmp	r3, #255	; 0xff
 8019cf8:	d102      	bne.n	8019d00 <rfalSetBitRate+0x28>
 8019cfa:	4b8f      	ldr	r3, [pc, #572]	; (8019f38 <rfalSetBitRate+0x260>)
 8019cfc:	789b      	ldrb	r3, [r3, #2]
 8019cfe:	e000      	b.n	8019d02 <rfalSetBitRate+0x2a>
 8019d00:	79fb      	ldrb	r3, [r7, #7]
 8019d02:	4a8d      	ldr	r2, [pc, #564]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d04:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8019d06:	79bb      	ldrb	r3, [r7, #6]
 8019d08:	2bff      	cmp	r3, #255	; 0xff
 8019d0a:	d102      	bne.n	8019d12 <rfalSetBitRate+0x3a>
 8019d0c:	4b8a      	ldr	r3, [pc, #552]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d0e:	78db      	ldrb	r3, [r3, #3]
 8019d10:	e000      	b.n	8019d14 <rfalSetBitRate+0x3c>
 8019d12:	79bb      	ldrb	r3, [r7, #6]
 8019d14:	4a88      	ldr	r2, [pc, #544]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d16:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8019d18:	4b87      	ldr	r3, [pc, #540]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d1a:	785b      	ldrb	r3, [r3, #1]
 8019d1c:	2b07      	cmp	r3, #7
 8019d1e:	d012      	beq.n	8019d46 <rfalSetBitRate+0x6e>
 8019d20:	4b85      	ldr	r3, [pc, #532]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d22:	785b      	ldrb	r3, [r3, #1]
 8019d24:	2b08      	cmp	r3, #8
 8019d26:	d00e      	beq.n	8019d46 <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8019d28:	4b83      	ldr	r3, [pc, #524]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d2a:	789b      	ldrb	r3, [r3, #2]
 8019d2c:	4a82      	ldr	r2, [pc, #520]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d2e:	78d2      	ldrb	r2, [r2, #3]
 8019d30:	4611      	mov	r1, r2
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7ea fc4e 	bl	80045d4 <st25r3911SetBitrate>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	83fb      	strh	r3, [r7, #30]
 8019d3c:	8bfb      	ldrh	r3, [r7, #30]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d001      	beq.n	8019d46 <rfalSetBitRate+0x6e>
 8019d42:	8bfb      	ldrh	r3, [r7, #30]
 8019d44:	e221      	b.n	801a18a <rfalSetBitRate+0x4b2>
    }
    
    
    switch( gRFAL.mode )
 8019d46:	4b7c      	ldr	r3, [pc, #496]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d48:	785b      	ldrb	r3, [r3, #1]
 8019d4a:	2b0d      	cmp	r3, #13
 8019d4c:	f200 821a 	bhi.w	801a184 <rfalSetBitRate+0x4ac>
 8019d50:	a201      	add	r2, pc, #4	; (adr r2, 8019d58 <rfalSetBitRate+0x80>)
 8019d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d56:	bf00      	nop
 8019d58:	0801a181 	.word	0x0801a181
 8019d5c:	08019d91 	.word	0x08019d91
 8019d60:	08019d91 	.word	0x08019d91
 8019d64:	08019e19 	.word	0x08019e19
 8019d68:	08019e19 	.word	0x08019e19
 8019d6c:	08019e19 	.word	0x08019e19
 8019d70:	08019ea9 	.word	0x08019ea9
 8019d74:	08019f3d 	.word	0x08019f3d
 8019d78:	08019f3d 	.word	0x08019f3d
 8019d7c:	0801a071 	.word	0x0801a071
 8019d80:	0801a181 	.word	0x0801a181
 8019d84:	0801a181 	.word	0x0801a181
 8019d88:	0801a181 	.word	0x0801a181
 8019d8c:	0801a101 	.word	0x0801a101
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8019d90:	2008      	movs	r0, #8
 8019d92:	f7f7 fd81 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8019d96:	4b68      	ldr	r3, [pc, #416]	; (8019f38 <rfalSetBitRate+0x260>)
 8019d98:	789b      	ldrb	r3, [r3, #2]
 8019d9a:	2bea      	cmp	r3, #234	; 0xea
 8019d9c:	d90c      	bls.n	8019db8 <rfalSetBitRate+0xe0>
 8019d9e:	4b66      	ldr	r3, [pc, #408]	; (8019f38 <rfalSetBitRate+0x260>)
 8019da0:	789b      	ldrb	r3, [r3, #2]
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	011b      	lsls	r3, r3, #4
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	b2db      	uxtb	r3, r3
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019db0:	f043 0301 	orr.w	r3, r3, #1
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	e00d      	b.n	8019dd4 <rfalSetBitRate+0xfc>
 8019db8:	4b5f      	ldr	r3, [pc, #380]	; (8019f38 <rfalSetBitRate+0x260>)
 8019dba:	789b      	ldrb	r3, [r3, #2]
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	011b      	lsls	r3, r3, #4
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019dce:	f043 0301 	orr.w	r3, r3, #1
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7f7 fd5f 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8019dda:	4b57      	ldr	r3, [pc, #348]	; (8019f38 <rfalSetBitRate+0x260>)
 8019ddc:	78db      	ldrb	r3, [r3, #3]
 8019dde:	2bea      	cmp	r3, #234	; 0xea
 8019de0:	d90a      	bls.n	8019df8 <rfalSetBitRate+0x120>
 8019de2:	4b55      	ldr	r3, [pc, #340]	; (8019f38 <rfalSetBitRate+0x260>)
 8019de4:	78db      	ldrb	r3, [r3, #3]
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	011b      	lsls	r3, r3, #4
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	b2db      	uxtb	r3, r3
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	e00b      	b.n	8019e10 <rfalSetBitRate+0x138>
 8019df8:	4b4f      	ldr	r3, [pc, #316]	; (8019f38 <rfalSetBitRate+0x260>)
 8019dfa:	78db      	ldrb	r3, [r3, #3]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	3301      	adds	r3, #1
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	011b      	lsls	r3, r3, #4
 8019e04:	b29b      	uxth	r3, r3
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	b29b      	uxth	r3, r3
 8019e0a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7f7 fd41 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019e16:	e1b7      	b.n	801a188 <rfalSetBitRate+0x4b0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8019e18:	2008      	movs	r0, #8
 8019e1a:	f7f7 fd3d 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8019e1e:	4b46      	ldr	r3, [pc, #280]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e20:	789b      	ldrb	r3, [r3, #2]
 8019e22:	2bea      	cmp	r3, #234	; 0xea
 8019e24:	d90c      	bls.n	8019e40 <rfalSetBitRate+0x168>
 8019e26:	4b44      	ldr	r3, [pc, #272]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e28:	789b      	ldrb	r3, [r3, #2]
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	011b      	lsls	r3, r3, #4
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019e38:	f043 0301 	orr.w	r3, r3, #1
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	e00d      	b.n	8019e5c <rfalSetBitRate+0x184>
 8019e40:	4b3d      	ldr	r3, [pc, #244]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e42:	789b      	ldrb	r3, [r3, #2]
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	3301      	adds	r3, #1
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	011b      	lsls	r3, r3, #4
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	b2db      	uxtb	r3, r3
 8019e50:	b29b      	uxth	r3, r3
 8019e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019e56:	f043 0301 	orr.w	r3, r3, #1
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f7f7 fd1b 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8019e62:	4b35      	ldr	r3, [pc, #212]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e64:	78db      	ldrb	r3, [r3, #3]
 8019e66:	2bea      	cmp	r3, #234	; 0xea
 8019e68:	d90c      	bls.n	8019e84 <rfalSetBitRate+0x1ac>
 8019e6a:	4b33      	ldr	r3, [pc, #204]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e6c:	78db      	ldrb	r3, [r3, #3]
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	011b      	lsls	r3, r3, #4
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019e7c:	f043 0302 	orr.w	r3, r3, #2
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	e00d      	b.n	8019ea0 <rfalSetBitRate+0x1c8>
 8019e84:	4b2c      	ldr	r3, [pc, #176]	; (8019f38 <rfalSetBitRate+0x260>)
 8019e86:	78db      	ldrb	r3, [r3, #3]
 8019e88:	b29b      	uxth	r3, r3
 8019e8a:	3301      	adds	r3, #1
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	011b      	lsls	r3, r3, #4
 8019e90:	b29b      	uxth	r3, r3
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019e9a:	f043 0302 	orr.w	r3, r3, #2
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f7f7 fcf9 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019ea6:	e16f      	b.n	801a188 <rfalSetBitRate+0x4b0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8019ea8:	2008      	movs	r0, #8
 8019eaa:	f7f7 fcf5 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8019eae:	4b22      	ldr	r3, [pc, #136]	; (8019f38 <rfalSetBitRate+0x260>)
 8019eb0:	789b      	ldrb	r3, [r3, #2]
 8019eb2:	2bea      	cmp	r3, #234	; 0xea
 8019eb4:	d90c      	bls.n	8019ed0 <rfalSetBitRate+0x1f8>
 8019eb6:	4b20      	ldr	r3, [pc, #128]	; (8019f38 <rfalSetBitRate+0x260>)
 8019eb8:	789b      	ldrb	r3, [r3, #2]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	011b      	lsls	r3, r3, #4
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019ec8:	f043 0301 	orr.w	r3, r3, #1
 8019ecc:	b29b      	uxth	r3, r3
 8019ece:	e00d      	b.n	8019eec <rfalSetBitRate+0x214>
 8019ed0:	4b19      	ldr	r3, [pc, #100]	; (8019f38 <rfalSetBitRate+0x260>)
 8019ed2:	789b      	ldrb	r3, [r3, #2]
 8019ed4:	b29b      	uxth	r3, r3
 8019ed6:	3301      	adds	r3, #1
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	011b      	lsls	r3, r3, #4
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	b2db      	uxtb	r3, r3
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019ee6:	f043 0301 	orr.w	r3, r3, #1
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	4618      	mov	r0, r3
 8019eee:	f7f7 fcd3 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8019ef2:	4b11      	ldr	r3, [pc, #68]	; (8019f38 <rfalSetBitRate+0x260>)
 8019ef4:	78db      	ldrb	r3, [r3, #3]
 8019ef6:	2bea      	cmp	r3, #234	; 0xea
 8019ef8:	d90c      	bls.n	8019f14 <rfalSetBitRate+0x23c>
 8019efa:	4b0f      	ldr	r3, [pc, #60]	; (8019f38 <rfalSetBitRate+0x260>)
 8019efc:	78db      	ldrb	r3, [r3, #3]
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	011b      	lsls	r3, r3, #4
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	b2db      	uxtb	r3, r3
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019f0c:	f043 0302 	orr.w	r3, r3, #2
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	e00d      	b.n	8019f30 <rfalSetBitRate+0x258>
 8019f14:	4b08      	ldr	r3, [pc, #32]	; (8019f38 <rfalSetBitRate+0x260>)
 8019f16:	78db      	ldrb	r3, [r3, #3]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	011b      	lsls	r3, r3, #4
 8019f20:	b29b      	uxth	r3, r3
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	b29b      	uxth	r3, r3
 8019f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019f2a:	f043 0302 	orr.w	r3, r3, #2
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4618      	mov	r0, r3
 8019f32:	f7f7 fcb1 	bl	8011898 <rfalSetAnalogConfig>
            break;
 8019f36:	e127      	b.n	801a188 <rfalSetBitRate+0x4b0>
 8019f38:	20003c40 	.word	0x20003c40
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 8019f3c:	4b95      	ldr	r3, [pc, #596]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f3e:	78db      	ldrb	r3, [r3, #3]
 8019f40:	2bec      	cmp	r3, #236	; 0xec
 8019f42:	d00b      	beq.n	8019f5c <rfalSetBitRate+0x284>
 8019f44:	4b93      	ldr	r3, [pc, #588]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f46:	78db      	ldrb	r3, [r3, #3]
 8019f48:	2beb      	cmp	r3, #235	; 0xeb
 8019f4a:	d007      	beq.n	8019f5c <rfalSetBitRate+0x284>
 8019f4c:	4b91      	ldr	r3, [pc, #580]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f4e:	78db      	ldrb	r3, [r3, #3]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d003      	beq.n	8019f5c <rfalSetBitRate+0x284>
 8019f54:	4b8f      	ldr	r3, [pc, #572]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f56:	78db      	ldrb	r3, [r3, #3]
 8019f58:	2b01      	cmp	r3, #1
 8019f5a:	d107      	bne.n	8019f6c <rfalSetBitRate+0x294>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8019f5c:	4b8d      	ldr	r3, [pc, #564]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f5e:	789b      	ldrb	r3, [r3, #2]
 8019f60:	2bed      	cmp	r3, #237	; 0xed
 8019f62:	d005      	beq.n	8019f70 <rfalSetBitRate+0x298>
 8019f64:	4b8b      	ldr	r3, [pc, #556]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f66:	789b      	ldrb	r3, [r3, #2]
 8019f68:	2bec      	cmp	r3, #236	; 0xec
 8019f6a:	d001      	beq.n	8019f70 <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 8019f6c:	2307      	movs	r3, #7
 8019f6e:	e10c      	b.n	801a18a <rfalSetBitRate+0x4b2>
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 8019f70:	4b88      	ldr	r3, [pc, #544]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f72:	789b      	ldrb	r3, [r3, #2]
 8019f74:	2bed      	cmp	r3, #237	; 0xed
 8019f76:	bf0c      	ite	eq
 8019f78:	2301      	moveq	r3, #1
 8019f7a:	2300      	movne	r3, #0
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 8019f80:	4b84      	ldr	r3, [pc, #528]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019f82:	78db      	ldrb	r3, [r3, #3]
 8019f84:	2beb      	cmp	r3, #235	; 0xeb
 8019f86:	d006      	beq.n	8019f96 <rfalSetBitRate+0x2be>
 8019f88:	2beb      	cmp	r3, #235	; 0xeb
 8019f8a:	dc0d      	bgt.n	8019fa8 <rfalSetBitRate+0x2d0>
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d005      	beq.n	8019f9c <rfalSetBitRate+0x2c4>
 8019f90:	2b01      	cmp	r3, #1
 8019f92:	d006      	beq.n	8019fa2 <rfalSetBitRate+0x2ca>
 8019f94:	e008      	b.n	8019fa8 <rfalSetBitRate+0x2d0>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 8019f96:	2301      	movs	r3, #1
 8019f98:	613b      	str	r3, [r7, #16]
                            break;
 8019f9a:	e008      	b.n	8019fae <rfalSetBitRate+0x2d6>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 8019f9c:	2302      	movs	r3, #2
 8019f9e:	613b      	str	r3, [r7, #16]
                            break;
 8019fa0:	e005      	b.n	8019fae <rfalSetBitRate+0x2d6>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 8019fa2:	2303      	movs	r3, #3
 8019fa4:	613b      	str	r3, [r7, #16]
                            break;
 8019fa6:	e002      	b.n	8019fae <rfalSetBitRate+0x2d6>
                        default:
                            config.speedMode = 0;
 8019fa8:	2300      	movs	r3, #0
 8019faa:	613b      	str	r3, [r7, #16]
                            break;
 8019fac:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 8019fae:	f107 0218 	add.w	r2, r7, #24
 8019fb2:	f107 030c 	add.w	r3, r7, #12
 8019fb6:	4611      	mov	r1, r2
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7f7 fdc9 	bl	8011b50 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 8019fbe:	69bb      	ldr	r3, [r7, #24]
 8019fc0:	785b      	ldrb	r3, [r3, #1]
 8019fc2:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 8019fc4:	69bb      	ldr	r3, [r7, #24]
 8019fc6:	789b      	ldrb	r3, [r3, #2]
 8019fc8:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 8019fca:	69bb      	ldr	r3, [r7, #24]
 8019fcc:	78db      	ldrb	r3, [r3, #3]
 8019fce:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 8019fd0:	69bb      	ldr	r3, [r7, #24]
 8019fd2:	781b      	ldrb	r3, [r3, #0]
 8019fd4:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 8019fd6:	f107 0314 	add.w	r3, r7, #20
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7ea fcba 	bl	8004954 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8019fe0:	2008      	movs	r0, #8
 8019fe2:	f7f7 fc59 	bl	8011898 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8019fe6:	4b6b      	ldr	r3, [pc, #428]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019fe8:	789b      	ldrb	r3, [r3, #2]
 8019fea:	2bea      	cmp	r3, #234	; 0xea
 8019fec:	d90c      	bls.n	801a008 <rfalSetBitRate+0x330>
 8019fee:	4b69      	ldr	r3, [pc, #420]	; (801a194 <rfalSetBitRate+0x4bc>)
 8019ff0:	789b      	ldrb	r3, [r3, #2]
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	011b      	lsls	r3, r3, #4
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	b2db      	uxtb	r3, r3
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a000:	f043 0301 	orr.w	r3, r3, #1
 801a004:	b29b      	uxth	r3, r3
 801a006:	e00d      	b.n	801a024 <rfalSetBitRate+0x34c>
 801a008:	4b62      	ldr	r3, [pc, #392]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a00a:	789b      	ldrb	r3, [r3, #2]
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	3301      	adds	r3, #1
 801a010:	b29b      	uxth	r3, r3
 801a012:	011b      	lsls	r3, r3, #4
 801a014:	b29b      	uxth	r3, r3
 801a016:	b2db      	uxtb	r3, r3
 801a018:	b29b      	uxth	r3, r3
 801a01a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a01e:	f043 0301 	orr.w	r3, r3, #1
 801a022:	b29b      	uxth	r3, r3
 801a024:	4618      	mov	r0, r3
 801a026:	f7f7 fc37 	bl	8011898 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801a02a:	4b5a      	ldr	r3, [pc, #360]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a02c:	78db      	ldrb	r3, [r3, #3]
 801a02e:	2bea      	cmp	r3, #234	; 0xea
 801a030:	d90c      	bls.n	801a04c <rfalSetBitRate+0x374>
 801a032:	4b58      	ldr	r3, [pc, #352]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a034:	78db      	ldrb	r3, [r3, #3]
 801a036:	b29b      	uxth	r3, r3
 801a038:	011b      	lsls	r3, r3, #4
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	b29b      	uxth	r3, r3
 801a040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a044:	f043 0302 	orr.w	r3, r3, #2
 801a048:	b29b      	uxth	r3, r3
 801a04a:	e00d      	b.n	801a068 <rfalSetBitRate+0x390>
 801a04c:	4b51      	ldr	r3, [pc, #324]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a04e:	78db      	ldrb	r3, [r3, #3]
 801a050:	b29b      	uxth	r3, r3
 801a052:	3301      	adds	r3, #1
 801a054:	b29b      	uxth	r3, r3
 801a056:	011b      	lsls	r3, r3, #4
 801a058:	b29b      	uxth	r3, r3
 801a05a:	b2db      	uxtb	r3, r3
 801a05c:	b29b      	uxth	r3, r3
 801a05e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a062:	f043 0302 	orr.w	r3, r3, #2
 801a066:	b29b      	uxth	r3, r3
 801a068:	4618      	mov	r0, r3
 801a06a:	f7f7 fc15 	bl	8011898 <rfalSetAnalogConfig>
                break;
 801a06e:	e08b      	b.n	801a188 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 801a070:	2008      	movs	r0, #8
 801a072:	f7f7 fc11 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801a076:	4b47      	ldr	r3, [pc, #284]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a078:	789b      	ldrb	r3, [r3, #2]
 801a07a:	2bea      	cmp	r3, #234	; 0xea
 801a07c:	d90c      	bls.n	801a098 <rfalSetBitRate+0x3c0>
 801a07e:	4b45      	ldr	r3, [pc, #276]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a080:	789b      	ldrb	r3, [r3, #2]
 801a082:	b29b      	uxth	r3, r3
 801a084:	011b      	lsls	r3, r3, #4
 801a086:	b29b      	uxth	r3, r3
 801a088:	b2db      	uxtb	r3, r3
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a090:	f043 0301 	orr.w	r3, r3, #1
 801a094:	b29b      	uxth	r3, r3
 801a096:	e00d      	b.n	801a0b4 <rfalSetBitRate+0x3dc>
 801a098:	4b3e      	ldr	r3, [pc, #248]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a09a:	789b      	ldrb	r3, [r3, #2]
 801a09c:	b29b      	uxth	r3, r3
 801a09e:	3301      	adds	r3, #1
 801a0a0:	b29b      	uxth	r3, r3
 801a0a2:	011b      	lsls	r3, r3, #4
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	b2db      	uxtb	r3, r3
 801a0a8:	b29b      	uxth	r3, r3
 801a0aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a0ae:	f043 0301 	orr.w	r3, r3, #1
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7f7 fbef 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801a0ba:	4b36      	ldr	r3, [pc, #216]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a0bc:	78db      	ldrb	r3, [r3, #3]
 801a0be:	2bea      	cmp	r3, #234	; 0xea
 801a0c0:	d90c      	bls.n	801a0dc <rfalSetBitRate+0x404>
 801a0c2:	4b34      	ldr	r3, [pc, #208]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a0c4:	78db      	ldrb	r3, [r3, #3]
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	011b      	lsls	r3, r3, #4
 801a0ca:	b29b      	uxth	r3, r3
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a0d4:	f043 0302 	orr.w	r3, r3, #2
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	e00d      	b.n	801a0f8 <rfalSetBitRate+0x420>
 801a0dc:	4b2d      	ldr	r3, [pc, #180]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a0de:	78db      	ldrb	r3, [r3, #3]
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	3301      	adds	r3, #1
 801a0e4:	b29b      	uxth	r3, r3
 801a0e6:	011b      	lsls	r3, r3, #4
 801a0e8:	b29b      	uxth	r3, r3
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a0f2:	f043 0302 	orr.w	r3, r3, #2
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f7 fbcd 	bl	8011898 <rfalSetAnalogConfig>
            break;
 801a0fe:	e043      	b.n	801a188 <rfalSetBitRate+0x4b0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 801a100:	2009      	movs	r0, #9
 801a102:	f7f7 fbc9 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 801a106:	4b23      	ldr	r3, [pc, #140]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a108:	789b      	ldrb	r3, [r3, #2]
 801a10a:	2bea      	cmp	r3, #234	; 0xea
 801a10c:	d90a      	bls.n	801a124 <rfalSetBitRate+0x44c>
 801a10e:	4b21      	ldr	r3, [pc, #132]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a110:	789b      	ldrb	r3, [r3, #2]
 801a112:	b29b      	uxth	r3, r3
 801a114:	011b      	lsls	r3, r3, #4
 801a116:	b29b      	uxth	r3, r3
 801a118:	b2db      	uxtb	r3, r3
 801a11a:	b29a      	uxth	r2, r3
 801a11c:	4b1e      	ldr	r3, [pc, #120]	; (801a198 <rfalSetBitRate+0x4c0>)
 801a11e:	4313      	orrs	r3, r2
 801a120:	b29b      	uxth	r3, r3
 801a122:	e00b      	b.n	801a13c <rfalSetBitRate+0x464>
 801a124:	4b1b      	ldr	r3, [pc, #108]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a126:	789b      	ldrb	r3, [r3, #2]
 801a128:	b29b      	uxth	r3, r3
 801a12a:	3301      	adds	r3, #1
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	011b      	lsls	r3, r3, #4
 801a130:	b29b      	uxth	r3, r3
 801a132:	b2db      	uxtb	r3, r3
 801a134:	b29a      	uxth	r2, r3
 801a136:	4b18      	ldr	r3, [pc, #96]	; (801a198 <rfalSetBitRate+0x4c0>)
 801a138:	4313      	orrs	r3, r2
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7f7 fbab 	bl	8011898 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801a142:	4b14      	ldr	r3, [pc, #80]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a144:	78db      	ldrb	r3, [r3, #3]
 801a146:	2bea      	cmp	r3, #234	; 0xea
 801a148:	d90a      	bls.n	801a160 <rfalSetBitRate+0x488>
 801a14a:	4b12      	ldr	r3, [pc, #72]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a14c:	78db      	ldrb	r3, [r3, #3]
 801a14e:	b29b      	uxth	r3, r3
 801a150:	011b      	lsls	r3, r3, #4
 801a152:	b29b      	uxth	r3, r3
 801a154:	b2db      	uxtb	r3, r3
 801a156:	b29a      	uxth	r2, r3
 801a158:	4b10      	ldr	r3, [pc, #64]	; (801a19c <rfalSetBitRate+0x4c4>)
 801a15a:	4313      	orrs	r3, r2
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	e00b      	b.n	801a178 <rfalSetBitRate+0x4a0>
 801a160:	4b0c      	ldr	r3, [pc, #48]	; (801a194 <rfalSetBitRate+0x4bc>)
 801a162:	78db      	ldrb	r3, [r3, #3]
 801a164:	b29b      	uxth	r3, r3
 801a166:	3301      	adds	r3, #1
 801a168:	b29b      	uxth	r3, r3
 801a16a:	011b      	lsls	r3, r3, #4
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	b2db      	uxtb	r3, r3
 801a170:	b29a      	uxth	r2, r3
 801a172:	4b0a      	ldr	r3, [pc, #40]	; (801a19c <rfalSetBitRate+0x4c4>)
 801a174:	4313      	orrs	r3, r2
 801a176:	b29b      	uxth	r3, r3
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f7 fb8d 	bl	8011898 <rfalSetAnalogConfig>
            break;
 801a17e:	e003      	b.n	801a188 <rfalSetBitRate+0x4b0>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 801a180:	2321      	movs	r3, #33	; 0x21
 801a182:	e002      	b.n	801a18a <rfalSetBitRate+0x4b2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 801a184:	230f      	movs	r3, #15
 801a186:	e000      	b.n	801a18a <rfalSetBitRate+0x4b2>
    }
    
    return ERR_NONE;
 801a188:	2300      	movs	r3, #0
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3720      	adds	r7, #32
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}
 801a192:	bf00      	nop
 801a194:	20003c40 	.word	0x20003c40
 801a198:	ffff8801 	.word	0xffff8801
 801a19c:	ffff8802 	.word	0xffff8802

0801a1a0 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b083      	sub	sp, #12
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 801a1aa:	4b0f      	ldr	r3, [pc, #60]	; (801a1e8 <rfalGetBitRate+0x48>)
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d003      	beq.n	801a1ba <rfalGetBitRate+0x1a>
 801a1b2:	4b0d      	ldr	r3, [pc, #52]	; (801a1e8 <rfalGetBitRate+0x48>)
 801a1b4:	785b      	ldrb	r3, [r3, #1]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d101      	bne.n	801a1be <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 801a1ba:	2321      	movs	r3, #33	; 0x21
 801a1bc:	e00e      	b.n	801a1dc <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d003      	beq.n	801a1cc <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 801a1c4:	4b08      	ldr	r3, [pc, #32]	; (801a1e8 <rfalGetBitRate+0x48>)
 801a1c6:	789a      	ldrb	r2, [r3, #2]
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 801a1cc:	683b      	ldr	r3, [r7, #0]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d003      	beq.n	801a1da <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 801a1d2:	4b05      	ldr	r3, [pc, #20]	; (801a1e8 <rfalGetBitRate+0x48>)
 801a1d4:	78da      	ldrb	r2, [r3, #3]
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 801a1da:	2300      	movs	r3, #0
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	370c      	adds	r7, #12
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bc80      	pop	{r7}
 801a1e4:	4770      	bx	lr
 801a1e6:	bf00      	nop
 801a1e8:	20003c40 	.word	0x20003c40

0801a1ec <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	b083      	sub	sp, #12
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 801a1f6:	4a04      	ldr	r2, [pc, #16]	; (801a208 <rfalSetErrorHandling+0x1c>)
 801a1f8:	79fb      	ldrb	r3, [r7, #7]
 801a1fa:	71d3      	strb	r3, [r2, #7]
}
 801a1fc:	bf00      	nop
 801a1fe:	370c      	adds	r7, #12
 801a200:	46bd      	mov	sp, r7
 801a202:	bc80      	pop	{r7}
 801a204:	4770      	bx	lr
 801a206:	bf00      	nop
 801a208:	20003c40 	.word	0x20003c40

0801a20c <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 801a20c:	b480      	push	{r7}
 801a20e:	b083      	sub	sp, #12
 801a210:	af00      	add	r7, sp, #0
 801a212:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	4a05      	ldr	r2, [pc, #20]	; (801a22c <rfalSetFDTPoll+0x20>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	bf28      	it	cs
 801a21c:	4613      	movcs	r3, r2
 801a21e:	4a04      	ldr	r2, [pc, #16]	; (801a230 <rfalSetFDTPoll+0x24>)
 801a220:	6113      	str	r3, [r2, #16]
}
 801a222:	bf00      	nop
 801a224:	370c      	adds	r7, #12
 801a226:	46bd      	mov	sp, r7
 801a228:	bc80      	pop	{r7}
 801a22a:	4770      	bx	lr
 801a22c:	0007fff8 	.word	0x0007fff8
 801a230:	20003c40 	.word	0x20003c40

0801a234 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 801a234:	b480      	push	{r7}
 801a236:	b083      	sub	sp, #12
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 801a242:	bf28      	it	cs
 801a244:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 801a248:	4a03      	ldr	r2, [pc, #12]	; (801a258 <rfalSetFDTListen+0x24>)
 801a24a:	60d3      	str	r3, [r2, #12]
}
 801a24c:	bf00      	nop
 801a24e:	370c      	adds	r7, #12
 801a250:	46bd      	mov	sp, r7
 801a252:	bc80      	pop	{r7}
 801a254:	4770      	bx	lr
 801a256:	bf00      	nop
 801a258:	20003c40 	.word	0x20003c40

0801a25c <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 801a25c:	b480      	push	{r7}
 801a25e:	b083      	sub	sp, #12
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	4a05      	ldr	r2, [pc, #20]	; (801a27c <rfalSetGT+0x20>)
 801a268:	4293      	cmp	r3, r2
 801a26a:	bf28      	it	cs
 801a26c:	4613      	movcs	r3, r2
 801a26e:	4a04      	ldr	r2, [pc, #16]	; (801a280 <rfalSetGT+0x24>)
 801a270:	6093      	str	r3, [r2, #8]
}
 801a272:	bf00      	nop
 801a274:	370c      	adds	r7, #12
 801a276:	46bd      	mov	sp, r7
 801a278:	bc80      	pop	{r7}
 801a27a:	4770      	bx	lr
 801a27c:	040a8bc0 	.word	0x040a8bc0
 801a280:	20003c40 	.word	0x20003c40

0801a284 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 801a284:	b580      	push	{r7, lr}
 801a286:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 801a288:	4b09      	ldr	r3, [pc, #36]	; (801a2b0 <rfalIsGTExpired+0x2c>)
 801a28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d00c      	beq.n	801a2aa <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 801a290:	4b07      	ldr	r3, [pc, #28]	; (801a2b0 <rfalIsGTExpired+0x2c>)
 801a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a294:	4618      	mov	r0, r3
 801a296:	f7eb f9a7 	bl	80055e8 <timerIsExpired>
 801a29a:	4603      	mov	r3, r0
 801a29c:	f083 0301 	eor.w	r3, r3, #1
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d001      	beq.n	801a2aa <rfalIsGTExpired+0x26>
        {
            return false;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	e000      	b.n	801a2ac <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 801a2aa:	2301      	movs	r3, #1
}
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	20003c40 	.word	0x20003c40

0801a2b4 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 801a2ba:	2280      	movs	r2, #128	; 0x80
 801a2bc:	2180      	movs	r1, #128	; 0x80
 801a2be:	2002      	movs	r0, #2
 801a2c0:	f7ea fa3e 	bl	8004740 <st25r3911CheckReg>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	f083 0301 	eor.w	r3, r3, #1
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d103      	bne.n	801a2d8 <rfalFieldOnAndStartGT+0x24>
 801a2d0:	4b27      	ldr	r3, [pc, #156]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a2d2:	781b      	ldrb	r3, [r3, #0]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d101      	bne.n	801a2dc <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 801a2d8:	2321      	movs	r3, #33	; 0x21
 801a2da:	e044      	b.n	801a366 <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 801a2dc:	2300      	movs	r3, #0
 801a2de:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 801a2e0:	2002      	movs	r0, #2
 801a2e2:	f7f7 fad9 	bl	8011898 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 801a2e6:	2208      	movs	r2, #8
 801a2e8:	2108      	movs	r1, #8
 801a2ea:	2002      	movs	r0, #2
 801a2ec:	f7ea fa28 	bl	8004740 <st25r3911CheckReg>
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	f083 0301 	eor.w	r3, r3, #1
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d106      	bne.n	801a30a <rfalFieldOnAndStartGT+0x56>
 801a2fc:	4b1c      	ldr	r3, [pc, #112]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a2fe:	791b      	ldrb	r3, [r3, #4]
 801a300:	f083 0301 	eor.w	r3, r3, #1
 801a304:	b2db      	uxtb	r3, r3
 801a306:	2b00      	cmp	r3, #0
 801a308:	d016      	beq.n	801a338 <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 801a30a:	2300      	movs	r3, #0
 801a30c:	22ff      	movs	r2, #255	; 0xff
 801a30e:	21ff      	movs	r1, #255	; 0xff
 801a310:	20ca      	movs	r0, #202	; 0xca
 801a312:	f7ea fa95 	bl	8004840 <st25r3911PerformCollisionAvoidance>
 801a316:	4603      	mov	r3, r0
 801a318:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 801a31a:	2208      	movs	r2, #8
 801a31c:	2108      	movs	r1, #8
 801a31e:	2002      	movs	r0, #2
 801a320:	f7ea fa0e 	bl	8004740 <st25r3911CheckReg>
 801a324:	4603      	mov	r3, r0
 801a326:	461a      	mov	r2, r3
 801a328:	4b11      	ldr	r3, [pc, #68]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a32a:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 801a32c:	4b10      	ldr	r3, [pc, #64]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a32e:	791b      	ldrb	r3, [r3, #4]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d001      	beq.n	801a338 <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 801a334:	f7ea f833 	bl	800439e <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 801a338:	4b0d      	ldr	r3, [pc, #52]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a33a:	689b      	ldr	r3, [r3, #8]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d011      	beq.n	801a364 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 801a340:	4b0b      	ldr	r3, [pc, #44]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a342:	689b      	ldr	r3, [r3, #8]
 801a344:	f243 42f8 	movw	r2, #13560	; 0x34f8
 801a348:	4293      	cmp	r3, r2
 801a34a:	bf38      	it	cc
 801a34c:	4613      	movcc	r3, r2
 801a34e:	4a09      	ldr	r2, [pc, #36]	; (801a374 <rfalFieldOnAndStartGT+0xc0>)
 801a350:	fba2 2303 	umull	r2, r3, r2, r3
 801a354:	0b1b      	lsrs	r3, r3, #12
 801a356:	b29b      	uxth	r3, r3
 801a358:	4618      	mov	r0, r3
 801a35a:	f7eb f937 	bl	80055cc <timerCalculateTimer>
 801a35e:	4603      	mov	r3, r0
 801a360:	4a03      	ldr	r2, [pc, #12]	; (801a370 <rfalFieldOnAndStartGT+0xbc>)
 801a362:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 801a364:	88fb      	ldrh	r3, [r7, #6]
}
 801a366:	4618      	mov	r0, r3
 801a368:	3708      	adds	r7, #8
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop
 801a370:	20003c40 	.word	0x20003c40
 801a374:	4d542005 	.word	0x4d542005

0801a378 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 801a37c:	4b08      	ldr	r3, [pc, #32]	; (801a3a0 <rfalFieldOff+0x28>)
 801a37e:	7d1b      	ldrb	r3, [r3, #20]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d001      	beq.n	801a388 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 801a384:	f000 faca 	bl	801a91c <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 801a388:	f7ea f811 	bl	80043ae <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 801a38c:	2003      	movs	r0, #3
 801a38e:	f7f7 fa83 	bl	8011898 <rfalSetAnalogConfig>
    gRFAL.field = false;
 801a392:	4b03      	ldr	r3, [pc, #12]	; (801a3a0 <rfalFieldOff+0x28>)
 801a394:	2200      	movs	r2, #0
 801a396:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 801a398:	2300      	movs	r3, #0
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	bd80      	pop	{r7, pc}
 801a39e:	bf00      	nop
 801a3a0:	20003c40 	.word	0x20003c40

0801a3a4 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 801a3a4:	b5b0      	push	{r4, r5, r7, lr}
 801a3a6:	b084      	sub	sp, #16
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d101      	bne.n	801a3b6 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 801a3b2:	2307      	movs	r3, #7
 801a3b4:	e11c      	b.n	801a5f0 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 801a3b6:	4b90      	ldr	r3, [pc, #576]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a3b8:	781b      	ldrb	r3, [r3, #0]
 801a3ba:	2b01      	cmp	r3, #1
 801a3bc:	f240 8117 	bls.w	801a5ee <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 801a3c0:	2208      	movs	r2, #8
 801a3c2:	2108      	movs	r1, #8
 801a3c4:	2002      	movs	r0, #2
 801a3c6:	f7ea f9bb 	bl	8004740 <st25r3911CheckReg>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	f083 0301 	eor.w	r3, r3, #1
 801a3d0:	b2db      	uxtb	r3, r3
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d011      	beq.n	801a3fa <rfalStartTransceive+0x56>
 801a3d6:	4b88      	ldr	r3, [pc, #544]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a3d8:	785b      	ldrb	r3, [r3, #1]
 801a3da:	2b0a      	cmp	r3, #10
 801a3dc:	d00d      	beq.n	801a3fa <rfalStartTransceive+0x56>
 801a3de:	4b86      	ldr	r3, [pc, #536]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a3e0:	785b      	ldrb	r3, [r3, #1]
 801a3e2:	2b0b      	cmp	r3, #11
 801a3e4:	d009      	beq.n	801a3fa <rfalStartTransceive+0x56>
 801a3e6:	4b84      	ldr	r3, [pc, #528]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a3e8:	785b      	ldrb	r3, [r3, #1]
 801a3ea:	2b0c      	cmp	r3, #12
 801a3ec:	d005      	beq.n	801a3fa <rfalStartTransceive+0x56>
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d001      	beq.n	801a3fa <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 801a3f6:	2321      	movs	r3, #33	; 0x21
 801a3f8:	e0fa      	b.n	801a5f0 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 801a3fa:	4b7f      	ldr	r3, [pc, #508]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a3fc:	687a      	ldr	r2, [r7, #4]
 801a3fe:	f103 041c 	add.w	r4, r3, #28
 801a402:	4615      	mov	r5, r2
 801a404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a40c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 801a410:	4b79      	ldr	r3, [pc, #484]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a412:	68db      	ldr	r3, [r3, #12]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d031      	beq.n	801a47c <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 801a418:	2340      	movs	r3, #64	; 0x40
 801a41a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 801a41c:	4b76      	ldr	r3, [pc, #472]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a41e:	785b      	ldrb	r3, [r3, #1]
 801a420:	2b01      	cmp	r3, #1
 801a422:	d103      	bne.n	801a42c <rfalStartTransceive+0x88>
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801a42a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 801a42c:	4b72      	ldr	r3, [pc, #456]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a42e:	785b      	ldrb	r3, [r3, #1]
 801a430:	2b02      	cmp	r3, #2
 801a432:	d103      	bne.n	801a43c <rfalStartTransceive+0x98>
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801a43a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 801a43c:	4b6e      	ldr	r3, [pc, #440]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a43e:	785b      	ldrb	r3, [r3, #1]
 801a440:	2b03      	cmp	r3, #3
 801a442:	d103      	bne.n	801a44c <rfalStartTransceive+0xa8>
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801a44a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 801a44c:	4b6a      	ldr	r3, [pc, #424]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a44e:	785b      	ldrb	r3, [r3, #1]
 801a450:	2b07      	cmp	r3, #7
 801a452:	d102      	bne.n	801a45a <rfalStartTransceive+0xb6>
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	3380      	adds	r3, #128	; 0x80
 801a458:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 801a45a:	4b67      	ldr	r3, [pc, #412]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a45c:	68db      	ldr	r3, [r3, #12]
 801a45e:	68fa      	ldr	r2, [r7, #12]
 801a460:	429a      	cmp	r2, r3
 801a462:	d806      	bhi.n	801a472 <rfalStartTransceive+0xce>
 801a464:	4b64      	ldr	r3, [pc, #400]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a466:	68da      	ldr	r2, [r3, #12]
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	099b      	lsrs	r3, r3, #6
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	e000      	b.n	801a474 <rfalStartTransceive+0xd0>
 801a472:	2304      	movs	r3, #4
 801a474:	4619      	mov	r1, r3
 801a476:	200e      	movs	r0, #14
 801a478:	f7ea fc9c 	bl	8004db4 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 801a47c:	4b5e      	ldr	r3, [pc, #376]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a47e:	785b      	ldrb	r3, [r3, #1]
 801a480:	2b09      	cmp	r3, #9
 801a482:	d053      	beq.n	801a52c <rfalStartTransceive+0x188>
 801a484:	4b5c      	ldr	r3, [pc, #368]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a486:	785b      	ldrb	r3, [r3, #1]
 801a488:	2b0d      	cmp	r3, #13
 801a48a:	d04f      	beq.n	801a52c <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 801a48c:	4b5a      	ldr	r3, [pc, #360]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a494:	d046      	beq.n	801a524 <rfalStartTransceive+0x180>
 801a496:	4b58      	ldr	r3, [pc, #352]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d042      	beq.n	801a524 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 801a49e:	4b56      	ldr	r3, [pc, #344]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4a0:	68da      	ldr	r2, [r3, #12]
 801a4a2:	4b55      	ldr	r3, [pc, #340]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	d301      	bcc.n	801a4ae <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 801a4aa:	2307      	movs	r3, #7
 801a4ac:	e0a0      	b.n	801a5f0 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 801a4ae:	2340      	movs	r3, #64	; 0x40
 801a4b0:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 801a4b2:	4b51      	ldr	r3, [pc, #324]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4b4:	785b      	ldrb	r3, [r3, #1]
 801a4b6:	2b01      	cmp	r3, #1
 801a4b8:	d103      	bne.n	801a4c2 <rfalStartTransceive+0x11e>
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a4c0:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 801a4c2:	4b4d      	ldr	r3, [pc, #308]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4c4:	785b      	ldrb	r3, [r3, #1]
 801a4c6:	2b02      	cmp	r3, #2
 801a4c8:	d103      	bne.n	801a4d2 <rfalStartTransceive+0x12e>
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a4d0:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 801a4d2:	4b49      	ldr	r3, [pc, #292]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4d4:	785b      	ldrb	r3, [r3, #1]
 801a4d6:	2b03      	cmp	r3, #3
 801a4d8:	d103      	bne.n	801a4e2 <rfalStartTransceive+0x13e>
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 801a4e0:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 801a4e2:	4b45      	ldr	r3, [pc, #276]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4e4:	785b      	ldrb	r3, [r3, #1]
 801a4e6:	2b06      	cmp	r3, #6
 801a4e8:	d10b      	bne.n	801a502 <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 801a4ea:	4b43      	ldr	r3, [pc, #268]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a4ec:	789b      	ldrb	r3, [r3, #2]
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	d102      	bne.n	801a4f8 <rfalStartTransceive+0x154>
 801a4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4f6:	e001      	b.n	801a4fc <rfalStartTransceive+0x158>
 801a4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a4fc:	68fa      	ldr	r2, [r7, #12]
 801a4fe:	4413      	add	r3, r2
 801a500:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 801a502:	4b3d      	ldr	r3, [pc, #244]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	4413      	add	r3, r2
 801a50a:	4a3c      	ldr	r2, [pc, #240]	; (801a5fc <rfalStartTransceive+0x258>)
 801a50c:	4293      	cmp	r3, r2
 801a50e:	bf28      	it	cs
 801a510:	4613      	movcs	r3, r2
 801a512:	4a39      	ldr	r2, [pc, #228]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a514:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 801a516:	4b38      	ldr	r3, [pc, #224]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a51a:	099b      	lsrs	r3, r3, #6
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7ea f951 	bl	80047c4 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 801a522:	e006      	b.n	801a532 <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 801a524:	2000      	movs	r0, #0
 801a526:	f7ea f94d 	bl	80047c4 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 801a52a:	e002      	b.n	801a532 <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 801a52c:	2080      	movs	r0, #128	; 0x80
 801a52e:	f7ea f949 	bl	80047c4 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 801a532:	4b31      	ldr	r3, [pc, #196]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a534:	2203      	movs	r2, #3
 801a536:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 801a538:	4b2f      	ldr	r3, [pc, #188]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a53a:	220b      	movs	r2, #11
 801a53c:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 801a53e:	4b2e      	ldr	r3, [pc, #184]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a540:	2202      	movs	r2, #2
 801a542:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 801a544:	4b2c      	ldr	r3, [pc, #176]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a546:	2200      	movs	r2, #0
 801a548:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801a54a:	4b2b      	ldr	r3, [pc, #172]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a54c:	785b      	ldrb	r3, [r3, #1]
 801a54e:	2b07      	cmp	r3, #7
 801a550:	d003      	beq.n	801a55a <rfalStartTransceive+0x1b6>
 801a552:	4b29      	ldr	r3, [pc, #164]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a554:	785b      	ldrb	r3, [r3, #1]
 801a556:	2b08      	cmp	r3, #8
 801a558:	d128      	bne.n	801a5ac <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 801a55a:	4a27      	ldr	r2, [pc, #156]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a55c:	4b26      	ldr	r3, [pc, #152]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a55e:	f502 7473 	add.w	r4, r2, #972	; 0x3cc
 801a562:	f103 051c 	add.w	r5, r3, #28
 801a566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a56a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a56e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 801a572:	4b21      	ldr	r3, [pc, #132]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a574:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d001      	beq.n	801a580 <rfalStartTransceive+0x1dc>
 801a57c:	4b20      	ldr	r3, [pc, #128]	; (801a600 <rfalStartTransceive+0x25c>)
 801a57e:	e000      	b.n	801a582 <rfalStartTransceive+0x1de>
 801a580:	2300      	movs	r3, #0
 801a582:	4a1d      	ldr	r2, [pc, #116]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a584:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 801a586:	4b1c      	ldr	r3, [pc, #112]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a588:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 801a58c:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 801a58e:	4b1a      	ldr	r3, [pc, #104]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a590:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801a594:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 801a598:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 801a59c:	4a16      	ldr	r2, [pc, #88]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a59e:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 801a5a0:	4b15      	ldr	r3, [pc, #84]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5a2:	69db      	ldr	r3, [r3, #28]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d001      	beq.n	801a5ac <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	e021      	b.n	801a5f0 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 801a5ac:	4b12      	ldr	r3, [pc, #72]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5ae:	69db      	ldr	r3, [r3, #28]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d003      	beq.n	801a5bc <rfalStartTransceive+0x218>
 801a5b4:	4b10      	ldr	r3, [pc, #64]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5b6:	8c1b      	ldrh	r3, [r3, #32]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d116      	bne.n	801a5ea <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 801a5bc:	f000 f9c4 	bl	801a948 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 801a5c0:	4b0d      	ldr	r3, [pc, #52]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5c2:	785b      	ldrb	r3, [r3, #1]
 801a5c4:	2b09      	cmp	r3, #9
 801a5c6:	d003      	beq.n	801a5d0 <rfalStartTransceive+0x22c>
 801a5c8:	4b0b      	ldr	r3, [pc, #44]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5ca:	785b      	ldrb	r3, [r3, #1]
 801a5cc:	2b0d      	cmp	r3, #13
 801a5ce:	d103      	bne.n	801a5d8 <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 801a5d0:	2108      	movs	r1, #8
 801a5d2:	2002      	movs	r0, #2
 801a5d4:	f7ea fc3a 	bl	8004e4c <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801a5d8:	20d1      	movs	r0, #209	; 0xd1
 801a5da:	f7ea fd79 	bl	80050d0 <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 801a5de:	20e3      	movs	r0, #227	; 0xe3
 801a5e0:	f7ea fd76 	bl	80050d0 <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 801a5e4:	4b04      	ldr	r3, [pc, #16]	; (801a5f8 <rfalStartTransceive+0x254>)
 801a5e6:	2251      	movs	r2, #81	; 0x51
 801a5e8:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	e000      	b.n	801a5f0 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 801a5ee:	2321      	movs	r3, #33	; 0x21
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3710      	adds	r7, #16
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bdb0      	pop	{r4, r5, r7, pc}
 801a5f8:	20003c40 	.word	0x20003c40
 801a5fc:	0ffff000 	.word	0x0ffff000
 801a600:	20003e00 	.word	0x20003e00

0801a604 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 801a604:	b480      	push	{r7}
 801a606:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 801a608:	4b08      	ldr	r3, [pc, #32]	; (801a62c <rfalIsTransceiveInTx+0x28>)
 801a60a:	7d1b      	ldrb	r3, [r3, #20]
 801a60c:	2b0a      	cmp	r3, #10
 801a60e:	d905      	bls.n	801a61c <rfalIsTransceiveInTx+0x18>
 801a610:	4b06      	ldr	r3, [pc, #24]	; (801a62c <rfalIsTransceiveInTx+0x28>)
 801a612:	7d1b      	ldrb	r3, [r3, #20]
 801a614:	2b50      	cmp	r3, #80	; 0x50
 801a616:	d801      	bhi.n	801a61c <rfalIsTransceiveInTx+0x18>
 801a618:	2301      	movs	r3, #1
 801a61a:	e000      	b.n	801a61e <rfalIsTransceiveInTx+0x1a>
 801a61c:	2300      	movs	r3, #0
 801a61e:	f003 0301 	and.w	r3, r3, #1
 801a622:	b2db      	uxtb	r3, r3
}
 801a624:	4618      	mov	r0, r3
 801a626:	46bd      	mov	sp, r7
 801a628:	bc80      	pop	{r7}
 801a62a:	4770      	bx	lr
 801a62c:	20003c40 	.word	0x20003c40

0801a630 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 801a630:	b480      	push	{r7}
 801a632:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 801a634:	4b05      	ldr	r3, [pc, #20]	; (801a64c <rfalIsTransceiveInRx+0x1c>)
 801a636:	7d1b      	ldrb	r3, [r3, #20]
 801a638:	2b50      	cmp	r3, #80	; 0x50
 801a63a:	bf8c      	ite	hi
 801a63c:	2301      	movhi	r3, #1
 801a63e:	2300      	movls	r3, #0
 801a640:	b2db      	uxtb	r3, r3
}
 801a642:	4618      	mov	r0, r3
 801a644:	46bd      	mov	sp, r7
 801a646:	bc80      	pop	{r7}
 801a648:	4770      	bx	lr
 801a64a:	bf00      	nop
 801a64c:	20003c40 	.word	0x20003c40

0801a650 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b08c      	sub	sp, #48	; 0x30
 801a654:	af00      	add	r7, sp, #0
 801a656:	60f8      	str	r0, [r7, #12]
 801a658:	607a      	str	r2, [r7, #4]
 801a65a:	461a      	mov	r2, r3
 801a65c:	460b      	mov	r3, r1
 801a65e:	817b      	strh	r3, [r7, #10]
 801a660:	4613      	mov	r3, r2
 801a662:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	613b      	str	r3, [r7, #16]
 801a668:	897b      	ldrh	r3, [r7, #10]
 801a66a:	00db      	lsls	r3, r3, #3
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	82bb      	strh	r3, [r7, #20]
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	61bb      	str	r3, [r7, #24]
 801a674:	893b      	ldrh	r3, [r7, #8]
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	b29b      	uxth	r3, r3
 801a67a:	83bb      	strh	r3, [r7, #28]
 801a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a67e:	623b      	str	r3, [r7, #32]
 801a680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a682:	627b      	str	r3, [r7, #36]	; 0x24
 801a684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a686:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 801a688:	f107 0310 	add.w	r3, r7, #16
 801a68c:	4618      	mov	r0, r3
 801a68e:	f7ff fe89 	bl	801a3a4 <rfalStartTransceive>
 801a692:	4603      	mov	r3, r0
 801a694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d001      	beq.n	801a6a0 <rfalTransceiveBlockingTx+0x50>
 801a69c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a69e:	e002      	b.n	801a6a6 <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 801a6a0:	f000 f805 	bl	801a6ae <rfalTransceiveRunBlockingTx>
 801a6a4:	4603      	mov	r3, r0
}
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	3730      	adds	r7, #48	; 0x30
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}

0801a6ae <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 801a6ae:	b580      	push	{r7, lr}
 801a6b0:	b082      	sub	sp, #8
 801a6b2:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 801a6b4:	f000 f892 	bl	801a7dc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 801a6b8:	f000 f880 	bl	801a7bc <rfalGetTransceiveStatus>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 801a6c0:	f7ff ffa0 	bl	801a604 <rfalIsTransceiveInTx>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d002      	beq.n	801a6d0 <rfalTransceiveRunBlockingTx+0x22>
 801a6ca:	88fb      	ldrh	r3, [r7, #6]
 801a6cc:	2b02      	cmp	r3, #2
 801a6ce:	d0f1      	beq.n	801a6b4 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 801a6d0:	f7ff ffae 	bl	801a630 <rfalIsTransceiveInRx>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d001      	beq.n	801a6de <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 801a6da:	2300      	movs	r3, #0
 801a6dc:	e000      	b.n	801a6e0 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 801a6de:	88fb      	ldrh	r3, [r7, #6]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3708      	adds	r7, #8
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}

0801a6e8 <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 801a6ee:	f000 f875 	bl	801a7dc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 801a6f2:	f000 f863 	bl	801a7bc <rfalGetTransceiveStatus>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 801a6fa:	f7ff ff99 	bl	801a630 <rfalIsTransceiveInRx>
 801a6fe:	4603      	mov	r3, r0
 801a700:	2b00      	cmp	r3, #0
 801a702:	d002      	beq.n	801a70a <rfalTransceiveBlockingRx+0x22>
 801a704:	88fb      	ldrh	r3, [r7, #6]
 801a706:	2b02      	cmp	r3, #2
 801a708:	d0f1      	beq.n	801a6ee <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 801a70a:	88fb      	ldrh	r3, [r7, #6]
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3708      	adds	r7, #8
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}

0801a714 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b08a      	sub	sp, #40	; 0x28
 801a718:	af04      	add	r7, sp, #16
 801a71a:	60f8      	str	r0, [r7, #12]
 801a71c:	607a      	str	r2, [r7, #4]
 801a71e:	461a      	mov	r2, r3
 801a720:	460b      	mov	r3, r1
 801a722:	817b      	strh	r3, [r7, #10]
 801a724:	4613      	mov	r3, r2
 801a726:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 801a728:	893a      	ldrh	r2, [r7, #8]
 801a72a:	8979      	ldrh	r1, [r7, #10]
 801a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a72e:	9302      	str	r3, [sp, #8]
 801a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a732:	9301      	str	r3, [sp, #4]
 801a734:	6a3b      	ldr	r3, [r7, #32]
 801a736:	9300      	str	r3, [sp, #0]
 801a738:	4613      	mov	r3, r2
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	68f8      	ldr	r0, [r7, #12]
 801a73e:	f7ff ff87 	bl	801a650 <rfalTransceiveBlockingTx>
 801a742:	4603      	mov	r3, r0
 801a744:	82fb      	strh	r3, [r7, #22]
 801a746:	8afb      	ldrh	r3, [r7, #22]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d001      	beq.n	801a750 <rfalTransceiveBlockingTxRx+0x3c>
 801a74c:	8afb      	ldrh	r3, [r7, #22]
 801a74e:	e00e      	b.n	801a76e <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 801a750:	f7ff ffca 	bl	801a6e8 <rfalTransceiveBlockingRx>
 801a754:	4603      	mov	r3, r0
 801a756:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 801a758:	6a3b      	ldr	r3, [r7, #32]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d006      	beq.n	801a76c <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 801a75e:	6a3b      	ldr	r3, [r7, #32]
 801a760:	881b      	ldrh	r3, [r3, #0]
 801a762:	3307      	adds	r3, #7
 801a764:	08db      	lsrs	r3, r3, #3
 801a766:	b29a      	uxth	r2, r3
 801a768:	6a3b      	ldr	r3, [r7, #32]
 801a76a:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 801a76c:	8afb      	ldrh	r3, [r7, #22]
}
 801a76e:	4618      	mov	r0, r3
 801a770:	3718      	adds	r7, #24
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
	...

0801a778 <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 801a77c:	4b0e      	ldr	r3, [pc, #56]	; (801a7b8 <rfalRunTransceiveWorker+0x40>)
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	2b03      	cmp	r3, #3
 801a782:	d115      	bne.n	801a7b0 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 801a784:	f7ff ff3e 	bl	801a604 <rfalIsTransceiveInTx>
 801a788:	4603      	mov	r3, r0
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d005      	beq.n	801a79a <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 801a78e:	f000 f971 	bl	801aa74 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 801a792:	f000 f813 	bl	801a7bc <rfalGetTransceiveStatus>
 801a796:	4603      	mov	r3, r0
 801a798:	e00b      	b.n	801a7b2 <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 801a79a:	f7ff ff49 	bl	801a630 <rfalIsTransceiveInRx>
 801a79e:	4603      	mov	r3, r0
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d005      	beq.n	801a7b0 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 801a7a4:	f000 fbb2 	bl	801af0c <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 801a7a8:	f000 f808 	bl	801a7bc <rfalGetTransceiveStatus>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	e000      	b.n	801a7b2 <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 801a7b0:	2321      	movs	r3, #33	; 0x21
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	bd80      	pop	{r7, pc}
 801a7b6:	bf00      	nop
 801a7b8:	20003c40 	.word	0x20003c40

0801a7bc <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 801a7bc:	b480      	push	{r7}
 801a7be:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 801a7c0:	4b05      	ldr	r3, [pc, #20]	; (801a7d8 <rfalGetTransceiveStatus+0x1c>)
 801a7c2:	7d1b      	ldrb	r3, [r3, #20]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d102      	bne.n	801a7ce <rfalGetTransceiveStatus+0x12>
 801a7c8:	4b03      	ldr	r3, [pc, #12]	; (801a7d8 <rfalGetTransceiveStatus+0x1c>)
 801a7ca:	8adb      	ldrh	r3, [r3, #22]
 801a7cc:	e000      	b.n	801a7d0 <rfalGetTransceiveStatus+0x14>
 801a7ce:	2302      	movs	r3, #2
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bc80      	pop	{r7}
 801a7d6:	4770      	bx	lr
 801a7d8:	20003c40 	.word	0x20003c40

0801a7dc <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 801a7e0:	4b0b      	ldr	r3, [pc, #44]	; (801a810 <rfalWorker+0x34>)
 801a7e2:	781b      	ldrb	r3, [r3, #0]
 801a7e4:	2b05      	cmp	r3, #5
 801a7e6:	d00c      	beq.n	801a802 <rfalWorker+0x26>
 801a7e8:	2b05      	cmp	r3, #5
 801a7ea:	dc0d      	bgt.n	801a808 <rfalWorker+0x2c>
 801a7ec:	2b03      	cmp	r3, #3
 801a7ee:	d002      	beq.n	801a7f6 <rfalWorker+0x1a>
 801a7f0:	2b04      	cmp	r3, #4
 801a7f2:	d003      	beq.n	801a7fc <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 801a7f4:	e008      	b.n	801a808 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 801a7f6:	f7ff ffbf 	bl	801a778 <rfalRunTransceiveWorker>
            break;
 801a7fa:	e006      	b.n	801a80a <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 801a7fc:	f001 fb0e 	bl	801be1c <rfalRunListenModeWorker>
            break;
 801a800:	e003      	b.n	801a80a <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 801a802:	f001 ff0f 	bl	801c624 <rfalRunWakeUpModeWorker>
            break;
 801a806:	e000      	b.n	801a80a <rfalWorker+0x2e>
            break;
 801a808:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 801a80a:	bf00      	nop
 801a80c:	bd80      	pop	{r7, pc}
 801a80e:	bf00      	nop
 801a810:	20003c40 	.word	0x20003c40

0801a814 <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 801a81a:	f24d 13c2 	movw	r3, #53698	; 0xd1c2
 801a81e:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 801a820:	f000 fedc 	bl	801b5dc <rfalFIFOStatusGetNumBytes>
 801a824:	4603      	mov	r3, r0
 801a826:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 801a828:	4b3b      	ldr	r3, [pc, #236]	; (801a918 <rfalErrorHandling+0x104>)
 801a82a:	79db      	ldrb	r3, [r3, #7]
 801a82c:	2b02      	cmp	r3, #2
 801a82e:	d141      	bne.n	801a8b4 <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 801a830:	f000 fee0 	bl	801b5f4 <rfalFIFOStatusIsIncompleteByte>
 801a834:	4603      	mov	r3, r0
 801a836:	2b00      	cmp	r3, #0
 801a838:	d104      	bne.n	801a844 <rfalErrorHandling+0x30>
 801a83a:	f000 feed 	bl	801b618 <rfalFIFOStatusIsMissingPar>
 801a83e:	4603      	mov	r3, r0
 801a840:	2b00      	cmp	r3, #0
 801a842:	d001      	beq.n	801a848 <rfalErrorHandling+0x34>
 801a844:	2301      	movs	r3, #1
 801a846:	e000      	b.n	801a84a <rfalErrorHandling+0x36>
 801a848:	2300      	movs	r3, #0
 801a84a:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 801a84c:	79fb      	ldrb	r3, [r7, #7]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d005      	beq.n	801a85e <rfalErrorHandling+0x4a>
 801a852:	79bb      	ldrb	r3, [r7, #6]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d002      	beq.n	801a85e <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 801a858:	79fb      	ldrb	r3, [r7, #7]
 801a85a:	3b01      	subs	r3, #1
 801a85c:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 801a85e:	4b2e      	ldr	r3, [pc, #184]	; (801a918 <rfalErrorHandling+0x104>)
 801a860:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801a862:	461a      	mov	r2, r3
 801a864:	79fb      	ldrb	r3, [r7, #7]
 801a866:	4413      	add	r3, r2
 801a868:	2b03      	cmp	r3, #3
 801a86a:	dc51      	bgt.n	801a910 <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801a86c:	4b2a      	ldr	r3, [pc, #168]	; (801a918 <rfalErrorHandling+0x104>)
 801a86e:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 801a870:	2b1d      	cmp	r3, #29
 801a872:	d00e      	beq.n	801a892 <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801a874:	4b28      	ldr	r3, [pc, #160]	; (801a918 <rfalErrorHandling+0x104>)
 801a876:	8adb      	ldrh	r3, [r3, #22]
 801a878:	2b09      	cmp	r3, #9
 801a87a:	d00a      	beq.n	801a892 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 801a87c:	4b26      	ldr	r3, [pc, #152]	; (801a918 <rfalErrorHandling+0x104>)
 801a87e:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 801a880:	2b1b      	cmp	r3, #27
 801a882:	d006      	beq.n	801a892 <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 801a884:	4b24      	ldr	r3, [pc, #144]	; (801a918 <rfalErrorHandling+0x104>)
 801a886:	8adb      	ldrh	r3, [r3, #22]
 801a888:	2b15      	cmp	r3, #21
 801a88a:	d002      	beq.n	801a892 <rfalErrorHandling+0x7e>
 801a88c:	79bb      	ldrb	r3, [r7, #6]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d03e      	beq.n	801a910 <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 801a892:	1d3b      	adds	r3, r7, #4
 801a894:	2102      	movs	r1, #2
 801a896:	4618      	mov	r0, r3
 801a898:	f7ea fc6c 	bl	8005174 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 801a89c:	f000 fe92 	bl	801b5c4 <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 801a8a0:	4b1d      	ldr	r3, [pc, #116]	; (801a918 <rfalErrorHandling+0x104>)
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 801a8a6:	4b1c      	ldr	r3, [pc, #112]	; (801a918 <rfalErrorHandling+0x104>)
 801a8a8:	2202      	movs	r2, #2
 801a8aa:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 801a8ac:	4b1a      	ldr	r3, [pc, #104]	; (801a918 <rfalErrorHandling+0x104>)
 801a8ae:	2253      	movs	r2, #83	; 0x53
 801a8b0:	751a      	strb	r2, [r3, #20]
 801a8b2:	e02e      	b.n	801a912 <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 801a8b4:	4b18      	ldr	r3, [pc, #96]	; (801a918 <rfalErrorHandling+0x104>)
 801a8b6:	785b      	ldrb	r3, [r3, #1]
 801a8b8:	2b01      	cmp	r3, #1
 801a8ba:	d12a      	bne.n	801a912 <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 801a8bc:	4b16      	ldr	r3, [pc, #88]	; (801a918 <rfalErrorHandling+0x104>)
 801a8be:	8adb      	ldrh	r3, [r3, #22]
 801a8c0:	2b1b      	cmp	r3, #27
 801a8c2:	d003      	beq.n	801a8cc <rfalErrorHandling+0xb8>
 801a8c4:	4b14      	ldr	r3, [pc, #80]	; (801a918 <rfalErrorHandling+0x104>)
 801a8c6:	8adb      	ldrh	r3, [r3, #22]
 801a8c8:	2b15      	cmp	r3, #21
 801a8ca:	d122      	bne.n	801a912 <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 801a8cc:	f000 fe92 	bl	801b5f4 <rfalFIFOStatusIsIncompleteByte>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d01d      	beq.n	801a912 <rfalErrorHandling+0xfe>
 801a8d6:	79fb      	ldrb	r3, [r7, #7]
 801a8d8:	2b01      	cmp	r3, #1
 801a8da:	d11a      	bne.n	801a912 <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 801a8dc:	4b0e      	ldr	r3, [pc, #56]	; (801a918 <rfalErrorHandling+0x104>)
 801a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8e0:	79fa      	ldrb	r2, [r7, #7]
 801a8e2:	4611      	mov	r1, r2
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7ea fba7 	bl	8005038 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 801a8ea:	4b0b      	ldr	r3, [pc, #44]	; (801a918 <rfalErrorHandling+0x104>)
 801a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d007      	beq.n	801a902 <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 801a8f2:	f000 fea3 	bl	801b63c <rfalFIFOGetNumIncompleteBits>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	4b07      	ldr	r3, [pc, #28]	; (801a918 <rfalErrorHandling+0x104>)
 801a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8fe:	b292      	uxth	r2, r2
 801a900:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 801a902:	4b05      	ldr	r3, [pc, #20]	; (801a918 <rfalErrorHandling+0x104>)
 801a904:	2228      	movs	r2, #40	; 0x28
 801a906:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801a908:	4b03      	ldr	r3, [pc, #12]	; (801a918 <rfalErrorHandling+0x104>)
 801a90a:	225a      	movs	r2, #90	; 0x5a
 801a90c:	751a      	strb	r2, [r3, #20]
 801a90e:	e000      	b.n	801a912 <rfalErrorHandling+0xfe>
        return;
 801a910:	bf00      	nop
            }
        }
    }
    
}
 801a912:	3708      	adds	r7, #8
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	20003c40 	.word	0x20003c40

0801a91c <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 801a920:	21e0      	movs	r1, #224	; 0xe0
 801a922:	2005      	movs	r0, #5
 801a924:	f7ea fa92 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 801a928:	2110      	movs	r1, #16
 801a92a:	200b      	movs	r0, #11
 801a92c:	f7ea fab1 	bl	8004e92 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 801a930:	4b04      	ldr	r3, [pc, #16]	; (801a944 <rfalCleanupTransceive+0x28>)
 801a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a934:	2b00      	cmp	r3, #0
 801a936:	d002      	beq.n	801a93e <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 801a938:	4b02      	ldr	r3, [pc, #8]	; (801a944 <rfalCleanupTransceive+0x28>)
 801a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a93c:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 801a93e:	bf00      	nop
 801a940:	bd80      	pop	{r7, pc}
 801a942:	bf00      	nop
 801a944:	20003c40 	.word	0x20003c40

0801a948 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 801a94e:	2102      	movs	r1, #2
 801a950:	2011      	movs	r0, #17
 801a952:	f7ea fa7b 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801a956:	20c2      	movs	r0, #194	; 0xc2
 801a958:	f7ea fbba 	bl	80050d0 <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801a95c:	20d5      	movs	r0, #213	; 0xd5
 801a95e:	f7ea fbb7 	bl	80050d0 <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 801a962:	4b42      	ldr	r3, [pc, #264]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a964:	785b      	ldrb	r3, [r3, #1]
 801a966:	2b09      	cmp	r3, #9
 801a968:	d01c      	beq.n	801a9a4 <rfalPrepareTransceive+0x5c>
 801a96a:	4b40      	ldr	r3, [pc, #256]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a96c:	785b      	ldrb	r3, [r3, #1]
 801a96e:	2b0d      	cmp	r3, #13
 801a970:	d018      	beq.n	801a9a4 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 801a972:	4b3e      	ldr	r3, [pc, #248]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a974:	691b      	ldr	r3, [r3, #16]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d014      	beq.n	801a9a4 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 801a97a:	4b3c      	ldr	r3, [pc, #240]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a97c:	691b      	ldr	r3, [r3, #16]
 801a97e:	f240 423b 	movw	r2, #1083	; 0x43b
 801a982:	4293      	cmp	r3, r2
 801a984:	d804      	bhi.n	801a990 <rfalPrepareTransceive+0x48>
 801a986:	4b39      	ldr	r3, [pc, #228]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a988:	691b      	ldr	r3, [r3, #16]
 801a98a:	08db      	lsrs	r3, r3, #3
 801a98c:	b29b      	uxth	r3, r3
 801a98e:	e005      	b.n	801a99c <rfalPrepareTransceive+0x54>
 801a990:	4b36      	ldr	r3, [pc, #216]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a992:	691b      	ldr	r3, [r3, #16]
 801a994:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801a998:	08db      	lsrs	r3, r3, #3
 801a99a:	b29b      	uxth	r3, r3
 801a99c:	2120      	movs	r1, #32
 801a99e:	4618      	mov	r0, r3
 801a9a0:	f7e9 fe9a 	bl	80046d8 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 801a9a4:	4b31      	ldr	r3, [pc, #196]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d002      	beq.n	801a9b2 <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 801a9ac:	4b2f      	ldr	r3, [pc, #188]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a9ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a9b0:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 801a9b2:	4b2f      	ldr	r3, [pc, #188]	; (801aa70 <rfalPrepareTransceive+0x128>)
 801a9b4:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 801a9ba:	4b2c      	ldr	r3, [pc, #176]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9be:	f003 0304 	and.w	r3, r3, #4
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d003      	beq.n	801a9ce <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 801a9c6:	78fb      	ldrb	r3, [r7, #3]
 801a9c8:	f043 0320 	orr.w	r3, r3, #32
 801a9cc:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 801a9ce:	4b27      	ldr	r3, [pc, #156]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9d2:	f003 0310 	and.w	r3, r3, #16
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d003      	beq.n	801a9e2 <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 801a9da:	78fb      	ldrb	r3, [r7, #3]
 801a9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9e0:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 801a9e2:	4b22      	ldr	r3, [pc, #136]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801a9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9e6:	f003 0320 	and.w	r3, r3, #32
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d003      	beq.n	801a9f6 <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 801a9ee:	78fb      	ldrb	r3, [r7, #3]
 801a9f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a9f4:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 801a9f6:	78fb      	ldrb	r3, [r7, #3]
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	21e0      	movs	r1, #224	; 0xe0
 801a9fc:	2005      	movs	r0, #5
 801a9fe:	f7ea fa66 	bl	8004ece <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 801aa02:	4b1a      	ldr	r3, [pc, #104]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa06:	f003 0308 	and.w	r3, r3, #8
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d004      	beq.n	801aa18 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 801aa0e:	2110      	movs	r1, #16
 801aa10:	200b      	movs	r0, #11
 801aa12:	f7ea fa1b 	bl	8004e4c <st25r3911ClrRegisterBits>
 801aa16:	e003      	b.n	801aa20 <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 801aa18:	2110      	movs	r1, #16
 801aa1a:	200b      	movs	r0, #11
 801aa1c:	f7ea fa39 	bl	8004e92 <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 801aa20:	4b12      	ldr	r3, [pc, #72]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801aa22:	79db      	ldrb	r3, [r3, #7]
 801aa24:	2b02      	cmp	r3, #2
 801aa26:	d104      	bne.n	801aa32 <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 801aa28:	2102      	movs	r1, #2
 801aa2a:	2011      	movs	r0, #17
 801aa2c:	f7ea fa31 	bl	8004e92 <st25r3911SetRegisterBits>
 801aa30:	e003      	b.n	801aa3a <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 801aa32:	2102      	movs	r1, #2
 801aa34:	2011      	movs	r0, #17
 801aa36:	f7ea fa09 	bl	8004e4c <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 801aa3a:	4b0c      	ldr	r3, [pc, #48]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801aa3c:	785b      	ldrb	r3, [r3, #1]
 801aa3e:	2b09      	cmp	r3, #9
 801aa40:	d003      	beq.n	801aa4a <rfalPrepareTransceive+0x102>
 801aa42:	4b0a      	ldr	r3, [pc, #40]	; (801aa6c <rfalPrepareTransceive+0x124>)
 801aa44:	785b      	ldrb	r3, [r3, #1]
 801aa46:	2b0d      	cmp	r3, #13
 801aa48:	d103      	bne.n	801aa52 <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 801aa50:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 801aa52:	6878      	ldr	r0, [r7, #4]
 801aa54:	f7ea fd32 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 801aa58:	6878      	ldr	r0, [r7, #4]
 801aa5a:	f7ea fd6b 	bl	8005534 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801aa5e:	f000 fdb1 	bl	801b5c4 <rfalFIFOStatusClear>
}
 801aa62:	bf00      	nop
 801aa64:	3708      	adds	r7, #8
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}
 801aa6a:	bf00      	nop
 801aa6c:	20003c40 	.word	0x20003c40
 801aa70:	00f04078 	.word	0x00f04078

0801aa74 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 801aa74:	b5b0      	push	{r4, r5, r7, lr}
 801aa76:	b08a      	sub	sp, #40	; 0x28
 801aa78:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 801aa82:	4b95      	ldr	r3, [pc, #596]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aa84:	7d1a      	ldrb	r2, [r3, #20]
 801aa86:	4b94      	ldr	r3, [pc, #592]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aa88:	7d5b      	ldrb	r3, [r3, #21]
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d003      	beq.n	801aa96 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 801aa8e:	4b92      	ldr	r3, [pc, #584]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aa90:	7d1a      	ldrb	r2, [r3, #20]
 801aa92:	4b91      	ldr	r3, [pc, #580]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aa94:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 801aa96:	4b90      	ldr	r3, [pc, #576]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aa98:	7d1b      	ldrb	r3, [r3, #20]
 801aa9a:	3b0b      	subs	r3, #11
 801aa9c:	2b08      	cmp	r3, #8
 801aa9e:	f200 8217 	bhi.w	801aed0 <rfalTransceiveTx+0x45c>
 801aaa2:	a201      	add	r2, pc, #4	; (adr r2, 801aaa8 <rfalTransceiveTx+0x34>)
 801aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaa8:	0801aacd 	.word	0x0801aacd
 801aaac:	0801aad3 	.word	0x0801aad3
 801aab0:	0801aaf1 	.word	0x0801aaf1
 801aab4:	0801ab19 	.word	0x0801ab19
 801aab8:	0801ac69 	.word	0x0801ac69
 801aabc:	0801aca5 	.word	0x0801aca5
 801aac0:	0801adeb 	.word	0x0801adeb
 801aac4:	0801ae61 	.word	0x0801ae61
 801aac8:	0801aea7 	.word	0x0801aea7
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 801aacc:	4b82      	ldr	r3, [pc, #520]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aace:	220c      	movs	r2, #12
 801aad0:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 801aad2:	f7ff fbd7 	bl	801a284 <rfalIsGTExpired>
 801aad6:	4603      	mov	r3, r0
 801aad8:	f083 0301 	eor.w	r3, r3, #1
 801aadc:	b2db      	uxtb	r3, r3
 801aade:	2b00      	cmp	r3, #0
 801aae0:	f040 81fd 	bne.w	801aede <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 801aae4:	4b7c      	ldr	r3, [pc, #496]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aae6:	2200      	movs	r2, #0
 801aae8:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 801aaea:	4b7b      	ldr	r3, [pc, #492]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aaec:	220d      	movs	r2, #13
 801aaee:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 801aaf0:	4b79      	ldr	r3, [pc, #484]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aaf2:	785b      	ldrb	r3, [r3, #1]
 801aaf4:	2b09      	cmp	r3, #9
 801aaf6:	d00c      	beq.n	801ab12 <rfalTransceiveTx+0x9e>
 801aaf8:	4b77      	ldr	r3, [pc, #476]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aafa:	785b      	ldrb	r3, [r3, #1]
 801aafc:	2b0d      	cmp	r3, #13
 801aafe:	d008      	beq.n	801ab12 <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 801ab00:	2204      	movs	r2, #4
 801ab02:	2104      	movs	r1, #4
 801ab04:	202b      	movs	r0, #43	; 0x2b
 801ab06:	f7e9 fe1b 	bl	8004740 <st25r3911CheckReg>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	f040 81e8 	bne.w	801aee2 <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 801ab12:	4b71      	ldr	r3, [pc, #452]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab14:	220e      	movs	r2, #14
 801ab16:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 801ab18:	f7ff ff16 	bl	801a948 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 801ab1c:	2210      	movs	r2, #16
 801ab1e:	2110      	movs	r1, #16
 801ab20:	2000      	movs	r0, #0
 801ab22:	f7e9 fe0d 	bl	8004740 <st25r3911CheckReg>
 801ab26:	4603      	mov	r3, r0
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d001      	beq.n	801ab30 <rfalTransceiveTx+0xbc>
 801ab2c:	2250      	movs	r2, #80	; 0x50
 801ab2e:	e000      	b.n	801ab32 <rfalTransceiveTx+0xbe>
 801ab30:	2240      	movs	r2, #64	; 0x40
 801ab32:	4b69      	ldr	r3, [pc, #420]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab34:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801ab36:	4b68      	ldr	r3, [pc, #416]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab38:	785b      	ldrb	r3, [r3, #1]
 801ab3a:	2b07      	cmp	r3, #7
 801ab3c:	d003      	beq.n	801ab46 <rfalTransceiveTx+0xd2>
 801ab3e:	4b66      	ldr	r3, [pc, #408]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab40:	785b      	ldrb	r3, [r3, #1]
 801ab42:	2b08      	cmp	r3, #8
 801ab44:	d150      	bne.n	801abe8 <rfalTransceiveTx+0x174>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 801ab46:	4b64      	ldr	r3, [pc, #400]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab48:	2200      	movs	r2, #0
 801ab4a:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 801ab4e:	4b62      	ldr	r3, [pc, #392]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab50:	69d8      	ldr	r0, [r3, #28]
 801ab52:	4b61      	ldr	r3, [pc, #388]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab54:	8c1b      	ldrh	r3, [r3, #32]
 801ab56:	3307      	adds	r3, #7
 801ab58:	08db      	lsrs	r3, r3, #3
 801ab5a:	b299      	uxth	r1, r3
 801ab5c:	4b5e      	ldr	r3, [pc, #376]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801ab62:	f003 0301 	and.w	r3, r3, #1
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	bf0c      	ite	eq
 801ab6a:	2301      	moveq	r3, #1
 801ab6c:	2300      	movne	r3, #0
 801ab6e:	b2da      	uxtb	r2, r3
 801ab70:	4b59      	ldr	r3, [pc, #356]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801ab76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	bf0c      	ite	eq
 801ab7e:	2301      	moveq	r3, #1
 801ab80:	2300      	movne	r3, #0
 801ab82:	b2dc      	uxtb	r4, r3
 801ab84:	4b54      	ldr	r3, [pc, #336]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ab86:	785b      	ldrb	r3, [r3, #1]
 801ab88:	2b08      	cmp	r3, #8
 801ab8a:	bf0c      	ite	eq
 801ab8c:	2301      	moveq	r3, #1
 801ab8e:	2300      	movne	r3, #0
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	4d52      	ldr	r5, [pc, #328]	; (801acdc <rfalTransceiveTx+0x268>)
 801ab94:	9505      	str	r5, [sp, #20]
 801ab96:	2560      	movs	r5, #96	; 0x60
 801ab98:	9504      	str	r5, [sp, #16]
 801ab9a:	4d51      	ldr	r5, [pc, #324]	; (801ace0 <rfalTransceiveTx+0x26c>)
 801ab9c:	9503      	str	r5, [sp, #12]
 801ab9e:	4d51      	ldr	r5, [pc, #324]	; (801ace4 <rfalTransceiveTx+0x270>)
 801aba0:	9502      	str	r5, [sp, #8]
 801aba2:	4d51      	ldr	r5, [pc, #324]	; (801ace8 <rfalTransceiveTx+0x274>)
 801aba4:	9501      	str	r5, [sp, #4]
 801aba6:	9300      	str	r3, [sp, #0]
 801aba8:	4623      	mov	r3, r4
 801abaa:	f7f6 fff7 	bl	8011b9c <iso15693VCDCode>
 801abae:	4603      	mov	r3, r0
 801abb0:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 801abb2:	89fb      	ldrh	r3, [r7, #14]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d009      	beq.n	801abcc <rfalTransceiveTx+0x158>
 801abb8:	89fb      	ldrh	r3, [r7, #14]
 801abba:	2b0d      	cmp	r3, #13
 801abbc:	d006      	beq.n	801abcc <rfalTransceiveTx+0x158>
                {
                    gRFAL.TxRx.status = ret;
 801abbe:	4a46      	ldr	r2, [pc, #280]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abc0:	89fb      	ldrh	r3, [r7, #14]
 801abc2:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801abc4:	4b44      	ldr	r3, [pc, #272]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abc6:	2213      	movs	r2, #19
 801abc8:	751a      	strb	r2, [r3, #20]
                    break;
 801abca:	e191      	b.n	801aef0 <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 801abcc:	4b42      	ldr	r3, [pc, #264]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abce:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801abd0:	00db      	lsls	r3, r3, #3
 801abd2:	4618      	mov	r0, r3
 801abd4:	f7e9 fea9 	bl	800492a <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 801abd8:	4b3f      	ldr	r3, [pc, #252]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801abdc:	b2db      	uxtb	r3, r3
 801abde:	4619      	mov	r1, r3
 801abe0:	483f      	ldr	r0, [pc, #252]	; (801ace0 <rfalTransceiveTx+0x26c>)
 801abe2:	f7ea f9dd 	bl	8004fa0 <st25r3911WriteFifo>
 801abe6:	e01c      	b.n	801ac22 <rfalTransceiveTx+0x1ae>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 801abe8:	4b3b      	ldr	r3, [pc, #236]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abea:	8c1b      	ldrh	r3, [r3, #32]
 801abec:	3307      	adds	r3, #7
 801abee:	08db      	lsrs	r3, r3, #3
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	4b39      	ldr	r3, [pc, #228]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abf4:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 801abf6:	4b38      	ldr	r3, [pc, #224]	; (801acd8 <rfalTransceiveTx+0x264>)
 801abf8:	8c1b      	ldrh	r3, [r3, #32]
 801abfa:	4618      	mov	r0, r3
 801abfc:	f7e9 fe95 	bl	800492a <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 801ac00:	4b35      	ldr	r3, [pc, #212]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac02:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ac04:	2b60      	cmp	r3, #96	; 0x60
 801ac06:	bf28      	it	cs
 801ac08:	2360      	movcs	r3, #96	; 0x60
 801ac0a:	b29a      	uxth	r2, r3
 801ac0c:	4b32      	ldr	r3, [pc, #200]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac0e:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 801ac10:	4b31      	ldr	r3, [pc, #196]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac12:	69db      	ldr	r3, [r3, #28]
 801ac14:	4a30      	ldr	r2, [pc, #192]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac16:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801ac18:	b2d2      	uxtb	r2, r2
 801ac1a:	4611      	mov	r1, r2
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f7ea f9bf 	bl	8004fa0 <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 801ac22:	4b2d      	ldr	r3, [pc, #180]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac24:	795b      	ldrb	r3, [r3, #5]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d005      	beq.n	801ac36 <rfalTransceiveTx+0x1c2>
 801ac2a:	4b2b      	ldr	r3, [pc, #172]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac2c:	795b      	ldrb	r3, [r3, #5]
 801ac2e:	4619      	mov	r1, r3
 801ac30:	2001      	movs	r0, #1
 801ac32:	f7ea f877 	bl	8004d24 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 801ac36:	4b28      	ldr	r3, [pc, #160]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac3a:	f003 0301 	and.w	r3, r3, #1
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d003      	beq.n	801ac4a <rfalTransceiveTx+0x1d6>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 801ac42:	20c5      	movs	r0, #197	; 0xc5
 801ac44:	f7ea fa44 	bl	80050d0 <st25r3911ExecuteCommand>
 801ac48:	e002      	b.n	801ac50 <rfalTransceiveTx+0x1dc>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 801ac4a:	20c4      	movs	r0, #196	; 0xc4
 801ac4c:	f7ea fa40 	bl	80050d0 <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 801ac50:	4b21      	ldr	r3, [pc, #132]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac52:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801ac54:	4b20      	ldr	r3, [pc, #128]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	d201      	bcs.n	801ac60 <rfalTransceiveTx+0x1ec>
 801ac5c:	220f      	movs	r2, #15
 801ac5e:	e000      	b.n	801ac62 <rfalTransceiveTx+0x1ee>
 801ac60:	2211      	movs	r2, #17
 801ac62:	4b1d      	ldr	r3, [pc, #116]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac64:	751a      	strb	r2, [r3, #20]
            break;
 801ac66:	e143      	b.n	801aef0 <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 801ac68:	2048      	movs	r0, #72	; 0x48
 801ac6a:	f7ea fc27 	bl	80054bc <st25r3911GetInterrupt>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	f000 8136 	beq.w	801aee6 <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 801ac7a:	68bb      	ldr	r3, [r7, #8]
 801ac7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d008      	beq.n	801ac96 <rfalTransceiveTx+0x222>
 801ac84:	68bb      	ldr	r3, [r7, #8]
 801ac86:	f003 0308 	and.w	r3, r3, #8
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d103      	bne.n	801ac96 <rfalTransceiveTx+0x222>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 801ac8e:	4b12      	ldr	r3, [pc, #72]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac90:	2210      	movs	r2, #16
 801ac92:	751a      	strb	r2, [r3, #20]
 801ac94:	e006      	b.n	801aca4 <rfalTransceiveTx+0x230>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 801ac96:	4b10      	ldr	r3, [pc, #64]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac98:	2203      	movs	r2, #3
 801ac9a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801ac9c:	4b0e      	ldr	r3, [pc, #56]	; (801acd8 <rfalTransceiveTx+0x264>)
 801ac9e:	2213      	movs	r2, #19
 801aca0:	751a      	strb	r2, [r3, #20]
                break;
 801aca2:	e125      	b.n	801aef0 <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 801aca4:	4b0c      	ldr	r3, [pc, #48]	; (801acd8 <rfalTransceiveTx+0x264>)
 801aca6:	785b      	ldrb	r3, [r3, #1]
 801aca8:	2b07      	cmp	r3, #7
 801acaa:	d003      	beq.n	801acb4 <rfalTransceiveTx+0x240>
 801acac:	4b0a      	ldr	r3, [pc, #40]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acae:	785b      	ldrb	r3, [r3, #1]
 801acb0:	2b08      	cmp	r3, #8
 801acb2:	d16e      	bne.n	801ad92 <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 801acb4:	4b08      	ldr	r3, [pc, #32]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acb6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801acb8:	461a      	mov	r2, r3
 801acba:	4b07      	ldr	r3, [pc, #28]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acbc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801acbe:	1ad3      	subs	r3, r2, r3
 801acc0:	4a05      	ldr	r2, [pc, #20]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acc2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 801acc4:	4293      	cmp	r3, r2
 801acc6:	da11      	bge.n	801acec <rfalTransceiveTx+0x278>
 801acc8:	4b03      	ldr	r3, [pc, #12]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acca:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801accc:	4b02      	ldr	r3, [pc, #8]	; (801acd8 <rfalTransceiveTx+0x264>)
 801acce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801acd0:	1ad3      	subs	r3, r2, r3
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	e00c      	b.n	801acf0 <rfalTransceiveTx+0x27c>
 801acd6:	bf00      	nop
 801acd8:	20003c40 	.word	0x20003c40
 801acdc:	20003c7c 	.word	0x20003c7c
 801ace0:	20003e00 	.word	0x20003e00
 801ace4:	20004008 	.word	0x20004008
 801ace8:	20003c7a 	.word	0x20003c7a
 801acec:	4b82      	ldr	r3, [pc, #520]	; (801aef8 <rfalTransceiveTx+0x484>)
 801acee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801acf0:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 801acf2:	89bb      	ldrh	r3, [r7, #12]
 801acf4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801acf8:	bf28      	it	cs
 801acfa:	f44f 7302 	movcs.w	r3, #520	; 0x208
 801acfe:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 801ad00:	2300      	movs	r3, #0
 801ad02:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 801ad04:	4b7c      	ldr	r3, [pc, #496]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad06:	69d8      	ldr	r0, [r3, #28]
 801ad08:	4b7b      	ldr	r3, [pc, #492]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad0a:	8c1b      	ldrh	r3, [r3, #32]
 801ad0c:	3307      	adds	r3, #7
 801ad0e:	08db      	lsrs	r3, r3, #3
 801ad10:	b299      	uxth	r1, r3
 801ad12:	4b79      	ldr	r3, [pc, #484]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801ad18:	f003 0301 	and.w	r3, r3, #1
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	bf0c      	ite	eq
 801ad20:	2301      	moveq	r3, #1
 801ad22:	2300      	movne	r3, #0
 801ad24:	b2dc      	uxtb	r4, r3
 801ad26:	4b74      	ldr	r3, [pc, #464]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	bf0c      	ite	eq
 801ad34:	2301      	moveq	r3, #1
 801ad36:	2300      	movne	r3, #0
 801ad38:	b2dd      	uxtb	r5, r3
 801ad3a:	4b6f      	ldr	r3, [pc, #444]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad3c:	785b      	ldrb	r3, [r3, #1]
 801ad3e:	2b08      	cmp	r3, #8
 801ad40:	bf0c      	ite	eq
 801ad42:	2301      	moveq	r3, #1
 801ad44:	2300      	movne	r3, #0
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	1dba      	adds	r2, r7, #6
 801ad4a:	9205      	str	r2, [sp, #20]
 801ad4c:	89ba      	ldrh	r2, [r7, #12]
 801ad4e:	9204      	str	r2, [sp, #16]
 801ad50:	4a6a      	ldr	r2, [pc, #424]	; (801aefc <rfalTransceiveTx+0x488>)
 801ad52:	9203      	str	r2, [sp, #12]
 801ad54:	4a6a      	ldr	r2, [pc, #424]	; (801af00 <rfalTransceiveTx+0x48c>)
 801ad56:	9202      	str	r2, [sp, #8]
 801ad58:	4a6a      	ldr	r2, [pc, #424]	; (801af04 <rfalTransceiveTx+0x490>)
 801ad5a:	9201      	str	r2, [sp, #4]
 801ad5c:	9300      	str	r3, [sp, #0]
 801ad5e:	462b      	mov	r3, r5
 801ad60:	4622      	mov	r2, r4
 801ad62:	f7f6 ff1b 	bl	8011b9c <iso15693VCDCode>
 801ad66:	4603      	mov	r3, r0
 801ad68:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 801ad6a:	89fb      	ldrh	r3, [r7, #14]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d009      	beq.n	801ad84 <rfalTransceiveTx+0x310>
 801ad70:	89fb      	ldrh	r3, [r7, #14]
 801ad72:	2b0d      	cmp	r3, #13
 801ad74:	d006      	beq.n	801ad84 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 801ad76:	4a60      	ldr	r2, [pc, #384]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad78:	89fb      	ldrh	r3, [r7, #14]
 801ad7a:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801ad7c:	4b5e      	ldr	r3, [pc, #376]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad7e:	2213      	movs	r2, #19
 801ad80:	751a      	strb	r2, [r3, #20]
                    break;
 801ad82:	e0b5      	b.n	801aef0 <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 801ad84:	88fb      	ldrh	r3, [r7, #6]
 801ad86:	b2db      	uxtb	r3, r3
 801ad88:	4619      	mov	r1, r3
 801ad8a:	485c      	ldr	r0, [pc, #368]	; (801aefc <rfalTransceiveTx+0x488>)
 801ad8c:	f7ea f908 	bl	8004fa0 <st25r3911WriteFifo>
            {
 801ad90:	e018      	b.n	801adc4 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 801ad92:	4b59      	ldr	r3, [pc, #356]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad94:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ad96:	461a      	mov	r2, r3
 801ad98:	4b57      	ldr	r3, [pc, #348]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ad9a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	4b56      	ldr	r3, [pc, #344]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ada0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ada2:	1acb      	subs	r3, r1, r3
 801ada4:	4293      	cmp	r3, r2
 801ada6:	bfa8      	it	ge
 801ada8:	4613      	movge	r3, r2
 801adaa:	b29b      	uxth	r3, r3
 801adac:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 801adae:	4b52      	ldr	r3, [pc, #328]	; (801aef8 <rfalTransceiveTx+0x484>)
 801adb0:	69db      	ldr	r3, [r3, #28]
 801adb2:	4a51      	ldr	r2, [pc, #324]	; (801aef8 <rfalTransceiveTx+0x484>)
 801adb4:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801adb6:	4413      	add	r3, r2
 801adb8:	88fa      	ldrh	r2, [r7, #6]
 801adba:	b2d2      	uxtb	r2, r2
 801adbc:	4611      	mov	r1, r2
 801adbe:	4618      	mov	r0, r3
 801adc0:	f7ea f8ee 	bl	8004fa0 <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 801adc4:	4b4c      	ldr	r3, [pc, #304]	; (801aef8 <rfalTransceiveTx+0x484>)
 801adc6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801adc8:	88fb      	ldrh	r3, [r7, #6]
 801adca:	4413      	add	r3, r2
 801adcc:	b29a      	uxth	r2, r3
 801adce:	4b4a      	ldr	r3, [pc, #296]	; (801aef8 <rfalTransceiveTx+0x484>)
 801add0:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 801add2:	4b49      	ldr	r3, [pc, #292]	; (801aef8 <rfalTransceiveTx+0x484>)
 801add4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801add6:	4b48      	ldr	r3, [pc, #288]	; (801aef8 <rfalTransceiveTx+0x484>)
 801add8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801adda:	429a      	cmp	r2, r3
 801addc:	d201      	bcs.n	801ade2 <rfalTransceiveTx+0x36e>
 801adde:	220f      	movs	r2, #15
 801ade0:	e000      	b.n	801ade4 <rfalTransceiveTx+0x370>
 801ade2:	2211      	movs	r2, #17
 801ade4:	4b44      	ldr	r3, [pc, #272]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ade6:	751a      	strb	r2, [r3, #20]
            break;
 801ade8:	e082      	b.n	801aef0 <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 801adea:	2048      	movs	r0, #72	; 0x48
 801adec:	f7ea fb66 	bl	80054bc <st25r3911GetInterrupt>
 801adf0:	4603      	mov	r3, r0
 801adf2:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801adf4:	68bb      	ldr	r3, [r7, #8]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d077      	beq.n	801aeea <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 801adfa:	68bb      	ldr	r3, [r7, #8]
 801adfc:	f003 0308 	and.w	r3, r3, #8
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d021      	beq.n	801ae48 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 801ae04:	4b3c      	ldr	r3, [pc, #240]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae06:	785b      	ldrb	r3, [r3, #1]
 801ae08:	2b09      	cmp	r3, #9
 801ae0a:	d003      	beq.n	801ae14 <rfalTransceiveTx+0x3a0>
 801ae0c:	4b3a      	ldr	r3, [pc, #232]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae0e:	785b      	ldrb	r3, [r3, #1]
 801ae10:	2b0d      	cmp	r3, #13
 801ae12:	d115      	bne.n	801ae40 <rfalTransceiveTx+0x3cc>
 801ae14:	4b38      	ldr	r3, [pc, #224]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae1c:	d010      	beq.n	801ae40 <rfalTransceiveTx+0x3cc>
 801ae1e:	4b36      	ldr	r3, [pc, #216]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d00c      	beq.n	801ae40 <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 801ae26:	4b34      	ldr	r3, [pc, #208]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae2a:	4a37      	ldr	r2, [pc, #220]	; (801af08 <rfalTransceiveTx+0x494>)
 801ae2c:	fba2 2303 	umull	r2, r3, r2, r3
 801ae30:	0b1b      	lsrs	r3, r3, #12
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	4618      	mov	r0, r3
 801ae36:	f7ea fbc9 	bl	80055cc <timerCalculateTimer>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	4a2e      	ldr	r2, [pc, #184]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae3e:	6453      	str	r3, [r2, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 801ae40:	4b2d      	ldr	r3, [pc, #180]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae42:	2212      	movs	r2, #18
 801ae44:	751a      	strb	r2, [r3, #20]
 801ae46:	e00b      	b.n	801ae60 <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d14d      	bne.n	801aeee <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 801ae52:	4b29      	ldr	r3, [pc, #164]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae54:	2203      	movs	r2, #3
 801ae56:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801ae58:	4b27      	ldr	r3, [pc, #156]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae5a:	2213      	movs	r2, #19
 801ae5c:	751a      	strb	r2, [r3, #20]
               break;
 801ae5e:	e047      	b.n	801aef0 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 801ae60:	4b25      	ldr	r3, [pc, #148]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d110      	bne.n	801ae8a <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 801ae68:	4b23      	ldr	r3, [pc, #140]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae6a:	799b      	ldrb	r3, [r3, #6]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d003      	beq.n	801ae78 <rfalTransceiveTx+0x404>
 801ae70:	2100      	movs	r1, #0
 801ae72:	2001      	movs	r0, #1
 801ae74:	f7e9 ff56 	bl	8004d24 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 801ae78:	f7ff fd50 	bl	801a91c <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 801ae7c:	4b1e      	ldr	r3, [pc, #120]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae7e:	2200      	movs	r2, #0
 801ae80:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 801ae82:	4b1d      	ldr	r3, [pc, #116]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae84:	2200      	movs	r2, #0
 801ae86:	751a      	strb	r2, [r3, #20]
                break;
 801ae88:	e032      	b.n	801aef0 <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 801ae8a:	4b1b      	ldr	r3, [pc, #108]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae8c:	799b      	ldrb	r3, [r3, #6]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d005      	beq.n	801ae9e <rfalTransceiveTx+0x42a>
 801ae92:	4b19      	ldr	r3, [pc, #100]	; (801aef8 <rfalTransceiveTx+0x484>)
 801ae94:	799b      	ldrb	r3, [r3, #6]
 801ae96:	4619      	mov	r1, r3
 801ae98:	2001      	movs	r0, #1
 801ae9a:	f7e9 ff43 	bl	8004d24 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 801ae9e:	4b16      	ldr	r3, [pc, #88]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aea0:	2251      	movs	r2, #81	; 0x51
 801aea2:	751a      	strb	r2, [r3, #20]
            break;
 801aea4:	e024      	b.n	801aef0 <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 801aea6:	4b14      	ldr	r3, [pc, #80]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aea8:	8adb      	ldrh	r3, [r3, #22]
 801aeaa:	2b02      	cmp	r3, #2
 801aeac:	d102      	bne.n	801aeb4 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 801aeae:	4b12      	ldr	r3, [pc, #72]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aeb0:	2208      	movs	r2, #8
 801aeb2:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 801aeb4:	4b10      	ldr	r3, [pc, #64]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aeb6:	799b      	ldrb	r3, [r3, #6]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d003      	beq.n	801aec4 <rfalTransceiveTx+0x450>
 801aebc:	2100      	movs	r1, #0
 801aebe:	2001      	movs	r0, #1
 801aec0:	f7e9 ff30 	bl	8004d24 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 801aec4:	f7ff fd2a 	bl	801a91c <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 801aec8:	4b0b      	ldr	r3, [pc, #44]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aeca:	2200      	movs	r2, #0
 801aecc:	751a      	strb	r2, [r3, #20]
            break;
 801aece:	e00f      	b.n	801aef0 <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 801aed0:	4b09      	ldr	r3, [pc, #36]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aed2:	2208      	movs	r2, #8
 801aed4:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801aed6:	4b08      	ldr	r3, [pc, #32]	; (801aef8 <rfalTransceiveTx+0x484>)
 801aed8:	2213      	movs	r2, #19
 801aeda:	751a      	strb	r2, [r3, #20]
            break;
 801aedc:	e008      	b.n	801aef0 <rfalTransceiveTx+0x47c>
                break;
 801aede:	bf00      	nop
 801aee0:	e006      	b.n	801aef0 <rfalTransceiveTx+0x47c>
                   break;
 801aee2:	bf00      	nop
 801aee4:	e004      	b.n	801aef0 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 801aee6:	bf00      	nop
 801aee8:	e002      	b.n	801aef0 <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 801aeea:	bf00      	nop
 801aeec:	e000      	b.n	801aef0 <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 801aeee:	bf00      	nop
    }
}
 801aef0:	bf00      	nop
 801aef2:	3710      	adds	r7, #16
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bdb0      	pop	{r4, r5, r7, pc}
 801aef8:	20003c40 	.word	0x20003c40
 801aefc:	20003e00 	.word	0x20003e00
 801af00:	20004008 	.word	0x20004008
 801af04:	20003c7a 	.word	0x20003c7a
 801af08:	4d542005 	.word	0x4d542005

0801af0c <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 801af0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af0e:	b089      	sub	sp, #36	; 0x24
 801af10:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801af12:	2300      	movs	r3, #0
 801af14:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 801af16:	4ba2      	ldr	r3, [pc, #648]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af18:	7d1a      	ldrb	r2, [r3, #20]
 801af1a:	4ba1      	ldr	r3, [pc, #644]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af1c:	7d5b      	ldrb	r3, [r3, #21]
 801af1e:	429a      	cmp	r2, r3
 801af20:	d003      	beq.n	801af2a <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 801af22:	4b9f      	ldr	r3, [pc, #636]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af24:	7d1a      	ldrb	r2, [r3, #20]
 801af26:	4b9e      	ldr	r3, [pc, #632]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af28:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 801af2a:	4b9d      	ldr	r3, [pc, #628]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af2c:	7d1b      	ldrb	r3, [r3, #20]
 801af2e:	3b51      	subs	r3, #81	; 0x51
 801af30:	2b09      	cmp	r3, #9
 801af32:	f200 831e 	bhi.w	801b572 <rfalTransceiveRx+0x666>
 801af36:	a201      	add	r2, pc, #4	; (adr r2, 801af3c <rfalTransceiveRx+0x30>)
 801af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af3c:	0801af65 	.word	0x0801af65
 801af40:	0801b4ef 	.word	0x0801b4ef
 801af44:	0801af9d 	.word	0x0801af9d
 801af48:	0801b0a9 	.word	0x0801b0a9
 801af4c:	0801b42d 	.word	0x0801b42d
 801af50:	0801b0fd 	.word	0x0801b0fd
 801af54:	0801b215 	.word	0x0801b215
 801af58:	0801b529 	.word	0x0801b529
 801af5c:	0801b405 	.word	0x0801b405
 801af60:	0801b4c5 	.word	0x0801b4c5
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 801af64:	4b8e      	ldr	r3, [pc, #568]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af66:	2200      	movs	r2, #0
 801af68:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 801af6a:	4b8d      	ldr	r3, [pc, #564]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af6c:	2200      	movs	r2, #0
 801af6e:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 801af70:	4b8b      	ldr	r3, [pc, #556]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af74:	2b00      	cmp	r3, #0
 801af76:	d003      	beq.n	801af80 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 801af78:	4b89      	ldr	r3, [pc, #548]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af7c:	2200      	movs	r2, #0
 801af7e:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 801af80:	4b87      	ldr	r3, [pc, #540]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af82:	785b      	ldrb	r3, [r3, #1]
 801af84:	2b09      	cmp	r3, #9
 801af86:	d003      	beq.n	801af90 <rfalTransceiveRx+0x84>
 801af88:	4b85      	ldr	r3, [pc, #532]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af8a:	785b      	ldrb	r3, [r3, #1]
 801af8c:	2b0d      	cmp	r3, #13
 801af8e:	d101      	bne.n	801af94 <rfalTransceiveRx+0x88>
 801af90:	2252      	movs	r2, #82	; 0x52
 801af92:	e000      	b.n	801af96 <rfalTransceiveRx+0x8a>
 801af94:	2253      	movs	r2, #83	; 0x53
 801af96:	4b82      	ldr	r3, [pc, #520]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af98:	751a      	strb	r2, [r3, #20]
            break;
 801af9a:	e2fa      	b.n	801b592 <rfalTransceiveRx+0x686>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 801af9c:	4b80      	ldr	r3, [pc, #512]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801af9e:	785b      	ldrb	r3, [r3, #1]
 801afa0:	2b09      	cmp	r3, #9
 801afa2:	d003      	beq.n	801afac <rfalTransceiveRx+0xa0>
 801afa4:	4b7e      	ldr	r3, [pc, #504]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afa6:	785b      	ldrb	r3, [r3, #1]
 801afa8:	2b0d      	cmp	r3, #13
 801afaa:	d117      	bne.n	801afdc <rfalTransceiveRx+0xd0>
 801afac:	4b7c      	ldr	r3, [pc, #496]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afb4:	d012      	beq.n	801afdc <rfalTransceiveRx+0xd0>
 801afb6:	4b7a      	ldr	r3, [pc, #488]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d00e      	beq.n	801afdc <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 801afbe:	4b78      	ldr	r3, [pc, #480]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801afc2:	4618      	mov	r0, r3
 801afc4:	f7ea fb10 	bl	80055e8 <timerIsExpired>
 801afc8:	4603      	mov	r3, r0
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d006      	beq.n	801afdc <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 801afce:	4b74      	ldr	r3, [pc, #464]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afd0:	2204      	movs	r2, #4
 801afd2:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801afd4:	4b72      	ldr	r3, [pc, #456]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801afd6:	225a      	movs	r2, #90	; 0x5a
 801afd8:	751a      	strb	r2, [r3, #20]
                    break;
 801afda:	e2da      	b.n	801b592 <rfalTransceiveRx+0x686>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 801afdc:	f644 0030 	movw	r0, #18480	; 0x4830
 801afe0:	f7ea fa6c 	bl	80054bc <st25r3911GetInterrupt>
 801afe4:	4603      	mov	r3, r0
 801afe6:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	2b00      	cmp	r3, #0
 801afec:	f000 82c8 	beq.w	801b580 <rfalTransceiveRx+0x674>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d00b      	beq.n	801b012 <rfalTransceiveRx+0x106>
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	f003 0320 	and.w	r3, r3, #32
 801b000:	2b00      	cmp	r3, #0
 801b002:	d106      	bne.n	801b012 <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 801b004:	4b66      	ldr	r3, [pc, #408]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b006:	2204      	movs	r2, #4
 801b008:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b00a:	4b65      	ldr	r3, [pc, #404]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b00c:	225a      	movs	r2, #90	; 0x5a
 801b00e:	751a      	strb	r2, [r3, #20]
                break;
 801b010:	e2bf      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d015      	beq.n	801b048 <rfalTransceiveRx+0x13c>
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	f003 0320 	and.w	r3, r3, #32
 801b022:	2b00      	cmp	r3, #0
 801b024:	d110      	bne.n	801b048 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 801b026:	4b5e      	ldr	r3, [pc, #376]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b028:	785b      	ldrb	r3, [r3, #1]
 801b02a:	2b09      	cmp	r3, #9
 801b02c:	d003      	beq.n	801b036 <rfalTransceiveRx+0x12a>
 801b02e:	4b5c      	ldr	r3, [pc, #368]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b030:	785b      	ldrb	r3, [r3, #1]
 801b032:	2b0d      	cmp	r3, #13
 801b034:	d101      	bne.n	801b03a <rfalTransceiveRx+0x12e>
 801b036:	2204      	movs	r2, #4
 801b038:	e000      	b.n	801b03c <rfalTransceiveRx+0x130>
 801b03a:	2225      	movs	r2, #37	; 0x25
 801b03c:	4b58      	ldr	r3, [pc, #352]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b03e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b040:	4b57      	ldr	r3, [pc, #348]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b042:	225a      	movs	r2, #90	; 0x5a
 801b044:	751a      	strb	r2, [r3, #20]
                break;
 801b046:	e2a4      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	f003 0320 	and.w	r3, r3, #32
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d015      	beq.n	801b07e <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	f003 0310 	and.w	r3, r3, #16
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d006      	beq.n	801b06a <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 801b05c:	4b50      	ldr	r3, [pc, #320]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b05e:	2201      	movs	r2, #1
 801b060:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 801b062:	4b4f      	ldr	r3, [pc, #316]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b064:	2256      	movs	r2, #86	; 0x56
 801b066:	751a      	strb	r2, [r3, #20]
                    break;
 801b068:	e293      	b.n	801b592 <rfalTransceiveRx+0x686>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 801b06a:	200a      	movs	r0, #10
 801b06c:	f7ea faae 	bl	80055cc <timerCalculateTimer>
 801b070:	4603      	mov	r3, r0
 801b072:	4a4b      	ldr	r2, [pc, #300]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b074:	6493      	str	r3, [r2, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 801b076:	4b4a      	ldr	r3, [pc, #296]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b078:	2254      	movs	r2, #84	; 0x54
 801b07a:	751a      	strb	r2, [r3, #20]
 801b07c:	e014      	b.n	801b0a8 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	f003 0310 	and.w	r3, r3, #16
 801b084:	2b00      	cmp	r3, #0
 801b086:	d008      	beq.n	801b09a <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 801b088:	4b45      	ldr	r3, [pc, #276]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b08a:	2203      	movs	r2, #3
 801b08c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b08e:	4b44      	ldr	r3, [pc, #272]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b090:	225a      	movs	r2, #90	; 0x5a
 801b092:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 801b094:	f7ff fbbe 	bl	801a814 <rfalErrorHandling>
                break;
 801b098:	e27b      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 801b09a:	4b41      	ldr	r3, [pc, #260]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b09c:	2203      	movs	r2, #3
 801b09e:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b0a0:	4b3f      	ldr	r3, [pc, #252]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0a2:	225a      	movs	r2, #90	; 0x5a
 801b0a4:	751a      	strb	r2, [r3, #20]
               break;
 801b0a6:	e274      	b.n	801b592 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 801b0a8:	f44f 6005 	mov.w	r0, #2128	; 0x850
 801b0ac:	f7ea fa06 	bl	80054bc <st25r3911GetInterrupt>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d10f      	bne.n	801b0da <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 801b0ba:	4b39      	ldr	r3, [pc, #228]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f7ea fa92 	bl	80055e8 <timerIsExpired>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	f000 825c 	beq.w	801b584 <rfalTransceiveRx+0x678>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 801b0cc:	4b34      	ldr	r3, [pc, #208]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0ce:	2209      	movs	r2, #9
 801b0d0:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b0d2:	4b33      	ldr	r3, [pc, #204]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0d4:	225a      	movs	r2, #90	; 0x5a
 801b0d6:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 801b0d8:	e254      	b.n	801b584 <rfalTransceiveRx+0x678>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 801b0da:	68bb      	ldr	r3, [r7, #8]
 801b0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d008      	beq.n	801b0f6 <rfalTransceiveRx+0x1ea>
 801b0e4:	68bb      	ldr	r3, [r7, #8]
 801b0e6:	f003 0310 	and.w	r3, r3, #16
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d103      	bne.n	801b0f6 <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 801b0ee:	4b2c      	ldr	r3, [pc, #176]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0f0:	2255      	movs	r2, #85	; 0x55
 801b0f2:	751a      	strb	r2, [r3, #20]
                break;
 801b0f4:	e24d      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 801b0f6:	4b2a      	ldr	r3, [pc, #168]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b0f8:	2256      	movs	r2, #86	; 0x56
 801b0fa:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 801b0fc:	4829      	ldr	r0, [pc, #164]	; (801b1a4 <rfalTransceiveRx+0x298>)
 801b0fe:	f7ea f9dd 	bl	80054bc <st25r3911GetInterrupt>
 801b102:	4602      	mov	r2, r0
 801b104:	68bb      	ldr	r3, [r7, #8]
 801b106:	4313      	orrs	r3, r2
 801b108:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b110:	2b00      	cmp	r3, #0
 801b112:	d008      	beq.n	801b126 <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 801b114:	4b22      	ldr	r3, [pc, #136]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b116:	2209      	movs	r2, #9
 801b118:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801b11a:	4b21      	ldr	r3, [pc, #132]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b11c:	2257      	movs	r2, #87	; 0x57
 801b11e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801b120:	f7ff fb78 	bl	801a814 <rfalErrorHandling>
                break;
 801b124:	e235      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 801b126:	68bb      	ldr	r3, [r7, #8]
 801b128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d00c      	beq.n	801b14a <rfalTransceiveRx+0x23e>
 801b130:	4b1b      	ldr	r3, [pc, #108]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b132:	79db      	ldrb	r3, [r3, #7]
 801b134:	2b02      	cmp	r3, #2
 801b136:	d108      	bne.n	801b14a <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 801b138:	4b19      	ldr	r3, [pc, #100]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b13a:	2209      	movs	r2, #9
 801b13c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801b13e:	4b18      	ldr	r3, [pc, #96]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b140:	2257      	movs	r2, #87	; 0x57
 801b142:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801b144:	f7ff fb66 	bl	801a814 <rfalErrorHandling>
                break;
 801b148:	e223      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 801b14a:	68bb      	ldr	r3, [r7, #8]
 801b14c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b150:	2b00      	cmp	r3, #0
 801b152:	d008      	beq.n	801b166 <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 801b154:	4b12      	ldr	r3, [pc, #72]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b156:	221b      	movs	r2, #27
 801b158:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801b15a:	4b11      	ldr	r3, [pc, #68]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b15c:	2257      	movs	r2, #87	; 0x57
 801b15e:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801b160:	f7ff fb58 	bl	801a814 <rfalErrorHandling>
                break;
 801b164:	e215      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 801b166:	68bb      	ldr	r3, [r7, #8]
 801b168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d008      	beq.n	801b182 <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 801b170:	4b0b      	ldr	r3, [pc, #44]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b172:	2215      	movs	r2, #21
 801b174:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801b176:	4b0a      	ldr	r3, [pc, #40]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b178:	2257      	movs	r2, #87	; 0x57
 801b17a:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801b17c:	f7ff fb4a 	bl	801a814 <rfalErrorHandling>
                break;
 801b180:	e207      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	f003 0304 	and.w	r3, r3, #4
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d00d      	beq.n	801b1a8 <rfalTransceiveRx+0x29c>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 801b18c:	4b04      	ldr	r3, [pc, #16]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b18e:	221d      	movs	r2, #29
 801b190:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801b192:	4b03      	ldr	r3, [pc, #12]	; (801b1a0 <rfalTransceiveRx+0x294>)
 801b194:	2257      	movs	r2, #87	; 0x57
 801b196:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801b198:	f7ff fb3c 	bl	801a814 <rfalErrorHandling>
                break;
 801b19c:	e1f9      	b.n	801b592 <rfalTransceiveRx+0x686>
 801b19e:	bf00      	nop
 801b1a0:	20003c40 	.word	0x20003c40
 801b1a4:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d00b      	beq.n	801b1ca <rfalTransceiveRx+0x2be>
 801b1b2:	68bb      	ldr	r3, [r7, #8]
 801b1b4:	f003 0310 	and.w	r3, r3, #16
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d106      	bne.n	801b1ca <rfalTransceiveRx+0x2be>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 801b1bc:	4b9a      	ldr	r3, [pc, #616]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b1be:	2225      	movs	r2, #37	; 0x25
 801b1c0:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b1c2:	4b99      	ldr	r3, [pc, #612]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b1c4:	225a      	movs	r2, #90	; 0x5a
 801b1c6:	751a      	strb	r2, [r3, #20]
                 break;
 801b1c8:	e1e3      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	f003 0310 	and.w	r3, r3, #16
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d103      	bne.n	801b1dc <rfalTransceiveRx+0x2d0>
 801b1d4:	4b94      	ldr	r3, [pc, #592]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b1d6:	7e1b      	ldrb	r3, [r3, #24]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d014      	beq.n	801b206 <rfalTransceiveRx+0x2fa>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 801b1dc:	f000 fa0a 	bl	801b5f4 <rfalFIFOStatusIsIncompleteByte>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d003      	beq.n	801b1ee <rfalTransceiveRx+0x2e2>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 801b1e6:	4b90      	ldr	r3, [pc, #576]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b1e8:	2228      	movs	r2, #40	; 0x28
 801b1ea:	82da      	strh	r2, [r3, #22]
 801b1ec:	e007      	b.n	801b1fe <rfalTransceiveRx+0x2f2>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 801b1ee:	f000 fa13 	bl	801b618 <rfalFIFOStatusIsMissingPar>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d002      	beq.n	801b1fe <rfalTransceiveRx+0x2f2>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 801b1f8:	4b8b      	ldr	r3, [pc, #556]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b1fa:	2209      	movs	r2, #9
 801b1fc:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 801b1fe:	4b8a      	ldr	r3, [pc, #552]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b200:	2257      	movs	r2, #87	; 0x57
 801b202:	751a      	strb	r2, [r3, #20]
 801b204:	e006      	b.n	801b214 <rfalTransceiveRx+0x308>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 801b206:	4b88      	ldr	r3, [pc, #544]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b208:	2203      	movs	r2, #3
 801b20a:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b20c:	4b86      	ldr	r3, [pc, #536]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b20e:	225a      	movs	r2, #90	; 0x5a
 801b210:	751a      	strb	r2, [r3, #20]
                break;
 801b212:	e1be      	b.n	801b592 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 801b214:	f000 f9e2 	bl	801b5dc <rfalFIFOStatusGetNumBytes>
 801b218:	4603      	mov	r3, r0
 801b21a:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 801b21c:	4b82      	ldr	r3, [pc, #520]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b220:	f003 0302 	and.w	r3, r3, #2
 801b224:	2b00      	cmp	r3, #0
 801b226:	d11f      	bne.n	801b268 <rfalTransceiveRx+0x35c>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 801b228:	2240      	movs	r2, #64	; 0x40
 801b22a:	2140      	movs	r1, #64	; 0x40
 801b22c:	2009      	movs	r0, #9
 801b22e:	f7e9 fa87 	bl	8004740 <st25r3911CheckReg>
 801b232:	4603      	mov	r3, r0
 801b234:	2b00      	cmp	r3, #0
 801b236:	d017      	beq.n	801b268 <rfalTransceiveRx+0x35c>
 801b238:	4b7b      	ldr	r3, [pc, #492]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b23a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b23c:	461a      	mov	r2, r3
 801b23e:	7bfb      	ldrb	r3, [r7, #15]
 801b240:	4413      	add	r3, r2
 801b242:	2b00      	cmp	r3, #0
 801b244:	d010      	beq.n	801b268 <rfalTransceiveRx+0x35c>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 801b246:	7bfb      	ldrb	r3, [r7, #15]
 801b248:	2b02      	cmp	r3, #2
 801b24a:	d903      	bls.n	801b254 <rfalTransceiveRx+0x348>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 801b24c:	7bfb      	ldrb	r3, [r7, #15]
 801b24e:	3b02      	subs	r3, #2
 801b250:	73fb      	strb	r3, [r7, #15]
 801b252:	e009      	b.n	801b268 <rfalTransceiveRx+0x35c>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 801b254:	4b74      	ldr	r3, [pc, #464]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b256:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b258:	2b02      	cmp	r3, #2
 801b25a:	d905      	bls.n	801b268 <rfalTransceiveRx+0x35c>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 801b25c:	4b72      	ldr	r3, [pc, #456]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b25e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b260:	3b02      	subs	r3, #2
 801b262:	b29a      	uxth	r2, r3
 801b264:	4b70      	ldr	r3, [pc, #448]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b266:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 801b268:	4b6f      	ldr	r3, [pc, #444]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b26a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
 801b26e:	b29b      	uxth	r3, r3
 801b270:	4413      	add	r3, r2
 801b272:	b29a      	uxth	r2, r3
 801b274:	4b6c      	ldr	r3, [pc, #432]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b276:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 801b278:	4b6b      	ldr	r3, [pc, #428]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b27a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b27c:	4b6a      	ldr	r3, [pc, #424]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b280:	3307      	adds	r3, #7
 801b282:	08db      	lsrs	r3, r3, #3
 801b284:	b29b      	uxth	r3, r3
 801b286:	429a      	cmp	r2, r3
 801b288:	d90f      	bls.n	801b2aa <rfalTransceiveRx+0x39e>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 801b28a:	4b67      	ldr	r3, [pc, #412]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b28e:	3307      	adds	r3, #7
 801b290:	08db      	lsrs	r3, r3, #3
 801b292:	b2da      	uxtb	r2, r3
 801b294:	4b64      	ldr	r3, [pc, #400]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b296:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b298:	b2db      	uxtb	r3, r3
 801b29a:	1ad3      	subs	r3, r2, r3
 801b29c:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 801b29e:	4b62      	ldr	r3, [pc, #392]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2a0:	2201      	movs	r2, #1
 801b2a2:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b2a4:	4b60      	ldr	r3, [pc, #384]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2a6:	225a      	movs	r2, #90	; 0x5a
 801b2a8:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 801b2aa:	4b5f      	ldr	r3, [pc, #380]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2ae:	4a5e      	ldr	r2, [pc, #376]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2b0:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801b2b2:	4413      	add	r3, r2
 801b2b4:	7bfa      	ldrb	r2, [r7, #15]
 801b2b6:	4611      	mov	r1, r2
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7e9 febd 	bl	8005038 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 801b2be:	4b5a      	ldr	r3, [pc, #360]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d019      	beq.n	801b2fa <rfalTransceiveRx+0x3ee>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 801b2c6:	4b58      	ldr	r3, [pc, #352]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2c8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b2ca:	4b57      	ldr	r3, [pc, #348]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2ce:	00d2      	lsls	r2, r2, #3
 801b2d0:	b292      	uxth	r2, r2
 801b2d2:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 801b2d4:	f000 f98e 	bl	801b5f4 <rfalFIFOStatusIsIncompleteByte>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d00d      	beq.n	801b2fa <rfalTransceiveRx+0x3ee>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 801b2de:	f000 f9ad 	bl	801b63c <rfalFIFOGetNumIncompleteBits>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	f1c3 0208 	rsb	r2, r3, #8
 801b2e8:	4b4f      	ldr	r3, [pc, #316]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2ec:	8819      	ldrh	r1, [r3, #0]
 801b2ee:	b292      	uxth	r2, r2
 801b2f0:	4b4d      	ldr	r3, [pc, #308]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2f4:	1a8a      	subs	r2, r1, r2
 801b2f6:	b292      	uxth	r2, r2
 801b2f8:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 801b2fa:	4b4b      	ldr	r3, [pc, #300]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b2fc:	785b      	ldrb	r3, [r3, #1]
 801b2fe:	2b07      	cmp	r3, #7
 801b300:	d003      	beq.n	801b30a <rfalTransceiveRx+0x3fe>
 801b302:	4b49      	ldr	r3, [pc, #292]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b304:	785b      	ldrb	r3, [r3, #1]
 801b306:	2b08      	cmp	r3, #8
 801b308:	d165      	bne.n	801b3d6 <rfalTransceiveRx+0x4ca>
 801b30a:	4b47      	ldr	r3, [pc, #284]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b30c:	8adb      	ldrh	r3, [r3, #22]
 801b30e:	2b02      	cmp	r3, #2
 801b310:	d161      	bne.n	801b3d6 <rfalTransceiveRx+0x4ca>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 801b312:	2300      	movs	r3, #0
 801b314:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 801b316:	4b44      	ldr	r3, [pc, #272]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b318:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b31a:	4b43      	ldr	r3, [pc, #268]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b31c:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 801b31e:	4b42      	ldr	r3, [pc, #264]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b320:	f8d3 53d4 	ldr.w	r5, [r3, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 801b324:	4b40      	ldr	r3, [pc, #256]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b326:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 801b32a:	3307      	adds	r3, #7
 801b32c:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 801b32e:	b29e      	uxth	r6, r3
 801b330:	4b3d      	ldr	r3, [pc, #244]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b332:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801b336:	4a3c      	ldr	r2, [pc, #240]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b338:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 801b33c:	493a      	ldr	r1, [pc, #232]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b33e:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 801b340:	2908      	cmp	r1, #8
 801b342:	bf0c      	ite	eq
 801b344:	2101      	moveq	r1, #1
 801b346:	2100      	movne	r1, #0
 801b348:	b2c9      	uxtb	r1, r1
 801b34a:	9103      	str	r1, [sp, #12]
 801b34c:	9202      	str	r2, [sp, #8]
 801b34e:	9301      	str	r3, [sp, #4]
 801b350:	1dbb      	adds	r3, r7, #6
 801b352:	9300      	str	r3, [sp, #0]
 801b354:	4633      	mov	r3, r6
 801b356:	462a      	mov	r2, r5
 801b358:	4621      	mov	r1, r4
 801b35a:	f7f6 fd93 	bl	8011e84 <iso15693VICCDecode>
 801b35e:	4603      	mov	r3, r0
 801b360:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 801b362:	89bb      	ldrh	r3, [r7, #12]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d002      	beq.n	801b36e <rfalTransceiveRx+0x462>
 801b368:	89bb      	ldrh	r3, [r7, #12]
 801b36a:	2b15      	cmp	r3, #21
 801b36c:	d11f      	bne.n	801b3ae <rfalTransceiveRx+0x4a2>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 801b36e:	4b2e      	ldr	r3, [pc, #184]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b370:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801b374:	f003 0302 	and.w	r3, r3, #2
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d118      	bne.n	801b3ae <rfalTransceiveRx+0x4a2>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 801b37c:	4b2a      	ldr	r3, [pc, #168]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b37e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801b382:	881b      	ldrh	r3, [r3, #0]
 801b384:	f003 0307 	and.w	r3, r3, #7
 801b388:	b29b      	uxth	r3, r3
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d10f      	bne.n	801b3ae <rfalTransceiveRx+0x4a2>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 801b38e:	4b26      	ldr	r3, [pc, #152]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b390:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801b394:	881b      	ldrh	r3, [r3, #0]
 801b396:	2b0f      	cmp	r3, #15
 801b398:	d909      	bls.n	801b3ae <rfalTransceiveRx+0x4a2>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 801b39a:	4b23      	ldr	r3, [pc, #140]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b39c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801b3a0:	881a      	ldrh	r2, [r3, #0]
 801b3a2:	4b21      	ldr	r3, [pc, #132]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3a4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801b3a8:	3a10      	subs	r2, #16
 801b3aa:	b292      	uxth	r2, r2
 801b3ac:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 801b3ae:	4a1e      	ldr	r2, [pc, #120]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3b0:	4b1d      	ldr	r3, [pc, #116]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3b2:	f102 041c 	add.w	r4, r2, #28
 801b3b6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801b3ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b3be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b3c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 801b3c6:	89bb      	ldrh	r3, [r7, #12]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d001      	beq.n	801b3d0 <rfalTransceiveRx+0x4c4>
 801b3cc:	89bb      	ldrh	r3, [r7, #12]
 801b3ce:	e000      	b.n	801b3d2 <rfalTransceiveRx+0x4c6>
 801b3d0:	2302      	movs	r3, #2
 801b3d2:	4a15      	ldr	r2, [pc, #84]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3d4:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 801b3d6:	4b14      	ldr	r3, [pc, #80]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3d8:	8adb      	ldrh	r3, [r3, #22]
 801b3da:	2b02      	cmp	r3, #2
 801b3dc:	d003      	beq.n	801b3e6 <rfalTransceiveRx+0x4da>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 801b3de:	4b12      	ldr	r3, [pc, #72]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3e0:	225a      	movs	r2, #90	; 0x5a
 801b3e2:	751a      	strb	r2, [r3, #20]
                break;
 801b3e4:	e0d5      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 801b3e6:	4b10      	ldr	r3, [pc, #64]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3e8:	785b      	ldrb	r3, [r3, #1]
 801b3ea:	2b09      	cmp	r3, #9
 801b3ec:	d003      	beq.n	801b3f6 <rfalTransceiveRx+0x4ea>
 801b3ee:	4b0e      	ldr	r3, [pc, #56]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3f0:	785b      	ldrb	r3, [r3, #1]
 801b3f2:	2b0d      	cmp	r3, #13
 801b3f4:	d103      	bne.n	801b3fe <rfalTransceiveRx+0x4f2>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 801b3f6:	4b0c      	ldr	r3, [pc, #48]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b3f8:	2258      	movs	r2, #88	; 0x58
 801b3fa:	751a      	strb	r2, [r3, #20]
                break;
 801b3fc:	e0c9      	b.n	801b592 <rfalTransceiveRx+0x686>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 801b3fe:	4b0a      	ldr	r3, [pc, #40]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b400:	2259      	movs	r2, #89	; 0x59
 801b402:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 801b404:	4b08      	ldr	r3, [pc, #32]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b406:	799b      	ldrb	r3, [r3, #6]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d003      	beq.n	801b414 <rfalTransceiveRx+0x508>
 801b40c:	2100      	movs	r1, #0
 801b40e:	2001      	movs	r0, #1
 801b410:	f7e9 fc88 	bl	8004d24 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 801b414:	f7ff fa82 	bl	801a91c <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 801b418:	4b03      	ldr	r3, [pc, #12]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b41a:	2200      	movs	r2, #0
 801b41c:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 801b41e:	4b02      	ldr	r3, [pc, #8]	; (801b428 <rfalTransceiveRx+0x51c>)
 801b420:	2200      	movs	r2, #0
 801b422:	751a      	strb	r2, [r3, #20]
            break;
 801b424:	e0b5      	b.n	801b592 <rfalTransceiveRx+0x686>
 801b426:	bf00      	nop
 801b428:	20003c40 	.word	0x20003c40
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 801b42c:	200a      	movs	r0, #10
 801b42e:	f7ea f8cd 	bl	80055cc <timerCalculateTimer>
 801b432:	4603      	mov	r3, r0
 801b434:	4a59      	ldr	r2, [pc, #356]	; (801b59c <rfalTransceiveRx+0x690>)
 801b436:	6493      	str	r3, [r2, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 801b438:	f000 f8d0 	bl	801b5dc <rfalFIFOStatusGetNumBytes>
 801b43c:	4603      	mov	r3, r0
 801b43e:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 801b440:	4b56      	ldr	r3, [pc, #344]	; (801b59c <rfalTransceiveRx+0x690>)
 801b442:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b444:	7bfb      	ldrb	r3, [r7, #15]
 801b446:	b29b      	uxth	r3, r3
 801b448:	4413      	add	r3, r2
 801b44a:	b29a      	uxth	r2, r3
 801b44c:	4b53      	ldr	r3, [pc, #332]	; (801b59c <rfalTransceiveRx+0x690>)
 801b44e:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 801b450:	4b52      	ldr	r3, [pc, #328]	; (801b59c <rfalTransceiveRx+0x690>)
 801b452:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b454:	4b51      	ldr	r3, [pc, #324]	; (801b59c <rfalTransceiveRx+0x690>)
 801b456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b458:	3307      	adds	r3, #7
 801b45a:	08db      	lsrs	r3, r3, #3
 801b45c:	b29b      	uxth	r3, r3
 801b45e:	429a      	cmp	r2, r3
 801b460:	d90a      	bls.n	801b478 <rfalTransceiveRx+0x56c>
 801b462:	4b4e      	ldr	r3, [pc, #312]	; (801b59c <rfalTransceiveRx+0x690>)
 801b464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b466:	3307      	adds	r3, #7
 801b468:	08db      	lsrs	r3, r3, #3
 801b46a:	b2da      	uxtb	r2, r3
 801b46c:	4b4b      	ldr	r3, [pc, #300]	; (801b59c <rfalTransceiveRx+0x690>)
 801b46e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b470:	b2db      	uxtb	r3, r3
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	b2db      	uxtb	r3, r3
 801b476:	e000      	b.n	801b47a <rfalTransceiveRx+0x56e>
 801b478:	7bfb      	ldrb	r3, [r7, #15]
 801b47a:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 801b47c:	4b47      	ldr	r3, [pc, #284]	; (801b59c <rfalTransceiveRx+0x690>)
 801b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b480:	4a46      	ldr	r2, [pc, #280]	; (801b59c <rfalTransceiveRx+0x690>)
 801b482:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801b484:	4413      	add	r3, r2
 801b486:	7bba      	ldrb	r2, [r7, #14]
 801b488:	4611      	mov	r1, r2
 801b48a:	4618      	mov	r0, r3
 801b48c:	f7e9 fdd4 	bl	8005038 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 801b490:	4b42      	ldr	r3, [pc, #264]	; (801b59c <rfalTransceiveRx+0x690>)
 801b492:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b494:	7bbb      	ldrb	r3, [r7, #14]
 801b496:	b29b      	uxth	r3, r3
 801b498:	4413      	add	r3, r2
 801b49a:	b29a      	uxth	r2, r3
 801b49c:	4b3f      	ldr	r3, [pc, #252]	; (801b59c <rfalTransceiveRx+0x690>)
 801b49e:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 801b4a0:	7bba      	ldrb	r2, [r7, #14]
 801b4a2:	7bfb      	ldrb	r3, [r7, #15]
 801b4a4:	429a      	cmp	r2, r3
 801b4a6:	d207      	bcs.n	801b4b8 <rfalTransceiveRx+0x5ac>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 801b4a8:	7bfa      	ldrb	r2, [r7, #15]
 801b4aa:	7bbb      	ldrb	r3, [r7, #14]
 801b4ac:	1ad3      	subs	r3, r2, r3
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	4619      	mov	r1, r3
 801b4b2:	2000      	movs	r0, #0
 801b4b4:	f7e9 fdc0 	bl	8005038 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 801b4b8:	f000 f884 	bl	801b5c4 <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 801b4bc:	4b37      	ldr	r3, [pc, #220]	; (801b59c <rfalTransceiveRx+0x690>)
 801b4be:	2254      	movs	r2, #84	; 0x54
 801b4c0:	751a      	strb	r2, [r3, #20]
            break;
 801b4c2:	e066      	b.n	801b592 <rfalTransceiveRx+0x686>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 801b4c4:	4b35      	ldr	r3, [pc, #212]	; (801b59c <rfalTransceiveRx+0x690>)
 801b4c6:	799b      	ldrb	r3, [r3, #6]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d003      	beq.n	801b4d4 <rfalTransceiveRx+0x5c8>
 801b4cc:	2100      	movs	r1, #0
 801b4ce:	2001      	movs	r0, #1
 801b4d0:	f7e9 fc28 	bl	8004d24 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 801b4d4:	f7ff fa22 	bl	801a91c <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 801b4d8:	4b30      	ldr	r3, [pc, #192]	; (801b59c <rfalTransceiveRx+0x690>)
 801b4da:	8adb      	ldrh	r3, [r3, #22]
 801b4dc:	2b02      	cmp	r3, #2
 801b4de:	d102      	bne.n	801b4e6 <rfalTransceiveRx+0x5da>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 801b4e0:	4b2e      	ldr	r3, [pc, #184]	; (801b59c <rfalTransceiveRx+0x690>)
 801b4e2:	2208      	movs	r2, #8
 801b4e4:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 801b4e6:	4b2d      	ldr	r3, [pc, #180]	; (801b59c <rfalTransceiveRx+0x690>)
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	751a      	strb	r2, [r3, #20]
            break;
 801b4ec:	e051      	b.n	801b592 <rfalTransceiveRx+0x686>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 801b4ee:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 801b4f2:	f7e9 ffe3 	bl	80054bc <st25r3911GetInterrupt>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d043      	beq.n	801b588 <rfalTransceiveRx+0x67c>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b506:	2b00      	cmp	r3, #0
 801b508:	d002      	beq.n	801b510 <rfalTransceiveRx+0x604>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 801b50a:	4b24      	ldr	r3, [pc, #144]	; (801b59c <rfalTransceiveRx+0x690>)
 801b50c:	2253      	movs	r2, #83	; 0x53
 801b50e:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b516:	2b00      	cmp	r3, #0
 801b518:	d038      	beq.n	801b58c <rfalTransceiveRx+0x680>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 801b51a:	4b20      	ldr	r3, [pc, #128]	; (801b59c <rfalTransceiveRx+0x690>)
 801b51c:	2225      	movs	r2, #37	; 0x25
 801b51e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b520:	4b1e      	ldr	r3, [pc, #120]	; (801b59c <rfalTransceiveRx+0x690>)
 801b522:	225a      	movs	r2, #90	; 0x5a
 801b524:	751a      	strb	r2, [r3, #20]
            }
            break;
 801b526:	e031      	b.n	801b58c <rfalTransceiveRx+0x680>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 801b528:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801b52c:	f7e9 ffc6 	bl	80054bc <st25r3911GetInterrupt>
 801b530:	4603      	mov	r3, r0
 801b532:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d02a      	beq.n	801b590 <rfalTransceiveRx+0x684>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 801b53a:	68bb      	ldr	r3, [r7, #8]
 801b53c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b540:	2b00      	cmp	r3, #0
 801b542:	d003      	beq.n	801b54c <rfalTransceiveRx+0x640>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 801b544:	4b15      	ldr	r3, [pc, #84]	; (801b59c <rfalTransceiveRx+0x690>)
 801b546:	2259      	movs	r2, #89	; 0x59
 801b548:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 801b54a:	e022      	b.n	801b592 <rfalTransceiveRx+0x686>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b552:	2b00      	cmp	r3, #0
 801b554:	d006      	beq.n	801b564 <rfalTransceiveRx+0x658>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 801b556:	4b11      	ldr	r3, [pc, #68]	; (801b59c <rfalTransceiveRx+0x690>)
 801b558:	221d      	movs	r2, #29
 801b55a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b55c:	4b0f      	ldr	r3, [pc, #60]	; (801b59c <rfalTransceiveRx+0x690>)
 801b55e:	225a      	movs	r2, #90	; 0x5a
 801b560:	751a      	strb	r2, [r3, #20]
            break;
 801b562:	e016      	b.n	801b592 <rfalTransceiveRx+0x686>
               gRFAL.TxRx.status = ERR_IO;
 801b564:	4b0d      	ldr	r3, [pc, #52]	; (801b59c <rfalTransceiveRx+0x690>)
 801b566:	2203      	movs	r2, #3
 801b568:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b56a:	4b0c      	ldr	r3, [pc, #48]	; (801b59c <rfalTransceiveRx+0x690>)
 801b56c:	225a      	movs	r2, #90	; 0x5a
 801b56e:	751a      	strb	r2, [r3, #20]
            break;
 801b570:	e00f      	b.n	801b592 <rfalTransceiveRx+0x686>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 801b572:	4b0a      	ldr	r3, [pc, #40]	; (801b59c <rfalTransceiveRx+0x690>)
 801b574:	2208      	movs	r2, #8
 801b576:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801b578:	4b08      	ldr	r3, [pc, #32]	; (801b59c <rfalTransceiveRx+0x690>)
 801b57a:	225a      	movs	r2, #90	; 0x5a
 801b57c:	751a      	strb	r2, [r3, #20]
            break;           
 801b57e:	e008      	b.n	801b592 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 801b580:	bf00      	nop
 801b582:	e006      	b.n	801b592 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 801b584:	bf00      	nop
 801b586:	e004      	b.n	801b592 <rfalTransceiveRx+0x686>
                break;  /* No interrupt to process */
 801b588:	bf00      	nop
 801b58a:	e002      	b.n	801b592 <rfalTransceiveRx+0x686>
            break;
 801b58c:	bf00      	nop
 801b58e:	e000      	b.n	801b592 <rfalTransceiveRx+0x686>
               break;  /* No interrupt to process */
 801b590:	bf00      	nop
    }    
}
 801b592:	bf00      	nop
 801b594:	3714      	adds	r7, #20
 801b596:	46bd      	mov	sp, r7
 801b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b59a:	bf00      	nop
 801b59c:	20003c40 	.word	0x20003c40

0801b5a0 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 801b5a4:	4b05      	ldr	r3, [pc, #20]	; (801b5bc <rfalFIFOStatusUpdate+0x1c>)
 801b5a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b5aa:	2bff      	cmp	r3, #255	; 0xff
 801b5ac:	d104      	bne.n	801b5b8 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 801b5ae:	2202      	movs	r2, #2
 801b5b0:	4903      	ldr	r1, [pc, #12]	; (801b5c0 <rfalFIFOStatusUpdate+0x20>)
 801b5b2:	201a      	movs	r0, #26
 801b5b4:	f7e9 fb16 	bl	8004be4 <st25r3911ReadMultipleRegisters>
    }
}
 801b5b8:	bf00      	nop
 801b5ba:	bd80      	pop	{r7, pc}
 801b5bc:	20003c40 	.word	0x20003c40
 801b5c0:	20003c7e 	.word	0x20003c7e

0801b5c4 <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 801b5c4:	b480      	push	{r7}
 801b5c6:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 801b5c8:	4b03      	ldr	r3, [pc, #12]	; (801b5d8 <rfalFIFOStatusClear+0x14>)
 801b5ca:	22ff      	movs	r2, #255	; 0xff
 801b5cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 801b5d0:	bf00      	nop
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bc80      	pop	{r7}
 801b5d6:	4770      	bx	lr
 801b5d8:	20003c40 	.word	0x20003c40

0801b5dc <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 801b5e0:	f7ff ffde 	bl	801b5a0 <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 801b5e4:	4b02      	ldr	r3, [pc, #8]	; (801b5f0 <rfalFIFOStatusGetNumBytes+0x14>)
 801b5e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	20003c40 	.word	0x20003c40

0801b5f4 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 801b5f8:	f7ff ffd2 	bl	801b5a0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 801b5fc:	4b05      	ldr	r3, [pc, #20]	; (801b614 <rfalFIFOStatusIsIncompleteByte+0x20>)
 801b5fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b602:	f003 031e 	and.w	r3, r3, #30
 801b606:	2b00      	cmp	r3, #0
 801b608:	bf14      	ite	ne
 801b60a:	2301      	movne	r3, #1
 801b60c:	2300      	moveq	r3, #0
 801b60e:	b2db      	uxtb	r3, r3
}
 801b610:	4618      	mov	r0, r3
 801b612:	bd80      	pop	{r7, pc}
 801b614:	20003c40 	.word	0x20003c40

0801b618 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 801b61c:	f7ff ffc0 	bl	801b5a0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 801b620:	4b05      	ldr	r3, [pc, #20]	; (801b638 <rfalFIFOStatusIsMissingPar+0x20>)
 801b622:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b626:	f003 0301 	and.w	r3, r3, #1
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	bf14      	ite	ne
 801b62e:	2301      	movne	r3, #1
 801b630:	2300      	moveq	r3, #0
 801b632:	b2db      	uxtb	r3, r3
}
 801b634:	4618      	mov	r0, r3
 801b636:	bd80      	pop	{r7, pc}
 801b638:	20003c40 	.word	0x20003c40

0801b63c <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 801b640:	f7ff ffae 	bl	801b5a0 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 801b644:	4b04      	ldr	r3, [pc, #16]	; (801b658 <rfalFIFOGetNumIncompleteBits+0x1c>)
 801b646:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b64a:	085b      	lsrs	r3, r3, #1
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	f003 0307 	and.w	r3, r3, #7
 801b652:	b2db      	uxtb	r3, r3
}
 801b654:	4618      	mov	r0, r3
 801b656:	bd80      	pop	{r7, pc}
 801b658:	20003c40 	.word	0x20003c40

0801b65c <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b086      	sub	sp, #24
 801b660:	af00      	add	r7, sp, #0
 801b662:	60b9      	str	r1, [r7, #8]
 801b664:	607b      	str	r3, [r7, #4]
 801b666:	4603      	mov	r3, r0
 801b668:	73fb      	strb	r3, [r7, #15]
 801b66a:	4613      	mov	r3, r2
 801b66c:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 801b66e:	2208      	movs	r2, #8
 801b670:	2108      	movs	r1, #8
 801b672:	2002      	movs	r0, #2
 801b674:	f7e9 f864 	bl	8004740 <st25r3911CheckReg>
 801b678:	4603      	mov	r3, r0
 801b67a:	f083 0301 	eor.w	r3, r3, #1
 801b67e:	b2db      	uxtb	r3, r3
 801b680:	2b00      	cmp	r3, #0
 801b682:	d10b      	bne.n	801b69c <rfalISO14443ATransceiveShortFrame+0x40>
 801b684:	4b70      	ldr	r3, [pc, #448]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b686:	781b      	ldrb	r3, [r3, #0]
 801b688:	2b01      	cmp	r3, #1
 801b68a:	d907      	bls.n	801b69c <rfalISO14443ATransceiveShortFrame+0x40>
 801b68c:	4b6e      	ldr	r3, [pc, #440]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b68e:	785b      	ldrb	r3, [r3, #1]
 801b690:	2b01      	cmp	r3, #1
 801b692:	d005      	beq.n	801b6a0 <rfalISO14443ATransceiveShortFrame+0x44>
 801b694:	4b6c      	ldr	r3, [pc, #432]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b696:	785b      	ldrb	r3, [r3, #1]
 801b698:	2b02      	cmp	r3, #2
 801b69a:	d001      	beq.n	801b6a0 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 801b69c:	2321      	movs	r3, #33	; 0x21
 801b69e:	e0cf      	b.n	801b840 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d006      	beq.n	801b6b4 <rfalISO14443ATransceiveShortFrame+0x58>
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d003      	beq.n	801b6b4 <rfalISO14443ATransceiveShortFrame+0x58>
 801b6ac:	6a3b      	ldr	r3, [r7, #32]
 801b6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6b2:	d101      	bne.n	801b6b8 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 801b6b4:	2307      	movs	r3, #7
 801b6b6:	e0c3      	b.n	801b840 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 801b6b8:	7bfb      	ldrb	r3, [r7, #15]
 801b6ba:	2b26      	cmp	r3, #38	; 0x26
 801b6bc:	d004      	beq.n	801b6c8 <rfalISO14443ATransceiveShortFrame+0x6c>
 801b6be:	2b52      	cmp	r3, #82	; 0x52
 801b6c0:	d105      	bne.n	801b6ce <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 801b6c2:	23c7      	movs	r3, #199	; 0xc7
 801b6c4:	757b      	strb	r3, [r7, #21]
            break;
 801b6c6:	e004      	b.n	801b6d2 <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 801b6c8:	23c6      	movs	r3, #198	; 0xc6
 801b6ca:	757b      	strb	r3, [r7, #21]
            break;
 801b6cc:	e001      	b.n	801b6d2 <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 801b6ce:	2307      	movs	r3, #7
 801b6d0:	e0b6      	b.n	801b840 <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 801b6d2:	2101      	movs	r1, #1
 801b6d4:	2005      	movs	r0, #5
 801b6d6:	f7e9 fbdc 	bl	8004e92 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801b6da:	2180      	movs	r1, #128	; 0x80
 801b6dc:	2009      	movs	r0, #9
 801b6de:	f7e9 fbd8 	bl	8004e92 <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 801b6e2:	bf00      	nop
 801b6e4:	f7fe fdce 	bl	801a284 <rfalIsGTExpired>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	f083 0301 	eor.w	r3, r3, #1
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d1f7      	bne.n	801b6e4 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 801b6f4:	bf00      	nop
 801b6f6:	2204      	movs	r2, #4
 801b6f8:	2104      	movs	r1, #4
 801b6fa:	202b      	movs	r0, #43	; 0x2b
 801b6fc:	f7e9 f820 	bl	8004740 <st25r3911CheckReg>
 801b700:	4603      	mov	r3, r0
 801b702:	2b00      	cmp	r3, #0
 801b704:	d1f7      	bne.n	801b6f6 <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 801b706:	4b50      	ldr	r3, [pc, #320]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b708:	2200      	movs	r2, #0
 801b70a:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 801b70c:	4b4e      	ldr	r3, [pc, #312]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b70e:	2203      	movs	r2, #3
 801b710:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 801b712:	4a4d      	ldr	r2, [pc, #308]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 801b718:	7bbb      	ldrb	r3, [r7, #14]
 801b71a:	b29a      	uxth	r2, r3
 801b71c:	4b4a      	ldr	r3, [pc, #296]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b71e:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 801b720:	4a49      	ldr	r2, [pc, #292]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 801b726:	6a3b      	ldr	r3, [r7, #32]
 801b728:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801b72c:	4a47      	ldr	r2, [pc, #284]	; (801b84c <rfalISO14443ATransceiveShortFrame+0x1f0>)
 801b72e:	4293      	cmp	r3, r2
 801b730:	bf28      	it	cs
 801b732:	4613      	movcs	r3, r2
 801b734:	099b      	lsrs	r3, r3, #6
 801b736:	4618      	mov	r0, r3
 801b738:	f7e9 f844 	bl	80047c4 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 801b73c:	4b42      	ldr	r3, [pc, #264]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b73e:	68db      	ldr	r3, [r3, #12]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d010      	beq.n	801b766 <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 801b744:	4b40      	ldr	r3, [pc, #256]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b746:	68db      	ldr	r3, [r3, #12]
 801b748:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801b74c:	d306      	bcc.n	801b75c <rfalISO14443ATransceiveShortFrame+0x100>
 801b74e:	4b3e      	ldr	r3, [pc, #248]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b750:	68db      	ldr	r3, [r3, #12]
 801b752:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801b756:	099b      	lsrs	r3, r3, #6
 801b758:	b2db      	uxtb	r3, r3
 801b75a:	e000      	b.n	801b75e <rfalISO14443ATransceiveShortFrame+0x102>
 801b75c:	2304      	movs	r3, #4
 801b75e:	4619      	mov	r1, r3
 801b760:	200e      	movs	r0, #14
 801b762:	f7e9 fb27 	bl	8004db4 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 801b766:	4b38      	ldr	r3, [pc, #224]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b768:	691b      	ldr	r3, [r3, #16]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d014      	beq.n	801b798 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 801b76e:	4b36      	ldr	r3, [pc, #216]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b770:	691b      	ldr	r3, [r3, #16]
 801b772:	f240 423b 	movw	r2, #1083	; 0x43b
 801b776:	4293      	cmp	r3, r2
 801b778:	d804      	bhi.n	801b784 <rfalISO14443ATransceiveShortFrame+0x128>
 801b77a:	4b33      	ldr	r3, [pc, #204]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b77c:	691b      	ldr	r3, [r3, #16]
 801b77e:	08db      	lsrs	r3, r3, #3
 801b780:	b29b      	uxth	r3, r3
 801b782:	e005      	b.n	801b790 <rfalISO14443ATransceiveShortFrame+0x134>
 801b784:	4b30      	ldr	r3, [pc, #192]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b786:	691b      	ldr	r3, [r3, #16]
 801b788:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801b78c:	08db      	lsrs	r3, r3, #3
 801b78e:	b29b      	uxth	r3, r3
 801b790:	2120      	movs	r1, #32
 801b792:	4618      	mov	r0, r3
 801b794:	f7e8 ffa0 	bl	80046d8 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 801b798:	f7ff f8d6 	bl	801a948 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 801b79c:	2004      	movs	r0, #4
 801b79e:	f7e9 fe8d 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801b7a2:	2004      	movs	r0, #4
 801b7a4:	f7e9 fec6 	bl	8005534 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 801b7a8:	4b27      	ldr	r3, [pc, #156]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b7aa:	795b      	ldrb	r3, [r3, #5]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d005      	beq.n	801b7bc <rfalISO14443ATransceiveShortFrame+0x160>
 801b7b0:	4b25      	ldr	r3, [pc, #148]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b7b2:	795b      	ldrb	r3, [r3, #5]
 801b7b4:	4619      	mov	r1, r3
 801b7b6:	2001      	movs	r0, #1
 801b7b8:	f7e9 fab4 	bl	8004d24 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 801b7bc:	2100      	movs	r1, #0
 801b7be:	201e      	movs	r0, #30
 801b7c0:	f7e9 faf8 	bl	8004db4 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 801b7c4:	7d7b      	ldrb	r3, [r7, #21]
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7e9 fc82 	bl	80050d0 <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 801b7cc:	6a3b      	ldr	r3, [r7, #32]
 801b7ce:	f646 12ef 	movw	r2, #27119	; 0x69ef
 801b7d2:	4293      	cmp	r3, r2
 801b7d4:	d906      	bls.n	801b7e4 <rfalISO14443ATransceiveShortFrame+0x188>
 801b7d6:	6a3b      	ldr	r3, [r7, #32]
 801b7d8:	4a1d      	ldr	r2, [pc, #116]	; (801b850 <rfalISO14443ATransceiveShortFrame+0x1f4>)
 801b7da:	fba2 2303 	umull	r2, r3, r2, r3
 801b7de:	0b1b      	lsrs	r3, r3, #12
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	e000      	b.n	801b7e6 <rfalISO14443ATransceiveShortFrame+0x18a>
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	2008      	movs	r0, #8
 801b7ea:	f7e9 fe13 	bl	8005414 <st25r3911WaitForInterruptsTimed>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d102      	bne.n	801b7fa <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 801b7f4:	2303      	movs	r3, #3
 801b7f6:	82fb      	strh	r3, [r7, #22]
 801b7f8:	e016      	b.n	801b828 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 801b7fa:	4b13      	ldr	r3, [pc, #76]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b7fc:	799b      	ldrb	r3, [r3, #6]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d005      	beq.n	801b80e <rfalISO14443ATransceiveShortFrame+0x1b2>
 801b802:	4b11      	ldr	r3, [pc, #68]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b804:	799b      	ldrb	r3, [r3, #6]
 801b806:	4619      	mov	r1, r3
 801b808:	2001      	movs	r0, #1
 801b80a:	f7e9 fa8b 	bl	8004d24 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 801b80e:	4b0e      	ldr	r3, [pc, #56]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b810:	2203      	movs	r2, #3
 801b812:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 801b814:	4b0c      	ldr	r3, [pc, #48]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b816:	2251      	movs	r2, #81	; 0x51
 801b818:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 801b81a:	4b0b      	ldr	r3, [pc, #44]	; (801b848 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 801b81c:	2202      	movs	r2, #2
 801b81e:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 801b820:	f7fe ff62 	bl	801a6e8 <rfalTransceiveBlockingRx>
 801b824:	4603      	mov	r3, r0
 801b826:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 801b828:	2004      	movs	r0, #4
 801b82a:	f7e9 fe8f 	bl	800554c <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 801b82e:	2101      	movs	r1, #1
 801b830:	2005      	movs	r0, #5
 801b832:	f7e9 fb0b 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801b836:	2180      	movs	r1, #128	; 0x80
 801b838:	2009      	movs	r0, #9
 801b83a:	f7e9 fb07 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    return ret;
 801b83e:	8afb      	ldrh	r3, [r7, #22]
}
 801b840:	4618      	mov	r0, r3
 801b842:	3718      	adds	r7, #24
 801b844:	46bd      	mov	sp, r7
 801b846:	bd80      	pop	{r7, pc}
 801b848:	20003c40 	.word	0x20003c40
 801b84c:	0ffff000 	.word	0x0ffff000
 801b850:	4d542005 	.word	0x4d542005

0801b854 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b08e      	sub	sp, #56	; 0x38
 801b858:	af00      	add	r7, sp, #0
 801b85a:	60f8      	str	r0, [r7, #12]
 801b85c:	60b9      	str	r1, [r7, #8]
 801b85e:	607a      	str	r2, [r7, #4]
 801b860:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 801b862:	4b77      	ldr	r3, [pc, #476]	; (801ba40 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	2b01      	cmp	r3, #1
 801b868:	d903      	bls.n	801b872 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 801b86a:	4b75      	ldr	r3, [pc, #468]	; (801ba40 <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 801b86c:	785b      	ldrb	r3, [r3, #1]
 801b86e:	2b01      	cmp	r3, #1
 801b870:	d001      	beq.n	801b876 <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 801b872:	2321      	movs	r3, #33	; 0x21
 801b874:	e0df      	b.n	801ba36 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d008      	beq.n	801b88e <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801b87c:	68bb      	ldr	r3, [r7, #8]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d005      	beq.n	801b88e <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d002      	beq.n	801b88e <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 801b888:	683b      	ldr	r3, [r7, #0]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d101      	bne.n	801b892 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 801b88e:	2307      	movs	r3, #7
 801b890:	e0d1      	b.n	801ba36 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801b892:	f240 1003 	movw	r0, #259	; 0x103
 801b896:	f7f5 ffff 	bl	8011898 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 801b89a:	2101      	movs	r1, #1
 801b89c:	2005      	movs	r0, #5
 801b89e:	f7e9 faf8 	bl	8004e92 <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801b8a2:	2180      	movs	r1, #128	; 0x80
 801b8a4:	2009      	movs	r0, #9
 801b8a6:	f7e9 faf4 	bl	8004e92 <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 801b8aa:	230b      	movs	r3, #11
 801b8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	b29b      	uxth	r3, r3
 801b8b8:	00db      	lsls	r3, r3, #3
 801b8ba:	b29a      	uxth	r2, r3
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	781b      	ldrb	r3, [r3, #0]
 801b8c0:	b29b      	uxth	r3, r3
 801b8c2:	4413      	add	r3, r2
 801b8c4:	b29b      	uxth	r3, r3
 801b8c6:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	781b      	ldrb	r3, [r3, #0]
 801b8cc:	461a      	mov	r2, r3
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	4413      	add	r3, r2
 801b8d2:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 801b8d4:	2328      	movs	r3, #40	; 0x28
 801b8d6:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 801b8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8de:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 801b8e0:	f107 0318 	add.w	r3, r7, #24
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	f7fe fd5d 	bl	801a3a4 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 801b8ea:	2004      	movs	r0, #4
 801b8ec:	f7e9 fde6 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 801b8f0:	2004      	movs	r0, #4
 801b8f2:	f7e9 fe1f 	bl	8005534 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	781b      	ldrb	r3, [r3, #0]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d02d      	beq.n	801b960 <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 801b904:	68bb      	ldr	r3, [r7, #8]
 801b906:	781b      	ldrb	r3, [r3, #0]
 801b908:	461a      	mov	r2, r3
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	4413      	add	r3, r2
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	461a      	mov	r2, r3
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	f1c3 0308 	rsb	r3, r3, #8
 801b91a:	409a      	lsls	r2, r3
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	4619      	mov	r1, r3
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	440b      	add	r3, r1
 801b926:	b2d2      	uxtb	r2, r2
 801b928:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 801b92a:	68bb      	ldr	r3, [r7, #8]
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	461a      	mov	r2, r3
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	4413      	add	r3, r2
 801b934:	781b      	ldrb	r3, [r3, #0]
 801b936:	461a      	mov	r2, r3
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	781b      	ldrb	r3, [r3, #0]
 801b93c:	f1c3 0308 	rsb	r3, r3, #8
 801b940:	411a      	asrs	r2, r3
 801b942:	68bb      	ldr	r3, [r7, #8]
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	4619      	mov	r1, r3
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	440b      	add	r3, r1
 801b94c:	b2d2      	uxtb	r2, r2
 801b94e:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 801b950:	68bb      	ldr	r3, [r7, #8]
 801b952:	781b      	ldrb	r3, [r3, #0]
 801b954:	461a      	mov	r2, r3
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	4413      	add	r3, r2
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 801b960:	f7fe fea5 	bl	801a6ae <rfalTransceiveRunBlockingTx>
 801b964:	4603      	mov	r3, r0
 801b966:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 801b968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d14f      	bne.n	801ba0e <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 801b96e:	f7fe febb 	bl	801a6e8 <rfalTransceiveBlockingRx>
 801b972:	4603      	mov	r3, r0
 801b974:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d031      	beq.n	801b9e2 <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	781b      	ldrb	r3, [r3, #0]
 801b982:	461a      	mov	r2, r3
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	4413      	add	r3, r2
 801b988:	781b      	ldrb	r3, [r3, #0]
 801b98a:	461a      	mov	r2, r3
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	781b      	ldrb	r3, [r3, #0]
 801b990:	411a      	asrs	r2, r3
 801b992:	68bb      	ldr	r3, [r7, #8]
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	4619      	mov	r1, r3
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	440b      	add	r3, r1
 801b99c:	b2d2      	uxtb	r2, r2
 801b99e:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	781b      	ldrb	r3, [r3, #0]
 801b9a4:	461a      	mov	r2, r3
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	4413      	add	r3, r2
 801b9aa:	781b      	ldrb	r3, [r3, #0]
 801b9ac:	461a      	mov	r2, r3
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	781b      	ldrb	r3, [r3, #0]
 801b9b2:	409a      	lsls	r2, r3
 801b9b4:	68bb      	ldr	r3, [r7, #8]
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	4619      	mov	r1, r3
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	440b      	add	r3, r1
 801b9be:	b2d2      	uxtb	r2, r2
 801b9c0:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	781b      	ldrb	r3, [r3, #0]
 801b9c6:	461a      	mov	r2, r3
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	4413      	add	r3, r2
 801b9cc:	7819      	ldrb	r1, [r3, #0]
 801b9ce:	68bb      	ldr	r3, [r7, #8]
 801b9d0:	781b      	ldrb	r3, [r3, #0]
 801b9d2:	461a      	mov	r2, r3
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	4413      	add	r3, r2
 801b9d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801b9dc:	430a      	orrs	r2, r1
 801b9de:	b2d2      	uxtb	r2, r2
 801b9e0:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 801b9e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b9e4:	2b1d      	cmp	r3, #29
 801b9e6:	d112      	bne.n	801ba0e <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 801b9e8:	f107 0317 	add.w	r3, r7, #23
 801b9ec:	4619      	mov	r1, r3
 801b9ee:	201c      	movs	r0, #28
 801b9f0:	f7e9 f8aa 	bl	8004b48 <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 801b9f4:	7dfb      	ldrb	r3, [r7, #23]
 801b9f6:	091b      	lsrs	r3, r3, #4
 801b9f8:	b2da      	uxtb	r2, r3
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 801b9fe:	7dfb      	ldrb	r3, [r7, #23]
 801ba00:	085b      	lsrs	r3, r3, #1
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	f003 0307 	and.w	r3, r3, #7
 801ba08:	b2da      	uxtb	r2, r3
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 801ba0e:	2004      	movs	r0, #4
 801ba10:	f7e9 fd9c 	bl	800554c <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 801ba14:	2101      	movs	r1, #1
 801ba16:	2005      	movs	r0, #5
 801ba18:	f7e9 fa18 	bl	8004e4c <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 801ba1c:	2180      	movs	r1, #128	; 0x80
 801ba1e:	2009      	movs	r0, #9
 801ba20:	f7e9 fa14 	bl	8004e4c <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801ba24:	f240 1001 	movw	r0, #257	; 0x101
 801ba28:	f7f5 ff36 	bl	8011898 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801ba2c:	f44f 7081 	mov.w	r0, #258	; 0x102
 801ba30:	f7f5 ff32 	bl	8011898 <rfalSetAnalogConfig>
    
    return ret;
 801ba34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 801ba36:	4618      	mov	r0, r3
 801ba38:	3738      	adds	r7, #56	; 0x38
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}
 801ba3e:	bf00      	nop
 801ba40:	20003c40 	.word	0x20003c40

0801ba44 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b08c      	sub	sp, #48	; 0x30
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	60f8      	str	r0, [r7, #12]
 801ba4c:	607a      	str	r2, [r7, #4]
 801ba4e:	461a      	mov	r2, r3
 801ba50:	460b      	mov	r3, r1
 801ba52:	72fb      	strb	r3, [r7, #11]
 801ba54:	4613      	mov	r3, r2
 801ba56:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 801ba58:	4b29      	ldr	r3, [pc, #164]	; (801bb00 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d903      	bls.n	801ba68 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 801ba60:	4b27      	ldr	r3, [pc, #156]	; (801bb00 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801ba62:	785b      	ldrb	r3, [r3, #1]
 801ba64:	2b07      	cmp	r3, #7
 801ba66:	d001      	beq.n	801ba6c <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 801ba68:	2321      	movs	r3, #33	; 0x21
 801ba6a:	e045      	b.n	801baf8 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801ba6c:	f241 0003 	movw	r0, #4099	; 0x1003
 801ba70:	f7f5 ff12 	bl	8011898 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 801ba74:	4b22      	ldr	r3, [pc, #136]	; (801bb00 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801ba76:	2210      	movs	r2, #16
 801ba78:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 801ba7c:	7afb      	ldrb	r3, [r7, #11]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d101      	bne.n	801ba86 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 801ba82:	220b      	movs	r2, #11
 801ba84:	e000      	b.n	801ba88 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 801ba86:	220a      	movs	r2, #10
 801ba88:	7afb      	ldrb	r3, [r7, #11]
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d101      	bne.n	801ba92 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 801ba8e:	2340      	movs	r3, #64	; 0x40
 801ba90:	e000      	b.n	801ba94 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 801ba92:	2300      	movs	r3, #0
 801ba94:	4313      	orrs	r3, r2
 801ba96:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 801ba9c:	7afb      	ldrb	r3, [r7, #11]
 801ba9e:	b29b      	uxth	r3, r3
 801baa0:	00db      	lsls	r3, r3, #3
 801baa2:	b29b      	uxth	r3, r3
 801baa4:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 801baaa:	7abb      	ldrb	r3, [r7, #10]
 801baac:	b29b      	uxth	r3, r3
 801baae:	00db      	lsls	r3, r3, #3
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 801bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bab6:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 801bab8:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 801babc:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 801babe:	f107 0310 	add.w	r3, r7, #16
 801bac2:	4618      	mov	r0, r3
 801bac4:	f7fe fc6e 	bl	801a3a4 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 801bac8:	f7fe fdf1 	bl	801a6ae <rfalTransceiveRunBlockingTx>
 801bacc:	4603      	mov	r3, r0
 801bace:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 801bad0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d103      	bne.n	801bade <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 801bad6:	f7fe fe07 	bl	801a6e8 <rfalTransceiveBlockingRx>
 801bada:	4603      	mov	r3, r0
 801badc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801bade:	f241 0001 	movw	r0, #4097	; 0x1001
 801bae2:	f7f5 fed9 	bl	8011898 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801bae6:	f241 0002 	movw	r0, #4098	; 0x1002
 801baea:	f7f5 fed5 	bl	8011898 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 801baee:	4b04      	ldr	r3, [pc, #16]	; (801bb00 <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 801baf0:	2200      	movs	r2, #0
 801baf2:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    return ret;
 801baf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	3730      	adds	r7, #48	; 0x30
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}
 801bb00:	20003c40 	.word	0x20003c40

0801bb04 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b088      	sub	sp, #32
 801bb08:	af02      	add	r7, sp, #8
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	607a      	str	r2, [r7, #4]
 801bb10:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 801bb12:	7afa      	ldrb	r2, [r7, #11]
 801bb14:	f107 0017 	add.w	r0, r7, #23
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	9300      	str	r3, [sp, #0]
 801bb1c:	4613      	mov	r3, r2
 801bb1e:	68fa      	ldr	r2, [r7, #12]
 801bb20:	2100      	movs	r1, #0
 801bb22:	f7ff ff8f 	bl	801ba44 <rfalISO15693TransceiveAnticollisionFrame>
 801bb26:	4603      	mov	r3, r0
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3718      	adds	r7, #24
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}

0801bb30 <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b08a      	sub	sp, #40	; 0x28
 801bb34:	af04      	add	r7, sp, #16
 801bb36:	60f8      	str	r0, [r7, #12]
 801bb38:	460b      	mov	r3, r1
 801bb3a:	607a      	str	r2, [r7, #4]
 801bb3c:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( ( gRFAL.state < RFAL_STATE_MODE_SET ) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 801bb3e:	4b10      	ldr	r3, [pc, #64]	; (801bb80 <rfalISO15693TransceiveEOF+0x50>)
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	2b01      	cmp	r3, #1
 801bb44:	d903      	bls.n	801bb4e <rfalISO15693TransceiveEOF+0x1e>
 801bb46:	4b0e      	ldr	r3, [pc, #56]	; (801bb80 <rfalISO15693TransceiveEOF+0x50>)
 801bb48:	785b      	ldrb	r3, [r3, #1]
 801bb4a:	2b07      	cmp	r3, #7
 801bb4c:	d001      	beq.n	801bb52 <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 801bb4e:	2321      	movs	r3, #33	; 0x21
 801bb50:	e012      	b.n	801bb78 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 801bb52:	7afb      	ldrb	r3, [r7, #11]
 801bb54:	b29a      	uxth	r2, r3
 801bb56:	f107 0015 	add.w	r0, r7, #21
 801bb5a:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 801bb5e:	9302      	str	r3, [sp, #8]
 801bb60:	2303      	movs	r3, #3
 801bb62:	9301      	str	r3, [sp, #4]
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	9300      	str	r3, [sp, #0]
 801bb68:	4613      	mov	r3, r2
 801bb6a:	68fa      	ldr	r2, [r7, #12]
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	f7fe fdd1 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801bb72:	4603      	mov	r3, r0
 801bb74:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP |(uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 801bb76:	8afb      	ldrh	r3, [r7, #22]
}
 801bb78:	4618      	mov	r0, r3
 801bb7a:	3718      	adds	r7, #24
 801bb7c:	46bd      	mov	sp, r7
 801bb7e:	bd80      	pop	{r7, pc}
 801bb80:	20003c40 	.word	0x20003c40

0801bb84 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b08c      	sub	sp, #48	; 0x30
 801bb88:	af04      	add	r7, sp, #16
 801bb8a:	603b      	str	r3, [r7, #0]
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	71fb      	strb	r3, [r7, #7]
 801bb90:	460b      	mov	r3, r1
 801bb92:	80bb      	strh	r3, [r7, #4]
 801bb94:	4613      	mov	r3, r2
 801bb96:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 801bb98:	4b6b      	ldr	r3, [pc, #428]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	2b01      	cmp	r3, #1
 801bb9e:	d903      	bls.n	801bba8 <rfalFeliCaPoll+0x24>
 801bba0:	4b69      	ldr	r3, [pc, #420]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bba2:	785b      	ldrb	r3, [r3, #1]
 801bba4:	2b06      	cmp	r3, #6
 801bba6:	d001      	beq.n	801bbac <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 801bba8:	2321      	movs	r3, #33	; 0x21
 801bbaa:	e0c9      	b.n	801bd40 <rfalFeliCaPoll+0x1bc>
    }
    
    frameIdx    = 0;
 801bbac:	2300      	movs	r3, #0
 801bbae:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 801bbb8:	79fb      	ldrb	r3, [r7, #7]
 801bbba:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 801bbbc:	7e7b      	ldrb	r3, [r7, #25]
 801bbbe:	1c5a      	adds	r2, r3, #1
 801bbc0:	767a      	strb	r2, [r7, #25]
 801bbc2:	3320      	adds	r3, #32
 801bbc4:	443b      	add	r3, r7
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 801bbcc:	88bb      	ldrh	r3, [r7, #4]
 801bbce:	0a1b      	lsrs	r3, r3, #8
 801bbd0:	b29a      	uxth	r2, r3
 801bbd2:	7e7b      	ldrb	r3, [r7, #25]
 801bbd4:	1c59      	adds	r1, r3, #1
 801bbd6:	7679      	strb	r1, [r7, #25]
 801bbd8:	b2d2      	uxtb	r2, r2
 801bbda:	3320      	adds	r3, #32
 801bbdc:	443b      	add	r3, r7
 801bbde:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 801bbe2:	7e7b      	ldrb	r3, [r7, #25]
 801bbe4:	1c5a      	adds	r2, r3, #1
 801bbe6:	767a      	strb	r2, [r7, #25]
 801bbe8:	88ba      	ldrh	r2, [r7, #4]
 801bbea:	b2d2      	uxtb	r2, r2
 801bbec:	3320      	adds	r3, #32
 801bbee:	443b      	add	r3, r7
 801bbf0:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 801bbf4:	7e7b      	ldrb	r3, [r7, #25]
 801bbf6:	1c5a      	adds	r2, r3, #1
 801bbf8:	767a      	strb	r2, [r7, #25]
 801bbfa:	3320      	adds	r3, #32
 801bbfc:	443b      	add	r3, r7
 801bbfe:	79ba      	ldrb	r2, [r7, #6]
 801bc00:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 801bc04:	7e7b      	ldrb	r3, [r7, #25]
 801bc06:	1c5a      	adds	r2, r3, #1
 801bc08:	767a      	strb	r2, [r7, #25]
 801bc0a:	3320      	adds	r3, #32
 801bc0c:	443b      	add	r3, r7
 801bc0e:	7efa      	ldrb	r2, [r7, #27]
 801bc10:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 801bc14:	4b4c      	ldr	r3, [pc, #304]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bc16:	79db      	ldrb	r3, [r3, #7]
 801bc18:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 801bc1a:	2002      	movs	r0, #2
 801bc1c:	f7fe fae6 	bl	801a1ec <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 801bc20:	7e7b      	ldrb	r3, [r7, #25]
 801bc22:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 801bc24:	7efb      	ldrb	r3, [r7, #27]
 801bc26:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 801bc28:	039b      	lsls	r3, r3, #14
 801bc2a:	f107 0010 	add.w	r0, r7, #16
 801bc2e:	9302      	str	r3, [sp, #8]
 801bc30:	2300      	movs	r3, #0
 801bc32:	9301      	str	r3, [sp, #4]
 801bc34:	f107 030e 	add.w	r3, r7, #14
 801bc38:	9300      	str	r3, [sp, #0]
 801bc3a:	2314      	movs	r3, #20
 801bc3c:	4a43      	ldr	r2, [pc, #268]	; (801bd4c <rfalFeliCaPoll+0x1c8>)
 801bc3e:	f7fe fd07 	bl	801a650 <rfalTransceiveBlockingTx>
 801bc42:	4603      	mov	r3, r0
 801bc44:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 801bc46:	8bfb      	ldrh	r3, [r7, #30]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d145      	bne.n	801bcd8 <rfalFeliCaPoll+0x154>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 801bc4c:	f7fe fd4c 	bl	801a6e8 <rfalTransceiveBlockingRx>
 801bc50:	4603      	mov	r3, r0
 801bc52:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 801bc54:	8bfb      	ldrh	r3, [r7, #30]
 801bc56:	2b04      	cmp	r3, #4
 801bc58:	d102      	bne.n	801bc60 <rfalFeliCaPoll+0xdc>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	76bb      	strb	r3, [r7, #26]
 801bc5e:	e030      	b.n	801bcc2 <rfalFeliCaPoll+0x13e>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801bc60:	20d1      	movs	r0, #209	; 0xd1
 801bc62:	f7e9 fa35 	bl	80050d0 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801bc66:	20d5      	movs	r0, #213	; 0xd5
 801bc68:	f7e9 fa32 	bl	80050d0 <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 801bc6c:	8bfb      	ldrh	r3, [r7, #30]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d10e      	bne.n	801bc90 <rfalFeliCaPoll+0x10c>
                {
                   devDetected++;
 801bc72:	7f7b      	ldrb	r3, [r7, #29]
 801bc74:	3301      	adds	r3, #1
 801bc76:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 801bc78:	7f7a      	ldrb	r2, [r7, #29]
 801bc7a:	4613      	mov	r3, r2
 801bc7c:	009b      	lsls	r3, r3, #2
 801bc7e:	4413      	add	r3, r2
 801bc80:	009b      	lsls	r3, r3, #2
 801bc82:	3378      	adds	r3, #120	; 0x78
 801bc84:	4a30      	ldr	r2, [pc, #192]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bc86:	4413      	add	r3, r2
 801bc88:	3306      	adds	r3, #6
 801bc8a:	4a2f      	ldr	r2, [pc, #188]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bc8c:	6253      	str	r3, [r2, #36]	; 0x24
 801bc8e:	e002      	b.n	801bc96 <rfalFeliCaPoll+0x112>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 801bc90:	7f3b      	ldrb	r3, [r7, #28]
 801bc92:	3301      	adds	r3, #1
 801bc94:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 801bc96:	2200      	movs	r2, #0
 801bc98:	2102      	movs	r1, #2
 801bc9a:	202b      	movs	r0, #43	; 0x2b
 801bc9c:	f7e8 fd50 	bl	8004740 <st25r3911CheckReg>
 801bca0:	4603      	mov	r3, r0
 801bca2:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 801bca4:	7ebb      	ldrb	r3, [r7, #26]
 801bca6:	f083 0301 	eor.w	r3, r3, #1
 801bcaa:	b2db      	uxtb	r3, r3
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d008      	beq.n	801bcc2 <rfalFeliCaPoll+0x13e>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 801bcb0:	4b25      	ldr	r3, [pc, #148]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bcb2:	2202      	movs	r2, #2
 801bcb4:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 801bcb6:	4b24      	ldr	r3, [pc, #144]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bcb8:	2203      	movs	r2, #3
 801bcba:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 801bcbc:	4b22      	ldr	r3, [pc, #136]	; (801bd48 <rfalFeliCaPoll+0x1c4>)
 801bcbe:	2251      	movs	r2, #81	; 0x51
 801bcc0:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 801bcc2:	7efb      	ldrb	r3, [r7, #27]
 801bcc4:	1e5a      	subs	r2, r3, #1
 801bcc6:	76fa      	strb	r2, [r7, #27]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d005      	beq.n	801bcd8 <rfalFeliCaPoll+0x154>
 801bccc:	7ebb      	ldrb	r3, [r7, #26]
 801bcce:	f083 0301 	eor.w	r3, r3, #1
 801bcd2:	b2db      	uxtb	r3, r3
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d1b9      	bne.n	801bc4c <rfalFeliCaPoll+0xc8>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 801bcd8:	7e3b      	ldrb	r3, [r7, #24]
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7fe fa86 	bl	801a1ec <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d017      	beq.n	801bd16 <rfalFeliCaPoll+0x192>
 801bce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d013      	beq.n	801bd16 <rfalFeliCaPoll+0x192>
 801bcee:	7f7b      	ldrb	r3, [r7, #29]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d010      	beq.n	801bd16 <rfalFeliCaPoll+0x192>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 801bcf4:	7f7a      	ldrb	r2, [r7, #29]
 801bcf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	bf28      	it	cs
 801bcfe:	4613      	movcs	r3, r2
 801bd00:	b2db      	uxtb	r3, r3
 801bd02:	461a      	mov	r2, r3
 801bd04:	4613      	mov	r3, r2
 801bd06:	009b      	lsls	r3, r3, #2
 801bd08:	4413      	add	r3, r2
 801bd0a:	009b      	lsls	r3, r3, #2
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	490f      	ldr	r1, [pc, #60]	; (801bd4c <rfalFeliCaPoll+0x1c8>)
 801bd10:	6838      	ldr	r0, [r7, #0]
 801bd12:	f001 fc09 	bl	801d528 <memcpy>
    }
    
    if( devicesDetected != NULL )
 801bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d002      	beq.n	801bd22 <rfalFeliCaPoll+0x19e>
    {
        *devicesDetected = devDetected;
 801bd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd1e:	7f7a      	ldrb	r2, [r7, #29]
 801bd20:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 801bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d002      	beq.n	801bd2e <rfalFeliCaPoll+0x1aa>
    {
        *collisionsDetected = colDetected;
 801bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd2a:	7f3a      	ldrb	r2, [r7, #28]
 801bd2c:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 801bd2e:	7f3b      	ldrb	r3, [r7, #28]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d104      	bne.n	801bd3e <rfalFeliCaPoll+0x1ba>
 801bd34:	7f7b      	ldrb	r3, [r7, #29]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d101      	bne.n	801bd3e <rfalFeliCaPoll+0x1ba>
 801bd3a:	8bfb      	ldrh	r3, [r7, #30]
 801bd3c:	e000      	b.n	801bd40 <rfalFeliCaPoll+0x1bc>
 801bd3e:	2300      	movs	r3, #0
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3720      	adds	r7, #32
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd80      	pop	{r7, pc}
 801bd48:	20003c40 	.word	0x20003c40
 801bd4c:	20003cbe 	.word	0x20003cbe

0801bd50 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	af00      	add	r7, sp, #0
    return st25r3911IsExtFieldOn();
 801bd54:	2240      	movs	r2, #64	; 0x40
 801bd56:	2140      	movs	r1, #64	; 0x40
 801bd58:	2030      	movs	r0, #48	; 0x30
 801bd5a:	f7e8 fcf1 	bl	8004740 <st25r3911CheckReg>
 801bd5e:	4603      	mov	r3, r0
}
 801bd60:	4618      	mov	r0, r3
 801bd62:	bd80      	pop	{r7, pc}

0801bd64 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b084      	sub	sp, #16
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	60f8      	str	r0, [r7, #12]
 801bd6c:	60b9      	str	r1, [r7, #8]
 801bd6e:	607a      	str	r2, [r7, #4]
 801bd70:	603b      	str	r3, [r7, #0]
    NO_WARNING(confA);
    NO_WARNING(confB);
    NO_WARNING(confF);
    
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 801bd72:	4b29      	ldr	r3, [pc, #164]	; (801be18 <rfalListenStart+0xb4>)
 801bd74:	2200      	movs	r2, #0
 801bd76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/
    if( ((lmMask & RFAL_LM_MASK_NFCA) != 0U) || ((lmMask & RFAL_LM_MASK_NFCB) != 0U) || ((lmMask & RFAL_LM_MASK_NFCF) != 0U) )
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d109      	bne.n	801bd98 <rfalListenStart+0x34>
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d104      	bne.n	801bd98 <rfalListenStart+0x34>
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d001      	beq.n	801bd9c <rfalListenStart+0x38>
    {
        return ERR_NOTSUPP;
 801bd98:	2318      	movs	r3, #24
 801bd9a:	e038      	b.n	801be0e <rfalListenStart+0xaa>
    }
    
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d032      	beq.n	801be0c <rfalListenStart+0xa8>
    {
        gRFAL.state       = RFAL_STATE_LM;
 801bda6:	4b1c      	ldr	r3, [pc, #112]	; (801be18 <rfalListenStart+0xb4>)
 801bda8:	2204      	movs	r2, #4
 801bdaa:	701a      	strb	r2, [r3, #0]
       
        gRFAL.Lm.rxBuf    = rxBuf;
 801bdac:	4a1a      	ldr	r2, [pc, #104]	; (801be18 <rfalListenStart+0xb4>)
 801bdae:	69bb      	ldr	r3, [r7, #24]
 801bdb0:	6593      	str	r3, [r2, #88]	; 0x58
        gRFAL.Lm.rxBufLen = rxBufLen;
 801bdb2:	4a19      	ldr	r2, [pc, #100]	; (801be18 <rfalListenStart+0xb4>)
 801bdb4:	8bbb      	ldrh	r3, [r7, #28]
 801bdb6:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        gRFAL.Lm.rxLen    = rxLen;
 801bdba:	4a17      	ldr	r2, [pc, #92]	; (801be18 <rfalListenStart+0xb4>)
 801bdbc:	6a3b      	ldr	r3, [r7, #32]
 801bdbe:	6613      	str	r3, [r2, #96]	; 0x60
        *gRFAL.Lm.rxLen   = 0;
 801bdc0:	4b15      	ldr	r3, [pc, #84]	; (801be18 <rfalListenStart+0xb4>)
 801bdc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdc4:	2200      	movs	r2, #0
 801bdc6:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 801bdc8:	4b13      	ldr	r3, [pc, #76]	; (801be18 <rfalListenStart+0xb4>)
 801bdca:	2200      	movs	r2, #0
 801bdcc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        
        /* Disable GPT trigger source */
        st25r3911ChangeRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_gptc_mask, ST25R3911_REG_GPT_CONTROL_gptc_no_trigger );
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	21e0      	movs	r1, #224	; 0xe0
 801bdd4:	2011      	movs	r0, #17
 801bdd6:	f7e9 f87a 	bl	8004ece <st25r3911ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 801bdda:	2102      	movs	r1, #2
 801bddc:	200e      	movs	r0, #14
 801bdde:	f7e8 ffe9 	bl	8004db4 <st25r3911WriteRegister>
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 801bde2:	21e0      	movs	r1, #224	; 0xe0
 801bde4:	2005      	movs	r0, #5
 801bde6:	f7e9 f831 	bl	8004e4c <st25r3911ClrRegisterBits>
        
        /* Enable External Field Detector */
        st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801bdea:	2110      	movs	r1, #16
 801bdec:	2009      	movs	r0, #9
 801bdee:	f7e9 f850 	bl	8004e92 <st25r3911SetRegisterBits>
      
        /* Enable Receiver */
        st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_rx_en, ST25R3911_REG_OP_CONTROL_rx_en );
 801bdf2:	2240      	movs	r2, #64	; 0x40
 801bdf4:	2140      	movs	r1, #64	; 0x40
 801bdf6:	2002      	movs	r0, #2
 801bdf8:	f7e9 f869 	bl	8004ece <st25r3911ChangeRegisterBits>
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 801bdfc:	2006      	movs	r0, #6
 801bdfe:	f7f5 fd4b 	bl	8011898 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 801be02:	2001      	movs	r0, #1
 801be04:	f000 f960 	bl	801c0c8 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 801be08:	2300      	movs	r3, #0
 801be0a:	e000      	b.n	801be0e <rfalListenStart+0xaa>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 801be0c:	2305      	movs	r3, #5
}
 801be0e:	4618      	mov	r0, r3
 801be10:	3710      	adds	r7, #16
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}
 801be16:	bf00      	nop
 801be18:	20003c40 	.word	0x20003c40

0801be1c <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b082      	sub	sp, #8
 801be20:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 801be22:	4b81      	ldr	r3, [pc, #516]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801be24:	781b      	ldrb	r3, [r3, #0]
 801be26:	2b04      	cmp	r3, #4
 801be28:	d001      	beq.n	801be2e <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 801be2a:	2321      	movs	r3, #33	; 0x21
 801be2c:	e0f8      	b.n	801c020 <rfalRunListenModeWorker+0x204>
    }
    
    switch( gRFAL.Lm.state )
 801be2e:	4b7e      	ldr	r3, [pc, #504]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801be30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801be34:	3b01      	subs	r3, #1
 801be36:	2b0f      	cmp	r3, #15
 801be38:	f200 80e6 	bhi.w	801c008 <rfalRunListenModeWorker+0x1ec>
 801be3c:	a201      	add	r2, pc, #4	; (adr r2, 801be44 <rfalRunListenModeWorker+0x28>)
 801be3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be42:	bf00      	nop
 801be44:	0801be85 	.word	0x0801be85
 801be48:	0801beab 	.word	0x0801beab
 801be4c:	0801c005 	.word	0x0801c005
 801be50:	0801c009 	.word	0x0801c009
 801be54:	0801c005 	.word	0x0801c005
 801be58:	0801c005 	.word	0x0801c005
 801be5c:	0801c005 	.word	0x0801c005
 801be60:	0801c005 	.word	0x0801c005
 801be64:	0801c005 	.word	0x0801c005
 801be68:	0801c00d 	.word	0x0801c00d
 801be6c:	0801c00d 	.word	0x0801c00d
 801be70:	0801c005 	.word	0x0801c005
 801be74:	0801c005 	.word	0x0801c005
 801be78:	0801c005 	.word	0x0801c005
 801be7c:	0801c005 	.word	0x0801c005
 801be80:	0801c005 	.word	0x0801c005
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3911GetInterrupt( (  ST25R3911_IRQ_MASK_EON ) );
 801be84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801be88:	f7e9 fb18 	bl	80054bc <st25r3911GetInterrupt>
 801be8c:	4603      	mov	r3, r0
 801be8e:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2b00      	cmp	r3, #0
 801be94:	f000 80bc 	beq.w	801c010 <rfalRunListenModeWorker+0x1f4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	f000 80b8 	beq.w	801c014 <rfalRunListenModeWorker+0x1f8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 801bea4:	2002      	movs	r0, #2
 801bea6:	f000 f90f 	bl	801c0c8 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF ) );
 801beaa:	f44f 6011 	mov.w	r0, #2320	; 0x910
 801beae:	f7e9 fb05 	bl	80054bc <st25r3911GetInterrupt>
 801beb2:	4603      	mov	r3, r0
 801beb4:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	f000 80ad 	beq.w	801c018 <rfalRunListenModeWorker+0x1fc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NFCT) != 0U )
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d011      	beq.n	801beec <rfalRunListenModeWorker+0xd0>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3911ReadRegister( ST25R3911_REG_NFCIP1_BIT_RATE, &newBr );
 801bec8:	1cbb      	adds	r3, r7, #2
 801beca:	4619      	mov	r1, r3
 801becc:	201f      	movs	r0, #31
 801bece:	f7e8 fe3b 	bl	8004b48 <st25r3911ReadRegister>
                newBr >>= ST25R3911_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 801bed2:	78bb      	ldrb	r3, [r7, #2]
 801bed4:	091b      	lsrs	r3, r3, #4
 801bed6:	b2db      	uxtb	r3, r3
 801bed8:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3911_REG_BIT_RATE_rxrate_424)
 801beda:	78bb      	ldrb	r3, [r7, #2]
 801bedc:	2b02      	cmp	r3, #2
 801bede:	d901      	bls.n	801bee4 <rfalRunListenModeWorker+0xc8>
                {
                    newBr = ST25R3911_REG_BIT_RATE_rxrate_424;
 801bee0:	2302      	movs	r3, #2
 801bee2:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 801bee4:	78ba      	ldrb	r2, [r7, #2]
 801bee6:	4b50      	ldr	r3, [pc, #320]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bee8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	f003 0310 	and.w	r3, r3, #16
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d074      	beq.n	801bfe0 <rfalRunListenModeWorker+0x1c4>
 801bef6:	4b4c      	ldr	r3, [pc, #304]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bef8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801befc:	2bff      	cmp	r3, #255	; 0xff
 801befe:	d06f      	beq.n	801bfe0 <rfalRunListenModeWorker+0x1c4>
            {
                irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_ERR1 ) );
 801bf00:	484a      	ldr	r0, [pc, #296]	; (801c02c <rfalRunListenModeWorker+0x210>)
 801bf02:	f7e9 fadb 	bl	80054bc <st25r3911GetInterrupt>
 801bf06:	4603      	mov	r3, r0
 801bf08:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3911_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3911_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3911_IRQ_MASK_ERR1) != 0U) )
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d109      	bne.n	801bf28 <rfalRunListenModeWorker+0x10c>
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d104      	bne.n	801bf28 <rfalRunListenModeWorker+0x10c>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d012      	beq.n	801bf4e <rfalRunListenModeWorker+0x132>
                {
                    /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                    st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801bf28:	2101      	movs	r1, #1
 801bf2a:	2003      	movs	r0, #3
 801bf2c:	f7e8 ff8e 	bl	8004e4c <st25r3911ClrRegisterBits>
                    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801bf30:	20c2      	movs	r0, #194	; 0xc2
 801bf32:	f7e9 f8cd 	bl	80050d0 <st25r3911ExecuteCommand>
                    st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801bf36:	20d1      	movs	r0, #209	; 0xd1
 801bf38:	f7e9 f8ca 	bl	80050d0 <st25r3911ExecuteCommand>
                    st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801bf3c:	2101      	movs	r1, #1
 801bf3e:	2003      	movs	r0, #3
 801bf40:	f7e8 ffa7 	bl	8004e92 <st25r3911SetRegisterBits>
                    st25r3911TxOff();
 801bf44:	2108      	movs	r1, #8
 801bf46:	2002      	movs	r0, #2
 801bf48:	f7e8 ff80 	bl	8004e4c <st25r3911ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 801bf4c:	e067      	b.n	801c01e <rfalRunListenModeWorker+0x202>
                }
                
                /* Retrieve received data */
                st25r3911ReadRegister(ST25R3911_REG_FIFO_RX_STATUS1, &tmp);
 801bf4e:	1cfb      	adds	r3, r7, #3
 801bf50:	4619      	mov	r1, r3
 801bf52:	201a      	movs	r0, #26
 801bf54:	f7e8 fdf8 	bl	8004b48 <st25r3911ReadRegister>
                *gRFAL.Lm.rxLen = tmp;
 801bf58:	78fa      	ldrb	r2, [r7, #3]
 801bf5a:	4b33      	ldr	r3, [pc, #204]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf5e:	b292      	uxth	r2, r2
 801bf60:	801a      	strh	r2, [r3, #0]
                
                st25r3911ReadFifo( gRFAL.Lm.rxBuf, (uint8_t)MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 801bf62:	4b31      	ldr	r3, [pc, #196]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf64:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801bf66:	4b30      	ldr	r3, [pc, #192]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf6a:	881a      	ldrh	r2, [r3, #0]
 801bf6c:	4b2e      	ldr	r3, [pc, #184]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801bf72:	3307      	adds	r3, #7
 801bf74:	08db      	lsrs	r3, r3, #3
 801bf76:	b29b      	uxth	r3, r3
 801bf78:	429a      	cmp	r2, r3
 801bf7a:	d204      	bcs.n	801bf86 <rfalRunListenModeWorker+0x16a>
 801bf7c:	4b2a      	ldr	r3, [pc, #168]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf80:	881b      	ldrh	r3, [r3, #0]
 801bf82:	b2db      	uxtb	r3, r3
 801bf84:	e005      	b.n	801bf92 <rfalRunListenModeWorker+0x176>
 801bf86:	4b28      	ldr	r3, [pc, #160]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801bf8c:	3307      	adds	r3, #7
 801bf8e:	08db      	lsrs	r3, r3, #3
 801bf90:	b2db      	uxtb	r3, r3
 801bf92:	4619      	mov	r1, r3
 801bf94:	f7e9 f850 	bl	8005038 <st25r3911ReadFifo>
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 801bf98:	4b23      	ldr	r3, [pc, #140]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bf9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf9c:	8819      	ldrh	r1, [r3, #0]
 801bf9e:	4b22      	ldr	r3, [pc, #136]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bfa2:	881b      	ldrh	r3, [r3, #0]
 801bfa4:	2b02      	cmp	r3, #2
 801bfa6:	bf28      	it	cs
 801bfa8:	2302      	movcs	r3, #2
 801bfaa:	b29a      	uxth	r2, r3
 801bfac:	4b1e      	ldr	r3, [pc, #120]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bfb0:	1a8a      	subs	r2, r1, r2
 801bfb2:	b292      	uxth	r2, r2
 801bfb4:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 801bfb6:	4b1c      	ldr	r3, [pc, #112]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bfba:	881a      	ldrh	r2, [r3, #0]
 801bfbc:	4b1a      	ldr	r3, [pc, #104]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bfc0:	00d2      	lsls	r2, r2, #3
 801bfc2:	b292      	uxth	r2, r2
 801bfc4:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 801bfc6:	4b18      	ldr	r3, [pc, #96]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfc8:	2201      	movs	r2, #1
 801bfca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 801bfce:	4b16      	ldr	r3, [pc, #88]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfd0:	799b      	ldrb	r3, [r3, #6]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d015      	beq.n	801c002 <rfalRunListenModeWorker+0x1e6>
 801bfd6:	2100      	movs	r1, #0
 801bfd8:	2001      	movs	r0, #1
 801bfda:	f7e8 fea3 	bl	8004d24 <st25r3911WriteTestRegister>
 801bfde:	e010      	b.n	801c002 <rfalRunListenModeWorker+0x1e6>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d018      	beq.n	801c01c <rfalRunListenModeWorker+0x200>
 801bfea:	4b0f      	ldr	r3, [pc, #60]	; (801c028 <rfalRunListenModeWorker+0x20c>)
 801bfec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801bff0:	f083 0301 	eor.w	r3, r3, #1
 801bff4:	b2db      	uxtb	r3, r3
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d010      	beq.n	801c01c <rfalRunListenModeWorker+0x200>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 801bffa:	2001      	movs	r0, #1
 801bffc:	f000 f864 	bl	801c0c8 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 801c000:	e00c      	b.n	801c01c <rfalRunListenModeWorker+0x200>
 801c002:	e00b      	b.n	801c01c <rfalRunListenModeWorker+0x200>
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_READY_Ax:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
            case RFAL_LM_STATE_CARDEMU_3:
                return ERR_INTERNAL;
 801c004:	230c      	movs	r3, #12
 801c006:	e00b      	b.n	801c020 <rfalRunListenModeWorker+0x204>
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 801c008:	2321      	movs	r3, #33	; 0x21
 801c00a:	e009      	b.n	801c020 <rfalRunListenModeWorker+0x204>
                break;
 801c00c:	bf00      	nop
 801c00e:	e006      	b.n	801c01e <rfalRunListenModeWorker+0x202>
              break;  /* No interrupt to process */
 801c010:	bf00      	nop
 801c012:	e004      	b.n	801c01e <rfalRunListenModeWorker+0x202>
                break;
 801c014:	bf00      	nop
 801c016:	e002      	b.n	801c01e <rfalRunListenModeWorker+0x202>
                break;  /* No interrupt to process */
 801c018:	bf00      	nop
 801c01a:	e000      	b.n	801c01e <rfalRunListenModeWorker+0x202>
            break;
 801c01c:	bf00      	nop
    }
    return ERR_NONE;
 801c01e:	2300      	movs	r3, #0
}
 801c020:	4618      	mov	r0, r3
 801c022:	3708      	adds	r7, #8
 801c024:	46bd      	mov	sp, r7
 801c026:	bd80      	pop	{r7, pc}
 801c028:	20003c40 	.word	0x20003c40
 801c02c:	00f00810 	.word	0x00f00810

0801c030 <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 801c030:	b580      	push	{r7, lr}
 801c032:	af00      	add	r7, sp, #0
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 801c034:	4b0b      	ldr	r3, [pc, #44]	; (801c064 <rfalListenStop+0x34>)
 801c036:	2200      	movs	r2, #0
 801c038:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 801c03c:	4b09      	ldr	r3, [pc, #36]	; (801c064 <rfalListenStop+0x34>)
 801c03e:	799b      	ldrb	r3, [r3, #6]
 801c040:	2b00      	cmp	r3, #0
 801c042:	d003      	beq.n	801c04c <rfalListenStop+0x1c>
 801c044:	2100      	movs	r1, #0
 801c046:	2001      	movs	r0, #1
 801c048:	f7e8 fe6c 	bl	8004d24 <st25r3911WriteTestRegister>
  
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 801c04c:	f7fe f994 	bl	801a378 <rfalFieldOff>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_om_iso14443a | ST25R3911_REG_MODE_nfc_ar_off) );
 801c050:	2108      	movs	r1, #8
 801c052:	2003      	movs	r0, #3
 801c054:	f7e8 feae 	bl	8004db4 <st25r3911WriteRegister>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 801c058:	2007      	movs	r0, #7
 801c05a:	f7f5 fc1d 	bl	8011898 <rfalSetAnalogConfig>
        
    return ERR_NONE;
 801c05e:	2300      	movs	r3, #0
}
 801c060:	4618      	mov	r0, r3
 801c062:	bd80      	pop	{r7, pc}
 801c064:	20003c40 	.word	0x20003c40

0801c068 <rfalListenSleepStart>:


/*******************************************************************************/
/*  PRQA S 3673 1 # MISRA 8.13 - ST25R3911B does not support Listen mode. Implementation for other chips will modify rxBuf and rxLen */
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 801c068:	b480      	push	{r7}
 801c06a:	b085      	sub	sp, #20
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	60b9      	str	r1, [r7, #8]
 801c070:	607b      	str	r3, [r7, #4]
 801c072:	4603      	mov	r3, r0
 801c074:	73fb      	strb	r3, [r7, #15]
 801c076:	4613      	mov	r3, r2
 801c078:	81bb      	strh	r3, [r7, #12]
    NO_WARNING(sleepSt);
    NO_WARNING(rxBuf);
    NO_WARNING(rxBufLen);
    NO_WARNING(rxLen);
    
    return ERR_NOTSUPP;
 801c07a:	2318      	movs	r3, #24
}
 801c07c:	4618      	mov	r0, r3
 801c07e:	3714      	adds	r7, #20
 801c080:	46bd      	mov	sp, r7
 801c082:	bc80      	pop	{r7}
 801c084:	4770      	bx	lr
	...

0801c088 <rfalListenGetState>:


/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 801c088:	b480      	push	{r7}
 801c08a:	b083      	sub	sp, #12
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
 801c090:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d004      	beq.n	801c0a2 <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 801c098:	4b0a      	ldr	r3, [pc, #40]	; (801c0c4 <rfalListenGetState+0x3c>)
 801c09a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801c09e:	683b      	ldr	r3, [r7, #0]
 801c0a0:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d004      	beq.n	801c0b2 <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 801c0a8:	4b06      	ldr	r3, [pc, #24]	; (801c0c4 <rfalListenGetState+0x3c>)
 801c0aa:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 801c0b2:	4b04      	ldr	r3, [pc, #16]	; (801c0c4 <rfalListenGetState+0x3c>)
 801c0b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bc80      	pop	{r7}
 801c0c0:	4770      	bx	lr
 801c0c2:	bf00      	nop
 801c0c4:	20003c40 	.word	0x20003c40

0801c0c8 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b084      	sub	sp, #16
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	71fb      	strb	r3, [r7, #7]
    bool        reSetState;
        
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, newSt );*/
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 801c0d2:	4b62      	ldr	r3, [pc, #392]	; (801c25c <rfalListenSetState+0x194>)
 801c0d4:	2200      	movs	r2, #0
 801c0d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    newState          = newSt;
 801c0da:	79fb      	ldrb	r3, [r7, #7]
 801c0dc:	73fb      	strb	r3, [r7, #15]
    ret               = ERR_NONE;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	81bb      	strh	r3, [r7, #12]
    
    do{
        reSetState = false;
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	73bb      	strb	r3, [r7, #14]

        /*******************************************************************************/
        switch( newState )
 801c0e6:	7bfb      	ldrb	r3, [r7, #15]
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	2b0f      	cmp	r3, #15
 801c0ec:	f200 80a2 	bhi.w	801c234 <rfalListenSetState+0x16c>
 801c0f0:	a201      	add	r2, pc, #4	; (adr r2, 801c0f8 <rfalListenSetState+0x30>)
 801c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0f6:	bf00      	nop
 801c0f8:	0801c139 	.word	0x0801c139
 801c0fc:	0801c197 	.word	0x0801c197
 801c100:	0801c231 	.word	0x0801c231
 801c104:	0801c235 	.word	0x0801c235
 801c108:	0801c231 	.word	0x0801c231
 801c10c:	0801c231 	.word	0x0801c231
 801c110:	0801c231 	.word	0x0801c231
 801c114:	0801c231 	.word	0x0801c231
 801c118:	0801c231 	.word	0x0801c231
 801c11c:	0801c239 	.word	0x0801c239
 801c120:	0801c239 	.word	0x0801c239
 801c124:	0801c231 	.word	0x0801c231
 801c128:	0801c231 	.word	0x0801c231
 801c12c:	0801c231 	.word	0x0801c231
 801c130:	0801c231 	.word	0x0801c231
 801c134:	0801c231 	.word	0x0801c231
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /*******************************************************************************/
                /* Disable nfc_ar as RF Collision Avoidance timer may have already started */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801c138:	2101      	movs	r1, #1
 801c13a:	2003      	movs	r0, #3
 801c13c:	f7e8 fe86 	bl	8004e4c <st25r3911ClrRegisterBits>
                
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801c140:	20c2      	movs	r0, #194	; 0xc2
 801c142:	f7e8 ffc5 	bl	80050d0 <st25r3911ExecuteCommand>
                    
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801c146:	2108      	movs	r1, #8
 801c148:	2002      	movs	r0, #2
 801c14a:	f7e8 fe7f 	bl	8004e4c <st25r3911ClrRegisterBits>
                
                /*******************************************************************************/
                /* Ensure that the NFCIP1 mode is disabled */
                st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_nfc_f0 );
 801c14e:	2120      	movs	r1, #32
 801c150:	2005      	movs	r0, #5
 801c152:	f7e8 fe7b 	bl	8004e4c <st25r3911ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801c156:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c15a:	f7e9 f9f7 	bl	800554c <st25r3911DisableInterrupts>
                
                
                st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801c15e:	4840      	ldr	r0, [pc, #256]	; (801c260 <rfalListenSetState+0x198>)
 801c160:	f7e9 f9ac 	bl	80054bc <st25r3911GetInterrupt>
                 * If the interrupt status register is being read when NFCT is trigerred, the  *
                 * IRQ line might go low and NFCT is not signalled on the status register.     *
                 * For initial bitrate detection, mask RXS, only wait for NFCT and RXE.        */
                /*******************************************************************************/
                
                st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_NFCT | ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_ERR1 |
 801c164:	483f      	ldr	r0, [pc, #252]	; (801c264 <rfalListenSetState+0x19c>)
 801c166:	f7e9 f9e5 	bl	8005534 <st25r3911EnableInterrupts>
                                            ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_RXE ) );
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 801c16a:	4b3c      	ldr	r3, [pc, #240]	; (801c25c <rfalListenSetState+0x194>)
 801c16c:	22ff      	movs	r2, #255	; 0xff
 801c16e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                
                
                /*******************************************************************************/
                /* Apply the BitRate detection mode mode */
                st25r3911WriteRegister( ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_bit_rate_detection | ST25R3911_REG_MODE_nfc_ar_on)  );
 801c172:	2181      	movs	r1, #129	; 0x81
 801c174:	2003      	movs	r0, #3
 801c176:	f7e8 fe1d 	bl	8004db4 <st25r3911WriteRegister>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.3                            */
                /* Even though bitrate is going to be detected the bitrate must be set to      *
                 * 106kbps to get correct 106kbps parity                                       */
                st25r3911WriteRegister( ST25R3911_REG_BIT_RATE, (ST25R3911_REG_BIT_RATE_txrate_106 | ST25R3911_REG_BIT_RATE_rxrate_106) );
 801c17a:	2100      	movs	r1, #0
 801c17c:	2004      	movs	r0, #4
 801c17e:	f7e8 fe19 	bl	8004db4 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 801c182:	f7ff fde5 	bl	801bd50 <rfalIsExtFieldOn>
 801c186:	4603      	mov	r3, r0
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d057      	beq.n	801c23c <rfalListenSetState+0x174>
                {
                    reSetState = true;
 801c18c:	2301      	movs	r3, #1
 801c18e:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 801c190:	2302      	movs	r3, #2
 801c192:	73fb      	strb	r3, [r7, #15]
                }
                break;
 801c194:	e052      	b.n	801c23c <rfalListenSetState+0x174>
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                 
                /* nfc_ar may have triggered RF Collision Avoidance, disable it before executing Clear (Stop All activities) */
                st25r3911ClrRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801c196:	2101      	movs	r1, #1
 801c198:	2003      	movs	r0, #3
 801c19a:	f7e8 fe57 	bl	8004e4c <st25r3911ClrRegisterBits>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 801c19e:	20c2      	movs	r0, #194	; 0xc2
 801c1a0:	f7e8 ff96 	bl	80050d0 <st25r3911ExecuteCommand>
                st25r3911SetRegisterBits( ST25R3911_REG_MODE, ST25R3911_REG_MODE_nfc_ar );
 801c1a4:	2101      	movs	r1, #1
 801c1a6:	2003      	movs	r0, #3
 801c1a8:	f7e8 fe73 	bl	8004e92 <st25r3911SetRegisterBits>
                
                /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                st25r3911TxOff();
 801c1ac:	2108      	movs	r1, #8
 801c1ae:	2002      	movs	r0, #2
 801c1b0:	f7e8 fe4c 	bl	8004e4c <st25r3911ClrRegisterBits>

                
                /* Load 2nd/3rd stage gain setting from registers into the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 801c1b4:	20d5      	movs	r0, #213	; 0xd5
 801c1b6:	f7e8 ff8b 	bl	80050d0 <st25r3911ExecuteCommand>
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911 Errata #1.4                            */
                /* Enable; disable; enable mixer to make sure the digital decoder is in        *
                 * high state. This also switches the demodulator to mixer mode.               */
                st25r3911ReadRegister( ST25R3911_REG_RX_CONF1, &tmp );
 801c1ba:	f107 030b 	add.w	r3, r7, #11
 801c1be:	4619      	mov	r1, r3
 801c1c0:	200a      	movs	r0, #10
 801c1c2:	f7e8 fcc1 	bl	8004b48 <st25r3911ReadRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801c1c6:	7afb      	ldrb	r3, [r7, #11]
 801c1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1cc:	b2db      	uxtb	r3, r3
 801c1ce:	4619      	mov	r1, r3
 801c1d0:	200a      	movs	r0, #10
 801c1d2:	f7e8 fdef 	bl	8004db4 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (uint8_t)(tmp & ~ST25R3911_REG_RX_CONF1_amd_sel) );
 801c1d6:	7afb      	ldrb	r3, [r7, #11]
 801c1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c1dc:	b2db      	uxtb	r3, r3
 801c1de:	4619      	mov	r1, r3
 801c1e0:	200a      	movs	r0, #10
 801c1e2:	f7e8 fde7 	bl	8004db4 <st25r3911WriteRegister>
                st25r3911WriteRegister( ST25R3911_REG_RX_CONF1, (tmp | ST25R3911_REG_RX_CONF1_amd_sel) );
 801c1e6:	7afb      	ldrb	r3, [r7, #11]
 801c1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1ec:	b2db      	uxtb	r3, r3
 801c1ee:	4619      	mov	r1, r3
 801c1f0:	200a      	movs	r0, #10
 801c1f2:	f7e8 fddf 	bl	8004db4 <st25r3911WriteRegister>
                /*******************************************************************************/
                
                /* ReEnable the receiver */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 801c1f6:	20d1      	movs	r0, #209	; 0xd1
 801c1f8:	f7e8 ff6a 	bl	80050d0 <st25r3911ExecuteCommand>
                
                
                /* If external Field is no longer detected go back to POWER_OFF */
                if( !st25r3911IsExtFieldOn() )
 801c1fc:	2240      	movs	r2, #64	; 0x40
 801c1fe:	2140      	movs	r1, #64	; 0x40
 801c200:	2030      	movs	r0, #48	; 0x30
 801c202:	f7e8 fa9d 	bl	8004740 <st25r3911CheckReg>
 801c206:	4603      	mov	r3, r0
 801c208:	f083 0301 	eor.w	r3, r3, #1
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d003      	beq.n	801c21a <rfalListenSetState+0x152>
                {
                    reSetState = true;
 801c212:	2301      	movs	r3, #1
 801c214:	73bb      	strb	r3, [r7, #14]
                    newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 801c216:	2301      	movs	r3, #1
 801c218:	73fb      	strb	r3, [r7, #15]
                }

                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 801c21a:	4b10      	ldr	r3, [pc, #64]	; (801c25c <rfalListenSetState+0x194>)
 801c21c:	799b      	ldrb	r3, [r3, #6]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d00e      	beq.n	801c240 <rfalListenSetState+0x178>
 801c222:	4b0e      	ldr	r3, [pc, #56]	; (801c25c <rfalListenSetState+0x194>)
 801c224:	799b      	ldrb	r3, [r3, #6]
 801c226:	4619      	mov	r1, r3
 801c228:	2001      	movs	r0, #1
 801c22a:	f7e8 fd7b 	bl	8004d24 <st25r3911WriteTestRegister>
                break;
 801c22e:	e007      	b.n	801c240 <rfalListenSetState+0x178>
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
            case RFAL_LM_STATE_CARDEMU_4A:
            case RFAL_LM_STATE_CARDEMU_4B:
                return ERR_NOTSUPP;
 801c230:	2318      	movs	r3, #24
 801c232:	e00f      	b.n	801c254 <rfalListenSetState+0x18c>
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 801c234:	2321      	movs	r3, #33	; 0x21
 801c236:	e00d      	b.n	801c254 <rfalListenSetState+0x18c>
                break;
 801c238:	bf00      	nop
 801c23a:	e002      	b.n	801c242 <rfalListenSetState+0x17a>
                break;
 801c23c:	bf00      	nop
 801c23e:	e000      	b.n	801c242 <rfalListenSetState+0x17a>
                break;
 801c240:	bf00      	nop
        }
    }
    while( reSetState );
 801c242:	7bbb      	ldrb	r3, [r7, #14]
 801c244:	2b00      	cmp	r3, #0
 801c246:	f47f af4c 	bne.w	801c0e2 <rfalListenSetState+0x1a>
    
    gRFAL.Lm.state = newState;
 801c24a:	4a04      	ldr	r2, [pc, #16]	; (801c25c <rfalListenSetState+0x194>)
 801c24c:	7bfb      	ldrb	r3, [r7, #15]
 801c24e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 801c252:	89bb      	ldrh	r3, [r7, #12]
}
 801c254:	4618      	mov	r0, r3
 801c256:	3710      	adds	r7, #16
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}
 801c25c:	20003c40 	.word	0x20003c40
 801c260:	00f01930 	.word	0x00f01930
 801c264:	00f01910 	.word	0x00f01910

0801c268 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 801c268:	b5b0      	push	{r4, r5, r7, lr}
 801c26a:	b086      	sub	sp, #24
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d130      	bne.n	801c2d8 <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 801c276:	4bad      	ldr	r3, [pc, #692]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c278:	2214      	movs	r2, #20
 801c27a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gRFAL.wum.cfg.irqTout     = false;
 801c27e:	4bab      	ldr	r3, [pc, #684]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c280:	2200      	movs	r2, #0
 801c282:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gRFAL.wum.cfg.swTagDetect = false;
 801c286:	4ba9      	ldr	r3, [pc, #676]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c288:	2200      	movs	r2, #0
 801c28a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 801c28e:	4ba7      	ldr	r3, [pc, #668]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c290:	2201      	movs	r2, #1
 801c292:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        gRFAL.wum.cfg.indPha.enabled   = true;
 801c296:	4ba5      	ldr	r3, [pc, #660]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c298:	2201      	movs	r2, #1
 801c29a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        gRFAL.wum.cfg.cap.enabled      = false;
 801c29e:	4ba3      	ldr	r3, [pc, #652]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 801c2a6:	4ba1      	ldr	r3, [pc, #644]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2a8:	2202      	movs	r2, #2
 801c2aa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 801c2ae:	4b9f      	ldr	r3, [pc, #636]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2b0:	22ff      	movs	r2, #255	; 0xff
 801c2b2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 801c2b6:	4b9d      	ldr	r3, [pc, #628]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        gRFAL.wum.cfg.indPha.delta     = 2U;
 801c2be:	4b9b      	ldr	r3, [pc, #620]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2c0:	2202      	movs	r2, #2
 801c2c2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 801c2c6:	4b99      	ldr	r3, [pc, #612]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2c8:	22ff      	movs	r2, #255	; 0xff
 801c2ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 801c2ce:	4b97      	ldr	r3, [pc, #604]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801c2d6:	e00e      	b.n	801c2f6 <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 801c2d8:	4b94      	ldr	r3, [pc, #592]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2da:	687a      	ldr	r2, [r7, #4]
 801c2dc:	3369      	adds	r3, #105	; 0x69
 801c2de:	6811      	ldr	r1, [r2, #0]
 801c2e0:	6855      	ldr	r5, [r2, #4]
 801c2e2:	6894      	ldr	r4, [r2, #8]
 801c2e4:	68d0      	ldr	r0, [r2, #12]
 801c2e6:	6019      	str	r1, [r3, #0]
 801c2e8:	605d      	str	r5, [r3, #4]
 801c2ea:	609c      	str	r4, [r3, #8]
 801c2ec:	60d8      	str	r0, [r3, #12]
 801c2ee:	6911      	ldr	r1, [r2, #16]
 801c2f0:	6119      	str	r1, [r3, #16]
 801c2f2:	7d12      	ldrb	r2, [r2, #20]
 801c2f4:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801c2f6:	4b8d      	ldr	r3, [pc, #564]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c2f8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d009      	beq.n	801c314 <rfalWakeUpModeStart+0xac>
 801c300:	4b8a      	ldr	r3, [pc, #552]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c302:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c306:	2b00      	cmp	r3, #0
 801c308:	d121      	bne.n	801c34e <rfalWakeUpModeStart+0xe6>
 801c30a:	4b88      	ldr	r3, [pc, #544]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c30c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801c310:	2b00      	cmp	r3, #0
 801c312:	d11c      	bne.n	801c34e <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801c314:	4b85      	ldr	r3, [pc, #532]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c316:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801c31a:	f083 0301 	eor.w	r3, r3, #1
 801c31e:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 801c320:	2b00      	cmp	r3, #0
 801c322:	d00f      	beq.n	801c344 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801c324:	4b81      	ldr	r3, [pc, #516]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c326:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c32a:	f083 0301 	eor.w	r3, r3, #1
 801c32e:	b2db      	uxtb	r3, r3
 801c330:	2b00      	cmp	r3, #0
 801c332:	d007      	beq.n	801c344 <rfalWakeUpModeStart+0xdc>
 801c334:	4b7d      	ldr	r3, [pc, #500]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c336:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801c33a:	f083 0301 	eor.w	r3, r3, #1
 801c33e:	b2db      	uxtb	r3, r3
 801c340:	2b00      	cmp	r3, #0
 801c342:	d104      	bne.n	801c34e <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 801c344:	4b79      	ldr	r3, [pc, #484]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c346:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d001      	beq.n	801c352 <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 801c34e:	2307      	movs	r3, #7
 801c350:	e14f      	b.n	801c5f2 <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 801c352:	2300      	movs	r3, #0
 801c354:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 801c356:	f7e8 f82a 	bl	80043ae <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801c35a:	2110      	movs	r1, #16
 801c35c:	2009      	movs	r0, #9
 801c35e:	f7e8 fd75 	bl	8004e4c <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 801c362:	2208      	movs	r2, #8
 801c364:	21f8      	movs	r1, #248	; 0xf8
 801c366:	2003      	movs	r0, #3
 801c368:	f7e8 fdb1 	bl	8004ece <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 801c36c:	2004      	movs	r0, #4
 801c36e:	f7f5 fa93 	bl	8011898 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 801c372:	4b6e      	ldr	r3, [pc, #440]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c374:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801c378:	011b      	lsls	r3, r3, #4
 801c37a:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 801c37c:	4b6b      	ldr	r3, [pc, #428]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c37e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801c382:	2b0f      	cmp	r3, #15
 801c384:	d802      	bhi.n	801c38c <rfalWakeUpModeStart+0x124>
 801c386:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801c38a:	e000      	b.n	801c38e <rfalWakeUpModeStart+0x126>
 801c38c:	2200      	movs	r2, #0
 801c38e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c392:	4313      	orrs	r3, r2
 801c394:	b25b      	sxtb	r3, r3
 801c396:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 801c398:	4b64      	ldr	r3, [pc, #400]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c39a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d007      	beq.n	801c3b2 <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 801c3a2:	7dfb      	ldrb	r3, [r7, #23]
 801c3a4:	f043 0308 	orr.w	r3, r3, #8
 801c3a8:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 801c3aa:	693b      	ldr	r3, [r7, #16]
 801c3ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c3b0:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 801c3b2:	4b5e      	ldr	r3, [pc, #376]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c3b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d04c      	beq.n	801c456 <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 801c3bc:	4b5b      	ldr	r3, [pc, #364]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c3be:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801c3c2:	011b      	lsls	r3, r3, #4
 801c3c4:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 801c3c6:	4b59      	ldr	r3, [pc, #356]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c3c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d001      	beq.n	801c3d4 <rfalWakeUpModeStart+0x16c>
 801c3d0:	2208      	movs	r2, #8
 801c3d2:	e000      	b.n	801c3d6 <rfalWakeUpModeStart+0x16e>
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3da:	4313      	orrs	r3, r2
 801c3dc:	b25b      	sxtb	r3, r3
 801c3de:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 801c3e0:	4b52      	ldr	r3, [pc, #328]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c3e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801c3e6:	005b      	lsls	r3, r3, #1
 801c3e8:	b2db      	uxtb	r3, r3
 801c3ea:	b25b      	sxtb	r3, r3
 801c3ec:	f003 0306 	and.w	r3, r3, #6
 801c3f0:	b25a      	sxtb	r2, r3
 801c3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3f6:	4313      	orrs	r3, r2
 801c3f8:	b25b      	sxtb	r3, r3
 801c3fa:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 801c3fc:	4b4b      	ldr	r3, [pc, #300]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c3fe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801c402:	b25a      	sxtb	r2, r3
 801c404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c408:	4313      	orrs	r3, r2
 801c40a:	b25b      	sxtb	r3, r3
 801c40c:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 801c40e:	7bfb      	ldrb	r3, [r7, #15]
 801c410:	4619      	mov	r1, r3
 801c412:	2032      	movs	r0, #50	; 0x32
 801c414:	f7e8 fcce 	bl	8004db4 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 801c418:	4b44      	ldr	r3, [pc, #272]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c41a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801c41e:	f083 0301 	eor.w	r3, r3, #1
 801c422:	b2db      	uxtb	r3, r3
 801c424:	2b00      	cmp	r3, #0
 801c426:	d00e      	beq.n	801c446 <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 801c428:	4b40      	ldr	r3, [pc, #256]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c42a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801c42e:	2bff      	cmp	r3, #255	; 0xff
 801c430:	d102      	bne.n	801c438 <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 801c432:	483f      	ldr	r0, [pc, #252]	; (801c530 <rfalWakeUpModeStart+0x2c8>)
 801c434:	f7e8 f869 	bl	800450a <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 801c438:	4b3c      	ldr	r3, [pc, #240]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c43a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801c43e:	4619      	mov	r1, r3
 801c440:	2033      	movs	r0, #51	; 0x33
 801c442:	f7e8 fcb7 	bl	8004db4 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 801c446:	7dfb      	ldrb	r3, [r7, #23]
 801c448:	f043 0304 	orr.w	r3, r3, #4
 801c44c:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 801c44e:	693b      	ldr	r3, [r7, #16]
 801c450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c454:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 801c456:	4b35      	ldr	r3, [pc, #212]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c458:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d04c      	beq.n	801c4fa <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 801c460:	4b32      	ldr	r3, [pc, #200]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c462:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 801c466:	011b      	lsls	r3, r3, #4
 801c468:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 801c46a:	4b30      	ldr	r3, [pc, #192]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c46c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801c470:	2b00      	cmp	r3, #0
 801c472:	d001      	beq.n	801c478 <rfalWakeUpModeStart+0x210>
 801c474:	2208      	movs	r2, #8
 801c476:	e000      	b.n	801c47a <rfalWakeUpModeStart+0x212>
 801c478:	2200      	movs	r2, #0
 801c47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c47e:	4313      	orrs	r3, r2
 801c480:	b25b      	sxtb	r3, r3
 801c482:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 801c484:	4b29      	ldr	r3, [pc, #164]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c486:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801c48a:	005b      	lsls	r3, r3, #1
 801c48c:	b2db      	uxtb	r3, r3
 801c48e:	b25b      	sxtb	r3, r3
 801c490:	f003 0306 	and.w	r3, r3, #6
 801c494:	b25a      	sxtb	r2, r3
 801c496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c49a:	4313      	orrs	r3, r2
 801c49c:	b25b      	sxtb	r3, r3
 801c49e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 801c4a0:	4b22      	ldr	r3, [pc, #136]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c4a2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801c4a6:	b25a      	sxtb	r2, r3
 801c4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c4ac:	4313      	orrs	r3, r2
 801c4ae:	b25b      	sxtb	r3, r3
 801c4b0:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 801c4b2:	7bfb      	ldrb	r3, [r7, #15]
 801c4b4:	4619      	mov	r1, r3
 801c4b6:	2036      	movs	r0, #54	; 0x36
 801c4b8:	f7e8 fc7c 	bl	8004db4 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 801c4bc:	4b1b      	ldr	r3, [pc, #108]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c4be:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801c4c2:	f083 0301 	eor.w	r3, r3, #1
 801c4c6:	b2db      	uxtb	r3, r3
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d00e      	beq.n	801c4ea <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801c4cc:	4b17      	ldr	r3, [pc, #92]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c4ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801c4d2:	2bff      	cmp	r3, #255	; 0xff
 801c4d4:	d102      	bne.n	801c4dc <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 801c4d6:	4817      	ldr	r0, [pc, #92]	; (801c534 <rfalWakeUpModeStart+0x2cc>)
 801c4d8:	f7e8 f825 	bl	8004526 <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 801c4dc:	4b13      	ldr	r3, [pc, #76]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c4de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801c4e2:	4619      	mov	r1, r3
 801c4e4:	2037      	movs	r0, #55	; 0x37
 801c4e6:	f7e8 fc65 	bl	8004db4 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 801c4ea:	7dfb      	ldrb	r3, [r7, #23]
 801c4ec:	f043 0302 	orr.w	r3, r3, #2
 801c4f0:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4f8:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 801c4fa:	4b0c      	ldr	r3, [pc, #48]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c4fc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801c500:	2b00      	cmp	r3, #0
 801c502:	d05a      	beq.n	801c5ba <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 801c504:	2188      	movs	r1, #136	; 0x88
 801c506:	2002      	movs	r0, #2
 801c508:	f7e8 fca0 	bl	8004e4c <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 801c50c:	2000      	movs	r0, #0
 801c50e:	f7e8 f834 	bl	800457a <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 801c512:	4b06      	ldr	r3, [pc, #24]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c514:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801c518:	011b      	lsls	r3, r3, #4
 801c51a:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 801c51c:	4b03      	ldr	r3, [pc, #12]	; (801c52c <rfalWakeUpModeStart+0x2c4>)
 801c51e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801c522:	2b00      	cmp	r3, #0
 801c524:	d008      	beq.n	801c538 <rfalWakeUpModeStart+0x2d0>
 801c526:	2208      	movs	r2, #8
 801c528:	e007      	b.n	801c53a <rfalWakeUpModeStart+0x2d2>
 801c52a:	bf00      	nop
 801c52c:	20003c40 	.word	0x20003c40
 801c530:	20003cae 	.word	0x20003cae
 801c534:	20003cb4 	.word	0x20003cb4
 801c538:	2200      	movs	r2, #0
 801c53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c53e:	4313      	orrs	r3, r2
 801c540:	b25b      	sxtb	r3, r3
 801c542:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 801c544:	4b2d      	ldr	r3, [pc, #180]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c546:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801c54a:	005b      	lsls	r3, r3, #1
 801c54c:	b2db      	uxtb	r3, r3
 801c54e:	b25b      	sxtb	r3, r3
 801c550:	f003 0306 	and.w	r3, r3, #6
 801c554:	b25a      	sxtb	r2, r3
 801c556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c55a:	4313      	orrs	r3, r2
 801c55c:	b25b      	sxtb	r3, r3
 801c55e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 801c560:	4b26      	ldr	r3, [pc, #152]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c562:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801c566:	b25a      	sxtb	r2, r3
 801c568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c56c:	4313      	orrs	r3, r2
 801c56e:	b25b      	sxtb	r3, r3
 801c570:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 801c572:	7bfb      	ldrb	r3, [r7, #15]
 801c574:	4619      	mov	r1, r3
 801c576:	203a      	movs	r0, #58	; 0x3a
 801c578:	f7e8 fc1c 	bl	8004db4 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 801c57c:	4b1f      	ldr	r3, [pc, #124]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c57e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801c582:	f083 0301 	eor.w	r3, r3, #1
 801c586:	b2db      	uxtb	r3, r3
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d00e      	beq.n	801c5aa <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801c58c:	4b1b      	ldr	r3, [pc, #108]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c58e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801c592:	2bff      	cmp	r3, #255	; 0xff
 801c594:	d102      	bne.n	801c59c <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 801c596:	481a      	ldr	r0, [pc, #104]	; (801c600 <rfalWakeUpModeStart+0x398>)
 801c598:	f7e7 ffd3 	bl	8004542 <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 801c59c:	4b17      	ldr	r3, [pc, #92]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c59e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801c5a2:	4619      	mov	r1, r3
 801c5a4:	203b      	movs	r0, #59	; 0x3b
 801c5a6:	f7e8 fc05 	bl	8004db4 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 801c5aa:	7dfb      	ldrb	r3, [r7, #23]
 801c5ac:	f043 0301 	orr.w	r3, r3, #1
 801c5b0:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 801c5b2:	693b      	ldr	r3, [r7, #16]
 801c5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c5b8:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 801c5ba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c5be:	f7e8 ffc5 	bl	800554c <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 801c5c2:	6938      	ldr	r0, [r7, #16]
 801c5c4:	f7e8 ff7a 	bl	80054bc <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 801c5c8:	6938      	ldr	r0, [r7, #16]
 801c5ca:	f7e8 ffb3 	bl	8005534 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 801c5ce:	7dfb      	ldrb	r3, [r7, #23]
 801c5d0:	4619      	mov	r1, r3
 801c5d2:	2031      	movs	r0, #49	; 0x31
 801c5d4:	f7e8 fbee 	bl	8004db4 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 801c5d8:	2204      	movs	r2, #4
 801c5da:	2184      	movs	r1, #132	; 0x84
 801c5dc:	2002      	movs	r0, #2
 801c5de:	f7e8 fc76 	bl	8004ece <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 801c5e2:	4b06      	ldr	r3, [pc, #24]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c5e4:	2201      	movs	r2, #1
 801c5e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    gRFAL.state     = RFAL_STATE_WUM;  
 801c5ea:	4b04      	ldr	r3, [pc, #16]	; (801c5fc <rfalWakeUpModeStart+0x394>)
 801c5ec:	2205      	movs	r2, #5
 801c5ee:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 801c5f0:	2300      	movs	r3, #0
}
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	3718      	adds	r7, #24
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	bdb0      	pop	{r4, r5, r7, pc}
 801c5fa:	bf00      	nop
 801c5fc:	20003c40 	.word	0x20003c40
 801c600:	20003cba 	.word	0x20003cba

0801c604 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 801c604:	b480      	push	{r7}
 801c606:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 801c608:	4b05      	ldr	r3, [pc, #20]	; (801c620 <rfalWakeUpModeHasWoke+0x1c>)
 801c60a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801c60e:	2b01      	cmp	r3, #1
 801c610:	bf8c      	ite	hi
 801c612:	2301      	movhi	r3, #1
 801c614:	2300      	movls	r3, #0
 801c616:	b2db      	uxtb	r3, r3
}
 801c618:	4618      	mov	r0, r3
 801c61a:	46bd      	mov	sp, r7
 801c61c:	bc80      	pop	{r7}
 801c61e:	4770      	bx	lr
 801c620:	20003c40 	.word	0x20003c40

0801c624 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b082      	sub	sp, #8
 801c628:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 801c62a:	4b1c      	ldr	r3, [pc, #112]	; (801c69c <rfalRunWakeUpModeWorker+0x78>)
 801c62c:	781b      	ldrb	r3, [r3, #0]
 801c62e:	2b05      	cmp	r3, #5
 801c630:	d129      	bne.n	801c686 <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 801c632:	4b1a      	ldr	r3, [pc, #104]	; (801c69c <rfalRunWakeUpModeWorker+0x78>)
 801c634:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801c638:	3b01      	subs	r3, #1
 801c63a:	2b01      	cmp	r3, #1
 801c63c:	d825      	bhi.n	801c68a <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 801c63e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801c642:	f7e8 ff3b 	bl	80054bc <st25r3911GetInterrupt>
 801c646:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d01f      	beq.n	801c68e <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c654:	2b00      	cmp	r3, #0
 801c656:	d003      	beq.n	801c660 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801c658:	4b10      	ldr	r3, [pc, #64]	; (801c69c <rfalRunWakeUpModeWorker+0x78>)
 801c65a:	2202      	movs	r2, #2
 801c65c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c666:	2b00      	cmp	r3, #0
 801c668:	d003      	beq.n	801c672 <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801c66a:	4b0c      	ldr	r3, [pc, #48]	; (801c69c <rfalRunWakeUpModeWorker+0x78>)
 801c66c:	2202      	movs	r2, #2
 801c66e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d00a      	beq.n	801c692 <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 801c67c:	4b07      	ldr	r3, [pc, #28]	; (801c69c <rfalRunWakeUpModeWorker+0x78>)
 801c67e:	2202      	movs	r2, #2
 801c680:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            break;
 801c684:	e005      	b.n	801c692 <rfalRunWakeUpModeWorker+0x6e>
        return;
 801c686:	bf00      	nop
 801c688:	e004      	b.n	801c694 <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 801c68a:	bf00      	nop
 801c68c:	e002      	b.n	801c694 <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 801c68e:	bf00      	nop
 801c690:	e000      	b.n	801c694 <rfalRunWakeUpModeWorker+0x70>
            break;
 801c692:	bf00      	nop
    }
}
 801c694:	3708      	adds	r7, #8
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
 801c69a:	bf00      	nop
 801c69c:	20003c40 	.word	0x20003c40

0801c6a0 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 801c6a4:	4b0f      	ldr	r3, [pc, #60]	; (801c6e4 <rfalWakeUpModeStop+0x44>)
 801c6a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d101      	bne.n	801c6b2 <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 801c6ae:	2321      	movs	r3, #33	; 0x21
 801c6b0:	e015      	b.n	801c6de <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 801c6b2:	4b0c      	ldr	r3, [pc, #48]	; (801c6e4 <rfalWakeUpModeStop+0x44>)
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 801c6ba:	2110      	movs	r1, #16
 801c6bc:	2009      	movs	r0, #9
 801c6be:	f7e8 fbe8 	bl	8004e92 <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 801c6c2:	2104      	movs	r1, #4
 801c6c4:	2002      	movs	r0, #2
 801c6c6:	f7e8 fbc1 	bl	8004e4c <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 801c6ca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801c6ce:	f7e8 ff3d 	bl	800554c <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 801c6d2:	f7e7 fe74 	bl	80043be <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 801c6d6:	2005      	movs	r0, #5
 801c6d8:	f7f5 f8de 	bl	8011898 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 801c6dc:	2300      	movs	r3, #0
}
 801c6de:	4618      	mov	r0, r3
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	20003c40 	.word	0x20003c40

0801c6e8 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b082      	sub	sp, #8
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	80fb      	strh	r3, [r7, #6]
 801c6f2:	460b      	mov	r3, r1
 801c6f4:	717b      	strb	r3, [r7, #5]
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 801c6fa:	88fb      	ldrh	r3, [r7, #6]
 801c6fc:	b2db      	uxtb	r3, r3
 801c6fe:	793a      	ldrb	r2, [r7, #4]
 801c700:	7979      	ldrb	r1, [r7, #5]
 801c702:	4618      	mov	r0, r3
 801c704:	f7e8 fbe3 	bl	8004ece <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 801c708:	2300      	movs	r3, #0
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3708      	adds	r7, #8
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}

0801c712 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801c712:	b580      	push	{r7, lr}
 801c714:	b082      	sub	sp, #8
 801c716:	af00      	add	r7, sp, #0
 801c718:	4603      	mov	r3, r0
 801c71a:	80fb      	strh	r3, [r7, #6]
 801c71c:	460b      	mov	r3, r1
 801c71e:	717b      	strb	r3, [r7, #5]
 801c720:	4613      	mov	r3, r2
 801c722:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 801c724:	88fb      	ldrh	r3, [r7, #6]
 801c726:	b2db      	uxtb	r3, r3
 801c728:	793a      	ldrb	r2, [r7, #4]
 801c72a:	7979      	ldrb	r1, [r7, #5]
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7e8 fc0d 	bl	8004f4c <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 801c732:	2300      	movs	r3, #0
}
 801c734:	4618      	mov	r0, r3
 801c736:	3708      	adds	r7, #8
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}

0801c73c <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b086      	sub	sp, #24
 801c740:	af00      	add	r7, sp, #0
 801c742:	4603      	mov	r3, r0
 801c744:	60b9      	str	r1, [r7, #8]
 801c746:	607a      	str	r2, [r7, #4]
 801c748:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 801c74a:	2300      	movs	r3, #0
 801c74c:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801c74e:	2300      	movs	r3, #0
 801c750:	75fb      	strb	r3, [r7, #23]
 801c752:	e072      	b.n	801c83a <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 801c754:	2001      	movs	r0, #1
 801c756:	f7e8 ffcb 	bl	80056f0 <HAL_Delay>
        
        if( i==0U )
 801c75a:	7dfb      	ldrb	r3, [r7, #23]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d107      	bne.n	801c770 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 801c760:	f107 0312 	add.w	r3, r7, #18
 801c764:	4618      	mov	r0, r3
 801c766:	f000 f8c6 	bl	801c8f6 <rfalSt25tbPollerPcall>
 801c76a:	4603      	mov	r3, r0
 801c76c:	82bb      	strh	r3, [r7, #20]
 801c76e:	e008      	b.n	801c782 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 801c770:	f107 0212 	add.w	r2, r7, #18
 801c774:	7dfb      	ldrb	r3, [r7, #23]
 801c776:	4611      	mov	r1, r2
 801c778:	4618      	mov	r0, r3
 801c77a:	f000 f8e2 	bl	801c942 <rfalSt25tbPollerSlotMarker>
 801c77e:	4603      	mov	r3, r0
 801c780:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 801c782:	8abb      	ldrh	r3, [r7, #20]
 801c784:	2b00      	cmp	r3, #0
 801c786:	d148      	bne.n	801c81a <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	461a      	mov	r2, r3
 801c78e:	4613      	mov	r3, r2
 801c790:	009b      	lsls	r3, r3, #2
 801c792:	4413      	add	r3, r2
 801c794:	005b      	lsls	r3, r3, #1
 801c796:	461a      	mov	r2, r3
 801c798:	68bb      	ldr	r3, [r7, #8]
 801c79a:	4413      	add	r3, r2
 801c79c:	7cba      	ldrb	r2, [r7, #18]
 801c79e:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	781b      	ldrb	r3, [r3, #0]
 801c7a4:	461a      	mov	r2, r3
 801c7a6:	4613      	mov	r3, r2
 801c7a8:	009b      	lsls	r3, r3, #2
 801c7aa:	4413      	add	r3, r2
 801c7ac:	005b      	lsls	r3, r3, #1
 801c7ae:	461a      	mov	r2, r3
 801c7b0:	68bb      	ldr	r3, [r7, #8]
 801c7b2:	4413      	add	r3, r2
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 801c7b8:	7cbb      	ldrb	r3, [r7, #18]
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f000 f8f4 	bl	801c9a8 <rfalSt25tbPollerSelect>
 801c7c0:	4603      	mov	r3, r0
 801c7c2:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	781b      	ldrb	r3, [r3, #0]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d00b      	beq.n	801c7e4 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	781b      	ldrb	r3, [r3, #0]
 801c7d0:	461a      	mov	r2, r3
 801c7d2:	4613      	mov	r3, r2
 801c7d4:	009b      	lsls	r3, r3, #2
 801c7d6:	4413      	add	r3, r2
 801c7d8:	005b      	lsls	r3, r3, #1
 801c7da:	3b0a      	subs	r3, #10
 801c7dc:	68ba      	ldr	r2, [r7, #8]
 801c7de:	4413      	add	r3, r2
 801c7e0:	2201      	movs	r2, #1
 801c7e2:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 801c7e4:	8abb      	ldrh	r3, [r7, #20]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d10d      	bne.n	801c806 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	781b      	ldrb	r3, [r3, #0]
 801c7ee:	461a      	mov	r2, r3
 801c7f0:	4613      	mov	r3, r2
 801c7f2:	009b      	lsls	r3, r3, #2
 801c7f4:	4413      	add	r3, r2
 801c7f6:	005b      	lsls	r3, r3, #1
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	68bb      	ldr	r3, [r7, #8]
 801c7fc:	4413      	add	r3, r2
 801c7fe:	3301      	adds	r3, #1
 801c800:	4618      	mov	r0, r3
 801c802:	f000 f8fd 	bl	801ca00 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 801c806:	8abb      	ldrh	r3, [r7, #20]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d10e      	bne.n	801c82a <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	3301      	adds	r3, #1
 801c812:	b2da      	uxtb	r2, r3
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	701a      	strb	r2, [r3, #0]
 801c818:	e007      	b.n	801c82a <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801c81a:	8abb      	ldrh	r3, [r7, #20]
 801c81c:	2b15      	cmp	r3, #21
 801c81e:	d002      	beq.n	801c826 <rfalSt25tbPollerDoCollisionResolution+0xea>
 801c820:	8abb      	ldrh	r3, [r7, #20]
 801c822:	2b09      	cmp	r3, #9
 801c824:	d101      	bne.n	801c82a <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 801c826:	2301      	movs	r3, #1
 801c828:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	781b      	ldrb	r3, [r3, #0]
 801c82e:	7bfa      	ldrb	r2, [r7, #15]
 801c830:	429a      	cmp	r2, r3
 801c832:	d906      	bls.n	801c842 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801c834:	7dfb      	ldrb	r3, [r7, #23]
 801c836:	3301      	adds	r3, #1
 801c838:	75fb      	strb	r3, [r7, #23]
 801c83a:	7dfb      	ldrb	r3, [r7, #23]
 801c83c:	2b0f      	cmp	r3, #15
 801c83e:	d989      	bls.n	801c754 <rfalSt25tbPollerDoCollisionResolution+0x18>
 801c840:	e000      	b.n	801c844 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 801c842:	bf00      	nop
        }
    }
    return col;
 801c844:	7cfb      	ldrb	r3, [r7, #19]
}
 801c846:	4618      	mov	r0, r3
 801c848:	3718      	adds	r7, #24
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}

0801c84e <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 801c84e:	b580      	push	{r7, lr}
 801c850:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 801c852:	f7fb fc1d 	bl	8018090 <rfalNfcbPollerInitialize>
 801c856:	4603      	mov	r3, r0
}
 801c858:	4618      	mov	r0, r3
 801c85a:	bd80      	pop	{r7, pc}

0801c85c <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b084      	sub	sp, #16
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 801c864:	2300      	movs	r3, #0
 801c866:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 801c868:	f107 030d 	add.w	r3, r7, #13
 801c86c:	4618      	mov	r0, r3
 801c86e:	f000 f815 	bl	801c89c <rfalSt25tbPollerInitiate>
 801c872:	4603      	mov	r3, r0
 801c874:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 801c876:	89fb      	ldrh	r3, [r7, #14]
 801c878:	2b15      	cmp	r3, #21
 801c87a:	d002      	beq.n	801c882 <rfalSt25tbPollerCheckPresence+0x26>
 801c87c:	89fb      	ldrh	r3, [r7, #14]
 801c87e:	2b09      	cmp	r3, #9
 801c880:	d101      	bne.n	801c886 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 801c882:	2300      	movs	r3, #0
 801c884:	e006      	b.n	801c894 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d002      	beq.n	801c892 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 801c88c:	7b7a      	ldrb	r2, [r7, #13]
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801c892:	89fb      	ldrh	r3, [r7, #14]
}
 801c894:	4618      	mov	r0, r3
 801c896:	3710      	adds	r7, #16
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}

0801c89c <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b08a      	sub	sp, #40	; 0x28
 801c8a0:	af04      	add	r7, sp, #16
 801c8a2:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 801c8a4:	2306      	movs	r3, #6
 801c8a6:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801c8ac:	f107 020c 	add.w	r2, r7, #12
 801c8b0:	f107 0010 	add.w	r0, r7, #16
 801c8b4:	f241 036d 	movw	r3, #4205	; 0x106d
 801c8b8:	9302      	str	r3, [sp, #8]
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	9301      	str	r3, [sp, #4]
 801c8be:	f107 0314 	add.w	r3, r7, #20
 801c8c2:	9300      	str	r3, [sp, #0]
 801c8c4:	2303      	movs	r3, #3
 801c8c6:	2102      	movs	r1, #2
 801c8c8:	f7fd ff24 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801c8cc:	4603      	mov	r3, r0
 801c8ce:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801c8d0:	8afb      	ldrh	r3, [r7, #22]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d104      	bne.n	801c8e0 <rfalSt25tbPollerInitiate+0x44>
 801c8d6:	8abb      	ldrh	r3, [r7, #20]
 801c8d8:	2b01      	cmp	r3, #1
 801c8da:	d001      	beq.n	801c8e0 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 801c8dc:	230b      	movs	r3, #11
 801c8de:	e006      	b.n	801c8ee <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d002      	beq.n	801c8ec <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 801c8e6:	7b3a      	ldrb	r2, [r7, #12]
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 801c8ec:	8afb      	ldrh	r3, [r7, #22]
}
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	3718      	adds	r7, #24
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	bd80      	pop	{r7, pc}

0801c8f6 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 801c8f6:	b580      	push	{r7, lr}
 801c8f8:	b088      	sub	sp, #32
 801c8fa:	af04      	add	r7, sp, #16
 801c8fc:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 801c8fe:	2306      	movs	r3, #6
 801c900:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 801c902:	2304      	movs	r3, #4
 801c904:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801c906:	f107 0008 	add.w	r0, r7, #8
 801c90a:	f241 036d 	movw	r3, #4205	; 0x106d
 801c90e:	9302      	str	r3, [sp, #8]
 801c910:	2300      	movs	r3, #0
 801c912:	9301      	str	r3, [sp, #4]
 801c914:	f107 030c 	add.w	r3, r7, #12
 801c918:	9300      	str	r3, [sp, #0]
 801c91a:	2301      	movs	r3, #1
 801c91c:	687a      	ldr	r2, [r7, #4]
 801c91e:	2102      	movs	r1, #2
 801c920:	f7fd fef8 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801c924:	4603      	mov	r3, r0
 801c926:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801c928:	89fb      	ldrh	r3, [r7, #14]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d104      	bne.n	801c938 <rfalSt25tbPollerPcall+0x42>
 801c92e:	89bb      	ldrh	r3, [r7, #12]
 801c930:	2b01      	cmp	r3, #1
 801c932:	d001      	beq.n	801c938 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 801c934:	230b      	movs	r3, #11
 801c936:	e000      	b.n	801c93a <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 801c938:	89fb      	ldrh	r3, [r7, #14]
}
 801c93a:	4618      	mov	r0, r3
 801c93c:	3710      	adds	r7, #16
 801c93e:	46bd      	mov	sp, r7
 801c940:	bd80      	pop	{r7, pc}

0801c942 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 801c942:	b580      	push	{r7, lr}
 801c944:	b088      	sub	sp, #32
 801c946:	af04      	add	r7, sp, #16
 801c948:	4603      	mov	r3, r0
 801c94a:	6039      	str	r1, [r7, #0]
 801c94c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 801c94e:	79fb      	ldrb	r3, [r7, #7]
 801c950:	2b00      	cmp	r3, #0
 801c952:	d002      	beq.n	801c95a <rfalSt25tbPollerSlotMarker+0x18>
 801c954:	79fb      	ldrb	r3, [r7, #7]
 801c956:	2b0f      	cmp	r3, #15
 801c958:	d901      	bls.n	801c95e <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 801c95a:	2307      	movs	r3, #7
 801c95c:	e020      	b.n	801c9a0 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 801c95e:	79fb      	ldrb	r3, [r7, #7]
 801c960:	011b      	lsls	r3, r3, #4
 801c962:	b2db      	uxtb	r3, r3
 801c964:	f043 0306 	orr.w	r3, r3, #6
 801c968:	b2db      	uxtb	r3, r3
 801c96a:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801c96c:	f107 000b 	add.w	r0, r7, #11
 801c970:	f241 036d 	movw	r3, #4205	; 0x106d
 801c974:	9302      	str	r3, [sp, #8]
 801c976:	2300      	movs	r3, #0
 801c978:	9301      	str	r3, [sp, #4]
 801c97a:	f107 030c 	add.w	r3, r7, #12
 801c97e:	9300      	str	r3, [sp, #0]
 801c980:	2301      	movs	r3, #1
 801c982:	683a      	ldr	r2, [r7, #0]
 801c984:	2101      	movs	r1, #1
 801c986:	f7fd fec5 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801c98a:	4603      	mov	r3, r0
 801c98c:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801c98e:	89fb      	ldrh	r3, [r7, #14]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d104      	bne.n	801c99e <rfalSt25tbPollerSlotMarker+0x5c>
 801c994:	89bb      	ldrh	r3, [r7, #12]
 801c996:	2b01      	cmp	r3, #1
 801c998:	d001      	beq.n	801c99e <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 801c99a:	230b      	movs	r3, #11
 801c99c:	e000      	b.n	801c9a0 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 801c99e:	89fb      	ldrh	r3, [r7, #14]
}
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	3710      	adds	r7, #16
 801c9a4:	46bd      	mov	sp, r7
 801c9a6:	bd80      	pop	{r7, pc}

0801c9a8 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 801c9a8:	b580      	push	{r7, lr}
 801c9aa:	b08a      	sub	sp, #40	; 0x28
 801c9ac:	af04      	add	r7, sp, #16
 801c9ae:	4603      	mov	r3, r0
 801c9b0:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 801c9b2:	230e      	movs	r3, #14
 801c9b4:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 801c9b6:	79fb      	ldrb	r3, [r7, #7]
 801c9b8:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801c9ba:	f107 020f 	add.w	r2, r7, #15
 801c9be:	f107 0010 	add.w	r0, r7, #16
 801c9c2:	f241 036d 	movw	r3, #4205	; 0x106d
 801c9c6:	9302      	str	r3, [sp, #8]
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	9301      	str	r3, [sp, #4]
 801c9cc:	f107 0314 	add.w	r3, r7, #20
 801c9d0:	9300      	str	r3, [sp, #0]
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	2102      	movs	r1, #2
 801c9d6:	f7fd fe9d 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 801c9de:	8afb      	ldrh	r3, [r7, #22]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d108      	bne.n	801c9f6 <rfalSt25tbPollerSelect+0x4e>
 801c9e4:	8abb      	ldrh	r3, [r7, #20]
 801c9e6:	2b01      	cmp	r3, #1
 801c9e8:	d103      	bne.n	801c9f2 <rfalSt25tbPollerSelect+0x4a>
 801c9ea:	7bfb      	ldrb	r3, [r7, #15]
 801c9ec:	79fa      	ldrb	r2, [r7, #7]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d001      	beq.n	801c9f6 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 801c9f2:	230b      	movs	r3, #11
 801c9f4:	e000      	b.n	801c9f8 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 801c9f6:	8afb      	ldrh	r3, [r7, #22]
}
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	3718      	adds	r7, #24
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bd80      	pop	{r7, pc}

0801ca00 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 801ca00:	b580      	push	{r7, lr}
 801ca02:	b088      	sub	sp, #32
 801ca04:	af04      	add	r7, sp, #16
 801ca06:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 801ca08:	230b      	movs	r3, #11
 801ca0a:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 801ca0c:	f107 000b 	add.w	r0, r7, #11
 801ca10:	f241 036d 	movw	r3, #4205	; 0x106d
 801ca14:	9302      	str	r3, [sp, #8]
 801ca16:	2300      	movs	r3, #0
 801ca18:	9301      	str	r3, [sp, #4]
 801ca1a:	f107 030c 	add.w	r3, r7, #12
 801ca1e:	9300      	str	r3, [sp, #0]
 801ca20:	2308      	movs	r3, #8
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	2101      	movs	r1, #1
 801ca26:	f7fd fe75 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 801ca2e:	89fb      	ldrh	r3, [r7, #14]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d104      	bne.n	801ca3e <rfalSt25tbPollerGetUID+0x3e>
 801ca34:	89bb      	ldrh	r3, [r7, #12]
 801ca36:	2b08      	cmp	r3, #8
 801ca38:	d001      	beq.n	801ca3e <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 801ca3a:	230b      	movs	r3, #11
 801ca3c:	e000      	b.n	801ca40 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 801ca3e:	89fb      	ldrh	r3, [r7, #14]
}
 801ca40:	4618      	mov	r0, r3
 801ca42:	3710      	adds	r7, #16
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}

0801ca48 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b086      	sub	sp, #24
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	4603      	mov	r3, r0
 801ca50:	60b9      	str	r1, [r7, #8]
 801ca52:	607a      	str	r2, [r7, #4]
 801ca54:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 801ca56:	68bb      	ldr	r3, [r7, #8]
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d005      	beq.n	801ca68 <rfalSt25tbPollerCollisionResolution+0x20>
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d002      	beq.n	801ca68 <rfalSt25tbPollerCollisionResolution+0x20>
 801ca62:	7bfb      	ldrb	r3, [r7, #15]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d101      	bne.n	801ca6c <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 801ca68:	2307      	movs	r3, #7
 801ca6a:	e05c      	b.n	801cb26 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	2200      	movs	r2, #0
 801ca70:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 801ca72:	f107 0314 	add.w	r3, r7, #20
 801ca76:	4618      	mov	r0, r3
 801ca78:	f7ff ff10 	bl	801c89c <rfalSt25tbPollerInitiate>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 801ca80:	8afb      	ldrh	r3, [r7, #22]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d139      	bne.n	801cafa <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	781b      	ldrb	r3, [r3, #0]
 801ca8a:	461a      	mov	r2, r3
 801ca8c:	4613      	mov	r3, r2
 801ca8e:	009b      	lsls	r3, r3, #2
 801ca90:	4413      	add	r3, r2
 801ca92:	005b      	lsls	r3, r3, #1
 801ca94:	461a      	mov	r2, r3
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	4413      	add	r3, r2
 801ca9a:	7d3a      	ldrb	r2, [r7, #20]
 801ca9c:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	461a      	mov	r2, r3
 801caa4:	4613      	mov	r3, r2
 801caa6:	009b      	lsls	r3, r3, #2
 801caa8:	4413      	add	r3, r2
 801caaa:	005b      	lsls	r3, r3, #1
 801caac:	461a      	mov	r2, r3
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	4413      	add	r3, r2
 801cab2:	2200      	movs	r2, #0
 801cab4:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 801cab6:	7d3b      	ldrb	r3, [r7, #20]
 801cab8:	4618      	mov	r0, r3
 801caba:	f7ff ff75 	bl	801c9a8 <rfalSt25tbPollerSelect>
 801cabe:	4603      	mov	r3, r0
 801cac0:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 801cac2:	8afb      	ldrh	r3, [r7, #22]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d10f      	bne.n	801cae8 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	781b      	ldrb	r3, [r3, #0]
 801cacc:	461a      	mov	r2, r3
 801cace:	4613      	mov	r3, r2
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	4413      	add	r3, r2
 801cad4:	005b      	lsls	r3, r3, #1
 801cad6:	461a      	mov	r2, r3
 801cad8:	68bb      	ldr	r3, [r7, #8]
 801cada:	4413      	add	r3, r2
 801cadc:	3301      	adds	r3, #1
 801cade:	4618      	mov	r0, r3
 801cae0:	f7ff ff8e 	bl	801ca00 <rfalSt25tbPollerGetUID>
 801cae4:	4603      	mov	r3, r0
 801cae6:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 801cae8:	8afb      	ldrh	r3, [r7, #22]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d105      	bne.n	801cafa <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	781b      	ldrb	r3, [r3, #0]
 801caf2:	3301      	adds	r3, #1
 801caf4:	b2da      	uxtb	r2, r3
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	7bfa      	ldrb	r2, [r7, #15]
 801cb00:	429a      	cmp	r2, r3
 801cb02:	d90f      	bls.n	801cb24 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 801cb04:	7bfb      	ldrb	r3, [r7, #15]
 801cb06:	687a      	ldr	r2, [r7, #4]
 801cb08:	68b9      	ldr	r1, [r7, #8]
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7ff fe16 	bl	801c73c <rfalSt25tbPollerDoCollisionResolution>
 801cb10:	4603      	mov	r3, r0
 801cb12:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 801cb14:	7d7b      	ldrb	r3, [r7, #21]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d004      	beq.n	801cb24 <rfalSt25tbPollerCollisionResolution+0xdc>
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	781b      	ldrb	r3, [r3, #0]
 801cb1e:	7bfa      	ldrb	r2, [r7, #15]
 801cb20:	429a      	cmp	r2, r3
 801cb22:	d8ef      	bhi.n	801cb04 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 801cb24:	2300      	movs	r3, #0
}
 801cb26:	4618      	mov	r0, r3
 801cb28:	3718      	adds	r7, #24
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	bd80      	pop	{r7, pc}

0801cb2e <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801cb2e:	b580      	push	{r7, lr}
 801cb30:	b08c      	sub	sp, #48	; 0x30
 801cb32:	af06      	add	r7, sp, #24
 801cb34:	60b9      	str	r1, [r7, #8]
 801cb36:	607b      	str	r3, [r7, #4]
 801cb38:	4603      	mov	r3, r0
 801cb3a:	73fb      	strb	r3, [r7, #15]
 801cb3c:	4613      	mov	r3, r2
 801cb3e:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 801cb40:	2300      	movs	r3, #0
 801cb42:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801cb44:	7dfb      	ldrb	r3, [r7, #23]
 801cb46:	1c5a      	adds	r2, r3, #1
 801cb48:	75fa      	strb	r2, [r7, #23]
 801cb4a:	89ba      	ldrh	r2, [r7, #12]
 801cb4c:	b2d2      	uxtb	r2, r2
 801cb4e:	3318      	adds	r3, #24
 801cb50:	443b      	add	r3, r7
 801cb52:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801cb56:	89bb      	ldrh	r3, [r7, #12]
 801cb58:	0a1b      	lsrs	r3, r3, #8
 801cb5a:	b29a      	uxth	r2, r3
 801cb5c:	7dfb      	ldrb	r3, [r7, #23]
 801cb5e:	1c59      	adds	r1, r3, #1
 801cb60:	75f9      	strb	r1, [r7, #23]
 801cb62:	b2d2      	uxtb	r2, r2
 801cb64:	3318      	adds	r3, #24
 801cb66:	443b      	add	r3, r7
 801cb68:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801cb6c:	7bfb      	ldrb	r3, [r7, #15]
 801cb6e:	f043 0308 	orr.w	r3, r3, #8
 801cb72:	b2d9      	uxtb	r1, r3
 801cb74:	7dfb      	ldrb	r3, [r7, #23]
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb7a:	9204      	str	r2, [sp, #16]
 801cb7c:	8c3a      	ldrh	r2, [r7, #32]
 801cb7e:	9203      	str	r2, [sp, #12]
 801cb80:	687a      	ldr	r2, [r7, #4]
 801cb82:	9202      	str	r2, [sp, #8]
 801cb84:	9301      	str	r3, [sp, #4]
 801cb86:	f107 0314 	add.w	r3, r7, #20
 801cb8a:	9300      	str	r3, [sp, #0]
 801cb8c:	68bb      	ldr	r3, [r7, #8]
 801cb8e:	2200      	movs	r2, #0
 801cb90:	2020      	movs	r0, #32
 801cb92:	f7fc fdf1 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 801cb96:	4603      	mov	r3, r0
}
 801cb98:	4618      	mov	r0, r3
 801cb9a:	3718      	adds	r7, #24
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	bd80      	pop	{r7, pc}

0801cba0 <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b09e      	sub	sp, #120	; 0x78
 801cba4:	af06      	add	r7, sp, #24
 801cba6:	60b9      	str	r1, [r7, #8]
 801cba8:	607b      	str	r3, [r7, #4]
 801cbaa:	4603      	mov	r3, r0
 801cbac:	73fb      	strb	r3, [r7, #15]
 801cbae:	4613      	mov	r3, r2
 801cbb0:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801cbb2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d006      	beq.n	801cbc8 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801cbba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801cbbe:	2b20      	cmp	r3, #32
 801cbc0:	d802      	bhi.n	801cbc8 <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d101      	bne.n	801cbcc <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 801cbc8:	2307      	movs	r3, #7
 801cbca:	e045      	b.n	801cc58 <rfalST25xVPollerM24LRWriteSingleBlock+0xb8>
    }
    
    dataLen = 0U;
 801cbcc:	2300      	movs	r3, #0
 801cbce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801cbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cbd6:	1c5a      	adds	r2, r3, #1
 801cbd8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 801cbdc:	89ba      	ldrh	r2, [r7, #12]
 801cbde:	b2d2      	uxtb	r2, r2
 801cbe0:	3360      	adds	r3, #96	; 0x60
 801cbe2:	443b      	add	r3, r7
 801cbe4:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801cbe8:	89bb      	ldrh	r3, [r7, #12]
 801cbea:	0a1b      	lsrs	r3, r3, #8
 801cbec:	b29a      	uxth	r2, r3
 801cbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cbf2:	1c59      	adds	r1, r3, #1
 801cbf4:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 801cbf8:	b2d2      	uxtb	r2, r2
 801cbfa:	3360      	adds	r3, #96	; 0x60
 801cbfc:	443b      	add	r3, r7
 801cbfe:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 801cc02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cc06:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801cc0a:	4413      	add	r3, r2
 801cc0c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801cc10:	6879      	ldr	r1, [r7, #4]
 801cc12:	4618      	mov	r0, r3
 801cc14:	f000 fc88 	bl	801d528 <memcpy>
    dataLen += blockLen;
 801cc18:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801cc1c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801cc20:	4413      	add	r3, r2
 801cc22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801cc26:	7bfb      	ldrb	r3, [r7, #15]
 801cc28:	f043 0308 	orr.w	r3, r3, #8
 801cc2c:	b2d9      	uxtb	r1, r3
 801cc2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cc32:	b29b      	uxth	r3, r3
 801cc34:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801cc38:	9204      	str	r2, [sp, #16]
 801cc3a:	222a      	movs	r2, #42	; 0x2a
 801cc3c:	9203      	str	r2, [sp, #12]
 801cc3e:	f107 0210 	add.w	r2, r7, #16
 801cc42:	9202      	str	r2, [sp, #8]
 801cc44:	9301      	str	r3, [sp, #4]
 801cc46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cc4a:	9300      	str	r3, [sp, #0]
 801cc4c:	68bb      	ldr	r3, [r7, #8]
 801cc4e:	2200      	movs	r2, #0
 801cc50:	2021      	movs	r0, #33	; 0x21
 801cc52:	f7fc fd91 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 801cc56:	4603      	mov	r3, r0
}
 801cc58:	4618      	mov	r0, r3
 801cc5a:	3760      	adds	r7, #96	; 0x60
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	bd80      	pop	{r7, pc}

0801cc60 <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b08a      	sub	sp, #40	; 0x28
 801cc64:	af06      	add	r7, sp, #24
 801cc66:	6039      	str	r1, [r7, #0]
 801cc68:	4611      	mov	r1, r2
 801cc6a:	461a      	mov	r2, r3
 801cc6c:	4603      	mov	r3, r0
 801cc6e:	71fb      	strb	r3, [r7, #7]
 801cc70:	460b      	mov	r3, r1
 801cc72:	80bb      	strh	r3, [r7, #4]
 801cc74:	4613      	mov	r3, r2
 801cc76:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 801cc78:	2300      	movs	r3, #0
 801cc7a:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801cc7c:	7bfb      	ldrb	r3, [r7, #15]
 801cc7e:	1c5a      	adds	r2, r3, #1
 801cc80:	73fa      	strb	r2, [r7, #15]
 801cc82:	88ba      	ldrh	r2, [r7, #4]
 801cc84:	b2d2      	uxtb	r2, r2
 801cc86:	3310      	adds	r3, #16
 801cc88:	443b      	add	r3, r7
 801cc8a:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801cc8e:	88bb      	ldrh	r3, [r7, #4]
 801cc90:	0a1b      	lsrs	r3, r3, #8
 801cc92:	b29a      	uxth	r2, r3
 801cc94:	7bfb      	ldrb	r3, [r7, #15]
 801cc96:	1c59      	adds	r1, r3, #1
 801cc98:	73f9      	strb	r1, [r7, #15]
 801cc9a:	b2d2      	uxtb	r2, r2
 801cc9c:	3310      	adds	r3, #16
 801cc9e:	443b      	add	r3, r7
 801cca0:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 801cca4:	7bfb      	ldrb	r3, [r7, #15]
 801cca6:	1c5a      	adds	r2, r3, #1
 801cca8:	73fa      	strb	r2, [r7, #15]
 801ccaa:	3310      	adds	r3, #16
 801ccac:	443b      	add	r3, r7
 801ccae:	79ba      	ldrb	r2, [r7, #6]
 801ccb0:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801ccb4:	79fb      	ldrb	r3, [r7, #7]
 801ccb6:	f043 0308 	orr.w	r3, r3, #8
 801ccba:	b2d9      	uxtb	r1, r3
 801ccbc:	7bfb      	ldrb	r3, [r7, #15]
 801ccbe:	b29b      	uxth	r3, r3
 801ccc0:	6a3a      	ldr	r2, [r7, #32]
 801ccc2:	9204      	str	r2, [sp, #16]
 801ccc4:	8bba      	ldrh	r2, [r7, #28]
 801ccc6:	9203      	str	r2, [sp, #12]
 801ccc8:	69ba      	ldr	r2, [r7, #24]
 801ccca:	9202      	str	r2, [sp, #8]
 801cccc:	9301      	str	r3, [sp, #4]
 801ccce:	f107 0308 	add.w	r3, r7, #8
 801ccd2:	9300      	str	r3, [sp, #0]
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	2023      	movs	r0, #35	; 0x23
 801ccda:	f7fc fd4d 	bl	8019778 <rfalNfcvPollerTransceiveReq>
 801ccde:	4603      	mov	r3, r0
}
 801cce0:	4618      	mov	r0, r3
 801cce2:	3710      	adds	r7, #16
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bd80      	pop	{r7, pc}

0801cce8 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 801cce8:	b580      	push	{r7, lr}
 801ccea:	b082      	sub	sp, #8
 801ccec:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 801ccee:	2200      	movs	r2, #0
 801ccf0:	2100      	movs	r1, #0
 801ccf2:	2002      	movs	r0, #2
 801ccf4:	f7fc fede 	bl	8019ab4 <rfalSetMode>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	80fb      	strh	r3, [r7, #6]
 801ccfc:	88fb      	ldrh	r3, [r7, #6]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d001      	beq.n	801cd06 <rfalT1TPollerInitialize+0x1e>
 801cd02:	88fb      	ldrh	r3, [r7, #6]
 801cd04:	e00e      	b.n	801cd24 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801cd06:	2001      	movs	r0, #1
 801cd08:	f7fd fa70 	bl	801a1ec <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 801cd0c:	2000      	movs	r0, #0
 801cd0e:	f7fd faa5 	bl	801a25c <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 801cd12:	f240 4094 	movw	r0, #1172	; 0x494
 801cd16:	f7fd fa8d 	bl	801a234 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 801cd1a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801cd1e:	f7fd fa75 	bl	801a20c <rfalSetFDTPoll>
    
    return ERR_NONE;
 801cd22:	2300      	movs	r3, #0
}
 801cd24:	4618      	mov	r0, r3
 801cd26:	3708      	adds	r7, #8
 801cd28:	46bd      	mov	sp, r7
 801cd2a:	bd80      	pop	{r7, pc}

0801cd2c <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b08a      	sub	sp, #40	; 0x28
 801cd30:	af04      	add	r7, sp, #16
 801cd32:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d101      	bne.n	801cd3e <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 801cd3a:	2307      	movs	r3, #7
 801cd3c:	e02a      	b.n	801cd94 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 801cd3e:	f107 030c 	add.w	r3, r7, #12
 801cd42:	2207      	movs	r2, #7
 801cd44:	2100      	movs	r1, #0
 801cd46:	4618      	mov	r0, r3
 801cd48:	f000 fc16 	bl	801d578 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 801cd4c:	2378      	movs	r3, #120	; 0x78
 801cd4e:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 801cd50:	f107 000c 	add.w	r0, r7, #12
 801cd54:	f640 13a8 	movw	r3, #2472	; 0x9a8
 801cd58:	9302      	str	r3, [sp, #8]
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	9301      	str	r3, [sp, #4]
 801cd5e:	f107 030a 	add.w	r3, r7, #10
 801cd62:	9300      	str	r3, [sp, #0]
 801cd64:	2306      	movs	r3, #6
 801cd66:	687a      	ldr	r2, [r7, #4]
 801cd68:	2107      	movs	r1, #7
 801cd6a:	f7fd fcd3 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	82fb      	strh	r3, [r7, #22]
 801cd72:	8afb      	ldrh	r3, [r7, #22]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d001      	beq.n	801cd7c <rfalT1TPollerRid+0x50>
 801cd78:	8afb      	ldrh	r3, [r7, #22]
 801cd7a:	e00b      	b.n	801cd94 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 801cd7c:	897b      	ldrh	r3, [r7, #10]
 801cd7e:	2b06      	cmp	r3, #6
 801cd80:	d105      	bne.n	801cd8e <rfalT1TPollerRid+0x62>
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	781b      	ldrb	r3, [r3, #0]
 801cd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cd8a:	2b10      	cmp	r3, #16
 801cd8c:	d001      	beq.n	801cd92 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801cd8e:	230b      	movs	r3, #11
 801cd90:	e000      	b.n	801cd94 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 801cd92:	2300      	movs	r3, #0
}
 801cd94:	4618      	mov	r0, r3
 801cd96:	3718      	adds	r7, #24
 801cd98:	46bd      	mov	sp, r7
 801cd9a:	bd80      	pop	{r7, pc}

0801cd9c <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 801cd9c:	b580      	push	{r7, lr}
 801cd9e:	b08a      	sub	sp, #40	; 0x28
 801cda0:	af04      	add	r7, sp, #16
 801cda2:	60b9      	str	r1, [r7, #8]
 801cda4:	607b      	str	r3, [r7, #4]
 801cda6:	4603      	mov	r3, r0
 801cda8:	73fb      	strb	r3, [r7, #15]
 801cdaa:	4613      	mov	r3, r2
 801cdac:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 801cdae:	68bb      	ldr	r3, [r7, #8]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d002      	beq.n	801cdba <rfalT2TPollerRead+0x1e>
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d101      	bne.n	801cdbe <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 801cdba:	2307      	movs	r3, #7
 801cdbc:	e023      	b.n	801ce06 <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 801cdbe:	2330      	movs	r3, #48	; 0x30
 801cdc0:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 801cdc2:	7bfb      	ldrb	r3, [r7, #15]
 801cdc4:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801cdc6:	89ba      	ldrh	r2, [r7, #12]
 801cdc8:	f107 0014 	add.w	r0, r7, #20
 801cdcc:	4b10      	ldr	r3, [pc, #64]	; (801ce10 <rfalT2TPollerRead+0x74>)
 801cdce:	9302      	str	r3, [sp, #8]
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	9301      	str	r3, [sp, #4]
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	9300      	str	r3, [sp, #0]
 801cdd8:	4613      	mov	r3, r2
 801cdda:	68ba      	ldr	r2, [r7, #8]
 801cddc:	2102      	movs	r1, #2
 801cdde:	f7fd fc99 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801cde2:	4603      	mov	r3, r0
 801cde4:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801cde6:	8afb      	ldrh	r3, [r7, #22]
 801cde8:	2b28      	cmp	r3, #40	; 0x28
 801cdea:	d10b      	bne.n	801ce04 <rfalT2TPollerRead+0x68>
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	881b      	ldrh	r3, [r3, #0]
 801cdf0:	2b01      	cmp	r3, #1
 801cdf2:	d107      	bne.n	801ce04 <rfalT2TPollerRead+0x68>
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	781b      	ldrb	r3, [r3, #0]
 801cdf8:	f003 030f 	and.w	r3, r3, #15
 801cdfc:	2b0a      	cmp	r3, #10
 801cdfe:	d001      	beq.n	801ce04 <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 801ce00:	230b      	movs	r3, #11
 801ce02:	e000      	b.n	801ce06 <rfalT2TPollerRead+0x6a>
    }
    return ret;
 801ce04:	8afb      	ldrh	r3, [r7, #22]
 }
 801ce06:	4618      	mov	r0, r3
 801ce08:	3718      	adds	r7, #24
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	000108d8 	.word	0x000108d8

0801ce14 <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 801ce14:	b580      	push	{r7, lr}
 801ce16:	b08a      	sub	sp, #40	; 0x28
 801ce18:	af04      	add	r7, sp, #16
 801ce1a:	4603      	mov	r3, r0
 801ce1c:	6039      	str	r1, [r7, #0]
 801ce1e:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 801ce20:	23a2      	movs	r3, #162	; 0xa2
 801ce22:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 801ce24:	79fb      	ldrb	r3, [r7, #7]
 801ce26:	747b      	strb	r3, [r7, #17]
 801ce28:	683b      	ldr	r3, [r7, #0]
 801ce2a:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 801ce2c:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801ce30:	f107 020f 	add.w	r2, r7, #15
 801ce34:	f107 0010 	add.w	r0, r7, #16
 801ce38:	4b11      	ldr	r3, [pc, #68]	; (801ce80 <rfalT2TPollerWrite+0x6c>)
 801ce3a:	9302      	str	r3, [sp, #8]
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	9301      	str	r3, [sp, #4]
 801ce40:	f107 030c 	add.w	r3, r7, #12
 801ce44:	9300      	str	r3, [sp, #0]
 801ce46:	2301      	movs	r3, #1
 801ce48:	2106      	movs	r1, #6
 801ce4a:	f7fd fc63 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 801ce52:	8afb      	ldrh	r3, [r7, #22]
 801ce54:	2b28      	cmp	r3, #40	; 0x28
 801ce56:	d002      	beq.n	801ce5e <rfalT2TPollerWrite+0x4a>
 801ce58:	8afb      	ldrh	r3, [r7, #22]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d10b      	bne.n	801ce76 <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 801ce5e:	230b      	movs	r3, #11
 801ce60:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 801ce62:	89bb      	ldrh	r3, [r7, #12]
 801ce64:	2b01      	cmp	r3, #1
 801ce66:	d106      	bne.n	801ce76 <rfalT2TPollerWrite+0x62>
 801ce68:	7bfb      	ldrb	r3, [r7, #15]
 801ce6a:	f003 030f 	and.w	r3, r3, #15
 801ce6e:	2b0a      	cmp	r3, #10
 801ce70:	d101      	bne.n	801ce76 <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 801ce72:	2300      	movs	r3, #0
 801ce74:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 801ce76:	8afb      	ldrh	r3, [r7, #22]
 }
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3718      	adds	r7, #24
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}
 801ce80:	000108d8 	.word	0x000108d8

0801ce84 <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b08a      	sub	sp, #40	; 0x28
 801ce88:	af04      	add	r7, sp, #16
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 801ce8e:	23c2      	movs	r3, #194	; 0xc2
 801ce90:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 801ce92:	23ff      	movs	r3, #255	; 0xff
 801ce94:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801ce96:	f107 020f 	add.w	r2, r7, #15
 801ce9a:	f107 0014 	add.w	r0, r7, #20
 801ce9e:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801cea2:	9302      	str	r3, [sp, #8]
 801cea4:	2300      	movs	r3, #0
 801cea6:	9301      	str	r3, [sp, #4]
 801cea8:	f107 030c 	add.w	r3, r7, #12
 801ceac:	9300      	str	r3, [sp, #0]
 801ceae:	2301      	movs	r3, #1
 801ceb0:	2102      	movs	r1, #2
 801ceb2:	f7fd fc2f 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 801ceba:	8afb      	ldrh	r3, [r7, #22]
 801cebc:	2b28      	cmp	r3, #40	; 0x28
 801cebe:	d004      	beq.n	801ceca <rfalT2TPollerSectorSelect+0x46>
 801cec0:	8afb      	ldrh	r3, [r7, #22]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d001      	beq.n	801ceca <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 801cec6:	8afb      	ldrh	r3, [r7, #22]
 801cec8:	e036      	b.n	801cf38 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801ceca:	8afb      	ldrh	r3, [r7, #22]
 801cecc:	2b28      	cmp	r3, #40	; 0x28
 801cece:	d107      	bne.n	801cee0 <rfalT2TPollerSectorSelect+0x5c>
 801ced0:	89bb      	ldrh	r3, [r7, #12]
 801ced2:	2b01      	cmp	r3, #1
 801ced4:	d104      	bne.n	801cee0 <rfalT2TPollerSectorSelect+0x5c>
 801ced6:	7bfb      	ldrb	r3, [r7, #15]
 801ced8:	f003 030f 	and.w	r3, r3, #15
 801cedc:	2b0a      	cmp	r3, #10
 801cede:	d001      	beq.n	801cee4 <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 801cee0:	230b      	movs	r3, #11
 801cee2:	e029      	b.n	801cf38 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 801cee4:	79fb      	ldrb	r3, [r7, #7]
 801cee6:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 801cee8:	f107 0310 	add.w	r3, r7, #16
 801ceec:	3301      	adds	r3, #1
 801ceee:	2203      	movs	r2, #3
 801cef0:	2100      	movs	r1, #0
 801cef2:	4618      	mov	r0, r3
 801cef4:	f000 fb40 	bl	801d578 <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801cef8:	f107 020f 	add.w	r2, r7, #15
 801cefc:	f107 0010 	add.w	r0, r7, #16
 801cf00:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801cf04:	9302      	str	r3, [sp, #8]
 801cf06:	2300      	movs	r3, #0
 801cf08:	9301      	str	r3, [sp, #4]
 801cf0a:	f107 030c 	add.w	r3, r7, #12
 801cf0e:	9300      	str	r3, [sp, #0]
 801cf10:	2301      	movs	r3, #1
 801cf12:	2104      	movs	r1, #4
 801cf14:	f7fd fbfe 	bl	801a714 <rfalTransceiveBlockingTxRx>
 801cf18:	4603      	mov	r3, r0
 801cf1a:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 801cf1c:	8afb      	ldrh	r3, [r7, #22]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d002      	beq.n	801cf28 <rfalT2TPollerSectorSelect+0xa4>
 801cf22:	8afb      	ldrh	r3, [r7, #22]
 801cf24:	2b28      	cmp	r3, #40	; 0x28
 801cf26:	d101      	bne.n	801cf2c <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 801cf28:	230b      	movs	r3, #11
 801cf2a:	e005      	b.n	801cf38 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 801cf2c:	8afb      	ldrh	r3, [r7, #22]
 801cf2e:	2b04      	cmp	r3, #4
 801cf30:	d101      	bne.n	801cf36 <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 801cf32:	2300      	movs	r3, #0
 801cf34:	e000      	b.n	801cf38 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 801cf36:	8afb      	ldrh	r3, [r7, #22]
 }
 801cf38:	4618      	mov	r0, r3
 801cf3a:	3718      	adds	r7, #24
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd80      	pop	{r7, pc}

0801cf40 <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( rfalT4tCApduParam *apduParam )
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b084      	sub	sp, #16
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d007      	beq.n	801cf5e <rfalT4TPollerComposeCAPDU+0x1e>
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	689b      	ldr	r3, [r3, #8]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d003      	beq.n	801cf5e <rfalT4TPollerComposeCAPDU+0x1e>
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	68db      	ldr	r3, [r3, #12]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d101      	bne.n	801cf62 <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 801cf5e:	2307      	movs	r3, #7
 801cf60:	e085      	b.n	801d06e <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 801cf62:	2300      	movs	r3, #0
 801cf64:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	68db      	ldr	r3, [r3, #12]
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	795b      	ldrb	r3, [r3, #5]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d026      	beq.n	801cfc4 <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	791b      	ldrb	r3, [r3, #4]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d101      	bne.n	801cf82 <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 801cf7e:	2307      	movs	r3, #7
 801cf80:	e075      	b.n	801d06e <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 801cf82:	2305      	movs	r3, #5
 801cf84:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 801cf86:	7b7b      	ldrb	r3, [r7, #13]
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	7912      	ldrb	r2, [r2, #4]
 801cf8c:	4413      	add	r3, r2
 801cf8e:	461a      	mov	r2, r3
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	79db      	ldrb	r3, [r3, #7]
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d001      	beq.n	801cf9c <rfalT4TPollerComposeCAPDU+0x5c>
 801cf98:	2301      	movs	r3, #1
 801cf9a:	e000      	b.n	801cf9e <rfalT4TPollerComposeCAPDU+0x5e>
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	4413      	add	r3, r2
 801cfa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cfa4:	d901      	bls.n	801cfaa <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 801cfa6:	2301      	movs	r3, #1
 801cfa8:	e061      	b.n	801d06e <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	689a      	ldr	r2, [r3, #8]
 801cfae:	7b7b      	ldrb	r3, [r7, #13]
 801cfb0:	4413      	add	r3, r2
 801cfb2:	1cd8      	adds	r0, r3, #3
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	689b      	ldr	r3, [r3, #8]
 801cfb8:	1cd9      	adds	r1, r3, #3
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	791b      	ldrb	r3, [r3, #4]
 801cfbe:	461a      	mov	r2, r3
 801cfc0:	f000 fac0 	bl	801d544 <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	689a      	ldr	r2, [r3, #8]
 801cfc8:	89fb      	ldrh	r3, [r7, #14]
 801cfca:	1c59      	adds	r1, r3, #1
 801cfcc:	81f9      	strh	r1, [r7, #14]
 801cfce:	4618      	mov	r0, r3
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	7819      	ldrb	r1, [r3, #0]
 801cfd4:	1813      	adds	r3, r2, r0
 801cfd6:	460a      	mov	r2, r1
 801cfd8:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	689a      	ldr	r2, [r3, #8]
 801cfde:	89fb      	ldrh	r3, [r7, #14]
 801cfe0:	1c59      	adds	r1, r3, #1
 801cfe2:	81f9      	strh	r1, [r7, #14]
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	7859      	ldrb	r1, [r3, #1]
 801cfea:	1813      	adds	r3, r2, r0
 801cfec:	460a      	mov	r2, r1
 801cfee:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	689a      	ldr	r2, [r3, #8]
 801cff4:	89fb      	ldrh	r3, [r7, #14]
 801cff6:	1c59      	adds	r1, r3, #1
 801cff8:	81f9      	strh	r1, [r7, #14]
 801cffa:	4618      	mov	r0, r3
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	7899      	ldrb	r1, [r3, #2]
 801d000:	1813      	adds	r3, r2, r0
 801d002:	460a      	mov	r2, r1
 801d004:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	689a      	ldr	r2, [r3, #8]
 801d00a:	89fb      	ldrh	r3, [r7, #14]
 801d00c:	1c59      	adds	r1, r3, #1
 801d00e:	81f9      	strh	r1, [r7, #14]
 801d010:	4618      	mov	r0, r3
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	78d9      	ldrb	r1, [r3, #3]
 801d016:	1813      	adds	r3, r2, r0
 801d018:	460a      	mov	r2, r1
 801d01a:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	795b      	ldrb	r3, [r3, #5]
 801d020:	2b00      	cmp	r3, #0
 801d022:	d010      	beq.n	801d046 <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	689a      	ldr	r2, [r3, #8]
 801d028:	89fb      	ldrh	r3, [r7, #14]
 801d02a:	1c59      	adds	r1, r3, #1
 801d02c:	81f9      	strh	r1, [r7, #14]
 801d02e:	4618      	mov	r0, r3
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	7919      	ldrb	r1, [r3, #4]
 801d034:	1813      	adds	r3, r2, r0
 801d036:	460a      	mov	r2, r1
 801d038:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	791b      	ldrb	r3, [r3, #4]
 801d03e:	b29a      	uxth	r2, r3
 801d040:	89fb      	ldrh	r3, [r7, #14]
 801d042:	4413      	add	r3, r2
 801d044:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	79db      	ldrb	r3, [r3, #7]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d00a      	beq.n	801d064 <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	689a      	ldr	r2, [r3, #8]
 801d052:	89fb      	ldrh	r3, [r7, #14]
 801d054:	1c59      	adds	r1, r3, #1
 801d056:	81f9      	strh	r1, [r7, #14]
 801d058:	4618      	mov	r0, r3
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	7999      	ldrb	r1, [r3, #6]
 801d05e:	1813      	adds	r3, r2, r0
 801d060:	460a      	mov	r2, r1
 801d062:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	68db      	ldr	r3, [r3, #12]
 801d068:	89fa      	ldrh	r2, [r7, #14]
 801d06a:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 801d06c:	2300      	movs	r3, #0
}
 801d06e:	4618      	mov	r0, r3
 801d070:	3710      	adds	r7, #16
 801d072:	46bd      	mov	sp, r7
 801d074:	bd80      	pop	{r7, pc}

0801d076 <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 801d076:	b480      	push	{r7}
 801d078:	b083      	sub	sp, #12
 801d07a:	af00      	add	r7, sp, #0
 801d07c:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d003      	beq.n	801d08c <rfalT4TPollerParseRAPDU+0x16>
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d101      	bne.n	801d090 <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 801d08c:	2307      	movs	r3, #7
 801d08e:	e029      	b.n	801d0e4 <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	889b      	ldrh	r3, [r3, #4]
 801d094:	2b01      	cmp	r3, #1
 801d096:	d801      	bhi.n	801d09c <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 801d098:	230b      	movs	r3, #11
 801d09a:	e023      	b.n	801d0e4 <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	889b      	ldrh	r3, [r3, #4]
 801d0a0:	3b02      	subs	r3, #2
 801d0a2:	b29a      	uxth	r2, r3
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	687a      	ldr	r2, [r7, #4]
 801d0ae:	88d2      	ldrh	r2, [r2, #6]
 801d0b0:	4413      	add	r3, r2
 801d0b2:	78db      	ldrb	r3, [r3, #3]
 801d0b4:	021b      	lsls	r3, r3, #8
 801d0b6:	b21a      	sxth	r2, r3
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	6879      	ldr	r1, [r7, #4]
 801d0be:	88c9      	ldrh	r1, [r1, #6]
 801d0c0:	440b      	add	r3, r1
 801d0c2:	3303      	adds	r3, #3
 801d0c4:	3301      	adds	r3, #1
 801d0c6:	781b      	ldrb	r3, [r3, #0]
 801d0c8:	b21b      	sxth	r3, r3
 801d0ca:	4313      	orrs	r3, r2
 801d0cc:	b21b      	sxth	r3, r3
 801d0ce:	b29a      	uxth	r2, r3
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	891b      	ldrh	r3, [r3, #8]
 801d0d8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 801d0dc:	d101      	bne.n	801d0e2 <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	e000      	b.n	801d0e4 <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 801d0e2:	2305      	movs	r3, #5
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	370c      	adds	r7, #12
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bc80      	pop	{r7}
 801d0ec:	4770      	bx	lr

0801d0ee <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 801d0ee:	b580      	push	{r7, lr}
 801d0f0:	b088      	sub	sp, #32
 801d0f2:	af00      	add	r7, sp, #0
 801d0f4:	60f8      	str	r0, [r7, #12]
 801d0f6:	60b9      	str	r1, [r7, #8]
 801d0f8:	603b      	str	r3, [r7, #0]
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d0fe:	2300      	movs	r3, #0
 801d100:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801d102:	23a4      	movs	r3, #164	; 0xa4
 801d104:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 801d106:	2304      	movs	r3, #4
 801d108:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801d10a:	2300      	movs	r3, #0
 801d10c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 801d10e:	79fb      	ldrb	r3, [r7, #7]
 801d110:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801d112:	2300      	movs	r3, #0
 801d114:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801d116:	2301      	movs	r3, #1
 801d118:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801d11a:	2301      	movs	r3, #1
 801d11c:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801d122:	683b      	ldr	r3, [r7, #0]
 801d124:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 801d126:	79fb      	ldrb	r3, [r7, #7]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d006      	beq.n	801d13a <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 801d12c:	69bb      	ldr	r3, [r7, #24]
 801d12e:	3303      	adds	r3, #3
 801d130:	79fa      	ldrb	r2, [r7, #7]
 801d132:	68b9      	ldr	r1, [r7, #8]
 801d134:	4618      	mov	r0, r3
 801d136:	f000 f9f7 	bl	801d528 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d13a:	f107 0310 	add.w	r3, r7, #16
 801d13e:	4618      	mov	r0, r3
 801d140:	f7ff fefe 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d144:	4603      	mov	r3, r0
}
 801d146:	4618      	mov	r0, r3
 801d148:	3720      	adds	r7, #32
 801d14a:	46bd      	mov	sp, r7
 801d14c:	bd80      	pop	{r7, pc}

0801d14e <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801d14e:	b580      	push	{r7, lr}
 801d150:	b088      	sub	sp, #32
 801d152:	af00      	add	r7, sp, #0
 801d154:	60f8      	str	r0, [r7, #12]
 801d156:	60b9      	str	r1, [r7, #8]
 801d158:	603b      	str	r3, [r7, #0]
 801d15a:	4613      	mov	r3, r2
 801d15c:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d15e:	2300      	movs	r3, #0
 801d160:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801d162:	23a4      	movs	r3, #164	; 0xa4
 801d164:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801d166:	2300      	movs	r3, #0
 801d168:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 801d16a:	230c      	movs	r3, #12
 801d16c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801d16e:	79fb      	ldrb	r3, [r7, #7]
 801d170:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801d172:	2300      	movs	r3, #0
 801d174:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801d176:	2301      	movs	r3, #1
 801d178:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801d17a:	2300      	movs	r3, #0
 801d17c:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801d17e:	68fb      	ldr	r3, [r7, #12]
 801d180:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801d186:	79fb      	ldrb	r3, [r7, #7]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d006      	beq.n	801d19a <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801d18c:	69bb      	ldr	r3, [r7, #24]
 801d18e:	3303      	adds	r3, #3
 801d190:	79fa      	ldrb	r2, [r7, #7]
 801d192:	68b9      	ldr	r1, [r7, #8]
 801d194:	4618      	mov	r0, r3
 801d196:	f000 f9c7 	bl	801d528 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d19a:	f107 0310 	add.w	r3, r7, #16
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7ff fece 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d1a4:	4603      	mov	r3, r0
}
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	3720      	adds	r7, #32
 801d1aa:	46bd      	mov	sp, r7
 801d1ac:	bd80      	pop	{r7, pc}

0801d1ae <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801d1ae:	b580      	push	{r7, lr}
 801d1b0:	b088      	sub	sp, #32
 801d1b2:	af00      	add	r7, sp, #0
 801d1b4:	60f8      	str	r0, [r7, #12]
 801d1b6:	60b9      	str	r1, [r7, #8]
 801d1b8:	603b      	str	r3, [r7, #0]
 801d1ba:	4613      	mov	r3, r2
 801d1bc:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d1be:	2300      	movs	r3, #0
 801d1c0:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801d1c2:	23a4      	movs	r3, #164	; 0xa4
 801d1c4:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801d1ce:	79fb      	ldrb	r3, [r7, #7]
 801d1d0:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801d1da:	2300      	movs	r3, #0
 801d1dc:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801d1e2:	683b      	ldr	r3, [r7, #0]
 801d1e4:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801d1e6:	79fb      	ldrb	r3, [r7, #7]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d006      	beq.n	801d1fa <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801d1ec:	69bb      	ldr	r3, [r7, #24]
 801d1ee:	3303      	adds	r3, #3
 801d1f0:	79fa      	ldrb	r2, [r7, #7]
 801d1f2:	68b9      	ldr	r1, [r7, #8]
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f000 f997 	bl	801d528 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d1fa:	f107 0310 	add.w	r3, r7, #16
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7ff fe9e 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d204:	4603      	mov	r3, r0
}
 801d206:	4618      	mov	r0, r3
 801d208:	3720      	adds	r7, #32
 801d20a:	46bd      	mov	sp, r7
 801d20c:	bd80      	pop	{r7, pc}

0801d20e <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801d20e:	b580      	push	{r7, lr}
 801d210:	b088      	sub	sp, #32
 801d212:	af00      	add	r7, sp, #0
 801d214:	60f8      	str	r0, [r7, #12]
 801d216:	607b      	str	r3, [r7, #4]
 801d218:	460b      	mov	r3, r1
 801d21a:	817b      	strh	r3, [r7, #10]
 801d21c:	4613      	mov	r3, r2
 801d21e:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d220:	2300      	movs	r3, #0
 801d222:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 801d224:	23b0      	movs	r3, #176	; 0xb0
 801d226:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801d228:	897b      	ldrh	r3, [r7, #10]
 801d22a:	0a1b      	lsrs	r3, r3, #8
 801d22c:	b29b      	uxth	r3, r3
 801d22e:	b2db      	uxtb	r3, r3
 801d230:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801d232:	897b      	ldrh	r3, [r7, #10]
 801d234:	b2db      	uxtb	r3, r3
 801d236:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 801d238:	7a7b      	ldrb	r3, [r7, #9]
 801d23a:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 801d23c:	2300      	movs	r3, #0
 801d23e:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801d240:	2301      	movs	r3, #1
 801d242:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d24c:	f107 0310 	add.w	r3, r7, #16
 801d250:	4618      	mov	r0, r3
 801d252:	f7ff fe75 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d256:	4603      	mov	r3, r0
}
 801d258:	4618      	mov	r0, r3
 801d25a:	3720      	adds	r7, #32
 801d25c:	46bd      	mov	sp, r7
 801d25e:	bd80      	pop	{r7, pc}

0801d260 <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801d260:	b580      	push	{r7, lr}
 801d262:	b08a      	sub	sp, #40	; 0x28
 801d264:	af00      	add	r7, sp, #0
 801d266:	60f8      	str	r0, [r7, #12]
 801d268:	60b9      	str	r1, [r7, #8]
 801d26a:	603b      	str	r3, [r7, #0]
 801d26c:	4613      	mov	r3, r2
 801d26e:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d270:	2300      	movs	r3, #0
 801d272:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 801d274:	23b1      	movs	r3, #177	; 0xb1
 801d276:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801d278:	2300      	movs	r3, #0
 801d27a:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801d27c:	2300      	movs	r3, #0
 801d27e:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 801d280:	79fb      	ldrb	r3, [r7, #7]
 801d282:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 801d284:	2301      	movs	r3, #1
 801d286:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 801d288:	2301      	movs	r3, #1
 801d28a:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801d290:	683b      	ldr	r3, [r7, #0]
 801d292:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 801d294:	2300      	movs	r3, #0
 801d296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801d29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d29e:	1c5a      	adds	r2, r3, #1
 801d2a0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d2a4:	461a      	mov	r2, r3
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	4413      	add	r3, r2
 801d2aa:	2254      	movs	r2, #84	; 0x54
 801d2ac:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801d2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d2b2:	1c5a      	adds	r2, r3, #1
 801d2b4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d2b8:	461a      	mov	r2, r3
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	4413      	add	r3, r2
 801d2be:	2203      	movs	r2, #3
 801d2c0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801d2c2:	68bb      	ldr	r3, [r7, #8]
 801d2c4:	0c1a      	lsrs	r2, r3, #16
 801d2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d2ca:	1c59      	adds	r1, r3, #1
 801d2cc:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801d2d0:	4619      	mov	r1, r3
 801d2d2:	b2d2      	uxtb	r2, r2
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	440b      	add	r3, r1
 801d2d8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	0a1a      	lsrs	r2, r3, #8
 801d2de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d2e2:	1c59      	adds	r1, r3, #1
 801d2e4:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801d2e8:	4619      	mov	r1, r3
 801d2ea:	b2d2      	uxtb	r2, r2
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	440b      	add	r3, r1
 801d2f0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801d2f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d2f6:	1c5a      	adds	r2, r3, #1
 801d2f8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	68bb      	ldr	r3, [r7, #8]
 801d300:	b2da      	uxtb	r2, r3
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	440b      	add	r3, r1
 801d306:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 801d308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d30c:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d30e:	f107 0314 	add.w	r3, r7, #20
 801d312:	4618      	mov	r0, r3
 801d314:	f7ff fe14 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d318:	4603      	mov	r3, r0
}
 801d31a:	4618      	mov	r0, r3
 801d31c:	3728      	adds	r7, #40	; 0x28
 801d31e:	46bd      	mov	sp, r7
 801d320:	bd80      	pop	{r7, pc}

0801d322 <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801d322:	b580      	push	{r7, lr}
 801d324:	b088      	sub	sp, #32
 801d326:	af00      	add	r7, sp, #0
 801d328:	60f8      	str	r0, [r7, #12]
 801d32a:	607a      	str	r2, [r7, #4]
 801d32c:	461a      	mov	r2, r3
 801d32e:	460b      	mov	r3, r1
 801d330:	817b      	strh	r3, [r7, #10]
 801d332:	4613      	mov	r3, r2
 801d334:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d336:	2300      	movs	r3, #0
 801d338:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 801d33a:	23d6      	movs	r3, #214	; 0xd6
 801d33c:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801d33e:	897b      	ldrh	r3, [r7, #10]
 801d340:	0a1b      	lsrs	r3, r3, #8
 801d342:	b29b      	uxth	r3, r3
 801d344:	b2db      	uxtb	r3, r3
 801d346:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801d348:	897b      	ldrh	r3, [r7, #10]
 801d34a:	b2db      	uxtb	r3, r3
 801d34c:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 801d34e:	7a7b      	ldrb	r3, [r7, #9]
 801d350:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 801d352:	2301      	movs	r3, #1
 801d354:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801d356:	2300      	movs	r3, #0
 801d358:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d360:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 801d362:	7a7b      	ldrb	r3, [r7, #9]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d006      	beq.n	801d376 <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 801d368:	69bb      	ldr	r3, [r7, #24]
 801d36a:	3303      	adds	r3, #3
 801d36c:	7a7a      	ldrb	r2, [r7, #9]
 801d36e:	6879      	ldr	r1, [r7, #4]
 801d370:	4618      	mov	r0, r3
 801d372:	f000 f8d9 	bl	801d528 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d376:	f107 0310 	add.w	r3, r7, #16
 801d37a:	4618      	mov	r0, r3
 801d37c:	f7ff fde0 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d380:	4603      	mov	r3, r0
}
 801d382:	4618      	mov	r0, r3
 801d384:	3720      	adds	r7, #32
 801d386:	46bd      	mov	sp, r7
 801d388:	bd80      	pop	{r7, pc}

0801d38a <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801d38a:	b580      	push	{r7, lr}
 801d38c:	b08a      	sub	sp, #40	; 0x28
 801d38e:	af00      	add	r7, sp, #0
 801d390:	60f8      	str	r0, [r7, #12]
 801d392:	60b9      	str	r1, [r7, #8]
 801d394:	607a      	str	r2, [r7, #4]
 801d396:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801d398:	2300      	movs	r3, #0
 801d39a:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 801d39c:	23d7      	movs	r3, #215	; 0xd7
 801d39e:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 801d3a8:	2301      	movs	r3, #1
 801d3aa:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b6:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801d3be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d3c2:	1c5a      	adds	r2, r3, #1
 801d3c4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	4413      	add	r3, r2
 801d3ce:	2254      	movs	r2, #84	; 0x54
 801d3d0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801d3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d3d6:	1c5a      	adds	r2, r3, #1
 801d3d8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d3dc:	461a      	mov	r2, r3
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	4413      	add	r3, r2
 801d3e2:	2203      	movs	r2, #3
 801d3e4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801d3e6:	68bb      	ldr	r3, [r7, #8]
 801d3e8:	0c1a      	lsrs	r2, r3, #16
 801d3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d3ee:	1c59      	adds	r1, r3, #1
 801d3f0:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801d3f4:	4619      	mov	r1, r3
 801d3f6:	b2d2      	uxtb	r2, r2
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	440b      	add	r3, r1
 801d3fc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	0a1a      	lsrs	r2, r3, #8
 801d402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d406:	1c59      	adds	r1, r3, #1
 801d408:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801d40c:	4619      	mov	r1, r3
 801d40e:	b2d2      	uxtb	r2, r2
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	440b      	add	r3, r1
 801d414:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801d416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d41a:	1c5a      	adds	r2, r3, #1
 801d41c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d420:	4619      	mov	r1, r3
 801d422:	68bb      	ldr	r3, [r7, #8]
 801d424:	b2da      	uxtb	r2, r3
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	440b      	add	r3, r1
 801d42a:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 801d42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d430:	1c5a      	adds	r2, r3, #1
 801d432:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d436:	461a      	mov	r2, r3
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	4413      	add	r3, r2
 801d43c:	2253      	movs	r2, #83	; 0x53
 801d43e:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 801d440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d444:	1c5a      	adds	r2, r3, #1
 801d446:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801d44a:	461a      	mov	r2, r3
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	4413      	add	r3, r2
 801d450:	78fa      	ldrb	r2, [r7, #3]
 801d452:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 801d454:	78fa      	ldrb	r2, [r7, #3]
 801d456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d45a:	4413      	add	r3, r2
 801d45c:	2bfe      	cmp	r3, #254	; 0xfe
 801d45e:	d806      	bhi.n	801d46e <rfalT4TPollerComposeWriteDataODO+0xe4>
 801d460:	78fa      	ldrb	r2, [r7, #3]
 801d462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d466:	4413      	add	r3, r2
 801d468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d46c:	d301      	bcc.n	801d472 <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 801d46e:	2301      	movs	r3, #1
 801d470:	e01b      	b.n	801d4aa <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 801d472:	78fb      	ldrb	r3, [r7, #3]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d009      	beq.n	801d48c <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 801d478:	69fa      	ldr	r2, [r7, #28]
 801d47a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d47e:	4413      	add	r3, r2
 801d480:	3303      	adds	r3, #3
 801d482:	78fa      	ldrb	r2, [r7, #3]
 801d484:	6879      	ldr	r1, [r7, #4]
 801d486:	4618      	mov	r0, r3
 801d488:	f000 f84e 	bl	801d528 <memcpy>
    }
    dataIt += dataLen;
 801d48c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d490:	78fb      	ldrb	r3, [r7, #3]
 801d492:	4413      	add	r3, r2
 801d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 801d498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d49c:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801d49e:	f107 0314 	add.w	r3, r7, #20
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7ff fd4c 	bl	801cf40 <rfalT4TPollerComposeCAPDU>
 801d4a8:	4603      	mov	r3, r0
}
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	3728      	adds	r7, #40	; 0x28
 801d4ae:	46bd      	mov	sp, r7
 801d4b0:	bd80      	pop	{r7, pc}
	...

0801d4b4 <__errno>:
 801d4b4:	4b01      	ldr	r3, [pc, #4]	; (801d4bc <__errno+0x8>)
 801d4b6:	6818      	ldr	r0, [r3, #0]
 801d4b8:	4770      	bx	lr
 801d4ba:	bf00      	nop
 801d4bc:	2000012c 	.word	0x2000012c

0801d4c0 <__libc_init_array>:
 801d4c0:	b570      	push	{r4, r5, r6, lr}
 801d4c2:	2600      	movs	r6, #0
 801d4c4:	4d0c      	ldr	r5, [pc, #48]	; (801d4f8 <__libc_init_array+0x38>)
 801d4c6:	4c0d      	ldr	r4, [pc, #52]	; (801d4fc <__libc_init_array+0x3c>)
 801d4c8:	1b64      	subs	r4, r4, r5
 801d4ca:	10a4      	asrs	r4, r4, #2
 801d4cc:	42a6      	cmp	r6, r4
 801d4ce:	d109      	bne.n	801d4e4 <__libc_init_array+0x24>
 801d4d0:	f002 ff60 	bl	8020394 <_init>
 801d4d4:	2600      	movs	r6, #0
 801d4d6:	4d0a      	ldr	r5, [pc, #40]	; (801d500 <__libc_init_array+0x40>)
 801d4d8:	4c0a      	ldr	r4, [pc, #40]	; (801d504 <__libc_init_array+0x44>)
 801d4da:	1b64      	subs	r4, r4, r5
 801d4dc:	10a4      	asrs	r4, r4, #2
 801d4de:	42a6      	cmp	r6, r4
 801d4e0:	d105      	bne.n	801d4ee <__libc_init_array+0x2e>
 801d4e2:	bd70      	pop	{r4, r5, r6, pc}
 801d4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d4e8:	4798      	blx	r3
 801d4ea:	3601      	adds	r6, #1
 801d4ec:	e7ee      	b.n	801d4cc <__libc_init_array+0xc>
 801d4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801d4f2:	4798      	blx	r3
 801d4f4:	3601      	adds	r6, #1
 801d4f6:	e7f2      	b.n	801d4de <__libc_init_array+0x1e>
 801d4f8:	080221a4 	.word	0x080221a4
 801d4fc:	080221a4 	.word	0x080221a4
 801d500:	080221a4 	.word	0x080221a4
 801d504:	080221a8 	.word	0x080221a8

0801d508 <memcmp>:
 801d508:	b510      	push	{r4, lr}
 801d50a:	3901      	subs	r1, #1
 801d50c:	4402      	add	r2, r0
 801d50e:	4290      	cmp	r0, r2
 801d510:	d101      	bne.n	801d516 <memcmp+0xe>
 801d512:	2000      	movs	r0, #0
 801d514:	e005      	b.n	801d522 <memcmp+0x1a>
 801d516:	7803      	ldrb	r3, [r0, #0]
 801d518:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d51c:	42a3      	cmp	r3, r4
 801d51e:	d001      	beq.n	801d524 <memcmp+0x1c>
 801d520:	1b18      	subs	r0, r3, r4
 801d522:	bd10      	pop	{r4, pc}
 801d524:	3001      	adds	r0, #1
 801d526:	e7f2      	b.n	801d50e <memcmp+0x6>

0801d528 <memcpy>:
 801d528:	440a      	add	r2, r1
 801d52a:	4291      	cmp	r1, r2
 801d52c:	f100 33ff 	add.w	r3, r0, #4294967295
 801d530:	d100      	bne.n	801d534 <memcpy+0xc>
 801d532:	4770      	bx	lr
 801d534:	b510      	push	{r4, lr}
 801d536:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d53a:	4291      	cmp	r1, r2
 801d53c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d540:	d1f9      	bne.n	801d536 <memcpy+0xe>
 801d542:	bd10      	pop	{r4, pc}

0801d544 <memmove>:
 801d544:	4288      	cmp	r0, r1
 801d546:	b510      	push	{r4, lr}
 801d548:	eb01 0402 	add.w	r4, r1, r2
 801d54c:	d902      	bls.n	801d554 <memmove+0x10>
 801d54e:	4284      	cmp	r4, r0
 801d550:	4623      	mov	r3, r4
 801d552:	d807      	bhi.n	801d564 <memmove+0x20>
 801d554:	1e43      	subs	r3, r0, #1
 801d556:	42a1      	cmp	r1, r4
 801d558:	d008      	beq.n	801d56c <memmove+0x28>
 801d55a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d55e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d562:	e7f8      	b.n	801d556 <memmove+0x12>
 801d564:	4601      	mov	r1, r0
 801d566:	4402      	add	r2, r0
 801d568:	428a      	cmp	r2, r1
 801d56a:	d100      	bne.n	801d56e <memmove+0x2a>
 801d56c:	bd10      	pop	{r4, pc}
 801d56e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d576:	e7f7      	b.n	801d568 <memmove+0x24>

0801d578 <memset>:
 801d578:	4603      	mov	r3, r0
 801d57a:	4402      	add	r2, r0
 801d57c:	4293      	cmp	r3, r2
 801d57e:	d100      	bne.n	801d582 <memset+0xa>
 801d580:	4770      	bx	lr
 801d582:	f803 1b01 	strb.w	r1, [r3], #1
 801d586:	e7f9      	b.n	801d57c <memset+0x4>

0801d588 <__cvt>:
 801d588:	2b00      	cmp	r3, #0
 801d58a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d58e:	461f      	mov	r7, r3
 801d590:	bfbb      	ittet	lt
 801d592:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801d596:	461f      	movlt	r7, r3
 801d598:	2300      	movge	r3, #0
 801d59a:	232d      	movlt	r3, #45	; 0x2d
 801d59c:	b088      	sub	sp, #32
 801d59e:	4614      	mov	r4, r2
 801d5a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d5a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d5a4:	7013      	strb	r3, [r2, #0]
 801d5a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d5a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801d5ac:	f023 0820 	bic.w	r8, r3, #32
 801d5b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d5b4:	d005      	beq.n	801d5c2 <__cvt+0x3a>
 801d5b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d5ba:	d100      	bne.n	801d5be <__cvt+0x36>
 801d5bc:	3501      	adds	r5, #1
 801d5be:	2302      	movs	r3, #2
 801d5c0:	e000      	b.n	801d5c4 <__cvt+0x3c>
 801d5c2:	2303      	movs	r3, #3
 801d5c4:	aa07      	add	r2, sp, #28
 801d5c6:	9204      	str	r2, [sp, #16]
 801d5c8:	aa06      	add	r2, sp, #24
 801d5ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 801d5ce:	e9cd 3500 	strd	r3, r5, [sp]
 801d5d2:	4622      	mov	r2, r4
 801d5d4:	463b      	mov	r3, r7
 801d5d6:	f000 fd37 	bl	801e048 <_dtoa_r>
 801d5da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d5de:	4606      	mov	r6, r0
 801d5e0:	d102      	bne.n	801d5e8 <__cvt+0x60>
 801d5e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d5e4:	07db      	lsls	r3, r3, #31
 801d5e6:	d522      	bpl.n	801d62e <__cvt+0xa6>
 801d5e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d5ec:	eb06 0905 	add.w	r9, r6, r5
 801d5f0:	d110      	bne.n	801d614 <__cvt+0x8c>
 801d5f2:	7833      	ldrb	r3, [r6, #0]
 801d5f4:	2b30      	cmp	r3, #48	; 0x30
 801d5f6:	d10a      	bne.n	801d60e <__cvt+0x86>
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	4639      	mov	r1, r7
 801d600:	f7e3 f9ea 	bl	80009d8 <__aeabi_dcmpeq>
 801d604:	b918      	cbnz	r0, 801d60e <__cvt+0x86>
 801d606:	f1c5 0501 	rsb	r5, r5, #1
 801d60a:	f8ca 5000 	str.w	r5, [sl]
 801d60e:	f8da 3000 	ldr.w	r3, [sl]
 801d612:	4499      	add	r9, r3
 801d614:	2200      	movs	r2, #0
 801d616:	2300      	movs	r3, #0
 801d618:	4620      	mov	r0, r4
 801d61a:	4639      	mov	r1, r7
 801d61c:	f7e3 f9dc 	bl	80009d8 <__aeabi_dcmpeq>
 801d620:	b108      	cbz	r0, 801d626 <__cvt+0x9e>
 801d622:	f8cd 901c 	str.w	r9, [sp, #28]
 801d626:	2230      	movs	r2, #48	; 0x30
 801d628:	9b07      	ldr	r3, [sp, #28]
 801d62a:	454b      	cmp	r3, r9
 801d62c:	d307      	bcc.n	801d63e <__cvt+0xb6>
 801d62e:	4630      	mov	r0, r6
 801d630:	9b07      	ldr	r3, [sp, #28]
 801d632:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d634:	1b9b      	subs	r3, r3, r6
 801d636:	6013      	str	r3, [r2, #0]
 801d638:	b008      	add	sp, #32
 801d63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d63e:	1c59      	adds	r1, r3, #1
 801d640:	9107      	str	r1, [sp, #28]
 801d642:	701a      	strb	r2, [r3, #0]
 801d644:	e7f0      	b.n	801d628 <__cvt+0xa0>

0801d646 <__exponent>:
 801d646:	4603      	mov	r3, r0
 801d648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d64a:	2900      	cmp	r1, #0
 801d64c:	f803 2b02 	strb.w	r2, [r3], #2
 801d650:	bfb6      	itet	lt
 801d652:	222d      	movlt	r2, #45	; 0x2d
 801d654:	222b      	movge	r2, #43	; 0x2b
 801d656:	4249      	neglt	r1, r1
 801d658:	2909      	cmp	r1, #9
 801d65a:	7042      	strb	r2, [r0, #1]
 801d65c:	dd2b      	ble.n	801d6b6 <__exponent+0x70>
 801d65e:	f10d 0407 	add.w	r4, sp, #7
 801d662:	46a4      	mov	ip, r4
 801d664:	270a      	movs	r7, #10
 801d666:	fb91 f6f7 	sdiv	r6, r1, r7
 801d66a:	460a      	mov	r2, r1
 801d66c:	46a6      	mov	lr, r4
 801d66e:	fb07 1516 	mls	r5, r7, r6, r1
 801d672:	2a63      	cmp	r2, #99	; 0x63
 801d674:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801d678:	4631      	mov	r1, r6
 801d67a:	f104 34ff 	add.w	r4, r4, #4294967295
 801d67e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d682:	dcf0      	bgt.n	801d666 <__exponent+0x20>
 801d684:	3130      	adds	r1, #48	; 0x30
 801d686:	f1ae 0502 	sub.w	r5, lr, #2
 801d68a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d68e:	4629      	mov	r1, r5
 801d690:	1c44      	adds	r4, r0, #1
 801d692:	4561      	cmp	r1, ip
 801d694:	d30a      	bcc.n	801d6ac <__exponent+0x66>
 801d696:	f10d 0209 	add.w	r2, sp, #9
 801d69a:	eba2 020e 	sub.w	r2, r2, lr
 801d69e:	4565      	cmp	r5, ip
 801d6a0:	bf88      	it	hi
 801d6a2:	2200      	movhi	r2, #0
 801d6a4:	4413      	add	r3, r2
 801d6a6:	1a18      	subs	r0, r3, r0
 801d6a8:	b003      	add	sp, #12
 801d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d6b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d6b4:	e7ed      	b.n	801d692 <__exponent+0x4c>
 801d6b6:	2330      	movs	r3, #48	; 0x30
 801d6b8:	3130      	adds	r1, #48	; 0x30
 801d6ba:	7083      	strb	r3, [r0, #2]
 801d6bc:	70c1      	strb	r1, [r0, #3]
 801d6be:	1d03      	adds	r3, r0, #4
 801d6c0:	e7f1      	b.n	801d6a6 <__exponent+0x60>
	...

0801d6c4 <_printf_float>:
 801d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c8:	b091      	sub	sp, #68	; 0x44
 801d6ca:	460c      	mov	r4, r1
 801d6cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801d6d0:	4616      	mov	r6, r2
 801d6d2:	461f      	mov	r7, r3
 801d6d4:	4605      	mov	r5, r0
 801d6d6:	f001 fb9b 	bl	801ee10 <_localeconv_r>
 801d6da:	6803      	ldr	r3, [r0, #0]
 801d6dc:	4618      	mov	r0, r3
 801d6de:	9309      	str	r3, [sp, #36]	; 0x24
 801d6e0:	f7e2 fd4e 	bl	8000180 <strlen>
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	930e      	str	r3, [sp, #56]	; 0x38
 801d6e8:	f8d8 3000 	ldr.w	r3, [r8]
 801d6ec:	900a      	str	r0, [sp, #40]	; 0x28
 801d6ee:	3307      	adds	r3, #7
 801d6f0:	f023 0307 	bic.w	r3, r3, #7
 801d6f4:	f103 0208 	add.w	r2, r3, #8
 801d6f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801d6fc:	f8d4 b000 	ldr.w	fp, [r4]
 801d700:	f8c8 2000 	str.w	r2, [r8]
 801d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d708:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d70c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 801d710:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801d714:	930b      	str	r3, [sp, #44]	; 0x2c
 801d716:	f04f 32ff 	mov.w	r2, #4294967295
 801d71a:	4640      	mov	r0, r8
 801d71c:	4b9c      	ldr	r3, [pc, #624]	; (801d990 <_printf_float+0x2cc>)
 801d71e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d720:	f7e3 f98c 	bl	8000a3c <__aeabi_dcmpun>
 801d724:	bb70      	cbnz	r0, 801d784 <_printf_float+0xc0>
 801d726:	f04f 32ff 	mov.w	r2, #4294967295
 801d72a:	4640      	mov	r0, r8
 801d72c:	4b98      	ldr	r3, [pc, #608]	; (801d990 <_printf_float+0x2cc>)
 801d72e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d730:	f7e3 f966 	bl	8000a00 <__aeabi_dcmple>
 801d734:	bb30      	cbnz	r0, 801d784 <_printf_float+0xc0>
 801d736:	2200      	movs	r2, #0
 801d738:	2300      	movs	r3, #0
 801d73a:	4640      	mov	r0, r8
 801d73c:	4651      	mov	r1, sl
 801d73e:	f7e3 f955 	bl	80009ec <__aeabi_dcmplt>
 801d742:	b110      	cbz	r0, 801d74a <_printf_float+0x86>
 801d744:	232d      	movs	r3, #45	; 0x2d
 801d746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d74a:	4b92      	ldr	r3, [pc, #584]	; (801d994 <_printf_float+0x2d0>)
 801d74c:	4892      	ldr	r0, [pc, #584]	; (801d998 <_printf_float+0x2d4>)
 801d74e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801d752:	bf94      	ite	ls
 801d754:	4698      	movls	r8, r3
 801d756:	4680      	movhi	r8, r0
 801d758:	2303      	movs	r3, #3
 801d75a:	f04f 0a00 	mov.w	sl, #0
 801d75e:	6123      	str	r3, [r4, #16]
 801d760:	f02b 0304 	bic.w	r3, fp, #4
 801d764:	6023      	str	r3, [r4, #0]
 801d766:	4633      	mov	r3, r6
 801d768:	4621      	mov	r1, r4
 801d76a:	4628      	mov	r0, r5
 801d76c:	9700      	str	r7, [sp, #0]
 801d76e:	aa0f      	add	r2, sp, #60	; 0x3c
 801d770:	f000 f9d4 	bl	801db1c <_printf_common>
 801d774:	3001      	adds	r0, #1
 801d776:	f040 8090 	bne.w	801d89a <_printf_float+0x1d6>
 801d77a:	f04f 30ff 	mov.w	r0, #4294967295
 801d77e:	b011      	add	sp, #68	; 0x44
 801d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d784:	4642      	mov	r2, r8
 801d786:	4653      	mov	r3, sl
 801d788:	4640      	mov	r0, r8
 801d78a:	4651      	mov	r1, sl
 801d78c:	f7e3 f956 	bl	8000a3c <__aeabi_dcmpun>
 801d790:	b148      	cbz	r0, 801d7a6 <_printf_float+0xe2>
 801d792:	f1ba 0f00 	cmp.w	sl, #0
 801d796:	bfb8      	it	lt
 801d798:	232d      	movlt	r3, #45	; 0x2d
 801d79a:	4880      	ldr	r0, [pc, #512]	; (801d99c <_printf_float+0x2d8>)
 801d79c:	bfb8      	it	lt
 801d79e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d7a2:	4b7f      	ldr	r3, [pc, #508]	; (801d9a0 <_printf_float+0x2dc>)
 801d7a4:	e7d3      	b.n	801d74e <_printf_float+0x8a>
 801d7a6:	6863      	ldr	r3, [r4, #4]
 801d7a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801d7ac:	1c5a      	adds	r2, r3, #1
 801d7ae:	d142      	bne.n	801d836 <_printf_float+0x172>
 801d7b0:	2306      	movs	r3, #6
 801d7b2:	6063      	str	r3, [r4, #4]
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	9206      	str	r2, [sp, #24]
 801d7b8:	aa0e      	add	r2, sp, #56	; 0x38
 801d7ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801d7be:	aa0d      	add	r2, sp, #52	; 0x34
 801d7c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801d7c4:	9203      	str	r2, [sp, #12]
 801d7c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801d7ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d7ce:	6023      	str	r3, [r4, #0]
 801d7d0:	6863      	ldr	r3, [r4, #4]
 801d7d2:	4642      	mov	r2, r8
 801d7d4:	9300      	str	r3, [sp, #0]
 801d7d6:	4628      	mov	r0, r5
 801d7d8:	4653      	mov	r3, sl
 801d7da:	910b      	str	r1, [sp, #44]	; 0x2c
 801d7dc:	f7ff fed4 	bl	801d588 <__cvt>
 801d7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d7e2:	4680      	mov	r8, r0
 801d7e4:	2947      	cmp	r1, #71	; 0x47
 801d7e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d7e8:	d108      	bne.n	801d7fc <_printf_float+0x138>
 801d7ea:	1cc8      	adds	r0, r1, #3
 801d7ec:	db02      	blt.n	801d7f4 <_printf_float+0x130>
 801d7ee:	6863      	ldr	r3, [r4, #4]
 801d7f0:	4299      	cmp	r1, r3
 801d7f2:	dd40      	ble.n	801d876 <_printf_float+0x1b2>
 801d7f4:	f1a9 0902 	sub.w	r9, r9, #2
 801d7f8:	fa5f f989 	uxtb.w	r9, r9
 801d7fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d800:	d81f      	bhi.n	801d842 <_printf_float+0x17e>
 801d802:	464a      	mov	r2, r9
 801d804:	3901      	subs	r1, #1
 801d806:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d80a:	910d      	str	r1, [sp, #52]	; 0x34
 801d80c:	f7ff ff1b 	bl	801d646 <__exponent>
 801d810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d812:	4682      	mov	sl, r0
 801d814:	1813      	adds	r3, r2, r0
 801d816:	2a01      	cmp	r2, #1
 801d818:	6123      	str	r3, [r4, #16]
 801d81a:	dc02      	bgt.n	801d822 <_printf_float+0x15e>
 801d81c:	6822      	ldr	r2, [r4, #0]
 801d81e:	07d2      	lsls	r2, r2, #31
 801d820:	d501      	bpl.n	801d826 <_printf_float+0x162>
 801d822:	3301      	adds	r3, #1
 801d824:	6123      	str	r3, [r4, #16]
 801d826:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d09b      	beq.n	801d766 <_printf_float+0xa2>
 801d82e:	232d      	movs	r3, #45	; 0x2d
 801d830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d834:	e797      	b.n	801d766 <_printf_float+0xa2>
 801d836:	2947      	cmp	r1, #71	; 0x47
 801d838:	d1bc      	bne.n	801d7b4 <_printf_float+0xf0>
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d1ba      	bne.n	801d7b4 <_printf_float+0xf0>
 801d83e:	2301      	movs	r3, #1
 801d840:	e7b7      	b.n	801d7b2 <_printf_float+0xee>
 801d842:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801d846:	d118      	bne.n	801d87a <_printf_float+0x1b6>
 801d848:	2900      	cmp	r1, #0
 801d84a:	6863      	ldr	r3, [r4, #4]
 801d84c:	dd0b      	ble.n	801d866 <_printf_float+0x1a2>
 801d84e:	6121      	str	r1, [r4, #16]
 801d850:	b913      	cbnz	r3, 801d858 <_printf_float+0x194>
 801d852:	6822      	ldr	r2, [r4, #0]
 801d854:	07d0      	lsls	r0, r2, #31
 801d856:	d502      	bpl.n	801d85e <_printf_float+0x19a>
 801d858:	3301      	adds	r3, #1
 801d85a:	440b      	add	r3, r1
 801d85c:	6123      	str	r3, [r4, #16]
 801d85e:	f04f 0a00 	mov.w	sl, #0
 801d862:	65a1      	str	r1, [r4, #88]	; 0x58
 801d864:	e7df      	b.n	801d826 <_printf_float+0x162>
 801d866:	b913      	cbnz	r3, 801d86e <_printf_float+0x1aa>
 801d868:	6822      	ldr	r2, [r4, #0]
 801d86a:	07d2      	lsls	r2, r2, #31
 801d86c:	d501      	bpl.n	801d872 <_printf_float+0x1ae>
 801d86e:	3302      	adds	r3, #2
 801d870:	e7f4      	b.n	801d85c <_printf_float+0x198>
 801d872:	2301      	movs	r3, #1
 801d874:	e7f2      	b.n	801d85c <_printf_float+0x198>
 801d876:	f04f 0967 	mov.w	r9, #103	; 0x67
 801d87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d87c:	4299      	cmp	r1, r3
 801d87e:	db05      	blt.n	801d88c <_printf_float+0x1c8>
 801d880:	6823      	ldr	r3, [r4, #0]
 801d882:	6121      	str	r1, [r4, #16]
 801d884:	07d8      	lsls	r0, r3, #31
 801d886:	d5ea      	bpl.n	801d85e <_printf_float+0x19a>
 801d888:	1c4b      	adds	r3, r1, #1
 801d88a:	e7e7      	b.n	801d85c <_printf_float+0x198>
 801d88c:	2900      	cmp	r1, #0
 801d88e:	bfcc      	ite	gt
 801d890:	2201      	movgt	r2, #1
 801d892:	f1c1 0202 	rsble	r2, r1, #2
 801d896:	4413      	add	r3, r2
 801d898:	e7e0      	b.n	801d85c <_printf_float+0x198>
 801d89a:	6823      	ldr	r3, [r4, #0]
 801d89c:	055a      	lsls	r2, r3, #21
 801d89e:	d407      	bmi.n	801d8b0 <_printf_float+0x1ec>
 801d8a0:	6923      	ldr	r3, [r4, #16]
 801d8a2:	4642      	mov	r2, r8
 801d8a4:	4631      	mov	r1, r6
 801d8a6:	4628      	mov	r0, r5
 801d8a8:	47b8      	blx	r7
 801d8aa:	3001      	adds	r0, #1
 801d8ac:	d12b      	bne.n	801d906 <_printf_float+0x242>
 801d8ae:	e764      	b.n	801d77a <_printf_float+0xb6>
 801d8b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d8b4:	f240 80dd 	bls.w	801da72 <_printf_float+0x3ae>
 801d8b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d8bc:	2200      	movs	r2, #0
 801d8be:	2300      	movs	r3, #0
 801d8c0:	f7e3 f88a 	bl	80009d8 <__aeabi_dcmpeq>
 801d8c4:	2800      	cmp	r0, #0
 801d8c6:	d033      	beq.n	801d930 <_printf_float+0x26c>
 801d8c8:	2301      	movs	r3, #1
 801d8ca:	4631      	mov	r1, r6
 801d8cc:	4628      	mov	r0, r5
 801d8ce:	4a35      	ldr	r2, [pc, #212]	; (801d9a4 <_printf_float+0x2e0>)
 801d8d0:	47b8      	blx	r7
 801d8d2:	3001      	adds	r0, #1
 801d8d4:	f43f af51 	beq.w	801d77a <_printf_float+0xb6>
 801d8d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801d8dc:	429a      	cmp	r2, r3
 801d8de:	db02      	blt.n	801d8e6 <_printf_float+0x222>
 801d8e0:	6823      	ldr	r3, [r4, #0]
 801d8e2:	07d8      	lsls	r0, r3, #31
 801d8e4:	d50f      	bpl.n	801d906 <_printf_float+0x242>
 801d8e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d8ea:	4631      	mov	r1, r6
 801d8ec:	4628      	mov	r0, r5
 801d8ee:	47b8      	blx	r7
 801d8f0:	3001      	adds	r0, #1
 801d8f2:	f43f af42 	beq.w	801d77a <_printf_float+0xb6>
 801d8f6:	f04f 0800 	mov.w	r8, #0
 801d8fa:	f104 091a 	add.w	r9, r4, #26
 801d8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d900:	3b01      	subs	r3, #1
 801d902:	4543      	cmp	r3, r8
 801d904:	dc09      	bgt.n	801d91a <_printf_float+0x256>
 801d906:	6823      	ldr	r3, [r4, #0]
 801d908:	079b      	lsls	r3, r3, #30
 801d90a:	f100 8102 	bmi.w	801db12 <_printf_float+0x44e>
 801d90e:	68e0      	ldr	r0, [r4, #12]
 801d910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d912:	4298      	cmp	r0, r3
 801d914:	bfb8      	it	lt
 801d916:	4618      	movlt	r0, r3
 801d918:	e731      	b.n	801d77e <_printf_float+0xba>
 801d91a:	2301      	movs	r3, #1
 801d91c:	464a      	mov	r2, r9
 801d91e:	4631      	mov	r1, r6
 801d920:	4628      	mov	r0, r5
 801d922:	47b8      	blx	r7
 801d924:	3001      	adds	r0, #1
 801d926:	f43f af28 	beq.w	801d77a <_printf_float+0xb6>
 801d92a:	f108 0801 	add.w	r8, r8, #1
 801d92e:	e7e6      	b.n	801d8fe <_printf_float+0x23a>
 801d930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d932:	2b00      	cmp	r3, #0
 801d934:	dc38      	bgt.n	801d9a8 <_printf_float+0x2e4>
 801d936:	2301      	movs	r3, #1
 801d938:	4631      	mov	r1, r6
 801d93a:	4628      	mov	r0, r5
 801d93c:	4a19      	ldr	r2, [pc, #100]	; (801d9a4 <_printf_float+0x2e0>)
 801d93e:	47b8      	blx	r7
 801d940:	3001      	adds	r0, #1
 801d942:	f43f af1a 	beq.w	801d77a <_printf_float+0xb6>
 801d946:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801d94a:	4313      	orrs	r3, r2
 801d94c:	d102      	bne.n	801d954 <_printf_float+0x290>
 801d94e:	6823      	ldr	r3, [r4, #0]
 801d950:	07d9      	lsls	r1, r3, #31
 801d952:	d5d8      	bpl.n	801d906 <_printf_float+0x242>
 801d954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d958:	4631      	mov	r1, r6
 801d95a:	4628      	mov	r0, r5
 801d95c:	47b8      	blx	r7
 801d95e:	3001      	adds	r0, #1
 801d960:	f43f af0b 	beq.w	801d77a <_printf_float+0xb6>
 801d964:	f04f 0900 	mov.w	r9, #0
 801d968:	f104 0a1a 	add.w	sl, r4, #26
 801d96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d96e:	425b      	negs	r3, r3
 801d970:	454b      	cmp	r3, r9
 801d972:	dc01      	bgt.n	801d978 <_printf_float+0x2b4>
 801d974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d976:	e794      	b.n	801d8a2 <_printf_float+0x1de>
 801d978:	2301      	movs	r3, #1
 801d97a:	4652      	mov	r2, sl
 801d97c:	4631      	mov	r1, r6
 801d97e:	4628      	mov	r0, r5
 801d980:	47b8      	blx	r7
 801d982:	3001      	adds	r0, #1
 801d984:	f43f aef9 	beq.w	801d77a <_printf_float+0xb6>
 801d988:	f109 0901 	add.w	r9, r9, #1
 801d98c:	e7ee      	b.n	801d96c <_printf_float+0x2a8>
 801d98e:	bf00      	nop
 801d990:	7fefffff 	.word	0x7fefffff
 801d994:	08021dc4 	.word	0x08021dc4
 801d998:	08021dc8 	.word	0x08021dc8
 801d99c:	08021dd0 	.word	0x08021dd0
 801d9a0:	08021dcc 	.word	0x08021dcc
 801d9a4:	08021dd4 	.word	0x08021dd4
 801d9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d9aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d9ac:	429a      	cmp	r2, r3
 801d9ae:	bfa8      	it	ge
 801d9b0:	461a      	movge	r2, r3
 801d9b2:	2a00      	cmp	r2, #0
 801d9b4:	4691      	mov	r9, r2
 801d9b6:	dc37      	bgt.n	801da28 <_printf_float+0x364>
 801d9b8:	f04f 0b00 	mov.w	fp, #0
 801d9bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9c0:	f104 021a 	add.w	r2, r4, #26
 801d9c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801d9c8:	ebaa 0309 	sub.w	r3, sl, r9
 801d9cc:	455b      	cmp	r3, fp
 801d9ce:	dc33      	bgt.n	801da38 <_printf_float+0x374>
 801d9d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801d9d4:	429a      	cmp	r2, r3
 801d9d6:	db3b      	blt.n	801da50 <_printf_float+0x38c>
 801d9d8:	6823      	ldr	r3, [r4, #0]
 801d9da:	07da      	lsls	r2, r3, #31
 801d9dc:	d438      	bmi.n	801da50 <_printf_float+0x38c>
 801d9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d9e2:	eba3 020a 	sub.w	r2, r3, sl
 801d9e6:	eba3 0901 	sub.w	r9, r3, r1
 801d9ea:	4591      	cmp	r9, r2
 801d9ec:	bfa8      	it	ge
 801d9ee:	4691      	movge	r9, r2
 801d9f0:	f1b9 0f00 	cmp.w	r9, #0
 801d9f4:	dc34      	bgt.n	801da60 <_printf_float+0x39c>
 801d9f6:	f04f 0800 	mov.w	r8, #0
 801d9fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9fe:	f104 0a1a 	add.w	sl, r4, #26
 801da02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801da06:	1a9b      	subs	r3, r3, r2
 801da08:	eba3 0309 	sub.w	r3, r3, r9
 801da0c:	4543      	cmp	r3, r8
 801da0e:	f77f af7a 	ble.w	801d906 <_printf_float+0x242>
 801da12:	2301      	movs	r3, #1
 801da14:	4652      	mov	r2, sl
 801da16:	4631      	mov	r1, r6
 801da18:	4628      	mov	r0, r5
 801da1a:	47b8      	blx	r7
 801da1c:	3001      	adds	r0, #1
 801da1e:	f43f aeac 	beq.w	801d77a <_printf_float+0xb6>
 801da22:	f108 0801 	add.w	r8, r8, #1
 801da26:	e7ec      	b.n	801da02 <_printf_float+0x33e>
 801da28:	4613      	mov	r3, r2
 801da2a:	4631      	mov	r1, r6
 801da2c:	4642      	mov	r2, r8
 801da2e:	4628      	mov	r0, r5
 801da30:	47b8      	blx	r7
 801da32:	3001      	adds	r0, #1
 801da34:	d1c0      	bne.n	801d9b8 <_printf_float+0x2f4>
 801da36:	e6a0      	b.n	801d77a <_printf_float+0xb6>
 801da38:	2301      	movs	r3, #1
 801da3a:	4631      	mov	r1, r6
 801da3c:	4628      	mov	r0, r5
 801da3e:	920b      	str	r2, [sp, #44]	; 0x2c
 801da40:	47b8      	blx	r7
 801da42:	3001      	adds	r0, #1
 801da44:	f43f ae99 	beq.w	801d77a <_printf_float+0xb6>
 801da48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801da4a:	f10b 0b01 	add.w	fp, fp, #1
 801da4e:	e7b9      	b.n	801d9c4 <_printf_float+0x300>
 801da50:	4631      	mov	r1, r6
 801da52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801da56:	4628      	mov	r0, r5
 801da58:	47b8      	blx	r7
 801da5a:	3001      	adds	r0, #1
 801da5c:	d1bf      	bne.n	801d9de <_printf_float+0x31a>
 801da5e:	e68c      	b.n	801d77a <_printf_float+0xb6>
 801da60:	464b      	mov	r3, r9
 801da62:	4631      	mov	r1, r6
 801da64:	4628      	mov	r0, r5
 801da66:	eb08 020a 	add.w	r2, r8, sl
 801da6a:	47b8      	blx	r7
 801da6c:	3001      	adds	r0, #1
 801da6e:	d1c2      	bne.n	801d9f6 <_printf_float+0x332>
 801da70:	e683      	b.n	801d77a <_printf_float+0xb6>
 801da72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801da74:	2a01      	cmp	r2, #1
 801da76:	dc01      	bgt.n	801da7c <_printf_float+0x3b8>
 801da78:	07db      	lsls	r3, r3, #31
 801da7a:	d537      	bpl.n	801daec <_printf_float+0x428>
 801da7c:	2301      	movs	r3, #1
 801da7e:	4642      	mov	r2, r8
 801da80:	4631      	mov	r1, r6
 801da82:	4628      	mov	r0, r5
 801da84:	47b8      	blx	r7
 801da86:	3001      	adds	r0, #1
 801da88:	f43f ae77 	beq.w	801d77a <_printf_float+0xb6>
 801da8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801da90:	4631      	mov	r1, r6
 801da92:	4628      	mov	r0, r5
 801da94:	47b8      	blx	r7
 801da96:	3001      	adds	r0, #1
 801da98:	f43f ae6f 	beq.w	801d77a <_printf_float+0xb6>
 801da9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801daa0:	2200      	movs	r2, #0
 801daa2:	2300      	movs	r3, #0
 801daa4:	f7e2 ff98 	bl	80009d8 <__aeabi_dcmpeq>
 801daa8:	b9d8      	cbnz	r0, 801dae2 <_printf_float+0x41e>
 801daaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801daac:	f108 0201 	add.w	r2, r8, #1
 801dab0:	3b01      	subs	r3, #1
 801dab2:	4631      	mov	r1, r6
 801dab4:	4628      	mov	r0, r5
 801dab6:	47b8      	blx	r7
 801dab8:	3001      	adds	r0, #1
 801daba:	d10e      	bne.n	801dada <_printf_float+0x416>
 801dabc:	e65d      	b.n	801d77a <_printf_float+0xb6>
 801dabe:	2301      	movs	r3, #1
 801dac0:	464a      	mov	r2, r9
 801dac2:	4631      	mov	r1, r6
 801dac4:	4628      	mov	r0, r5
 801dac6:	47b8      	blx	r7
 801dac8:	3001      	adds	r0, #1
 801daca:	f43f ae56 	beq.w	801d77a <_printf_float+0xb6>
 801dace:	f108 0801 	add.w	r8, r8, #1
 801dad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dad4:	3b01      	subs	r3, #1
 801dad6:	4543      	cmp	r3, r8
 801dad8:	dcf1      	bgt.n	801dabe <_printf_float+0x3fa>
 801dada:	4653      	mov	r3, sl
 801dadc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801dae0:	e6e0      	b.n	801d8a4 <_printf_float+0x1e0>
 801dae2:	f04f 0800 	mov.w	r8, #0
 801dae6:	f104 091a 	add.w	r9, r4, #26
 801daea:	e7f2      	b.n	801dad2 <_printf_float+0x40e>
 801daec:	2301      	movs	r3, #1
 801daee:	4642      	mov	r2, r8
 801daf0:	e7df      	b.n	801dab2 <_printf_float+0x3ee>
 801daf2:	2301      	movs	r3, #1
 801daf4:	464a      	mov	r2, r9
 801daf6:	4631      	mov	r1, r6
 801daf8:	4628      	mov	r0, r5
 801dafa:	47b8      	blx	r7
 801dafc:	3001      	adds	r0, #1
 801dafe:	f43f ae3c 	beq.w	801d77a <_printf_float+0xb6>
 801db02:	f108 0801 	add.w	r8, r8, #1
 801db06:	68e3      	ldr	r3, [r4, #12]
 801db08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801db0a:	1a5b      	subs	r3, r3, r1
 801db0c:	4543      	cmp	r3, r8
 801db0e:	dcf0      	bgt.n	801daf2 <_printf_float+0x42e>
 801db10:	e6fd      	b.n	801d90e <_printf_float+0x24a>
 801db12:	f04f 0800 	mov.w	r8, #0
 801db16:	f104 0919 	add.w	r9, r4, #25
 801db1a:	e7f4      	b.n	801db06 <_printf_float+0x442>

0801db1c <_printf_common>:
 801db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db20:	4616      	mov	r6, r2
 801db22:	4699      	mov	r9, r3
 801db24:	688a      	ldr	r2, [r1, #8]
 801db26:	690b      	ldr	r3, [r1, #16]
 801db28:	4607      	mov	r7, r0
 801db2a:	4293      	cmp	r3, r2
 801db2c:	bfb8      	it	lt
 801db2e:	4613      	movlt	r3, r2
 801db30:	6033      	str	r3, [r6, #0]
 801db32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db36:	460c      	mov	r4, r1
 801db38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db3c:	b10a      	cbz	r2, 801db42 <_printf_common+0x26>
 801db3e:	3301      	adds	r3, #1
 801db40:	6033      	str	r3, [r6, #0]
 801db42:	6823      	ldr	r3, [r4, #0]
 801db44:	0699      	lsls	r1, r3, #26
 801db46:	bf42      	ittt	mi
 801db48:	6833      	ldrmi	r3, [r6, #0]
 801db4a:	3302      	addmi	r3, #2
 801db4c:	6033      	strmi	r3, [r6, #0]
 801db4e:	6825      	ldr	r5, [r4, #0]
 801db50:	f015 0506 	ands.w	r5, r5, #6
 801db54:	d106      	bne.n	801db64 <_printf_common+0x48>
 801db56:	f104 0a19 	add.w	sl, r4, #25
 801db5a:	68e3      	ldr	r3, [r4, #12]
 801db5c:	6832      	ldr	r2, [r6, #0]
 801db5e:	1a9b      	subs	r3, r3, r2
 801db60:	42ab      	cmp	r3, r5
 801db62:	dc28      	bgt.n	801dbb6 <_printf_common+0x9a>
 801db64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801db68:	1e13      	subs	r3, r2, #0
 801db6a:	6822      	ldr	r2, [r4, #0]
 801db6c:	bf18      	it	ne
 801db6e:	2301      	movne	r3, #1
 801db70:	0692      	lsls	r2, r2, #26
 801db72:	d42d      	bmi.n	801dbd0 <_printf_common+0xb4>
 801db74:	4649      	mov	r1, r9
 801db76:	4638      	mov	r0, r7
 801db78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801db7c:	47c0      	blx	r8
 801db7e:	3001      	adds	r0, #1
 801db80:	d020      	beq.n	801dbc4 <_printf_common+0xa8>
 801db82:	6823      	ldr	r3, [r4, #0]
 801db84:	68e5      	ldr	r5, [r4, #12]
 801db86:	f003 0306 	and.w	r3, r3, #6
 801db8a:	2b04      	cmp	r3, #4
 801db8c:	bf18      	it	ne
 801db8e:	2500      	movne	r5, #0
 801db90:	6832      	ldr	r2, [r6, #0]
 801db92:	f04f 0600 	mov.w	r6, #0
 801db96:	68a3      	ldr	r3, [r4, #8]
 801db98:	bf08      	it	eq
 801db9a:	1aad      	subeq	r5, r5, r2
 801db9c:	6922      	ldr	r2, [r4, #16]
 801db9e:	bf08      	it	eq
 801dba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dba4:	4293      	cmp	r3, r2
 801dba6:	bfc4      	itt	gt
 801dba8:	1a9b      	subgt	r3, r3, r2
 801dbaa:	18ed      	addgt	r5, r5, r3
 801dbac:	341a      	adds	r4, #26
 801dbae:	42b5      	cmp	r5, r6
 801dbb0:	d11a      	bne.n	801dbe8 <_printf_common+0xcc>
 801dbb2:	2000      	movs	r0, #0
 801dbb4:	e008      	b.n	801dbc8 <_printf_common+0xac>
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	4652      	mov	r2, sl
 801dbba:	4649      	mov	r1, r9
 801dbbc:	4638      	mov	r0, r7
 801dbbe:	47c0      	blx	r8
 801dbc0:	3001      	adds	r0, #1
 801dbc2:	d103      	bne.n	801dbcc <_printf_common+0xb0>
 801dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbcc:	3501      	adds	r5, #1
 801dbce:	e7c4      	b.n	801db5a <_printf_common+0x3e>
 801dbd0:	2030      	movs	r0, #48	; 0x30
 801dbd2:	18e1      	adds	r1, r4, r3
 801dbd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dbd8:	1c5a      	adds	r2, r3, #1
 801dbda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dbde:	4422      	add	r2, r4
 801dbe0:	3302      	adds	r3, #2
 801dbe2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dbe6:	e7c5      	b.n	801db74 <_printf_common+0x58>
 801dbe8:	2301      	movs	r3, #1
 801dbea:	4622      	mov	r2, r4
 801dbec:	4649      	mov	r1, r9
 801dbee:	4638      	mov	r0, r7
 801dbf0:	47c0      	blx	r8
 801dbf2:	3001      	adds	r0, #1
 801dbf4:	d0e6      	beq.n	801dbc4 <_printf_common+0xa8>
 801dbf6:	3601      	adds	r6, #1
 801dbf8:	e7d9      	b.n	801dbae <_printf_common+0x92>
	...

0801dbfc <_printf_i>:
 801dbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc00:	7e0f      	ldrb	r7, [r1, #24]
 801dc02:	4691      	mov	r9, r2
 801dc04:	2f78      	cmp	r7, #120	; 0x78
 801dc06:	4680      	mov	r8, r0
 801dc08:	460c      	mov	r4, r1
 801dc0a:	469a      	mov	sl, r3
 801dc0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dc0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dc12:	d807      	bhi.n	801dc24 <_printf_i+0x28>
 801dc14:	2f62      	cmp	r7, #98	; 0x62
 801dc16:	d80a      	bhi.n	801dc2e <_printf_i+0x32>
 801dc18:	2f00      	cmp	r7, #0
 801dc1a:	f000 80d9 	beq.w	801ddd0 <_printf_i+0x1d4>
 801dc1e:	2f58      	cmp	r7, #88	; 0x58
 801dc20:	f000 80a4 	beq.w	801dd6c <_printf_i+0x170>
 801dc24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc2c:	e03a      	b.n	801dca4 <_printf_i+0xa8>
 801dc2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc32:	2b15      	cmp	r3, #21
 801dc34:	d8f6      	bhi.n	801dc24 <_printf_i+0x28>
 801dc36:	a101      	add	r1, pc, #4	; (adr r1, 801dc3c <_printf_i+0x40>)
 801dc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc3c:	0801dc95 	.word	0x0801dc95
 801dc40:	0801dca9 	.word	0x0801dca9
 801dc44:	0801dc25 	.word	0x0801dc25
 801dc48:	0801dc25 	.word	0x0801dc25
 801dc4c:	0801dc25 	.word	0x0801dc25
 801dc50:	0801dc25 	.word	0x0801dc25
 801dc54:	0801dca9 	.word	0x0801dca9
 801dc58:	0801dc25 	.word	0x0801dc25
 801dc5c:	0801dc25 	.word	0x0801dc25
 801dc60:	0801dc25 	.word	0x0801dc25
 801dc64:	0801dc25 	.word	0x0801dc25
 801dc68:	0801ddb7 	.word	0x0801ddb7
 801dc6c:	0801dcd9 	.word	0x0801dcd9
 801dc70:	0801dd99 	.word	0x0801dd99
 801dc74:	0801dc25 	.word	0x0801dc25
 801dc78:	0801dc25 	.word	0x0801dc25
 801dc7c:	0801ddd9 	.word	0x0801ddd9
 801dc80:	0801dc25 	.word	0x0801dc25
 801dc84:	0801dcd9 	.word	0x0801dcd9
 801dc88:	0801dc25 	.word	0x0801dc25
 801dc8c:	0801dc25 	.word	0x0801dc25
 801dc90:	0801dda1 	.word	0x0801dda1
 801dc94:	682b      	ldr	r3, [r5, #0]
 801dc96:	1d1a      	adds	r2, r3, #4
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	602a      	str	r2, [r5, #0]
 801dc9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dca4:	2301      	movs	r3, #1
 801dca6:	e0a4      	b.n	801ddf2 <_printf_i+0x1f6>
 801dca8:	6820      	ldr	r0, [r4, #0]
 801dcaa:	6829      	ldr	r1, [r5, #0]
 801dcac:	0606      	lsls	r6, r0, #24
 801dcae:	f101 0304 	add.w	r3, r1, #4
 801dcb2:	d50a      	bpl.n	801dcca <_printf_i+0xce>
 801dcb4:	680e      	ldr	r6, [r1, #0]
 801dcb6:	602b      	str	r3, [r5, #0]
 801dcb8:	2e00      	cmp	r6, #0
 801dcba:	da03      	bge.n	801dcc4 <_printf_i+0xc8>
 801dcbc:	232d      	movs	r3, #45	; 0x2d
 801dcbe:	4276      	negs	r6, r6
 801dcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dcc4:	230a      	movs	r3, #10
 801dcc6:	485e      	ldr	r0, [pc, #376]	; (801de40 <_printf_i+0x244>)
 801dcc8:	e019      	b.n	801dcfe <_printf_i+0x102>
 801dcca:	680e      	ldr	r6, [r1, #0]
 801dccc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dcd0:	602b      	str	r3, [r5, #0]
 801dcd2:	bf18      	it	ne
 801dcd4:	b236      	sxthne	r6, r6
 801dcd6:	e7ef      	b.n	801dcb8 <_printf_i+0xbc>
 801dcd8:	682b      	ldr	r3, [r5, #0]
 801dcda:	6820      	ldr	r0, [r4, #0]
 801dcdc:	1d19      	adds	r1, r3, #4
 801dcde:	6029      	str	r1, [r5, #0]
 801dce0:	0601      	lsls	r1, r0, #24
 801dce2:	d501      	bpl.n	801dce8 <_printf_i+0xec>
 801dce4:	681e      	ldr	r6, [r3, #0]
 801dce6:	e002      	b.n	801dcee <_printf_i+0xf2>
 801dce8:	0646      	lsls	r6, r0, #25
 801dcea:	d5fb      	bpl.n	801dce4 <_printf_i+0xe8>
 801dcec:	881e      	ldrh	r6, [r3, #0]
 801dcee:	2f6f      	cmp	r7, #111	; 0x6f
 801dcf0:	bf0c      	ite	eq
 801dcf2:	2308      	moveq	r3, #8
 801dcf4:	230a      	movne	r3, #10
 801dcf6:	4852      	ldr	r0, [pc, #328]	; (801de40 <_printf_i+0x244>)
 801dcf8:	2100      	movs	r1, #0
 801dcfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dcfe:	6865      	ldr	r5, [r4, #4]
 801dd00:	2d00      	cmp	r5, #0
 801dd02:	bfa8      	it	ge
 801dd04:	6821      	ldrge	r1, [r4, #0]
 801dd06:	60a5      	str	r5, [r4, #8]
 801dd08:	bfa4      	itt	ge
 801dd0a:	f021 0104 	bicge.w	r1, r1, #4
 801dd0e:	6021      	strge	r1, [r4, #0]
 801dd10:	b90e      	cbnz	r6, 801dd16 <_printf_i+0x11a>
 801dd12:	2d00      	cmp	r5, #0
 801dd14:	d04d      	beq.n	801ddb2 <_printf_i+0x1b6>
 801dd16:	4615      	mov	r5, r2
 801dd18:	fbb6 f1f3 	udiv	r1, r6, r3
 801dd1c:	fb03 6711 	mls	r7, r3, r1, r6
 801dd20:	5dc7      	ldrb	r7, [r0, r7]
 801dd22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dd26:	4637      	mov	r7, r6
 801dd28:	42bb      	cmp	r3, r7
 801dd2a:	460e      	mov	r6, r1
 801dd2c:	d9f4      	bls.n	801dd18 <_printf_i+0x11c>
 801dd2e:	2b08      	cmp	r3, #8
 801dd30:	d10b      	bne.n	801dd4a <_printf_i+0x14e>
 801dd32:	6823      	ldr	r3, [r4, #0]
 801dd34:	07de      	lsls	r6, r3, #31
 801dd36:	d508      	bpl.n	801dd4a <_printf_i+0x14e>
 801dd38:	6923      	ldr	r3, [r4, #16]
 801dd3a:	6861      	ldr	r1, [r4, #4]
 801dd3c:	4299      	cmp	r1, r3
 801dd3e:	bfde      	ittt	le
 801dd40:	2330      	movle	r3, #48	; 0x30
 801dd42:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dd46:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dd4a:	1b52      	subs	r2, r2, r5
 801dd4c:	6122      	str	r2, [r4, #16]
 801dd4e:	464b      	mov	r3, r9
 801dd50:	4621      	mov	r1, r4
 801dd52:	4640      	mov	r0, r8
 801dd54:	f8cd a000 	str.w	sl, [sp]
 801dd58:	aa03      	add	r2, sp, #12
 801dd5a:	f7ff fedf 	bl	801db1c <_printf_common>
 801dd5e:	3001      	adds	r0, #1
 801dd60:	d14c      	bne.n	801ddfc <_printf_i+0x200>
 801dd62:	f04f 30ff 	mov.w	r0, #4294967295
 801dd66:	b004      	add	sp, #16
 801dd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd6c:	4834      	ldr	r0, [pc, #208]	; (801de40 <_printf_i+0x244>)
 801dd6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801dd72:	6829      	ldr	r1, [r5, #0]
 801dd74:	6823      	ldr	r3, [r4, #0]
 801dd76:	f851 6b04 	ldr.w	r6, [r1], #4
 801dd7a:	6029      	str	r1, [r5, #0]
 801dd7c:	061d      	lsls	r5, r3, #24
 801dd7e:	d514      	bpl.n	801ddaa <_printf_i+0x1ae>
 801dd80:	07df      	lsls	r7, r3, #31
 801dd82:	bf44      	itt	mi
 801dd84:	f043 0320 	orrmi.w	r3, r3, #32
 801dd88:	6023      	strmi	r3, [r4, #0]
 801dd8a:	b91e      	cbnz	r6, 801dd94 <_printf_i+0x198>
 801dd8c:	6823      	ldr	r3, [r4, #0]
 801dd8e:	f023 0320 	bic.w	r3, r3, #32
 801dd92:	6023      	str	r3, [r4, #0]
 801dd94:	2310      	movs	r3, #16
 801dd96:	e7af      	b.n	801dcf8 <_printf_i+0xfc>
 801dd98:	6823      	ldr	r3, [r4, #0]
 801dd9a:	f043 0320 	orr.w	r3, r3, #32
 801dd9e:	6023      	str	r3, [r4, #0]
 801dda0:	2378      	movs	r3, #120	; 0x78
 801dda2:	4828      	ldr	r0, [pc, #160]	; (801de44 <_printf_i+0x248>)
 801dda4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801dda8:	e7e3      	b.n	801dd72 <_printf_i+0x176>
 801ddaa:	0659      	lsls	r1, r3, #25
 801ddac:	bf48      	it	mi
 801ddae:	b2b6      	uxthmi	r6, r6
 801ddb0:	e7e6      	b.n	801dd80 <_printf_i+0x184>
 801ddb2:	4615      	mov	r5, r2
 801ddb4:	e7bb      	b.n	801dd2e <_printf_i+0x132>
 801ddb6:	682b      	ldr	r3, [r5, #0]
 801ddb8:	6826      	ldr	r6, [r4, #0]
 801ddba:	1d18      	adds	r0, r3, #4
 801ddbc:	6961      	ldr	r1, [r4, #20]
 801ddbe:	6028      	str	r0, [r5, #0]
 801ddc0:	0635      	lsls	r5, r6, #24
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	d501      	bpl.n	801ddca <_printf_i+0x1ce>
 801ddc6:	6019      	str	r1, [r3, #0]
 801ddc8:	e002      	b.n	801ddd0 <_printf_i+0x1d4>
 801ddca:	0670      	lsls	r0, r6, #25
 801ddcc:	d5fb      	bpl.n	801ddc6 <_printf_i+0x1ca>
 801ddce:	8019      	strh	r1, [r3, #0]
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	4615      	mov	r5, r2
 801ddd4:	6123      	str	r3, [r4, #16]
 801ddd6:	e7ba      	b.n	801dd4e <_printf_i+0x152>
 801ddd8:	682b      	ldr	r3, [r5, #0]
 801ddda:	2100      	movs	r1, #0
 801dddc:	1d1a      	adds	r2, r3, #4
 801ddde:	602a      	str	r2, [r5, #0]
 801dde0:	681d      	ldr	r5, [r3, #0]
 801dde2:	6862      	ldr	r2, [r4, #4]
 801dde4:	4628      	mov	r0, r5
 801dde6:	f001 f823 	bl	801ee30 <memchr>
 801ddea:	b108      	cbz	r0, 801ddf0 <_printf_i+0x1f4>
 801ddec:	1b40      	subs	r0, r0, r5
 801ddee:	6060      	str	r0, [r4, #4]
 801ddf0:	6863      	ldr	r3, [r4, #4]
 801ddf2:	6123      	str	r3, [r4, #16]
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddfa:	e7a8      	b.n	801dd4e <_printf_i+0x152>
 801ddfc:	462a      	mov	r2, r5
 801ddfe:	4649      	mov	r1, r9
 801de00:	4640      	mov	r0, r8
 801de02:	6923      	ldr	r3, [r4, #16]
 801de04:	47d0      	blx	sl
 801de06:	3001      	adds	r0, #1
 801de08:	d0ab      	beq.n	801dd62 <_printf_i+0x166>
 801de0a:	6823      	ldr	r3, [r4, #0]
 801de0c:	079b      	lsls	r3, r3, #30
 801de0e:	d413      	bmi.n	801de38 <_printf_i+0x23c>
 801de10:	68e0      	ldr	r0, [r4, #12]
 801de12:	9b03      	ldr	r3, [sp, #12]
 801de14:	4298      	cmp	r0, r3
 801de16:	bfb8      	it	lt
 801de18:	4618      	movlt	r0, r3
 801de1a:	e7a4      	b.n	801dd66 <_printf_i+0x16a>
 801de1c:	2301      	movs	r3, #1
 801de1e:	4632      	mov	r2, r6
 801de20:	4649      	mov	r1, r9
 801de22:	4640      	mov	r0, r8
 801de24:	47d0      	blx	sl
 801de26:	3001      	adds	r0, #1
 801de28:	d09b      	beq.n	801dd62 <_printf_i+0x166>
 801de2a:	3501      	adds	r5, #1
 801de2c:	68e3      	ldr	r3, [r4, #12]
 801de2e:	9903      	ldr	r1, [sp, #12]
 801de30:	1a5b      	subs	r3, r3, r1
 801de32:	42ab      	cmp	r3, r5
 801de34:	dcf2      	bgt.n	801de1c <_printf_i+0x220>
 801de36:	e7eb      	b.n	801de10 <_printf_i+0x214>
 801de38:	2500      	movs	r5, #0
 801de3a:	f104 0619 	add.w	r6, r4, #25
 801de3e:	e7f5      	b.n	801de2c <_printf_i+0x230>
 801de40:	08021dd6 	.word	0x08021dd6
 801de44:	08021de7 	.word	0x08021de7

0801de48 <iprintf>:
 801de48:	b40f      	push	{r0, r1, r2, r3}
 801de4a:	4b0a      	ldr	r3, [pc, #40]	; (801de74 <iprintf+0x2c>)
 801de4c:	b513      	push	{r0, r1, r4, lr}
 801de4e:	681c      	ldr	r4, [r3, #0]
 801de50:	b124      	cbz	r4, 801de5c <iprintf+0x14>
 801de52:	69a3      	ldr	r3, [r4, #24]
 801de54:	b913      	cbnz	r3, 801de5c <iprintf+0x14>
 801de56:	4620      	mov	r0, r4
 801de58:	f000 ff3c 	bl	801ecd4 <__sinit>
 801de5c:	ab05      	add	r3, sp, #20
 801de5e:	4620      	mov	r0, r4
 801de60:	9a04      	ldr	r2, [sp, #16]
 801de62:	68a1      	ldr	r1, [r4, #8]
 801de64:	9301      	str	r3, [sp, #4]
 801de66:	f001 fde7 	bl	801fa38 <_vfiprintf_r>
 801de6a:	b002      	add	sp, #8
 801de6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de70:	b004      	add	sp, #16
 801de72:	4770      	bx	lr
 801de74:	2000012c 	.word	0x2000012c

0801de78 <siprintf>:
 801de78:	b40e      	push	{r1, r2, r3}
 801de7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801de7e:	b500      	push	{lr}
 801de80:	b09c      	sub	sp, #112	; 0x70
 801de82:	ab1d      	add	r3, sp, #116	; 0x74
 801de84:	9002      	str	r0, [sp, #8]
 801de86:	9006      	str	r0, [sp, #24]
 801de88:	9107      	str	r1, [sp, #28]
 801de8a:	9104      	str	r1, [sp, #16]
 801de8c:	4808      	ldr	r0, [pc, #32]	; (801deb0 <siprintf+0x38>)
 801de8e:	4909      	ldr	r1, [pc, #36]	; (801deb4 <siprintf+0x3c>)
 801de90:	f853 2b04 	ldr.w	r2, [r3], #4
 801de94:	9105      	str	r1, [sp, #20]
 801de96:	6800      	ldr	r0, [r0, #0]
 801de98:	a902      	add	r1, sp, #8
 801de9a:	9301      	str	r3, [sp, #4]
 801de9c:	f001 fca4 	bl	801f7e8 <_svfiprintf_r>
 801dea0:	2200      	movs	r2, #0
 801dea2:	9b02      	ldr	r3, [sp, #8]
 801dea4:	701a      	strb	r2, [r3, #0]
 801dea6:	b01c      	add	sp, #112	; 0x70
 801dea8:	f85d eb04 	ldr.w	lr, [sp], #4
 801deac:	b003      	add	sp, #12
 801deae:	4770      	bx	lr
 801deb0:	2000012c 	.word	0x2000012c
 801deb4:	ffff0208 	.word	0xffff0208

0801deb8 <_vsniprintf_r>:
 801deb8:	b530      	push	{r4, r5, lr}
 801deba:	4614      	mov	r4, r2
 801debc:	2c00      	cmp	r4, #0
 801debe:	4605      	mov	r5, r0
 801dec0:	461a      	mov	r2, r3
 801dec2:	b09b      	sub	sp, #108	; 0x6c
 801dec4:	da05      	bge.n	801ded2 <_vsniprintf_r+0x1a>
 801dec6:	238b      	movs	r3, #139	; 0x8b
 801dec8:	6003      	str	r3, [r0, #0]
 801deca:	f04f 30ff 	mov.w	r0, #4294967295
 801dece:	b01b      	add	sp, #108	; 0x6c
 801ded0:	bd30      	pop	{r4, r5, pc}
 801ded2:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ded6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801deda:	bf0c      	ite	eq
 801dedc:	4623      	moveq	r3, r4
 801dede:	f104 33ff 	addne.w	r3, r4, #4294967295
 801dee2:	9302      	str	r3, [sp, #8]
 801dee4:	9305      	str	r3, [sp, #20]
 801dee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801deea:	9100      	str	r1, [sp, #0]
 801deec:	9104      	str	r1, [sp, #16]
 801deee:	f8ad 300e 	strh.w	r3, [sp, #14]
 801def2:	4669      	mov	r1, sp
 801def4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801def6:	f001 fc77 	bl	801f7e8 <_svfiprintf_r>
 801defa:	1c43      	adds	r3, r0, #1
 801defc:	bfbc      	itt	lt
 801defe:	238b      	movlt	r3, #139	; 0x8b
 801df00:	602b      	strlt	r3, [r5, #0]
 801df02:	2c00      	cmp	r4, #0
 801df04:	d0e3      	beq.n	801dece <_vsniprintf_r+0x16>
 801df06:	2200      	movs	r2, #0
 801df08:	9b00      	ldr	r3, [sp, #0]
 801df0a:	701a      	strb	r2, [r3, #0]
 801df0c:	e7df      	b.n	801dece <_vsniprintf_r+0x16>
	...

0801df10 <vsniprintf>:
 801df10:	b507      	push	{r0, r1, r2, lr}
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	4613      	mov	r3, r2
 801df16:	460a      	mov	r2, r1
 801df18:	4601      	mov	r1, r0
 801df1a:	4803      	ldr	r0, [pc, #12]	; (801df28 <vsniprintf+0x18>)
 801df1c:	6800      	ldr	r0, [r0, #0]
 801df1e:	f7ff ffcb 	bl	801deb8 <_vsniprintf_r>
 801df22:	b003      	add	sp, #12
 801df24:	f85d fb04 	ldr.w	pc, [sp], #4
 801df28:	2000012c 	.word	0x2000012c

0801df2c <quorem>:
 801df2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df30:	6903      	ldr	r3, [r0, #16]
 801df32:	690c      	ldr	r4, [r1, #16]
 801df34:	4607      	mov	r7, r0
 801df36:	42a3      	cmp	r3, r4
 801df38:	f2c0 8082 	blt.w	801e040 <quorem+0x114>
 801df3c:	3c01      	subs	r4, #1
 801df3e:	f100 0514 	add.w	r5, r0, #20
 801df42:	f101 0814 	add.w	r8, r1, #20
 801df46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801df4a:	9301      	str	r3, [sp, #4]
 801df4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801df50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801df54:	3301      	adds	r3, #1
 801df56:	429a      	cmp	r2, r3
 801df58:	fbb2 f6f3 	udiv	r6, r2, r3
 801df5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801df60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801df64:	d331      	bcc.n	801dfca <quorem+0x9e>
 801df66:	f04f 0e00 	mov.w	lr, #0
 801df6a:	4640      	mov	r0, r8
 801df6c:	46ac      	mov	ip, r5
 801df6e:	46f2      	mov	sl, lr
 801df70:	f850 2b04 	ldr.w	r2, [r0], #4
 801df74:	b293      	uxth	r3, r2
 801df76:	fb06 e303 	mla	r3, r6, r3, lr
 801df7a:	0c12      	lsrs	r2, r2, #16
 801df7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801df80:	b29b      	uxth	r3, r3
 801df82:	fb06 e202 	mla	r2, r6, r2, lr
 801df86:	ebaa 0303 	sub.w	r3, sl, r3
 801df8a:	f8dc a000 	ldr.w	sl, [ip]
 801df8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801df92:	fa1f fa8a 	uxth.w	sl, sl
 801df96:	4453      	add	r3, sl
 801df98:	f8dc a000 	ldr.w	sl, [ip]
 801df9c:	b292      	uxth	r2, r2
 801df9e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801dfa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dfa6:	b29b      	uxth	r3, r3
 801dfa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dfac:	4581      	cmp	r9, r0
 801dfae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801dfb2:	f84c 3b04 	str.w	r3, [ip], #4
 801dfb6:	d2db      	bcs.n	801df70 <quorem+0x44>
 801dfb8:	f855 300b 	ldr.w	r3, [r5, fp]
 801dfbc:	b92b      	cbnz	r3, 801dfca <quorem+0x9e>
 801dfbe:	9b01      	ldr	r3, [sp, #4]
 801dfc0:	3b04      	subs	r3, #4
 801dfc2:	429d      	cmp	r5, r3
 801dfc4:	461a      	mov	r2, r3
 801dfc6:	d32f      	bcc.n	801e028 <quorem+0xfc>
 801dfc8:	613c      	str	r4, [r7, #16]
 801dfca:	4638      	mov	r0, r7
 801dfcc:	f001 f9bc 	bl	801f348 <__mcmp>
 801dfd0:	2800      	cmp	r0, #0
 801dfd2:	db25      	blt.n	801e020 <quorem+0xf4>
 801dfd4:	4628      	mov	r0, r5
 801dfd6:	f04f 0c00 	mov.w	ip, #0
 801dfda:	3601      	adds	r6, #1
 801dfdc:	f858 1b04 	ldr.w	r1, [r8], #4
 801dfe0:	f8d0 e000 	ldr.w	lr, [r0]
 801dfe4:	b28b      	uxth	r3, r1
 801dfe6:	ebac 0303 	sub.w	r3, ip, r3
 801dfea:	fa1f f28e 	uxth.w	r2, lr
 801dfee:	4413      	add	r3, r2
 801dff0:	0c0a      	lsrs	r2, r1, #16
 801dff2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801dff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dffa:	b29b      	uxth	r3, r3
 801dffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e000:	45c1      	cmp	r9, r8
 801e002:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e006:	f840 3b04 	str.w	r3, [r0], #4
 801e00a:	d2e7      	bcs.n	801dfdc <quorem+0xb0>
 801e00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e014:	b922      	cbnz	r2, 801e020 <quorem+0xf4>
 801e016:	3b04      	subs	r3, #4
 801e018:	429d      	cmp	r5, r3
 801e01a:	461a      	mov	r2, r3
 801e01c:	d30a      	bcc.n	801e034 <quorem+0x108>
 801e01e:	613c      	str	r4, [r7, #16]
 801e020:	4630      	mov	r0, r6
 801e022:	b003      	add	sp, #12
 801e024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e028:	6812      	ldr	r2, [r2, #0]
 801e02a:	3b04      	subs	r3, #4
 801e02c:	2a00      	cmp	r2, #0
 801e02e:	d1cb      	bne.n	801dfc8 <quorem+0x9c>
 801e030:	3c01      	subs	r4, #1
 801e032:	e7c6      	b.n	801dfc2 <quorem+0x96>
 801e034:	6812      	ldr	r2, [r2, #0]
 801e036:	3b04      	subs	r3, #4
 801e038:	2a00      	cmp	r2, #0
 801e03a:	d1f0      	bne.n	801e01e <quorem+0xf2>
 801e03c:	3c01      	subs	r4, #1
 801e03e:	e7eb      	b.n	801e018 <quorem+0xec>
 801e040:	2000      	movs	r0, #0
 801e042:	e7ee      	b.n	801e022 <quorem+0xf6>
 801e044:	0000      	movs	r0, r0
	...

0801e048 <_dtoa_r>:
 801e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e04c:	4616      	mov	r6, r2
 801e04e:	461f      	mov	r7, r3
 801e050:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801e052:	b099      	sub	sp, #100	; 0x64
 801e054:	4605      	mov	r5, r0
 801e056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e05a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801e05e:	b974      	cbnz	r4, 801e07e <_dtoa_r+0x36>
 801e060:	2010      	movs	r0, #16
 801e062:	f000 fedd 	bl	801ee20 <malloc>
 801e066:	4602      	mov	r2, r0
 801e068:	6268      	str	r0, [r5, #36]	; 0x24
 801e06a:	b920      	cbnz	r0, 801e076 <_dtoa_r+0x2e>
 801e06c:	21ea      	movs	r1, #234	; 0xea
 801e06e:	4ba8      	ldr	r3, [pc, #672]	; (801e310 <_dtoa_r+0x2c8>)
 801e070:	48a8      	ldr	r0, [pc, #672]	; (801e314 <_dtoa_r+0x2cc>)
 801e072:	f001 ff37 	bl	801fee4 <__assert_func>
 801e076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e07a:	6004      	str	r4, [r0, #0]
 801e07c:	60c4      	str	r4, [r0, #12]
 801e07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e080:	6819      	ldr	r1, [r3, #0]
 801e082:	b151      	cbz	r1, 801e09a <_dtoa_r+0x52>
 801e084:	685a      	ldr	r2, [r3, #4]
 801e086:	2301      	movs	r3, #1
 801e088:	4093      	lsls	r3, r2
 801e08a:	604a      	str	r2, [r1, #4]
 801e08c:	608b      	str	r3, [r1, #8]
 801e08e:	4628      	mov	r0, r5
 801e090:	f000 ff1c 	bl	801eecc <_Bfree>
 801e094:	2200      	movs	r2, #0
 801e096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e098:	601a      	str	r2, [r3, #0]
 801e09a:	1e3b      	subs	r3, r7, #0
 801e09c:	bfaf      	iteee	ge
 801e09e:	2300      	movge	r3, #0
 801e0a0:	2201      	movlt	r2, #1
 801e0a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e0a6:	9305      	strlt	r3, [sp, #20]
 801e0a8:	bfa8      	it	ge
 801e0aa:	f8c8 3000 	strge.w	r3, [r8]
 801e0ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801e0b2:	4b99      	ldr	r3, [pc, #612]	; (801e318 <_dtoa_r+0x2d0>)
 801e0b4:	bfb8      	it	lt
 801e0b6:	f8c8 2000 	strlt.w	r2, [r8]
 801e0ba:	ea33 0309 	bics.w	r3, r3, r9
 801e0be:	d119      	bne.n	801e0f4 <_dtoa_r+0xac>
 801e0c0:	f242 730f 	movw	r3, #9999	; 0x270f
 801e0c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e0c6:	6013      	str	r3, [r2, #0]
 801e0c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e0cc:	4333      	orrs	r3, r6
 801e0ce:	f000 857f 	beq.w	801ebd0 <_dtoa_r+0xb88>
 801e0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e0d4:	b953      	cbnz	r3, 801e0ec <_dtoa_r+0xa4>
 801e0d6:	4b91      	ldr	r3, [pc, #580]	; (801e31c <_dtoa_r+0x2d4>)
 801e0d8:	e022      	b.n	801e120 <_dtoa_r+0xd8>
 801e0da:	4b91      	ldr	r3, [pc, #580]	; (801e320 <_dtoa_r+0x2d8>)
 801e0dc:	9303      	str	r3, [sp, #12]
 801e0de:	3308      	adds	r3, #8
 801e0e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e0e2:	6013      	str	r3, [r2, #0]
 801e0e4:	9803      	ldr	r0, [sp, #12]
 801e0e6:	b019      	add	sp, #100	; 0x64
 801e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0ec:	4b8b      	ldr	r3, [pc, #556]	; (801e31c <_dtoa_r+0x2d4>)
 801e0ee:	9303      	str	r3, [sp, #12]
 801e0f0:	3303      	adds	r3, #3
 801e0f2:	e7f5      	b.n	801e0e0 <_dtoa_r+0x98>
 801e0f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801e0f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801e0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e100:	2200      	movs	r2, #0
 801e102:	2300      	movs	r3, #0
 801e104:	f7e2 fc68 	bl	80009d8 <__aeabi_dcmpeq>
 801e108:	4680      	mov	r8, r0
 801e10a:	b158      	cbz	r0, 801e124 <_dtoa_r+0xdc>
 801e10c:	2301      	movs	r3, #1
 801e10e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e110:	6013      	str	r3, [r2, #0]
 801e112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e114:	2b00      	cmp	r3, #0
 801e116:	f000 8558 	beq.w	801ebca <_dtoa_r+0xb82>
 801e11a:	4882      	ldr	r0, [pc, #520]	; (801e324 <_dtoa_r+0x2dc>)
 801e11c:	6018      	str	r0, [r3, #0]
 801e11e:	1e43      	subs	r3, r0, #1
 801e120:	9303      	str	r3, [sp, #12]
 801e122:	e7df      	b.n	801e0e4 <_dtoa_r+0x9c>
 801e124:	ab16      	add	r3, sp, #88	; 0x58
 801e126:	9301      	str	r3, [sp, #4]
 801e128:	ab17      	add	r3, sp, #92	; 0x5c
 801e12a:	9300      	str	r3, [sp, #0]
 801e12c:	4628      	mov	r0, r5
 801e12e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801e132:	f001 f9b1 	bl	801f498 <__d2b>
 801e136:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801e13a:	4683      	mov	fp, r0
 801e13c:	2c00      	cmp	r4, #0
 801e13e:	d07f      	beq.n	801e240 <_dtoa_r+0x1f8>
 801e140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e146:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801e14a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e14e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801e152:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801e156:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801e15a:	2200      	movs	r2, #0
 801e15c:	4b72      	ldr	r3, [pc, #456]	; (801e328 <_dtoa_r+0x2e0>)
 801e15e:	f7e2 f81b 	bl	8000198 <__aeabi_dsub>
 801e162:	a365      	add	r3, pc, #404	; (adr r3, 801e2f8 <_dtoa_r+0x2b0>)
 801e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e168:	f7e2 f9ce 	bl	8000508 <__aeabi_dmul>
 801e16c:	a364      	add	r3, pc, #400	; (adr r3, 801e300 <_dtoa_r+0x2b8>)
 801e16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e172:	f7e2 f813 	bl	800019c <__adddf3>
 801e176:	4606      	mov	r6, r0
 801e178:	4620      	mov	r0, r4
 801e17a:	460f      	mov	r7, r1
 801e17c:	f7e2 f95a 	bl	8000434 <__aeabi_i2d>
 801e180:	a361      	add	r3, pc, #388	; (adr r3, 801e308 <_dtoa_r+0x2c0>)
 801e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e186:	f7e2 f9bf 	bl	8000508 <__aeabi_dmul>
 801e18a:	4602      	mov	r2, r0
 801e18c:	460b      	mov	r3, r1
 801e18e:	4630      	mov	r0, r6
 801e190:	4639      	mov	r1, r7
 801e192:	f7e2 f803 	bl	800019c <__adddf3>
 801e196:	4606      	mov	r6, r0
 801e198:	460f      	mov	r7, r1
 801e19a:	f7e2 fc65 	bl	8000a68 <__aeabi_d2iz>
 801e19e:	2200      	movs	r2, #0
 801e1a0:	4682      	mov	sl, r0
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	4630      	mov	r0, r6
 801e1a6:	4639      	mov	r1, r7
 801e1a8:	f7e2 fc20 	bl	80009ec <__aeabi_dcmplt>
 801e1ac:	b148      	cbz	r0, 801e1c2 <_dtoa_r+0x17a>
 801e1ae:	4650      	mov	r0, sl
 801e1b0:	f7e2 f940 	bl	8000434 <__aeabi_i2d>
 801e1b4:	4632      	mov	r2, r6
 801e1b6:	463b      	mov	r3, r7
 801e1b8:	f7e2 fc0e 	bl	80009d8 <__aeabi_dcmpeq>
 801e1bc:	b908      	cbnz	r0, 801e1c2 <_dtoa_r+0x17a>
 801e1be:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1c2:	f1ba 0f16 	cmp.w	sl, #22
 801e1c6:	d858      	bhi.n	801e27a <_dtoa_r+0x232>
 801e1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e1cc:	4b57      	ldr	r3, [pc, #348]	; (801e32c <_dtoa_r+0x2e4>)
 801e1ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1d6:	f7e2 fc09 	bl	80009ec <__aeabi_dcmplt>
 801e1da:	2800      	cmp	r0, #0
 801e1dc:	d04f      	beq.n	801e27e <_dtoa_r+0x236>
 801e1de:	2300      	movs	r3, #0
 801e1e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e1e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e1e8:	1b1c      	subs	r4, r3, r4
 801e1ea:	1e63      	subs	r3, r4, #1
 801e1ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e1ee:	bf49      	itett	mi
 801e1f0:	f1c4 0301 	rsbmi	r3, r4, #1
 801e1f4:	2300      	movpl	r3, #0
 801e1f6:	9306      	strmi	r3, [sp, #24]
 801e1f8:	2300      	movmi	r3, #0
 801e1fa:	bf54      	ite	pl
 801e1fc:	9306      	strpl	r3, [sp, #24]
 801e1fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 801e200:	f1ba 0f00 	cmp.w	sl, #0
 801e204:	db3d      	blt.n	801e282 <_dtoa_r+0x23a>
 801e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e208:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801e20c:	4453      	add	r3, sl
 801e20e:	9309      	str	r3, [sp, #36]	; 0x24
 801e210:	2300      	movs	r3, #0
 801e212:	930a      	str	r3, [sp, #40]	; 0x28
 801e214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e216:	2b09      	cmp	r3, #9
 801e218:	f200 808c 	bhi.w	801e334 <_dtoa_r+0x2ec>
 801e21c:	2b05      	cmp	r3, #5
 801e21e:	bfc4      	itt	gt
 801e220:	3b04      	subgt	r3, #4
 801e222:	9322      	strgt	r3, [sp, #136]	; 0x88
 801e224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e226:	bfc8      	it	gt
 801e228:	2400      	movgt	r4, #0
 801e22a:	f1a3 0302 	sub.w	r3, r3, #2
 801e22e:	bfd8      	it	le
 801e230:	2401      	movle	r4, #1
 801e232:	2b03      	cmp	r3, #3
 801e234:	f200 808a 	bhi.w	801e34c <_dtoa_r+0x304>
 801e238:	e8df f003 	tbb	[pc, r3]
 801e23c:	5b4d4f2d 	.word	0x5b4d4f2d
 801e240:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801e244:	441c      	add	r4, r3
 801e246:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801e24a:	2b20      	cmp	r3, #32
 801e24c:	bfc3      	ittte	gt
 801e24e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e252:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801e256:	fa09 f303 	lslgt.w	r3, r9, r3
 801e25a:	f1c3 0320 	rsble	r3, r3, #32
 801e25e:	bfc6      	itte	gt
 801e260:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e264:	4318      	orrgt	r0, r3
 801e266:	fa06 f003 	lslle.w	r0, r6, r3
 801e26a:	f7e2 f8d3 	bl	8000414 <__aeabi_ui2d>
 801e26e:	2301      	movs	r3, #1
 801e270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801e274:	3c01      	subs	r4, #1
 801e276:	9313      	str	r3, [sp, #76]	; 0x4c
 801e278:	e76f      	b.n	801e15a <_dtoa_r+0x112>
 801e27a:	2301      	movs	r3, #1
 801e27c:	e7b2      	b.n	801e1e4 <_dtoa_r+0x19c>
 801e27e:	900f      	str	r0, [sp, #60]	; 0x3c
 801e280:	e7b1      	b.n	801e1e6 <_dtoa_r+0x19e>
 801e282:	9b06      	ldr	r3, [sp, #24]
 801e284:	eba3 030a 	sub.w	r3, r3, sl
 801e288:	9306      	str	r3, [sp, #24]
 801e28a:	f1ca 0300 	rsb	r3, sl, #0
 801e28e:	930a      	str	r3, [sp, #40]	; 0x28
 801e290:	2300      	movs	r3, #0
 801e292:	930e      	str	r3, [sp, #56]	; 0x38
 801e294:	e7be      	b.n	801e214 <_dtoa_r+0x1cc>
 801e296:	2300      	movs	r3, #0
 801e298:	930b      	str	r3, [sp, #44]	; 0x2c
 801e29a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	dc58      	bgt.n	801e352 <_dtoa_r+0x30a>
 801e2a0:	f04f 0901 	mov.w	r9, #1
 801e2a4:	464b      	mov	r3, r9
 801e2a6:	f8cd 9020 	str.w	r9, [sp, #32]
 801e2aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801e2b2:	6042      	str	r2, [r0, #4]
 801e2b4:	2204      	movs	r2, #4
 801e2b6:	f102 0614 	add.w	r6, r2, #20
 801e2ba:	429e      	cmp	r6, r3
 801e2bc:	6841      	ldr	r1, [r0, #4]
 801e2be:	d94e      	bls.n	801e35e <_dtoa_r+0x316>
 801e2c0:	4628      	mov	r0, r5
 801e2c2:	f000 fdc3 	bl	801ee4c <_Balloc>
 801e2c6:	9003      	str	r0, [sp, #12]
 801e2c8:	2800      	cmp	r0, #0
 801e2ca:	d14c      	bne.n	801e366 <_dtoa_r+0x31e>
 801e2cc:	4602      	mov	r2, r0
 801e2ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e2d2:	4b17      	ldr	r3, [pc, #92]	; (801e330 <_dtoa_r+0x2e8>)
 801e2d4:	e6cc      	b.n	801e070 <_dtoa_r+0x28>
 801e2d6:	2301      	movs	r3, #1
 801e2d8:	e7de      	b.n	801e298 <_dtoa_r+0x250>
 801e2da:	2300      	movs	r3, #0
 801e2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2e0:	eb0a 0903 	add.w	r9, sl, r3
 801e2e4:	f109 0301 	add.w	r3, r9, #1
 801e2e8:	2b01      	cmp	r3, #1
 801e2ea:	9308      	str	r3, [sp, #32]
 801e2ec:	bfb8      	it	lt
 801e2ee:	2301      	movlt	r3, #1
 801e2f0:	e7dd      	b.n	801e2ae <_dtoa_r+0x266>
 801e2f2:	2301      	movs	r3, #1
 801e2f4:	e7f2      	b.n	801e2dc <_dtoa_r+0x294>
 801e2f6:	bf00      	nop
 801e2f8:	636f4361 	.word	0x636f4361
 801e2fc:	3fd287a7 	.word	0x3fd287a7
 801e300:	8b60c8b3 	.word	0x8b60c8b3
 801e304:	3fc68a28 	.word	0x3fc68a28
 801e308:	509f79fb 	.word	0x509f79fb
 801e30c:	3fd34413 	.word	0x3fd34413
 801e310:	08021e05 	.word	0x08021e05
 801e314:	08021e1c 	.word	0x08021e1c
 801e318:	7ff00000 	.word	0x7ff00000
 801e31c:	08021e01 	.word	0x08021e01
 801e320:	08021df8 	.word	0x08021df8
 801e324:	08021dd5 	.word	0x08021dd5
 801e328:	3ff80000 	.word	0x3ff80000
 801e32c:	08021f70 	.word	0x08021f70
 801e330:	08021e77 	.word	0x08021e77
 801e334:	2401      	movs	r4, #1
 801e336:	2300      	movs	r3, #0
 801e338:	940b      	str	r4, [sp, #44]	; 0x2c
 801e33a:	9322      	str	r3, [sp, #136]	; 0x88
 801e33c:	f04f 39ff 	mov.w	r9, #4294967295
 801e340:	2200      	movs	r2, #0
 801e342:	2312      	movs	r3, #18
 801e344:	f8cd 9020 	str.w	r9, [sp, #32]
 801e348:	9223      	str	r2, [sp, #140]	; 0x8c
 801e34a:	e7b0      	b.n	801e2ae <_dtoa_r+0x266>
 801e34c:	2301      	movs	r3, #1
 801e34e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e350:	e7f4      	b.n	801e33c <_dtoa_r+0x2f4>
 801e352:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801e356:	464b      	mov	r3, r9
 801e358:	f8cd 9020 	str.w	r9, [sp, #32]
 801e35c:	e7a7      	b.n	801e2ae <_dtoa_r+0x266>
 801e35e:	3101      	adds	r1, #1
 801e360:	6041      	str	r1, [r0, #4]
 801e362:	0052      	lsls	r2, r2, #1
 801e364:	e7a7      	b.n	801e2b6 <_dtoa_r+0x26e>
 801e366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e368:	9a03      	ldr	r2, [sp, #12]
 801e36a:	601a      	str	r2, [r3, #0]
 801e36c:	9b08      	ldr	r3, [sp, #32]
 801e36e:	2b0e      	cmp	r3, #14
 801e370:	f200 80a8 	bhi.w	801e4c4 <_dtoa_r+0x47c>
 801e374:	2c00      	cmp	r4, #0
 801e376:	f000 80a5 	beq.w	801e4c4 <_dtoa_r+0x47c>
 801e37a:	f1ba 0f00 	cmp.w	sl, #0
 801e37e:	dd34      	ble.n	801e3ea <_dtoa_r+0x3a2>
 801e380:	4a9a      	ldr	r2, [pc, #616]	; (801e5ec <_dtoa_r+0x5a4>)
 801e382:	f00a 030f 	and.w	r3, sl, #15
 801e386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e38a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e38e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801e396:	ea4f 142a 	mov.w	r4, sl, asr #4
 801e39a:	d016      	beq.n	801e3ca <_dtoa_r+0x382>
 801e39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e3a0:	4b93      	ldr	r3, [pc, #588]	; (801e5f0 <_dtoa_r+0x5a8>)
 801e3a2:	2703      	movs	r7, #3
 801e3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e3a8:	f7e2 f9d8 	bl	800075c <__aeabi_ddiv>
 801e3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e3b0:	f004 040f 	and.w	r4, r4, #15
 801e3b4:	4e8e      	ldr	r6, [pc, #568]	; (801e5f0 <_dtoa_r+0x5a8>)
 801e3b6:	b954      	cbnz	r4, 801e3ce <_dtoa_r+0x386>
 801e3b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e3c0:	f7e2 f9cc 	bl	800075c <__aeabi_ddiv>
 801e3c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e3c8:	e029      	b.n	801e41e <_dtoa_r+0x3d6>
 801e3ca:	2702      	movs	r7, #2
 801e3cc:	e7f2      	b.n	801e3b4 <_dtoa_r+0x36c>
 801e3ce:	07e1      	lsls	r1, r4, #31
 801e3d0:	d508      	bpl.n	801e3e4 <_dtoa_r+0x39c>
 801e3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801e3d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e3da:	f7e2 f895 	bl	8000508 <__aeabi_dmul>
 801e3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e3e2:	3701      	adds	r7, #1
 801e3e4:	1064      	asrs	r4, r4, #1
 801e3e6:	3608      	adds	r6, #8
 801e3e8:	e7e5      	b.n	801e3b6 <_dtoa_r+0x36e>
 801e3ea:	f000 80a5 	beq.w	801e538 <_dtoa_r+0x4f0>
 801e3ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e3f2:	f1ca 0400 	rsb	r4, sl, #0
 801e3f6:	4b7d      	ldr	r3, [pc, #500]	; (801e5ec <_dtoa_r+0x5a4>)
 801e3f8:	f004 020f 	and.w	r2, r4, #15
 801e3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e404:	f7e2 f880 	bl	8000508 <__aeabi_dmul>
 801e408:	2702      	movs	r7, #2
 801e40a:	2300      	movs	r3, #0
 801e40c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e410:	4e77      	ldr	r6, [pc, #476]	; (801e5f0 <_dtoa_r+0x5a8>)
 801e412:	1124      	asrs	r4, r4, #4
 801e414:	2c00      	cmp	r4, #0
 801e416:	f040 8084 	bne.w	801e522 <_dtoa_r+0x4da>
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d1d2      	bne.n	801e3c4 <_dtoa_r+0x37c>
 801e41e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e420:	2b00      	cmp	r3, #0
 801e422:	f000 808b 	beq.w	801e53c <_dtoa_r+0x4f4>
 801e426:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801e42a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801e42e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801e432:	2200      	movs	r2, #0
 801e434:	4b6f      	ldr	r3, [pc, #444]	; (801e5f4 <_dtoa_r+0x5ac>)
 801e436:	f7e2 fad9 	bl	80009ec <__aeabi_dcmplt>
 801e43a:	2800      	cmp	r0, #0
 801e43c:	d07e      	beq.n	801e53c <_dtoa_r+0x4f4>
 801e43e:	9b08      	ldr	r3, [sp, #32]
 801e440:	2b00      	cmp	r3, #0
 801e442:	d07b      	beq.n	801e53c <_dtoa_r+0x4f4>
 801e444:	f1b9 0f00 	cmp.w	r9, #0
 801e448:	dd38      	ble.n	801e4bc <_dtoa_r+0x474>
 801e44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801e44e:	2200      	movs	r2, #0
 801e450:	4b69      	ldr	r3, [pc, #420]	; (801e5f8 <_dtoa_r+0x5b0>)
 801e452:	f7e2 f859 	bl	8000508 <__aeabi_dmul>
 801e456:	464c      	mov	r4, r9
 801e458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e45c:	f10a 38ff 	add.w	r8, sl, #4294967295
 801e460:	3701      	adds	r7, #1
 801e462:	4638      	mov	r0, r7
 801e464:	f7e1 ffe6 	bl	8000434 <__aeabi_i2d>
 801e468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e46c:	f7e2 f84c 	bl	8000508 <__aeabi_dmul>
 801e470:	2200      	movs	r2, #0
 801e472:	4b62      	ldr	r3, [pc, #392]	; (801e5fc <_dtoa_r+0x5b4>)
 801e474:	f7e1 fe92 	bl	800019c <__adddf3>
 801e478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801e47c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e480:	9611      	str	r6, [sp, #68]	; 0x44
 801e482:	2c00      	cmp	r4, #0
 801e484:	d15d      	bne.n	801e542 <_dtoa_r+0x4fa>
 801e486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e48a:	2200      	movs	r2, #0
 801e48c:	4b5c      	ldr	r3, [pc, #368]	; (801e600 <_dtoa_r+0x5b8>)
 801e48e:	f7e1 fe83 	bl	8000198 <__aeabi_dsub>
 801e492:	4602      	mov	r2, r0
 801e494:	460b      	mov	r3, r1
 801e496:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e49a:	4633      	mov	r3, r6
 801e49c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e49e:	f7e2 fac3 	bl	8000a28 <__aeabi_dcmpgt>
 801e4a2:	2800      	cmp	r0, #0
 801e4a4:	f040 829c 	bne.w	801e9e0 <_dtoa_r+0x998>
 801e4a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e4ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801e4b2:	f7e2 fa9b 	bl	80009ec <__aeabi_dcmplt>
 801e4b6:	2800      	cmp	r0, #0
 801e4b8:	f040 8290 	bne.w	801e9dc <_dtoa_r+0x994>
 801e4bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 801e4c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f2c0 8152 	blt.w	801e770 <_dtoa_r+0x728>
 801e4cc:	f1ba 0f0e 	cmp.w	sl, #14
 801e4d0:	f300 814e 	bgt.w	801e770 <_dtoa_r+0x728>
 801e4d4:	4b45      	ldr	r3, [pc, #276]	; (801e5ec <_dtoa_r+0x5a4>)
 801e4d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e4da:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e4de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801e4e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	f280 80db 	bge.w	801e6a0 <_dtoa_r+0x658>
 801e4ea:	9b08      	ldr	r3, [sp, #32]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	f300 80d7 	bgt.w	801e6a0 <_dtoa_r+0x658>
 801e4f2:	f040 8272 	bne.w	801e9da <_dtoa_r+0x992>
 801e4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e4fa:	2200      	movs	r2, #0
 801e4fc:	4b40      	ldr	r3, [pc, #256]	; (801e600 <_dtoa_r+0x5b8>)
 801e4fe:	f7e2 f803 	bl	8000508 <__aeabi_dmul>
 801e502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e506:	f7e2 fa85 	bl	8000a14 <__aeabi_dcmpge>
 801e50a:	9c08      	ldr	r4, [sp, #32]
 801e50c:	4626      	mov	r6, r4
 801e50e:	2800      	cmp	r0, #0
 801e510:	f040 8248 	bne.w	801e9a4 <_dtoa_r+0x95c>
 801e514:	2331      	movs	r3, #49	; 0x31
 801e516:	9f03      	ldr	r7, [sp, #12]
 801e518:	f10a 0a01 	add.w	sl, sl, #1
 801e51c:	f807 3b01 	strb.w	r3, [r7], #1
 801e520:	e244      	b.n	801e9ac <_dtoa_r+0x964>
 801e522:	07e2      	lsls	r2, r4, #31
 801e524:	d505      	bpl.n	801e532 <_dtoa_r+0x4ea>
 801e526:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e52a:	f7e1 ffed 	bl	8000508 <__aeabi_dmul>
 801e52e:	2301      	movs	r3, #1
 801e530:	3701      	adds	r7, #1
 801e532:	1064      	asrs	r4, r4, #1
 801e534:	3608      	adds	r6, #8
 801e536:	e76d      	b.n	801e414 <_dtoa_r+0x3cc>
 801e538:	2702      	movs	r7, #2
 801e53a:	e770      	b.n	801e41e <_dtoa_r+0x3d6>
 801e53c:	46d0      	mov	r8, sl
 801e53e:	9c08      	ldr	r4, [sp, #32]
 801e540:	e78f      	b.n	801e462 <_dtoa_r+0x41a>
 801e542:	9903      	ldr	r1, [sp, #12]
 801e544:	4b29      	ldr	r3, [pc, #164]	; (801e5ec <_dtoa_r+0x5a4>)
 801e546:	4421      	add	r1, r4
 801e548:	9112      	str	r1, [sp, #72]	; 0x48
 801e54a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e550:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801e554:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e558:	2900      	cmp	r1, #0
 801e55a:	d055      	beq.n	801e608 <_dtoa_r+0x5c0>
 801e55c:	2000      	movs	r0, #0
 801e55e:	4929      	ldr	r1, [pc, #164]	; (801e604 <_dtoa_r+0x5bc>)
 801e560:	f7e2 f8fc 	bl	800075c <__aeabi_ddiv>
 801e564:	463b      	mov	r3, r7
 801e566:	4632      	mov	r2, r6
 801e568:	f7e1 fe16 	bl	8000198 <__aeabi_dsub>
 801e56c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e570:	9f03      	ldr	r7, [sp, #12]
 801e572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e576:	f7e2 fa77 	bl	8000a68 <__aeabi_d2iz>
 801e57a:	4604      	mov	r4, r0
 801e57c:	f7e1 ff5a 	bl	8000434 <__aeabi_i2d>
 801e580:	4602      	mov	r2, r0
 801e582:	460b      	mov	r3, r1
 801e584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e588:	f7e1 fe06 	bl	8000198 <__aeabi_dsub>
 801e58c:	4602      	mov	r2, r0
 801e58e:	460b      	mov	r3, r1
 801e590:	3430      	adds	r4, #48	; 0x30
 801e592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e59a:	f807 4b01 	strb.w	r4, [r7], #1
 801e59e:	f7e2 fa25 	bl	80009ec <__aeabi_dcmplt>
 801e5a2:	2800      	cmp	r0, #0
 801e5a4:	d174      	bne.n	801e690 <_dtoa_r+0x648>
 801e5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e5aa:	2000      	movs	r0, #0
 801e5ac:	4911      	ldr	r1, [pc, #68]	; (801e5f4 <_dtoa_r+0x5ac>)
 801e5ae:	f7e1 fdf3 	bl	8000198 <__aeabi_dsub>
 801e5b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e5b6:	f7e2 fa19 	bl	80009ec <__aeabi_dcmplt>
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	f040 80b7 	bne.w	801e72e <_dtoa_r+0x6e6>
 801e5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e5c2:	429f      	cmp	r7, r3
 801e5c4:	f43f af7a 	beq.w	801e4bc <_dtoa_r+0x474>
 801e5c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	4b0a      	ldr	r3, [pc, #40]	; (801e5f8 <_dtoa_r+0x5b0>)
 801e5d0:	f7e1 ff9a 	bl	8000508 <__aeabi_dmul>
 801e5d4:	2200      	movs	r2, #0
 801e5d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e5de:	4b06      	ldr	r3, [pc, #24]	; (801e5f8 <_dtoa_r+0x5b0>)
 801e5e0:	f7e1 ff92 	bl	8000508 <__aeabi_dmul>
 801e5e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e5e8:	e7c3      	b.n	801e572 <_dtoa_r+0x52a>
 801e5ea:	bf00      	nop
 801e5ec:	08021f70 	.word	0x08021f70
 801e5f0:	08021f48 	.word	0x08021f48
 801e5f4:	3ff00000 	.word	0x3ff00000
 801e5f8:	40240000 	.word	0x40240000
 801e5fc:	401c0000 	.word	0x401c0000
 801e600:	40140000 	.word	0x40140000
 801e604:	3fe00000 	.word	0x3fe00000
 801e608:	4630      	mov	r0, r6
 801e60a:	4639      	mov	r1, r7
 801e60c:	f7e1 ff7c 	bl	8000508 <__aeabi_dmul>
 801e610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e616:	9c03      	ldr	r4, [sp, #12]
 801e618:	9314      	str	r3, [sp, #80]	; 0x50
 801e61a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e61e:	f7e2 fa23 	bl	8000a68 <__aeabi_d2iz>
 801e622:	9015      	str	r0, [sp, #84]	; 0x54
 801e624:	f7e1 ff06 	bl	8000434 <__aeabi_i2d>
 801e628:	4602      	mov	r2, r0
 801e62a:	460b      	mov	r3, r1
 801e62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e630:	f7e1 fdb2 	bl	8000198 <__aeabi_dsub>
 801e634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e636:	4606      	mov	r6, r0
 801e638:	3330      	adds	r3, #48	; 0x30
 801e63a:	f804 3b01 	strb.w	r3, [r4], #1
 801e63e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e640:	460f      	mov	r7, r1
 801e642:	429c      	cmp	r4, r3
 801e644:	f04f 0200 	mov.w	r2, #0
 801e648:	d124      	bne.n	801e694 <_dtoa_r+0x64c>
 801e64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801e64e:	4bb0      	ldr	r3, [pc, #704]	; (801e910 <_dtoa_r+0x8c8>)
 801e650:	f7e1 fda4 	bl	800019c <__adddf3>
 801e654:	4602      	mov	r2, r0
 801e656:	460b      	mov	r3, r1
 801e658:	4630      	mov	r0, r6
 801e65a:	4639      	mov	r1, r7
 801e65c:	f7e2 f9e4 	bl	8000a28 <__aeabi_dcmpgt>
 801e660:	2800      	cmp	r0, #0
 801e662:	d163      	bne.n	801e72c <_dtoa_r+0x6e4>
 801e664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e668:	2000      	movs	r0, #0
 801e66a:	49a9      	ldr	r1, [pc, #676]	; (801e910 <_dtoa_r+0x8c8>)
 801e66c:	f7e1 fd94 	bl	8000198 <__aeabi_dsub>
 801e670:	4602      	mov	r2, r0
 801e672:	460b      	mov	r3, r1
 801e674:	4630      	mov	r0, r6
 801e676:	4639      	mov	r1, r7
 801e678:	f7e2 f9b8 	bl	80009ec <__aeabi_dcmplt>
 801e67c:	2800      	cmp	r0, #0
 801e67e:	f43f af1d 	beq.w	801e4bc <_dtoa_r+0x474>
 801e682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e684:	1e7b      	subs	r3, r7, #1
 801e686:	9314      	str	r3, [sp, #80]	; 0x50
 801e688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801e68c:	2b30      	cmp	r3, #48	; 0x30
 801e68e:	d0f8      	beq.n	801e682 <_dtoa_r+0x63a>
 801e690:	46c2      	mov	sl, r8
 801e692:	e03b      	b.n	801e70c <_dtoa_r+0x6c4>
 801e694:	4b9f      	ldr	r3, [pc, #636]	; (801e914 <_dtoa_r+0x8cc>)
 801e696:	f7e1 ff37 	bl	8000508 <__aeabi_dmul>
 801e69a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e69e:	e7bc      	b.n	801e61a <_dtoa_r+0x5d2>
 801e6a0:	9f03      	ldr	r7, [sp, #12]
 801e6a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e6aa:	4640      	mov	r0, r8
 801e6ac:	4649      	mov	r1, r9
 801e6ae:	f7e2 f855 	bl	800075c <__aeabi_ddiv>
 801e6b2:	f7e2 f9d9 	bl	8000a68 <__aeabi_d2iz>
 801e6b6:	4604      	mov	r4, r0
 801e6b8:	f7e1 febc 	bl	8000434 <__aeabi_i2d>
 801e6bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e6c0:	f7e1 ff22 	bl	8000508 <__aeabi_dmul>
 801e6c4:	4602      	mov	r2, r0
 801e6c6:	460b      	mov	r3, r1
 801e6c8:	4640      	mov	r0, r8
 801e6ca:	4649      	mov	r1, r9
 801e6cc:	f7e1 fd64 	bl	8000198 <__aeabi_dsub>
 801e6d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801e6d4:	f807 6b01 	strb.w	r6, [r7], #1
 801e6d8:	9e03      	ldr	r6, [sp, #12]
 801e6da:	f8dd c020 	ldr.w	ip, [sp, #32]
 801e6de:	1bbe      	subs	r6, r7, r6
 801e6e0:	45b4      	cmp	ip, r6
 801e6e2:	4602      	mov	r2, r0
 801e6e4:	460b      	mov	r3, r1
 801e6e6:	d136      	bne.n	801e756 <_dtoa_r+0x70e>
 801e6e8:	f7e1 fd58 	bl	800019c <__adddf3>
 801e6ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e6f0:	4680      	mov	r8, r0
 801e6f2:	4689      	mov	r9, r1
 801e6f4:	f7e2 f998 	bl	8000a28 <__aeabi_dcmpgt>
 801e6f8:	bb58      	cbnz	r0, 801e752 <_dtoa_r+0x70a>
 801e6fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e6fe:	4640      	mov	r0, r8
 801e700:	4649      	mov	r1, r9
 801e702:	f7e2 f969 	bl	80009d8 <__aeabi_dcmpeq>
 801e706:	b108      	cbz	r0, 801e70c <_dtoa_r+0x6c4>
 801e708:	07e1      	lsls	r1, r4, #31
 801e70a:	d422      	bmi.n	801e752 <_dtoa_r+0x70a>
 801e70c:	4628      	mov	r0, r5
 801e70e:	4659      	mov	r1, fp
 801e710:	f000 fbdc 	bl	801eecc <_Bfree>
 801e714:	2300      	movs	r3, #0
 801e716:	703b      	strb	r3, [r7, #0]
 801e718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e71a:	f10a 0001 	add.w	r0, sl, #1
 801e71e:	6018      	str	r0, [r3, #0]
 801e720:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e722:	2b00      	cmp	r3, #0
 801e724:	f43f acde 	beq.w	801e0e4 <_dtoa_r+0x9c>
 801e728:	601f      	str	r7, [r3, #0]
 801e72a:	e4db      	b.n	801e0e4 <_dtoa_r+0x9c>
 801e72c:	4627      	mov	r7, r4
 801e72e:	463b      	mov	r3, r7
 801e730:	461f      	mov	r7, r3
 801e732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e736:	2a39      	cmp	r2, #57	; 0x39
 801e738:	d107      	bne.n	801e74a <_dtoa_r+0x702>
 801e73a:	9a03      	ldr	r2, [sp, #12]
 801e73c:	429a      	cmp	r2, r3
 801e73e:	d1f7      	bne.n	801e730 <_dtoa_r+0x6e8>
 801e740:	2230      	movs	r2, #48	; 0x30
 801e742:	9903      	ldr	r1, [sp, #12]
 801e744:	f108 0801 	add.w	r8, r8, #1
 801e748:	700a      	strb	r2, [r1, #0]
 801e74a:	781a      	ldrb	r2, [r3, #0]
 801e74c:	3201      	adds	r2, #1
 801e74e:	701a      	strb	r2, [r3, #0]
 801e750:	e79e      	b.n	801e690 <_dtoa_r+0x648>
 801e752:	46d0      	mov	r8, sl
 801e754:	e7eb      	b.n	801e72e <_dtoa_r+0x6e6>
 801e756:	2200      	movs	r2, #0
 801e758:	4b6e      	ldr	r3, [pc, #440]	; (801e914 <_dtoa_r+0x8cc>)
 801e75a:	f7e1 fed5 	bl	8000508 <__aeabi_dmul>
 801e75e:	2200      	movs	r2, #0
 801e760:	2300      	movs	r3, #0
 801e762:	4680      	mov	r8, r0
 801e764:	4689      	mov	r9, r1
 801e766:	f7e2 f937 	bl	80009d8 <__aeabi_dcmpeq>
 801e76a:	2800      	cmp	r0, #0
 801e76c:	d09b      	beq.n	801e6a6 <_dtoa_r+0x65e>
 801e76e:	e7cd      	b.n	801e70c <_dtoa_r+0x6c4>
 801e770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e772:	2a00      	cmp	r2, #0
 801e774:	f000 80d0 	beq.w	801e918 <_dtoa_r+0x8d0>
 801e778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e77a:	2a01      	cmp	r2, #1
 801e77c:	f300 80ae 	bgt.w	801e8dc <_dtoa_r+0x894>
 801e780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e782:	2a00      	cmp	r2, #0
 801e784:	f000 80a6 	beq.w	801e8d4 <_dtoa_r+0x88c>
 801e788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e78c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e78e:	9f06      	ldr	r7, [sp, #24]
 801e790:	9a06      	ldr	r2, [sp, #24]
 801e792:	2101      	movs	r1, #1
 801e794:	441a      	add	r2, r3
 801e796:	9206      	str	r2, [sp, #24]
 801e798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e79a:	4628      	mov	r0, r5
 801e79c:	441a      	add	r2, r3
 801e79e:	9209      	str	r2, [sp, #36]	; 0x24
 801e7a0:	f000 fc4a 	bl	801f038 <__i2b>
 801e7a4:	4606      	mov	r6, r0
 801e7a6:	2f00      	cmp	r7, #0
 801e7a8:	dd0c      	ble.n	801e7c4 <_dtoa_r+0x77c>
 801e7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	dd09      	ble.n	801e7c4 <_dtoa_r+0x77c>
 801e7b0:	42bb      	cmp	r3, r7
 801e7b2:	bfa8      	it	ge
 801e7b4:	463b      	movge	r3, r7
 801e7b6:	9a06      	ldr	r2, [sp, #24]
 801e7b8:	1aff      	subs	r7, r7, r3
 801e7ba:	1ad2      	subs	r2, r2, r3
 801e7bc:	9206      	str	r2, [sp, #24]
 801e7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e7c0:	1ad3      	subs	r3, r2, r3
 801e7c2:	9309      	str	r3, [sp, #36]	; 0x24
 801e7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7c6:	b1f3      	cbz	r3, 801e806 <_dtoa_r+0x7be>
 801e7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	f000 80a8 	beq.w	801e920 <_dtoa_r+0x8d8>
 801e7d0:	2c00      	cmp	r4, #0
 801e7d2:	dd10      	ble.n	801e7f6 <_dtoa_r+0x7ae>
 801e7d4:	4631      	mov	r1, r6
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	4628      	mov	r0, r5
 801e7da:	f000 fceb 	bl	801f1b4 <__pow5mult>
 801e7de:	465a      	mov	r2, fp
 801e7e0:	4601      	mov	r1, r0
 801e7e2:	4606      	mov	r6, r0
 801e7e4:	4628      	mov	r0, r5
 801e7e6:	f000 fc3d 	bl	801f064 <__multiply>
 801e7ea:	4680      	mov	r8, r0
 801e7ec:	4659      	mov	r1, fp
 801e7ee:	4628      	mov	r0, r5
 801e7f0:	f000 fb6c 	bl	801eecc <_Bfree>
 801e7f4:	46c3      	mov	fp, r8
 801e7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7f8:	1b1a      	subs	r2, r3, r4
 801e7fa:	d004      	beq.n	801e806 <_dtoa_r+0x7be>
 801e7fc:	4659      	mov	r1, fp
 801e7fe:	4628      	mov	r0, r5
 801e800:	f000 fcd8 	bl	801f1b4 <__pow5mult>
 801e804:	4683      	mov	fp, r0
 801e806:	2101      	movs	r1, #1
 801e808:	4628      	mov	r0, r5
 801e80a:	f000 fc15 	bl	801f038 <__i2b>
 801e80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e810:	4604      	mov	r4, r0
 801e812:	2b00      	cmp	r3, #0
 801e814:	f340 8086 	ble.w	801e924 <_dtoa_r+0x8dc>
 801e818:	461a      	mov	r2, r3
 801e81a:	4601      	mov	r1, r0
 801e81c:	4628      	mov	r0, r5
 801e81e:	f000 fcc9 	bl	801f1b4 <__pow5mult>
 801e822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e824:	4604      	mov	r4, r0
 801e826:	2b01      	cmp	r3, #1
 801e828:	dd7f      	ble.n	801e92a <_dtoa_r+0x8e2>
 801e82a:	f04f 0800 	mov.w	r8, #0
 801e82e:	6923      	ldr	r3, [r4, #16]
 801e830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e834:	6918      	ldr	r0, [r3, #16]
 801e836:	f000 fbb1 	bl	801ef9c <__hi0bits>
 801e83a:	f1c0 0020 	rsb	r0, r0, #32
 801e83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e840:	4418      	add	r0, r3
 801e842:	f010 001f 	ands.w	r0, r0, #31
 801e846:	f000 8092 	beq.w	801e96e <_dtoa_r+0x926>
 801e84a:	f1c0 0320 	rsb	r3, r0, #32
 801e84e:	2b04      	cmp	r3, #4
 801e850:	f340 808a 	ble.w	801e968 <_dtoa_r+0x920>
 801e854:	f1c0 001c 	rsb	r0, r0, #28
 801e858:	9b06      	ldr	r3, [sp, #24]
 801e85a:	4407      	add	r7, r0
 801e85c:	4403      	add	r3, r0
 801e85e:	9306      	str	r3, [sp, #24]
 801e860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e862:	4403      	add	r3, r0
 801e864:	9309      	str	r3, [sp, #36]	; 0x24
 801e866:	9b06      	ldr	r3, [sp, #24]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	dd05      	ble.n	801e878 <_dtoa_r+0x830>
 801e86c:	4659      	mov	r1, fp
 801e86e:	461a      	mov	r2, r3
 801e870:	4628      	mov	r0, r5
 801e872:	f000 fcf9 	bl	801f268 <__lshift>
 801e876:	4683      	mov	fp, r0
 801e878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	dd05      	ble.n	801e88a <_dtoa_r+0x842>
 801e87e:	4621      	mov	r1, r4
 801e880:	461a      	mov	r2, r3
 801e882:	4628      	mov	r0, r5
 801e884:	f000 fcf0 	bl	801f268 <__lshift>
 801e888:	4604      	mov	r4, r0
 801e88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d070      	beq.n	801e972 <_dtoa_r+0x92a>
 801e890:	4621      	mov	r1, r4
 801e892:	4658      	mov	r0, fp
 801e894:	f000 fd58 	bl	801f348 <__mcmp>
 801e898:	2800      	cmp	r0, #0
 801e89a:	da6a      	bge.n	801e972 <_dtoa_r+0x92a>
 801e89c:	2300      	movs	r3, #0
 801e89e:	4659      	mov	r1, fp
 801e8a0:	220a      	movs	r2, #10
 801e8a2:	4628      	mov	r0, r5
 801e8a4:	f000 fb34 	bl	801ef10 <__multadd>
 801e8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8aa:	4683      	mov	fp, r0
 801e8ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	f000 8194 	beq.w	801ebde <_dtoa_r+0xb96>
 801e8b6:	4631      	mov	r1, r6
 801e8b8:	2300      	movs	r3, #0
 801e8ba:	220a      	movs	r2, #10
 801e8bc:	4628      	mov	r0, r5
 801e8be:	f000 fb27 	bl	801ef10 <__multadd>
 801e8c2:	f1b9 0f00 	cmp.w	r9, #0
 801e8c6:	4606      	mov	r6, r0
 801e8c8:	f300 8093 	bgt.w	801e9f2 <_dtoa_r+0x9aa>
 801e8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e8ce:	2b02      	cmp	r3, #2
 801e8d0:	dc57      	bgt.n	801e982 <_dtoa_r+0x93a>
 801e8d2:	e08e      	b.n	801e9f2 <_dtoa_r+0x9aa>
 801e8d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e8d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e8da:	e757      	b.n	801e78c <_dtoa_r+0x744>
 801e8dc:	9b08      	ldr	r3, [sp, #32]
 801e8de:	1e5c      	subs	r4, r3, #1
 801e8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8e2:	42a3      	cmp	r3, r4
 801e8e4:	bfb7      	itett	lt
 801e8e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801e8e8:	1b1c      	subge	r4, r3, r4
 801e8ea:	1ae2      	sublt	r2, r4, r3
 801e8ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801e8ee:	bfbe      	ittt	lt
 801e8f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 801e8f2:	189b      	addlt	r3, r3, r2
 801e8f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e8f6:	9b08      	ldr	r3, [sp, #32]
 801e8f8:	bfb8      	it	lt
 801e8fa:	2400      	movlt	r4, #0
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	bfbb      	ittet	lt
 801e900:	9b06      	ldrlt	r3, [sp, #24]
 801e902:	9a08      	ldrlt	r2, [sp, #32]
 801e904:	9f06      	ldrge	r7, [sp, #24]
 801e906:	1a9f      	sublt	r7, r3, r2
 801e908:	bfac      	ite	ge
 801e90a:	9b08      	ldrge	r3, [sp, #32]
 801e90c:	2300      	movlt	r3, #0
 801e90e:	e73f      	b.n	801e790 <_dtoa_r+0x748>
 801e910:	3fe00000 	.word	0x3fe00000
 801e914:	40240000 	.word	0x40240000
 801e918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e91a:	9f06      	ldr	r7, [sp, #24]
 801e91c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e91e:	e742      	b.n	801e7a6 <_dtoa_r+0x75e>
 801e920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e922:	e76b      	b.n	801e7fc <_dtoa_r+0x7b4>
 801e924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e926:	2b01      	cmp	r3, #1
 801e928:	dc19      	bgt.n	801e95e <_dtoa_r+0x916>
 801e92a:	9b04      	ldr	r3, [sp, #16]
 801e92c:	b9bb      	cbnz	r3, 801e95e <_dtoa_r+0x916>
 801e92e:	9b05      	ldr	r3, [sp, #20]
 801e930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e934:	b99b      	cbnz	r3, 801e95e <_dtoa_r+0x916>
 801e936:	9b05      	ldr	r3, [sp, #20]
 801e938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e93c:	0d1b      	lsrs	r3, r3, #20
 801e93e:	051b      	lsls	r3, r3, #20
 801e940:	b183      	cbz	r3, 801e964 <_dtoa_r+0x91c>
 801e942:	f04f 0801 	mov.w	r8, #1
 801e946:	9b06      	ldr	r3, [sp, #24]
 801e948:	3301      	adds	r3, #1
 801e94a:	9306      	str	r3, [sp, #24]
 801e94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e94e:	3301      	adds	r3, #1
 801e950:	9309      	str	r3, [sp, #36]	; 0x24
 801e952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e954:	2b00      	cmp	r3, #0
 801e956:	f47f af6a 	bne.w	801e82e <_dtoa_r+0x7e6>
 801e95a:	2001      	movs	r0, #1
 801e95c:	e76f      	b.n	801e83e <_dtoa_r+0x7f6>
 801e95e:	f04f 0800 	mov.w	r8, #0
 801e962:	e7f6      	b.n	801e952 <_dtoa_r+0x90a>
 801e964:	4698      	mov	r8, r3
 801e966:	e7f4      	b.n	801e952 <_dtoa_r+0x90a>
 801e968:	f43f af7d 	beq.w	801e866 <_dtoa_r+0x81e>
 801e96c:	4618      	mov	r0, r3
 801e96e:	301c      	adds	r0, #28
 801e970:	e772      	b.n	801e858 <_dtoa_r+0x810>
 801e972:	9b08      	ldr	r3, [sp, #32]
 801e974:	2b00      	cmp	r3, #0
 801e976:	dc36      	bgt.n	801e9e6 <_dtoa_r+0x99e>
 801e978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e97a:	2b02      	cmp	r3, #2
 801e97c:	dd33      	ble.n	801e9e6 <_dtoa_r+0x99e>
 801e97e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e982:	f1b9 0f00 	cmp.w	r9, #0
 801e986:	d10d      	bne.n	801e9a4 <_dtoa_r+0x95c>
 801e988:	4621      	mov	r1, r4
 801e98a:	464b      	mov	r3, r9
 801e98c:	2205      	movs	r2, #5
 801e98e:	4628      	mov	r0, r5
 801e990:	f000 fabe 	bl	801ef10 <__multadd>
 801e994:	4601      	mov	r1, r0
 801e996:	4604      	mov	r4, r0
 801e998:	4658      	mov	r0, fp
 801e99a:	f000 fcd5 	bl	801f348 <__mcmp>
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	f73f adb8 	bgt.w	801e514 <_dtoa_r+0x4cc>
 801e9a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e9a6:	9f03      	ldr	r7, [sp, #12]
 801e9a8:	ea6f 0a03 	mvn.w	sl, r3
 801e9ac:	f04f 0800 	mov.w	r8, #0
 801e9b0:	4621      	mov	r1, r4
 801e9b2:	4628      	mov	r0, r5
 801e9b4:	f000 fa8a 	bl	801eecc <_Bfree>
 801e9b8:	2e00      	cmp	r6, #0
 801e9ba:	f43f aea7 	beq.w	801e70c <_dtoa_r+0x6c4>
 801e9be:	f1b8 0f00 	cmp.w	r8, #0
 801e9c2:	d005      	beq.n	801e9d0 <_dtoa_r+0x988>
 801e9c4:	45b0      	cmp	r8, r6
 801e9c6:	d003      	beq.n	801e9d0 <_dtoa_r+0x988>
 801e9c8:	4641      	mov	r1, r8
 801e9ca:	4628      	mov	r0, r5
 801e9cc:	f000 fa7e 	bl	801eecc <_Bfree>
 801e9d0:	4631      	mov	r1, r6
 801e9d2:	4628      	mov	r0, r5
 801e9d4:	f000 fa7a 	bl	801eecc <_Bfree>
 801e9d8:	e698      	b.n	801e70c <_dtoa_r+0x6c4>
 801e9da:	2400      	movs	r4, #0
 801e9dc:	4626      	mov	r6, r4
 801e9de:	e7e1      	b.n	801e9a4 <_dtoa_r+0x95c>
 801e9e0:	46c2      	mov	sl, r8
 801e9e2:	4626      	mov	r6, r4
 801e9e4:	e596      	b.n	801e514 <_dtoa_r+0x4cc>
 801e9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	f000 80fd 	beq.w	801ebec <_dtoa_r+0xba4>
 801e9f2:	2f00      	cmp	r7, #0
 801e9f4:	dd05      	ble.n	801ea02 <_dtoa_r+0x9ba>
 801e9f6:	4631      	mov	r1, r6
 801e9f8:	463a      	mov	r2, r7
 801e9fa:	4628      	mov	r0, r5
 801e9fc:	f000 fc34 	bl	801f268 <__lshift>
 801ea00:	4606      	mov	r6, r0
 801ea02:	f1b8 0f00 	cmp.w	r8, #0
 801ea06:	d05c      	beq.n	801eac2 <_dtoa_r+0xa7a>
 801ea08:	4628      	mov	r0, r5
 801ea0a:	6871      	ldr	r1, [r6, #4]
 801ea0c:	f000 fa1e 	bl	801ee4c <_Balloc>
 801ea10:	4607      	mov	r7, r0
 801ea12:	b928      	cbnz	r0, 801ea20 <_dtoa_r+0x9d8>
 801ea14:	4602      	mov	r2, r0
 801ea16:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ea1a:	4b7f      	ldr	r3, [pc, #508]	; (801ec18 <_dtoa_r+0xbd0>)
 801ea1c:	f7ff bb28 	b.w	801e070 <_dtoa_r+0x28>
 801ea20:	6932      	ldr	r2, [r6, #16]
 801ea22:	f106 010c 	add.w	r1, r6, #12
 801ea26:	3202      	adds	r2, #2
 801ea28:	0092      	lsls	r2, r2, #2
 801ea2a:	300c      	adds	r0, #12
 801ea2c:	f7fe fd7c 	bl	801d528 <memcpy>
 801ea30:	2201      	movs	r2, #1
 801ea32:	4639      	mov	r1, r7
 801ea34:	4628      	mov	r0, r5
 801ea36:	f000 fc17 	bl	801f268 <__lshift>
 801ea3a:	46b0      	mov	r8, r6
 801ea3c:	4606      	mov	r6, r0
 801ea3e:	9b03      	ldr	r3, [sp, #12]
 801ea40:	3301      	adds	r3, #1
 801ea42:	9308      	str	r3, [sp, #32]
 801ea44:	9b03      	ldr	r3, [sp, #12]
 801ea46:	444b      	add	r3, r9
 801ea48:	930a      	str	r3, [sp, #40]	; 0x28
 801ea4a:	9b04      	ldr	r3, [sp, #16]
 801ea4c:	f003 0301 	and.w	r3, r3, #1
 801ea50:	9309      	str	r3, [sp, #36]	; 0x24
 801ea52:	9b08      	ldr	r3, [sp, #32]
 801ea54:	4621      	mov	r1, r4
 801ea56:	3b01      	subs	r3, #1
 801ea58:	4658      	mov	r0, fp
 801ea5a:	9304      	str	r3, [sp, #16]
 801ea5c:	f7ff fa66 	bl	801df2c <quorem>
 801ea60:	4603      	mov	r3, r0
 801ea62:	4641      	mov	r1, r8
 801ea64:	3330      	adds	r3, #48	; 0x30
 801ea66:	9006      	str	r0, [sp, #24]
 801ea68:	4658      	mov	r0, fp
 801ea6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea6c:	f000 fc6c 	bl	801f348 <__mcmp>
 801ea70:	4632      	mov	r2, r6
 801ea72:	4681      	mov	r9, r0
 801ea74:	4621      	mov	r1, r4
 801ea76:	4628      	mov	r0, r5
 801ea78:	f000 fc82 	bl	801f380 <__mdiff>
 801ea7c:	68c2      	ldr	r2, [r0, #12]
 801ea7e:	4607      	mov	r7, r0
 801ea80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea82:	bb02      	cbnz	r2, 801eac6 <_dtoa_r+0xa7e>
 801ea84:	4601      	mov	r1, r0
 801ea86:	4658      	mov	r0, fp
 801ea88:	f000 fc5e 	bl	801f348 <__mcmp>
 801ea8c:	4602      	mov	r2, r0
 801ea8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea90:	4639      	mov	r1, r7
 801ea92:	4628      	mov	r0, r5
 801ea94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801ea98:	f000 fa18 	bl	801eecc <_Bfree>
 801ea9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ea9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eaa0:	9f08      	ldr	r7, [sp, #32]
 801eaa2:	ea43 0102 	orr.w	r1, r3, r2
 801eaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaa8:	430b      	orrs	r3, r1
 801eaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaac:	d10d      	bne.n	801eaca <_dtoa_r+0xa82>
 801eaae:	2b39      	cmp	r3, #57	; 0x39
 801eab0:	d029      	beq.n	801eb06 <_dtoa_r+0xabe>
 801eab2:	f1b9 0f00 	cmp.w	r9, #0
 801eab6:	dd01      	ble.n	801eabc <_dtoa_r+0xa74>
 801eab8:	9b06      	ldr	r3, [sp, #24]
 801eaba:	3331      	adds	r3, #49	; 0x31
 801eabc:	9a04      	ldr	r2, [sp, #16]
 801eabe:	7013      	strb	r3, [r2, #0]
 801eac0:	e776      	b.n	801e9b0 <_dtoa_r+0x968>
 801eac2:	4630      	mov	r0, r6
 801eac4:	e7b9      	b.n	801ea3a <_dtoa_r+0x9f2>
 801eac6:	2201      	movs	r2, #1
 801eac8:	e7e2      	b.n	801ea90 <_dtoa_r+0xa48>
 801eaca:	f1b9 0f00 	cmp.w	r9, #0
 801eace:	db06      	blt.n	801eade <_dtoa_r+0xa96>
 801ead0:	9922      	ldr	r1, [sp, #136]	; 0x88
 801ead2:	ea41 0909 	orr.w	r9, r1, r9
 801ead6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ead8:	ea59 0101 	orrs.w	r1, r9, r1
 801eadc:	d120      	bne.n	801eb20 <_dtoa_r+0xad8>
 801eade:	2a00      	cmp	r2, #0
 801eae0:	ddec      	ble.n	801eabc <_dtoa_r+0xa74>
 801eae2:	4659      	mov	r1, fp
 801eae4:	2201      	movs	r2, #1
 801eae6:	4628      	mov	r0, r5
 801eae8:	9308      	str	r3, [sp, #32]
 801eaea:	f000 fbbd 	bl	801f268 <__lshift>
 801eaee:	4621      	mov	r1, r4
 801eaf0:	4683      	mov	fp, r0
 801eaf2:	f000 fc29 	bl	801f348 <__mcmp>
 801eaf6:	2800      	cmp	r0, #0
 801eaf8:	9b08      	ldr	r3, [sp, #32]
 801eafa:	dc02      	bgt.n	801eb02 <_dtoa_r+0xaba>
 801eafc:	d1de      	bne.n	801eabc <_dtoa_r+0xa74>
 801eafe:	07da      	lsls	r2, r3, #31
 801eb00:	d5dc      	bpl.n	801eabc <_dtoa_r+0xa74>
 801eb02:	2b39      	cmp	r3, #57	; 0x39
 801eb04:	d1d8      	bne.n	801eab8 <_dtoa_r+0xa70>
 801eb06:	2339      	movs	r3, #57	; 0x39
 801eb08:	9a04      	ldr	r2, [sp, #16]
 801eb0a:	7013      	strb	r3, [r2, #0]
 801eb0c:	463b      	mov	r3, r7
 801eb0e:	461f      	mov	r7, r3
 801eb10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801eb14:	3b01      	subs	r3, #1
 801eb16:	2a39      	cmp	r2, #57	; 0x39
 801eb18:	d050      	beq.n	801ebbc <_dtoa_r+0xb74>
 801eb1a:	3201      	adds	r2, #1
 801eb1c:	701a      	strb	r2, [r3, #0]
 801eb1e:	e747      	b.n	801e9b0 <_dtoa_r+0x968>
 801eb20:	2a00      	cmp	r2, #0
 801eb22:	dd03      	ble.n	801eb2c <_dtoa_r+0xae4>
 801eb24:	2b39      	cmp	r3, #57	; 0x39
 801eb26:	d0ee      	beq.n	801eb06 <_dtoa_r+0xabe>
 801eb28:	3301      	adds	r3, #1
 801eb2a:	e7c7      	b.n	801eabc <_dtoa_r+0xa74>
 801eb2c:	9a08      	ldr	r2, [sp, #32]
 801eb2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801eb30:	f802 3c01 	strb.w	r3, [r2, #-1]
 801eb34:	428a      	cmp	r2, r1
 801eb36:	d02a      	beq.n	801eb8e <_dtoa_r+0xb46>
 801eb38:	4659      	mov	r1, fp
 801eb3a:	2300      	movs	r3, #0
 801eb3c:	220a      	movs	r2, #10
 801eb3e:	4628      	mov	r0, r5
 801eb40:	f000 f9e6 	bl	801ef10 <__multadd>
 801eb44:	45b0      	cmp	r8, r6
 801eb46:	4683      	mov	fp, r0
 801eb48:	f04f 0300 	mov.w	r3, #0
 801eb4c:	f04f 020a 	mov.w	r2, #10
 801eb50:	4641      	mov	r1, r8
 801eb52:	4628      	mov	r0, r5
 801eb54:	d107      	bne.n	801eb66 <_dtoa_r+0xb1e>
 801eb56:	f000 f9db 	bl	801ef10 <__multadd>
 801eb5a:	4680      	mov	r8, r0
 801eb5c:	4606      	mov	r6, r0
 801eb5e:	9b08      	ldr	r3, [sp, #32]
 801eb60:	3301      	adds	r3, #1
 801eb62:	9308      	str	r3, [sp, #32]
 801eb64:	e775      	b.n	801ea52 <_dtoa_r+0xa0a>
 801eb66:	f000 f9d3 	bl	801ef10 <__multadd>
 801eb6a:	4631      	mov	r1, r6
 801eb6c:	4680      	mov	r8, r0
 801eb6e:	2300      	movs	r3, #0
 801eb70:	220a      	movs	r2, #10
 801eb72:	4628      	mov	r0, r5
 801eb74:	f000 f9cc 	bl	801ef10 <__multadd>
 801eb78:	4606      	mov	r6, r0
 801eb7a:	e7f0      	b.n	801eb5e <_dtoa_r+0xb16>
 801eb7c:	f1b9 0f00 	cmp.w	r9, #0
 801eb80:	bfcc      	ite	gt
 801eb82:	464f      	movgt	r7, r9
 801eb84:	2701      	movle	r7, #1
 801eb86:	f04f 0800 	mov.w	r8, #0
 801eb8a:	9a03      	ldr	r2, [sp, #12]
 801eb8c:	4417      	add	r7, r2
 801eb8e:	4659      	mov	r1, fp
 801eb90:	2201      	movs	r2, #1
 801eb92:	4628      	mov	r0, r5
 801eb94:	9308      	str	r3, [sp, #32]
 801eb96:	f000 fb67 	bl	801f268 <__lshift>
 801eb9a:	4621      	mov	r1, r4
 801eb9c:	4683      	mov	fp, r0
 801eb9e:	f000 fbd3 	bl	801f348 <__mcmp>
 801eba2:	2800      	cmp	r0, #0
 801eba4:	dcb2      	bgt.n	801eb0c <_dtoa_r+0xac4>
 801eba6:	d102      	bne.n	801ebae <_dtoa_r+0xb66>
 801eba8:	9b08      	ldr	r3, [sp, #32]
 801ebaa:	07db      	lsls	r3, r3, #31
 801ebac:	d4ae      	bmi.n	801eb0c <_dtoa_r+0xac4>
 801ebae:	463b      	mov	r3, r7
 801ebb0:	461f      	mov	r7, r3
 801ebb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ebb6:	2a30      	cmp	r2, #48	; 0x30
 801ebb8:	d0fa      	beq.n	801ebb0 <_dtoa_r+0xb68>
 801ebba:	e6f9      	b.n	801e9b0 <_dtoa_r+0x968>
 801ebbc:	9a03      	ldr	r2, [sp, #12]
 801ebbe:	429a      	cmp	r2, r3
 801ebc0:	d1a5      	bne.n	801eb0e <_dtoa_r+0xac6>
 801ebc2:	2331      	movs	r3, #49	; 0x31
 801ebc4:	f10a 0a01 	add.w	sl, sl, #1
 801ebc8:	e779      	b.n	801eabe <_dtoa_r+0xa76>
 801ebca:	4b14      	ldr	r3, [pc, #80]	; (801ec1c <_dtoa_r+0xbd4>)
 801ebcc:	f7ff baa8 	b.w	801e120 <_dtoa_r+0xd8>
 801ebd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	f47f aa81 	bne.w	801e0da <_dtoa_r+0x92>
 801ebd8:	4b11      	ldr	r3, [pc, #68]	; (801ec20 <_dtoa_r+0xbd8>)
 801ebda:	f7ff baa1 	b.w	801e120 <_dtoa_r+0xd8>
 801ebde:	f1b9 0f00 	cmp.w	r9, #0
 801ebe2:	dc03      	bgt.n	801ebec <_dtoa_r+0xba4>
 801ebe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ebe6:	2b02      	cmp	r3, #2
 801ebe8:	f73f aecb 	bgt.w	801e982 <_dtoa_r+0x93a>
 801ebec:	9f03      	ldr	r7, [sp, #12]
 801ebee:	4621      	mov	r1, r4
 801ebf0:	4658      	mov	r0, fp
 801ebf2:	f7ff f99b 	bl	801df2c <quorem>
 801ebf6:	9a03      	ldr	r2, [sp, #12]
 801ebf8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ebfc:	f807 3b01 	strb.w	r3, [r7], #1
 801ec00:	1aba      	subs	r2, r7, r2
 801ec02:	4591      	cmp	r9, r2
 801ec04:	ddba      	ble.n	801eb7c <_dtoa_r+0xb34>
 801ec06:	4659      	mov	r1, fp
 801ec08:	2300      	movs	r3, #0
 801ec0a:	220a      	movs	r2, #10
 801ec0c:	4628      	mov	r0, r5
 801ec0e:	f000 f97f 	bl	801ef10 <__multadd>
 801ec12:	4683      	mov	fp, r0
 801ec14:	e7eb      	b.n	801ebee <_dtoa_r+0xba6>
 801ec16:	bf00      	nop
 801ec18:	08021e77 	.word	0x08021e77
 801ec1c:	08021dd4 	.word	0x08021dd4
 801ec20:	08021df8 	.word	0x08021df8

0801ec24 <std>:
 801ec24:	2300      	movs	r3, #0
 801ec26:	b510      	push	{r4, lr}
 801ec28:	4604      	mov	r4, r0
 801ec2a:	e9c0 3300 	strd	r3, r3, [r0]
 801ec2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ec32:	6083      	str	r3, [r0, #8]
 801ec34:	8181      	strh	r1, [r0, #12]
 801ec36:	6643      	str	r3, [r0, #100]	; 0x64
 801ec38:	81c2      	strh	r2, [r0, #14]
 801ec3a:	6183      	str	r3, [r0, #24]
 801ec3c:	4619      	mov	r1, r3
 801ec3e:	2208      	movs	r2, #8
 801ec40:	305c      	adds	r0, #92	; 0x5c
 801ec42:	f7fe fc99 	bl	801d578 <memset>
 801ec46:	4b05      	ldr	r3, [pc, #20]	; (801ec5c <std+0x38>)
 801ec48:	6224      	str	r4, [r4, #32]
 801ec4a:	6263      	str	r3, [r4, #36]	; 0x24
 801ec4c:	4b04      	ldr	r3, [pc, #16]	; (801ec60 <std+0x3c>)
 801ec4e:	62a3      	str	r3, [r4, #40]	; 0x28
 801ec50:	4b04      	ldr	r3, [pc, #16]	; (801ec64 <std+0x40>)
 801ec52:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ec54:	4b04      	ldr	r3, [pc, #16]	; (801ec68 <std+0x44>)
 801ec56:	6323      	str	r3, [r4, #48]	; 0x30
 801ec58:	bd10      	pop	{r4, pc}
 801ec5a:	bf00      	nop
 801ec5c:	0801fcb9 	.word	0x0801fcb9
 801ec60:	0801fcdb 	.word	0x0801fcdb
 801ec64:	0801fd13 	.word	0x0801fd13
 801ec68:	0801fd37 	.word	0x0801fd37

0801ec6c <_cleanup_r>:
 801ec6c:	4901      	ldr	r1, [pc, #4]	; (801ec74 <_cleanup_r+0x8>)
 801ec6e:	f000 b8af 	b.w	801edd0 <_fwalk_reent>
 801ec72:	bf00      	nop
 801ec74:	08020045 	.word	0x08020045

0801ec78 <__sfmoreglue>:
 801ec78:	2268      	movs	r2, #104	; 0x68
 801ec7a:	b570      	push	{r4, r5, r6, lr}
 801ec7c:	1e4d      	subs	r5, r1, #1
 801ec7e:	4355      	muls	r5, r2
 801ec80:	460e      	mov	r6, r1
 801ec82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ec86:	f000 fcdf 	bl	801f648 <_malloc_r>
 801ec8a:	4604      	mov	r4, r0
 801ec8c:	b140      	cbz	r0, 801eca0 <__sfmoreglue+0x28>
 801ec8e:	2100      	movs	r1, #0
 801ec90:	e9c0 1600 	strd	r1, r6, [r0]
 801ec94:	300c      	adds	r0, #12
 801ec96:	60a0      	str	r0, [r4, #8]
 801ec98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ec9c:	f7fe fc6c 	bl	801d578 <memset>
 801eca0:	4620      	mov	r0, r4
 801eca2:	bd70      	pop	{r4, r5, r6, pc}

0801eca4 <__sfp_lock_acquire>:
 801eca4:	4801      	ldr	r0, [pc, #4]	; (801ecac <__sfp_lock_acquire+0x8>)
 801eca6:	f000 b8b8 	b.w	801ee1a <__retarget_lock_acquire_recursive>
 801ecaa:	bf00      	nop
 801ecac:	2000402d 	.word	0x2000402d

0801ecb0 <__sfp_lock_release>:
 801ecb0:	4801      	ldr	r0, [pc, #4]	; (801ecb8 <__sfp_lock_release+0x8>)
 801ecb2:	f000 b8b3 	b.w	801ee1c <__retarget_lock_release_recursive>
 801ecb6:	bf00      	nop
 801ecb8:	2000402d 	.word	0x2000402d

0801ecbc <__sinit_lock_acquire>:
 801ecbc:	4801      	ldr	r0, [pc, #4]	; (801ecc4 <__sinit_lock_acquire+0x8>)
 801ecbe:	f000 b8ac 	b.w	801ee1a <__retarget_lock_acquire_recursive>
 801ecc2:	bf00      	nop
 801ecc4:	2000402e 	.word	0x2000402e

0801ecc8 <__sinit_lock_release>:
 801ecc8:	4801      	ldr	r0, [pc, #4]	; (801ecd0 <__sinit_lock_release+0x8>)
 801ecca:	f000 b8a7 	b.w	801ee1c <__retarget_lock_release_recursive>
 801ecce:	bf00      	nop
 801ecd0:	2000402e 	.word	0x2000402e

0801ecd4 <__sinit>:
 801ecd4:	b510      	push	{r4, lr}
 801ecd6:	4604      	mov	r4, r0
 801ecd8:	f7ff fff0 	bl	801ecbc <__sinit_lock_acquire>
 801ecdc:	69a3      	ldr	r3, [r4, #24]
 801ecde:	b11b      	cbz	r3, 801ece8 <__sinit+0x14>
 801ece0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ece4:	f7ff bff0 	b.w	801ecc8 <__sinit_lock_release>
 801ece8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ecec:	6523      	str	r3, [r4, #80]	; 0x50
 801ecee:	4b13      	ldr	r3, [pc, #76]	; (801ed3c <__sinit+0x68>)
 801ecf0:	4a13      	ldr	r2, [pc, #76]	; (801ed40 <__sinit+0x6c>)
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	62a2      	str	r2, [r4, #40]	; 0x28
 801ecf6:	42a3      	cmp	r3, r4
 801ecf8:	bf08      	it	eq
 801ecfa:	2301      	moveq	r3, #1
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	bf08      	it	eq
 801ed00:	61a3      	streq	r3, [r4, #24]
 801ed02:	f000 f81f 	bl	801ed44 <__sfp>
 801ed06:	6060      	str	r0, [r4, #4]
 801ed08:	4620      	mov	r0, r4
 801ed0a:	f000 f81b 	bl	801ed44 <__sfp>
 801ed0e:	60a0      	str	r0, [r4, #8]
 801ed10:	4620      	mov	r0, r4
 801ed12:	f000 f817 	bl	801ed44 <__sfp>
 801ed16:	2200      	movs	r2, #0
 801ed18:	2104      	movs	r1, #4
 801ed1a:	60e0      	str	r0, [r4, #12]
 801ed1c:	6860      	ldr	r0, [r4, #4]
 801ed1e:	f7ff ff81 	bl	801ec24 <std>
 801ed22:	2201      	movs	r2, #1
 801ed24:	2109      	movs	r1, #9
 801ed26:	68a0      	ldr	r0, [r4, #8]
 801ed28:	f7ff ff7c 	bl	801ec24 <std>
 801ed2c:	2202      	movs	r2, #2
 801ed2e:	2112      	movs	r1, #18
 801ed30:	68e0      	ldr	r0, [r4, #12]
 801ed32:	f7ff ff77 	bl	801ec24 <std>
 801ed36:	2301      	movs	r3, #1
 801ed38:	61a3      	str	r3, [r4, #24]
 801ed3a:	e7d1      	b.n	801ece0 <__sinit+0xc>
 801ed3c:	08021dc0 	.word	0x08021dc0
 801ed40:	0801ec6d 	.word	0x0801ec6d

0801ed44 <__sfp>:
 801ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed46:	4607      	mov	r7, r0
 801ed48:	f7ff ffac 	bl	801eca4 <__sfp_lock_acquire>
 801ed4c:	4b1e      	ldr	r3, [pc, #120]	; (801edc8 <__sfp+0x84>)
 801ed4e:	681e      	ldr	r6, [r3, #0]
 801ed50:	69b3      	ldr	r3, [r6, #24]
 801ed52:	b913      	cbnz	r3, 801ed5a <__sfp+0x16>
 801ed54:	4630      	mov	r0, r6
 801ed56:	f7ff ffbd 	bl	801ecd4 <__sinit>
 801ed5a:	3648      	adds	r6, #72	; 0x48
 801ed5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ed60:	3b01      	subs	r3, #1
 801ed62:	d503      	bpl.n	801ed6c <__sfp+0x28>
 801ed64:	6833      	ldr	r3, [r6, #0]
 801ed66:	b30b      	cbz	r3, 801edac <__sfp+0x68>
 801ed68:	6836      	ldr	r6, [r6, #0]
 801ed6a:	e7f7      	b.n	801ed5c <__sfp+0x18>
 801ed6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ed70:	b9d5      	cbnz	r5, 801eda8 <__sfp+0x64>
 801ed72:	4b16      	ldr	r3, [pc, #88]	; (801edcc <__sfp+0x88>)
 801ed74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ed78:	60e3      	str	r3, [r4, #12]
 801ed7a:	6665      	str	r5, [r4, #100]	; 0x64
 801ed7c:	f000 f84c 	bl	801ee18 <__retarget_lock_init_recursive>
 801ed80:	f7ff ff96 	bl	801ecb0 <__sfp_lock_release>
 801ed84:	2208      	movs	r2, #8
 801ed86:	4629      	mov	r1, r5
 801ed88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ed8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ed90:	6025      	str	r5, [r4, #0]
 801ed92:	61a5      	str	r5, [r4, #24]
 801ed94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ed98:	f7fe fbee 	bl	801d578 <memset>
 801ed9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801eda0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801eda4:	4620      	mov	r0, r4
 801eda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eda8:	3468      	adds	r4, #104	; 0x68
 801edaa:	e7d9      	b.n	801ed60 <__sfp+0x1c>
 801edac:	2104      	movs	r1, #4
 801edae:	4638      	mov	r0, r7
 801edb0:	f7ff ff62 	bl	801ec78 <__sfmoreglue>
 801edb4:	4604      	mov	r4, r0
 801edb6:	6030      	str	r0, [r6, #0]
 801edb8:	2800      	cmp	r0, #0
 801edba:	d1d5      	bne.n	801ed68 <__sfp+0x24>
 801edbc:	f7ff ff78 	bl	801ecb0 <__sfp_lock_release>
 801edc0:	230c      	movs	r3, #12
 801edc2:	603b      	str	r3, [r7, #0]
 801edc4:	e7ee      	b.n	801eda4 <__sfp+0x60>
 801edc6:	bf00      	nop
 801edc8:	08021dc0 	.word	0x08021dc0
 801edcc:	ffff0001 	.word	0xffff0001

0801edd0 <_fwalk_reent>:
 801edd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edd4:	4606      	mov	r6, r0
 801edd6:	4688      	mov	r8, r1
 801edd8:	2700      	movs	r7, #0
 801edda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801edde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ede2:	f1b9 0901 	subs.w	r9, r9, #1
 801ede6:	d505      	bpl.n	801edf4 <_fwalk_reent+0x24>
 801ede8:	6824      	ldr	r4, [r4, #0]
 801edea:	2c00      	cmp	r4, #0
 801edec:	d1f7      	bne.n	801edde <_fwalk_reent+0xe>
 801edee:	4638      	mov	r0, r7
 801edf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edf4:	89ab      	ldrh	r3, [r5, #12]
 801edf6:	2b01      	cmp	r3, #1
 801edf8:	d907      	bls.n	801ee0a <_fwalk_reent+0x3a>
 801edfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801edfe:	3301      	adds	r3, #1
 801ee00:	d003      	beq.n	801ee0a <_fwalk_reent+0x3a>
 801ee02:	4629      	mov	r1, r5
 801ee04:	4630      	mov	r0, r6
 801ee06:	47c0      	blx	r8
 801ee08:	4307      	orrs	r7, r0
 801ee0a:	3568      	adds	r5, #104	; 0x68
 801ee0c:	e7e9      	b.n	801ede2 <_fwalk_reent+0x12>
	...

0801ee10 <_localeconv_r>:
 801ee10:	4800      	ldr	r0, [pc, #0]	; (801ee14 <_localeconv_r+0x4>)
 801ee12:	4770      	bx	lr
 801ee14:	20000280 	.word	0x20000280

0801ee18 <__retarget_lock_init_recursive>:
 801ee18:	4770      	bx	lr

0801ee1a <__retarget_lock_acquire_recursive>:
 801ee1a:	4770      	bx	lr

0801ee1c <__retarget_lock_release_recursive>:
 801ee1c:	4770      	bx	lr
	...

0801ee20 <malloc>:
 801ee20:	4b02      	ldr	r3, [pc, #8]	; (801ee2c <malloc+0xc>)
 801ee22:	4601      	mov	r1, r0
 801ee24:	6818      	ldr	r0, [r3, #0]
 801ee26:	f000 bc0f 	b.w	801f648 <_malloc_r>
 801ee2a:	bf00      	nop
 801ee2c:	2000012c 	.word	0x2000012c

0801ee30 <memchr>:
 801ee30:	4603      	mov	r3, r0
 801ee32:	b510      	push	{r4, lr}
 801ee34:	b2c9      	uxtb	r1, r1
 801ee36:	4402      	add	r2, r0
 801ee38:	4293      	cmp	r3, r2
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	d101      	bne.n	801ee42 <memchr+0x12>
 801ee3e:	2000      	movs	r0, #0
 801ee40:	e003      	b.n	801ee4a <memchr+0x1a>
 801ee42:	7804      	ldrb	r4, [r0, #0]
 801ee44:	3301      	adds	r3, #1
 801ee46:	428c      	cmp	r4, r1
 801ee48:	d1f6      	bne.n	801ee38 <memchr+0x8>
 801ee4a:	bd10      	pop	{r4, pc}

0801ee4c <_Balloc>:
 801ee4c:	b570      	push	{r4, r5, r6, lr}
 801ee4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ee50:	4604      	mov	r4, r0
 801ee52:	460d      	mov	r5, r1
 801ee54:	b976      	cbnz	r6, 801ee74 <_Balloc+0x28>
 801ee56:	2010      	movs	r0, #16
 801ee58:	f7ff ffe2 	bl	801ee20 <malloc>
 801ee5c:	4602      	mov	r2, r0
 801ee5e:	6260      	str	r0, [r4, #36]	; 0x24
 801ee60:	b920      	cbnz	r0, 801ee6c <_Balloc+0x20>
 801ee62:	2166      	movs	r1, #102	; 0x66
 801ee64:	4b17      	ldr	r3, [pc, #92]	; (801eec4 <_Balloc+0x78>)
 801ee66:	4818      	ldr	r0, [pc, #96]	; (801eec8 <_Balloc+0x7c>)
 801ee68:	f001 f83c 	bl	801fee4 <__assert_func>
 801ee6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ee70:	6006      	str	r6, [r0, #0]
 801ee72:	60c6      	str	r6, [r0, #12]
 801ee74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ee76:	68f3      	ldr	r3, [r6, #12]
 801ee78:	b183      	cbz	r3, 801ee9c <_Balloc+0x50>
 801ee7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ee7c:	68db      	ldr	r3, [r3, #12]
 801ee7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ee82:	b9b8      	cbnz	r0, 801eeb4 <_Balloc+0x68>
 801ee84:	2101      	movs	r1, #1
 801ee86:	fa01 f605 	lsl.w	r6, r1, r5
 801ee8a:	1d72      	adds	r2, r6, #5
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	0092      	lsls	r2, r2, #2
 801ee90:	f000 fb5e 	bl	801f550 <_calloc_r>
 801ee94:	b160      	cbz	r0, 801eeb0 <_Balloc+0x64>
 801ee96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ee9a:	e00e      	b.n	801eeba <_Balloc+0x6e>
 801ee9c:	2221      	movs	r2, #33	; 0x21
 801ee9e:	2104      	movs	r1, #4
 801eea0:	4620      	mov	r0, r4
 801eea2:	f000 fb55 	bl	801f550 <_calloc_r>
 801eea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eea8:	60f0      	str	r0, [r6, #12]
 801eeaa:	68db      	ldr	r3, [r3, #12]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d1e4      	bne.n	801ee7a <_Balloc+0x2e>
 801eeb0:	2000      	movs	r0, #0
 801eeb2:	bd70      	pop	{r4, r5, r6, pc}
 801eeb4:	6802      	ldr	r2, [r0, #0]
 801eeb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eeba:	2300      	movs	r3, #0
 801eebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801eec0:	e7f7      	b.n	801eeb2 <_Balloc+0x66>
 801eec2:	bf00      	nop
 801eec4:	08021e05 	.word	0x08021e05
 801eec8:	08021ee8 	.word	0x08021ee8

0801eecc <_Bfree>:
 801eecc:	b570      	push	{r4, r5, r6, lr}
 801eece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eed0:	4605      	mov	r5, r0
 801eed2:	460c      	mov	r4, r1
 801eed4:	b976      	cbnz	r6, 801eef4 <_Bfree+0x28>
 801eed6:	2010      	movs	r0, #16
 801eed8:	f7ff ffa2 	bl	801ee20 <malloc>
 801eedc:	4602      	mov	r2, r0
 801eede:	6268      	str	r0, [r5, #36]	; 0x24
 801eee0:	b920      	cbnz	r0, 801eeec <_Bfree+0x20>
 801eee2:	218a      	movs	r1, #138	; 0x8a
 801eee4:	4b08      	ldr	r3, [pc, #32]	; (801ef08 <_Bfree+0x3c>)
 801eee6:	4809      	ldr	r0, [pc, #36]	; (801ef0c <_Bfree+0x40>)
 801eee8:	f000 fffc 	bl	801fee4 <__assert_func>
 801eeec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eef0:	6006      	str	r6, [r0, #0]
 801eef2:	60c6      	str	r6, [r0, #12]
 801eef4:	b13c      	cbz	r4, 801ef06 <_Bfree+0x3a>
 801eef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801eef8:	6862      	ldr	r2, [r4, #4]
 801eefa:	68db      	ldr	r3, [r3, #12]
 801eefc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ef00:	6021      	str	r1, [r4, #0]
 801ef02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ef06:	bd70      	pop	{r4, r5, r6, pc}
 801ef08:	08021e05 	.word	0x08021e05
 801ef0c:	08021ee8 	.word	0x08021ee8

0801ef10 <__multadd>:
 801ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef14:	4607      	mov	r7, r0
 801ef16:	460c      	mov	r4, r1
 801ef18:	461e      	mov	r6, r3
 801ef1a:	2000      	movs	r0, #0
 801ef1c:	690d      	ldr	r5, [r1, #16]
 801ef1e:	f101 0c14 	add.w	ip, r1, #20
 801ef22:	f8dc 3000 	ldr.w	r3, [ip]
 801ef26:	3001      	adds	r0, #1
 801ef28:	b299      	uxth	r1, r3
 801ef2a:	fb02 6101 	mla	r1, r2, r1, r6
 801ef2e:	0c1e      	lsrs	r6, r3, #16
 801ef30:	0c0b      	lsrs	r3, r1, #16
 801ef32:	fb02 3306 	mla	r3, r2, r6, r3
 801ef36:	b289      	uxth	r1, r1
 801ef38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ef3c:	4285      	cmp	r5, r0
 801ef3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ef42:	f84c 1b04 	str.w	r1, [ip], #4
 801ef46:	dcec      	bgt.n	801ef22 <__multadd+0x12>
 801ef48:	b30e      	cbz	r6, 801ef8e <__multadd+0x7e>
 801ef4a:	68a3      	ldr	r3, [r4, #8]
 801ef4c:	42ab      	cmp	r3, r5
 801ef4e:	dc19      	bgt.n	801ef84 <__multadd+0x74>
 801ef50:	6861      	ldr	r1, [r4, #4]
 801ef52:	4638      	mov	r0, r7
 801ef54:	3101      	adds	r1, #1
 801ef56:	f7ff ff79 	bl	801ee4c <_Balloc>
 801ef5a:	4680      	mov	r8, r0
 801ef5c:	b928      	cbnz	r0, 801ef6a <__multadd+0x5a>
 801ef5e:	4602      	mov	r2, r0
 801ef60:	21b5      	movs	r1, #181	; 0xb5
 801ef62:	4b0c      	ldr	r3, [pc, #48]	; (801ef94 <__multadd+0x84>)
 801ef64:	480c      	ldr	r0, [pc, #48]	; (801ef98 <__multadd+0x88>)
 801ef66:	f000 ffbd 	bl	801fee4 <__assert_func>
 801ef6a:	6922      	ldr	r2, [r4, #16]
 801ef6c:	f104 010c 	add.w	r1, r4, #12
 801ef70:	3202      	adds	r2, #2
 801ef72:	0092      	lsls	r2, r2, #2
 801ef74:	300c      	adds	r0, #12
 801ef76:	f7fe fad7 	bl	801d528 <memcpy>
 801ef7a:	4621      	mov	r1, r4
 801ef7c:	4638      	mov	r0, r7
 801ef7e:	f7ff ffa5 	bl	801eecc <_Bfree>
 801ef82:	4644      	mov	r4, r8
 801ef84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ef88:	3501      	adds	r5, #1
 801ef8a:	615e      	str	r6, [r3, #20]
 801ef8c:	6125      	str	r5, [r4, #16]
 801ef8e:	4620      	mov	r0, r4
 801ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef94:	08021e77 	.word	0x08021e77
 801ef98:	08021ee8 	.word	0x08021ee8

0801ef9c <__hi0bits>:
 801ef9c:	0c02      	lsrs	r2, r0, #16
 801ef9e:	0412      	lsls	r2, r2, #16
 801efa0:	4603      	mov	r3, r0
 801efa2:	b9ca      	cbnz	r2, 801efd8 <__hi0bits+0x3c>
 801efa4:	0403      	lsls	r3, r0, #16
 801efa6:	2010      	movs	r0, #16
 801efa8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801efac:	bf04      	itt	eq
 801efae:	021b      	lsleq	r3, r3, #8
 801efb0:	3008      	addeq	r0, #8
 801efb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801efb6:	bf04      	itt	eq
 801efb8:	011b      	lsleq	r3, r3, #4
 801efba:	3004      	addeq	r0, #4
 801efbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801efc0:	bf04      	itt	eq
 801efc2:	009b      	lsleq	r3, r3, #2
 801efc4:	3002      	addeq	r0, #2
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	db05      	blt.n	801efd6 <__hi0bits+0x3a>
 801efca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801efce:	f100 0001 	add.w	r0, r0, #1
 801efd2:	bf08      	it	eq
 801efd4:	2020      	moveq	r0, #32
 801efd6:	4770      	bx	lr
 801efd8:	2000      	movs	r0, #0
 801efda:	e7e5      	b.n	801efa8 <__hi0bits+0xc>

0801efdc <__lo0bits>:
 801efdc:	6803      	ldr	r3, [r0, #0]
 801efde:	4602      	mov	r2, r0
 801efe0:	f013 0007 	ands.w	r0, r3, #7
 801efe4:	d00b      	beq.n	801effe <__lo0bits+0x22>
 801efe6:	07d9      	lsls	r1, r3, #31
 801efe8:	d421      	bmi.n	801f02e <__lo0bits+0x52>
 801efea:	0798      	lsls	r0, r3, #30
 801efec:	bf49      	itett	mi
 801efee:	085b      	lsrmi	r3, r3, #1
 801eff0:	089b      	lsrpl	r3, r3, #2
 801eff2:	2001      	movmi	r0, #1
 801eff4:	6013      	strmi	r3, [r2, #0]
 801eff6:	bf5c      	itt	pl
 801eff8:	2002      	movpl	r0, #2
 801effa:	6013      	strpl	r3, [r2, #0]
 801effc:	4770      	bx	lr
 801effe:	b299      	uxth	r1, r3
 801f000:	b909      	cbnz	r1, 801f006 <__lo0bits+0x2a>
 801f002:	2010      	movs	r0, #16
 801f004:	0c1b      	lsrs	r3, r3, #16
 801f006:	b2d9      	uxtb	r1, r3
 801f008:	b909      	cbnz	r1, 801f00e <__lo0bits+0x32>
 801f00a:	3008      	adds	r0, #8
 801f00c:	0a1b      	lsrs	r3, r3, #8
 801f00e:	0719      	lsls	r1, r3, #28
 801f010:	bf04      	itt	eq
 801f012:	091b      	lsreq	r3, r3, #4
 801f014:	3004      	addeq	r0, #4
 801f016:	0799      	lsls	r1, r3, #30
 801f018:	bf04      	itt	eq
 801f01a:	089b      	lsreq	r3, r3, #2
 801f01c:	3002      	addeq	r0, #2
 801f01e:	07d9      	lsls	r1, r3, #31
 801f020:	d403      	bmi.n	801f02a <__lo0bits+0x4e>
 801f022:	085b      	lsrs	r3, r3, #1
 801f024:	f100 0001 	add.w	r0, r0, #1
 801f028:	d003      	beq.n	801f032 <__lo0bits+0x56>
 801f02a:	6013      	str	r3, [r2, #0]
 801f02c:	4770      	bx	lr
 801f02e:	2000      	movs	r0, #0
 801f030:	4770      	bx	lr
 801f032:	2020      	movs	r0, #32
 801f034:	4770      	bx	lr
	...

0801f038 <__i2b>:
 801f038:	b510      	push	{r4, lr}
 801f03a:	460c      	mov	r4, r1
 801f03c:	2101      	movs	r1, #1
 801f03e:	f7ff ff05 	bl	801ee4c <_Balloc>
 801f042:	4602      	mov	r2, r0
 801f044:	b928      	cbnz	r0, 801f052 <__i2b+0x1a>
 801f046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f04a:	4b04      	ldr	r3, [pc, #16]	; (801f05c <__i2b+0x24>)
 801f04c:	4804      	ldr	r0, [pc, #16]	; (801f060 <__i2b+0x28>)
 801f04e:	f000 ff49 	bl	801fee4 <__assert_func>
 801f052:	2301      	movs	r3, #1
 801f054:	6144      	str	r4, [r0, #20]
 801f056:	6103      	str	r3, [r0, #16]
 801f058:	bd10      	pop	{r4, pc}
 801f05a:	bf00      	nop
 801f05c:	08021e77 	.word	0x08021e77
 801f060:	08021ee8 	.word	0x08021ee8

0801f064 <__multiply>:
 801f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f068:	4691      	mov	r9, r2
 801f06a:	690a      	ldr	r2, [r1, #16]
 801f06c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f070:	460c      	mov	r4, r1
 801f072:	429a      	cmp	r2, r3
 801f074:	bfbe      	ittt	lt
 801f076:	460b      	movlt	r3, r1
 801f078:	464c      	movlt	r4, r9
 801f07a:	4699      	movlt	r9, r3
 801f07c:	6927      	ldr	r7, [r4, #16]
 801f07e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f082:	68a3      	ldr	r3, [r4, #8]
 801f084:	6861      	ldr	r1, [r4, #4]
 801f086:	eb07 060a 	add.w	r6, r7, sl
 801f08a:	42b3      	cmp	r3, r6
 801f08c:	b085      	sub	sp, #20
 801f08e:	bfb8      	it	lt
 801f090:	3101      	addlt	r1, #1
 801f092:	f7ff fedb 	bl	801ee4c <_Balloc>
 801f096:	b930      	cbnz	r0, 801f0a6 <__multiply+0x42>
 801f098:	4602      	mov	r2, r0
 801f09a:	f240 115d 	movw	r1, #349	; 0x15d
 801f09e:	4b43      	ldr	r3, [pc, #268]	; (801f1ac <__multiply+0x148>)
 801f0a0:	4843      	ldr	r0, [pc, #268]	; (801f1b0 <__multiply+0x14c>)
 801f0a2:	f000 ff1f 	bl	801fee4 <__assert_func>
 801f0a6:	f100 0514 	add.w	r5, r0, #20
 801f0aa:	462b      	mov	r3, r5
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f0b2:	4543      	cmp	r3, r8
 801f0b4:	d321      	bcc.n	801f0fa <__multiply+0x96>
 801f0b6:	f104 0314 	add.w	r3, r4, #20
 801f0ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f0be:	f109 0314 	add.w	r3, r9, #20
 801f0c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f0c6:	9202      	str	r2, [sp, #8]
 801f0c8:	1b3a      	subs	r2, r7, r4
 801f0ca:	3a15      	subs	r2, #21
 801f0cc:	f022 0203 	bic.w	r2, r2, #3
 801f0d0:	3204      	adds	r2, #4
 801f0d2:	f104 0115 	add.w	r1, r4, #21
 801f0d6:	428f      	cmp	r7, r1
 801f0d8:	bf38      	it	cc
 801f0da:	2204      	movcc	r2, #4
 801f0dc:	9201      	str	r2, [sp, #4]
 801f0de:	9a02      	ldr	r2, [sp, #8]
 801f0e0:	9303      	str	r3, [sp, #12]
 801f0e2:	429a      	cmp	r2, r3
 801f0e4:	d80c      	bhi.n	801f100 <__multiply+0x9c>
 801f0e6:	2e00      	cmp	r6, #0
 801f0e8:	dd03      	ble.n	801f0f2 <__multiply+0x8e>
 801f0ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d059      	beq.n	801f1a6 <__multiply+0x142>
 801f0f2:	6106      	str	r6, [r0, #16]
 801f0f4:	b005      	add	sp, #20
 801f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0fa:	f843 2b04 	str.w	r2, [r3], #4
 801f0fe:	e7d8      	b.n	801f0b2 <__multiply+0x4e>
 801f100:	f8b3 a000 	ldrh.w	sl, [r3]
 801f104:	f1ba 0f00 	cmp.w	sl, #0
 801f108:	d023      	beq.n	801f152 <__multiply+0xee>
 801f10a:	46a9      	mov	r9, r5
 801f10c:	f04f 0c00 	mov.w	ip, #0
 801f110:	f104 0e14 	add.w	lr, r4, #20
 801f114:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f118:	f8d9 1000 	ldr.w	r1, [r9]
 801f11c:	fa1f fb82 	uxth.w	fp, r2
 801f120:	b289      	uxth	r1, r1
 801f122:	fb0a 110b 	mla	r1, sl, fp, r1
 801f126:	4461      	add	r1, ip
 801f128:	f8d9 c000 	ldr.w	ip, [r9]
 801f12c:	0c12      	lsrs	r2, r2, #16
 801f12e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f132:	fb0a c202 	mla	r2, sl, r2, ip
 801f136:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f13a:	b289      	uxth	r1, r1
 801f13c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f140:	4577      	cmp	r7, lr
 801f142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f146:	f849 1b04 	str.w	r1, [r9], #4
 801f14a:	d8e3      	bhi.n	801f114 <__multiply+0xb0>
 801f14c:	9a01      	ldr	r2, [sp, #4]
 801f14e:	f845 c002 	str.w	ip, [r5, r2]
 801f152:	9a03      	ldr	r2, [sp, #12]
 801f154:	3304      	adds	r3, #4
 801f156:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f15a:	f1b9 0f00 	cmp.w	r9, #0
 801f15e:	d020      	beq.n	801f1a2 <__multiply+0x13e>
 801f160:	46ae      	mov	lr, r5
 801f162:	f04f 0a00 	mov.w	sl, #0
 801f166:	6829      	ldr	r1, [r5, #0]
 801f168:	f104 0c14 	add.w	ip, r4, #20
 801f16c:	f8bc b000 	ldrh.w	fp, [ip]
 801f170:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f174:	b289      	uxth	r1, r1
 801f176:	fb09 220b 	mla	r2, r9, fp, r2
 801f17a:	4492      	add	sl, r2
 801f17c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f180:	f84e 1b04 	str.w	r1, [lr], #4
 801f184:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f188:	f8be 1000 	ldrh.w	r1, [lr]
 801f18c:	0c12      	lsrs	r2, r2, #16
 801f18e:	fb09 1102 	mla	r1, r9, r2, r1
 801f192:	4567      	cmp	r7, ip
 801f194:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801f198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f19c:	d8e6      	bhi.n	801f16c <__multiply+0x108>
 801f19e:	9a01      	ldr	r2, [sp, #4]
 801f1a0:	50a9      	str	r1, [r5, r2]
 801f1a2:	3504      	adds	r5, #4
 801f1a4:	e79b      	b.n	801f0de <__multiply+0x7a>
 801f1a6:	3e01      	subs	r6, #1
 801f1a8:	e79d      	b.n	801f0e6 <__multiply+0x82>
 801f1aa:	bf00      	nop
 801f1ac:	08021e77 	.word	0x08021e77
 801f1b0:	08021ee8 	.word	0x08021ee8

0801f1b4 <__pow5mult>:
 801f1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1b8:	4615      	mov	r5, r2
 801f1ba:	f012 0203 	ands.w	r2, r2, #3
 801f1be:	4606      	mov	r6, r0
 801f1c0:	460f      	mov	r7, r1
 801f1c2:	d007      	beq.n	801f1d4 <__pow5mult+0x20>
 801f1c4:	4c25      	ldr	r4, [pc, #148]	; (801f25c <__pow5mult+0xa8>)
 801f1c6:	3a01      	subs	r2, #1
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f1ce:	f7ff fe9f 	bl	801ef10 <__multadd>
 801f1d2:	4607      	mov	r7, r0
 801f1d4:	10ad      	asrs	r5, r5, #2
 801f1d6:	d03d      	beq.n	801f254 <__pow5mult+0xa0>
 801f1d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f1da:	b97c      	cbnz	r4, 801f1fc <__pow5mult+0x48>
 801f1dc:	2010      	movs	r0, #16
 801f1de:	f7ff fe1f 	bl	801ee20 <malloc>
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	6270      	str	r0, [r6, #36]	; 0x24
 801f1e6:	b928      	cbnz	r0, 801f1f4 <__pow5mult+0x40>
 801f1e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f1ec:	4b1c      	ldr	r3, [pc, #112]	; (801f260 <__pow5mult+0xac>)
 801f1ee:	481d      	ldr	r0, [pc, #116]	; (801f264 <__pow5mult+0xb0>)
 801f1f0:	f000 fe78 	bl	801fee4 <__assert_func>
 801f1f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f1f8:	6004      	str	r4, [r0, #0]
 801f1fa:	60c4      	str	r4, [r0, #12]
 801f1fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f204:	b94c      	cbnz	r4, 801f21a <__pow5mult+0x66>
 801f206:	f240 2171 	movw	r1, #625	; 0x271
 801f20a:	4630      	mov	r0, r6
 801f20c:	f7ff ff14 	bl	801f038 <__i2b>
 801f210:	2300      	movs	r3, #0
 801f212:	4604      	mov	r4, r0
 801f214:	f8c8 0008 	str.w	r0, [r8, #8]
 801f218:	6003      	str	r3, [r0, #0]
 801f21a:	f04f 0900 	mov.w	r9, #0
 801f21e:	07eb      	lsls	r3, r5, #31
 801f220:	d50a      	bpl.n	801f238 <__pow5mult+0x84>
 801f222:	4639      	mov	r1, r7
 801f224:	4622      	mov	r2, r4
 801f226:	4630      	mov	r0, r6
 801f228:	f7ff ff1c 	bl	801f064 <__multiply>
 801f22c:	4680      	mov	r8, r0
 801f22e:	4639      	mov	r1, r7
 801f230:	4630      	mov	r0, r6
 801f232:	f7ff fe4b 	bl	801eecc <_Bfree>
 801f236:	4647      	mov	r7, r8
 801f238:	106d      	asrs	r5, r5, #1
 801f23a:	d00b      	beq.n	801f254 <__pow5mult+0xa0>
 801f23c:	6820      	ldr	r0, [r4, #0]
 801f23e:	b938      	cbnz	r0, 801f250 <__pow5mult+0x9c>
 801f240:	4622      	mov	r2, r4
 801f242:	4621      	mov	r1, r4
 801f244:	4630      	mov	r0, r6
 801f246:	f7ff ff0d 	bl	801f064 <__multiply>
 801f24a:	6020      	str	r0, [r4, #0]
 801f24c:	f8c0 9000 	str.w	r9, [r0]
 801f250:	4604      	mov	r4, r0
 801f252:	e7e4      	b.n	801f21e <__pow5mult+0x6a>
 801f254:	4638      	mov	r0, r7
 801f256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f25a:	bf00      	nop
 801f25c:	08022038 	.word	0x08022038
 801f260:	08021e05 	.word	0x08021e05
 801f264:	08021ee8 	.word	0x08021ee8

0801f268 <__lshift>:
 801f268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f26c:	460c      	mov	r4, r1
 801f26e:	4607      	mov	r7, r0
 801f270:	4691      	mov	r9, r2
 801f272:	6923      	ldr	r3, [r4, #16]
 801f274:	6849      	ldr	r1, [r1, #4]
 801f276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f27a:	68a3      	ldr	r3, [r4, #8]
 801f27c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f280:	f108 0601 	add.w	r6, r8, #1
 801f284:	42b3      	cmp	r3, r6
 801f286:	db0b      	blt.n	801f2a0 <__lshift+0x38>
 801f288:	4638      	mov	r0, r7
 801f28a:	f7ff fddf 	bl	801ee4c <_Balloc>
 801f28e:	4605      	mov	r5, r0
 801f290:	b948      	cbnz	r0, 801f2a6 <__lshift+0x3e>
 801f292:	4602      	mov	r2, r0
 801f294:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f298:	4b29      	ldr	r3, [pc, #164]	; (801f340 <__lshift+0xd8>)
 801f29a:	482a      	ldr	r0, [pc, #168]	; (801f344 <__lshift+0xdc>)
 801f29c:	f000 fe22 	bl	801fee4 <__assert_func>
 801f2a0:	3101      	adds	r1, #1
 801f2a2:	005b      	lsls	r3, r3, #1
 801f2a4:	e7ee      	b.n	801f284 <__lshift+0x1c>
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	f100 0114 	add.w	r1, r0, #20
 801f2ac:	f100 0210 	add.w	r2, r0, #16
 801f2b0:	4618      	mov	r0, r3
 801f2b2:	4553      	cmp	r3, sl
 801f2b4:	db37      	blt.n	801f326 <__lshift+0xbe>
 801f2b6:	6920      	ldr	r0, [r4, #16]
 801f2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f2bc:	f104 0314 	add.w	r3, r4, #20
 801f2c0:	f019 091f 	ands.w	r9, r9, #31
 801f2c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f2c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f2cc:	d02f      	beq.n	801f32e <__lshift+0xc6>
 801f2ce:	468a      	mov	sl, r1
 801f2d0:	f04f 0c00 	mov.w	ip, #0
 801f2d4:	f1c9 0e20 	rsb	lr, r9, #32
 801f2d8:	681a      	ldr	r2, [r3, #0]
 801f2da:	fa02 f209 	lsl.w	r2, r2, r9
 801f2de:	ea42 020c 	orr.w	r2, r2, ip
 801f2e2:	f84a 2b04 	str.w	r2, [sl], #4
 801f2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2ea:	4298      	cmp	r0, r3
 801f2ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 801f2f0:	d8f2      	bhi.n	801f2d8 <__lshift+0x70>
 801f2f2:	1b03      	subs	r3, r0, r4
 801f2f4:	3b15      	subs	r3, #21
 801f2f6:	f023 0303 	bic.w	r3, r3, #3
 801f2fa:	3304      	adds	r3, #4
 801f2fc:	f104 0215 	add.w	r2, r4, #21
 801f300:	4290      	cmp	r0, r2
 801f302:	bf38      	it	cc
 801f304:	2304      	movcc	r3, #4
 801f306:	f841 c003 	str.w	ip, [r1, r3]
 801f30a:	f1bc 0f00 	cmp.w	ip, #0
 801f30e:	d001      	beq.n	801f314 <__lshift+0xac>
 801f310:	f108 0602 	add.w	r6, r8, #2
 801f314:	3e01      	subs	r6, #1
 801f316:	4638      	mov	r0, r7
 801f318:	4621      	mov	r1, r4
 801f31a:	612e      	str	r6, [r5, #16]
 801f31c:	f7ff fdd6 	bl	801eecc <_Bfree>
 801f320:	4628      	mov	r0, r5
 801f322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f326:	f842 0f04 	str.w	r0, [r2, #4]!
 801f32a:	3301      	adds	r3, #1
 801f32c:	e7c1      	b.n	801f2b2 <__lshift+0x4a>
 801f32e:	3904      	subs	r1, #4
 801f330:	f853 2b04 	ldr.w	r2, [r3], #4
 801f334:	4298      	cmp	r0, r3
 801f336:	f841 2f04 	str.w	r2, [r1, #4]!
 801f33a:	d8f9      	bhi.n	801f330 <__lshift+0xc8>
 801f33c:	e7ea      	b.n	801f314 <__lshift+0xac>
 801f33e:	bf00      	nop
 801f340:	08021e77 	.word	0x08021e77
 801f344:	08021ee8 	.word	0x08021ee8

0801f348 <__mcmp>:
 801f348:	4603      	mov	r3, r0
 801f34a:	690a      	ldr	r2, [r1, #16]
 801f34c:	6900      	ldr	r0, [r0, #16]
 801f34e:	b530      	push	{r4, r5, lr}
 801f350:	1a80      	subs	r0, r0, r2
 801f352:	d10d      	bne.n	801f370 <__mcmp+0x28>
 801f354:	3314      	adds	r3, #20
 801f356:	3114      	adds	r1, #20
 801f358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f35c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f368:	4295      	cmp	r5, r2
 801f36a:	d002      	beq.n	801f372 <__mcmp+0x2a>
 801f36c:	d304      	bcc.n	801f378 <__mcmp+0x30>
 801f36e:	2001      	movs	r0, #1
 801f370:	bd30      	pop	{r4, r5, pc}
 801f372:	42a3      	cmp	r3, r4
 801f374:	d3f4      	bcc.n	801f360 <__mcmp+0x18>
 801f376:	e7fb      	b.n	801f370 <__mcmp+0x28>
 801f378:	f04f 30ff 	mov.w	r0, #4294967295
 801f37c:	e7f8      	b.n	801f370 <__mcmp+0x28>
	...

0801f380 <__mdiff>:
 801f380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f384:	460d      	mov	r5, r1
 801f386:	4607      	mov	r7, r0
 801f388:	4611      	mov	r1, r2
 801f38a:	4628      	mov	r0, r5
 801f38c:	4614      	mov	r4, r2
 801f38e:	f7ff ffdb 	bl	801f348 <__mcmp>
 801f392:	1e06      	subs	r6, r0, #0
 801f394:	d111      	bne.n	801f3ba <__mdiff+0x3a>
 801f396:	4631      	mov	r1, r6
 801f398:	4638      	mov	r0, r7
 801f39a:	f7ff fd57 	bl	801ee4c <_Balloc>
 801f39e:	4602      	mov	r2, r0
 801f3a0:	b928      	cbnz	r0, 801f3ae <__mdiff+0x2e>
 801f3a2:	f240 2132 	movw	r1, #562	; 0x232
 801f3a6:	4b3a      	ldr	r3, [pc, #232]	; (801f490 <__mdiff+0x110>)
 801f3a8:	483a      	ldr	r0, [pc, #232]	; (801f494 <__mdiff+0x114>)
 801f3aa:	f000 fd9b 	bl	801fee4 <__assert_func>
 801f3ae:	2301      	movs	r3, #1
 801f3b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801f3b4:	4610      	mov	r0, r2
 801f3b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3ba:	bfa4      	itt	ge
 801f3bc:	4623      	movge	r3, r4
 801f3be:	462c      	movge	r4, r5
 801f3c0:	4638      	mov	r0, r7
 801f3c2:	6861      	ldr	r1, [r4, #4]
 801f3c4:	bfa6      	itte	ge
 801f3c6:	461d      	movge	r5, r3
 801f3c8:	2600      	movge	r6, #0
 801f3ca:	2601      	movlt	r6, #1
 801f3cc:	f7ff fd3e 	bl	801ee4c <_Balloc>
 801f3d0:	4602      	mov	r2, r0
 801f3d2:	b918      	cbnz	r0, 801f3dc <__mdiff+0x5c>
 801f3d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f3d8:	4b2d      	ldr	r3, [pc, #180]	; (801f490 <__mdiff+0x110>)
 801f3da:	e7e5      	b.n	801f3a8 <__mdiff+0x28>
 801f3dc:	f102 0814 	add.w	r8, r2, #20
 801f3e0:	46c2      	mov	sl, r8
 801f3e2:	f04f 0c00 	mov.w	ip, #0
 801f3e6:	6927      	ldr	r7, [r4, #16]
 801f3e8:	60c6      	str	r6, [r0, #12]
 801f3ea:	692e      	ldr	r6, [r5, #16]
 801f3ec:	f104 0014 	add.w	r0, r4, #20
 801f3f0:	f105 0914 	add.w	r9, r5, #20
 801f3f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801f3f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f3fc:	3410      	adds	r4, #16
 801f3fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801f402:	f859 3b04 	ldr.w	r3, [r9], #4
 801f406:	fa1f f18b 	uxth.w	r1, fp
 801f40a:	448c      	add	ip, r1
 801f40c:	b299      	uxth	r1, r3
 801f40e:	0c1b      	lsrs	r3, r3, #16
 801f410:	ebac 0101 	sub.w	r1, ip, r1
 801f414:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f418:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801f41c:	b289      	uxth	r1, r1
 801f41e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801f422:	454e      	cmp	r6, r9
 801f424:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801f428:	f84a 3b04 	str.w	r3, [sl], #4
 801f42c:	d8e7      	bhi.n	801f3fe <__mdiff+0x7e>
 801f42e:	1b73      	subs	r3, r6, r5
 801f430:	3b15      	subs	r3, #21
 801f432:	f023 0303 	bic.w	r3, r3, #3
 801f436:	3515      	adds	r5, #21
 801f438:	3304      	adds	r3, #4
 801f43a:	42ae      	cmp	r6, r5
 801f43c:	bf38      	it	cc
 801f43e:	2304      	movcc	r3, #4
 801f440:	4418      	add	r0, r3
 801f442:	4443      	add	r3, r8
 801f444:	461e      	mov	r6, r3
 801f446:	4605      	mov	r5, r0
 801f448:	4575      	cmp	r5, lr
 801f44a:	d30e      	bcc.n	801f46a <__mdiff+0xea>
 801f44c:	f10e 0103 	add.w	r1, lr, #3
 801f450:	1a09      	subs	r1, r1, r0
 801f452:	f021 0103 	bic.w	r1, r1, #3
 801f456:	3803      	subs	r0, #3
 801f458:	4586      	cmp	lr, r0
 801f45a:	bf38      	it	cc
 801f45c:	2100      	movcc	r1, #0
 801f45e:	4419      	add	r1, r3
 801f460:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801f464:	b18b      	cbz	r3, 801f48a <__mdiff+0x10a>
 801f466:	6117      	str	r7, [r2, #16]
 801f468:	e7a4      	b.n	801f3b4 <__mdiff+0x34>
 801f46a:	f855 8b04 	ldr.w	r8, [r5], #4
 801f46e:	fa1f f188 	uxth.w	r1, r8
 801f472:	4461      	add	r1, ip
 801f474:	140c      	asrs	r4, r1, #16
 801f476:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f47a:	b289      	uxth	r1, r1
 801f47c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f480:	ea4f 4c24 	mov.w	ip, r4, asr #16
 801f484:	f846 1b04 	str.w	r1, [r6], #4
 801f488:	e7de      	b.n	801f448 <__mdiff+0xc8>
 801f48a:	3f01      	subs	r7, #1
 801f48c:	e7e8      	b.n	801f460 <__mdiff+0xe0>
 801f48e:	bf00      	nop
 801f490:	08021e77 	.word	0x08021e77
 801f494:	08021ee8 	.word	0x08021ee8

0801f498 <__d2b>:
 801f498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f49c:	2101      	movs	r1, #1
 801f49e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801f4a2:	4690      	mov	r8, r2
 801f4a4:	461d      	mov	r5, r3
 801f4a6:	f7ff fcd1 	bl	801ee4c <_Balloc>
 801f4aa:	4604      	mov	r4, r0
 801f4ac:	b930      	cbnz	r0, 801f4bc <__d2b+0x24>
 801f4ae:	4602      	mov	r2, r0
 801f4b0:	f240 310a 	movw	r1, #778	; 0x30a
 801f4b4:	4b24      	ldr	r3, [pc, #144]	; (801f548 <__d2b+0xb0>)
 801f4b6:	4825      	ldr	r0, [pc, #148]	; (801f54c <__d2b+0xb4>)
 801f4b8:	f000 fd14 	bl	801fee4 <__assert_func>
 801f4bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801f4c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801f4c4:	bb2d      	cbnz	r5, 801f512 <__d2b+0x7a>
 801f4c6:	9301      	str	r3, [sp, #4]
 801f4c8:	f1b8 0300 	subs.w	r3, r8, #0
 801f4cc:	d026      	beq.n	801f51c <__d2b+0x84>
 801f4ce:	4668      	mov	r0, sp
 801f4d0:	9300      	str	r3, [sp, #0]
 801f4d2:	f7ff fd83 	bl	801efdc <__lo0bits>
 801f4d6:	9900      	ldr	r1, [sp, #0]
 801f4d8:	b1f0      	cbz	r0, 801f518 <__d2b+0x80>
 801f4da:	9a01      	ldr	r2, [sp, #4]
 801f4dc:	f1c0 0320 	rsb	r3, r0, #32
 801f4e0:	fa02 f303 	lsl.w	r3, r2, r3
 801f4e4:	430b      	orrs	r3, r1
 801f4e6:	40c2      	lsrs	r2, r0
 801f4e8:	6163      	str	r3, [r4, #20]
 801f4ea:	9201      	str	r2, [sp, #4]
 801f4ec:	9b01      	ldr	r3, [sp, #4]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	bf14      	ite	ne
 801f4f2:	2102      	movne	r1, #2
 801f4f4:	2101      	moveq	r1, #1
 801f4f6:	61a3      	str	r3, [r4, #24]
 801f4f8:	6121      	str	r1, [r4, #16]
 801f4fa:	b1c5      	cbz	r5, 801f52e <__d2b+0x96>
 801f4fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f500:	4405      	add	r5, r0
 801f502:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f506:	603d      	str	r5, [r7, #0]
 801f508:	6030      	str	r0, [r6, #0]
 801f50a:	4620      	mov	r0, r4
 801f50c:	b002      	add	sp, #8
 801f50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f516:	e7d6      	b.n	801f4c6 <__d2b+0x2e>
 801f518:	6161      	str	r1, [r4, #20]
 801f51a:	e7e7      	b.n	801f4ec <__d2b+0x54>
 801f51c:	a801      	add	r0, sp, #4
 801f51e:	f7ff fd5d 	bl	801efdc <__lo0bits>
 801f522:	2101      	movs	r1, #1
 801f524:	9b01      	ldr	r3, [sp, #4]
 801f526:	6121      	str	r1, [r4, #16]
 801f528:	6163      	str	r3, [r4, #20]
 801f52a:	3020      	adds	r0, #32
 801f52c:	e7e5      	b.n	801f4fa <__d2b+0x62>
 801f52e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801f532:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f536:	6038      	str	r0, [r7, #0]
 801f538:	6918      	ldr	r0, [r3, #16]
 801f53a:	f7ff fd2f 	bl	801ef9c <__hi0bits>
 801f53e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801f542:	6031      	str	r1, [r6, #0]
 801f544:	e7e1      	b.n	801f50a <__d2b+0x72>
 801f546:	bf00      	nop
 801f548:	08021e77 	.word	0x08021e77
 801f54c:	08021ee8 	.word	0x08021ee8

0801f550 <_calloc_r>:
 801f550:	b570      	push	{r4, r5, r6, lr}
 801f552:	fba1 5402 	umull	r5, r4, r1, r2
 801f556:	b934      	cbnz	r4, 801f566 <_calloc_r+0x16>
 801f558:	4629      	mov	r1, r5
 801f55a:	f000 f875 	bl	801f648 <_malloc_r>
 801f55e:	4606      	mov	r6, r0
 801f560:	b928      	cbnz	r0, 801f56e <_calloc_r+0x1e>
 801f562:	4630      	mov	r0, r6
 801f564:	bd70      	pop	{r4, r5, r6, pc}
 801f566:	220c      	movs	r2, #12
 801f568:	2600      	movs	r6, #0
 801f56a:	6002      	str	r2, [r0, #0]
 801f56c:	e7f9      	b.n	801f562 <_calloc_r+0x12>
 801f56e:	462a      	mov	r2, r5
 801f570:	4621      	mov	r1, r4
 801f572:	f7fe f801 	bl	801d578 <memset>
 801f576:	e7f4      	b.n	801f562 <_calloc_r+0x12>

0801f578 <_free_r>:
 801f578:	b538      	push	{r3, r4, r5, lr}
 801f57a:	4605      	mov	r5, r0
 801f57c:	2900      	cmp	r1, #0
 801f57e:	d040      	beq.n	801f602 <_free_r+0x8a>
 801f580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f584:	1f0c      	subs	r4, r1, #4
 801f586:	2b00      	cmp	r3, #0
 801f588:	bfb8      	it	lt
 801f58a:	18e4      	addlt	r4, r4, r3
 801f58c:	f000 fe32 	bl	80201f4 <__malloc_lock>
 801f590:	4a1c      	ldr	r2, [pc, #112]	; (801f604 <_free_r+0x8c>)
 801f592:	6813      	ldr	r3, [r2, #0]
 801f594:	b933      	cbnz	r3, 801f5a4 <_free_r+0x2c>
 801f596:	6063      	str	r3, [r4, #4]
 801f598:	6014      	str	r4, [r2, #0]
 801f59a:	4628      	mov	r0, r5
 801f59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f5a0:	f000 be2e 	b.w	8020200 <__malloc_unlock>
 801f5a4:	42a3      	cmp	r3, r4
 801f5a6:	d908      	bls.n	801f5ba <_free_r+0x42>
 801f5a8:	6820      	ldr	r0, [r4, #0]
 801f5aa:	1821      	adds	r1, r4, r0
 801f5ac:	428b      	cmp	r3, r1
 801f5ae:	bf01      	itttt	eq
 801f5b0:	6819      	ldreq	r1, [r3, #0]
 801f5b2:	685b      	ldreq	r3, [r3, #4]
 801f5b4:	1809      	addeq	r1, r1, r0
 801f5b6:	6021      	streq	r1, [r4, #0]
 801f5b8:	e7ed      	b.n	801f596 <_free_r+0x1e>
 801f5ba:	461a      	mov	r2, r3
 801f5bc:	685b      	ldr	r3, [r3, #4]
 801f5be:	b10b      	cbz	r3, 801f5c4 <_free_r+0x4c>
 801f5c0:	42a3      	cmp	r3, r4
 801f5c2:	d9fa      	bls.n	801f5ba <_free_r+0x42>
 801f5c4:	6811      	ldr	r1, [r2, #0]
 801f5c6:	1850      	adds	r0, r2, r1
 801f5c8:	42a0      	cmp	r0, r4
 801f5ca:	d10b      	bne.n	801f5e4 <_free_r+0x6c>
 801f5cc:	6820      	ldr	r0, [r4, #0]
 801f5ce:	4401      	add	r1, r0
 801f5d0:	1850      	adds	r0, r2, r1
 801f5d2:	4283      	cmp	r3, r0
 801f5d4:	6011      	str	r1, [r2, #0]
 801f5d6:	d1e0      	bne.n	801f59a <_free_r+0x22>
 801f5d8:	6818      	ldr	r0, [r3, #0]
 801f5da:	685b      	ldr	r3, [r3, #4]
 801f5dc:	4401      	add	r1, r0
 801f5de:	6011      	str	r1, [r2, #0]
 801f5e0:	6053      	str	r3, [r2, #4]
 801f5e2:	e7da      	b.n	801f59a <_free_r+0x22>
 801f5e4:	d902      	bls.n	801f5ec <_free_r+0x74>
 801f5e6:	230c      	movs	r3, #12
 801f5e8:	602b      	str	r3, [r5, #0]
 801f5ea:	e7d6      	b.n	801f59a <_free_r+0x22>
 801f5ec:	6820      	ldr	r0, [r4, #0]
 801f5ee:	1821      	adds	r1, r4, r0
 801f5f0:	428b      	cmp	r3, r1
 801f5f2:	bf01      	itttt	eq
 801f5f4:	6819      	ldreq	r1, [r3, #0]
 801f5f6:	685b      	ldreq	r3, [r3, #4]
 801f5f8:	1809      	addeq	r1, r1, r0
 801f5fa:	6021      	streq	r1, [r4, #0]
 801f5fc:	6063      	str	r3, [r4, #4]
 801f5fe:	6054      	str	r4, [r2, #4]
 801f600:	e7cb      	b.n	801f59a <_free_r+0x22>
 801f602:	bd38      	pop	{r3, r4, r5, pc}
 801f604:	20004030 	.word	0x20004030

0801f608 <sbrk_aligned>:
 801f608:	b570      	push	{r4, r5, r6, lr}
 801f60a:	4e0e      	ldr	r6, [pc, #56]	; (801f644 <sbrk_aligned+0x3c>)
 801f60c:	460c      	mov	r4, r1
 801f60e:	6831      	ldr	r1, [r6, #0]
 801f610:	4605      	mov	r5, r0
 801f612:	b911      	cbnz	r1, 801f61a <sbrk_aligned+0x12>
 801f614:	f000 fb40 	bl	801fc98 <_sbrk_r>
 801f618:	6030      	str	r0, [r6, #0]
 801f61a:	4621      	mov	r1, r4
 801f61c:	4628      	mov	r0, r5
 801f61e:	f000 fb3b 	bl	801fc98 <_sbrk_r>
 801f622:	1c43      	adds	r3, r0, #1
 801f624:	d00a      	beq.n	801f63c <sbrk_aligned+0x34>
 801f626:	1cc4      	adds	r4, r0, #3
 801f628:	f024 0403 	bic.w	r4, r4, #3
 801f62c:	42a0      	cmp	r0, r4
 801f62e:	d007      	beq.n	801f640 <sbrk_aligned+0x38>
 801f630:	1a21      	subs	r1, r4, r0
 801f632:	4628      	mov	r0, r5
 801f634:	f000 fb30 	bl	801fc98 <_sbrk_r>
 801f638:	3001      	adds	r0, #1
 801f63a:	d101      	bne.n	801f640 <sbrk_aligned+0x38>
 801f63c:	f04f 34ff 	mov.w	r4, #4294967295
 801f640:	4620      	mov	r0, r4
 801f642:	bd70      	pop	{r4, r5, r6, pc}
 801f644:	20004034 	.word	0x20004034

0801f648 <_malloc_r>:
 801f648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f64c:	1ccd      	adds	r5, r1, #3
 801f64e:	f025 0503 	bic.w	r5, r5, #3
 801f652:	3508      	adds	r5, #8
 801f654:	2d0c      	cmp	r5, #12
 801f656:	bf38      	it	cc
 801f658:	250c      	movcc	r5, #12
 801f65a:	2d00      	cmp	r5, #0
 801f65c:	4607      	mov	r7, r0
 801f65e:	db01      	blt.n	801f664 <_malloc_r+0x1c>
 801f660:	42a9      	cmp	r1, r5
 801f662:	d905      	bls.n	801f670 <_malloc_r+0x28>
 801f664:	230c      	movs	r3, #12
 801f666:	2600      	movs	r6, #0
 801f668:	603b      	str	r3, [r7, #0]
 801f66a:	4630      	mov	r0, r6
 801f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f670:	4e2e      	ldr	r6, [pc, #184]	; (801f72c <_malloc_r+0xe4>)
 801f672:	f000 fdbf 	bl	80201f4 <__malloc_lock>
 801f676:	6833      	ldr	r3, [r6, #0]
 801f678:	461c      	mov	r4, r3
 801f67a:	bb34      	cbnz	r4, 801f6ca <_malloc_r+0x82>
 801f67c:	4629      	mov	r1, r5
 801f67e:	4638      	mov	r0, r7
 801f680:	f7ff ffc2 	bl	801f608 <sbrk_aligned>
 801f684:	1c43      	adds	r3, r0, #1
 801f686:	4604      	mov	r4, r0
 801f688:	d14d      	bne.n	801f726 <_malloc_r+0xde>
 801f68a:	6834      	ldr	r4, [r6, #0]
 801f68c:	4626      	mov	r6, r4
 801f68e:	2e00      	cmp	r6, #0
 801f690:	d140      	bne.n	801f714 <_malloc_r+0xcc>
 801f692:	6823      	ldr	r3, [r4, #0]
 801f694:	4631      	mov	r1, r6
 801f696:	4638      	mov	r0, r7
 801f698:	eb04 0803 	add.w	r8, r4, r3
 801f69c:	f000 fafc 	bl	801fc98 <_sbrk_r>
 801f6a0:	4580      	cmp	r8, r0
 801f6a2:	d13a      	bne.n	801f71a <_malloc_r+0xd2>
 801f6a4:	6821      	ldr	r1, [r4, #0]
 801f6a6:	3503      	adds	r5, #3
 801f6a8:	1a6d      	subs	r5, r5, r1
 801f6aa:	f025 0503 	bic.w	r5, r5, #3
 801f6ae:	3508      	adds	r5, #8
 801f6b0:	2d0c      	cmp	r5, #12
 801f6b2:	bf38      	it	cc
 801f6b4:	250c      	movcc	r5, #12
 801f6b6:	4638      	mov	r0, r7
 801f6b8:	4629      	mov	r1, r5
 801f6ba:	f7ff ffa5 	bl	801f608 <sbrk_aligned>
 801f6be:	3001      	adds	r0, #1
 801f6c0:	d02b      	beq.n	801f71a <_malloc_r+0xd2>
 801f6c2:	6823      	ldr	r3, [r4, #0]
 801f6c4:	442b      	add	r3, r5
 801f6c6:	6023      	str	r3, [r4, #0]
 801f6c8:	e00e      	b.n	801f6e8 <_malloc_r+0xa0>
 801f6ca:	6822      	ldr	r2, [r4, #0]
 801f6cc:	1b52      	subs	r2, r2, r5
 801f6ce:	d41e      	bmi.n	801f70e <_malloc_r+0xc6>
 801f6d0:	2a0b      	cmp	r2, #11
 801f6d2:	d916      	bls.n	801f702 <_malloc_r+0xba>
 801f6d4:	1961      	adds	r1, r4, r5
 801f6d6:	42a3      	cmp	r3, r4
 801f6d8:	6025      	str	r5, [r4, #0]
 801f6da:	bf18      	it	ne
 801f6dc:	6059      	strne	r1, [r3, #4]
 801f6de:	6863      	ldr	r3, [r4, #4]
 801f6e0:	bf08      	it	eq
 801f6e2:	6031      	streq	r1, [r6, #0]
 801f6e4:	5162      	str	r2, [r4, r5]
 801f6e6:	604b      	str	r3, [r1, #4]
 801f6e8:	4638      	mov	r0, r7
 801f6ea:	f104 060b 	add.w	r6, r4, #11
 801f6ee:	f000 fd87 	bl	8020200 <__malloc_unlock>
 801f6f2:	f026 0607 	bic.w	r6, r6, #7
 801f6f6:	1d23      	adds	r3, r4, #4
 801f6f8:	1af2      	subs	r2, r6, r3
 801f6fa:	d0b6      	beq.n	801f66a <_malloc_r+0x22>
 801f6fc:	1b9b      	subs	r3, r3, r6
 801f6fe:	50a3      	str	r3, [r4, r2]
 801f700:	e7b3      	b.n	801f66a <_malloc_r+0x22>
 801f702:	6862      	ldr	r2, [r4, #4]
 801f704:	42a3      	cmp	r3, r4
 801f706:	bf0c      	ite	eq
 801f708:	6032      	streq	r2, [r6, #0]
 801f70a:	605a      	strne	r2, [r3, #4]
 801f70c:	e7ec      	b.n	801f6e8 <_malloc_r+0xa0>
 801f70e:	4623      	mov	r3, r4
 801f710:	6864      	ldr	r4, [r4, #4]
 801f712:	e7b2      	b.n	801f67a <_malloc_r+0x32>
 801f714:	4634      	mov	r4, r6
 801f716:	6876      	ldr	r6, [r6, #4]
 801f718:	e7b9      	b.n	801f68e <_malloc_r+0x46>
 801f71a:	230c      	movs	r3, #12
 801f71c:	4638      	mov	r0, r7
 801f71e:	603b      	str	r3, [r7, #0]
 801f720:	f000 fd6e 	bl	8020200 <__malloc_unlock>
 801f724:	e7a1      	b.n	801f66a <_malloc_r+0x22>
 801f726:	6025      	str	r5, [r4, #0]
 801f728:	e7de      	b.n	801f6e8 <_malloc_r+0xa0>
 801f72a:	bf00      	nop
 801f72c:	20004030 	.word	0x20004030

0801f730 <__ssputs_r>:
 801f730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f734:	688e      	ldr	r6, [r1, #8]
 801f736:	4682      	mov	sl, r0
 801f738:	429e      	cmp	r6, r3
 801f73a:	460c      	mov	r4, r1
 801f73c:	4690      	mov	r8, r2
 801f73e:	461f      	mov	r7, r3
 801f740:	d838      	bhi.n	801f7b4 <__ssputs_r+0x84>
 801f742:	898a      	ldrh	r2, [r1, #12]
 801f744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f748:	d032      	beq.n	801f7b0 <__ssputs_r+0x80>
 801f74a:	6825      	ldr	r5, [r4, #0]
 801f74c:	6909      	ldr	r1, [r1, #16]
 801f74e:	3301      	adds	r3, #1
 801f750:	eba5 0901 	sub.w	r9, r5, r1
 801f754:	6965      	ldr	r5, [r4, #20]
 801f756:	444b      	add	r3, r9
 801f758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f75c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f760:	106d      	asrs	r5, r5, #1
 801f762:	429d      	cmp	r5, r3
 801f764:	bf38      	it	cc
 801f766:	461d      	movcc	r5, r3
 801f768:	0553      	lsls	r3, r2, #21
 801f76a:	d531      	bpl.n	801f7d0 <__ssputs_r+0xa0>
 801f76c:	4629      	mov	r1, r5
 801f76e:	f7ff ff6b 	bl	801f648 <_malloc_r>
 801f772:	4606      	mov	r6, r0
 801f774:	b950      	cbnz	r0, 801f78c <__ssputs_r+0x5c>
 801f776:	230c      	movs	r3, #12
 801f778:	f04f 30ff 	mov.w	r0, #4294967295
 801f77c:	f8ca 3000 	str.w	r3, [sl]
 801f780:	89a3      	ldrh	r3, [r4, #12]
 801f782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f786:	81a3      	strh	r3, [r4, #12]
 801f788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f78c:	464a      	mov	r2, r9
 801f78e:	6921      	ldr	r1, [r4, #16]
 801f790:	f7fd feca 	bl	801d528 <memcpy>
 801f794:	89a3      	ldrh	r3, [r4, #12]
 801f796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f79e:	81a3      	strh	r3, [r4, #12]
 801f7a0:	6126      	str	r6, [r4, #16]
 801f7a2:	444e      	add	r6, r9
 801f7a4:	6026      	str	r6, [r4, #0]
 801f7a6:	463e      	mov	r6, r7
 801f7a8:	6165      	str	r5, [r4, #20]
 801f7aa:	eba5 0509 	sub.w	r5, r5, r9
 801f7ae:	60a5      	str	r5, [r4, #8]
 801f7b0:	42be      	cmp	r6, r7
 801f7b2:	d900      	bls.n	801f7b6 <__ssputs_r+0x86>
 801f7b4:	463e      	mov	r6, r7
 801f7b6:	4632      	mov	r2, r6
 801f7b8:	4641      	mov	r1, r8
 801f7ba:	6820      	ldr	r0, [r4, #0]
 801f7bc:	f7fd fec2 	bl	801d544 <memmove>
 801f7c0:	68a3      	ldr	r3, [r4, #8]
 801f7c2:	2000      	movs	r0, #0
 801f7c4:	1b9b      	subs	r3, r3, r6
 801f7c6:	60a3      	str	r3, [r4, #8]
 801f7c8:	6823      	ldr	r3, [r4, #0]
 801f7ca:	4433      	add	r3, r6
 801f7cc:	6023      	str	r3, [r4, #0]
 801f7ce:	e7db      	b.n	801f788 <__ssputs_r+0x58>
 801f7d0:	462a      	mov	r2, r5
 801f7d2:	f000 fd1b 	bl	802020c <_realloc_r>
 801f7d6:	4606      	mov	r6, r0
 801f7d8:	2800      	cmp	r0, #0
 801f7da:	d1e1      	bne.n	801f7a0 <__ssputs_r+0x70>
 801f7dc:	4650      	mov	r0, sl
 801f7de:	6921      	ldr	r1, [r4, #16]
 801f7e0:	f7ff feca 	bl	801f578 <_free_r>
 801f7e4:	e7c7      	b.n	801f776 <__ssputs_r+0x46>
	...

0801f7e8 <_svfiprintf_r>:
 801f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7ec:	4698      	mov	r8, r3
 801f7ee:	898b      	ldrh	r3, [r1, #12]
 801f7f0:	4607      	mov	r7, r0
 801f7f2:	061b      	lsls	r3, r3, #24
 801f7f4:	460d      	mov	r5, r1
 801f7f6:	4614      	mov	r4, r2
 801f7f8:	b09d      	sub	sp, #116	; 0x74
 801f7fa:	d50e      	bpl.n	801f81a <_svfiprintf_r+0x32>
 801f7fc:	690b      	ldr	r3, [r1, #16]
 801f7fe:	b963      	cbnz	r3, 801f81a <_svfiprintf_r+0x32>
 801f800:	2140      	movs	r1, #64	; 0x40
 801f802:	f7ff ff21 	bl	801f648 <_malloc_r>
 801f806:	6028      	str	r0, [r5, #0]
 801f808:	6128      	str	r0, [r5, #16]
 801f80a:	b920      	cbnz	r0, 801f816 <_svfiprintf_r+0x2e>
 801f80c:	230c      	movs	r3, #12
 801f80e:	603b      	str	r3, [r7, #0]
 801f810:	f04f 30ff 	mov.w	r0, #4294967295
 801f814:	e0d1      	b.n	801f9ba <_svfiprintf_r+0x1d2>
 801f816:	2340      	movs	r3, #64	; 0x40
 801f818:	616b      	str	r3, [r5, #20]
 801f81a:	2300      	movs	r3, #0
 801f81c:	9309      	str	r3, [sp, #36]	; 0x24
 801f81e:	2320      	movs	r3, #32
 801f820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f824:	2330      	movs	r3, #48	; 0x30
 801f826:	f04f 0901 	mov.w	r9, #1
 801f82a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f82e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801f9d4 <_svfiprintf_r+0x1ec>
 801f832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f836:	4623      	mov	r3, r4
 801f838:	469a      	mov	sl, r3
 801f83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f83e:	b10a      	cbz	r2, 801f844 <_svfiprintf_r+0x5c>
 801f840:	2a25      	cmp	r2, #37	; 0x25
 801f842:	d1f9      	bne.n	801f838 <_svfiprintf_r+0x50>
 801f844:	ebba 0b04 	subs.w	fp, sl, r4
 801f848:	d00b      	beq.n	801f862 <_svfiprintf_r+0x7a>
 801f84a:	465b      	mov	r3, fp
 801f84c:	4622      	mov	r2, r4
 801f84e:	4629      	mov	r1, r5
 801f850:	4638      	mov	r0, r7
 801f852:	f7ff ff6d 	bl	801f730 <__ssputs_r>
 801f856:	3001      	adds	r0, #1
 801f858:	f000 80aa 	beq.w	801f9b0 <_svfiprintf_r+0x1c8>
 801f85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f85e:	445a      	add	r2, fp
 801f860:	9209      	str	r2, [sp, #36]	; 0x24
 801f862:	f89a 3000 	ldrb.w	r3, [sl]
 801f866:	2b00      	cmp	r3, #0
 801f868:	f000 80a2 	beq.w	801f9b0 <_svfiprintf_r+0x1c8>
 801f86c:	2300      	movs	r3, #0
 801f86e:	f04f 32ff 	mov.w	r2, #4294967295
 801f872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f876:	f10a 0a01 	add.w	sl, sl, #1
 801f87a:	9304      	str	r3, [sp, #16]
 801f87c:	9307      	str	r3, [sp, #28]
 801f87e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f882:	931a      	str	r3, [sp, #104]	; 0x68
 801f884:	4654      	mov	r4, sl
 801f886:	2205      	movs	r2, #5
 801f888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f88c:	4851      	ldr	r0, [pc, #324]	; (801f9d4 <_svfiprintf_r+0x1ec>)
 801f88e:	f7ff facf 	bl	801ee30 <memchr>
 801f892:	9a04      	ldr	r2, [sp, #16]
 801f894:	b9d8      	cbnz	r0, 801f8ce <_svfiprintf_r+0xe6>
 801f896:	06d0      	lsls	r0, r2, #27
 801f898:	bf44      	itt	mi
 801f89a:	2320      	movmi	r3, #32
 801f89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8a0:	0711      	lsls	r1, r2, #28
 801f8a2:	bf44      	itt	mi
 801f8a4:	232b      	movmi	r3, #43	; 0x2b
 801f8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8aa:	f89a 3000 	ldrb.w	r3, [sl]
 801f8ae:	2b2a      	cmp	r3, #42	; 0x2a
 801f8b0:	d015      	beq.n	801f8de <_svfiprintf_r+0xf6>
 801f8b2:	4654      	mov	r4, sl
 801f8b4:	2000      	movs	r0, #0
 801f8b6:	f04f 0c0a 	mov.w	ip, #10
 801f8ba:	9a07      	ldr	r2, [sp, #28]
 801f8bc:	4621      	mov	r1, r4
 801f8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8c2:	3b30      	subs	r3, #48	; 0x30
 801f8c4:	2b09      	cmp	r3, #9
 801f8c6:	d94e      	bls.n	801f966 <_svfiprintf_r+0x17e>
 801f8c8:	b1b0      	cbz	r0, 801f8f8 <_svfiprintf_r+0x110>
 801f8ca:	9207      	str	r2, [sp, #28]
 801f8cc:	e014      	b.n	801f8f8 <_svfiprintf_r+0x110>
 801f8ce:	eba0 0308 	sub.w	r3, r0, r8
 801f8d2:	fa09 f303 	lsl.w	r3, r9, r3
 801f8d6:	4313      	orrs	r3, r2
 801f8d8:	46a2      	mov	sl, r4
 801f8da:	9304      	str	r3, [sp, #16]
 801f8dc:	e7d2      	b.n	801f884 <_svfiprintf_r+0x9c>
 801f8de:	9b03      	ldr	r3, [sp, #12]
 801f8e0:	1d19      	adds	r1, r3, #4
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	9103      	str	r1, [sp, #12]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	bfbb      	ittet	lt
 801f8ea:	425b      	neglt	r3, r3
 801f8ec:	f042 0202 	orrlt.w	r2, r2, #2
 801f8f0:	9307      	strge	r3, [sp, #28]
 801f8f2:	9307      	strlt	r3, [sp, #28]
 801f8f4:	bfb8      	it	lt
 801f8f6:	9204      	strlt	r2, [sp, #16]
 801f8f8:	7823      	ldrb	r3, [r4, #0]
 801f8fa:	2b2e      	cmp	r3, #46	; 0x2e
 801f8fc:	d10c      	bne.n	801f918 <_svfiprintf_r+0x130>
 801f8fe:	7863      	ldrb	r3, [r4, #1]
 801f900:	2b2a      	cmp	r3, #42	; 0x2a
 801f902:	d135      	bne.n	801f970 <_svfiprintf_r+0x188>
 801f904:	9b03      	ldr	r3, [sp, #12]
 801f906:	3402      	adds	r4, #2
 801f908:	1d1a      	adds	r2, r3, #4
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	9203      	str	r2, [sp, #12]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	bfb8      	it	lt
 801f912:	f04f 33ff 	movlt.w	r3, #4294967295
 801f916:	9305      	str	r3, [sp, #20]
 801f918:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801f9d8 <_svfiprintf_r+0x1f0>
 801f91c:	2203      	movs	r2, #3
 801f91e:	4650      	mov	r0, sl
 801f920:	7821      	ldrb	r1, [r4, #0]
 801f922:	f7ff fa85 	bl	801ee30 <memchr>
 801f926:	b140      	cbz	r0, 801f93a <_svfiprintf_r+0x152>
 801f928:	2340      	movs	r3, #64	; 0x40
 801f92a:	eba0 000a 	sub.w	r0, r0, sl
 801f92e:	fa03 f000 	lsl.w	r0, r3, r0
 801f932:	9b04      	ldr	r3, [sp, #16]
 801f934:	3401      	adds	r4, #1
 801f936:	4303      	orrs	r3, r0
 801f938:	9304      	str	r3, [sp, #16]
 801f93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f93e:	2206      	movs	r2, #6
 801f940:	4826      	ldr	r0, [pc, #152]	; (801f9dc <_svfiprintf_r+0x1f4>)
 801f942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f946:	f7ff fa73 	bl	801ee30 <memchr>
 801f94a:	2800      	cmp	r0, #0
 801f94c:	d038      	beq.n	801f9c0 <_svfiprintf_r+0x1d8>
 801f94e:	4b24      	ldr	r3, [pc, #144]	; (801f9e0 <_svfiprintf_r+0x1f8>)
 801f950:	bb1b      	cbnz	r3, 801f99a <_svfiprintf_r+0x1b2>
 801f952:	9b03      	ldr	r3, [sp, #12]
 801f954:	3307      	adds	r3, #7
 801f956:	f023 0307 	bic.w	r3, r3, #7
 801f95a:	3308      	adds	r3, #8
 801f95c:	9303      	str	r3, [sp, #12]
 801f95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f960:	4433      	add	r3, r6
 801f962:	9309      	str	r3, [sp, #36]	; 0x24
 801f964:	e767      	b.n	801f836 <_svfiprintf_r+0x4e>
 801f966:	460c      	mov	r4, r1
 801f968:	2001      	movs	r0, #1
 801f96a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f96e:	e7a5      	b.n	801f8bc <_svfiprintf_r+0xd4>
 801f970:	2300      	movs	r3, #0
 801f972:	f04f 0c0a 	mov.w	ip, #10
 801f976:	4619      	mov	r1, r3
 801f978:	3401      	adds	r4, #1
 801f97a:	9305      	str	r3, [sp, #20]
 801f97c:	4620      	mov	r0, r4
 801f97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f982:	3a30      	subs	r2, #48	; 0x30
 801f984:	2a09      	cmp	r2, #9
 801f986:	d903      	bls.n	801f990 <_svfiprintf_r+0x1a8>
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d0c5      	beq.n	801f918 <_svfiprintf_r+0x130>
 801f98c:	9105      	str	r1, [sp, #20]
 801f98e:	e7c3      	b.n	801f918 <_svfiprintf_r+0x130>
 801f990:	4604      	mov	r4, r0
 801f992:	2301      	movs	r3, #1
 801f994:	fb0c 2101 	mla	r1, ip, r1, r2
 801f998:	e7f0      	b.n	801f97c <_svfiprintf_r+0x194>
 801f99a:	ab03      	add	r3, sp, #12
 801f99c:	9300      	str	r3, [sp, #0]
 801f99e:	462a      	mov	r2, r5
 801f9a0:	4638      	mov	r0, r7
 801f9a2:	4b10      	ldr	r3, [pc, #64]	; (801f9e4 <_svfiprintf_r+0x1fc>)
 801f9a4:	a904      	add	r1, sp, #16
 801f9a6:	f7fd fe8d 	bl	801d6c4 <_printf_float>
 801f9aa:	1c42      	adds	r2, r0, #1
 801f9ac:	4606      	mov	r6, r0
 801f9ae:	d1d6      	bne.n	801f95e <_svfiprintf_r+0x176>
 801f9b0:	89ab      	ldrh	r3, [r5, #12]
 801f9b2:	065b      	lsls	r3, r3, #25
 801f9b4:	f53f af2c 	bmi.w	801f810 <_svfiprintf_r+0x28>
 801f9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9ba:	b01d      	add	sp, #116	; 0x74
 801f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9c0:	ab03      	add	r3, sp, #12
 801f9c2:	9300      	str	r3, [sp, #0]
 801f9c4:	462a      	mov	r2, r5
 801f9c6:	4638      	mov	r0, r7
 801f9c8:	4b06      	ldr	r3, [pc, #24]	; (801f9e4 <_svfiprintf_r+0x1fc>)
 801f9ca:	a904      	add	r1, sp, #16
 801f9cc:	f7fe f916 	bl	801dbfc <_printf_i>
 801f9d0:	e7eb      	b.n	801f9aa <_svfiprintf_r+0x1c2>
 801f9d2:	bf00      	nop
 801f9d4:	08022044 	.word	0x08022044
 801f9d8:	0802204a 	.word	0x0802204a
 801f9dc:	0802204e 	.word	0x0802204e
 801f9e0:	0801d6c5 	.word	0x0801d6c5
 801f9e4:	0801f731 	.word	0x0801f731

0801f9e8 <__sfputc_r>:
 801f9e8:	6893      	ldr	r3, [r2, #8]
 801f9ea:	b410      	push	{r4}
 801f9ec:	3b01      	subs	r3, #1
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	6093      	str	r3, [r2, #8]
 801f9f2:	da07      	bge.n	801fa04 <__sfputc_r+0x1c>
 801f9f4:	6994      	ldr	r4, [r2, #24]
 801f9f6:	42a3      	cmp	r3, r4
 801f9f8:	db01      	blt.n	801f9fe <__sfputc_r+0x16>
 801f9fa:	290a      	cmp	r1, #10
 801f9fc:	d102      	bne.n	801fa04 <__sfputc_r+0x1c>
 801f9fe:	bc10      	pop	{r4}
 801fa00:	f000 b99e 	b.w	801fd40 <__swbuf_r>
 801fa04:	6813      	ldr	r3, [r2, #0]
 801fa06:	1c58      	adds	r0, r3, #1
 801fa08:	6010      	str	r0, [r2, #0]
 801fa0a:	7019      	strb	r1, [r3, #0]
 801fa0c:	4608      	mov	r0, r1
 801fa0e:	bc10      	pop	{r4}
 801fa10:	4770      	bx	lr

0801fa12 <__sfputs_r>:
 801fa12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa14:	4606      	mov	r6, r0
 801fa16:	460f      	mov	r7, r1
 801fa18:	4614      	mov	r4, r2
 801fa1a:	18d5      	adds	r5, r2, r3
 801fa1c:	42ac      	cmp	r4, r5
 801fa1e:	d101      	bne.n	801fa24 <__sfputs_r+0x12>
 801fa20:	2000      	movs	r0, #0
 801fa22:	e007      	b.n	801fa34 <__sfputs_r+0x22>
 801fa24:	463a      	mov	r2, r7
 801fa26:	4630      	mov	r0, r6
 801fa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa2c:	f7ff ffdc 	bl	801f9e8 <__sfputc_r>
 801fa30:	1c43      	adds	r3, r0, #1
 801fa32:	d1f3      	bne.n	801fa1c <__sfputs_r+0xa>
 801fa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fa38 <_vfiprintf_r>:
 801fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa3c:	460d      	mov	r5, r1
 801fa3e:	4614      	mov	r4, r2
 801fa40:	4698      	mov	r8, r3
 801fa42:	4606      	mov	r6, r0
 801fa44:	b09d      	sub	sp, #116	; 0x74
 801fa46:	b118      	cbz	r0, 801fa50 <_vfiprintf_r+0x18>
 801fa48:	6983      	ldr	r3, [r0, #24]
 801fa4a:	b90b      	cbnz	r3, 801fa50 <_vfiprintf_r+0x18>
 801fa4c:	f7ff f942 	bl	801ecd4 <__sinit>
 801fa50:	4b89      	ldr	r3, [pc, #548]	; (801fc78 <_vfiprintf_r+0x240>)
 801fa52:	429d      	cmp	r5, r3
 801fa54:	d11b      	bne.n	801fa8e <_vfiprintf_r+0x56>
 801fa56:	6875      	ldr	r5, [r6, #4]
 801fa58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa5a:	07d9      	lsls	r1, r3, #31
 801fa5c:	d405      	bmi.n	801fa6a <_vfiprintf_r+0x32>
 801fa5e:	89ab      	ldrh	r3, [r5, #12]
 801fa60:	059a      	lsls	r2, r3, #22
 801fa62:	d402      	bmi.n	801fa6a <_vfiprintf_r+0x32>
 801fa64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa66:	f7ff f9d8 	bl	801ee1a <__retarget_lock_acquire_recursive>
 801fa6a:	89ab      	ldrh	r3, [r5, #12]
 801fa6c:	071b      	lsls	r3, r3, #28
 801fa6e:	d501      	bpl.n	801fa74 <_vfiprintf_r+0x3c>
 801fa70:	692b      	ldr	r3, [r5, #16]
 801fa72:	b9eb      	cbnz	r3, 801fab0 <_vfiprintf_r+0x78>
 801fa74:	4629      	mov	r1, r5
 801fa76:	4630      	mov	r0, r6
 801fa78:	f000 f9c6 	bl	801fe08 <__swsetup_r>
 801fa7c:	b1c0      	cbz	r0, 801fab0 <_vfiprintf_r+0x78>
 801fa7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa80:	07dc      	lsls	r4, r3, #31
 801fa82:	d50e      	bpl.n	801faa2 <_vfiprintf_r+0x6a>
 801fa84:	f04f 30ff 	mov.w	r0, #4294967295
 801fa88:	b01d      	add	sp, #116	; 0x74
 801fa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa8e:	4b7b      	ldr	r3, [pc, #492]	; (801fc7c <_vfiprintf_r+0x244>)
 801fa90:	429d      	cmp	r5, r3
 801fa92:	d101      	bne.n	801fa98 <_vfiprintf_r+0x60>
 801fa94:	68b5      	ldr	r5, [r6, #8]
 801fa96:	e7df      	b.n	801fa58 <_vfiprintf_r+0x20>
 801fa98:	4b79      	ldr	r3, [pc, #484]	; (801fc80 <_vfiprintf_r+0x248>)
 801fa9a:	429d      	cmp	r5, r3
 801fa9c:	bf08      	it	eq
 801fa9e:	68f5      	ldreq	r5, [r6, #12]
 801faa0:	e7da      	b.n	801fa58 <_vfiprintf_r+0x20>
 801faa2:	89ab      	ldrh	r3, [r5, #12]
 801faa4:	0598      	lsls	r0, r3, #22
 801faa6:	d4ed      	bmi.n	801fa84 <_vfiprintf_r+0x4c>
 801faa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801faaa:	f7ff f9b7 	bl	801ee1c <__retarget_lock_release_recursive>
 801faae:	e7e9      	b.n	801fa84 <_vfiprintf_r+0x4c>
 801fab0:	2300      	movs	r3, #0
 801fab2:	9309      	str	r3, [sp, #36]	; 0x24
 801fab4:	2320      	movs	r3, #32
 801fab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801faba:	2330      	movs	r3, #48	; 0x30
 801fabc:	f04f 0901 	mov.w	r9, #1
 801fac0:	f8cd 800c 	str.w	r8, [sp, #12]
 801fac4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801fc84 <_vfiprintf_r+0x24c>
 801fac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801facc:	4623      	mov	r3, r4
 801face:	469a      	mov	sl, r3
 801fad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fad4:	b10a      	cbz	r2, 801fada <_vfiprintf_r+0xa2>
 801fad6:	2a25      	cmp	r2, #37	; 0x25
 801fad8:	d1f9      	bne.n	801face <_vfiprintf_r+0x96>
 801fada:	ebba 0b04 	subs.w	fp, sl, r4
 801fade:	d00b      	beq.n	801faf8 <_vfiprintf_r+0xc0>
 801fae0:	465b      	mov	r3, fp
 801fae2:	4622      	mov	r2, r4
 801fae4:	4629      	mov	r1, r5
 801fae6:	4630      	mov	r0, r6
 801fae8:	f7ff ff93 	bl	801fa12 <__sfputs_r>
 801faec:	3001      	adds	r0, #1
 801faee:	f000 80aa 	beq.w	801fc46 <_vfiprintf_r+0x20e>
 801faf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801faf4:	445a      	add	r2, fp
 801faf6:	9209      	str	r2, [sp, #36]	; 0x24
 801faf8:	f89a 3000 	ldrb.w	r3, [sl]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	f000 80a2 	beq.w	801fc46 <_vfiprintf_r+0x20e>
 801fb02:	2300      	movs	r3, #0
 801fb04:	f04f 32ff 	mov.w	r2, #4294967295
 801fb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fb0c:	f10a 0a01 	add.w	sl, sl, #1
 801fb10:	9304      	str	r3, [sp, #16]
 801fb12:	9307      	str	r3, [sp, #28]
 801fb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fb18:	931a      	str	r3, [sp, #104]	; 0x68
 801fb1a:	4654      	mov	r4, sl
 801fb1c:	2205      	movs	r2, #5
 801fb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb22:	4858      	ldr	r0, [pc, #352]	; (801fc84 <_vfiprintf_r+0x24c>)
 801fb24:	f7ff f984 	bl	801ee30 <memchr>
 801fb28:	9a04      	ldr	r2, [sp, #16]
 801fb2a:	b9d8      	cbnz	r0, 801fb64 <_vfiprintf_r+0x12c>
 801fb2c:	06d1      	lsls	r1, r2, #27
 801fb2e:	bf44      	itt	mi
 801fb30:	2320      	movmi	r3, #32
 801fb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb36:	0713      	lsls	r3, r2, #28
 801fb38:	bf44      	itt	mi
 801fb3a:	232b      	movmi	r3, #43	; 0x2b
 801fb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb40:	f89a 3000 	ldrb.w	r3, [sl]
 801fb44:	2b2a      	cmp	r3, #42	; 0x2a
 801fb46:	d015      	beq.n	801fb74 <_vfiprintf_r+0x13c>
 801fb48:	4654      	mov	r4, sl
 801fb4a:	2000      	movs	r0, #0
 801fb4c:	f04f 0c0a 	mov.w	ip, #10
 801fb50:	9a07      	ldr	r2, [sp, #28]
 801fb52:	4621      	mov	r1, r4
 801fb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fb58:	3b30      	subs	r3, #48	; 0x30
 801fb5a:	2b09      	cmp	r3, #9
 801fb5c:	d94e      	bls.n	801fbfc <_vfiprintf_r+0x1c4>
 801fb5e:	b1b0      	cbz	r0, 801fb8e <_vfiprintf_r+0x156>
 801fb60:	9207      	str	r2, [sp, #28]
 801fb62:	e014      	b.n	801fb8e <_vfiprintf_r+0x156>
 801fb64:	eba0 0308 	sub.w	r3, r0, r8
 801fb68:	fa09 f303 	lsl.w	r3, r9, r3
 801fb6c:	4313      	orrs	r3, r2
 801fb6e:	46a2      	mov	sl, r4
 801fb70:	9304      	str	r3, [sp, #16]
 801fb72:	e7d2      	b.n	801fb1a <_vfiprintf_r+0xe2>
 801fb74:	9b03      	ldr	r3, [sp, #12]
 801fb76:	1d19      	adds	r1, r3, #4
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	9103      	str	r1, [sp, #12]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	bfbb      	ittet	lt
 801fb80:	425b      	neglt	r3, r3
 801fb82:	f042 0202 	orrlt.w	r2, r2, #2
 801fb86:	9307      	strge	r3, [sp, #28]
 801fb88:	9307      	strlt	r3, [sp, #28]
 801fb8a:	bfb8      	it	lt
 801fb8c:	9204      	strlt	r2, [sp, #16]
 801fb8e:	7823      	ldrb	r3, [r4, #0]
 801fb90:	2b2e      	cmp	r3, #46	; 0x2e
 801fb92:	d10c      	bne.n	801fbae <_vfiprintf_r+0x176>
 801fb94:	7863      	ldrb	r3, [r4, #1]
 801fb96:	2b2a      	cmp	r3, #42	; 0x2a
 801fb98:	d135      	bne.n	801fc06 <_vfiprintf_r+0x1ce>
 801fb9a:	9b03      	ldr	r3, [sp, #12]
 801fb9c:	3402      	adds	r4, #2
 801fb9e:	1d1a      	adds	r2, r3, #4
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	9203      	str	r2, [sp, #12]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	bfb8      	it	lt
 801fba8:	f04f 33ff 	movlt.w	r3, #4294967295
 801fbac:	9305      	str	r3, [sp, #20]
 801fbae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801fc88 <_vfiprintf_r+0x250>
 801fbb2:	2203      	movs	r2, #3
 801fbb4:	4650      	mov	r0, sl
 801fbb6:	7821      	ldrb	r1, [r4, #0]
 801fbb8:	f7ff f93a 	bl	801ee30 <memchr>
 801fbbc:	b140      	cbz	r0, 801fbd0 <_vfiprintf_r+0x198>
 801fbbe:	2340      	movs	r3, #64	; 0x40
 801fbc0:	eba0 000a 	sub.w	r0, r0, sl
 801fbc4:	fa03 f000 	lsl.w	r0, r3, r0
 801fbc8:	9b04      	ldr	r3, [sp, #16]
 801fbca:	3401      	adds	r4, #1
 801fbcc:	4303      	orrs	r3, r0
 801fbce:	9304      	str	r3, [sp, #16]
 801fbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbd4:	2206      	movs	r2, #6
 801fbd6:	482d      	ldr	r0, [pc, #180]	; (801fc8c <_vfiprintf_r+0x254>)
 801fbd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fbdc:	f7ff f928 	bl	801ee30 <memchr>
 801fbe0:	2800      	cmp	r0, #0
 801fbe2:	d03f      	beq.n	801fc64 <_vfiprintf_r+0x22c>
 801fbe4:	4b2a      	ldr	r3, [pc, #168]	; (801fc90 <_vfiprintf_r+0x258>)
 801fbe6:	bb1b      	cbnz	r3, 801fc30 <_vfiprintf_r+0x1f8>
 801fbe8:	9b03      	ldr	r3, [sp, #12]
 801fbea:	3307      	adds	r3, #7
 801fbec:	f023 0307 	bic.w	r3, r3, #7
 801fbf0:	3308      	adds	r3, #8
 801fbf2:	9303      	str	r3, [sp, #12]
 801fbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbf6:	443b      	add	r3, r7
 801fbf8:	9309      	str	r3, [sp, #36]	; 0x24
 801fbfa:	e767      	b.n	801facc <_vfiprintf_r+0x94>
 801fbfc:	460c      	mov	r4, r1
 801fbfe:	2001      	movs	r0, #1
 801fc00:	fb0c 3202 	mla	r2, ip, r2, r3
 801fc04:	e7a5      	b.n	801fb52 <_vfiprintf_r+0x11a>
 801fc06:	2300      	movs	r3, #0
 801fc08:	f04f 0c0a 	mov.w	ip, #10
 801fc0c:	4619      	mov	r1, r3
 801fc0e:	3401      	adds	r4, #1
 801fc10:	9305      	str	r3, [sp, #20]
 801fc12:	4620      	mov	r0, r4
 801fc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fc18:	3a30      	subs	r2, #48	; 0x30
 801fc1a:	2a09      	cmp	r2, #9
 801fc1c:	d903      	bls.n	801fc26 <_vfiprintf_r+0x1ee>
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d0c5      	beq.n	801fbae <_vfiprintf_r+0x176>
 801fc22:	9105      	str	r1, [sp, #20]
 801fc24:	e7c3      	b.n	801fbae <_vfiprintf_r+0x176>
 801fc26:	4604      	mov	r4, r0
 801fc28:	2301      	movs	r3, #1
 801fc2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801fc2e:	e7f0      	b.n	801fc12 <_vfiprintf_r+0x1da>
 801fc30:	ab03      	add	r3, sp, #12
 801fc32:	9300      	str	r3, [sp, #0]
 801fc34:	462a      	mov	r2, r5
 801fc36:	4630      	mov	r0, r6
 801fc38:	4b16      	ldr	r3, [pc, #88]	; (801fc94 <_vfiprintf_r+0x25c>)
 801fc3a:	a904      	add	r1, sp, #16
 801fc3c:	f7fd fd42 	bl	801d6c4 <_printf_float>
 801fc40:	4607      	mov	r7, r0
 801fc42:	1c78      	adds	r0, r7, #1
 801fc44:	d1d6      	bne.n	801fbf4 <_vfiprintf_r+0x1bc>
 801fc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc48:	07d9      	lsls	r1, r3, #31
 801fc4a:	d405      	bmi.n	801fc58 <_vfiprintf_r+0x220>
 801fc4c:	89ab      	ldrh	r3, [r5, #12]
 801fc4e:	059a      	lsls	r2, r3, #22
 801fc50:	d402      	bmi.n	801fc58 <_vfiprintf_r+0x220>
 801fc52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc54:	f7ff f8e2 	bl	801ee1c <__retarget_lock_release_recursive>
 801fc58:	89ab      	ldrh	r3, [r5, #12]
 801fc5a:	065b      	lsls	r3, r3, #25
 801fc5c:	f53f af12 	bmi.w	801fa84 <_vfiprintf_r+0x4c>
 801fc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fc62:	e711      	b.n	801fa88 <_vfiprintf_r+0x50>
 801fc64:	ab03      	add	r3, sp, #12
 801fc66:	9300      	str	r3, [sp, #0]
 801fc68:	462a      	mov	r2, r5
 801fc6a:	4630      	mov	r0, r6
 801fc6c:	4b09      	ldr	r3, [pc, #36]	; (801fc94 <_vfiprintf_r+0x25c>)
 801fc6e:	a904      	add	r1, sp, #16
 801fc70:	f7fd ffc4 	bl	801dbfc <_printf_i>
 801fc74:	e7e4      	b.n	801fc40 <_vfiprintf_r+0x208>
 801fc76:	bf00      	nop
 801fc78:	08021ea8 	.word	0x08021ea8
 801fc7c:	08021ec8 	.word	0x08021ec8
 801fc80:	08021e88 	.word	0x08021e88
 801fc84:	08022044 	.word	0x08022044
 801fc88:	0802204a 	.word	0x0802204a
 801fc8c:	0802204e 	.word	0x0802204e
 801fc90:	0801d6c5 	.word	0x0801d6c5
 801fc94:	0801fa13 	.word	0x0801fa13

0801fc98 <_sbrk_r>:
 801fc98:	b538      	push	{r3, r4, r5, lr}
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	4d05      	ldr	r5, [pc, #20]	; (801fcb4 <_sbrk_r+0x1c>)
 801fc9e:	4604      	mov	r4, r0
 801fca0:	4608      	mov	r0, r1
 801fca2:	602b      	str	r3, [r5, #0]
 801fca4:	f7e4 f9e8 	bl	8004078 <_sbrk>
 801fca8:	1c43      	adds	r3, r0, #1
 801fcaa:	d102      	bne.n	801fcb2 <_sbrk_r+0x1a>
 801fcac:	682b      	ldr	r3, [r5, #0]
 801fcae:	b103      	cbz	r3, 801fcb2 <_sbrk_r+0x1a>
 801fcb0:	6023      	str	r3, [r4, #0]
 801fcb2:	bd38      	pop	{r3, r4, r5, pc}
 801fcb4:	20004038 	.word	0x20004038

0801fcb8 <__sread>:
 801fcb8:	b510      	push	{r4, lr}
 801fcba:	460c      	mov	r4, r1
 801fcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcc0:	f000 fad4 	bl	802026c <_read_r>
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	bfab      	itete	ge
 801fcc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fcca:	89a3      	ldrhlt	r3, [r4, #12]
 801fccc:	181b      	addge	r3, r3, r0
 801fcce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fcd2:	bfac      	ite	ge
 801fcd4:	6563      	strge	r3, [r4, #84]	; 0x54
 801fcd6:	81a3      	strhlt	r3, [r4, #12]
 801fcd8:	bd10      	pop	{r4, pc}

0801fcda <__swrite>:
 801fcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcde:	461f      	mov	r7, r3
 801fce0:	898b      	ldrh	r3, [r1, #12]
 801fce2:	4605      	mov	r5, r0
 801fce4:	05db      	lsls	r3, r3, #23
 801fce6:	460c      	mov	r4, r1
 801fce8:	4616      	mov	r6, r2
 801fcea:	d505      	bpl.n	801fcf8 <__swrite+0x1e>
 801fcec:	2302      	movs	r3, #2
 801fcee:	2200      	movs	r2, #0
 801fcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcf4:	f000 f9f4 	bl	80200e0 <_lseek_r>
 801fcf8:	89a3      	ldrh	r3, [r4, #12]
 801fcfa:	4632      	mov	r2, r6
 801fcfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fd00:	81a3      	strh	r3, [r4, #12]
 801fd02:	4628      	mov	r0, r5
 801fd04:	463b      	mov	r3, r7
 801fd06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd0e:	f000 b869 	b.w	801fde4 <_write_r>

0801fd12 <__sseek>:
 801fd12:	b510      	push	{r4, lr}
 801fd14:	460c      	mov	r4, r1
 801fd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd1a:	f000 f9e1 	bl	80200e0 <_lseek_r>
 801fd1e:	1c43      	adds	r3, r0, #1
 801fd20:	89a3      	ldrh	r3, [r4, #12]
 801fd22:	bf15      	itete	ne
 801fd24:	6560      	strne	r0, [r4, #84]	; 0x54
 801fd26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fd2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fd2e:	81a3      	strheq	r3, [r4, #12]
 801fd30:	bf18      	it	ne
 801fd32:	81a3      	strhne	r3, [r4, #12]
 801fd34:	bd10      	pop	{r4, pc}

0801fd36 <__sclose>:
 801fd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd3a:	f000 b8f1 	b.w	801ff20 <_close_r>
	...

0801fd40 <__swbuf_r>:
 801fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd42:	460e      	mov	r6, r1
 801fd44:	4614      	mov	r4, r2
 801fd46:	4605      	mov	r5, r0
 801fd48:	b118      	cbz	r0, 801fd52 <__swbuf_r+0x12>
 801fd4a:	6983      	ldr	r3, [r0, #24]
 801fd4c:	b90b      	cbnz	r3, 801fd52 <__swbuf_r+0x12>
 801fd4e:	f7fe ffc1 	bl	801ecd4 <__sinit>
 801fd52:	4b21      	ldr	r3, [pc, #132]	; (801fdd8 <__swbuf_r+0x98>)
 801fd54:	429c      	cmp	r4, r3
 801fd56:	d12b      	bne.n	801fdb0 <__swbuf_r+0x70>
 801fd58:	686c      	ldr	r4, [r5, #4]
 801fd5a:	69a3      	ldr	r3, [r4, #24]
 801fd5c:	60a3      	str	r3, [r4, #8]
 801fd5e:	89a3      	ldrh	r3, [r4, #12]
 801fd60:	071a      	lsls	r2, r3, #28
 801fd62:	d52f      	bpl.n	801fdc4 <__swbuf_r+0x84>
 801fd64:	6923      	ldr	r3, [r4, #16]
 801fd66:	b36b      	cbz	r3, 801fdc4 <__swbuf_r+0x84>
 801fd68:	6923      	ldr	r3, [r4, #16]
 801fd6a:	6820      	ldr	r0, [r4, #0]
 801fd6c:	b2f6      	uxtb	r6, r6
 801fd6e:	1ac0      	subs	r0, r0, r3
 801fd70:	6963      	ldr	r3, [r4, #20]
 801fd72:	4637      	mov	r7, r6
 801fd74:	4283      	cmp	r3, r0
 801fd76:	dc04      	bgt.n	801fd82 <__swbuf_r+0x42>
 801fd78:	4621      	mov	r1, r4
 801fd7a:	4628      	mov	r0, r5
 801fd7c:	f000 f962 	bl	8020044 <_fflush_r>
 801fd80:	bb30      	cbnz	r0, 801fdd0 <__swbuf_r+0x90>
 801fd82:	68a3      	ldr	r3, [r4, #8]
 801fd84:	3001      	adds	r0, #1
 801fd86:	3b01      	subs	r3, #1
 801fd88:	60a3      	str	r3, [r4, #8]
 801fd8a:	6823      	ldr	r3, [r4, #0]
 801fd8c:	1c5a      	adds	r2, r3, #1
 801fd8e:	6022      	str	r2, [r4, #0]
 801fd90:	701e      	strb	r6, [r3, #0]
 801fd92:	6963      	ldr	r3, [r4, #20]
 801fd94:	4283      	cmp	r3, r0
 801fd96:	d004      	beq.n	801fda2 <__swbuf_r+0x62>
 801fd98:	89a3      	ldrh	r3, [r4, #12]
 801fd9a:	07db      	lsls	r3, r3, #31
 801fd9c:	d506      	bpl.n	801fdac <__swbuf_r+0x6c>
 801fd9e:	2e0a      	cmp	r6, #10
 801fda0:	d104      	bne.n	801fdac <__swbuf_r+0x6c>
 801fda2:	4621      	mov	r1, r4
 801fda4:	4628      	mov	r0, r5
 801fda6:	f000 f94d 	bl	8020044 <_fflush_r>
 801fdaa:	b988      	cbnz	r0, 801fdd0 <__swbuf_r+0x90>
 801fdac:	4638      	mov	r0, r7
 801fdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fdb0:	4b0a      	ldr	r3, [pc, #40]	; (801fddc <__swbuf_r+0x9c>)
 801fdb2:	429c      	cmp	r4, r3
 801fdb4:	d101      	bne.n	801fdba <__swbuf_r+0x7a>
 801fdb6:	68ac      	ldr	r4, [r5, #8]
 801fdb8:	e7cf      	b.n	801fd5a <__swbuf_r+0x1a>
 801fdba:	4b09      	ldr	r3, [pc, #36]	; (801fde0 <__swbuf_r+0xa0>)
 801fdbc:	429c      	cmp	r4, r3
 801fdbe:	bf08      	it	eq
 801fdc0:	68ec      	ldreq	r4, [r5, #12]
 801fdc2:	e7ca      	b.n	801fd5a <__swbuf_r+0x1a>
 801fdc4:	4621      	mov	r1, r4
 801fdc6:	4628      	mov	r0, r5
 801fdc8:	f000 f81e 	bl	801fe08 <__swsetup_r>
 801fdcc:	2800      	cmp	r0, #0
 801fdce:	d0cb      	beq.n	801fd68 <__swbuf_r+0x28>
 801fdd0:	f04f 37ff 	mov.w	r7, #4294967295
 801fdd4:	e7ea      	b.n	801fdac <__swbuf_r+0x6c>
 801fdd6:	bf00      	nop
 801fdd8:	08021ea8 	.word	0x08021ea8
 801fddc:	08021ec8 	.word	0x08021ec8
 801fde0:	08021e88 	.word	0x08021e88

0801fde4 <_write_r>:
 801fde4:	b538      	push	{r3, r4, r5, lr}
 801fde6:	4604      	mov	r4, r0
 801fde8:	4608      	mov	r0, r1
 801fdea:	4611      	mov	r1, r2
 801fdec:	2200      	movs	r2, #0
 801fdee:	4d05      	ldr	r5, [pc, #20]	; (801fe04 <_write_r+0x20>)
 801fdf0:	602a      	str	r2, [r5, #0]
 801fdf2:	461a      	mov	r2, r3
 801fdf4:	f7e4 f8f4 	bl	8003fe0 <_write>
 801fdf8:	1c43      	adds	r3, r0, #1
 801fdfa:	d102      	bne.n	801fe02 <_write_r+0x1e>
 801fdfc:	682b      	ldr	r3, [r5, #0]
 801fdfe:	b103      	cbz	r3, 801fe02 <_write_r+0x1e>
 801fe00:	6023      	str	r3, [r4, #0]
 801fe02:	bd38      	pop	{r3, r4, r5, pc}
 801fe04:	20004038 	.word	0x20004038

0801fe08 <__swsetup_r>:
 801fe08:	4b32      	ldr	r3, [pc, #200]	; (801fed4 <__swsetup_r+0xcc>)
 801fe0a:	b570      	push	{r4, r5, r6, lr}
 801fe0c:	681d      	ldr	r5, [r3, #0]
 801fe0e:	4606      	mov	r6, r0
 801fe10:	460c      	mov	r4, r1
 801fe12:	b125      	cbz	r5, 801fe1e <__swsetup_r+0x16>
 801fe14:	69ab      	ldr	r3, [r5, #24]
 801fe16:	b913      	cbnz	r3, 801fe1e <__swsetup_r+0x16>
 801fe18:	4628      	mov	r0, r5
 801fe1a:	f7fe ff5b 	bl	801ecd4 <__sinit>
 801fe1e:	4b2e      	ldr	r3, [pc, #184]	; (801fed8 <__swsetup_r+0xd0>)
 801fe20:	429c      	cmp	r4, r3
 801fe22:	d10f      	bne.n	801fe44 <__swsetup_r+0x3c>
 801fe24:	686c      	ldr	r4, [r5, #4]
 801fe26:	89a3      	ldrh	r3, [r4, #12]
 801fe28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe2c:	0719      	lsls	r1, r3, #28
 801fe2e:	d42c      	bmi.n	801fe8a <__swsetup_r+0x82>
 801fe30:	06dd      	lsls	r5, r3, #27
 801fe32:	d411      	bmi.n	801fe58 <__swsetup_r+0x50>
 801fe34:	2309      	movs	r3, #9
 801fe36:	6033      	str	r3, [r6, #0]
 801fe38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 801fe40:	81a3      	strh	r3, [r4, #12]
 801fe42:	e03e      	b.n	801fec2 <__swsetup_r+0xba>
 801fe44:	4b25      	ldr	r3, [pc, #148]	; (801fedc <__swsetup_r+0xd4>)
 801fe46:	429c      	cmp	r4, r3
 801fe48:	d101      	bne.n	801fe4e <__swsetup_r+0x46>
 801fe4a:	68ac      	ldr	r4, [r5, #8]
 801fe4c:	e7eb      	b.n	801fe26 <__swsetup_r+0x1e>
 801fe4e:	4b24      	ldr	r3, [pc, #144]	; (801fee0 <__swsetup_r+0xd8>)
 801fe50:	429c      	cmp	r4, r3
 801fe52:	bf08      	it	eq
 801fe54:	68ec      	ldreq	r4, [r5, #12]
 801fe56:	e7e6      	b.n	801fe26 <__swsetup_r+0x1e>
 801fe58:	0758      	lsls	r0, r3, #29
 801fe5a:	d512      	bpl.n	801fe82 <__swsetup_r+0x7a>
 801fe5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fe5e:	b141      	cbz	r1, 801fe72 <__swsetup_r+0x6a>
 801fe60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe64:	4299      	cmp	r1, r3
 801fe66:	d002      	beq.n	801fe6e <__swsetup_r+0x66>
 801fe68:	4630      	mov	r0, r6
 801fe6a:	f7ff fb85 	bl	801f578 <_free_r>
 801fe6e:	2300      	movs	r3, #0
 801fe70:	6363      	str	r3, [r4, #52]	; 0x34
 801fe72:	89a3      	ldrh	r3, [r4, #12]
 801fe74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fe78:	81a3      	strh	r3, [r4, #12]
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	6063      	str	r3, [r4, #4]
 801fe7e:	6923      	ldr	r3, [r4, #16]
 801fe80:	6023      	str	r3, [r4, #0]
 801fe82:	89a3      	ldrh	r3, [r4, #12]
 801fe84:	f043 0308 	orr.w	r3, r3, #8
 801fe88:	81a3      	strh	r3, [r4, #12]
 801fe8a:	6923      	ldr	r3, [r4, #16]
 801fe8c:	b94b      	cbnz	r3, 801fea2 <__swsetup_r+0x9a>
 801fe8e:	89a3      	ldrh	r3, [r4, #12]
 801fe90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fe94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fe98:	d003      	beq.n	801fea2 <__swsetup_r+0x9a>
 801fe9a:	4621      	mov	r1, r4
 801fe9c:	4630      	mov	r0, r6
 801fe9e:	f000 f957 	bl	8020150 <__smakebuf_r>
 801fea2:	89a0      	ldrh	r0, [r4, #12]
 801fea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fea8:	f010 0301 	ands.w	r3, r0, #1
 801feac:	d00a      	beq.n	801fec4 <__swsetup_r+0xbc>
 801feae:	2300      	movs	r3, #0
 801feb0:	60a3      	str	r3, [r4, #8]
 801feb2:	6963      	ldr	r3, [r4, #20]
 801feb4:	425b      	negs	r3, r3
 801feb6:	61a3      	str	r3, [r4, #24]
 801feb8:	6923      	ldr	r3, [r4, #16]
 801feba:	b943      	cbnz	r3, 801fece <__swsetup_r+0xc6>
 801febc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fec0:	d1ba      	bne.n	801fe38 <__swsetup_r+0x30>
 801fec2:	bd70      	pop	{r4, r5, r6, pc}
 801fec4:	0781      	lsls	r1, r0, #30
 801fec6:	bf58      	it	pl
 801fec8:	6963      	ldrpl	r3, [r4, #20]
 801feca:	60a3      	str	r3, [r4, #8]
 801fecc:	e7f4      	b.n	801feb8 <__swsetup_r+0xb0>
 801fece:	2000      	movs	r0, #0
 801fed0:	e7f7      	b.n	801fec2 <__swsetup_r+0xba>
 801fed2:	bf00      	nop
 801fed4:	2000012c 	.word	0x2000012c
 801fed8:	08021ea8 	.word	0x08021ea8
 801fedc:	08021ec8 	.word	0x08021ec8
 801fee0:	08021e88 	.word	0x08021e88

0801fee4 <__assert_func>:
 801fee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fee6:	4614      	mov	r4, r2
 801fee8:	461a      	mov	r2, r3
 801feea:	4b09      	ldr	r3, [pc, #36]	; (801ff10 <__assert_func+0x2c>)
 801feec:	4605      	mov	r5, r0
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	68d8      	ldr	r0, [r3, #12]
 801fef2:	b14c      	cbz	r4, 801ff08 <__assert_func+0x24>
 801fef4:	4b07      	ldr	r3, [pc, #28]	; (801ff14 <__assert_func+0x30>)
 801fef6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fefa:	9100      	str	r1, [sp, #0]
 801fefc:	462b      	mov	r3, r5
 801fefe:	4906      	ldr	r1, [pc, #24]	; (801ff18 <__assert_func+0x34>)
 801ff00:	f000 f8dc 	bl	80200bc <fiprintf>
 801ff04:	f000 f9d1 	bl	80202aa <abort>
 801ff08:	4b04      	ldr	r3, [pc, #16]	; (801ff1c <__assert_func+0x38>)
 801ff0a:	461c      	mov	r4, r3
 801ff0c:	e7f3      	b.n	801fef6 <__assert_func+0x12>
 801ff0e:	bf00      	nop
 801ff10:	2000012c 	.word	0x2000012c
 801ff14:	08022055 	.word	0x08022055
 801ff18:	08022062 	.word	0x08022062
 801ff1c:	08022090 	.word	0x08022090

0801ff20 <_close_r>:
 801ff20:	b538      	push	{r3, r4, r5, lr}
 801ff22:	2300      	movs	r3, #0
 801ff24:	4d05      	ldr	r5, [pc, #20]	; (801ff3c <_close_r+0x1c>)
 801ff26:	4604      	mov	r4, r0
 801ff28:	4608      	mov	r0, r1
 801ff2a:	602b      	str	r3, [r5, #0]
 801ff2c:	f7e4 f874 	bl	8004018 <_close>
 801ff30:	1c43      	adds	r3, r0, #1
 801ff32:	d102      	bne.n	801ff3a <_close_r+0x1a>
 801ff34:	682b      	ldr	r3, [r5, #0]
 801ff36:	b103      	cbz	r3, 801ff3a <_close_r+0x1a>
 801ff38:	6023      	str	r3, [r4, #0]
 801ff3a:	bd38      	pop	{r3, r4, r5, pc}
 801ff3c:	20004038 	.word	0x20004038

0801ff40 <__sflush_r>:
 801ff40:	898a      	ldrh	r2, [r1, #12]
 801ff42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff44:	4605      	mov	r5, r0
 801ff46:	0710      	lsls	r0, r2, #28
 801ff48:	460c      	mov	r4, r1
 801ff4a:	d457      	bmi.n	801fffc <__sflush_r+0xbc>
 801ff4c:	684b      	ldr	r3, [r1, #4]
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	dc04      	bgt.n	801ff5c <__sflush_r+0x1c>
 801ff52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	dc01      	bgt.n	801ff5c <__sflush_r+0x1c>
 801ff58:	2000      	movs	r0, #0
 801ff5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff5e:	2e00      	cmp	r6, #0
 801ff60:	d0fa      	beq.n	801ff58 <__sflush_r+0x18>
 801ff62:	2300      	movs	r3, #0
 801ff64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ff68:	682f      	ldr	r7, [r5, #0]
 801ff6a:	602b      	str	r3, [r5, #0]
 801ff6c:	d032      	beq.n	801ffd4 <__sflush_r+0x94>
 801ff6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ff70:	89a3      	ldrh	r3, [r4, #12]
 801ff72:	075a      	lsls	r2, r3, #29
 801ff74:	d505      	bpl.n	801ff82 <__sflush_r+0x42>
 801ff76:	6863      	ldr	r3, [r4, #4]
 801ff78:	1ac0      	subs	r0, r0, r3
 801ff7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ff7c:	b10b      	cbz	r3, 801ff82 <__sflush_r+0x42>
 801ff7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ff80:	1ac0      	subs	r0, r0, r3
 801ff82:	2300      	movs	r3, #0
 801ff84:	4602      	mov	r2, r0
 801ff86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff88:	4628      	mov	r0, r5
 801ff8a:	6a21      	ldr	r1, [r4, #32]
 801ff8c:	47b0      	blx	r6
 801ff8e:	1c43      	adds	r3, r0, #1
 801ff90:	89a3      	ldrh	r3, [r4, #12]
 801ff92:	d106      	bne.n	801ffa2 <__sflush_r+0x62>
 801ff94:	6829      	ldr	r1, [r5, #0]
 801ff96:	291d      	cmp	r1, #29
 801ff98:	d82c      	bhi.n	801fff4 <__sflush_r+0xb4>
 801ff9a:	4a29      	ldr	r2, [pc, #164]	; (8020040 <__sflush_r+0x100>)
 801ff9c:	40ca      	lsrs	r2, r1
 801ff9e:	07d6      	lsls	r6, r2, #31
 801ffa0:	d528      	bpl.n	801fff4 <__sflush_r+0xb4>
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	6062      	str	r2, [r4, #4]
 801ffa6:	6922      	ldr	r2, [r4, #16]
 801ffa8:	04d9      	lsls	r1, r3, #19
 801ffaa:	6022      	str	r2, [r4, #0]
 801ffac:	d504      	bpl.n	801ffb8 <__sflush_r+0x78>
 801ffae:	1c42      	adds	r2, r0, #1
 801ffb0:	d101      	bne.n	801ffb6 <__sflush_r+0x76>
 801ffb2:	682b      	ldr	r3, [r5, #0]
 801ffb4:	b903      	cbnz	r3, 801ffb8 <__sflush_r+0x78>
 801ffb6:	6560      	str	r0, [r4, #84]	; 0x54
 801ffb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ffba:	602f      	str	r7, [r5, #0]
 801ffbc:	2900      	cmp	r1, #0
 801ffbe:	d0cb      	beq.n	801ff58 <__sflush_r+0x18>
 801ffc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ffc4:	4299      	cmp	r1, r3
 801ffc6:	d002      	beq.n	801ffce <__sflush_r+0x8e>
 801ffc8:	4628      	mov	r0, r5
 801ffca:	f7ff fad5 	bl	801f578 <_free_r>
 801ffce:	2000      	movs	r0, #0
 801ffd0:	6360      	str	r0, [r4, #52]	; 0x34
 801ffd2:	e7c2      	b.n	801ff5a <__sflush_r+0x1a>
 801ffd4:	6a21      	ldr	r1, [r4, #32]
 801ffd6:	2301      	movs	r3, #1
 801ffd8:	4628      	mov	r0, r5
 801ffda:	47b0      	blx	r6
 801ffdc:	1c41      	adds	r1, r0, #1
 801ffde:	d1c7      	bne.n	801ff70 <__sflush_r+0x30>
 801ffe0:	682b      	ldr	r3, [r5, #0]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d0c4      	beq.n	801ff70 <__sflush_r+0x30>
 801ffe6:	2b1d      	cmp	r3, #29
 801ffe8:	d001      	beq.n	801ffee <__sflush_r+0xae>
 801ffea:	2b16      	cmp	r3, #22
 801ffec:	d101      	bne.n	801fff2 <__sflush_r+0xb2>
 801ffee:	602f      	str	r7, [r5, #0]
 801fff0:	e7b2      	b.n	801ff58 <__sflush_r+0x18>
 801fff2:	89a3      	ldrh	r3, [r4, #12]
 801fff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fff8:	81a3      	strh	r3, [r4, #12]
 801fffa:	e7ae      	b.n	801ff5a <__sflush_r+0x1a>
 801fffc:	690f      	ldr	r7, [r1, #16]
 801fffe:	2f00      	cmp	r7, #0
 8020000:	d0aa      	beq.n	801ff58 <__sflush_r+0x18>
 8020002:	0793      	lsls	r3, r2, #30
 8020004:	bf18      	it	ne
 8020006:	2300      	movne	r3, #0
 8020008:	680e      	ldr	r6, [r1, #0]
 802000a:	bf08      	it	eq
 802000c:	694b      	ldreq	r3, [r1, #20]
 802000e:	1bf6      	subs	r6, r6, r7
 8020010:	600f      	str	r7, [r1, #0]
 8020012:	608b      	str	r3, [r1, #8]
 8020014:	2e00      	cmp	r6, #0
 8020016:	dd9f      	ble.n	801ff58 <__sflush_r+0x18>
 8020018:	4633      	mov	r3, r6
 802001a:	463a      	mov	r2, r7
 802001c:	4628      	mov	r0, r5
 802001e:	6a21      	ldr	r1, [r4, #32]
 8020020:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8020024:	47e0      	blx	ip
 8020026:	2800      	cmp	r0, #0
 8020028:	dc06      	bgt.n	8020038 <__sflush_r+0xf8>
 802002a:	89a3      	ldrh	r3, [r4, #12]
 802002c:	f04f 30ff 	mov.w	r0, #4294967295
 8020030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020034:	81a3      	strh	r3, [r4, #12]
 8020036:	e790      	b.n	801ff5a <__sflush_r+0x1a>
 8020038:	4407      	add	r7, r0
 802003a:	1a36      	subs	r6, r6, r0
 802003c:	e7ea      	b.n	8020014 <__sflush_r+0xd4>
 802003e:	bf00      	nop
 8020040:	20400001 	.word	0x20400001

08020044 <_fflush_r>:
 8020044:	b538      	push	{r3, r4, r5, lr}
 8020046:	690b      	ldr	r3, [r1, #16]
 8020048:	4605      	mov	r5, r0
 802004a:	460c      	mov	r4, r1
 802004c:	b913      	cbnz	r3, 8020054 <_fflush_r+0x10>
 802004e:	2500      	movs	r5, #0
 8020050:	4628      	mov	r0, r5
 8020052:	bd38      	pop	{r3, r4, r5, pc}
 8020054:	b118      	cbz	r0, 802005e <_fflush_r+0x1a>
 8020056:	6983      	ldr	r3, [r0, #24]
 8020058:	b90b      	cbnz	r3, 802005e <_fflush_r+0x1a>
 802005a:	f7fe fe3b 	bl	801ecd4 <__sinit>
 802005e:	4b14      	ldr	r3, [pc, #80]	; (80200b0 <_fflush_r+0x6c>)
 8020060:	429c      	cmp	r4, r3
 8020062:	d11b      	bne.n	802009c <_fflush_r+0x58>
 8020064:	686c      	ldr	r4, [r5, #4]
 8020066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802006a:	2b00      	cmp	r3, #0
 802006c:	d0ef      	beq.n	802004e <_fflush_r+0xa>
 802006e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020070:	07d0      	lsls	r0, r2, #31
 8020072:	d404      	bmi.n	802007e <_fflush_r+0x3a>
 8020074:	0599      	lsls	r1, r3, #22
 8020076:	d402      	bmi.n	802007e <_fflush_r+0x3a>
 8020078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802007a:	f7fe fece 	bl	801ee1a <__retarget_lock_acquire_recursive>
 802007e:	4628      	mov	r0, r5
 8020080:	4621      	mov	r1, r4
 8020082:	f7ff ff5d 	bl	801ff40 <__sflush_r>
 8020086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020088:	4605      	mov	r5, r0
 802008a:	07da      	lsls	r2, r3, #31
 802008c:	d4e0      	bmi.n	8020050 <_fflush_r+0xc>
 802008e:	89a3      	ldrh	r3, [r4, #12]
 8020090:	059b      	lsls	r3, r3, #22
 8020092:	d4dd      	bmi.n	8020050 <_fflush_r+0xc>
 8020094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020096:	f7fe fec1 	bl	801ee1c <__retarget_lock_release_recursive>
 802009a:	e7d9      	b.n	8020050 <_fflush_r+0xc>
 802009c:	4b05      	ldr	r3, [pc, #20]	; (80200b4 <_fflush_r+0x70>)
 802009e:	429c      	cmp	r4, r3
 80200a0:	d101      	bne.n	80200a6 <_fflush_r+0x62>
 80200a2:	68ac      	ldr	r4, [r5, #8]
 80200a4:	e7df      	b.n	8020066 <_fflush_r+0x22>
 80200a6:	4b04      	ldr	r3, [pc, #16]	; (80200b8 <_fflush_r+0x74>)
 80200a8:	429c      	cmp	r4, r3
 80200aa:	bf08      	it	eq
 80200ac:	68ec      	ldreq	r4, [r5, #12]
 80200ae:	e7da      	b.n	8020066 <_fflush_r+0x22>
 80200b0:	08021ea8 	.word	0x08021ea8
 80200b4:	08021ec8 	.word	0x08021ec8
 80200b8:	08021e88 	.word	0x08021e88

080200bc <fiprintf>:
 80200bc:	b40e      	push	{r1, r2, r3}
 80200be:	b503      	push	{r0, r1, lr}
 80200c0:	4601      	mov	r1, r0
 80200c2:	ab03      	add	r3, sp, #12
 80200c4:	4805      	ldr	r0, [pc, #20]	; (80200dc <fiprintf+0x20>)
 80200c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80200ca:	6800      	ldr	r0, [r0, #0]
 80200cc:	9301      	str	r3, [sp, #4]
 80200ce:	f7ff fcb3 	bl	801fa38 <_vfiprintf_r>
 80200d2:	b002      	add	sp, #8
 80200d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80200d8:	b003      	add	sp, #12
 80200da:	4770      	bx	lr
 80200dc:	2000012c 	.word	0x2000012c

080200e0 <_lseek_r>:
 80200e0:	b538      	push	{r3, r4, r5, lr}
 80200e2:	4604      	mov	r4, r0
 80200e4:	4608      	mov	r0, r1
 80200e6:	4611      	mov	r1, r2
 80200e8:	2200      	movs	r2, #0
 80200ea:	4d05      	ldr	r5, [pc, #20]	; (8020100 <_lseek_r+0x20>)
 80200ec:	602a      	str	r2, [r5, #0]
 80200ee:	461a      	mov	r2, r3
 80200f0:	f7e3 ffb6 	bl	8004060 <_lseek>
 80200f4:	1c43      	adds	r3, r0, #1
 80200f6:	d102      	bne.n	80200fe <_lseek_r+0x1e>
 80200f8:	682b      	ldr	r3, [r5, #0]
 80200fa:	b103      	cbz	r3, 80200fe <_lseek_r+0x1e>
 80200fc:	6023      	str	r3, [r4, #0]
 80200fe:	bd38      	pop	{r3, r4, r5, pc}
 8020100:	20004038 	.word	0x20004038

08020104 <__swhatbuf_r>:
 8020104:	b570      	push	{r4, r5, r6, lr}
 8020106:	460e      	mov	r6, r1
 8020108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802010c:	4614      	mov	r4, r2
 802010e:	2900      	cmp	r1, #0
 8020110:	461d      	mov	r5, r3
 8020112:	b096      	sub	sp, #88	; 0x58
 8020114:	da08      	bge.n	8020128 <__swhatbuf_r+0x24>
 8020116:	2200      	movs	r2, #0
 8020118:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802011c:	602a      	str	r2, [r5, #0]
 802011e:	061a      	lsls	r2, r3, #24
 8020120:	d410      	bmi.n	8020144 <__swhatbuf_r+0x40>
 8020122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020126:	e00e      	b.n	8020146 <__swhatbuf_r+0x42>
 8020128:	466a      	mov	r2, sp
 802012a:	f000 f8c5 	bl	80202b8 <_fstat_r>
 802012e:	2800      	cmp	r0, #0
 8020130:	dbf1      	blt.n	8020116 <__swhatbuf_r+0x12>
 8020132:	9a01      	ldr	r2, [sp, #4]
 8020134:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020138:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802013c:	425a      	negs	r2, r3
 802013e:	415a      	adcs	r2, r3
 8020140:	602a      	str	r2, [r5, #0]
 8020142:	e7ee      	b.n	8020122 <__swhatbuf_r+0x1e>
 8020144:	2340      	movs	r3, #64	; 0x40
 8020146:	2000      	movs	r0, #0
 8020148:	6023      	str	r3, [r4, #0]
 802014a:	b016      	add	sp, #88	; 0x58
 802014c:	bd70      	pop	{r4, r5, r6, pc}
	...

08020150 <__smakebuf_r>:
 8020150:	898b      	ldrh	r3, [r1, #12]
 8020152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020154:	079d      	lsls	r5, r3, #30
 8020156:	4606      	mov	r6, r0
 8020158:	460c      	mov	r4, r1
 802015a:	d507      	bpl.n	802016c <__smakebuf_r+0x1c>
 802015c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020160:	6023      	str	r3, [r4, #0]
 8020162:	6123      	str	r3, [r4, #16]
 8020164:	2301      	movs	r3, #1
 8020166:	6163      	str	r3, [r4, #20]
 8020168:	b002      	add	sp, #8
 802016a:	bd70      	pop	{r4, r5, r6, pc}
 802016c:	466a      	mov	r2, sp
 802016e:	ab01      	add	r3, sp, #4
 8020170:	f7ff ffc8 	bl	8020104 <__swhatbuf_r>
 8020174:	9900      	ldr	r1, [sp, #0]
 8020176:	4605      	mov	r5, r0
 8020178:	4630      	mov	r0, r6
 802017a:	f7ff fa65 	bl	801f648 <_malloc_r>
 802017e:	b948      	cbnz	r0, 8020194 <__smakebuf_r+0x44>
 8020180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020184:	059a      	lsls	r2, r3, #22
 8020186:	d4ef      	bmi.n	8020168 <__smakebuf_r+0x18>
 8020188:	f023 0303 	bic.w	r3, r3, #3
 802018c:	f043 0302 	orr.w	r3, r3, #2
 8020190:	81a3      	strh	r3, [r4, #12]
 8020192:	e7e3      	b.n	802015c <__smakebuf_r+0xc>
 8020194:	4b0d      	ldr	r3, [pc, #52]	; (80201cc <__smakebuf_r+0x7c>)
 8020196:	62b3      	str	r3, [r6, #40]	; 0x28
 8020198:	89a3      	ldrh	r3, [r4, #12]
 802019a:	6020      	str	r0, [r4, #0]
 802019c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201a0:	81a3      	strh	r3, [r4, #12]
 80201a2:	9b00      	ldr	r3, [sp, #0]
 80201a4:	6120      	str	r0, [r4, #16]
 80201a6:	6163      	str	r3, [r4, #20]
 80201a8:	9b01      	ldr	r3, [sp, #4]
 80201aa:	b15b      	cbz	r3, 80201c4 <__smakebuf_r+0x74>
 80201ac:	4630      	mov	r0, r6
 80201ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201b2:	f000 f893 	bl	80202dc <_isatty_r>
 80201b6:	b128      	cbz	r0, 80201c4 <__smakebuf_r+0x74>
 80201b8:	89a3      	ldrh	r3, [r4, #12]
 80201ba:	f023 0303 	bic.w	r3, r3, #3
 80201be:	f043 0301 	orr.w	r3, r3, #1
 80201c2:	81a3      	strh	r3, [r4, #12]
 80201c4:	89a0      	ldrh	r0, [r4, #12]
 80201c6:	4305      	orrs	r5, r0
 80201c8:	81a5      	strh	r5, [r4, #12]
 80201ca:	e7cd      	b.n	8020168 <__smakebuf_r+0x18>
 80201cc:	0801ec6d 	.word	0x0801ec6d

080201d0 <__ascii_mbtowc>:
 80201d0:	b082      	sub	sp, #8
 80201d2:	b901      	cbnz	r1, 80201d6 <__ascii_mbtowc+0x6>
 80201d4:	a901      	add	r1, sp, #4
 80201d6:	b142      	cbz	r2, 80201ea <__ascii_mbtowc+0x1a>
 80201d8:	b14b      	cbz	r3, 80201ee <__ascii_mbtowc+0x1e>
 80201da:	7813      	ldrb	r3, [r2, #0]
 80201dc:	600b      	str	r3, [r1, #0]
 80201de:	7812      	ldrb	r2, [r2, #0]
 80201e0:	1e10      	subs	r0, r2, #0
 80201e2:	bf18      	it	ne
 80201e4:	2001      	movne	r0, #1
 80201e6:	b002      	add	sp, #8
 80201e8:	4770      	bx	lr
 80201ea:	4610      	mov	r0, r2
 80201ec:	e7fb      	b.n	80201e6 <__ascii_mbtowc+0x16>
 80201ee:	f06f 0001 	mvn.w	r0, #1
 80201f2:	e7f8      	b.n	80201e6 <__ascii_mbtowc+0x16>

080201f4 <__malloc_lock>:
 80201f4:	4801      	ldr	r0, [pc, #4]	; (80201fc <__malloc_lock+0x8>)
 80201f6:	f7fe be10 	b.w	801ee1a <__retarget_lock_acquire_recursive>
 80201fa:	bf00      	nop
 80201fc:	2000402c 	.word	0x2000402c

08020200 <__malloc_unlock>:
 8020200:	4801      	ldr	r0, [pc, #4]	; (8020208 <__malloc_unlock+0x8>)
 8020202:	f7fe be0b 	b.w	801ee1c <__retarget_lock_release_recursive>
 8020206:	bf00      	nop
 8020208:	2000402c 	.word	0x2000402c

0802020c <_realloc_r>:
 802020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020210:	4680      	mov	r8, r0
 8020212:	4614      	mov	r4, r2
 8020214:	460e      	mov	r6, r1
 8020216:	b921      	cbnz	r1, 8020222 <_realloc_r+0x16>
 8020218:	4611      	mov	r1, r2
 802021a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802021e:	f7ff ba13 	b.w	801f648 <_malloc_r>
 8020222:	b92a      	cbnz	r2, 8020230 <_realloc_r+0x24>
 8020224:	f7ff f9a8 	bl	801f578 <_free_r>
 8020228:	4625      	mov	r5, r4
 802022a:	4628      	mov	r0, r5
 802022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020230:	f000 f864 	bl	80202fc <_malloc_usable_size_r>
 8020234:	4284      	cmp	r4, r0
 8020236:	4607      	mov	r7, r0
 8020238:	d802      	bhi.n	8020240 <_realloc_r+0x34>
 802023a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802023e:	d812      	bhi.n	8020266 <_realloc_r+0x5a>
 8020240:	4621      	mov	r1, r4
 8020242:	4640      	mov	r0, r8
 8020244:	f7ff fa00 	bl	801f648 <_malloc_r>
 8020248:	4605      	mov	r5, r0
 802024a:	2800      	cmp	r0, #0
 802024c:	d0ed      	beq.n	802022a <_realloc_r+0x1e>
 802024e:	42bc      	cmp	r4, r7
 8020250:	4622      	mov	r2, r4
 8020252:	4631      	mov	r1, r6
 8020254:	bf28      	it	cs
 8020256:	463a      	movcs	r2, r7
 8020258:	f7fd f966 	bl	801d528 <memcpy>
 802025c:	4631      	mov	r1, r6
 802025e:	4640      	mov	r0, r8
 8020260:	f7ff f98a 	bl	801f578 <_free_r>
 8020264:	e7e1      	b.n	802022a <_realloc_r+0x1e>
 8020266:	4635      	mov	r5, r6
 8020268:	e7df      	b.n	802022a <_realloc_r+0x1e>
	...

0802026c <_read_r>:
 802026c:	b538      	push	{r3, r4, r5, lr}
 802026e:	4604      	mov	r4, r0
 8020270:	4608      	mov	r0, r1
 8020272:	4611      	mov	r1, r2
 8020274:	2200      	movs	r2, #0
 8020276:	4d05      	ldr	r5, [pc, #20]	; (802028c <_read_r+0x20>)
 8020278:	602a      	str	r2, [r5, #0]
 802027a:	461a      	mov	r2, r3
 802027c:	f7e3 fe93 	bl	8003fa6 <_read>
 8020280:	1c43      	adds	r3, r0, #1
 8020282:	d102      	bne.n	802028a <_read_r+0x1e>
 8020284:	682b      	ldr	r3, [r5, #0]
 8020286:	b103      	cbz	r3, 802028a <_read_r+0x1e>
 8020288:	6023      	str	r3, [r4, #0]
 802028a:	bd38      	pop	{r3, r4, r5, pc}
 802028c:	20004038 	.word	0x20004038

08020290 <__ascii_wctomb>:
 8020290:	4603      	mov	r3, r0
 8020292:	4608      	mov	r0, r1
 8020294:	b141      	cbz	r1, 80202a8 <__ascii_wctomb+0x18>
 8020296:	2aff      	cmp	r2, #255	; 0xff
 8020298:	d904      	bls.n	80202a4 <__ascii_wctomb+0x14>
 802029a:	228a      	movs	r2, #138	; 0x8a
 802029c:	f04f 30ff 	mov.w	r0, #4294967295
 80202a0:	601a      	str	r2, [r3, #0]
 80202a2:	4770      	bx	lr
 80202a4:	2001      	movs	r0, #1
 80202a6:	700a      	strb	r2, [r1, #0]
 80202a8:	4770      	bx	lr

080202aa <abort>:
 80202aa:	2006      	movs	r0, #6
 80202ac:	b508      	push	{r3, lr}
 80202ae:	f000 f855 	bl	802035c <raise>
 80202b2:	2001      	movs	r0, #1
 80202b4:	f7e3 fe6d 	bl	8003f92 <_exit>

080202b8 <_fstat_r>:
 80202b8:	b538      	push	{r3, r4, r5, lr}
 80202ba:	2300      	movs	r3, #0
 80202bc:	4d06      	ldr	r5, [pc, #24]	; (80202d8 <_fstat_r+0x20>)
 80202be:	4604      	mov	r4, r0
 80202c0:	4608      	mov	r0, r1
 80202c2:	4611      	mov	r1, r2
 80202c4:	602b      	str	r3, [r5, #0]
 80202c6:	f7e3 feb2 	bl	800402e <_fstat>
 80202ca:	1c43      	adds	r3, r0, #1
 80202cc:	d102      	bne.n	80202d4 <_fstat_r+0x1c>
 80202ce:	682b      	ldr	r3, [r5, #0]
 80202d0:	b103      	cbz	r3, 80202d4 <_fstat_r+0x1c>
 80202d2:	6023      	str	r3, [r4, #0]
 80202d4:	bd38      	pop	{r3, r4, r5, pc}
 80202d6:	bf00      	nop
 80202d8:	20004038 	.word	0x20004038

080202dc <_isatty_r>:
 80202dc:	b538      	push	{r3, r4, r5, lr}
 80202de:	2300      	movs	r3, #0
 80202e0:	4d05      	ldr	r5, [pc, #20]	; (80202f8 <_isatty_r+0x1c>)
 80202e2:	4604      	mov	r4, r0
 80202e4:	4608      	mov	r0, r1
 80202e6:	602b      	str	r3, [r5, #0]
 80202e8:	f7e3 feb0 	bl	800404c <_isatty>
 80202ec:	1c43      	adds	r3, r0, #1
 80202ee:	d102      	bne.n	80202f6 <_isatty_r+0x1a>
 80202f0:	682b      	ldr	r3, [r5, #0]
 80202f2:	b103      	cbz	r3, 80202f6 <_isatty_r+0x1a>
 80202f4:	6023      	str	r3, [r4, #0]
 80202f6:	bd38      	pop	{r3, r4, r5, pc}
 80202f8:	20004038 	.word	0x20004038

080202fc <_malloc_usable_size_r>:
 80202fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020300:	1f18      	subs	r0, r3, #4
 8020302:	2b00      	cmp	r3, #0
 8020304:	bfbc      	itt	lt
 8020306:	580b      	ldrlt	r3, [r1, r0]
 8020308:	18c0      	addlt	r0, r0, r3
 802030a:	4770      	bx	lr

0802030c <_raise_r>:
 802030c:	291f      	cmp	r1, #31
 802030e:	b538      	push	{r3, r4, r5, lr}
 8020310:	4604      	mov	r4, r0
 8020312:	460d      	mov	r5, r1
 8020314:	d904      	bls.n	8020320 <_raise_r+0x14>
 8020316:	2316      	movs	r3, #22
 8020318:	6003      	str	r3, [r0, #0]
 802031a:	f04f 30ff 	mov.w	r0, #4294967295
 802031e:	bd38      	pop	{r3, r4, r5, pc}
 8020320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020322:	b112      	cbz	r2, 802032a <_raise_r+0x1e>
 8020324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020328:	b94b      	cbnz	r3, 802033e <_raise_r+0x32>
 802032a:	4620      	mov	r0, r4
 802032c:	f000 f830 	bl	8020390 <_getpid_r>
 8020330:	462a      	mov	r2, r5
 8020332:	4601      	mov	r1, r0
 8020334:	4620      	mov	r0, r4
 8020336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802033a:	f000 b817 	b.w	802036c <_kill_r>
 802033e:	2b01      	cmp	r3, #1
 8020340:	d00a      	beq.n	8020358 <_raise_r+0x4c>
 8020342:	1c59      	adds	r1, r3, #1
 8020344:	d103      	bne.n	802034e <_raise_r+0x42>
 8020346:	2316      	movs	r3, #22
 8020348:	6003      	str	r3, [r0, #0]
 802034a:	2001      	movs	r0, #1
 802034c:	e7e7      	b.n	802031e <_raise_r+0x12>
 802034e:	2400      	movs	r4, #0
 8020350:	4628      	mov	r0, r5
 8020352:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020356:	4798      	blx	r3
 8020358:	2000      	movs	r0, #0
 802035a:	e7e0      	b.n	802031e <_raise_r+0x12>

0802035c <raise>:
 802035c:	4b02      	ldr	r3, [pc, #8]	; (8020368 <raise+0xc>)
 802035e:	4601      	mov	r1, r0
 8020360:	6818      	ldr	r0, [r3, #0]
 8020362:	f7ff bfd3 	b.w	802030c <_raise_r>
 8020366:	bf00      	nop
 8020368:	2000012c 	.word	0x2000012c

0802036c <_kill_r>:
 802036c:	b538      	push	{r3, r4, r5, lr}
 802036e:	2300      	movs	r3, #0
 8020370:	4d06      	ldr	r5, [pc, #24]	; (802038c <_kill_r+0x20>)
 8020372:	4604      	mov	r4, r0
 8020374:	4608      	mov	r0, r1
 8020376:	4611      	mov	r1, r2
 8020378:	602b      	str	r3, [r5, #0]
 802037a:	f7e3 fdfa 	bl	8003f72 <_kill>
 802037e:	1c43      	adds	r3, r0, #1
 8020380:	d102      	bne.n	8020388 <_kill_r+0x1c>
 8020382:	682b      	ldr	r3, [r5, #0]
 8020384:	b103      	cbz	r3, 8020388 <_kill_r+0x1c>
 8020386:	6023      	str	r3, [r4, #0]
 8020388:	bd38      	pop	{r3, r4, r5, pc}
 802038a:	bf00      	nop
 802038c:	20004038 	.word	0x20004038

08020390 <_getpid_r>:
 8020390:	f7e3 bde8 	b.w	8003f64 <_getpid>

08020394 <_init>:
 8020394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020396:	bf00      	nop
 8020398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802039a:	bc08      	pop	{r3}
 802039c:	469e      	mov	lr, r3
 802039e:	4770      	bx	lr

080203a0 <_fini>:
 80203a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203a2:	bf00      	nop
 80203a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80203a6:	bc08      	pop	{r3}
 80203a8:	469e      	mov	lr, r3
 80203aa:	4770      	bx	lr
