
STM32nfcProjet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e04  08002e04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e0c  08002e0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  08002e84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002e84  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000716f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000154d  00000000  00000000  00027208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00028758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00028e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001615b  00000000  00000000  00029470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005d83  00000000  00000000  0003f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085806  00000000  00000000  0004534e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cab54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  000cabd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002d20 	.word	0x08002d20

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002d20 	.word	0x08002d20

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fa65 	bl	8000952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f80a 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f880 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f854 	bl	800053c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("helloWorld\n\r");
 8000494:	4801      	ldr	r0, [pc, #4]	; (800049c <main+0x1c>)
 8000496:	f001 fd55 	bl	8001f44 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049a:	e7fe      	b.n	800049a <main+0x1a>
 800049c:	08002d38 	.word	0x08002d38

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b092      	sub	sp, #72	; 0x48
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fd40 	bl	8001f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <SystemClock_Config+0x98>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ca:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <SystemClock_Config+0x98>)
 80004cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d2:	2302      	movs	r3, #2
 80004d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	2301      	movs	r3, #1
 80004d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	2310      	movs	r3, #16
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e2:	2300      	movs	r3, #0
 80004e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fd24 	bl	8000f44 <HAL_RCC_OscConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000502:	f000 f8bd 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	230f      	movs	r3, #15
 8000508:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050a:	2303      	movs	r3, #3
 800050c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f001 f840 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800052a:	f000 f8a9 	bl	8000680 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3748      	adds	r7, #72	; 0x48
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40007000 	.word	0x40007000

0800053c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <MX_USART2_UART_Init+0x50>)
 8000544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800054c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_USART2_UART_Init+0x4c>)
 8000574:	f001 faa6 	bl	8001ac4 <HAL_UART_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800057e:	f000 f87f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000098 	.word	0x20000098
 800058c:	40004400 	.word	0x40004400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a29      	ldr	r2, [pc, #164]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a23      	ldr	r2, [pc, #140]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_GPIO_Init+0xc0>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <MX_GPIO_Init+0xc4>)
 800060c:	f000 fc82 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000616:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_GPIO_Init+0xc8>)
 8000628:	f000 fae6 	bl	8000bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800062c:	2320      	movs	r3, #32
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0xc4>)
 8000644:	f000 fad8 	bl	8000bf8 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000
 8000658:	40020800 	.word	0x40020800

0800065c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000664:	1d39      	adds	r1, r7, #4
 8000666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066a:	2201      	movs	r2, #1
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <__io_putchar+0x20>)
 800066e:	f001 fa76 	bl	8001b5e <HAL_UART_Transmit>
    return ch;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000686:	e7fe      	b.n	8000686 <Error_Handler+0x6>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_MspInit+0x5c>)
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_MspInit+0x5c>)
 8000694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000698:	6253      	str	r3, [r2, #36]	; 0x24
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_MspInit+0x5c>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x5c>)
 80006a8:	6a1b      	ldr	r3, [r3, #32]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x5c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6213      	str	r3, [r2, #32]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x5c>)
 80006b4:	6a1b      	ldr	r3, [r3, #32]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x5c>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x5c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6253      	str	r3, [r2, #36]	; 0x24
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x5c>)
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006d6:	2007      	movs	r0, #7
 80006d8:	f000 fa5a 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_UART_MspInit+0x7c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d127      	bne.n	800075a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_UART_MspInit+0x80>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	6253      	str	r3, [r2, #36]	; 0x24
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800073a:	230c      	movs	r3, #12
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800074a:	2307      	movs	r3, #7
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <HAL_UART_MspInit+0x84>)
 8000756:	f000 fa4f 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f91f 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	e00a      	b.n	80007e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007d0:	f3af 8000 	nop.w
 80007d4:	4601      	mov	r1, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	b2ca      	uxtb	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbf0      	blt.n	80007d0 <_read+0x12>
	}

return len;
 80007ee:	687b      	ldr	r3, [r7, #4]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e009      	b.n	800081e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	60ba      	str	r2, [r7, #8]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff22 	bl	800065c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbf1      	blt.n	800080a <_write+0x12>
	}
	return len;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_close>:

int _close(int file)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	return -1;
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000856:	605a      	str	r2, [r3, #4]
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <_isatty>:

int _isatty(int file)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f001 fb0e 	bl	8001ee0 <__errno>
 80008c4:	4602      	mov	r2, r0
 80008c6:	230c      	movs	r3, #12
 80008c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <_sbrk+0x64>)
 80008e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20014000 	.word	0x20014000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	200000e8 	.word	0x200000e8

080008fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092e:	f7ff ffe5 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f001 fadb 	bl	8001eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fda3 	bl	8000480 <main>
  bx lr
 800093a:	4770      	bx	lr
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000944:	08002e14 	.word	0x08002e14
  ldr r2, =_sbss
 8000948:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800094c:	200000e4 	.word	0x200000e4

08000950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>

08000952 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f917 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f80e 	bl	8000984 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff fe88 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_InitTick+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d022      	beq.n	80009de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_InitTick+0x6c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_InitTick+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f916 	bl	8000bde <HAL_SYSTICK_Config>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10f      	bne.n	80009d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d809      	bhi.n	80009d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	f000 f8ee 	bl	8000ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_InitTick+0x70>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e004      	b.n	80009e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e001      	b.n	80009e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x1c>)
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	200000dc 	.word	0x200000dc

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff49 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff5e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffb0 	bl	8000b4c <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c0e:	e160      	b.n	8000ed2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8152 	beq.w	8000ecc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d005      	beq.n	8000c40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d130      	bne.n	8000ca2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 0201 	and.w	r2, r3, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d017      	beq.n	8000cde <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d123      	bne.n	8000d32 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0203 	and.w	r2, r3, #3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80ac 	beq.w	8000ecc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_GPIO_Init+0x2f4>)
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4a5c      	ldr	r2, [pc, #368]	; (8000eec <HAL_GPIO_Init+0x2f4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6213      	str	r3, [r2, #32]
 8000d80:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <HAL_GPIO_Init+0x2f4>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d8c:	4a58      	ldr	r2, [pc, #352]	; (8000ef0 <HAL_GPIO_Init+0x2f8>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a50      	ldr	r2, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x2fc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d025      	beq.n	8000e04 <HAL_GPIO_Init+0x20c>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x300>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01f      	beq.n	8000e00 <HAL_GPIO_Init+0x208>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d019      	beq.n	8000dfc <HAL_GPIO_Init+0x204>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a4d      	ldr	r2, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x308>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x200>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_GPIO_Init+0x30c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1fc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a4b      	ldr	r2, [pc, #300]	; (8000f08 <HAL_GPIO_Init+0x310>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1f8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <HAL_GPIO_Init+0x314>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1f4>
 8000de8:	2306      	movs	r3, #6
 8000dea:	e00c      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000dec:	2307      	movs	r3, #7
 8000dee:	e00a      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000df0:	2305      	movs	r3, #5
 8000df2:	e008      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000df4:	2304      	movs	r3, #4
 8000df6:	e006      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e004      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <HAL_GPIO_Init+0x20e>
 8000e04:	2300      	movs	r3, #0
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	f002 0203 	and.w	r2, r2, #3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4093      	lsls	r3, r2
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e16:	4936      	ldr	r1, [pc, #216]	; (8000ef0 <HAL_GPIO_Init+0x2f8>)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_GPIO_Init+0x318>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f47f ae97 	bne.w	8000c10 <HAL_GPIO_Init+0x18>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e31d      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f56:	4b94      	ldr	r3, [pc, #592]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f60:	4b91      	ldr	r3, [pc, #580]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d07b      	beq.n	800106e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d006      	beq.n	8000f8a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b0c      	cmp	r3, #12
 8000f80:	d10f      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d10b      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8a:	4b87      	ldr	r3, [pc, #540]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d06a      	beq.n	800106c <HAL_RCC_OscConfig+0x128>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d166      	bne.n	800106c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e2f7      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d106      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x74>
 8000faa:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7e      	ldr	r2, [pc, #504]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e02d      	b.n	8001014 <HAL_RCC_OscConfig+0xd0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x96>
 8000fc0:	4b79      	ldr	r3, [pc, #484]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a78      	ldr	r2, [pc, #480]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e01c      	b.n	8001014 <HAL_RCC_OscConfig+0xd0>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0xb8>
 8000fe2:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a70      	ldr	r2, [pc, #448]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6d      	ldr	r2, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e00b      	b.n	8001014 <HAL_RCC_OscConfig+0xd0>
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800100e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcfe 	bl	8000a1c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcfa 	bl	8000a1c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e2ad      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0xe0>
 8001042:	e014      	b.n	800106e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcea 	bl	8000a1c <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fce6 	bl	8000a1c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e299      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800105e:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x108>
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d05a      	beq.n	8001130 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d005      	beq.n	800108c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	2b0c      	cmp	r3, #12
 8001084:	d119      	bne.n	80010ba <HAL_RCC_OscConfig+0x176>
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d116      	bne.n	80010ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x160>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e276      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	493d      	ldr	r1, [pc, #244]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b8:	e03a      	b.n	8001130 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d020      	beq.n	8001104 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x268>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fca8 	bl	8000a1c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fca4 	bl	8000a1c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e257      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	492a      	ldr	r1, [pc, #168]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	604b      	str	r3, [r1, #4]
 8001102:	e015      	b.n	8001130 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_RCC_OscConfig+0x268>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fc87 	bl	8000a1c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc83 	bl	8000a1c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e236      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80b8 	beq.w	80012ae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d170      	bne.n	8001226 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x218>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e21a      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001168:	429a      	cmp	r2, r3
 800116a:	d921      	bls.n	80011b0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fc47 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e208      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	061b      	lsls	r3, r3, #24
 80011a0:	4901      	ldr	r1, [pc, #4]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
 80011a6:	e020      	b.n	80011ea <HAL_RCC_OscConfig+0x2a6>
 80011a8:	40023800 	.word	0x40023800
 80011ac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b0:	4ba4      	ldr	r3, [pc, #656]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	49a1      	ldr	r1, [pc, #644]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c2:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	499c      	ldr	r1, [pc, #624]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fc12 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1d3      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	0b5b      	lsrs	r3, r3, #13
 80011f0:	3301      	adds	r3, #1
 80011f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011fa:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	0912      	lsrs	r2, r2, #4
 8001200:	f002 020f 	and.w	r2, r2, #15
 8001204:	4990      	ldr	r1, [pc, #576]	; (8001448 <HAL_RCC_OscConfig+0x504>)
 8001206:	5c8a      	ldrb	r2, [r1, r2]
 8001208:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800120a:	4a90      	ldr	r2, [pc, #576]	; (800144c <HAL_RCC_OscConfig+0x508>)
 800120c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800120e:	4b90      	ldr	r3, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x50c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fbb6 	bl	8000984 <HAL_InitTick>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d045      	beq.n	80012ae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	e1b5      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d029      	beq.n	8001282 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_RCC_OscConfig+0x510>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fbf2 	bl	8000a1c <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123c:	f7ff fbee 	bl	8000a1c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1a1      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125a:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4977      	ldr	r1, [pc, #476]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	4972      	ldr	r1, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001282:	4b74      	ldr	r3, [pc, #464]	; (8001454 <HAL_RCC_OscConfig+0x510>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fbc8 	bl	8000a1c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001290:	f7ff fbc4 	bl	8000a1c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e177      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d030      	beq.n	800131c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d016      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_RCC_OscConfig+0x514>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fba8 	bl	8000a1c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fba4 	bl	8000a1c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e157      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e2:	4b58      	ldr	r3, [pc, #352]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x38c>
 80012ee:	e015      	b.n	800131c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_OscConfig+0x514>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb91 	bl	8000a1c <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb8d 	bl	8000a1c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e140      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80b5 	beq.w	8001494 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b45      	ldr	r3, [pc, #276]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b42      	ldr	r3, [pc, #264]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	4a41      	ldr	r2, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6253      	str	r3, [r2, #36]	; 0x24
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x518>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_RCC_OscConfig+0x518>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a3d      	ldr	r2, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x518>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb55 	bl	8000a1c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fb51 	bl	8000a1c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e104      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x518>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x466>
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6353      	str	r3, [r2, #52]	; 0x34
 80013a8:	e02d      	b.n	8001406 <HAL_RCC_OscConfig+0x4c2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x488>
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013bc:	6353      	str	r3, [r2, #52]	; 0x34
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c2:	4a20      	ldr	r2, [pc, #128]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013c8:	6353      	str	r3, [r2, #52]	; 0x34
 80013ca:	e01c      	b.n	8001406 <HAL_RCC_OscConfig+0x4c2>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x4aa>
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6353      	str	r3, [r2, #52]	; 0x34
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6353      	str	r3, [r2, #52]	; 0x34
 80013ec:	e00b      	b.n	8001406 <HAL_RCC_OscConfig+0x4c2>
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f8:	6353      	str	r3, [r2, #52]	; 0x34
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001404:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb05 	bl	8000a1c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fb01 	bl	8000a1c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	; 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0b2      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ee      	beq.n	8001416 <HAL_RCC_OscConfig+0x4d2>
 8001438:	e023      	b.n	8001482 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff faef 	bl	8000a1c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001440:	e019      	b.n	8001476 <HAL_RCC_OscConfig+0x532>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	08002d54 	.word	0x08002d54
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004
 8001454:	42470020 	.word	0x42470020
 8001458:	42470680 	.word	0x42470680
 800145c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fadc 	bl	8000a1c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e08d      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <HAL_RCC_OscConfig+0x658>)
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001482:	7ffb      	ldrb	r3, [r7, #31]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x658>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x658>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001492:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d079      	beq.n	8001590 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d056      	beq.n	8001550 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d13b      	bne.n	8001522 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_OscConfig+0x65c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fab4 	bl	8000a1c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fab0 	bl	8000a1c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e063      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x658>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x658>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	4319      	orrs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	430b      	orrs	r3, r1
 80014ee:	492b      	ldr	r1, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x658>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x65c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fa8f 	bl	8000a1c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fa8b 	bl	8000a1c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e03e      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x658>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x5be>
 8001520:	e036      	b.n	8001590 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_OscConfig+0x65c>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fa78 	bl	8000a1c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fa74 	bl	8000a1c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e027      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_RCC_OscConfig+0x658>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x5ec>
 800154e:	e01f      	b.n	8001590 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e01a      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCC_OscConfig+0x658>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	429a      	cmp	r2, r3
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	42470060 	.word	0x42470060

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e11a      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d919      	bls.n	80015fa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x34>
 80015cc:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a89      	ldr	r2, [pc, #548]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 0201 	bic.w	r2, r3, #1
 80015e0:	4985      	ldr	r1, [pc, #532]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e8:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0f9      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001606:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	497a      	ldr	r1, [pc, #488]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 808e 	beq.w	8001742 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d121      	bne.n	800167e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0d7      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001646:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d115      	bne.n	800167e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0cb      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0bf      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0b7      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	495c      	ldr	r1, [pc, #368]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff f9c4 	bl	8000a1c <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff f9bc 	bl	8000a1c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e09b      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b6:	4b51      	ldr	r3, [pc, #324]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xfc>
 80016c2:	e03e      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7ff f9a5 	bl	8000a1c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e084      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_ClockConfig+0x12a>
 80016f0:	e027      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d11d      	bne.n	8001736 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f98e 	bl	8000a1c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e06d      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_ClockConfig+0x158>
 800171e:	e010      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f97c 	bl	8000a1c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e05b      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d219      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d105      	bne.n	8001762 <HAL_RCC_ClockConfig+0x1be>
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0201 	bic.w	r2, r3, #1
 800176a:	4923      	ldr	r1, [pc, #140]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_RCC_ClockConfig+0x254>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e034      	b.n	80017ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4917      	ldr	r1, [pc, #92]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490f      	ldr	r1, [pc, #60]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f823 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017c6:	4601      	mov	r1, r0
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_RCC_ClockConfig+0x258>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x25c>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	fa21 f303 	lsr.w	r3, r1, r3
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x260>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x264>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f8ce 	bl	8000984 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ec:	7afb      	ldrb	r3, [r7, #11]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08002d54 	.word	0x08002d54
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_GetSysClockFreq+0x184>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d007      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x26>
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d008      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x2c>
 8001826:	2b04      	cmp	r3, #4
 8001828:	f040 809f 	bne.w	800196a <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_GetSysClockFreq+0x188>)
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	e0a9      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001832:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001834:	613b      	str	r3, [r7, #16]
      break;
 8001836:	e0a6      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	4a56      	ldr	r2, [pc, #344]	; (800199c <HAL_RCC_GetSysClockFreq+0x190>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0d9b      	lsrs	r3, r3, #22
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	3301      	adds	r3, #1
 8001850:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_GetSysClockFreq+0x184>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d041      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	461d      	mov	r5, r3
 8001862:	f04f 0600 	mov.w	r6, #0
 8001866:	4629      	mov	r1, r5
 8001868:	4632      	mov	r2, r6
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	0154      	lsls	r4, r2, #5
 8001874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001878:	014b      	lsls	r3, r1, #5
 800187a:	4619      	mov	r1, r3
 800187c:	4622      	mov	r2, r4
 800187e:	1b49      	subs	r1, r1, r5
 8001880:	eb62 0206 	sbc.w	r2, r2, r6
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	0194      	lsls	r4, r2, #6
 800188e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	1a5b      	subs	r3, r3, r1
 8001896:	eb64 0402 	sbc.w	r4, r4, r2
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018a8:	00d9      	lsls	r1, r3, #3
 80018aa:	460b      	mov	r3, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	195b      	adds	r3, r3, r5
 80018b0:	eb44 0406 	adc.w	r4, r4, r6
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	0262      	lsls	r2, r4, #9
 80018be:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c2:	0259      	lsls	r1, r3, #9
 80018c4:	460b      	mov	r3, r1
 80018c6:	4614      	mov	r4, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	4621      	mov	r1, r4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f04f 0400 	mov.w	r4, #0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4623      	mov	r3, r4
 80018d6:	f7fe fc51 	bl	800017c <__aeabi_uldivmod>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e040      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	461d      	mov	r5, r3
 80018e6:	f04f 0600 	mov.w	r6, #0
 80018ea:	4629      	mov	r1, r5
 80018ec:	4632      	mov	r2, r6
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	0154      	lsls	r4, r2, #5
 80018f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fc:	014b      	lsls	r3, r1, #5
 80018fe:	4619      	mov	r1, r3
 8001900:	4622      	mov	r2, r4
 8001902:	1b49      	subs	r1, r1, r5
 8001904:	eb62 0206 	sbc.w	r2, r2, r6
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	0194      	lsls	r4, r2, #6
 8001912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	1a5b      	subs	r3, r3, r1
 800191a:	eb64 0402 	sbc.w	r4, r4, r2
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	00e2      	lsls	r2, r4, #3
 8001928:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800192c:	00d9      	lsls	r1, r3, #3
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	195b      	adds	r3, r3, r5
 8001934:	eb44 0406 	adc.w	r4, r4, r6
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	02a2      	lsls	r2, r4, #10
 8001942:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001946:	0299      	lsls	r1, r3, #10
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	4618      	mov	r0, r3
 800194e:	4621      	mov	r1, r4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f04f 0400 	mov.w	r4, #0
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	f7fe fc0f 	bl	800017c <__aeabi_uldivmod>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e00d      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_GetSysClockFreq+0x184>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	613b      	str	r3, [r7, #16]
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	693b      	ldr	r3, [r7, #16]
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400
 8001998:	007a1200 	.word	0x007a1200
 800199c:	08002d48 	.word	0x08002d48

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff2 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019bc:	4601      	mov	r1, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08002d64 	.word	0x08002d64

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0adb      	lsrs	r3, r3, #11
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08002d64 	.word	0x08002d64

08001a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12c      	bne.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e016      	b.n	8001a62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6253      	str	r3, [r2, #36]	; 0x24
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a54:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a68:	d105      	bne.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a70:	d101      	bne.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 0201 	bic.w	r2, r3, #1
 8001a90:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e03f      	b.n	8001b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fdfc 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f905 	bl	8001d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08a      	sub	sp, #40	; 0x28
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d17c      	bne.n	8001c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_UART_Transmit+0x2c>
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e075      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_UART_Transmit+0x3e>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e06e      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bb2:	f7fe ff33 	bl	8000a1c <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bcc:	d108      	bne.n	8001be0 <HAL_UART_Transmit+0x82>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	e003      	b.n	8001be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bf0:	e02a      	b.n	8001c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f840 	bl	8001c82 <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e036      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	3302      	adds	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e007      	b.n	8001c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3301      	adds	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1cf      	bne.n	8001bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f810 	bl	8001c82 <UART_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c92:	e02c      	b.n	8001cee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	d028      	beq.n	8001cee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ca2:	f7fe febb 	bl	8000a1c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d21d      	bcs.n	8001cee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cc0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e00f      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d0c3      	beq.n	8001c94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d58:	f023 030c 	bic.w	r3, r3, #12
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <UART_SetConfig+0x1c0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d103      	bne.n	8001d8e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d86:	f7ff fe29 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	e002      	b.n	8001d94 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d8e:	f7ff fe11 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8001d92:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9c:	d14c      	bne.n	8001e38 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009a      	lsls	r2, r3, #2
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a49      	ldr	r2, [pc, #292]	; (8001edc <UART_SetConfig+0x1c4>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	0119      	lsls	r1, r3, #4
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009a      	lsls	r2, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <UART_SetConfig+0x1c4>)
 8001dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	fb00 f303 	mul.w	r3, r0, r3
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	3332      	adds	r3, #50	; 0x32
 8001de8:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <UART_SetConfig+0x1c4>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001df6:	4419      	add	r1, r3
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <UART_SetConfig+0x1c4>)
 8001e10:	fba3 0302 	umull	r0, r3, r3, r2
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	2064      	movs	r0, #100	; 0x64
 8001e18:	fb00 f303 	mul.w	r3, r0, r3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	3332      	adds	r3, #50	; 0x32
 8001e22:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <UART_SetConfig+0x1c4>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	f003 0207 	and.w	r2, r3, #7
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	440a      	add	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e36:	e04a      	b.n	8001ece <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009a      	lsls	r2, r3, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <UART_SetConfig+0x1c4>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	0119      	lsls	r1, r3, #4
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	009a      	lsls	r2, r3, #2
 8001e62:	441a      	add	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <UART_SetConfig+0x1c4>)
 8001e70:	fba3 0302 	umull	r0, r3, r3, r2
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	2064      	movs	r0, #100	; 0x64
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	3332      	adds	r3, #50	; 0x32
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <UART_SetConfig+0x1c4>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8e:	4419      	add	r1, r3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <UART_SetConfig+0x1c4>)
 8001ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	2064      	movs	r0, #100	; 0x64
 8001eb0:	fb00 f303 	mul.w	r3, r0, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	3332      	adds	r3, #50	; 0x32
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <UART_SetConfig+0x1c4>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	440a      	add	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	51eb851f 	.word	0x51eb851f

08001ee0 <__errno>:
 8001ee0:	4b01      	ldr	r3, [pc, #4]	; (8001ee8 <__errno+0x8>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <__libc_init_array>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	2500      	movs	r5, #0
 8001ef0:	4e0c      	ldr	r6, [pc, #48]	; (8001f24 <__libc_init_array+0x38>)
 8001ef2:	4c0d      	ldr	r4, [pc, #52]	; (8001f28 <__libc_init_array+0x3c>)
 8001ef4:	1ba4      	subs	r4, r4, r6
 8001ef6:	10a4      	asrs	r4, r4, #2
 8001ef8:	42a5      	cmp	r5, r4
 8001efa:	d109      	bne.n	8001f10 <__libc_init_array+0x24>
 8001efc:	f000 ff10 	bl	8002d20 <_init>
 8001f00:	2500      	movs	r5, #0
 8001f02:	4e0a      	ldr	r6, [pc, #40]	; (8001f2c <__libc_init_array+0x40>)
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <__libc_init_array+0x44>)
 8001f06:	1ba4      	subs	r4, r4, r6
 8001f08:	10a4      	asrs	r4, r4, #2
 8001f0a:	42a5      	cmp	r5, r4
 8001f0c:	d105      	bne.n	8001f1a <__libc_init_array+0x2e>
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f14:	4798      	blx	r3
 8001f16:	3501      	adds	r5, #1
 8001f18:	e7ee      	b.n	8001ef8 <__libc_init_array+0xc>
 8001f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f1e:	4798      	blx	r3
 8001f20:	3501      	adds	r5, #1
 8001f22:	e7f2      	b.n	8001f0a <__libc_init_array+0x1e>
 8001f24:	08002e0c 	.word	0x08002e0c
 8001f28:	08002e0c 	.word	0x08002e0c
 8001f2c:	08002e0c 	.word	0x08002e0c
 8001f30:	08002e10 	.word	0x08002e10

08001f34 <memset>:
 8001f34:	4603      	mov	r3, r0
 8001f36:	4402      	add	r2, r0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <memset+0xa>
 8001f3c:	4770      	bx	lr
 8001f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f42:	e7f9      	b.n	8001f38 <memset+0x4>

08001f44 <iprintf>:
 8001f44:	b40f      	push	{r0, r1, r2, r3}
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <iprintf+0x2c>)
 8001f48:	b513      	push	{r0, r1, r4, lr}
 8001f4a:	681c      	ldr	r4, [r3, #0]
 8001f4c:	b124      	cbz	r4, 8001f58 <iprintf+0x14>
 8001f4e:	69a3      	ldr	r3, [r4, #24]
 8001f50:	b913      	cbnz	r3, 8001f58 <iprintf+0x14>
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f84e 	bl	8001ff4 <__sinit>
 8001f58:	ab05      	add	r3, sp, #20
 8001f5a:	9a04      	ldr	r2, [sp, #16]
 8001f5c:	68a1      	ldr	r1, [r4, #8]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	f000 f953 	bl	800220c <_vfiprintf_r>
 8001f66:	b002      	add	sp, #8
 8001f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f6c:	b004      	add	sp, #16
 8001f6e:	4770      	bx	lr
 8001f70:	2000000c 	.word	0x2000000c

08001f74 <std>:
 8001f74:	2300      	movs	r3, #0
 8001f76:	b510      	push	{r4, lr}
 8001f78:	4604      	mov	r4, r0
 8001f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f7e:	6083      	str	r3, [r0, #8]
 8001f80:	8181      	strh	r1, [r0, #12]
 8001f82:	6643      	str	r3, [r0, #100]	; 0x64
 8001f84:	81c2      	strh	r2, [r0, #14]
 8001f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f8a:	6183      	str	r3, [r0, #24]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	2208      	movs	r2, #8
 8001f90:	305c      	adds	r0, #92	; 0x5c
 8001f92:	f7ff ffcf 	bl	8001f34 <memset>
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <std+0x38>)
 8001f98:	6224      	str	r4, [r4, #32]
 8001f9a:	6263      	str	r3, [r4, #36]	; 0x24
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <std+0x3c>)
 8001f9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <std+0x40>)
 8001fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <std+0x44>)
 8001fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8001fa8:	bd10      	pop	{r4, pc}
 8001faa:	bf00      	nop
 8001fac:	08002769 	.word	0x08002769
 8001fb0:	0800278b 	.word	0x0800278b
 8001fb4:	080027c3 	.word	0x080027c3
 8001fb8:	080027e7 	.word	0x080027e7

08001fbc <_cleanup_r>:
 8001fbc:	4901      	ldr	r1, [pc, #4]	; (8001fc4 <_cleanup_r+0x8>)
 8001fbe:	f000 b885 	b.w	80020cc <_fwalk_reent>
 8001fc2:	bf00      	nop
 8001fc4:	08002ac1 	.word	0x08002ac1

08001fc8 <__sfmoreglue>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2568      	movs	r5, #104	; 0x68
 8001fcc:	1e4a      	subs	r2, r1, #1
 8001fce:	4355      	muls	r5, r2
 8001fd0:	460e      	mov	r6, r1
 8001fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fd6:	f000 f897 	bl	8002108 <_malloc_r>
 8001fda:	4604      	mov	r4, r0
 8001fdc:	b140      	cbz	r0, 8001ff0 <__sfmoreglue+0x28>
 8001fde:	2100      	movs	r1, #0
 8001fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8001fe4:	300c      	adds	r0, #12
 8001fe6:	60a0      	str	r0, [r4, #8]
 8001fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fec:	f7ff ffa2 	bl	8001f34 <memset>
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}

08001ff4 <__sinit>:
 8001ff4:	6983      	ldr	r3, [r0, #24]
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	bb33      	cbnz	r3, 800204a <__sinit+0x56>
 8001ffc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002000:	6503      	str	r3, [r0, #80]	; 0x50
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <__sinit+0x58>)
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <__sinit+0x5c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6282      	str	r2, [r0, #40]	; 0x28
 800200a:	4298      	cmp	r0, r3
 800200c:	bf04      	itt	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	6183      	streq	r3, [r0, #24]
 8002012:	f000 f81f 	bl	8002054 <__sfp>
 8002016:	6060      	str	r0, [r4, #4]
 8002018:	4620      	mov	r0, r4
 800201a:	f000 f81b 	bl	8002054 <__sfp>
 800201e:	60a0      	str	r0, [r4, #8]
 8002020:	4620      	mov	r0, r4
 8002022:	f000 f817 	bl	8002054 <__sfp>
 8002026:	2200      	movs	r2, #0
 8002028:	60e0      	str	r0, [r4, #12]
 800202a:	2104      	movs	r1, #4
 800202c:	6860      	ldr	r0, [r4, #4]
 800202e:	f7ff ffa1 	bl	8001f74 <std>
 8002032:	2201      	movs	r2, #1
 8002034:	2109      	movs	r1, #9
 8002036:	68a0      	ldr	r0, [r4, #8]
 8002038:	f7ff ff9c 	bl	8001f74 <std>
 800203c:	2202      	movs	r2, #2
 800203e:	2112      	movs	r1, #18
 8002040:	68e0      	ldr	r0, [r4, #12]
 8002042:	f7ff ff97 	bl	8001f74 <std>
 8002046:	2301      	movs	r3, #1
 8002048:	61a3      	str	r3, [r4, #24]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	08002d6c 	.word	0x08002d6c
 8002050:	08001fbd 	.word	0x08001fbd

08002054 <__sfp>:
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <__sfp+0x70>)
 8002058:	4607      	mov	r7, r0
 800205a:	681e      	ldr	r6, [r3, #0]
 800205c:	69b3      	ldr	r3, [r6, #24]
 800205e:	b913      	cbnz	r3, 8002066 <__sfp+0x12>
 8002060:	4630      	mov	r0, r6
 8002062:	f7ff ffc7 	bl	8001ff4 <__sinit>
 8002066:	3648      	adds	r6, #72	; 0x48
 8002068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800206c:	3b01      	subs	r3, #1
 800206e:	d503      	bpl.n	8002078 <__sfp+0x24>
 8002070:	6833      	ldr	r3, [r6, #0]
 8002072:	b133      	cbz	r3, 8002082 <__sfp+0x2e>
 8002074:	6836      	ldr	r6, [r6, #0]
 8002076:	e7f7      	b.n	8002068 <__sfp+0x14>
 8002078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800207c:	b16d      	cbz	r5, 800209a <__sfp+0x46>
 800207e:	3468      	adds	r4, #104	; 0x68
 8002080:	e7f4      	b.n	800206c <__sfp+0x18>
 8002082:	2104      	movs	r1, #4
 8002084:	4638      	mov	r0, r7
 8002086:	f7ff ff9f 	bl	8001fc8 <__sfmoreglue>
 800208a:	6030      	str	r0, [r6, #0]
 800208c:	2800      	cmp	r0, #0
 800208e:	d1f1      	bne.n	8002074 <__sfp+0x20>
 8002090:	230c      	movs	r3, #12
 8002092:	4604      	mov	r4, r0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4620      	mov	r0, r4
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <__sfp+0x74>)
 800209c:	6665      	str	r5, [r4, #100]	; 0x64
 800209e:	e9c4 5500 	strd	r5, r5, [r4]
 80020a2:	60a5      	str	r5, [r4, #8]
 80020a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80020a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80020ac:	2208      	movs	r2, #8
 80020ae:	4629      	mov	r1, r5
 80020b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020b4:	f7ff ff3e 	bl	8001f34 <memset>
 80020b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020c0:	e7e9      	b.n	8002096 <__sfp+0x42>
 80020c2:	bf00      	nop
 80020c4:	08002d6c 	.word	0x08002d6c
 80020c8:	ffff0001 	.word	0xffff0001

080020cc <_fwalk_reent>:
 80020cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020d0:	4680      	mov	r8, r0
 80020d2:	4689      	mov	r9, r1
 80020d4:	2600      	movs	r6, #0
 80020d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020da:	b914      	cbnz	r4, 80020e2 <_fwalk_reent+0x16>
 80020dc:	4630      	mov	r0, r6
 80020de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80020e6:	3f01      	subs	r7, #1
 80020e8:	d501      	bpl.n	80020ee <_fwalk_reent+0x22>
 80020ea:	6824      	ldr	r4, [r4, #0]
 80020ec:	e7f5      	b.n	80020da <_fwalk_reent+0xe>
 80020ee:	89ab      	ldrh	r3, [r5, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d907      	bls.n	8002104 <_fwalk_reent+0x38>
 80020f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020f8:	3301      	adds	r3, #1
 80020fa:	d003      	beq.n	8002104 <_fwalk_reent+0x38>
 80020fc:	4629      	mov	r1, r5
 80020fe:	4640      	mov	r0, r8
 8002100:	47c8      	blx	r9
 8002102:	4306      	orrs	r6, r0
 8002104:	3568      	adds	r5, #104	; 0x68
 8002106:	e7ee      	b.n	80020e6 <_fwalk_reent+0x1a>

08002108 <_malloc_r>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	1ccd      	adds	r5, r1, #3
 800210c:	f025 0503 	bic.w	r5, r5, #3
 8002110:	3508      	adds	r5, #8
 8002112:	2d0c      	cmp	r5, #12
 8002114:	bf38      	it	cc
 8002116:	250c      	movcc	r5, #12
 8002118:	2d00      	cmp	r5, #0
 800211a:	4606      	mov	r6, r0
 800211c:	db01      	blt.n	8002122 <_malloc_r+0x1a>
 800211e:	42a9      	cmp	r1, r5
 8002120:	d903      	bls.n	800212a <_malloc_r+0x22>
 8002122:	230c      	movs	r3, #12
 8002124:	6033      	str	r3, [r6, #0]
 8002126:	2000      	movs	r0, #0
 8002128:	bd70      	pop	{r4, r5, r6, pc}
 800212a:	f000 fd77 	bl	8002c1c <__malloc_lock>
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <_malloc_r+0xac>)
 8002130:	6814      	ldr	r4, [r2, #0]
 8002132:	4621      	mov	r1, r4
 8002134:	b991      	cbnz	r1, 800215c <_malloc_r+0x54>
 8002136:	4c20      	ldr	r4, [pc, #128]	; (80021b8 <_malloc_r+0xb0>)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	b91b      	cbnz	r3, 8002144 <_malloc_r+0x3c>
 800213c:	4630      	mov	r0, r6
 800213e:	f000 fb03 	bl	8002748 <_sbrk_r>
 8002142:	6020      	str	r0, [r4, #0]
 8002144:	4629      	mov	r1, r5
 8002146:	4630      	mov	r0, r6
 8002148:	f000 fafe 	bl	8002748 <_sbrk_r>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d124      	bne.n	800219a <_malloc_r+0x92>
 8002150:	230c      	movs	r3, #12
 8002152:	4630      	mov	r0, r6
 8002154:	6033      	str	r3, [r6, #0]
 8002156:	f000 fd62 	bl	8002c1e <__malloc_unlock>
 800215a:	e7e4      	b.n	8002126 <_malloc_r+0x1e>
 800215c:	680b      	ldr	r3, [r1, #0]
 800215e:	1b5b      	subs	r3, r3, r5
 8002160:	d418      	bmi.n	8002194 <_malloc_r+0x8c>
 8002162:	2b0b      	cmp	r3, #11
 8002164:	d90f      	bls.n	8002186 <_malloc_r+0x7e>
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	18cc      	adds	r4, r1, r3
 800216a:	50cd      	str	r5, [r1, r3]
 800216c:	4630      	mov	r0, r6
 800216e:	f000 fd56 	bl	8002c1e <__malloc_unlock>
 8002172:	f104 000b 	add.w	r0, r4, #11
 8002176:	1d23      	adds	r3, r4, #4
 8002178:	f020 0007 	bic.w	r0, r0, #7
 800217c:	1ac3      	subs	r3, r0, r3
 800217e:	d0d3      	beq.n	8002128 <_malloc_r+0x20>
 8002180:	425a      	negs	r2, r3
 8002182:	50e2      	str	r2, [r4, r3]
 8002184:	e7d0      	b.n	8002128 <_malloc_r+0x20>
 8002186:	684b      	ldr	r3, [r1, #4]
 8002188:	428c      	cmp	r4, r1
 800218a:	bf16      	itet	ne
 800218c:	6063      	strne	r3, [r4, #4]
 800218e:	6013      	streq	r3, [r2, #0]
 8002190:	460c      	movne	r4, r1
 8002192:	e7eb      	b.n	800216c <_malloc_r+0x64>
 8002194:	460c      	mov	r4, r1
 8002196:	6849      	ldr	r1, [r1, #4]
 8002198:	e7cc      	b.n	8002134 <_malloc_r+0x2c>
 800219a:	1cc4      	adds	r4, r0, #3
 800219c:	f024 0403 	bic.w	r4, r4, #3
 80021a0:	42a0      	cmp	r0, r4
 80021a2:	d005      	beq.n	80021b0 <_malloc_r+0xa8>
 80021a4:	1a21      	subs	r1, r4, r0
 80021a6:	4630      	mov	r0, r6
 80021a8:	f000 face 	bl	8002748 <_sbrk_r>
 80021ac:	3001      	adds	r0, #1
 80021ae:	d0cf      	beq.n	8002150 <_malloc_r+0x48>
 80021b0:	6025      	str	r5, [r4, #0]
 80021b2:	e7db      	b.n	800216c <_malloc_r+0x64>
 80021b4:	20000090 	.word	0x20000090
 80021b8:	20000094 	.word	0x20000094

080021bc <__sfputc_r>:
 80021bc:	6893      	ldr	r3, [r2, #8]
 80021be:	b410      	push	{r4}
 80021c0:	3b01      	subs	r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	6093      	str	r3, [r2, #8]
 80021c6:	da07      	bge.n	80021d8 <__sfputc_r+0x1c>
 80021c8:	6994      	ldr	r4, [r2, #24]
 80021ca:	42a3      	cmp	r3, r4
 80021cc:	db01      	blt.n	80021d2 <__sfputc_r+0x16>
 80021ce:	290a      	cmp	r1, #10
 80021d0:	d102      	bne.n	80021d8 <__sfputc_r+0x1c>
 80021d2:	bc10      	pop	{r4}
 80021d4:	f000 bb0c 	b.w	80027f0 <__swbuf_r>
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	1c58      	adds	r0, r3, #1
 80021dc:	6010      	str	r0, [r2, #0]
 80021de:	7019      	strb	r1, [r3, #0]
 80021e0:	4608      	mov	r0, r1
 80021e2:	bc10      	pop	{r4}
 80021e4:	4770      	bx	lr

080021e6 <__sfputs_r>:
 80021e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e8:	4606      	mov	r6, r0
 80021ea:	460f      	mov	r7, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	18d5      	adds	r5, r2, r3
 80021f0:	42ac      	cmp	r4, r5
 80021f2:	d101      	bne.n	80021f8 <__sfputs_r+0x12>
 80021f4:	2000      	movs	r0, #0
 80021f6:	e007      	b.n	8002208 <__sfputs_r+0x22>
 80021f8:	463a      	mov	r2, r7
 80021fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021fe:	4630      	mov	r0, r6
 8002200:	f7ff ffdc 	bl	80021bc <__sfputc_r>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d1f3      	bne.n	80021f0 <__sfputs_r+0xa>
 8002208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800220c <_vfiprintf_r>:
 800220c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002210:	460c      	mov	r4, r1
 8002212:	b09d      	sub	sp, #116	; 0x74
 8002214:	4617      	mov	r7, r2
 8002216:	461d      	mov	r5, r3
 8002218:	4606      	mov	r6, r0
 800221a:	b118      	cbz	r0, 8002224 <_vfiprintf_r+0x18>
 800221c:	6983      	ldr	r3, [r0, #24]
 800221e:	b90b      	cbnz	r3, 8002224 <_vfiprintf_r+0x18>
 8002220:	f7ff fee8 	bl	8001ff4 <__sinit>
 8002224:	4b7c      	ldr	r3, [pc, #496]	; (8002418 <_vfiprintf_r+0x20c>)
 8002226:	429c      	cmp	r4, r3
 8002228:	d158      	bne.n	80022dc <_vfiprintf_r+0xd0>
 800222a:	6874      	ldr	r4, [r6, #4]
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	0718      	lsls	r0, r3, #28
 8002230:	d55e      	bpl.n	80022f0 <_vfiprintf_r+0xe4>
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <_vfiprintf_r+0xe4>
 8002238:	2300      	movs	r3, #0
 800223a:	9309      	str	r3, [sp, #36]	; 0x24
 800223c:	2320      	movs	r3, #32
 800223e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002242:	2330      	movs	r3, #48	; 0x30
 8002244:	f04f 0b01 	mov.w	fp, #1
 8002248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800224c:	9503      	str	r5, [sp, #12]
 800224e:	46b8      	mov	r8, r7
 8002250:	4645      	mov	r5, r8
 8002252:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002256:	b10b      	cbz	r3, 800225c <_vfiprintf_r+0x50>
 8002258:	2b25      	cmp	r3, #37	; 0x25
 800225a:	d154      	bne.n	8002306 <_vfiprintf_r+0xfa>
 800225c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002260:	d00b      	beq.n	800227a <_vfiprintf_r+0x6e>
 8002262:	4653      	mov	r3, sl
 8002264:	463a      	mov	r2, r7
 8002266:	4621      	mov	r1, r4
 8002268:	4630      	mov	r0, r6
 800226a:	f7ff ffbc 	bl	80021e6 <__sfputs_r>
 800226e:	3001      	adds	r0, #1
 8002270:	f000 80c2 	beq.w	80023f8 <_vfiprintf_r+0x1ec>
 8002274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002276:	4453      	add	r3, sl
 8002278:	9309      	str	r3, [sp, #36]	; 0x24
 800227a:	f898 3000 	ldrb.w	r3, [r8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80ba 	beq.w	80023f8 <_vfiprintf_r+0x1ec>
 8002284:	2300      	movs	r3, #0
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800228e:	9304      	str	r3, [sp, #16]
 8002290:	9307      	str	r3, [sp, #28]
 8002292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002296:	931a      	str	r3, [sp, #104]	; 0x68
 8002298:	46a8      	mov	r8, r5
 800229a:	2205      	movs	r2, #5
 800229c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80022a0:	485e      	ldr	r0, [pc, #376]	; (800241c <_vfiprintf_r+0x210>)
 80022a2:	f000 fcad 	bl	8002c00 <memchr>
 80022a6:	9b04      	ldr	r3, [sp, #16]
 80022a8:	bb78      	cbnz	r0, 800230a <_vfiprintf_r+0xfe>
 80022aa:	06d9      	lsls	r1, r3, #27
 80022ac:	bf44      	itt	mi
 80022ae:	2220      	movmi	r2, #32
 80022b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022b4:	071a      	lsls	r2, r3, #28
 80022b6:	bf44      	itt	mi
 80022b8:	222b      	movmi	r2, #43	; 0x2b
 80022ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022be:	782a      	ldrb	r2, [r5, #0]
 80022c0:	2a2a      	cmp	r2, #42	; 0x2a
 80022c2:	d02a      	beq.n	800231a <_vfiprintf_r+0x10e>
 80022c4:	46a8      	mov	r8, r5
 80022c6:	2000      	movs	r0, #0
 80022c8:	250a      	movs	r5, #10
 80022ca:	9a07      	ldr	r2, [sp, #28]
 80022cc:	4641      	mov	r1, r8
 80022ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022d2:	3b30      	subs	r3, #48	; 0x30
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d969      	bls.n	80023ac <_vfiprintf_r+0x1a0>
 80022d8:	b360      	cbz	r0, 8002334 <_vfiprintf_r+0x128>
 80022da:	e024      	b.n	8002326 <_vfiprintf_r+0x11a>
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <_vfiprintf_r+0x214>)
 80022de:	429c      	cmp	r4, r3
 80022e0:	d101      	bne.n	80022e6 <_vfiprintf_r+0xda>
 80022e2:	68b4      	ldr	r4, [r6, #8]
 80022e4:	e7a2      	b.n	800222c <_vfiprintf_r+0x20>
 80022e6:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <_vfiprintf_r+0x218>)
 80022e8:	429c      	cmp	r4, r3
 80022ea:	bf08      	it	eq
 80022ec:	68f4      	ldreq	r4, [r6, #12]
 80022ee:	e79d      	b.n	800222c <_vfiprintf_r+0x20>
 80022f0:	4621      	mov	r1, r4
 80022f2:	4630      	mov	r0, r6
 80022f4:	f000 fae0 	bl	80028b8 <__swsetup_r>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d09d      	beq.n	8002238 <_vfiprintf_r+0x2c>
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	b01d      	add	sp, #116	; 0x74
 8002302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002306:	46a8      	mov	r8, r5
 8002308:	e7a2      	b.n	8002250 <_vfiprintf_r+0x44>
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <_vfiprintf_r+0x210>)
 800230c:	4645      	mov	r5, r8
 800230e:	1a80      	subs	r0, r0, r2
 8002310:	fa0b f000 	lsl.w	r0, fp, r0
 8002314:	4318      	orrs	r0, r3
 8002316:	9004      	str	r0, [sp, #16]
 8002318:	e7be      	b.n	8002298 <_vfiprintf_r+0x8c>
 800231a:	9a03      	ldr	r2, [sp, #12]
 800231c:	1d11      	adds	r1, r2, #4
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	9103      	str	r1, [sp, #12]
 8002322:	2a00      	cmp	r2, #0
 8002324:	db01      	blt.n	800232a <_vfiprintf_r+0x11e>
 8002326:	9207      	str	r2, [sp, #28]
 8002328:	e004      	b.n	8002334 <_vfiprintf_r+0x128>
 800232a:	4252      	negs	r2, r2
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	9207      	str	r2, [sp, #28]
 8002332:	9304      	str	r3, [sp, #16]
 8002334:	f898 3000 	ldrb.w	r3, [r8]
 8002338:	2b2e      	cmp	r3, #46	; 0x2e
 800233a:	d10e      	bne.n	800235a <_vfiprintf_r+0x14e>
 800233c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002340:	2b2a      	cmp	r3, #42	; 0x2a
 8002342:	d138      	bne.n	80023b6 <_vfiprintf_r+0x1aa>
 8002344:	9b03      	ldr	r3, [sp, #12]
 8002346:	f108 0802 	add.w	r8, r8, #2
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	9203      	str	r2, [sp, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	bfb8      	it	lt
 8002354:	f04f 33ff 	movlt.w	r3, #4294967295
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	4d33      	ldr	r5, [pc, #204]	; (8002428 <_vfiprintf_r+0x21c>)
 800235c:	2203      	movs	r2, #3
 800235e:	f898 1000 	ldrb.w	r1, [r8]
 8002362:	4628      	mov	r0, r5
 8002364:	f000 fc4c 	bl	8002c00 <memchr>
 8002368:	b140      	cbz	r0, 800237c <_vfiprintf_r+0x170>
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	1b40      	subs	r0, r0, r5
 800236e:	fa03 f000 	lsl.w	r0, r3, r0
 8002372:	9b04      	ldr	r3, [sp, #16]
 8002374:	f108 0801 	add.w	r8, r8, #1
 8002378:	4303      	orrs	r3, r0
 800237a:	9304      	str	r3, [sp, #16]
 800237c:	f898 1000 	ldrb.w	r1, [r8]
 8002380:	2206      	movs	r2, #6
 8002382:	482a      	ldr	r0, [pc, #168]	; (800242c <_vfiprintf_r+0x220>)
 8002384:	f108 0701 	add.w	r7, r8, #1
 8002388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800238c:	f000 fc38 	bl	8002c00 <memchr>
 8002390:	2800      	cmp	r0, #0
 8002392:	d037      	beq.n	8002404 <_vfiprintf_r+0x1f8>
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <_vfiprintf_r+0x224>)
 8002396:	bb1b      	cbnz	r3, 80023e0 <_vfiprintf_r+0x1d4>
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	3307      	adds	r3, #7
 800239c:	f023 0307 	bic.w	r3, r3, #7
 80023a0:	3308      	adds	r3, #8
 80023a2:	9303      	str	r3, [sp, #12]
 80023a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a6:	444b      	add	r3, r9
 80023a8:	9309      	str	r3, [sp, #36]	; 0x24
 80023aa:	e750      	b.n	800224e <_vfiprintf_r+0x42>
 80023ac:	fb05 3202 	mla	r2, r5, r2, r3
 80023b0:	2001      	movs	r0, #1
 80023b2:	4688      	mov	r8, r1
 80023b4:	e78a      	b.n	80022cc <_vfiprintf_r+0xc0>
 80023b6:	2300      	movs	r3, #0
 80023b8:	250a      	movs	r5, #10
 80023ba:	4619      	mov	r1, r3
 80023bc:	f108 0801 	add.w	r8, r8, #1
 80023c0:	9305      	str	r3, [sp, #20]
 80023c2:	4640      	mov	r0, r8
 80023c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023c8:	3a30      	subs	r2, #48	; 0x30
 80023ca:	2a09      	cmp	r2, #9
 80023cc:	d903      	bls.n	80023d6 <_vfiprintf_r+0x1ca>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0c3      	beq.n	800235a <_vfiprintf_r+0x14e>
 80023d2:	9105      	str	r1, [sp, #20]
 80023d4:	e7c1      	b.n	800235a <_vfiprintf_r+0x14e>
 80023d6:	fb05 2101 	mla	r1, r5, r1, r2
 80023da:	2301      	movs	r3, #1
 80023dc:	4680      	mov	r8, r0
 80023de:	e7f0      	b.n	80023c2 <_vfiprintf_r+0x1b6>
 80023e0:	ab03      	add	r3, sp, #12
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4622      	mov	r2, r4
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_vfiprintf_r+0x228>)
 80023e8:	a904      	add	r1, sp, #16
 80023ea:	4630      	mov	r0, r6
 80023ec:	f3af 8000 	nop.w
 80023f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80023f4:	4681      	mov	r9, r0
 80023f6:	d1d5      	bne.n	80023a4 <_vfiprintf_r+0x198>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	065b      	lsls	r3, r3, #25
 80023fc:	f53f af7e 	bmi.w	80022fc <_vfiprintf_r+0xf0>
 8002400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002402:	e77d      	b.n	8002300 <_vfiprintf_r+0xf4>
 8002404:	ab03      	add	r3, sp, #12
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4622      	mov	r2, r4
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <_vfiprintf_r+0x228>)
 800240c:	a904      	add	r1, sp, #16
 800240e:	4630      	mov	r0, r6
 8002410:	f000 f888 	bl	8002524 <_printf_i>
 8002414:	e7ec      	b.n	80023f0 <_vfiprintf_r+0x1e4>
 8002416:	bf00      	nop
 8002418:	08002d90 	.word	0x08002d90
 800241c:	08002dd0 	.word	0x08002dd0
 8002420:	08002db0 	.word	0x08002db0
 8002424:	08002d70 	.word	0x08002d70
 8002428:	08002dd6 	.word	0x08002dd6
 800242c:	08002dda 	.word	0x08002dda
 8002430:	00000000 	.word	0x00000000
 8002434:	080021e7 	.word	0x080021e7

08002438 <_printf_common>:
 8002438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800243c:	4691      	mov	r9, r2
 800243e:	461f      	mov	r7, r3
 8002440:	688a      	ldr	r2, [r1, #8]
 8002442:	690b      	ldr	r3, [r1, #16]
 8002444:	4606      	mov	r6, r0
 8002446:	4293      	cmp	r3, r2
 8002448:	bfb8      	it	lt
 800244a:	4613      	movlt	r3, r2
 800244c:	f8c9 3000 	str.w	r3, [r9]
 8002450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002454:	460c      	mov	r4, r1
 8002456:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800245a:	b112      	cbz	r2, 8002462 <_printf_common+0x2a>
 800245c:	3301      	adds	r3, #1
 800245e:	f8c9 3000 	str.w	r3, [r9]
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	0699      	lsls	r1, r3, #26
 8002466:	bf42      	ittt	mi
 8002468:	f8d9 3000 	ldrmi.w	r3, [r9]
 800246c:	3302      	addmi	r3, #2
 800246e:	f8c9 3000 	strmi.w	r3, [r9]
 8002472:	6825      	ldr	r5, [r4, #0]
 8002474:	f015 0506 	ands.w	r5, r5, #6
 8002478:	d107      	bne.n	800248a <_printf_common+0x52>
 800247a:	f104 0a19 	add.w	sl, r4, #25
 800247e:	68e3      	ldr	r3, [r4, #12]
 8002480:	f8d9 2000 	ldr.w	r2, [r9]
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	42ab      	cmp	r3, r5
 8002488:	dc29      	bgt.n	80024de <_printf_common+0xa6>
 800248a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	3300      	adds	r3, #0
 8002492:	bf18      	it	ne
 8002494:	2301      	movne	r3, #1
 8002496:	0692      	lsls	r2, r2, #26
 8002498:	d42e      	bmi.n	80024f8 <_printf_common+0xc0>
 800249a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800249e:	4639      	mov	r1, r7
 80024a0:	4630      	mov	r0, r6
 80024a2:	47c0      	blx	r8
 80024a4:	3001      	adds	r0, #1
 80024a6:	d021      	beq.n	80024ec <_printf_common+0xb4>
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	68e5      	ldr	r5, [r4, #12]
 80024ac:	f003 0306 	and.w	r3, r3, #6
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	bf18      	it	ne
 80024b4:	2500      	movne	r5, #0
 80024b6:	f8d9 2000 	ldr.w	r2, [r9]
 80024ba:	f04f 0900 	mov.w	r9, #0
 80024be:	bf08      	it	eq
 80024c0:	1aad      	subeq	r5, r5, r2
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	6922      	ldr	r2, [r4, #16]
 80024c6:	bf08      	it	eq
 80024c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfc4      	itt	gt
 80024d0:	1a9b      	subgt	r3, r3, r2
 80024d2:	18ed      	addgt	r5, r5, r3
 80024d4:	341a      	adds	r4, #26
 80024d6:	454d      	cmp	r5, r9
 80024d8:	d11a      	bne.n	8002510 <_printf_common+0xd8>
 80024da:	2000      	movs	r0, #0
 80024dc:	e008      	b.n	80024f0 <_printf_common+0xb8>
 80024de:	2301      	movs	r3, #1
 80024e0:	4652      	mov	r2, sl
 80024e2:	4639      	mov	r1, r7
 80024e4:	4630      	mov	r0, r6
 80024e6:	47c0      	blx	r8
 80024e8:	3001      	adds	r0, #1
 80024ea:	d103      	bne.n	80024f4 <_printf_common+0xbc>
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7c2      	b.n	800247e <_printf_common+0x46>
 80024f8:	2030      	movs	r0, #48	; 0x30
 80024fa:	18e1      	adds	r1, r4, r3
 80024fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002506:	4422      	add	r2, r4
 8002508:	3302      	adds	r3, #2
 800250a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800250e:	e7c4      	b.n	800249a <_printf_common+0x62>
 8002510:	2301      	movs	r3, #1
 8002512:	4622      	mov	r2, r4
 8002514:	4639      	mov	r1, r7
 8002516:	4630      	mov	r0, r6
 8002518:	47c0      	blx	r8
 800251a:	3001      	adds	r0, #1
 800251c:	d0e6      	beq.n	80024ec <_printf_common+0xb4>
 800251e:	f109 0901 	add.w	r9, r9, #1
 8002522:	e7d8      	b.n	80024d6 <_printf_common+0x9e>

08002524 <_printf_i>:
 8002524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002528:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800252c:	460c      	mov	r4, r1
 800252e:	7e09      	ldrb	r1, [r1, #24]
 8002530:	b085      	sub	sp, #20
 8002532:	296e      	cmp	r1, #110	; 0x6e
 8002534:	4617      	mov	r7, r2
 8002536:	4606      	mov	r6, r0
 8002538:	4698      	mov	r8, r3
 800253a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800253c:	f000 80b3 	beq.w	80026a6 <_printf_i+0x182>
 8002540:	d822      	bhi.n	8002588 <_printf_i+0x64>
 8002542:	2963      	cmp	r1, #99	; 0x63
 8002544:	d036      	beq.n	80025b4 <_printf_i+0x90>
 8002546:	d80a      	bhi.n	800255e <_printf_i+0x3a>
 8002548:	2900      	cmp	r1, #0
 800254a:	f000 80b9 	beq.w	80026c0 <_printf_i+0x19c>
 800254e:	2958      	cmp	r1, #88	; 0x58
 8002550:	f000 8083 	beq.w	800265a <_printf_i+0x136>
 8002554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002558:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800255c:	e032      	b.n	80025c4 <_printf_i+0xa0>
 800255e:	2964      	cmp	r1, #100	; 0x64
 8002560:	d001      	beq.n	8002566 <_printf_i+0x42>
 8002562:	2969      	cmp	r1, #105	; 0x69
 8002564:	d1f6      	bne.n	8002554 <_printf_i+0x30>
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	0605      	lsls	r5, r0, #24
 800256c:	f103 0104 	add.w	r1, r3, #4
 8002570:	d52a      	bpl.n	80025c8 <_printf_i+0xa4>
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da03      	bge.n	8002582 <_printf_i+0x5e>
 800257a:	222d      	movs	r2, #45	; 0x2d
 800257c:	425b      	negs	r3, r3
 800257e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002582:	486f      	ldr	r0, [pc, #444]	; (8002740 <_printf_i+0x21c>)
 8002584:	220a      	movs	r2, #10
 8002586:	e039      	b.n	80025fc <_printf_i+0xd8>
 8002588:	2973      	cmp	r1, #115	; 0x73
 800258a:	f000 809d 	beq.w	80026c8 <_printf_i+0x1a4>
 800258e:	d808      	bhi.n	80025a2 <_printf_i+0x7e>
 8002590:	296f      	cmp	r1, #111	; 0x6f
 8002592:	d020      	beq.n	80025d6 <_printf_i+0xb2>
 8002594:	2970      	cmp	r1, #112	; 0x70
 8002596:	d1dd      	bne.n	8002554 <_printf_i+0x30>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f043 0320 	orr.w	r3, r3, #32
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	e003      	b.n	80025aa <_printf_i+0x86>
 80025a2:	2975      	cmp	r1, #117	; 0x75
 80025a4:	d017      	beq.n	80025d6 <_printf_i+0xb2>
 80025a6:	2978      	cmp	r1, #120	; 0x78
 80025a8:	d1d4      	bne.n	8002554 <_printf_i+0x30>
 80025aa:	2378      	movs	r3, #120	; 0x78
 80025ac:	4865      	ldr	r0, [pc, #404]	; (8002744 <_printf_i+0x220>)
 80025ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025b2:	e055      	b.n	8002660 <_printf_i+0x13c>
 80025b4:	6813      	ldr	r3, [r2, #0]
 80025b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025ba:	1d19      	adds	r1, r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6011      	str	r1, [r2, #0]
 80025c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025c4:	2301      	movs	r3, #1
 80025c6:	e08c      	b.n	80026e2 <_printf_i+0x1be>
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025ce:	6011      	str	r1, [r2, #0]
 80025d0:	bf18      	it	ne
 80025d2:	b21b      	sxthne	r3, r3
 80025d4:	e7cf      	b.n	8002576 <_printf_i+0x52>
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	6825      	ldr	r5, [r4, #0]
 80025da:	1d18      	adds	r0, r3, #4
 80025dc:	6010      	str	r0, [r2, #0]
 80025de:	0628      	lsls	r0, r5, #24
 80025e0:	d501      	bpl.n	80025e6 <_printf_i+0xc2>
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e002      	b.n	80025ec <_printf_i+0xc8>
 80025e6:	0668      	lsls	r0, r5, #25
 80025e8:	d5fb      	bpl.n	80025e2 <_printf_i+0xbe>
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	296f      	cmp	r1, #111	; 0x6f
 80025ee:	bf14      	ite	ne
 80025f0:	220a      	movne	r2, #10
 80025f2:	2208      	moveq	r2, #8
 80025f4:	4852      	ldr	r0, [pc, #328]	; (8002740 <_printf_i+0x21c>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025fc:	6865      	ldr	r5, [r4, #4]
 80025fe:	2d00      	cmp	r5, #0
 8002600:	60a5      	str	r5, [r4, #8]
 8002602:	f2c0 8095 	blt.w	8002730 <_printf_i+0x20c>
 8002606:	6821      	ldr	r1, [r4, #0]
 8002608:	f021 0104 	bic.w	r1, r1, #4
 800260c:	6021      	str	r1, [r4, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d13d      	bne.n	800268e <_printf_i+0x16a>
 8002612:	2d00      	cmp	r5, #0
 8002614:	f040 808e 	bne.w	8002734 <_printf_i+0x210>
 8002618:	4665      	mov	r5, ip
 800261a:	2a08      	cmp	r2, #8
 800261c:	d10b      	bne.n	8002636 <_printf_i+0x112>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	07db      	lsls	r3, r3, #31
 8002622:	d508      	bpl.n	8002636 <_printf_i+0x112>
 8002624:	6923      	ldr	r3, [r4, #16]
 8002626:	6862      	ldr	r2, [r4, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	bfde      	ittt	le
 800262c:	2330      	movle	r3, #48	; 0x30
 800262e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002632:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002636:	ebac 0305 	sub.w	r3, ip, r5
 800263a:	6123      	str	r3, [r4, #16]
 800263c:	f8cd 8000 	str.w	r8, [sp]
 8002640:	463b      	mov	r3, r7
 8002642:	aa03      	add	r2, sp, #12
 8002644:	4621      	mov	r1, r4
 8002646:	4630      	mov	r0, r6
 8002648:	f7ff fef6 	bl	8002438 <_printf_common>
 800264c:	3001      	adds	r0, #1
 800264e:	d14d      	bne.n	80026ec <_printf_i+0x1c8>
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	b005      	add	sp, #20
 8002656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800265a:	4839      	ldr	r0, [pc, #228]	; (8002740 <_printf_i+0x21c>)
 800265c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	6821      	ldr	r1, [r4, #0]
 8002664:	1d1d      	adds	r5, r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6015      	str	r5, [r2, #0]
 800266a:	060a      	lsls	r2, r1, #24
 800266c:	d50b      	bpl.n	8002686 <_printf_i+0x162>
 800266e:	07ca      	lsls	r2, r1, #31
 8002670:	bf44      	itt	mi
 8002672:	f041 0120 	orrmi.w	r1, r1, #32
 8002676:	6021      	strmi	r1, [r4, #0]
 8002678:	b91b      	cbnz	r3, 8002682 <_printf_i+0x15e>
 800267a:	6822      	ldr	r2, [r4, #0]
 800267c:	f022 0220 	bic.w	r2, r2, #32
 8002680:	6022      	str	r2, [r4, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	e7b7      	b.n	80025f6 <_printf_i+0xd2>
 8002686:	064d      	lsls	r5, r1, #25
 8002688:	bf48      	it	mi
 800268a:	b29b      	uxthmi	r3, r3
 800268c:	e7ef      	b.n	800266e <_printf_i+0x14a>
 800268e:	4665      	mov	r5, ip
 8002690:	fbb3 f1f2 	udiv	r1, r3, r2
 8002694:	fb02 3311 	mls	r3, r2, r1, r3
 8002698:	5cc3      	ldrb	r3, [r0, r3]
 800269a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800269e:	460b      	mov	r3, r1
 80026a0:	2900      	cmp	r1, #0
 80026a2:	d1f5      	bne.n	8002690 <_printf_i+0x16c>
 80026a4:	e7b9      	b.n	800261a <_printf_i+0xf6>
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	6825      	ldr	r5, [r4, #0]
 80026aa:	1d18      	adds	r0, r3, #4
 80026ac:	6961      	ldr	r1, [r4, #20]
 80026ae:	6010      	str	r0, [r2, #0]
 80026b0:	0628      	lsls	r0, r5, #24
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	d501      	bpl.n	80026ba <_printf_i+0x196>
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	e002      	b.n	80026c0 <_printf_i+0x19c>
 80026ba:	066a      	lsls	r2, r5, #25
 80026bc:	d5fb      	bpl.n	80026b6 <_printf_i+0x192>
 80026be:	8019      	strh	r1, [r3, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	4665      	mov	r5, ip
 80026c4:	6123      	str	r3, [r4, #16]
 80026c6:	e7b9      	b.n	800263c <_printf_i+0x118>
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	1d19      	adds	r1, r3, #4
 80026cc:	6011      	str	r1, [r2, #0]
 80026ce:	681d      	ldr	r5, [r3, #0]
 80026d0:	6862      	ldr	r2, [r4, #4]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4628      	mov	r0, r5
 80026d6:	f000 fa93 	bl	8002c00 <memchr>
 80026da:	b108      	cbz	r0, 80026e0 <_printf_i+0x1bc>
 80026dc:	1b40      	subs	r0, r0, r5
 80026de:	6060      	str	r0, [r4, #4]
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	6123      	str	r3, [r4, #16]
 80026e4:	2300      	movs	r3, #0
 80026e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026ea:	e7a7      	b.n	800263c <_printf_i+0x118>
 80026ec:	6923      	ldr	r3, [r4, #16]
 80026ee:	462a      	mov	r2, r5
 80026f0:	4639      	mov	r1, r7
 80026f2:	4630      	mov	r0, r6
 80026f4:	47c0      	blx	r8
 80026f6:	3001      	adds	r0, #1
 80026f8:	d0aa      	beq.n	8002650 <_printf_i+0x12c>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	079b      	lsls	r3, r3, #30
 80026fe:	d413      	bmi.n	8002728 <_printf_i+0x204>
 8002700:	68e0      	ldr	r0, [r4, #12]
 8002702:	9b03      	ldr	r3, [sp, #12]
 8002704:	4298      	cmp	r0, r3
 8002706:	bfb8      	it	lt
 8002708:	4618      	movlt	r0, r3
 800270a:	e7a3      	b.n	8002654 <_printf_i+0x130>
 800270c:	2301      	movs	r3, #1
 800270e:	464a      	mov	r2, r9
 8002710:	4639      	mov	r1, r7
 8002712:	4630      	mov	r0, r6
 8002714:	47c0      	blx	r8
 8002716:	3001      	adds	r0, #1
 8002718:	d09a      	beq.n	8002650 <_printf_i+0x12c>
 800271a:	3501      	adds	r5, #1
 800271c:	68e3      	ldr	r3, [r4, #12]
 800271e:	9a03      	ldr	r2, [sp, #12]
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	42ab      	cmp	r3, r5
 8002724:	dcf2      	bgt.n	800270c <_printf_i+0x1e8>
 8002726:	e7eb      	b.n	8002700 <_printf_i+0x1dc>
 8002728:	2500      	movs	r5, #0
 800272a:	f104 0919 	add.w	r9, r4, #25
 800272e:	e7f5      	b.n	800271c <_printf_i+0x1f8>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ac      	bne.n	800268e <_printf_i+0x16a>
 8002734:	7803      	ldrb	r3, [r0, #0]
 8002736:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800273a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800273e:	e76c      	b.n	800261a <_printf_i+0xf6>
 8002740:	08002de1 	.word	0x08002de1
 8002744:	08002df2 	.word	0x08002df2

08002748 <_sbrk_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	2300      	movs	r3, #0
 800274c:	4c05      	ldr	r4, [pc, #20]	; (8002764 <_sbrk_r+0x1c>)
 800274e:	4605      	mov	r5, r0
 8002750:	4608      	mov	r0, r1
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	f7fe f89c 	bl	8000890 <_sbrk>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d102      	bne.n	8002762 <_sbrk_r+0x1a>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	b103      	cbz	r3, 8002762 <_sbrk_r+0x1a>
 8002760:	602b      	str	r3, [r5, #0]
 8002762:	bd38      	pop	{r3, r4, r5, pc}
 8002764:	200000e0 	.word	0x200000e0

08002768 <__sread>:
 8002768:	b510      	push	{r4, lr}
 800276a:	460c      	mov	r4, r1
 800276c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002770:	f000 faa2 	bl	8002cb8 <_read_r>
 8002774:	2800      	cmp	r0, #0
 8002776:	bfab      	itete	ge
 8002778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800277a:	89a3      	ldrhlt	r3, [r4, #12]
 800277c:	181b      	addge	r3, r3, r0
 800277e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002782:	bfac      	ite	ge
 8002784:	6563      	strge	r3, [r4, #84]	; 0x54
 8002786:	81a3      	strhlt	r3, [r4, #12]
 8002788:	bd10      	pop	{r4, pc}

0800278a <__swrite>:
 800278a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800278e:	461f      	mov	r7, r3
 8002790:	898b      	ldrh	r3, [r1, #12]
 8002792:	4605      	mov	r5, r0
 8002794:	05db      	lsls	r3, r3, #23
 8002796:	460c      	mov	r4, r1
 8002798:	4616      	mov	r6, r2
 800279a:	d505      	bpl.n	80027a8 <__swrite+0x1e>
 800279c:	2302      	movs	r3, #2
 800279e:	2200      	movs	r2, #0
 80027a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a4:	f000 f9b6 	bl	8002b14 <_lseek_r>
 80027a8:	89a3      	ldrh	r3, [r4, #12]
 80027aa:	4632      	mov	r2, r6
 80027ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027b6:	463b      	mov	r3, r7
 80027b8:	4628      	mov	r0, r5
 80027ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027be:	f000 b869 	b.w	8002894 <_write_r>

080027c2 <__sseek>:
 80027c2:	b510      	push	{r4, lr}
 80027c4:	460c      	mov	r4, r1
 80027c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ca:	f000 f9a3 	bl	8002b14 <_lseek_r>
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	89a3      	ldrh	r3, [r4, #12]
 80027d2:	bf15      	itete	ne
 80027d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80027d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027de:	81a3      	strheq	r3, [r4, #12]
 80027e0:	bf18      	it	ne
 80027e2:	81a3      	strhne	r3, [r4, #12]
 80027e4:	bd10      	pop	{r4, pc}

080027e6 <__sclose>:
 80027e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ea:	f000 b8d3 	b.w	8002994 <_close_r>
	...

080027f0 <__swbuf_r>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	460e      	mov	r6, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	4605      	mov	r5, r0
 80027f8:	b118      	cbz	r0, 8002802 <__swbuf_r+0x12>
 80027fa:	6983      	ldr	r3, [r0, #24]
 80027fc:	b90b      	cbnz	r3, 8002802 <__swbuf_r+0x12>
 80027fe:	f7ff fbf9 	bl	8001ff4 <__sinit>
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <__swbuf_r+0x98>)
 8002804:	429c      	cmp	r4, r3
 8002806:	d12a      	bne.n	800285e <__swbuf_r+0x6e>
 8002808:	686c      	ldr	r4, [r5, #4]
 800280a:	69a3      	ldr	r3, [r4, #24]
 800280c:	60a3      	str	r3, [r4, #8]
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	071a      	lsls	r2, r3, #28
 8002812:	d52e      	bpl.n	8002872 <__swbuf_r+0x82>
 8002814:	6923      	ldr	r3, [r4, #16]
 8002816:	b363      	cbz	r3, 8002872 <__swbuf_r+0x82>
 8002818:	6923      	ldr	r3, [r4, #16]
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	b2f6      	uxtb	r6, r6
 800281e:	1ac0      	subs	r0, r0, r3
 8002820:	6963      	ldr	r3, [r4, #20]
 8002822:	4637      	mov	r7, r6
 8002824:	4283      	cmp	r3, r0
 8002826:	dc04      	bgt.n	8002832 <__swbuf_r+0x42>
 8002828:	4621      	mov	r1, r4
 800282a:	4628      	mov	r0, r5
 800282c:	f000 f948 	bl	8002ac0 <_fflush_r>
 8002830:	bb28      	cbnz	r0, 800287e <__swbuf_r+0x8e>
 8002832:	68a3      	ldr	r3, [r4, #8]
 8002834:	3001      	adds	r0, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	60a3      	str	r3, [r4, #8]
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	6022      	str	r2, [r4, #0]
 8002840:	701e      	strb	r6, [r3, #0]
 8002842:	6963      	ldr	r3, [r4, #20]
 8002844:	4283      	cmp	r3, r0
 8002846:	d004      	beq.n	8002852 <__swbuf_r+0x62>
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	07db      	lsls	r3, r3, #31
 800284c:	d519      	bpl.n	8002882 <__swbuf_r+0x92>
 800284e:	2e0a      	cmp	r6, #10
 8002850:	d117      	bne.n	8002882 <__swbuf_r+0x92>
 8002852:	4621      	mov	r1, r4
 8002854:	4628      	mov	r0, r5
 8002856:	f000 f933 	bl	8002ac0 <_fflush_r>
 800285a:	b190      	cbz	r0, 8002882 <__swbuf_r+0x92>
 800285c:	e00f      	b.n	800287e <__swbuf_r+0x8e>
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__swbuf_r+0x9c>)
 8002860:	429c      	cmp	r4, r3
 8002862:	d101      	bne.n	8002868 <__swbuf_r+0x78>
 8002864:	68ac      	ldr	r4, [r5, #8]
 8002866:	e7d0      	b.n	800280a <__swbuf_r+0x1a>
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <__swbuf_r+0xa0>)
 800286a:	429c      	cmp	r4, r3
 800286c:	bf08      	it	eq
 800286e:	68ec      	ldreq	r4, [r5, #12]
 8002870:	e7cb      	b.n	800280a <__swbuf_r+0x1a>
 8002872:	4621      	mov	r1, r4
 8002874:	4628      	mov	r0, r5
 8002876:	f000 f81f 	bl	80028b8 <__swsetup_r>
 800287a:	2800      	cmp	r0, #0
 800287c:	d0cc      	beq.n	8002818 <__swbuf_r+0x28>
 800287e:	f04f 37ff 	mov.w	r7, #4294967295
 8002882:	4638      	mov	r0, r7
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002886:	bf00      	nop
 8002888:	08002d90 	.word	0x08002d90
 800288c:	08002db0 	.word	0x08002db0
 8002890:	08002d70 	.word	0x08002d70

08002894 <_write_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4605      	mov	r5, r0
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	2200      	movs	r2, #0
 800289e:	4c05      	ldr	r4, [pc, #20]	; (80028b4 <_write_r+0x20>)
 80028a0:	6022      	str	r2, [r4, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7fd ffa8 	bl	80007f8 <_write>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_write_r+0x1e>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_write_r+0x1e>
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	200000e0 	.word	0x200000e0

080028b8 <__swsetup_r>:
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <__swsetup_r+0xcc>)
 80028ba:	b570      	push	{r4, r5, r6, lr}
 80028bc:	681d      	ldr	r5, [r3, #0]
 80028be:	4606      	mov	r6, r0
 80028c0:	460c      	mov	r4, r1
 80028c2:	b125      	cbz	r5, 80028ce <__swsetup_r+0x16>
 80028c4:	69ab      	ldr	r3, [r5, #24]
 80028c6:	b913      	cbnz	r3, 80028ce <__swsetup_r+0x16>
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7ff fb93 	bl	8001ff4 <__sinit>
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <__swsetup_r+0xd0>)
 80028d0:	429c      	cmp	r4, r3
 80028d2:	d10f      	bne.n	80028f4 <__swsetup_r+0x3c>
 80028d4:	686c      	ldr	r4, [r5, #4]
 80028d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	0715      	lsls	r5, r2, #28
 80028de:	d42c      	bmi.n	800293a <__swsetup_r+0x82>
 80028e0:	06d0      	lsls	r0, r2, #27
 80028e2:	d411      	bmi.n	8002908 <__swsetup_r+0x50>
 80028e4:	2209      	movs	r2, #9
 80028e6:	6032      	str	r2, [r6, #0]
 80028e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	f04f 30ff 	mov.w	r0, #4294967295
 80028f2:	e03e      	b.n	8002972 <__swsetup_r+0xba>
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <__swsetup_r+0xd4>)
 80028f6:	429c      	cmp	r4, r3
 80028f8:	d101      	bne.n	80028fe <__swsetup_r+0x46>
 80028fa:	68ac      	ldr	r4, [r5, #8]
 80028fc:	e7eb      	b.n	80028d6 <__swsetup_r+0x1e>
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <__swsetup_r+0xd8>)
 8002900:	429c      	cmp	r4, r3
 8002902:	bf08      	it	eq
 8002904:	68ec      	ldreq	r4, [r5, #12]
 8002906:	e7e6      	b.n	80028d6 <__swsetup_r+0x1e>
 8002908:	0751      	lsls	r1, r2, #29
 800290a:	d512      	bpl.n	8002932 <__swsetup_r+0x7a>
 800290c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800290e:	b141      	cbz	r1, 8002922 <__swsetup_r+0x6a>
 8002910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002914:	4299      	cmp	r1, r3
 8002916:	d002      	beq.n	800291e <__swsetup_r+0x66>
 8002918:	4630      	mov	r0, r6
 800291a:	f000 f981 	bl	8002c20 <_free_r>
 800291e:	2300      	movs	r3, #0
 8002920:	6363      	str	r3, [r4, #52]	; 0x34
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	6063      	str	r3, [r4, #4]
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	81a3      	strh	r3, [r4, #12]
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	b94b      	cbnz	r3, 8002952 <__swsetup_r+0x9a>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d003      	beq.n	8002952 <__swsetup_r+0x9a>
 800294a:	4621      	mov	r1, r4
 800294c:	4630      	mov	r0, r6
 800294e:	f000 f917 	bl	8002b80 <__smakebuf_r>
 8002952:	89a2      	ldrh	r2, [r4, #12]
 8002954:	f012 0301 	ands.w	r3, r2, #1
 8002958:	d00c      	beq.n	8002974 <__swsetup_r+0xbc>
 800295a:	2300      	movs	r3, #0
 800295c:	60a3      	str	r3, [r4, #8]
 800295e:	6963      	ldr	r3, [r4, #20]
 8002960:	425b      	negs	r3, r3
 8002962:	61a3      	str	r3, [r4, #24]
 8002964:	6923      	ldr	r3, [r4, #16]
 8002966:	b953      	cbnz	r3, 800297e <__swsetup_r+0xc6>
 8002968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800296c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002970:	d1ba      	bne.n	80028e8 <__swsetup_r+0x30>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	0792      	lsls	r2, r2, #30
 8002976:	bf58      	it	pl
 8002978:	6963      	ldrpl	r3, [r4, #20]
 800297a:	60a3      	str	r3, [r4, #8]
 800297c:	e7f2      	b.n	8002964 <__swsetup_r+0xac>
 800297e:	2000      	movs	r0, #0
 8002980:	e7f7      	b.n	8002972 <__swsetup_r+0xba>
 8002982:	bf00      	nop
 8002984:	2000000c 	.word	0x2000000c
 8002988:	08002d90 	.word	0x08002d90
 800298c:	08002db0 	.word	0x08002db0
 8002990:	08002d70 	.word	0x08002d70

08002994 <_close_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	2300      	movs	r3, #0
 8002998:	4c05      	ldr	r4, [pc, #20]	; (80029b0 <_close_r+0x1c>)
 800299a:	4605      	mov	r5, r0
 800299c:	4608      	mov	r0, r1
 800299e:	6023      	str	r3, [r4, #0]
 80029a0:	f7fd ff46 	bl	8000830 <_close>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d102      	bne.n	80029ae <_close_r+0x1a>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	b103      	cbz	r3, 80029ae <_close_r+0x1a>
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	200000e0 	.word	0x200000e0

080029b4 <__sflush_r>:
 80029b4:	898a      	ldrh	r2, [r1, #12]
 80029b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ba:	4605      	mov	r5, r0
 80029bc:	0710      	lsls	r0, r2, #28
 80029be:	460c      	mov	r4, r1
 80029c0:	d458      	bmi.n	8002a74 <__sflush_r+0xc0>
 80029c2:	684b      	ldr	r3, [r1, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	dc05      	bgt.n	80029d4 <__sflush_r+0x20>
 80029c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	dc02      	bgt.n	80029d4 <__sflush_r+0x20>
 80029ce:	2000      	movs	r0, #0
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d0f9      	beq.n	80029ce <__sflush_r+0x1a>
 80029da:	2300      	movs	r3, #0
 80029dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029e0:	682f      	ldr	r7, [r5, #0]
 80029e2:	6a21      	ldr	r1, [r4, #32]
 80029e4:	602b      	str	r3, [r5, #0]
 80029e6:	d032      	beq.n	8002a4e <__sflush_r+0x9a>
 80029e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	075a      	lsls	r2, r3, #29
 80029ee:	d505      	bpl.n	80029fc <__sflush_r+0x48>
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	1ac0      	subs	r0, r0, r3
 80029f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029f6:	b10b      	cbz	r3, 80029fc <__sflush_r+0x48>
 80029f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029fa:	1ac0      	subs	r0, r0, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	4602      	mov	r2, r0
 8002a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a02:	6a21      	ldr	r1, [r4, #32]
 8002a04:	4628      	mov	r0, r5
 8002a06:	47b0      	blx	r6
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	d106      	bne.n	8002a1c <__sflush_r+0x68>
 8002a0e:	6829      	ldr	r1, [r5, #0]
 8002a10:	291d      	cmp	r1, #29
 8002a12:	d848      	bhi.n	8002aa6 <__sflush_r+0xf2>
 8002a14:	4a29      	ldr	r2, [pc, #164]	; (8002abc <__sflush_r+0x108>)
 8002a16:	40ca      	lsrs	r2, r1
 8002a18:	07d6      	lsls	r6, r2, #31
 8002a1a:	d544      	bpl.n	8002aa6 <__sflush_r+0xf2>
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	6062      	str	r2, [r4, #4]
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	04d9      	lsls	r1, r3, #19
 8002a24:	6022      	str	r2, [r4, #0]
 8002a26:	d504      	bpl.n	8002a32 <__sflush_r+0x7e>
 8002a28:	1c42      	adds	r2, r0, #1
 8002a2a:	d101      	bne.n	8002a30 <__sflush_r+0x7c>
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	b903      	cbnz	r3, 8002a32 <__sflush_r+0x7e>
 8002a30:	6560      	str	r0, [r4, #84]	; 0x54
 8002a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a34:	602f      	str	r7, [r5, #0]
 8002a36:	2900      	cmp	r1, #0
 8002a38:	d0c9      	beq.n	80029ce <__sflush_r+0x1a>
 8002a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a3e:	4299      	cmp	r1, r3
 8002a40:	d002      	beq.n	8002a48 <__sflush_r+0x94>
 8002a42:	4628      	mov	r0, r5
 8002a44:	f000 f8ec 	bl	8002c20 <_free_r>
 8002a48:	2000      	movs	r0, #0
 8002a4a:	6360      	str	r0, [r4, #52]	; 0x34
 8002a4c:	e7c0      	b.n	80029d0 <__sflush_r+0x1c>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4628      	mov	r0, r5
 8002a52:	47b0      	blx	r6
 8002a54:	1c41      	adds	r1, r0, #1
 8002a56:	d1c8      	bne.n	80029ea <__sflush_r+0x36>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0c5      	beq.n	80029ea <__sflush_r+0x36>
 8002a5e:	2b1d      	cmp	r3, #29
 8002a60:	d001      	beq.n	8002a66 <__sflush_r+0xb2>
 8002a62:	2b16      	cmp	r3, #22
 8002a64:	d101      	bne.n	8002a6a <__sflush_r+0xb6>
 8002a66:	602f      	str	r7, [r5, #0]
 8002a68:	e7b1      	b.n	80029ce <__sflush_r+0x1a>
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	e7ad      	b.n	80029d0 <__sflush_r+0x1c>
 8002a74:	690f      	ldr	r7, [r1, #16]
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d0a9      	beq.n	80029ce <__sflush_r+0x1a>
 8002a7a:	0793      	lsls	r3, r2, #30
 8002a7c:	bf18      	it	ne
 8002a7e:	2300      	movne	r3, #0
 8002a80:	680e      	ldr	r6, [r1, #0]
 8002a82:	bf08      	it	eq
 8002a84:	694b      	ldreq	r3, [r1, #20]
 8002a86:	eba6 0807 	sub.w	r8, r6, r7
 8002a8a:	600f      	str	r7, [r1, #0]
 8002a8c:	608b      	str	r3, [r1, #8]
 8002a8e:	f1b8 0f00 	cmp.w	r8, #0
 8002a92:	dd9c      	ble.n	80029ce <__sflush_r+0x1a>
 8002a94:	4643      	mov	r3, r8
 8002a96:	463a      	mov	r2, r7
 8002a98:	6a21      	ldr	r1, [r4, #32]
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a9e:	47b0      	blx	r6
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	dc06      	bgt.n	8002ab2 <__sflush_r+0xfe>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	e78e      	b.n	80029d0 <__sflush_r+0x1c>
 8002ab2:	4407      	add	r7, r0
 8002ab4:	eba8 0800 	sub.w	r8, r8, r0
 8002ab8:	e7e9      	b.n	8002a8e <__sflush_r+0xda>
 8002aba:	bf00      	nop
 8002abc:	20400001 	.word	0x20400001

08002ac0 <_fflush_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	690b      	ldr	r3, [r1, #16]
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	b1db      	cbz	r3, 8002b02 <_fflush_r+0x42>
 8002aca:	b118      	cbz	r0, 8002ad4 <_fflush_r+0x14>
 8002acc:	6983      	ldr	r3, [r0, #24]
 8002ace:	b90b      	cbnz	r3, 8002ad4 <_fflush_r+0x14>
 8002ad0:	f7ff fa90 	bl	8001ff4 <__sinit>
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <_fflush_r+0x48>)
 8002ad6:	429c      	cmp	r4, r3
 8002ad8:	d109      	bne.n	8002aee <_fflush_r+0x2e>
 8002ada:	686c      	ldr	r4, [r5, #4]
 8002adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae0:	b17b      	cbz	r3, 8002b02 <_fflush_r+0x42>
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aea:	f7ff bf63 	b.w	80029b4 <__sflush_r>
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <_fflush_r+0x4c>)
 8002af0:	429c      	cmp	r4, r3
 8002af2:	d101      	bne.n	8002af8 <_fflush_r+0x38>
 8002af4:	68ac      	ldr	r4, [r5, #8]
 8002af6:	e7f1      	b.n	8002adc <_fflush_r+0x1c>
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <_fflush_r+0x50>)
 8002afa:	429c      	cmp	r4, r3
 8002afc:	bf08      	it	eq
 8002afe:	68ec      	ldreq	r4, [r5, #12]
 8002b00:	e7ec      	b.n	8002adc <_fflush_r+0x1c>
 8002b02:	2000      	movs	r0, #0
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
 8002b06:	bf00      	nop
 8002b08:	08002d90 	.word	0x08002d90
 8002b0c:	08002db0 	.word	0x08002db0
 8002b10:	08002d70 	.word	0x08002d70

08002b14 <_lseek_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4605      	mov	r5, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4c05      	ldr	r4, [pc, #20]	; (8002b34 <_lseek_r+0x20>)
 8002b20:	6022      	str	r2, [r4, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7fd fea8 	bl	8000878 <_lseek>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	d102      	bne.n	8002b32 <_lseek_r+0x1e>
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	b103      	cbz	r3, 8002b32 <_lseek_r+0x1e>
 8002b30:	602b      	str	r3, [r5, #0]
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
 8002b34:	200000e0 	.word	0x200000e0

08002b38 <__swhatbuf_r>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	460e      	mov	r6, r1
 8002b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b40:	b096      	sub	sp, #88	; 0x58
 8002b42:	2900      	cmp	r1, #0
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	da07      	bge.n	8002b5a <__swhatbuf_r+0x22>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	89b3      	ldrh	r3, [r6, #12]
 8002b50:	061a      	lsls	r2, r3, #24
 8002b52:	d410      	bmi.n	8002b76 <__swhatbuf_r+0x3e>
 8002b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b58:	e00e      	b.n	8002b78 <__swhatbuf_r+0x40>
 8002b5a:	466a      	mov	r2, sp
 8002b5c:	f000 f8be 	bl	8002cdc <_fstat_r>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	dbf2      	blt.n	8002b4a <__swhatbuf_r+0x12>
 8002b64:	9a01      	ldr	r2, [sp, #4]
 8002b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b6e:	425a      	negs	r2, r3
 8002b70:	415a      	adcs	r2, r3
 8002b72:	602a      	str	r2, [r5, #0]
 8002b74:	e7ee      	b.n	8002b54 <__swhatbuf_r+0x1c>
 8002b76:	2340      	movs	r3, #64	; 0x40
 8002b78:	2000      	movs	r0, #0
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	b016      	add	sp, #88	; 0x58
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}

08002b80 <__smakebuf_r>:
 8002b80:	898b      	ldrh	r3, [r1, #12]
 8002b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b84:	079d      	lsls	r5, r3, #30
 8002b86:	4606      	mov	r6, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	d507      	bpl.n	8002b9c <__smakebuf_r+0x1c>
 8002b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	6123      	str	r3, [r4, #16]
 8002b94:	2301      	movs	r3, #1
 8002b96:	6163      	str	r3, [r4, #20]
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	ab01      	add	r3, sp, #4
 8002b9e:	466a      	mov	r2, sp
 8002ba0:	f7ff ffca 	bl	8002b38 <__swhatbuf_r>
 8002ba4:	9900      	ldr	r1, [sp, #0]
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	4630      	mov	r0, r6
 8002baa:	f7ff faad 	bl	8002108 <_malloc_r>
 8002bae:	b948      	cbnz	r0, 8002bc4 <__smakebuf_r+0x44>
 8002bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bb4:	059a      	lsls	r2, r3, #22
 8002bb6:	d4ef      	bmi.n	8002b98 <__smakebuf_r+0x18>
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	e7e3      	b.n	8002b8c <__smakebuf_r+0xc>
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <__smakebuf_r+0x7c>)
 8002bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	6020      	str	r0, [r4, #0]
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	9b00      	ldr	r3, [sp, #0]
 8002bd4:	6120      	str	r0, [r4, #16]
 8002bd6:	6163      	str	r3, [r4, #20]
 8002bd8:	9b01      	ldr	r3, [sp, #4]
 8002bda:	b15b      	cbz	r3, 8002bf4 <__smakebuf_r+0x74>
 8002bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002be0:	4630      	mov	r0, r6
 8002be2:	f000 f88d 	bl	8002d00 <_isatty_r>
 8002be6:	b128      	cbz	r0, 8002bf4 <__smakebuf_r+0x74>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	431d      	orrs	r5, r3
 8002bf8:	81a5      	strh	r5, [r4, #12]
 8002bfa:	e7cd      	b.n	8002b98 <__smakebuf_r+0x18>
 8002bfc:	08001fbd 	.word	0x08001fbd

08002c00 <memchr>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	4402      	add	r2, r0
 8002c06:	4290      	cmp	r0, r2
 8002c08:	4603      	mov	r3, r0
 8002c0a:	d101      	bne.n	8002c10 <memchr+0x10>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e003      	b.n	8002c18 <memchr+0x18>
 8002c10:	781c      	ldrb	r4, [r3, #0]
 8002c12:	3001      	adds	r0, #1
 8002c14:	428c      	cmp	r4, r1
 8002c16:	d1f6      	bne.n	8002c06 <memchr+0x6>
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd10      	pop	{r4, pc}

08002c1c <__malloc_lock>:
 8002c1c:	4770      	bx	lr

08002c1e <__malloc_unlock>:
 8002c1e:	4770      	bx	lr

08002c20 <_free_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4605      	mov	r5, r0
 8002c24:	2900      	cmp	r1, #0
 8002c26:	d043      	beq.n	8002cb0 <_free_r+0x90>
 8002c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c2c:	1f0c      	subs	r4, r1, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bfb8      	it	lt
 8002c32:	18e4      	addlt	r4, r4, r3
 8002c34:	f7ff fff2 	bl	8002c1c <__malloc_lock>
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <_free_r+0x94>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	b933      	cbnz	r3, 8002c4e <_free_r+0x2e>
 8002c40:	6063      	str	r3, [r4, #4]
 8002c42:	6014      	str	r4, [r2, #0]
 8002c44:	4628      	mov	r0, r5
 8002c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4a:	f7ff bfe8 	b.w	8002c1e <__malloc_unlock>
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	d90b      	bls.n	8002c6a <_free_r+0x4a>
 8002c52:	6821      	ldr	r1, [r4, #0]
 8002c54:	1862      	adds	r2, r4, r1
 8002c56:	4293      	cmp	r3, r2
 8002c58:	bf01      	itttt	eq
 8002c5a:	681a      	ldreq	r2, [r3, #0]
 8002c5c:	685b      	ldreq	r3, [r3, #4]
 8002c5e:	1852      	addeq	r2, r2, r1
 8002c60:	6022      	streq	r2, [r4, #0]
 8002c62:	6063      	str	r3, [r4, #4]
 8002c64:	6004      	str	r4, [r0, #0]
 8002c66:	e7ed      	b.n	8002c44 <_free_r+0x24>
 8002c68:	4613      	mov	r3, r2
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	b10a      	cbz	r2, 8002c72 <_free_r+0x52>
 8002c6e:	42a2      	cmp	r2, r4
 8002c70:	d9fa      	bls.n	8002c68 <_free_r+0x48>
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	1858      	adds	r0, r3, r1
 8002c76:	42a0      	cmp	r0, r4
 8002c78:	d10b      	bne.n	8002c92 <_free_r+0x72>
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	4401      	add	r1, r0
 8002c7e:	1858      	adds	r0, r3, r1
 8002c80:	4282      	cmp	r2, r0
 8002c82:	6019      	str	r1, [r3, #0]
 8002c84:	d1de      	bne.n	8002c44 <_free_r+0x24>
 8002c86:	6810      	ldr	r0, [r2, #0]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	4401      	add	r1, r0
 8002c8c:	6019      	str	r1, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e7d8      	b.n	8002c44 <_free_r+0x24>
 8002c92:	d902      	bls.n	8002c9a <_free_r+0x7a>
 8002c94:	230c      	movs	r3, #12
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	e7d4      	b.n	8002c44 <_free_r+0x24>
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	1821      	adds	r1, r4, r0
 8002c9e:	428a      	cmp	r2, r1
 8002ca0:	bf01      	itttt	eq
 8002ca2:	6811      	ldreq	r1, [r2, #0]
 8002ca4:	6852      	ldreq	r2, [r2, #4]
 8002ca6:	1809      	addeq	r1, r1, r0
 8002ca8:	6021      	streq	r1, [r4, #0]
 8002caa:	6062      	str	r2, [r4, #4]
 8002cac:	605c      	str	r4, [r3, #4]
 8002cae:	e7c9      	b.n	8002c44 <_free_r+0x24>
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000090 	.word	0x20000090

08002cb8 <_read_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4605      	mov	r5, r0
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4c05      	ldr	r4, [pc, #20]	; (8002cd8 <_read_r+0x20>)
 8002cc4:	6022      	str	r2, [r4, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f7fd fd79 	bl	80007be <_read>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_read_r+0x1e>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_read_r+0x1e>
 8002cd4:	602b      	str	r3, [r5, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	200000e0 	.word	0x200000e0

08002cdc <_fstat_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4c06      	ldr	r4, [pc, #24]	; (8002cfc <_fstat_r+0x20>)
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	f7fd fdac 	bl	8000846 <_fstat>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d102      	bne.n	8002cf8 <_fstat_r+0x1c>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	b103      	cbz	r3, 8002cf8 <_fstat_r+0x1c>
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200000e0 	.word	0x200000e0

08002d00 <_isatty_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	2300      	movs	r3, #0
 8002d04:	4c05      	ldr	r4, [pc, #20]	; (8002d1c <_isatty_r+0x1c>)
 8002d06:	4605      	mov	r5, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	f7fd fdaa 	bl	8000864 <_isatty>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_isatty_r+0x1a>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_isatty_r+0x1a>
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	200000e0 	.word	0x200000e0

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
